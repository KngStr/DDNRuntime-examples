//----------------------------------------------------------------------------
//  System.Private.Xml.dll: System.Private.Xml, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Private.Xml
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Private.Xml;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Private.Uri,
  DDNC.System.Collections.NonGeneric,
  DDNC.System.Collections.Specialized,
  DDNC.System.Net.Primitives;

type

{ enums }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    Auto = 0;
    Fragment = 1;
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    Prohibit = 0;
    Ignore = 1;
    Parse = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.EntityHandling')]
  DNEntityHandling = type Integer;
  DNEntityHandlingHelper = record helper for DNEntityHandling
  public const
    ExpandEntities = 1;
    ExpandCharEntities = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.Formatting')]
  DNFormatting = type Integer;
  DNFormattingHelper = record helper for DNFormatting
  public const
    None = 0;
    Indented = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NamespaceHandling')]
  DNNamespaceHandling = type Integer;
  DNNamespaceHandlingHelper = record helper for DNNamespaceHandling
  public const
    Default_ = 0;
    OmitDuplicates = 1;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.NewLineHandling')]
  DNNewLineHandling = type Integer;
  DNNewLineHandlingHelper = record helper for DNNewLineHandling
  public const
    Replace = 0;
    Entitize = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ReadState')]
  DNReadState = type Integer;
  DNReadStateHelper = record helper for DNReadState
  public const
    Initial = 0;
    Interactive = 1;
    Error = 2;
    EndOfFile = 3;
    Closed = 4;
  end;


  //-------------namespace: System.Xml.Resolvers----------------
  [DNTypeName('System.Xml.Resolvers.XmlKnownDtds')]
  DNXmlKnownDtds = type Integer;
  DNXmlKnownDtdsHelper = record helper for DNXmlKnownDtds
  public const
    None = 0;
    Xhtml10 = 1;
    Rss091 = 2;
    All = 65535;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentProcessing')]
  DNXmlSchemaContentProcessing = type Integer;
  DNXmlSchemaContentProcessingHelper = record helper for DNXmlSchemaContentProcessing
  public const
    None = 0;
    Skip = 1;
    Lax = 2;
    Strict_ = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaContentType')]
  DNXmlSchemaContentType = type Integer;
  DNXmlSchemaContentTypeHelper = record helper for DNXmlSchemaContentType
  public const
    TextOnly = 0;
    Empty = 1;
    ElementOnly = 2;
    Mixed = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDatatypeVariety')]
  DNXmlSchemaDatatypeVariety = type Integer;
  DNXmlSchemaDatatypeVarietyHelper = record helper for DNXmlSchemaDatatypeVariety
  public const
    Atomic = 0;
    List = 1;
    Union = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaDerivationMethod')]
  DNXmlSchemaDerivationMethod = type Integer;
  DNXmlSchemaDerivationMethodHelper = record helper for DNXmlSchemaDerivationMethod
  public const
    Empty = 0;
    Substitution = 1;
    Extension = 2;
    Restriction = 4;
    List = 8;
    Union = 16;
    All = 255;
    None = 256;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaForm')]
  DNXmlSchemaForm = type Integer;
  DNXmlSchemaFormHelper = record helper for DNXmlSchemaForm
  public const
    None = 0;
    Qualified = 1;
    Unqualified = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaInference+InferenceOption')]
  DNXmlSchemaInference_InferenceOption = type Integer;
  DNXmlSchemaInference_InferenceOptionHelper = record helper for DNXmlSchemaInference_InferenceOption
  public const
    Restricted = 0;
    Relaxed = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaUse')]
  DNXmlSchemaUse = type Integer;
  DNXmlSchemaUseHelper = record helper for DNXmlSchemaUse
  public const
    None = 0;
    Optional = 1;
    Prohibited = 2;
    Required = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    None = 0;
    ProcessInlineSchema = 1;
    ProcessSchemaLocation = 2;
    ReportValidationWarnings = 4;
    ProcessIdentityConstraints = 8;
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSchemaValidity')]
  DNXmlSchemaValidity = type Integer;
  DNXmlSchemaValidityHelper = record helper for DNXmlSchemaValidity
  public const
    NotKnown = 0;
    Valid = 1;
    Invalid = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlSeverityType')]
  DNXmlSeverityType = type Integer;
  DNXmlSeverityTypeHelper = record helper for DNXmlSeverityType
  public const
    Error = 0;
    Warning = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.XmlTypeCode')]
  DNXmlTypeCode = type Integer;
  DNXmlTypeCodeHelper = record helper for DNXmlTypeCode
  public const
    None = 0;
    Item = 1;
    Node = 2;
    Document = 3;
    Element = 4;
    Attribute = 5;
    Namespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Text = 9;
    AnyAtomicType = 10;
    UntypedAtomic = 11;
    String_ = 12;
    Boolean = 13;
    Decimal = 14;
    Float = 15;
    Double = 16;
    Duration = 17;
    DateTime = 18;
    Time = 19;
    Date = 20;
    GYearMonth = 21;
    GYear = 22;
    GMonthDay = 23;
    GDay = 24;
    GMonth = 25;
    HexBinary = 26;
    Base64Binary = 27;
    AnyUri = 28;
    QName = 29;
    Notation = 30;
    NormalizedString = 31;
    Token = 32;
    Language = 33;
    NmToken = 34;
    Name = 35;
    NCName = 36;
    Id = 37;
    Idref = 38;
    Entity = 39;
    Integer = 40;
    NonPositiveInteger = 41;
    NegativeInteger = 42;
    Long = 43;
    Int = 44;
    Short = 45;
    Byte = 46;
    NonNegativeInteger = 47;
    UnsignedLong = 48;
    UnsignedInt = 49;
    UnsignedShort = 50;
    UnsignedByte = 51;
    PositiveInteger = 52;
    YearMonthDuration = 53;
    DayTimeDuration = 54;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.CodeGenerationOptions')]
  DNCodeGenerationOptions = type Integer;
  DNCodeGenerationOptionsHelper = record helper for DNCodeGenerationOptions
  public const
    None = 0;
    GenerateProperties = 1;
    GenerateNewAsync = 2;
    GenerateOldAsync = 4;
    GenerateOrder = 8;
    EnableDataBinding = 16;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.XmlMappingAccess')]
  DNXmlMappingAccess = type Integer;
  DNXmlMappingAccessHelper = record helper for DNXmlMappingAccess
  public const
    None = 0;
    Read = 1;
    Write = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    None = 0;
    Auto = 1;
    DTD = 2;
    XDR = 3;
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WhitespaceHandling')]
  DNWhitespaceHandling = type Integer;
  DNWhitespaceHandlingHelper = record helper for DNWhitespaceHandling
  public const
    All = 0;
    Significant = 1;
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.WriteState')]
  DNWriteState = type Integer;
  DNWriteStateHelper = record helper for DNWriteState
  public const
    Start = 0;
    Prolog = 1;
    Element = 2;
    Attribute = 3;
    Content = 4;
    Closed = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlDateTimeSerializationMode')]
  DNXmlDateTimeSerializationMode = type Integer;
  DNXmlDateTimeSerializationModeHelper = record helper for DNXmlDateTimeSerializationMode
  public const
    Local = 0;
    Utc = 1;
    Unspecified = 2;
    RoundtripKind = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeChangedAction')]
  DNXmlNodeChangedAction = type Integer;
  DNXmlNodeChangedActionHelper = record helper for DNXmlNodeChangedAction
  public const
    Insert = 0;
    Remove = 1;
    Change = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    Before = 0;
    After = 1;
    Same = 2;
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    None = 0;
    Element = 1;
    Attribute = 2;
    Text = 3;
    CDATA = 4;
    EntityReference = 5;
    Entity = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    Document = 9;
    DocumentType = 10;
    DocumentFragment = 11;
    Notation = 12;
    Whitespace = 13;
    SignificantWhitespace = 14;
    EndElement = 15;
    EndEntity = 16;
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlOutputMethod')]
  DNXmlOutputMethod = type Integer;
  DNXmlOutputMethodHelper = record helper for DNXmlOutputMethod
  public const
    Xml = 0;
    Html = 1;
    Text = 2;
    AutoDetect = 3;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlSpace')]
  DNXmlSpace = type Integer;
  DNXmlSpaceHelper = record helper for DNXmlSpace
  public const
    None = 0;
    Default_ = 1;
    Preserve = 2;
  end;


  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.XmlTokenizedType')]
  DNXmlTokenizedType = type Integer;
  DNXmlTokenizedTypeHelper = record helper for DNXmlTokenizedType
  public const
    CDATA = 0;
    ID = 1;
    IDREF = 2;
    IDREFS = 3;
    ENTITY = 4;
    ENTITIES = 5;
    NMTOKEN = 6;
    NMTOKENS = 7;
    NOTATION = 8;
    ENUMERATION = 9;
    QName = 10;
    NCName = 11;
    None = 12;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlCaseOrder')]
  DNXmlCaseOrder = type Integer;
  DNXmlCaseOrderHelper = record helper for DNXmlCaseOrder
  public const
    None = 0;
    UpperFirst = 1;
    LowerFirst = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlDataType')]
  DNXmlDataType = type Integer;
  DNXmlDataTypeHelper = record helper for DNXmlDataType
  public const
    Text = 1;
    Number = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XmlSortOrder')]
  DNXmlSortOrder = type Integer;
  DNXmlSortOrderHelper = record helper for DNXmlSortOrder
  public const
    Ascending = 1;
    Descending = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    All = 0;
    ExcludeXml = 1;
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    Root = 0;
    Element = 1;
    Attribute = 2;
    Namespace = 3;
    Text = 4;
    SignificantWhitespace = 5;
    Whitespace = 6;
    ProcessingInstruction = 7;
    Comment = 8;
    All = 9;
  end;


  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.XPathResultType')]
  DNXPathResultType = type Integer;
  DNXPathResultTypeHelper = record helper for DNXPathResultType
  public const
    Number = 0;
    String_ = 1;
    Navigator = 1;
    Boolean = 2;
    NodeSet = 3;
    Any = 5;
    Error = 6;
  end;


  //-------------namespace: System.Xml.Xsl.Runtime----------------
  [DNTypeName('System.Xml.Xsl.Runtime.IteratorResult')]
  DNIteratorResult = type Integer;
  DNIteratorResultHelper = record helper for DNIteratorResult
  public const
    NoMoreNodes = 0;
    NeedInputNode = 1;
    HaveCurrentNode = 2;
  end;


  //-------------namespace: System.Xml.Xsl.Runtime----------------
  [DNTypeName('System.Xml.Xsl.Runtime.SetIteratorResult')]
  DNSetIteratorResult = type Integer;
  DNSetIteratorResultHelper = record helper for DNSetIteratorResult
  public const
    NoMoreNodes = 0;
    InitRightIterator = 1;
    NeedLeftNode = 2;
    NeedRightNode = 3;
    HaveCurrentNode = 4;
  end;




type


{ declares }

  DNIApplicationResourceStreamResolver = interface; // type: System.Xml.IApplicationResourceStreamResolver, namespace: System.Xml
  DNIHasXmlNode = interface; // type: System.Xml.IHasXmlNode, namespace: System.Xml
  DNIXmlLineInfo = interface; // type: System.Xml.IXmlLineInfo, namespace: System.Xml
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNIXmlSerializable = interface; // type: System.Xml.Serialization.IXmlSerializable, namespace: System.Xml.Serialization
  DNIXmlTextParser = interface; // type: System.Xml.Serialization.IXmlTextParser, namespace: System.Xml.Serialization
  DNIXPathNavigable = interface; // type: System.Xml.XPath.IXPathNavigable, namespace: System.Xml.XPath
  DNIXsltContextFunction = interface; // type: System.Xml.Xsl.IXsltContextFunction, namespace: System.Xml.Xsl
  DNIXsltContextVariable = interface; // type: System.Xml.Xsl.IXsltContextVariable, namespace: System.Xml.Xsl
  DNSoapAttributeAttribute = interface; // type: System.Xml.Serialization.SoapAttributeAttribute, namespace: System.Xml.Serialization
  DNSoapElementAttribute = interface; // type: System.Xml.Serialization.SoapElementAttribute, namespace: System.Xml.Serialization
  DNSoapEnumAttribute = interface; // type: System.Xml.Serialization.SoapEnumAttribute, namespace: System.Xml.Serialization
  DNSoapIgnoreAttribute = interface; // type: System.Xml.Serialization.SoapIgnoreAttribute, namespace: System.Xml.Serialization
  DNSoapIncludeAttribute = interface; // type: System.Xml.Serialization.SoapIncludeAttribute, namespace: System.Xml.Serialization
  DNSoapTypeAttribute = interface; // type: System.Xml.Serialization.SoapTypeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAnyAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyElementAttribute = interface; // type: System.Xml.Serialization.XmlAnyElementAttribute, namespace: System.Xml.Serialization
  DNXmlArrayAttribute = interface; // type: System.Xml.Serialization.XmlArrayAttribute, namespace: System.Xml.Serialization
  DNXmlArrayItemAttribute = interface; // type: System.Xml.Serialization.XmlArrayItemAttribute, namespace: System.Xml.Serialization
  DNXmlAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlChoiceIdentifierAttribute = interface; // type: System.Xml.Serialization.XmlChoiceIdentifierAttribute, namespace: System.Xml.Serialization
  DNXmlElementAttribute = interface; // type: System.Xml.Serialization.XmlElementAttribute, namespace: System.Xml.Serialization
  DNXmlEnumAttribute = interface; // type: System.Xml.Serialization.XmlEnumAttribute, namespace: System.Xml.Serialization
  DNXmlIgnoreAttribute = interface; // type: System.Xml.Serialization.XmlIgnoreAttribute, namespace: System.Xml.Serialization
  DNXmlIncludeAttribute = interface; // type: System.Xml.Serialization.XmlIncludeAttribute, namespace: System.Xml.Serialization
  DNXmlNamespaceDeclarationsAttribute = interface; // type: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute, namespace: System.Xml.Serialization
  DNXmlRootAttribute = interface; // type: System.Xml.Serialization.XmlRootAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaProviderAttribute = interface; // type: System.Xml.Serialization.XmlSchemaProviderAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerAssemblyAttribute = interface; // type: System.Xml.Serialization.XmlSerializerAssemblyAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerVersionAttribute = interface; // type: System.Xml.Serialization.XmlSerializerVersionAttribute, namespace: System.Xml.Serialization
  DNXmlTextAttribute = interface; // type: System.Xml.Serialization.XmlTextAttribute, namespace: System.Xml.Serialization
  DNXmlTypeAttribute = interface; // type: System.Xml.Serialization.XmlTypeAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaObjectCollection = interface; // type: System.Xml.Schema.XmlSchemaObjectCollection, namespace: System.Xml.Schema
  DNXmlAnyElementAttributes = interface; // type: System.Xml.Serialization.XmlAnyElementAttributes, namespace: System.Xml.Serialization
  DNXmlArrayItemAttributes = interface; // type: System.Xml.Serialization.XmlArrayItemAttributes, namespace: System.Xml.Serialization
  DNXmlElementAttributes = interface; // type: System.Xml.Serialization.XmlElementAttributes, namespace: System.Xml.Serialization
  DNXmlSchemas = interface; // type: System.Xml.Serialization.XmlSchemas, namespace: System.Xml.Serialization
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNUnreferencedObjectEventArgs = interface; // type: System.Xml.Serialization.UnreferencedObjectEventArgs, namespace: System.Xml.Serialization
  DNXmlAttributeEventArgs = interface; // type: System.Xml.Serialization.XmlAttributeEventArgs, namespace: System.Xml.Serialization
  DNXmlElementEventArgs = interface; // type: System.Xml.Serialization.XmlElementEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeEventArgs = interface; // type: System.Xml.Serialization.XmlNodeEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNXsltMessageEncounteredEventArgs = interface; // type: System.Xml.Xsl.XsltMessageEncounteredEventArgs, namespace: System.Xml.Xsl
  DNXmlSchemaException = interface; // type: System.Xml.Schema.XmlSchemaException, namespace: System.Xml.Schema
  DNXmlSchemaInferenceException = interface; // type: System.Xml.Schema.XmlSchemaInferenceException, namespace: System.Xml.Schema
  DNXmlSchemaValidationException = interface; // type: System.Xml.Schema.XmlSchemaValidationException, namespace: System.Xml.Schema
  DNXmlException = interface; // type: System.Xml.XmlException, namespace: System.Xml
  DNXPathException = interface; // type: System.Xml.XPath.XPathException, namespace: System.Xml.XPath
  DNXsltException = interface; // type: System.Xml.Xsl.XsltException, namespace: System.Xml.Xsl
  DNXsltCompileException = interface; // type: System.Xml.Xsl.XsltCompileException, namespace: System.Xml.Xsl
  DNXmlDeserializationEvents = interface; // type: System.Xml.Serialization.XmlDeserializationEvents, namespace: System.Xml.Serialization
  DNAncestorDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.AncestorDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNAncestorIterator = interface; // type: System.Xml.Xsl.Runtime.AncestorIterator, namespace: System.Xml.Xsl.Runtime
  DNAttributeContentIterator = interface; // type: System.Xml.Xsl.Runtime.AttributeContentIterator, namespace: System.Xml.Xsl.Runtime
  DNAttributeIterator = interface; // type: System.Xml.Xsl.Runtime.AttributeIterator, namespace: System.Xml.Xsl.Runtime
  DNContentIterator = interface; // type: System.Xml.Xsl.Runtime.ContentIterator, namespace: System.Xml.Xsl.Runtime
  DNContentMergeIterator = interface; // type: System.Xml.Xsl.Runtime.ContentMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNDecimalAggregator = interface; // type: System.Xml.Xsl.Runtime.DecimalAggregator, namespace: System.Xml.Xsl.Runtime
  DNDescendantIterator = interface; // type: System.Xml.Xsl.Runtime.DescendantIterator, namespace: System.Xml.Xsl.Runtime
  DNDescendantMergeIterator = interface; // type: System.Xml.Xsl.Runtime.DescendantMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNDifferenceIterator = interface; // type: System.Xml.Xsl.Runtime.DifferenceIterator, namespace: System.Xml.Xsl.Runtime
  DNDodSequenceMerge = interface; // type: System.Xml.Xsl.Runtime.DodSequenceMerge, namespace: System.Xml.Xsl.Runtime
  DNDoubleAggregator = interface; // type: System.Xml.Xsl.Runtime.DoubleAggregator, namespace: System.Xml.Xsl.Runtime
  DNElementContentIterator = interface; // type: System.Xml.Xsl.Runtime.ElementContentIterator, namespace: System.Xml.Xsl.Runtime
  DNFollowingSiblingIterator = interface; // type: System.Xml.Xsl.Runtime.FollowingSiblingIterator, namespace: System.Xml.Xsl.Runtime
  DNFollowingSiblingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNIdIterator = interface; // type: System.Xml.Xsl.Runtime.IdIterator, namespace: System.Xml.Xsl.Runtime
  DNInt32Aggregator = interface; // type: System.Xml.Xsl.Runtime.Int32Aggregator, namespace: System.Xml.Xsl.Runtime
  DNInt64Aggregator = interface; // type: System.Xml.Xsl.Runtime.Int64Aggregator, namespace: System.Xml.Xsl.Runtime
  DNIntersectIterator = interface; // type: System.Xml.Xsl.Runtime.IntersectIterator, namespace: System.Xml.Xsl.Runtime
  DNNamespaceIterator = interface; // type: System.Xml.Xsl.Runtime.NamespaceIterator, namespace: System.Xml.Xsl.Runtime
  DNNodeKindContentIterator = interface; // type: System.Xml.Xsl.Runtime.NodeKindContentIterator, namespace: System.Xml.Xsl.Runtime
  DNNodeRangeIterator = interface; // type: System.Xml.Xsl.Runtime.NodeRangeIterator, namespace: System.Xml.Xsl.Runtime
  DNParentIterator = interface; // type: System.Xml.Xsl.Runtime.ParentIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingSiblingDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNPrecedingSiblingIterator = interface; // type: System.Xml.Xsl.Runtime.PrecedingSiblingIterator, namespace: System.Xml.Xsl.Runtime
  DNStringConcat = interface; // type: System.Xml.Xsl.Runtime.StringConcat, namespace: System.Xml.Xsl.Runtime
  DNUnionIterator = interface; // type: System.Xml.Xsl.Runtime.UnionIterator, namespace: System.Xml.Xsl.Runtime
  DNXmlSortKeyAccumulator = interface; // type: System.Xml.Xsl.Runtime.XmlSortKeyAccumulator, namespace: System.Xml.Xsl.Runtime
  DNXPathFollowingIterator = interface; // type: System.Xml.Xsl.Runtime.XPathFollowingIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathFollowingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.XPathFollowingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingDocOrderIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingIterator, namespace: System.Xml.Xsl.Runtime
  DNXPathPrecedingMergeIterator = interface; // type: System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator, namespace: System.Xml.Xsl.Runtime
  DNXmlSchemaCollection = interface; // type: System.Xml.Schema.XmlSchemaCollection, namespace: System.Xml.Schema
  DNXmlSchemaCollectionEnumerator = interface; // type: System.Xml.Schema.XmlSchemaCollectionEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaCompilationSettings = interface; // type: System.Xml.Schema.XmlSchemaCompilationSettings, namespace: System.Xml.Schema
  DNXmlSchemaDatatype = interface; // type: System.Xml.Schema.XmlSchemaDatatype, namespace: System.Xml.Schema
  DNXmlSchemaInference = interface; // type: System.Xml.Schema.XmlSchemaInference, namespace: System.Xml.Schema
  DNXmlSchemaInfo = interface; // type: System.Xml.Schema.XmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaObject = interface; // type: System.Xml.Schema.XmlSchemaObject, namespace: System.Xml.Schema
  DNXmlSchema = interface; // type: System.Xml.Schema.XmlSchema, namespace: System.Xml.Schema
  DNXmlSchemaAnnotated = interface; // type: System.Xml.Schema.XmlSchemaAnnotated, namespace: System.Xml.Schema
  DNXmlSchemaAnyAttribute = interface; // type: System.Xml.Schema.XmlSchemaAnyAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttribute = interface; // type: System.Xml.Schema.XmlSchemaAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroup = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroup, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroupRef = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaContent = interface; // type: System.Xml.Schema.XmlSchemaContent, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentExtension = interface; // type: System.Xml.Schema.XmlSchemaComplexContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaComplexContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentExtension = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaContentModel = interface; // type: System.Xml.Schema.XmlSchemaContentModel, namespace: System.Xml.Schema
  DNXmlSchemaComplexContent = interface; // type: System.Xml.Schema.XmlSchemaComplexContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleContent, namespace: System.Xml.Schema
  DNXmlSchemaFacet = interface; // type: System.Xml.Schema.XmlSchemaFacet, namespace: System.Xml.Schema
  DNXmlSchemaEnumerationFacet = interface; // type: System.Xml.Schema.XmlSchemaEnumerationFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaNumericFacet = interface; // type: System.Xml.Schema.XmlSchemaNumericFacet, namespace: System.Xml.Schema
  DNXmlSchemaFractionDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaFractionDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMinLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaTotalDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaTotalDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaPatternFacet = interface; // type: System.Xml.Schema.XmlSchemaPatternFacet, namespace: System.Xml.Schema
  DNXmlSchemaWhiteSpaceFacet = interface; // type: System.Xml.Schema.XmlSchemaWhiteSpaceFacet, namespace: System.Xml.Schema
  DNXmlSchemaGroup = interface; // type: System.Xml.Schema.XmlSchemaGroup, namespace: System.Xml.Schema
  DNXmlSchemaIdentityConstraint = interface; // type: System.Xml.Schema.XmlSchemaIdentityConstraint, namespace: System.Xml.Schema
  DNXmlSchemaKey = interface; // type: System.Xml.Schema.XmlSchemaKey, namespace: System.Xml.Schema
  DNXmlSchemaKeyref = interface; // type: System.Xml.Schema.XmlSchemaKeyref, namespace: System.Xml.Schema
  DNXmlSchemaUnique = interface; // type: System.Xml.Schema.XmlSchemaUnique, namespace: System.Xml.Schema
  DNXmlSchemaNotation = interface; // type: System.Xml.Schema.XmlSchemaNotation, namespace: System.Xml.Schema
  DNXmlSchemaParticle = interface; // type: System.Xml.Schema.XmlSchemaParticle, namespace: System.Xml.Schema
  DNXmlSchemaAny = interface; // type: System.Xml.Schema.XmlSchemaAny, namespace: System.Xml.Schema
  DNXmlSchemaElement = interface; // type: System.Xml.Schema.XmlSchemaElement, namespace: System.Xml.Schema
  DNXmlSchemaGroupBase = interface; // type: System.Xml.Schema.XmlSchemaGroupBase, namespace: System.Xml.Schema
  DNXmlSchemaAll = interface; // type: System.Xml.Schema.XmlSchemaAll, namespace: System.Xml.Schema
  DNXmlSchemaChoice = interface; // type: System.Xml.Schema.XmlSchemaChoice, namespace: System.Xml.Schema
  DNXmlSchemaSequence = interface; // type: System.Xml.Schema.XmlSchemaSequence, namespace: System.Xml.Schema
  DNXmlSchemaGroupRef = interface; // type: System.Xml.Schema.XmlSchemaGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeList = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeList, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeUnion = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeUnion, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSimpleType = interface; // type: System.Xml.Schema.XmlSchemaSimpleType, namespace: System.Xml.Schema
  DNXmlSchemaXPath = interface; // type: System.Xml.Schema.XmlSchemaXPath, namespace: System.Xml.Schema
  DNXmlSchemaAnnotation = interface; // type: System.Xml.Schema.XmlSchemaAnnotation, namespace: System.Xml.Schema
  DNXmlSchemaAppInfo = interface; // type: System.Xml.Schema.XmlSchemaAppInfo, namespace: System.Xml.Schema
  DNXmlSchemaDocumentation = interface; // type: System.Xml.Schema.XmlSchemaDocumentation, namespace: System.Xml.Schema
  DNXmlSchemaExternal = interface; // type: System.Xml.Schema.XmlSchemaExternal, namespace: System.Xml.Schema
  DNXmlSchemaImport = interface; // type: System.Xml.Schema.XmlSchemaImport, namespace: System.Xml.Schema
  DNXmlSchemaInclude = interface; // type: System.Xml.Schema.XmlSchemaInclude, namespace: System.Xml.Schema
  DNXmlSchemaRedefine = interface; // type: System.Xml.Schema.XmlSchemaRedefine, namespace: System.Xml.Schema
  DNXmlSchemaObjectEnumerator = interface; // type: System.Xml.Schema.XmlSchemaObjectEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaObjectTable = interface; // type: System.Xml.Schema.XmlSchemaObjectTable, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNXmlSchemaValidator = interface; // type: System.Xml.Schema.XmlSchemaValidator, namespace: System.Xml.Schema
  DNCodeIdentifier = interface; // type: System.Xml.Serialization.CodeIdentifier, namespace: System.Xml.Serialization
  DNCodeIdentifiers = interface; // type: System.Xml.Serialization.CodeIdentifiers, namespace: System.Xml.Serialization
  DNImportContext = interface; // type: System.Xml.Serialization.ImportContext, namespace: System.Xml.Serialization
  DNSchemaImporter = interface; // type: System.Xml.Serialization.SchemaImporter, namespace: System.Xml.Serialization
  DNXmlSchemaImporter = interface; // type: System.Xml.Serialization.XmlSchemaImporter, namespace: System.Xml.Serialization
  DNSoapAttributeOverrides = interface; // type: System.Xml.Serialization.SoapAttributeOverrides, namespace: System.Xml.Serialization
  DNSoapAttributes = interface; // type: System.Xml.Serialization.SoapAttributes, namespace: System.Xml.Serialization
  DNSoapReflectionImporter = interface; // type: System.Xml.Serialization.SoapReflectionImporter, namespace: System.Xml.Serialization
  DNSoapSchemaMember = interface; // type: System.Xml.Serialization.SoapSchemaMember, namespace: System.Xml.Serialization
  DNXmlAttributeOverrides = interface; // type: System.Xml.Serialization.XmlAttributeOverrides, namespace: System.Xml.Serialization
  DNXmlAttributes = interface; // type: System.Xml.Serialization.XmlAttributes, namespace: System.Xml.Serialization
  DNXmlMapping = interface; // type: System.Xml.Serialization.XmlMapping, namespace: System.Xml.Serialization
  DNXmlMembersMapping = interface; // type: System.Xml.Serialization.XmlMembersMapping, namespace: System.Xml.Serialization
  DNXmlTypeMapping = interface; // type: System.Xml.Serialization.XmlTypeMapping, namespace: System.Xml.Serialization
  DNXmlMemberMapping = interface; // type: System.Xml.Serialization.XmlMemberMapping, namespace: System.Xml.Serialization
  DNXmlReflectionImporter = interface; // type: System.Xml.Serialization.XmlReflectionImporter, namespace: System.Xml.Serialization
  DNXmlReflectionMember = interface; // type: System.Xml.Serialization.XmlReflectionMember, namespace: System.Xml.Serialization
  DNXmlSchemaEnumerator = interface; // type: System.Xml.Serialization.XmlSchemaEnumerator, namespace: System.Xml.Serialization
  DNXmlSchemaExporter = interface; // type: System.Xml.Serialization.XmlSchemaExporter, namespace: System.Xml.Serialization
  DNXmlSerializationGeneratedCode = interface; // type: System.Xml.Serialization.XmlSerializationGeneratedCode, namespace: System.Xml.Serialization
  DNXmlSerializationReader = interface; // type: System.Xml.Serialization.XmlSerializationReader, namespace: System.Xml.Serialization
  DNXmlSerializationWriter = interface; // type: System.Xml.Serialization.XmlSerializationWriter, namespace: System.Xml.Serialization
  DNXmlSerializer = interface; // type: System.Xml.Serialization.XmlSerializer, namespace: System.Xml.Serialization
  DNXmlSerializerFactory = interface; // type: System.Xml.Serialization.XmlSerializerFactory, namespace: System.Xml.Serialization
  DNXmlSerializerImplementation = interface; // type: System.Xml.Serialization.XmlSerializerImplementation, namespace: System.Xml.Serialization
  DNXmlSerializerNamespaces = interface; // type: System.Xml.Serialization.XmlSerializerNamespaces, namespace: System.Xml.Serialization
  DNXmlConvert = interface; // type: System.Xml.XmlConvert, namespace: System.Xml
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlNamedNodeMap = interface; // type: System.Xml.XmlNamedNodeMap, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXsltContext = interface; // type: System.Xml.Xsl.XsltContext, namespace: System.Xml.Xsl
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNNameTable = interface; // type: System.Xml.NameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlEntity = interface; // type: System.Xml.XmlEntity, namespace: System.Xml
  DNXmlLinkedNode = interface; // type: System.Xml.XmlLinkedNode, namespace: System.Xml
  DNXmlCharacterData = interface; // type: System.Xml.XmlCharacterData, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNotation = interface; // type: System.Xml.XmlNotation, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlParserContext = interface; // type: System.Xml.XmlParserContext, namespace: System.Xml
  DNXmlQualifiedName = interface; // type: System.Xml.XmlQualifiedName, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlNodeReader = interface; // type: System.Xml.XmlNodeReader, namespace: System.Xml
  DNXmlTextReader = interface; // type: System.Xml.XmlTextReader, namespace: System.Xml
  DNXmlValidatingReader = interface; // type: System.Xml.XmlValidatingReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlPreloadedResolver = interface; // type: System.Xml.Resolvers.XmlPreloadedResolver, namespace: System.Xml.Resolvers
  DNXmlSecureResolver = interface; // type: System.Xml.XmlSecureResolver, namespace: System.Xml
  DNXmlUrlResolver = interface; // type: System.Xml.XmlUrlResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXmlTextWriter = interface; // type: System.Xml.XmlTextWriter, namespace: System.Xml
  DNXmlQueryOutput = interface; // type: System.Xml.Xsl.Runtime.XmlQueryOutput, namespace: System.Xml.Xsl.Runtime
  DNXmlWriterSettings = interface; // type: System.Xml.XmlWriterSettings, namespace: System.Xml
  DNXPathDocument = interface; // type: System.Xml.XPath.XPathDocument, namespace: System.Xml.XPath
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathItem = interface; // type: System.Xml.XPath.XPathItem, namespace: System.Xml.XPath
  DNXmlAtomicValue = interface; // type: System.Xml.Schema.XmlAtomicValue, namespace: System.Xml.Schema
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath
  DNXmlCollation = interface; // type: System.Xml.Xsl.Runtime.XmlCollation, namespace: System.Xml.Xsl.Runtime
  DNXmlILIndex = interface; // type: System.Xml.Xsl.Runtime.XmlILIndex, namespace: System.Xml.Xsl.Runtime
  DNXmlILStorageConverter = interface; // type: System.Xml.Xsl.Runtime.XmlILStorageConverter, namespace: System.Xml.Xsl.Runtime
  DNXmlNavigatorFilter = interface; // type: System.Xml.Xsl.Runtime.XmlNavigatorFilter, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryContext = interface; // type: System.Xml.Xsl.Runtime.XmlQueryContext, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryRuntime = interface; // type: System.Xml.Xsl.Runtime.XmlQueryRuntime, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryItemSequence = interface; // type: System.Xml.Xsl.Runtime.XmlQueryItemSequence, namespace: System.Xml.Xsl.Runtime
  DNXmlQueryNodeSequence = interface; // type: System.Xml.Xsl.Runtime.XmlQueryNodeSequence, namespace: System.Xml.Xsl.Runtime
  DNXmlQuerySequence<T> = interface; // type: System.Xml.Xsl.Runtime.XmlQuerySequence`1, namespace: System.Xml.Xsl.Runtime
  DNXsltConvert = interface; // type: System.Xml.Xsl.Runtime.XsltConvert, namespace: System.Xml.Xsl.Runtime
  DNXsltFunctions = interface; // type: System.Xml.Xsl.Runtime.XsltFunctions, namespace: System.Xml.Xsl.Runtime
  DNXsltLibrary = interface; // type: System.Xml.Xsl.Runtime.XsltLibrary, namespace: System.Xml.Xsl.Runtime
  DNXslCompiledTransform = interface; // type: System.Xml.Xsl.XslCompiledTransform, namespace: System.Xml.Xsl
  DNXsltArgumentList = interface; // type: System.Xml.Xsl.XsltArgumentList, namespace: System.Xml.Xsl
  DNXslTransform = interface; // type: System.Xml.Xsl.XslTransform, namespace: System.Xml.Xsl
  DNXsltSettings = interface; // type: System.Xml.Xsl.XsltSettings, namespace: System.Xml.Xsl

{ delegates }

  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNValidationEventArgs) of object;

  [DNTypeName('System.Xml.Schema.XmlValueGetter')]
  DNXmlValueGetter = function: DDNC.System.Private.CoreLib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventHandler')]
  DNUnreferencedObjectEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNUnreferencedObjectEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventHandler')]
  DNXmlAttributeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlAttributeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlElementEventHandler')]
  DNXmlElementEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlElementEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventHandler')]
  DNXmlNodeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlNodeEventArgs) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationCollectionFixupCallback')]
  DNXmlSerializationCollectionFixupCallback = procedure(collection: DDNC.System.Private.CoreLib.DNObject; collectionItems: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationFixupCallback')]
  DNXmlSerializationFixupCallback = procedure(fixup: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReadCallback')]
  DNXmlSerializationReadCallback = function: DDNC.System.Private.CoreLib.DNObject of object;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriteCallback')]
  DNXmlSerializationWriteCallback = procedure(o: DDNC.System.Private.CoreLib.DNObject) of object;

  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXmlNodeChangedEventArgs) of object;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventHandler')]
  DNXsltMessageEncounteredEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNXsltMessageEncounteredEventArgs) of object;




{ objects }

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IApplicationResourceStreamResolver')]
  DNIApplicationResourceStreamResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3E390847-46B4-3E7B-ABE8-6BABB33B8E1B}']
  { methods } 

    function GetApplicationResourceStream(relativeUri: DDNC.System.Private.Uri.DNUri): DDNC.System.Private.CoreLib.DNStream;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IHasXmlNode')]
  DNIHasXmlNode = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{54637763-C9DB-3D10-BEA0-E110003DDE65}']
  { methods } 

    function GetNode: DNXmlNode;

  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlLineInfo')]
  DNIXmlLineInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{42FC7998-4F03-37C8-BEAA-3C23528E47CB}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function HasLineInfo: Boolean;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xml----------------
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_MemberType: DNXmlSchemaSimpleType;
    function get_SchemaType: DNXmlSchemaType;
    function get_SchemaElement: DNXmlSchemaElement;
    function get_SchemaAttribute: DNXmlSchemaAttribute;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity;
    property IsDefault: Boolean read get_IsDefault;
    property IsNil: Boolean read get_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlSerializable')]
  DNIXmlSerializable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{45471A9D-DC65-3A9F-8C82-7539D6BE5419}']
  { methods } 

    function GetSchema: DNXmlSchema;
    procedure ReadXml(reader: DNXmlReader);
    procedure WriteXml(writer: DNXmlWriter);

  end;

  //-------------namespace: System.Xml.Serialization----------------
  [DNTypeName('System.Xml.Serialization.IXmlTextParser')]
  DNIXmlTextParser = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{769A70FF-3974-369E-A95B-4FA2F28FDE95}']
  { getters & setters } 

    function get_Normalized: Boolean;
    procedure set_Normalized(value: Boolean);
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);

  { propertys } 

    property Normalized: Boolean read get_Normalized write set_Normalized;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
  end;

  //-------------namespace: System.Xml.XPath----------------
  [DNTypeName('System.Xml.XPath.IXPathNavigable')]
  DNIXPathNavigable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{075B8C9F-B06E-3269-BEB1-8CCBF38D96FA}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;

  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextFunction')]
  DNIXsltContextFunction = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{BC0FA391-C9DD-30BC-83AD-5CADCD9C03D3}']
  { getters & setters } 

    function get_Minargs: Int32;
    function get_Maxargs: Int32;
    function get_ReturnType: DNXPathResultType;
    function get_ArgTypes: TArray<DNXPathResultType>;

  { methods } 

    function Invoke(xsltContext: DNXsltContext; args: TArray<DDNC.System.Private.CoreLib.DNObject>; docContext: DNXPathNavigator): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property Minargs: Int32 read get_Minargs;
    property Maxargs: Int32 read get_Maxargs;
    property ReturnType: DNXPathResultType read get_ReturnType;
    property ArgTypes: TArray<DNXPathResultType> read get_ArgTypes;
  end;

  //-------------namespace: System.Xml.Xsl----------------
  [DNTypeName('System.Xml.Xsl.IXsltContextVariable')]
  DNIXsltContextVariable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B6D7D55A-2E94-3C3B-911E-6AF424E51A0C}']
  { getters & setters } 

    function get_IsLocal: Boolean;
    function get_IsParam: Boolean;
    function get_VariableType: DNXPathResultType;

  { methods } 

    function Evaluate(xsltContext: DNXsltContext): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property IsLocal: Boolean read get_IsLocal;
    property IsParam: Boolean read get_IsParam;
    property VariableType: DNXPathResultType read get_VariableType;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2A0D7B57-195E-5445-9843-BF5EED8F0B71}']
  { constructors } 

    {class} function init: DNSoapAttributeAttribute; overload;
    {class} function init(attributeName: string): DNSoapAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeAttribute')]
  DNSoapAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{03E2284E-4E9D-39B9-A561-890FBC7E5195}']
  { getters & setters } 

    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapAttributeAttribute = class(TDNGenericImport<DNSoapAttributeAttributeClass, DNSoapAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{775F238B-C5E3-5B07-BEE8-5F22D0CB3D37}']
  { constructors } 

    {class} function init: DNSoapElementAttribute; overload;
    {class} function init(elementName: string): DNSoapElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapElementAttribute')]
  DNSoapElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F0856F64-FA8A-3656-B617-D33CD2983986}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapElementAttribute = class(TDNGenericImport<DNSoapElementAttributeClass, DNSoapElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapEnumAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E3E6AB65-D450-5591-B5D5-8A83CF77302B}']
  { constructors } 

    {class} function init: DNSoapEnumAttribute; overload;
    {class} function init(name: string): DNSoapEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapEnumAttribute')]
  DNSoapEnumAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{09A730B7-5449-362A-8D20-FBDAE3C2AFDD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapEnumAttribute = class(TDNGenericImport<DNSoapEnumAttributeClass, DNSoapEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIgnoreAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9D7049F3-BD56-5A14-91AC-C7592A8651E5}']
  { constructors } 

    {class} function init: DNSoapIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIgnoreAttribute')]
  DNSoapIgnoreAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{76B517E8-24F8-3B5B-9C4B-DDF145F75B2B}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapIgnoreAttribute = class(TDNGenericImport<DNSoapIgnoreAttributeClass, DNSoapIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIncludeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{93082370-CE99-5F03-83A7-1C771E7B1D8A}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNSoapIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.SoapIncludeAttribute')]
  DNSoapIncludeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{DF681501-6C2A-30A1-82DA-8152791B1678}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapIncludeAttribute = class(TDNGenericImport<DNSoapIncludeAttributeClass, DNSoapIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{4BC8D3B8-1193-597F-A634-A5F0802AD2C0}']
  { constructors } 

    {class} function init: DNSoapTypeAttribute; overload;
    {class} function init(typeName: string): DNSoapTypeAttribute; overload;
    {class} function init(typeName: string; ns: string): DNSoapTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{CA915B28-840F-3B3F-8951-03F31B2D04A4}']
  { getters & setters } 

    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{34243412-7C86-54BF-B372-E2B17AFD441C}']
  { constructors } 

    {class} function init: DNXmlAnyAttributeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyAttributeAttribute')]
  DNXmlAnyAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7CD5444B-73C2-353B-B149-9D44BE022BE0}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAnyAttributeAttribute = class(TDNGenericImport<DNXmlAnyAttributeAttributeClass, DNXmlAnyAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{35760C6D-1FAE-56A8-B90D-7A490F961BF1}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttribute; overload;
    {class} function init(name: string): DNXmlAnyElementAttribute; overload;
    {class} function init(name: string; ns: string): DNXmlAnyElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttribute')]
  DNXmlAnyElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{40084AC9-4ACE-3A18-BD3E-EE8DF35978B5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAnyElementAttribute = class(TDNGenericImport<DNXmlAnyElementAttributeClass, DNXmlAnyElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FE3BD13D-1B1C-5F17-A673-9E617CA42DA0}']
  { constructors } 

    {class} function init: DNXmlArrayAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayAttribute')]
  DNXmlArrayAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2E1C261A-125E-351C-8BED-5E86BD2DBC2B}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlArrayAttribute = class(TDNGenericImport<DNXmlArrayAttributeClass, DNXmlArrayAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{5169E4E2-6AC7-589E-8581-3E0B712D8572}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string): DNXmlArrayItemAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlArrayItemAttribute; overload;
    {class} function init(elementName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlArrayItemAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttribute')]
  DNXmlArrayItemAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A7A1EFDF-B64E-3966-B7A0-4968D642A9B8}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_NestingLevel: Int32;
    procedure set_NestingLevel(value: Int32);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property NestingLevel: Int32 read get_NestingLevel write set_NestingLevel;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlArrayItemAttribute = class(TDNGenericImport<DNXmlArrayItemAttributeClass, DNXmlArrayItemAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7FF31417-734D-52A9-B24F-E2B5FEC505E1}']
  { constructors } 

    {class} function init: DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string): DNXmlAttributeAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributeAttribute; overload;
    {class} function init(attributeName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeAttribute')]
  DNXmlAttributeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{BC8B0155-6AC2-3FF7-9F2F-7EF51B3E38C1}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property AttributeName: string read get_AttributeName write set_AttributeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlAttributeAttribute = class(TDNGenericImport<DNXmlAttributeAttributeClass, DNXmlAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlChoiceIdentifierAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{3086550F-579C-584E-9DFD-ECDF5A1531D5}']
  { constructors } 

    {class} function init: DNXmlChoiceIdentifierAttribute; overload;
    {class} function init(name: string): DNXmlChoiceIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlChoiceIdentifierAttribute')]
  DNXmlChoiceIdentifierAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7E490E29-8352-359D-9A43-FDC74C9EAA5A}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlChoiceIdentifierAttribute = class(TDNGenericImport<DNXmlChoiceIdentifierAttributeClass, DNXmlChoiceIdentifierAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E711AEBD-A594-507A-A9C5-450F1C9F198F}']
  { constructors } 

    {class} function init: DNXmlElementAttribute; overload;
    {class} function init(elementName: string): DNXmlElementAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlElementAttribute; overload;
    {class} function init(elementName: string; &type: DDNC.System.Private.CoreLib.DNType): DNXmlElementAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttribute')]
  DNXmlElementAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{28CA1DE0-0B3A-381D-A9D2-C8F0C43257BD}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlElementAttribute = class(TDNGenericImport<DNXmlElementAttributeClass, DNXmlElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlEnumAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{062915EE-FBDF-5CB1-B652-ACA9C7018D87}']
  { constructors } 

    {class} function init: DNXmlEnumAttribute; overload;
    {class} function init(name: string): DNXmlEnumAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlEnumAttribute')]
  DNXmlEnumAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6BF31141-5CE9-3944-A5AF-5026A4D8F0DD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlEnumAttribute = class(TDNGenericImport<DNXmlEnumAttributeClass, DNXmlEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIgnoreAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E0032D1C-3C87-5C0A-8DD7-1014553BB7E2}']
  { constructors } 

    {class} function init: DNXmlIgnoreAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIgnoreAttribute')]
  DNXmlIgnoreAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{98EACD3F-07EE-3FC7-B225-53F7FA014322}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlIgnoreAttribute = class(TDNGenericImport<DNXmlIgnoreAttributeClass, DNXmlIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIncludeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{106715EC-2509-510A-8BBD-455537B6C97B}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlIncludeAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlIncludeAttribute')]
  DNXmlIncludeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{59188ED4-D78E-3CF7-9800-F1064104787F}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlIncludeAttribute = class(TDNGenericImport<DNXmlIncludeAttributeClass, DNXmlIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNamespaceDeclarationsAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{80D23D93-635D-5D9B-839D-58A0EC0CD902}']
  { constructors } 

    {class} function init: DNXmlNamespaceDeclarationsAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlNamespaceDeclarationsAttribute')]
  DNXmlNamespaceDeclarationsAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A8A4CF2B-BC6D-3116-816B-91A8046162BE}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlNamespaceDeclarationsAttribute = class(TDNGenericImport<DNXmlNamespaceDeclarationsAttributeClass, DNXmlNamespaceDeclarationsAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlRootAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1B359FC6-C519-559B-9880-15652AA76BBA}']
  { constructors } 

    {class} function init: DNXmlRootAttribute; overload;
    {class} function init(elementName: string): DNXmlRootAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlRootAttribute')]
  DNXmlRootAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{E1B514F4-C786-383A-9FE1-78B13A250D1B}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ElementName: string read get_ElementName write set_ElementName;
    property Namespace: string read get_Namespace write set_Namespace;
    property DataType: string read get_DataType write set_DataType;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlRootAttribute = class(TDNGenericImport<DNXmlRootAttributeClass, DNXmlRootAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FC1934F9-CD12-5006-942E-A27BD7FC78FB}']
  { constructors } 

    {class} function init(methodName: string): DNXmlSchemaProviderAttribute;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaProviderAttribute')]
  DNXmlSchemaProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F57BBF57-C78E-377F-8033-4DCCFFA3BCA0}']
  { getters & setters } 

    function get_MethodName: string;
    function get_IsAny: Boolean;
    procedure set_IsAny(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MethodName: string read get_MethodName;
    property IsAny: Boolean read get_IsAny write set_IsAny;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSchemaProviderAttribute = class(TDNGenericImport<DNXmlSchemaProviderAttributeClass, DNXmlSchemaProviderAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerAssemblyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7D71EC73-F9BF-5CBA-B17A-0F9B1600E12C}']
  { constructors } 

    {class} function init: DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string): DNXmlSerializerAssemblyAttribute; overload;
    {class} function init(assemblyName: string; codeBase: string): DNXmlSerializerAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerAssemblyAttribute')]
  DNXmlSerializerAssemblyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{85151E11-8FD8-3EE8-9949-56F71EAF3918}']
  { getters & setters } 

    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property CodeBase: string read get_CodeBase write set_CodeBase;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerAssemblyAttribute = class(TDNGenericImport<DNXmlSerializerAssemblyAttributeClass, DNXmlSerializerAssemblyAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerVersionAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{4D3A6B39-62BF-52BD-99A3-F6A12DF70F2C}']
  { constructors } 

    {class} function init: DNXmlSerializerVersionAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializerVersionAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerVersionAttribute')]
  DNXmlSerializerVersionAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0B71FF78-4B0B-3FC7-8C80-02A8EFF430E1}']
  { getters & setters } 

    function get_ParentAssemblyId: string;
    procedure set_ParentAssemblyId(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ParentAssemblyId: string read get_ParentAssemblyId write set_ParentAssemblyId;
    property Version: string read get_Version write set_Version;
    property Namespace: string read get_Namespace write set_Namespace;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerVersionAttribute = class(TDNGenericImport<DNXmlSerializerVersionAttributeClass, DNXmlSerializerVersionAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTextAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{4922F2AB-49A5-53A3-B59E-BE87CF164EDC}']
  { constructors } 

    {class} function init: DNXmlTextAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTextAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTextAttribute')]
  DNXmlTextAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{16000520-52EE-3B98-8014-3337924AA9F6}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    procedure set_Type(value: DDNC.System.Private.CoreLib.DNType);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type write set_Type;
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlTextAttribute = class(TDNGenericImport<DNXmlTextAttributeClass, DNXmlTextAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D2ED5ACD-F203-58EE-95A3-AB37C00A5E8C}']
  { constructors } 

    {class} function init: DNXmlTypeAttribute; overload;
    {class} function init(typeName: string): DNXmlTypeAttribute; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeAttribute')]
  DNXmlTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{011F7284-D302-330B-A9DC-8DD677C10C01}']
  { getters & setters } 

    function get_AnonymousType: Boolean;
    procedure set_AnonymousType(value: Boolean);
    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousType: Boolean read get_AnonymousType write set_AnonymousType;
    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    property TypeName: string read get_TypeName write set_TypeName;
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNXmlTypeAttribute = class(TDNGenericImport<DNXmlTypeAttributeClass, DNXmlTypeAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectCollectionClass = interface(DNObjectClass)
  ['{F1650F0B-6282-5009-90B1-AF278723F2C3}']
  { constructors } 

    {class} function init: DNXmlSchemaObjectCollection; overload;
    {class} function init(parent: DNXmlSchemaObject): DNXmlSchemaObjectCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectCollection')]
  DNXmlSchemaObjectCollection = interface(DNObject)
  ['{80E0FFCB-0C63-3642-AD08-591BAD6B5B66}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchemaObject;
    procedure set_Item(index: Int32; value: DNXmlSchemaObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNXmlSchemaObjectEnumerator;
    function Add(item: DNXmlSchemaObject): Int32;
    procedure Insert(index: Int32; item: DNXmlSchemaObject);
    function IndexOf(item: DNXmlSchemaObject): Int32;
    function &Contains(item: DNXmlSchemaObject): Boolean;
    procedure Remove(item: DNXmlSchemaObject);
    procedure CopyTo(&array: TArray<DNXmlSchemaObject>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlSchemaObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaObjectCollection = class(TDNGenericImport<DNXmlSchemaObjectCollectionClass, DNXmlSchemaObjectCollection>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributesClass = interface(DNObjectClass)
  ['{CC6D2630-6C93-5A17-8CF6-9B0BFB034AC2}']
  { constructors } 

    {class} function init: DNXmlAnyElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttributes')]
  DNXmlAnyElementAttributes = interface(DNObject)
  ['{4CA59963-B533-3F6F-9E15-E737A90736A0}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlAnyElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlAnyElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlAnyElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlAnyElementAttribute);
    function IndexOf(attribute: DNXmlAnyElementAttribute): Int32;
    function &Contains(attribute: DNXmlAnyElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlAnyElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlAnyElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlAnyElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAnyElementAttributes = class(TDNGenericImport<DNXmlAnyElementAttributesClass, DNXmlAnyElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributesClass = interface(DNObjectClass)
  ['{E58F3EDD-4B2A-5F65-90B0-CF179C895B9D}']
  { constructors } 

    {class} function init: DNXmlArrayItemAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttributes')]
  DNXmlArrayItemAttributes = interface(DNObject)
  ['{0D13C7F5-2B7D-373A-A173-6FDF3D312C29}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlArrayItemAttribute;
    procedure set_Item(index: Int32; value: DNXmlArrayItemAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlArrayItemAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlArrayItemAttribute);
    function IndexOf(attribute: DNXmlArrayItemAttribute): Int32;
    function &Contains(attribute: DNXmlArrayItemAttribute): Boolean;
    procedure Remove(attribute: DNXmlArrayItemAttribute);
    procedure CopyTo(&array: TArray<DNXmlArrayItemAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlArrayItemAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlArrayItemAttributes = class(TDNGenericImport<DNXmlArrayItemAttributesClass, DNXmlArrayItemAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributesClass = interface(DNObjectClass)
  ['{6E731007-8FC0-50B0-9EF9-F976F097F206}']
  { constructors } 

    {class} function init: DNXmlElementAttributes;

  end;

  [DNTypeName('System.Xml.Serialization.XmlElementAttributes')]
  DNXmlElementAttributes = interface(DNObject)
  ['{5AACB492-5442-3486-B9E9-9920A6687BA0}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(attribute: DNXmlElementAttribute): Int32;
    procedure Insert(index: Int32; attribute: DNXmlElementAttribute);
    function IndexOf(attribute: DNXmlElementAttribute): Int32;
    function &Contains(attribute: DNXmlElementAttribute): Boolean;
    procedure Remove(attribute: DNXmlElementAttribute);
    procedure CopyTo(&array: TArray<DNXmlElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlElementAttributes = class(TDNGenericImport<DNXmlElementAttributesClass, DNXmlElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemasClass = interface(DNObjectClass)
  ['{A7F741B6-1A72-5D7A-A009-BAC30E7D5CF5}']
  { constructors } 

    {class} function init: DNXmlSchemas;

  { static methods } 

    {class} function IsDataSet(schema: DNXmlSchema): Boolean;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemas')]
  DNXmlSchemas = interface(DNObject)
  ['{C7F7465E-5A46-383E-9991-DE6A54A2E752}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchema; overload;
    procedure set_Item(index: Int32; value: DNXmlSchema);
    function get_Item(ns: string): DNXmlSchema; overload;
    function get_IsCompiled: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetSchemas(ns: string): DDNC.System.Private.CoreLib.DNIList;
    function Add(schema: DNXmlSchema): Int32; overload;
    function Add(schema: DNXmlSchema; baseUri: DDNC.System.Private.Uri.DNUri): Int32; overload;
    procedure Add(schemas: DNXmlSchemas); overload;
    procedure AddReference(schema: DNXmlSchema);
    procedure Insert(index: Int32; schema: DNXmlSchema);
    function IndexOf(schema: DNXmlSchema): Int32;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(targetNamespace: string): Boolean; overload;
    procedure Remove(schema: DNXmlSchema);
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function Find(name: DNXmlQualifiedName; &type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    procedure Compile(handler: DNValidationEventHandler; fullCompile: Boolean);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNXmlSchema read get_Item write set_Item; default;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
    property IsCompiled: Boolean read get_IsCompiled;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemas = class(TDNGenericImport<DNXmlSchemasClass, DNXmlSchemas>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{B5580D1F-0DAC-59AA-82CB-487D37B184DF}']
  end;

  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{C9DFE261-E68C-334B-B136-FC20BA231605}']
  { getters & setters } 

    function get_Severity: DNXmlSeverityType;
    function get_Exception: DNXmlSchemaException;
    function get_Message: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Severity: DNXmlSeverityType read get_Severity;
    property Exception: DNXmlSchemaException read get_Exception;
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNUnreferencedObjectEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{3AF17E6C-4B67-5CE8-A414-DABDB621393C}']
  { constructors } 

    {class} function init(o: DDNC.System.Private.CoreLib.DNObject; id: string): DNUnreferencedObjectEventArgs;

  end;

  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventArgs')]
  DNUnreferencedObjectEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{A8CF1822-CDBF-3AC0-A735-4005198E2348}']
  { getters & setters } 

    function get_UnreferencedObject: DDNC.System.Private.CoreLib.DNObject;
    function get_UnreferencedId: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnreferencedObject: DDNC.System.Private.CoreLib.DNObject read get_UnreferencedObject;
    property UnreferencedId: string read get_UnreferencedId;
  end;

  TDNUnreferencedObjectEventArgs = class(TDNGenericImport<DNUnreferencedObjectEventArgsClass, DNUnreferencedObjectEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{AE376AB3-9D3A-5B11-926E-CCA0F4E19F1F}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeEventArgs')]
  DNXmlAttributeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{AC8C8094-D42B-3143-BA68-59CC3351DDB0}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_Attr: DNXmlAttribute;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedAttributes: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property Attr: DNXmlAttribute read get_Attr;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedAttributes: string read get_ExpectedAttributes;
  end;

  TDNXmlAttributeEventArgs = class(TDNGenericImport<DNXmlAttributeEventArgsClass, DNXmlAttributeEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{68222A33-29A9-54C2-B036-9338F0023877}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlElementEventArgs')]
  DNXmlElementEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{1FA740B6-A7D2-39EB-9469-C2C50A69A2E4}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_Element: DNXmlElement;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedElements: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property Element: DNXmlElement read get_Element;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property ExpectedElements: string read get_ExpectedElements;
  end;

  TDNXmlElementEventArgs = class(TDNGenericImport<DNXmlElementEventArgsClass, DNXmlElementEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNodeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{E7293DF9-56DF-5DA9-847E-3A73F3B51422}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlNodeEventArgs')]
  DNXmlNodeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{0D4C82C6-65B2-3A22-95F5-3011F61637E5}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Text: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectBeingDeserialized: DDNC.System.Private.CoreLib.DNObject read get_ObjectBeingDeserialized;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Text: string read get_Text;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXmlNodeEventArgs = class(TDNGenericImport<DNXmlNodeEventArgsClass, DNXmlNodeEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{4C0595FE-6B1A-5449-B496-B91F12CBF9B1}']
  { constructors } 

    {class} function init(node: DNXmlNode; oldParent: DNXmlNode; newParent: DNXmlNode; oldValue: string; newValue: string; action: DNXmlNodeChangedAction): DNXmlNodeChangedEventArgs;

  end;

  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{C8FD5F91-9CDF-3416-A031-FC8389961B45}']
  { getters & setters } 

    function get_Action: DNXmlNodeChangedAction;
    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Action: DNXmlNodeChangedAction read get_Action;
    property Node: DNXmlNode read get_Node;
    property OldParent: DNXmlNode read get_OldParent;
    property NewParent: DNXmlNode read get_NewParent;
    property OldValue: string read get_OldValue;
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltMessageEncounteredEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{178B8C65-017E-55B8-9E6A-03160499B00F}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventArgs')]
  DNXsltMessageEncounteredEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{24D5594B-7514-30CD-9CA0-6BDE1DBC0CFA}']
  { getters & setters } 

    function get_Message: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
  end;

  TDNXsltMessageEncounteredEventArgs = class(TDNGenericImport<DNXsltMessageEncounteredEventArgsClass, DNXsltMessageEncounteredEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{9F14F33E-0DCE-519B-A420-B0D1300F5178}']
  { constructors } 

    {class} function init: DNXmlSchemaException; overload;
    {class} function init(message: string): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaException')]
  DNXmlSchemaException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{7F35EE48-F80F-349B-BC23-F82A3ADDF5A2}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaException = class(TDNGenericImport<DNXmlSchemaExceptionClass, DNXmlSchemaException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{88254E0D-08F5-5775-897A-CC8EDC96FAB4}']
  { constructors } 

    {class} function init: DNXmlSchemaInferenceException; overload;
    {class} function init(message: string): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaInferenceException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaInferenceException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInferenceException')]
  DNXmlSchemaInferenceException = interface(DNXmlSchemaException)
  ['{634D6BD2-A221-36CA-9C20-62181D5CF6BD}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaInferenceException = class(TDNGenericImport<DNXmlSchemaInferenceExceptionClass, DNXmlSchemaInferenceException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidationExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{CFBD6B9B-79AC-53E8-912D-741778CE0DF4}']
  { constructors } 

    {class} function init: DNXmlSchemaValidationException; overload;
    {class} function init(message: string): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlSchemaValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaValidationException; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidationException')]
  DNXmlSchemaValidationException = interface(DNXmlSchemaException)
  ['{ADF17DD4-C322-3AFA-9EA0-552770EEED86}']
  { getters & setters } 

    function get_SourceObject: DDNC.System.Private.CoreLib.DNObject;
    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceObject: DDNC.System.Private.CoreLib.DNObject read get_SourceObject;
    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlSchemaValidationException = class(TDNGenericImport<DNXmlSchemaValidationExceptionClass, DNXmlSchemaValidationException>) end;

  //-------------namespace: System.Xml----------------
  DNXmlExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{0053AFC5-33F6-5201-9C0B-82F516CA7A8E}']
  { constructors } 

    {class} function init: DNXmlException; overload;
    {class} function init(message: string): DNXmlException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXmlException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlException; overload;

  end;

  [DNTypeName('System.Xml.XmlException')]
  DNXmlException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{AB5C5D7F-AC15-3CAE-9036-B98E70D1C5BF}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceUri: string;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SourceUri: string read get_SourceUri;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXmlException = class(TDNGenericImport<DNXmlExceptionClass, DNXmlException>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{9228E39D-E328-57F6-BAE5-41ED45DA4979}']
  { constructors } 

    {class} function init: DNXPathException; overload;
    {class} function init(message: string): DNXPathException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXPathException; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathException')]
  DNXPathException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{CF8699B3-9A6A-35D9-8D74-EFBF6187ECDF}']
  { getters & setters } 

    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXPathException = class(TDNGenericImport<DNXPathExceptionClass, DNXPathException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{DBE9CD0E-8C3F-5FBA-B26C-9896C884C093}']
  { constructors } 

    {class} function init: DNXsltException; overload;
    {class} function init(message: string): DNXsltException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXsltException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltException')]
  DNXsltException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{0E4E19CC-AD70-323C-B23D-7FF81C05BB94}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXsltException = class(TDNGenericImport<DNXsltExceptionClass, DNXsltException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltCompileExceptionClass = interface(DNXsltExceptionClass)
  ['{460DD76E-25BE-5537-8763-A462E42A643D}']
  { constructors } 

    {class} function init: DNXsltCompileException; overload;
    {class} function init(message: string): DNXsltCompileException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNXsltCompileException; overload;
    {class} function init(inner: DDNC.System.Private.CoreLib.DNException; sourceUri: string; lineNumber: Int32; linePosition: Int32): DNXsltCompileException; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XsltCompileException')]
  DNXsltCompileException = interface(DNXsltException)
  ['{7B2BCEC9-D47F-316D-933B-9923262EB45B}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceUri: string read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNXsltCompileException = class(TDNGenericImport<DNXsltCompileExceptionClass, DNXsltCompileException>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlDeserializationEventsClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0D7F98FF-C442-5F9B-A219-C11F295871B6}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlDeserializationEvents')]
  DNXmlDeserializationEvents = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{789E1F8E-E996-3695-9D3E-D5FCAEAFB58D}']
  { getters & setters } 

    function get_OnUnknownNode: DNXmlNodeEventHandler;
    procedure set_OnUnknownNode(value: DNXmlNodeEventHandler);
    function get_OnUnknownAttribute: DNXmlAttributeEventHandler;
    procedure set_OnUnknownAttribute(value: DNXmlAttributeEventHandler);
    function get_OnUnknownElement: DNXmlElementEventHandler;
    procedure set_OnUnknownElement(value: DNXmlElementEventHandler);
    function get_OnUnreferencedObject: DNUnreferencedObjectEventHandler;
    procedure set_OnUnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property OnUnknownNode: DNXmlNodeEventHandler read get_OnUnknownNode write set_OnUnknownNode;
    property OnUnknownAttribute: DNXmlAttributeEventHandler read get_OnUnknownAttribute write set_OnUnknownAttribute;
    property OnUnknownElement: DNXmlElementEventHandler read get_OnUnknownElement write set_OnUnknownElement;
    property OnUnreferencedObject: DNUnreferencedObjectEventHandler read get_OnUnreferencedObject write set_OnUnreferencedObject;
  end;

  TDNXmlDeserializationEvents = class(TDNGenericImport<DNXmlDeserializationEventsClass, DNXmlDeserializationEvents>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAncestorDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7C0A2E43-E6E5-5907-BDAE-A4F08E8295E8}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AncestorDocOrderIterator')]
  DNAncestorDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7964540E-F1E1-38FC-B8DB-572573795FB1}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAncestorDocOrderIterator = class(TDNGenericImport<DNAncestorDocOrderIteratorClass, DNAncestorDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAncestorIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{05D69BE6-31AA-5686-8A6F-00DF4649F0BA}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AncestorIterator')]
  DNAncestorIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5A3EE41C-32D6-3D40-9ABA-0F2BFB76512C}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAncestorIterator = class(TDNGenericImport<DNAncestorIteratorClass, DNAncestorIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAttributeContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F5D7A98A-FF85-5E2D-AAF0-D0E64F416D49}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AttributeContentIterator')]
  DNAttributeContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{566BC71D-674C-35EA-8090-4F54CFCF6C09}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAttributeContentIterator = class(TDNGenericImport<DNAttributeContentIteratorClass, DNAttributeContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNAttributeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AF47DF01-4670-553C-9F0D-F22DE61E87A5}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.AttributeIterator')]
  DNAttributeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D300F025-0F24-39F2-937A-3951634F052E}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNAttributeIterator = class(TDNGenericImport<DNAttributeIteratorClass, DNAttributeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8EA6419C-60A1-560C-8E22-21848DB234DC}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ContentIterator')]
  DNContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A5B21580-5FE0-3C98-BDD9-194E84B5AEB9}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNContentIterator = class(TDNGenericImport<DNContentIteratorClass, DNContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNContentMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0D47ACFF-8775-5B97-B59C-634B91EEDC38}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ContentMergeIterator')]
  DNContentMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AA43716F-796B-3DEB-83EA-68C6EC1F79CD}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNContentMergeIterator = class(TDNGenericImport<DNContentMergeIteratorClass, DNContentMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDecimalAggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{587EEA53-2EC7-5BB8-996E-78422C7939DA}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DecimalAggregator')]
  DNDecimalAggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F4BB6BDB-C0F4-3C8A-8E45-487EC6F77741}']
  { getters & setters } 

    function get_SumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_AverageResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_MinimumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_MaximumResult: DDNC.System.Private.CoreLib.DNDecimal;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Average(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Minimum(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure Maximum(value: DDNC.System.Private.CoreLib.DNDecimal);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: DDNC.System.Private.CoreLib.DNDecimal read get_SumResult;
    property AverageResult: DDNC.System.Private.CoreLib.DNDecimal read get_AverageResult;
    property MinimumResult: DDNC.System.Private.CoreLib.DNDecimal read get_MinimumResult;
    property MaximumResult: DDNC.System.Private.CoreLib.DNDecimal read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNDecimalAggregator = class(TDNGenericImport<DNDecimalAggregatorClass, DNDecimalAggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDescendantIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{762294F3-0323-537F-B571-3B4E65852477}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DescendantIterator')]
  DNDescendantIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{ADCF7113-BB8D-3EEC-9177-A5518435BC69}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDescendantIterator = class(TDNGenericImport<DNDescendantIteratorClass, DNDescendantIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDescendantMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1AB62965-6B5A-5146-91B5-9A97683AB208}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DescendantMergeIterator')]
  DNDescendantMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5849EF73-449D-33DA-B426-03B498136E52}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter; orSelf: Boolean);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDescendantMergeIterator = class(TDNGenericImport<DNDescendantMergeIteratorClass, DNDescendantMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDifferenceIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F9BE7CC0-7E9C-549F-B968-6746F7968ED1}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DifferenceIterator')]
  DNDifferenceIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{50E1F1B2-F985-3CE7-9817-AFF50C1941A0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNDifferenceIterator = class(TDNGenericImport<DNDifferenceIteratorClass, DNDifferenceIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDodSequenceMergeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{13D181A0-C2F3-5467-8AAD-AEE6685585BA}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DodSequenceMerge')]
  DNDodSequenceMerge = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BAE7331E-CEC8-3E6E-B12C-3E8700FB83B9}']
  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    procedure AddSequence(sequence: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>);
    function MergeSequences: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDodSequenceMerge = class(TDNGenericImport<DNDodSequenceMergeClass, DNDodSequenceMerge>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNDoubleAggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4B45EF50-617A-536D-A0DF-CAAB20EF1A41}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.DoubleAggregator')]
  DNDoubleAggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A1FD7341-084A-3271-8C9C-D699ACF63409}']
  { getters & setters } 

    function get_SumResult: Double;
    function get_AverageResult: Double;
    function get_MinimumResult: Double;
    function get_MaximumResult: Double;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Double);
    procedure Average(value: Double);
    procedure Minimum(value: Double);
    procedure Maximum(value: Double);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Double read get_SumResult;
    property AverageResult: Double read get_AverageResult;
    property MinimumResult: Double read get_MinimumResult;
    property MaximumResult: Double read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNDoubleAggregator = class(TDNGenericImport<DNDoubleAggregatorClass, DNDoubleAggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNElementContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CB112C45-5D98-5AB9-AE46-1300A2DC1457}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ElementContentIterator')]
  DNElementContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4AA84C69-4DE8-38C0-88A2-22BC7C52E17A}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; localName: string; ns: string);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNElementContentIterator = class(TDNGenericImport<DNElementContentIteratorClass, DNElementContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNFollowingSiblingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{05D24D66-497F-5788-96B3-9ED5A14166E4}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.FollowingSiblingIterator')]
  DNFollowingSiblingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BC4C2344-86EC-3A5E-888C-C2948872C897}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNFollowingSiblingIterator = class(TDNGenericImport<DNFollowingSiblingIteratorClass, DNFollowingSiblingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNFollowingSiblingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{573D91D6-87C2-5E7D-A770-FBF1857413BE}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.FollowingSiblingMergeIterator')]
  DNFollowingSiblingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E762D697-22C2-3DB1-B2F1-0E2586AA3936}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(navigator: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNFollowingSiblingMergeIterator = class(TDNGenericImport<DNFollowingSiblingMergeIteratorClass, DNFollowingSiblingMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNIdIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{36135224-ED6A-5BD5-984A-8FAA71BC6765}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.IdIterator')]
  DNIdIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5F7D8A35-450A-393D-9223-384A15C8B817}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; value: string);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNIdIterator = class(TDNGenericImport<DNIdIteratorClass, DNIdIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNInt32AggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F9CDBE6C-936F-5B7E-9973-EC94B8F66833}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.Int32Aggregator')]
  DNInt32Aggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F126C26C-2980-3F17-BE8C-1FC1C5A77514}']
  { getters & setters } 

    function get_SumResult: Int32;
    function get_AverageResult: Int32;
    function get_MinimumResult: Int32;
    function get_MaximumResult: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Int32);
    procedure Average(value: Int32);
    procedure Minimum(value: Int32);
    procedure Maximum(value: Int32);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Int32 read get_SumResult;
    property AverageResult: Int32 read get_AverageResult;
    property MinimumResult: Int32 read get_MinimumResult;
    property MaximumResult: Int32 read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNInt32Aggregator = class(TDNGenericImport<DNInt32AggregatorClass, DNInt32Aggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNInt64AggregatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{033CE9FE-AE0D-5696-9C7F-FE0433E79644}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.Int64Aggregator')]
  DNInt64Aggregator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D8311C12-998B-3BCA-84B9-BB81EBAF0177}']
  { getters & setters } 

    function get_SumResult: Int64;
    function get_AverageResult: Int64;
    function get_MinimumResult: Int64;
    function get_MaximumResult: Int64;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Create;
    procedure Sum(value: Int64);
    procedure Average(value: Int64);
    procedure Minimum(value: Int64);
    procedure Maximum(value: Int64);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SumResult: Int64 read get_SumResult;
    property AverageResult: Int64 read get_AverageResult;
    property MinimumResult: Int64 read get_MinimumResult;
    property MaximumResult: Int64 read get_MaximumResult;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNInt64Aggregator = class(TDNGenericImport<DNInt64AggregatorClass, DNInt64Aggregator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNIntersectIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{83448F87-9A9E-5CCD-A8E1-33549C3A9E5E}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.IntersectIterator')]
  DNIntersectIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AA3E3427-D773-3DA4-9D4B-84B1A55D6628}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNIntersectIterator = class(TDNGenericImport<DNIntersectIteratorClass, DNIntersectIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNamespaceIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3F6F4472-16C6-5807-8BE8-15C7054BA1A0}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NamespaceIterator')]
  DNNamespaceIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{319D0DCA-0C45-3B4B-8959-FCBA92E67568}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNamespaceIterator = class(TDNGenericImport<DNNamespaceIteratorClass, DNNamespaceIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNodeKindContentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{12AC384D-7DED-5F76-83DD-788A9FEEC44B}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NodeKindContentIterator')]
  DNNodeKindContentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{26686ADB-D0D1-3B34-A0A7-5321B2A6E3BF}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; nodeType: DNXPathNodeType);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNodeKindContentIterator = class(TDNGenericImport<DNNodeKindContentIteratorClass, DNNodeKindContentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNNodeRangeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E4D90AC7-38DC-56D7-BE43-8A398DFE9EDD}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.NodeRangeIterator')]
  DNNodeRangeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{42C4DBFC-9BFF-30D8-9665-160693FBFA1F}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(start: DNXPathNavigator; filter: DNXmlNavigatorFilter; &end: DNXPathNavigator);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNNodeRangeIterator = class(TDNGenericImport<DNNodeRangeIteratorClass, DNNodeRangeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNParentIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E1501CF1-98CC-50E5-92F3-60BCAF78F3F3}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.ParentIterator')]
  DNParentIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BF61EAAA-8353-3A79-8302-EA05C1D9FDFE}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNParentIterator = class(TDNGenericImport<DNParentIteratorClass, DNParentIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{B5F56BB6-1D96-5D10-A4E1-4435A77AAE9C}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingIterator')]
  DNPrecedingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{845A75FA-BA55-39E0-9D96-8FAF1E92449A}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingIterator = class(TDNGenericImport<DNPrecedingIteratorClass, DNPrecedingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingSiblingDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7F63132C-B119-5CE4-9A6C-75C1D29C2A96}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingSiblingDocOrderIterator')]
  DNPrecedingSiblingDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FE35B71F-828E-3ADD-9997-598C0232C41C}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingSiblingDocOrderIterator = class(TDNGenericImport<DNPrecedingSiblingDocOrderIteratorClass, DNPrecedingSiblingDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNPrecedingSiblingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F337B21C-2920-5FBD-9F8C-FC9694B582F7}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.PrecedingSiblingIterator')]
  DNPrecedingSiblingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6E9ADB9D-F112-3E36-BDB8-A15323DAFF6B}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNPrecedingSiblingIterator = class(TDNGenericImport<DNPrecedingSiblingIteratorClass, DNPrecedingSiblingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNStringConcatClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4B7EE745-4663-57C4-A456-8E86511F3929}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.StringConcat')]
  DNStringConcat = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5A3BFE97-97DC-3173-865A-22C4158CB9D0}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);

  { methods } 

    procedure Clear;
    procedure Concat(value: string);
    function GetResult: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Delimiter: string read get_Delimiter write set_Delimiter;
  end;

  TDNStringConcat = class(TDNGenericImport<DNStringConcatClass, DNStringConcat>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNUnionIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A34338DC-1476-537B-A748-0D3C3EE791D2}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.UnionIterator')]
  DNUnionIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8E5DB556-7090-3DD1-BE51-75C3914D05A1}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(runtime: DNXmlQueryRuntime);
    function MoveNext(nestedNavigator: DNXPathNavigator): DNSetIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNUnionIterator = class(TDNGenericImport<DNUnionIteratorClass, DNUnionIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlSortKeyAccumulatorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{2C1FA66A-284F-574D-9FD3-2A5D16E07EE7}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlSortKeyAccumulator')]
  DNXmlSortKeyAccumulator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A3095587-AE99-3387-A16E-27097D2AC829}']
  { getters & setters } 

    function get_Keys: DDNC.System.Private.CoreLib.DNArray;

  { methods } 

    procedure Create;
    procedure AddStringSortKey(collation: DNXmlCollation; value: string);
    procedure AddDecimalSortKey(collation: DNXmlCollation; value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure AddIntegerSortKey(collation: DNXmlCollation; value: Int64);
    procedure AddIntSortKey(collation: DNXmlCollation; value: Int32);
    procedure AddDoubleSortKey(collation: DNXmlCollation; value: Double);
    procedure AddDateTimeSortKey(collation: DNXmlCollation; value: DDNC.System.Private.CoreLib.DNDateTime);
    procedure AddEmptySortKey(collation: DNXmlCollation);
    procedure FinishSortKeys;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Keys: DDNC.System.Private.CoreLib.DNArray read get_Keys;
  end;

  TDNXmlSortKeyAccumulator = class(TDNGenericImport<DNXmlSortKeyAccumulatorClass, DNXmlSortKeyAccumulator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathFollowingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DFB44AD0-BCFB-59A7-8831-5990D958F5E0}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathFollowingIterator')]
  DNXPathFollowingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F239C953-E5B1-3791-A5D8-E1A72EE65268}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathFollowingIterator = class(TDNGenericImport<DNXPathFollowingIteratorClass, DNXPathFollowingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathFollowingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DDE41CFD-7F5B-5102-B566-FF50003CC31F}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathFollowingMergeIterator')]
  DNXPathFollowingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F7EAEDC3-7295-3271-BFF6-9D7882FFFB5C}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathFollowingMergeIterator = class(TDNGenericImport<DNXPathFollowingMergeIteratorClass, DNXPathFollowingMergeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingDocOrderIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FABB79AE-4A82-5B06-BC27-E80BB7217091}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingDocOrderIterator')]
  DNXPathPrecedingDocOrderIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{22662B5F-78ED-35AB-9399-D1D9140E6F97}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(input: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingDocOrderIterator = class(TDNGenericImport<DNXPathPrecedingDocOrderIteratorClass, DNXPathPrecedingDocOrderIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C44CD788-EF93-5752-BEB2-A8F1A953D00D}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingIterator')]
  DNXPathPrecedingIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FB700171-C8AA-31CD-93FE-AE883CECCB59}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(context: DNXPathNavigator; filter: DNXmlNavigatorFilter);
    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingIterator = class(TDNGenericImport<DNXPathPrecedingIteratorClass, DNXPathPrecedingIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXPathPrecedingMergeIteratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CA14E66A-EA38-59F6-8DD7-CEEA0AD993AC}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XPathPrecedingMergeIterator')]
  DNXPathPrecedingMergeIterator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9DE9484D-59FB-37DA-A94D-ABD502B97319}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;

  { methods } 

    procedure Create(filter: DNXmlNavigatorFilter);
    function MoveNext(input: DNXPathNavigator): DNIteratorResult;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
  end;

  TDNXPathPrecedingMergeIterator = class(TDNGenericImport<DNXPathPrecedingMergeIteratorClass, DNXPathPrecedingMergeIterator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionClass = interface(DNObjectClass)
  ['{09A69A19-79B0-5939-8ECE-87C932043110}']
  { constructors } 

    {class} function init: DNXmlSchemaCollection; overload;
    {class} function init(nametable: DNXmlNameTable): DNXmlSchemaCollection; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollection')]
  DNXmlSchemaCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{599D8AB6-1535-3D2D-A3CC-A8D6E4216E8F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NameTable: DNXmlNameTable;
    function get_Item(ns: string): DNXmlSchema;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(ns: string; uri: string): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader): DNXmlSchema; overload;
    function Add(ns: string; reader: DNXmlReader; resolver: DNXmlResolver): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Add(schema: DNXmlSchema; resolver: DNXmlResolver): DNXmlSchema; overload;
    procedure Add(schema: DNXmlSchemaCollection); overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    function &Contains(ns: string): Boolean; overload;
    function GetEnumerator: DNXmlSchemaCollectionEnumerator;
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property NameTable: DNXmlNameTable read get_NameTable;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
  end;

  TDNXmlSchemaCollection = class(TDNGenericImport<DNXmlSchemaCollectionClass, DNXmlSchemaCollection>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionEnumeratorClass = interface(DNObjectClass)
  ['{3A8E72B1-109A-5D54-AC54-AE3F5DBADD5F}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCollectionEnumerator')]
  DNXmlSchemaCollectionEnumerator = interface(DDNC.System.Private.CoreLib.DNIEnumerator)
  ['{7456549E-A8E6-32B0-9371-8BADEC01CD8A}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaCollectionEnumerator = class(TDNGenericImport<DNXmlSchemaCollectionEnumeratorClass, DNXmlSchemaCollectionEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCompilationSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9BA32BE8-51EE-50CD-8F19-EE148B2F15E1}']
  { constructors } 

    {class} function init: DNXmlSchemaCompilationSettings;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaCompilationSettings')]
  DNXmlSchemaCompilationSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FBD8DBB1-5A4D-33E0-89FB-0F95F18586D4}']
  { getters & setters } 

    function get_EnableUpaCheck: Boolean;
    procedure set_EnableUpaCheck(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EnableUpaCheck: Boolean read get_EnableUpaCheck write set_EnableUpaCheck;
  end;

  TDNXmlSchemaCompilationSettings = class(TDNGenericImport<DNXmlSchemaCompilationSettingsClass, DNXmlSchemaCompilationSettings>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDatatypeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{21F97893-EA04-5C52-AEE0-372934BD7B6F}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDatatype')]
  DNXmlSchemaDatatype = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{716E1437-00AC-3238-A087-567DE9EFFC93}']
  { getters & setters } 

    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_TokenizedType: DNXmlTokenizedType;
    function get_Variety: DNXmlSchemaDatatypeVariety;
    function get_TypeCode: DNXmlTypeCode;

  { methods } 

    function ParseValue(s: string; nameTable: DNXmlNameTable; nsmgr: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ChangeType(value: DDNC.System.Private.CoreLib.DNObject; targetType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ChangeType(value: DDNC.System.Private.CoreLib.DNObject; targetType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function IsDerivedFrom(datatype: DNXmlSchemaDatatype): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property TokenizedType: DNXmlTokenizedType read get_TokenizedType;
    property Variety: DNXmlSchemaDatatypeVariety read get_Variety;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
  end;

  TDNXmlSchemaDatatype = class(TDNGenericImport<DNXmlSchemaDatatypeClass, DNXmlSchemaDatatype>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C0D23A08-7D5F-57E4-A0F1-27BB925F1C92}']
  { constructors } 

    {class} function init: DNXmlSchemaInference;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInference')]
  DNXmlSchemaInference = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A3840076-0756-3552-B160-86C727B11835}']
  { getters & setters } 

    function get_Occurrence: DNXmlSchemaInference_InferenceOption;
    procedure set_Occurrence(value: DNXmlSchemaInference_InferenceOption);
    function get_TypeInference: DNXmlSchemaInference_InferenceOption;
    procedure set_TypeInference(value: DNXmlSchemaInference_InferenceOption);

  { methods } 

    function InferSchema(instanceDocument: DNXmlReader): DNXmlSchemaSet; overload;
    function InferSchema(instanceDocument: DNXmlReader; schemas: DNXmlSchemaSet): DNXmlSchemaSet; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Occurrence: DNXmlSchemaInference_InferenceOption read get_Occurrence write set_Occurrence;
    property TypeInference: DNXmlSchemaInference_InferenceOption read get_TypeInference write set_TypeInference;
  end;

  TDNXmlSchemaInference = class(TDNGenericImport<DNXmlSchemaInferenceClass, DNXmlSchemaInference>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInfoClass = interface(DNObjectClass)
  ['{F19098B0-4DAA-50EE-BFAE-C08E67F40328}']
  { constructors } 

    {class} function init: DNXmlSchemaInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInfo')]
  DNXmlSchemaInfo = interface(DNIXmlSchemaInfo)
  ['{1FA1E692-C2B5-348E-AA20-8432CA124635}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    procedure set_Validity(value: DNXmlSchemaValidity);
    function get_IsDefault: Boolean;
    procedure set_IsDefault(value: Boolean);
    function get_IsNil: Boolean;
    procedure set_IsNil(value: Boolean);
    function get_MemberType: DNXmlSchemaSimpleType;
    procedure set_MemberType(value: DNXmlSchemaSimpleType);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_SchemaElement: DNXmlSchemaElement;
    procedure set_SchemaElement(value: DNXmlSchemaElement);
    function get_SchemaAttribute: DNXmlSchemaAttribute;
    procedure set_SchemaAttribute(value: DNXmlSchemaAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    procedure set_ContentType(value: DNXmlSchemaContentType);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Validity: DNXmlSchemaValidity read get_Validity write set_Validity;
    property IsDefault: Boolean read get_IsDefault write set_IsDefault;
    property IsNil: Boolean read get_IsNil write set_IsNil;
    property MemberType: DNXmlSchemaSimpleType read get_MemberType write set_MemberType;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement write set_SchemaElement;
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute write set_SchemaAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType write set_ContentType;
  end;

  TDNXmlSchemaInfo = class(TDNGenericImport<DNXmlSchemaInfoClass, DNXmlSchemaInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E6DA09D0-87AD-5238-8B00-B93F1989B8E6}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObject')]
  DNXmlSchemaObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A99836D6-F51B-3509-93BD-077CE48B67CE}']
  { getters & setters } 

    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaObject = class(TDNGenericImport<DNXmlSchemaObjectClass, DNXmlSchemaObject>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaClass = interface(DNXmlSchemaObjectClass)
  ['{7F20C94E-9E72-5347-9234-CD4F1E01FE73}']
  { constructors } 

    {class} function init: DNXmlSchema;

  { static methods } 

    {class} function Read(reader: DDNC.System.Private.CoreLib.DNTextReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(stream: DDNC.System.Private.CoreLib.DNStream; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    {class} function Read(reader: DNXmlReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchema')]
  DNXmlSchema = interface(DNXmlSchemaObject)
  ['{93B458BC-05D0-38C9-9B4F-20A51AC61B4A}']
  { getters & setters } 

    function get_AttributeFormDefault: DNXmlSchemaForm;
    procedure set_AttributeFormDefault(value: DNXmlSchemaForm);
    function get_BlockDefault: DNXmlSchemaDerivationMethod;
    procedure set_BlockDefault(value: DNXmlSchemaDerivationMethod);
    function get_FinalDefault: DNXmlSchemaDerivationMethod;
    procedure set_FinalDefault(value: DNXmlSchemaDerivationMethod);
    function get_ElementFormDefault: DNXmlSchemaForm;
    procedure set_ElementFormDefault(value: DNXmlSchemaForm);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Includes: DNXmlSchemaObjectCollection;
    function get_Items: DNXmlSchemaObjectCollection;
    function get_IsCompiled: Boolean;
    function get_Attributes: DNXmlSchemaObjectTable;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Elements: DNXmlSchemaObjectTable;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_Groups: DNXmlSchemaObjectTable;
    function get_Notations: DNXmlSchemaObjectTable;
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    procedure Write(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Write(stream: DDNC.System.Private.CoreLib.DNStream; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Write(writer: DDNC.System.Private.CoreLib.DNTextWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Write(writer: DNXmlWriter); overload;
    procedure Write(writer: DNXmlWriter; namespaceManager: DNXmlNamespaceManager); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler); overload;
    procedure Compile(validationEventHandler: DNValidationEventHandler; resolver: DNXmlResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AttributeFormDefault: DNXmlSchemaForm read get_AttributeFormDefault write set_AttributeFormDefault;
    property BlockDefault: DNXmlSchemaDerivationMethod read get_BlockDefault write set_BlockDefault;
    property FinalDefault: DNXmlSchemaDerivationMethod read get_FinalDefault write set_FinalDefault;
    property ElementFormDefault: DNXmlSchemaForm read get_ElementFormDefault write set_ElementFormDefault;
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    property Version: string read get_Version write set_Version;
    property Includes: DNXmlSchemaObjectCollection read get_Includes;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property IsCompiled: Boolean read get_IsCompiled;
    property Attributes: DNXmlSchemaObjectTable read get_Attributes;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Elements: DNXmlSchemaObjectTable read get_Elements;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property Notations: DNXmlSchemaObjectTable read get_Notations;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchema = class(TDNGenericImport<DNXmlSchemaClass, DNXmlSchema>)
  public const
   Namespace = 'http://www.w3.org/2001/XMLSchema';
   InstanceNamespace = 'http://www.w3.org/2001/XMLSchema-instance';
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotatedClass = interface(DNXmlSchemaObjectClass)
  ['{07FBEB0E-5951-5157-91D6-97DCB7548C48}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotated;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotated')]
  DNXmlSchemaAnnotated = interface(DNXmlSchemaObject)
  ['{530EDC18-56F7-3BBA-B3CF-27A6943410B5}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotated = class(TDNGenericImport<DNXmlSchemaAnnotatedClass, DNXmlSchemaAnnotated>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{65B87106-B458-5AF4-A031-7DFDE5DA1401}']
  { constructors } 

    {class} function init: DNXmlSchemaAnyAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnyAttribute')]
  DNXmlSchemaAnyAttribute = interface(DNXmlSchemaAnnotated)
  ['{79FA9451-2448-37CC-B79A-6BBAFD5A86FD}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnyAttribute = class(TDNGenericImport<DNXmlSchemaAnyAttributeClass, DNXmlSchemaAnyAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2B36540B-D084-5319-8511-E9E33EAD3CFD}']
  { constructors } 

    {class} function init: DNXmlSchemaAttribute;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttribute')]
  DNXmlSchemaAttribute = interface(DNXmlSchemaAnnotated)
  ['{20F5A5B7-1906-38C3-BB49-12414D4EC18A}']
  { getters & setters } 

    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaSimpleType;
    procedure set_SchemaType(value: DNXmlSchemaSimpleType);
    function get_Use: DNXmlSchemaUse;
    procedure set_Use(value: DNXmlSchemaUse);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_AttributeType: DDNC.System.Private.CoreLib.DNObject;
    function get_AttributeSchemaType: DNXmlSchemaSimpleType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaSimpleType read get_SchemaType write set_SchemaType;
    property Use: DNXmlSchemaUse read get_Use write set_Use;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property AttributeType: DDNC.System.Private.CoreLib.DNObject read get_AttributeType;
    property AttributeSchemaType: DNXmlSchemaSimpleType read get_AttributeSchemaType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttribute = class(TDNGenericImport<DNXmlSchemaAttributeClass, DNXmlSchemaAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{33072483-AE3F-5BEC-8A87-6E43A834692D}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroup')]
  DNXmlSchemaAttributeGroup = interface(DNXmlSchemaAnnotated)
  ['{EF0B6C74-9D34-336F-9027-3CECC736344B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_RedefinedAttributeGroup: DNXmlSchemaAttributeGroup;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property RedefinedAttributeGroup: DNXmlSchemaAttributeGroup read get_RedefinedAttributeGroup;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroup = class(TDNGenericImport<DNXmlSchemaAttributeGroupClass, DNXmlSchemaAttributeGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupRefClass = interface(DNXmlSchemaAnnotatedClass)
  ['{E86B3A3B-03C5-54E4-827E-54C7C0445F40}']
  { constructors } 

    {class} function init: DNXmlSchemaAttributeGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroupRef')]
  DNXmlSchemaAttributeGroupRef = interface(DNXmlSchemaAnnotated)
  ['{F9A647B9-F16F-336D-BA06-3C4090C06B4D}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroupRef = class(TDNGenericImport<DNXmlSchemaAttributeGroupRefClass, DNXmlSchemaAttributeGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{DED8CD8F-284A-5606-B126-85084C57F0B4}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContent')]
  DNXmlSchemaContent = interface(DNXmlSchemaAnnotated)
  ['{783375CF-3078-32F1-8EA8-71DBC57BD949}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContent = class(TDNGenericImport<DNXmlSchemaContentClass, DNXmlSchemaContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{8DC75317-601D-5589-AA71-A0B950EFEEB4}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentExtension')]
  DNXmlSchemaComplexContentExtension = interface(DNXmlSchemaContent)
  ['{AFA31AE1-D382-35A8-A4F4-32A24D9A3D0E}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentExtension = class(TDNGenericImport<DNXmlSchemaComplexContentExtensionClass, DNXmlSchemaComplexContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{D5BBB2B3-99FA-56E1-97BA-7073BBA83F31}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentRestriction')]
  DNXmlSchemaComplexContentRestriction = interface(DNXmlSchemaContent)
  ['{CCDD14F3-3711-3AEC-8D88-79EAB168B505}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentRestriction = class(TDNGenericImport<DNXmlSchemaComplexContentRestrictionClass, DNXmlSchemaComplexContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{2C944783-C9E1-5A72-853F-6D53C873A8C7}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentExtension;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentExtension')]
  DNXmlSchemaSimpleContentExtension = interface(DNXmlSchemaContent)
  ['{47EAD150-D705-3FF9-8FDB-CDC442626734}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentExtension = class(TDNGenericImport<DNXmlSchemaSimpleContentExtensionClass, DNXmlSchemaSimpleContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{FEF7E7FF-6050-5625-86C0-FBC9A67070DB}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContentRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentRestriction')]
  DNXmlSchemaSimpleContentRestriction = interface(DNXmlSchemaContent)
  ['{0CA99169-11E5-3AF2-AB72-19F28A7878F8}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentRestriction = class(TDNGenericImport<DNXmlSchemaSimpleContentRestrictionClass, DNXmlSchemaSimpleContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentModelClass = interface(DNXmlSchemaAnnotatedClass)
  ['{9386AB16-1620-5140-908E-BFBEECBFC0DF}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaContentModel')]
  DNXmlSchemaContentModel = interface(DNXmlSchemaAnnotated)
  ['{F37C59D1-F7BF-3273-A154-E0EEF1AAC1AC}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContentModel = class(TDNGenericImport<DNXmlSchemaContentModelClass, DNXmlSchemaContentModel>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentClass = interface(DNXmlSchemaContentModelClass)
  ['{AA3E9856-10CC-5A38-9B34-4AEEBEAF6175}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContent')]
  DNXmlSchemaComplexContent = interface(DNXmlSchemaContentModel)
  ['{7C3EFE69-CFAA-3031-8068-FF6D1C6B63D4}']
  { getters & setters } 

    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContent = class(TDNGenericImport<DNXmlSchemaComplexContentClass, DNXmlSchemaComplexContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentClass = interface(DNXmlSchemaContentModelClass)
  ['{C7A44997-B0DE-5013-BD27-8243183D5016}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleContent;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContent')]
  DNXmlSchemaSimpleContent = interface(DNXmlSchemaContentModel)
  ['{C39263A5-0F1E-38DC-BD73-02E36A1DF4C9}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContent = class(TDNGenericImport<DNXmlSchemaSimpleContentClass, DNXmlSchemaSimpleContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFacetClass = interface(DNXmlSchemaAnnotatedClass)
  ['{C2133F87-185D-5BAB-8757-885BF35E148A}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFacet')]
  DNXmlSchemaFacet = interface(DNXmlSchemaAnnotated)
  ['{7A26C7FC-A96B-3A05-87AA-6562C648AD9A}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFacet = class(TDNGenericImport<DNXmlSchemaFacetClass, DNXmlSchemaFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaEnumerationFacetClass = interface(DNXmlSchemaFacetClass)
  ['{B0AC1878-89BA-5488-8975-8949D2CC09F2}']
  { constructors } 

    {class} function init: DNXmlSchemaEnumerationFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaEnumerationFacet')]
  DNXmlSchemaEnumerationFacet = interface(DNXmlSchemaFacet)
  ['{BDE9DF1C-5A37-3E9F-84EB-4448268D88F1}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaEnumerationFacet = class(TDNGenericImport<DNXmlSchemaEnumerationFacetClass, DNXmlSchemaEnumerationFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{BEA939DA-E312-5984-97F7-B184F09CA2F5}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxExclusiveFacet')]
  DNXmlSchemaMaxExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{C02FE770-6537-339D-AE9F-543C293BC510}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxExclusiveFacetClass, DNXmlSchemaMaxExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{549AC46D-E11F-5E42-BBC7-3B2F666F2BFF}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxInclusiveFacet')]
  DNXmlSchemaMaxInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{FB87FD8A-B58B-3BE2-B1B8-13383D1BD7C5}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxInclusiveFacetClass, DNXmlSchemaMaxInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{8D5B767D-6C00-564F-B8E6-66B3FB42D1B1}']
  { constructors } 

    {class} function init: DNXmlSchemaMinExclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinExclusiveFacet')]
  DNXmlSchemaMinExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{6011CD5D-9EE1-3181-BBEE-5E4F24AE780E}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinExclusiveFacetClass, DNXmlSchemaMinExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{824D6F28-CDDD-5438-84D4-1B448EF8D26D}']
  { constructors } 

    {class} function init: DNXmlSchemaMinInclusiveFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinInclusiveFacet')]
  DNXmlSchemaMinInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{759174DD-18C5-3430-A93A-DADF1B4A5B09}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinInclusiveFacetClass, DNXmlSchemaMinInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNumericFacetClass = interface(DNXmlSchemaFacetClass)
  ['{0B0DECA5-ECD0-5C1E-9334-847F4437D6C0}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNumericFacet')]
  DNXmlSchemaNumericFacet = interface(DNXmlSchemaFacet)
  ['{75F6B1CC-30B7-3C4F-802C-C13DD96814D4}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNumericFacet = class(TDNGenericImport<DNXmlSchemaNumericFacetClass, DNXmlSchemaNumericFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFractionDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{C0C40FE6-353B-5E2E-851C-086C401E563C}']
  { constructors } 

    {class} function init: DNXmlSchemaFractionDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaFractionDigitsFacet')]
  DNXmlSchemaFractionDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{232E77BB-0B2A-3A9C-9547-8E0D8CBF1BC5}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFractionDigitsFacet = class(TDNGenericImport<DNXmlSchemaFractionDigitsFacetClass, DNXmlSchemaFractionDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{922B164F-3DE5-5E9B-BE97-080907196875}']
  { constructors } 

    {class} function init: DNXmlSchemaLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaLengthFacet')]
  DNXmlSchemaLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{267D3F96-57BB-342F-9B89-5684D686B931}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaLengthFacet = class(TDNGenericImport<DNXmlSchemaLengthFacetClass, DNXmlSchemaLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{24078633-28B7-54E0-B955-5DFC3D2073F4}']
  { constructors } 

    {class} function init: DNXmlSchemaMaxLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMaxLengthFacet')]
  DNXmlSchemaMaxLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{8AF8467E-2965-3546-BD91-D68FB34A1426}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxLengthFacet = class(TDNGenericImport<DNXmlSchemaMaxLengthFacetClass, DNXmlSchemaMaxLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{11345EBE-15E4-5383-9DB6-48DBA3D9599D}']
  { constructors } 

    {class} function init: DNXmlSchemaMinLengthFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaMinLengthFacet')]
  DNXmlSchemaMinLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{9E30A542-6372-358C-A959-7B90F1378ABB}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinLengthFacet = class(TDNGenericImport<DNXmlSchemaMinLengthFacetClass, DNXmlSchemaMinLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTotalDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{2F1AE627-A38C-5CE9-934B-A283ABD5BB58}']
  { constructors } 

    {class} function init: DNXmlSchemaTotalDigitsFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaTotalDigitsFacet')]
  DNXmlSchemaTotalDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{D9EE6AF1-B274-3D6E-A468-03468BD70DF3}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaTotalDigitsFacet = class(TDNGenericImport<DNXmlSchemaTotalDigitsFacetClass, DNXmlSchemaTotalDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaPatternFacetClass = interface(DNXmlSchemaFacetClass)
  ['{41FCF9C3-B337-54A2-BF0B-AE3FEF845767}']
  { constructors } 

    {class} function init: DNXmlSchemaPatternFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaPatternFacet')]
  DNXmlSchemaPatternFacet = interface(DNXmlSchemaFacet)
  ['{E6244071-2BDF-3CAC-B71A-8C1E6D463DD7}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaPatternFacet = class(TDNGenericImport<DNXmlSchemaPatternFacetClass, DNXmlSchemaPatternFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaWhiteSpaceFacetClass = interface(DNXmlSchemaFacetClass)
  ['{FFF2A4E6-631C-5C28-8139-0DC919E99F87}']
  { constructors } 

    {class} function init: DNXmlSchemaWhiteSpaceFacet;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaWhiteSpaceFacet')]
  DNXmlSchemaWhiteSpaceFacet = interface(DNXmlSchemaFacet)
  ['{381290E9-C9CD-3BB9-8814-D7A78D3C040A}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaWhiteSpaceFacet = class(TDNGenericImport<DNXmlSchemaWhiteSpaceFacetClass, DNXmlSchemaWhiteSpaceFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{A739BECA-1917-5443-80BE-FB1A45A34DDB}']
  { constructors } 

    {class} function init: DNXmlSchemaGroup;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroup')]
  DNXmlSchemaGroup = interface(DNXmlSchemaAnnotated)
  ['{BFFCEE06-7616-37B1-B1D9-841261249A16}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Particle: DNXmlSchemaGroupBase;
    procedure set_Particle(value: DNXmlSchemaGroupBase);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Particle: DNXmlSchemaGroupBase read get_Particle write set_Particle;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroup = class(TDNGenericImport<DNXmlSchemaGroupClass, DNXmlSchemaGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIdentityConstraintClass = interface(DNXmlSchemaAnnotatedClass)
  ['{5199E260-F71D-58DA-A62C-6386B481C44A}']
  { constructors } 

    {class} function init: DNXmlSchemaIdentityConstraint;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaIdentityConstraint')]
  DNXmlSchemaIdentityConstraint = interface(DNXmlSchemaAnnotated)
  ['{F51C28CF-ABDB-35AF-A790-BBF78C3526D9}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaIdentityConstraint = class(TDNGenericImport<DNXmlSchemaIdentityConstraintClass, DNXmlSchemaIdentityConstraint>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{D07D399B-2D91-5886-B113-F37B82C691AF}']
  { constructors } 

    {class} function init: DNXmlSchemaKey;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKey')]
  DNXmlSchemaKey = interface(DNXmlSchemaIdentityConstraint)
  ['{8C653B77-0361-38D7-A3CB-8B992CA11660}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKey = class(TDNGenericImport<DNXmlSchemaKeyClass, DNXmlSchemaKey>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyrefClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{030F4332-05B0-5046-A3D8-4430156D530A}']
  { constructors } 

    {class} function init: DNXmlSchemaKeyref;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaKeyref')]
  DNXmlSchemaKeyref = interface(DNXmlSchemaIdentityConstraint)
  ['{A2EE2CA0-9E23-3E68-97D5-7DFB704F435C}']
  { getters & setters } 

    function get_Refer: DNXmlQualifiedName;
    procedure set_Refer(value: DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Refer: DNXmlQualifiedName read get_Refer write set_Refer;
    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKeyref = class(TDNGenericImport<DNXmlSchemaKeyrefClass, DNXmlSchemaKeyref>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaUniqueClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{D197B6F3-7BCB-56B2-9F6A-DA0DB5E379CC}']
  { constructors } 

    {class} function init: DNXmlSchemaUnique;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaUnique')]
  DNXmlSchemaUnique = interface(DNXmlSchemaIdentityConstraint)
  ['{3B233F9C-12D0-3B46-942D-2F41857C29DF}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaUnique = class(TDNGenericImport<DNXmlSchemaUniqueClass, DNXmlSchemaUnique>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNotationClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2897C2B5-8031-539F-9FE1-DFDF086AD00A}']
  { constructors } 

    {class} function init: DNXmlSchemaNotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaNotation')]
  DNXmlSchemaNotation = interface(DNXmlSchemaAnnotated)
  ['{A4BC5574-5677-3E83-918B-84C53EA34E3E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Public: string;
    procedure set_Public(value: string);
    function get_System: string;
    procedure set_System(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Public: string read get_Public write set_Public;
    property System: string read get_System write set_System;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNotation = class(TDNGenericImport<DNXmlSchemaNotationClass, DNXmlSchemaNotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaParticleClass = interface(DNXmlSchemaAnnotatedClass)
  ['{F5407103-4042-5640-B0E5-96A8E964ACBD}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaParticle')]
  DNXmlSchemaParticle = interface(DNXmlSchemaAnnotated)
  ['{2E2F44C9-9356-3F7C-8C3C-3AFBBFF8F7F2}']
  { getters & setters } 

    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaParticle = class(TDNGenericImport<DNXmlSchemaParticleClass, DNXmlSchemaParticle>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyClass = interface(DNXmlSchemaParticleClass)
  ['{3BF193E4-D90F-5ADF-964C-94FB8B420E1B}']
  { constructors } 

    {class} function init: DNXmlSchemaAny;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAny')]
  DNXmlSchemaAny = interface(DNXmlSchemaParticle)
  ['{0B191FB9-4E21-361B-AC35-E398E8659882}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAny = class(TDNGenericImport<DNXmlSchemaAnyClass, DNXmlSchemaAny>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaElementClass = interface(DNXmlSchemaParticleClass)
  ['{40FD18EE-A424-5EFE-989C-DB0F1632B939}']
  { constructors } 

    {class} function init: DNXmlSchemaElement;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaElement')]
  DNXmlSchemaElement = interface(DNXmlSchemaParticle)
  ['{7CDCA45F-A43E-3B63-AAF5-A750B9AB03BB}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SubstitutionGroup: DNXmlQualifiedName;
    procedure set_SubstitutionGroup(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_Constraints: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_ElementType: DDNC.System.Private.CoreLib.DNObject;
    function get_ElementSchemaType: DNXmlSchemaType;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property FixedValue: string read get_FixedValue write set_FixedValue;
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property Name: string read get_Name write set_Name;
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property SubstitutionGroup: DNXmlQualifiedName read get_SubstitutionGroup write set_SubstitutionGroup;
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    property Constraints: DNXmlSchemaObjectCollection read get_Constraints;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property ElementType: DDNC.System.Private.CoreLib.DNObject read get_ElementType;
    property ElementSchemaType: DNXmlSchemaType read get_ElementSchemaType;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaElement = class(TDNGenericImport<DNXmlSchemaElementClass, DNXmlSchemaElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupBaseClass = interface(DNXmlSchemaParticleClass)
  ['{601EF3C5-4048-5862-9EF1-7808A22C314C}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupBase')]
  DNXmlSchemaGroupBase = interface(DNXmlSchemaParticle)
  ['{47B8CFE1-573E-316F-A7B6-350A25F76C78}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupBase = class(TDNGenericImport<DNXmlSchemaGroupBaseClass, DNXmlSchemaGroupBase>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAllClass = interface(DNXmlSchemaGroupBaseClass)
  ['{E06DEF24-8FEA-5DFA-9EF4-B859CF0193B6}']
  { constructors } 

    {class} function init: DNXmlSchemaAll;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAll')]
  DNXmlSchemaAll = interface(DNXmlSchemaGroupBase)
  ['{A0BBFE47-BDB3-3FE3-8E0A-9AE3AA517A25}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAll = class(TDNGenericImport<DNXmlSchemaAllClass, DNXmlSchemaAll>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaChoiceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{1EB58AB7-5E47-5400-9C99-2833BB0738E8}']
  { constructors } 

    {class} function init: DNXmlSchemaChoice;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaChoice')]
  DNXmlSchemaChoice = interface(DNXmlSchemaGroupBase)
  ['{851CB557-FB0F-38B0-B129-97942250E4E5}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaChoice = class(TDNGenericImport<DNXmlSchemaChoiceClass, DNXmlSchemaChoice>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSequenceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{F42570F1-FF0C-5F87-9DFA-13EA40C14947}']
  { constructors } 

    {class} function init: DNXmlSchemaSequence;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSequence')]
  DNXmlSchemaSequence = interface(DNXmlSchemaGroupBase)
  ['{1686FCFB-5AFE-3440-BAA0-10E9DC6B4474}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSequence = class(TDNGenericImport<DNXmlSchemaSequenceClass, DNXmlSchemaSequence>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupRefClass = interface(DNXmlSchemaParticleClass)
  ['{5B93F77F-3601-5B01-8484-FEDC66063C5C}']
  { constructors } 

    {class} function init: DNXmlSchemaGroupRef;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaGroupRef')]
  DNXmlSchemaGroupRef = interface(DNXmlSchemaParticle)
  ['{B306A9A9-87A0-3D67-8EC5-318417A1EEA4}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaGroupBase;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MinOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal;
    procedure set_MaxOccurs(value: DDNC.System.Private.CoreLib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    property Particle: DNXmlSchemaGroupBase read get_Particle;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDNC.System.Private.CoreLib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupRef = class(TDNGenericImport<DNXmlSchemaGroupRefClass, DNXmlSchemaGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{E054EA70-82EB-5071-8733-4AC40FCDB2F1}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeContent')]
  DNXmlSchemaSimpleTypeContent = interface(DNXmlSchemaAnnotated)
  ['{F036EF63-1305-303F-88E6-E49AC9D258B6}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeContent = class(TDNGenericImport<DNXmlSchemaSimpleTypeContentClass, DNXmlSchemaSimpleTypeContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeListClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{7E3A9E6B-0493-5127-BBAB-9EABFD11F5EF}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeList;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeList')]
  DNXmlSchemaSimpleTypeList = interface(DNXmlSchemaSimpleTypeContent)
  ['{2B4D16E5-EDE3-3E4C-95CC-A236AF80C267}']
  { getters & setters } 

    function get_ItemTypeName: DNXmlQualifiedName;
    procedure set_ItemTypeName(value: DNXmlQualifiedName);
    function get_ItemType: DNXmlSchemaSimpleType;
    procedure set_ItemType(value: DNXmlSchemaSimpleType);
    function get_BaseItemType: DNXmlSchemaSimpleType;
    procedure set_BaseItemType(value: DNXmlSchemaSimpleType);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ItemTypeName: DNXmlQualifiedName read get_ItemTypeName write set_ItemTypeName;
    property ItemType: DNXmlSchemaSimpleType read get_ItemType write set_ItemType;
    property BaseItemType: DNXmlSchemaSimpleType read get_BaseItemType write set_BaseItemType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeList = class(TDNGenericImport<DNXmlSchemaSimpleTypeListClass, DNXmlSchemaSimpleTypeList>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeRestrictionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{22F72831-5AFE-531B-A219-4971E8940F5C}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeRestriction;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeRestriction')]
  DNXmlSchemaSimpleTypeRestriction = interface(DNXmlSchemaSimpleTypeContent)
  ['{14C6C5E7-1B0D-3791-A5A1-050A930CF25B}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeRestriction = class(TDNGenericImport<DNXmlSchemaSimpleTypeRestrictionClass, DNXmlSchemaSimpleTypeRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeUnionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{8A56A1B9-B0FF-578F-BA2B-7B9916820014}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleTypeUnion;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeUnion')]
  DNXmlSchemaSimpleTypeUnion = interface(DNXmlSchemaSimpleTypeContent)
  ['{BEA64EEF-1D3D-3FAF-B233-7438947308FE}']
  { getters & setters } 

    function get_BaseTypes: DNXmlSchemaObjectCollection;
    function get_MemberTypes: TArray<DNXmlQualifiedName>;
    procedure set_MemberTypes(value: TArray<DNXmlQualifiedName>);
    function get_BaseMemberTypes: TArray<DNXmlSchemaSimpleType>;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseTypes: DNXmlSchemaObjectCollection read get_BaseTypes;
    property MemberTypes: TArray<DNXmlQualifiedName> read get_MemberTypes write set_MemberTypes;
    property BaseMemberTypes: TArray<DNXmlSchemaSimpleType> read get_BaseMemberTypes;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeUnion = class(TDNGenericImport<DNXmlSchemaSimpleTypeUnionClass, DNXmlSchemaSimpleTypeUnion>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{DF914D06-74CA-579F-92E3-01209E1D9CCE}']
  { constructors } 

    {class} function init: DNXmlSchemaType;

  { static methods } 

    {class} function GetBuiltInSimpleType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInSimpleType(typeCode: DNXmlTypeCode): DNXmlSchemaSimpleType; overload;
    {class} function GetBuiltInComplexType(typeCode: DNXmlTypeCode): DNXmlSchemaComplexType; overload;
    {class} function GetBuiltInComplexType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaComplexType; overload;
    {class} function IsDerivedFrom(derivedType: DNXmlSchemaType; baseType: DNXmlSchemaType; &except: DNXmlSchemaDerivationMethod): Boolean;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNXmlSchemaAnnotated)
  ['{62B88BCC-0823-35D4-87A5-B7A32F33C076}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{7CF78159-A955-53BD-9F3B-88A64A9C6A2E}']
  { constructors } 

    {class} function init: DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{5E6018DC-BF95-3778-B553-CD3779F234F8}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_ContentModel: DNXmlSchemaContentModel;
    procedure set_ContentModel(value: DNXmlSchemaContentModel);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    function get_ContentTypeParticle: DNXmlSchemaParticle;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_AttributeUses: DNXmlSchemaObjectTable;
    function get_AttributeWildcard: DNXmlSchemaAnyAttribute;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property ContentModel: DNXmlSchemaContentModel read get_ContentModel write set_ContentModel;
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property ContentType: DNXmlSchemaContentType read get_ContentType;
    property ContentTypeParticle: DNXmlSchemaParticle read get_ContentTypeParticle;
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    property AttributeUses: DNXmlSchemaObjectTable read get_AttributeUses;
    property AttributeWildcard: DNXmlSchemaAnyAttribute read get_AttributeWildcard;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeClass = interface(DNXmlSchemaTypeClass)
  ['{A6FE9ACA-4D88-5402-A7FB-C68E5CC6FE8E}']
  { constructors } 

    {class} function init: DNXmlSchemaSimpleType;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleType')]
  DNXmlSchemaSimpleType = interface(DNXmlSchemaType)
  ['{EEC2114B-EE74-3138-BDAC-F9E5070D1959}']
  { getters & setters } 

    function get_Content: DNXmlSchemaSimpleTypeContent;
    procedure set_Content(value: DNXmlSchemaSimpleTypeContent);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Content: DNXmlSchemaSimpleTypeContent read get_Content write set_Content;
    property Name: string read get_Name write set_Name;
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    property BaseSchemaType: DDNC.System.Private.CoreLib.DNObject read get_BaseSchemaType;
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleType = class(TDNGenericImport<DNXmlSchemaSimpleTypeClass, DNXmlSchemaSimpleType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaXPathClass = interface(DNXmlSchemaAnnotatedClass)
  ['{8BB363E7-AF0F-5BF2-A4C2-8A373588DE9A}']
  { constructors } 

    {class} function init: DNXmlSchemaXPath;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaXPath')]
  DNXmlSchemaXPath = interface(DNXmlSchemaAnnotated)
  ['{FC6CDFF4-CB16-3FBF-83DC-F15035EE1679}']
  { getters & setters } 

    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XPath: string read get_XPath write set_XPath;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaXPath = class(TDNGenericImport<DNXmlSchemaXPathClass, DNXmlSchemaXPath>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotationClass = interface(DNXmlSchemaObjectClass)
  ['{5E177172-8A4B-5FB6-B8F5-1296B4D3BC4C}']
  { constructors } 

    {class} function init: DNXmlSchemaAnnotation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotation')]
  DNXmlSchemaAnnotation = interface(DNXmlSchemaObject)
  ['{036A3EA6-328A-3290-88FD-F91FB08B1473}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Items: DNXmlSchemaObjectCollection;
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotation = class(TDNGenericImport<DNXmlSchemaAnnotationClass, DNXmlSchemaAnnotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAppInfoClass = interface(DNXmlSchemaObjectClass)
  ['{CD139285-81CB-573C-8C9B-68C3B7520016}']
  { constructors } 

    {class} function init: DNXmlSchemaAppInfo;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaAppInfo')]
  DNXmlSchemaAppInfo = interface(DNXmlSchemaObject)
  ['{C526026A-E9B2-3D99-AB48-8A0C4D550CA6}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAppInfo = class(TDNGenericImport<DNXmlSchemaAppInfoClass, DNXmlSchemaAppInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDocumentationClass = interface(DNXmlSchemaObjectClass)
  ['{FABDF5A4-2968-5261-9E6F-B9A9D6215CAA}']
  { constructors } 

    {class} function init: DNXmlSchemaDocumentation;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaDocumentation')]
  DNXmlSchemaDocumentation = interface(DNXmlSchemaObject)
  ['{341B40E2-8932-37D9-A643-43083BF741B3}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Source: string read get_Source write set_Source;
    property Language: string read get_Language write set_Language;
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaDocumentation = class(TDNGenericImport<DNXmlSchemaDocumentationClass, DNXmlSchemaDocumentation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExternalClass = interface(DNXmlSchemaObjectClass)
  ['{FD25FEA0-AC4C-5793-AB11-164A46664308}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaExternal')]
  DNXmlSchemaExternal = interface(DNXmlSchemaObject)
  ['{8EA5AF99-8A68-3461-B697-923BB5EEE7F9}']
  { getters & setters } 

    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaExternal = class(TDNGenericImport<DNXmlSchemaExternalClass, DNXmlSchemaExternal>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaImportClass = interface(DNXmlSchemaExternalClass)
  ['{6EB9964E-4B6E-57E5-A6E0-8F335608949E}']
  { constructors } 

    {class} function init: DNXmlSchemaImport;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaImport')]
  DNXmlSchemaImport = interface(DNXmlSchemaExternal)
  ['{C3596C39-724F-3E32-9599-F8C998D1101B}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaImport = class(TDNGenericImport<DNXmlSchemaImportClass, DNXmlSchemaImport>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIncludeClass = interface(DNXmlSchemaExternalClass)
  ['{623FA1D4-9B8E-54C7-A2C2-DEAF94C74EFE}']
  { constructors } 

    {class} function init: DNXmlSchemaInclude;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaInclude')]
  DNXmlSchemaInclude = interface(DNXmlSchemaExternal)
  ['{EA621C53-9BEC-3DE0-B756-11C1BE6A92E2}']
  { getters & setters } 

    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaInclude = class(TDNGenericImport<DNXmlSchemaIncludeClass, DNXmlSchemaInclude>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaRedefineClass = interface(DNXmlSchemaExternalClass)
  ['{563E24BB-C7E4-54E3-8D9F-4F9747E9D249}']
  { constructors } 

    {class} function init: DNXmlSchemaRedefine;

  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaRedefine')]
  DNXmlSchemaRedefine = interface(DNXmlSchemaExternal)
  ['{57B8B16A-0E48-3BA4-91E3-9FE8AE4FE4A7}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Groups: DNXmlSchemaObjectTable;
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Items: DNXmlSchemaObjectCollection read get_Items;
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    property Id: string read get_Id write set_Id;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaRedefine = class(TDNGenericImport<DNXmlSchemaRedefineClass, DNXmlSchemaRedefine>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectEnumeratorClass = interface(DNObjectClass)
  ['{D4FADB36-8277-5E52-9002-AEB707F21652}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectEnumerator')]
  DNXmlSchemaObjectEnumerator = interface(DDNC.System.Private.CoreLib.DNIEnumerator)
  ['{0D6C8A67-0162-30A8-812B-3F9E558FFCB1}']
  { getters & setters } 

    function get_Current: DNXmlSchemaObject;

  { methods } 

    procedure Reset;
    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchemaObject read get_Current;
  end;

  TDNXmlSchemaObjectEnumerator = class(TDNGenericImport<DNXmlSchemaObjectEnumeratorClass, DNXmlSchemaObjectEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectTableClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{314ACBBC-AB50-52D7-BD53-45351F5E3FA8}']
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaObjectTable')]
  DNXmlSchemaObjectTable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{736919C8-8322-30B4-B967-200A99B3CFCF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: DNXmlQualifiedName): DNXmlSchemaObject;
    function get_Names: DDNC.System.Private.CoreLib.DNICollection;
    function get_Values: DDNC.System.Private.CoreLib.DNICollection;

  { methods } 

    function &Contains(name: DNXmlQualifiedName): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIDictionaryEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: DNXmlQualifiedName]: DNXmlSchemaObject read get_Item; default;
    property Names: DDNC.System.Private.CoreLib.DNICollection read get_Names;
    property Values: DDNC.System.Private.CoreLib.DNICollection read get_Values;
  end;

  TDNXmlSchemaObjectTable = class(TDNGenericImport<DNXmlSchemaObjectTableClass, DNXmlSchemaObjectTable>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{40CCBE41-72AE-5DBF-878B-662E5C2BFE80}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlSchemaSet; overload;
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{212E6CF3-2EA0-3A84-97FE-10F6C8924695}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_CompilationSettings: DNXmlSchemaCompilationSettings;
    procedure set_CompilationSettings(value: DNXmlSchemaCompilationSettings);
    function get_Count: Int32;
    function get_GlobalElements: DNXmlSchemaObjectTable;
    function get_GlobalAttributes: DNXmlSchemaObjectTable;
    function get_GlobalTypes: DNXmlSchemaObjectTable;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function Add(targetNamespace: string; schemaUri: string): DNXmlSchema; overload;
    function Add(targetNamespace: string; schemaDocument: DNXmlReader): DNXmlSchema; overload;
    procedure Add(schemas: DNXmlSchemaSet); overload;
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    function Remove(schema: DNXmlSchema): DNXmlSchema;
    function RemoveRecursive(schemaToRemove: DNXmlSchema): Boolean;
    function &Contains(targetNamespace: string): Boolean; overload;
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    procedure Compile;
    function Reprocess(schema: DNXmlSchema): DNXmlSchema;
    procedure CopyTo(schemas: TArray<DNXmlSchema>; index: Int32);
    function Schemas: DDNC.System.Private.CoreLib.DNICollection; overload;
    function Schemas(targetNamespace: string): DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property IsCompiled: Boolean read get_IsCompiled;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property CompilationSettings: DNXmlSchemaCompilationSettings read get_CompilationSettings write set_CompilationSettings;
    property Count: Int32 read get_Count;
    property GlobalElements: DNXmlSchemaObjectTable read get_GlobalElements;
    property GlobalAttributes: DNXmlSchemaObjectTable read get_GlobalAttributes;
    property GlobalTypes: DNXmlSchemaObjectTable read get_GlobalTypes;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C71CB503-A81B-5760-A0CD-0E9CA7316F4E}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(nameTable: DNXmlNameTable; schemas: DNXmlSchemaSet; namespaceResolver: DNIXmlNamespaceResolver; validationFlags: DNXmlSchemaValidationFlags): DNXmlSchemaValidator;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Schema.XmlSchemaValidator')]
  DNXmlSchemaValidator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{705767A4-97CC-3E82-80C7-B40801EEEEC5}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineInfoProvider: DNIXmlLineInfo;
    procedure set_LineInfoProvider(value: DNIXmlLineInfo);
    function get_SourceUri: DDNC.System.Private.Uri.DNUri;
    procedure set_SourceUri(value: DDNC.System.Private.Uri.DNUri);
    function get_ValidationEventSender: DDNC.System.Private.CoreLib.DNObject;
    procedure set_ValidationEventSender(value: DDNC.System.Private.CoreLib.DNObject);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    procedure AddSchema(schema: DNXmlSchema);
    procedure Initialize; overload;
    procedure Initialize(partialValidationType: DNXmlSchemaObject); overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo); overload;
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo; xsiType: string; xsiNil: string; xsiSchemaLocation: string; xsiNoNamespaceSchemaLocation: string); overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: string; schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: DNXmlValueGetter; schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure GetUnspecifiedDefaultAttributes(defaultAttributes: DDNC.System.Private.CoreLib.DNArrayList);
    procedure ValidateEndOfAttributes(schemaInfo: DNXmlSchemaInfo);
    procedure ValidateText(elementValue: string); overload;
    procedure ValidateText(elementValue: DNXmlValueGetter); overload;
    procedure ValidateWhitespace(elementValue: string); overload;
    procedure ValidateWhitespace(elementValue: DNXmlValueGetter); overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo; typedValue: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure SkipToEndElement(schemaInfo: DNXmlSchemaInfo);
    procedure EndValidation;
    function GetExpectedParticles: TArray<DNXmlSchemaParticle>;
    function GetExpectedAttributes: TArray<DNXmlSchemaAttribute>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineInfoProvider: DNIXmlLineInfo read get_LineInfoProvider write set_LineInfoProvider;
    property SourceUri: DDNC.System.Private.Uri.DNUri read get_SourceUri write set_SourceUri;
    property ValidationEventSender: DDNC.System.Private.CoreLib.DNObject read get_ValidationEventSender write set_ValidationEventSender;
  end;

  TDNXmlSchemaValidator = class(TDNGenericImport<DNXmlSchemaValidatorClass, DNXmlSchemaValidator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifierClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B014078A-8795-5B92-B91A-81D0BF9B9C8A}']
  { constructors } 

    {class} function init: DNCodeIdentifier;

  { static methods } 

    {class} function MakePascal(identifier: string): string;
    {class} function MakeCamel(identifier: string): string;
    {class} function MakeValid(identifier: string): string;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifier')]
  DNCodeIdentifier = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CDCA20B9-7D84-3AE2-AB15-4EDAD5915967}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCodeIdentifier = class(TDNGenericImport<DNCodeIdentifierClass, DNCodeIdentifier>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifiersClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{ED2B6934-40CC-5EDB-BCAD-158580CECB1E}']
  { constructors } 

    {class} function init: DNCodeIdentifiers; overload;
    {class} function init(caseSensitive: Boolean): DNCodeIdentifiers; overload;

  end;

  [DNTypeName('System.Xml.Serialization.CodeIdentifiers')]
  DNCodeIdentifiers = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{27EE9D9E-B471-3019-AD16-5D9ACD91AB6B}']
  { getters & setters } 

    function get_UseCamelCasing: Boolean;
    procedure set_UseCamelCasing(value: Boolean);

  { methods } 

    procedure Clear;
    function MakeRightCase(identifier: string): string;
    function MakeUnique(identifier: string): string;
    procedure AddReserved(identifier: string);
    procedure RemoveReserved(identifier: string);
    function AddUnique(identifier: string; value: DDNC.System.Private.CoreLib.DNObject): string;
    function IsInUse(identifier: string): Boolean;
    procedure Add(identifier: string; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Remove(identifier: string);
    function ToArray(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UseCamelCasing: Boolean read get_UseCamelCasing write set_UseCamelCasing;
  end;

  TDNCodeIdentifiers = class(TDNGenericImport<DNCodeIdentifiersClass, DNCodeIdentifiers>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNImportContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BC0ABF83-C02F-52AD-A850-7A08DF0B9C1B}']
  { constructors } 

    {class} function init(identifiers: DNCodeIdentifiers; shareTypes: Boolean): DNImportContext;

  end;

  [DNTypeName('System.Xml.Serialization.ImportContext')]
  DNImportContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{26B22D4A-3375-3925-87A7-8255CD91F39C}']
  { getters & setters } 

    function get_TypeIdentifiers: DNCodeIdentifiers;
    function get_ShareTypes: Boolean;
    function get_Warnings: DDNC.System.Collections.Specialized.DNStringCollection;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeIdentifiers: DNCodeIdentifiers read get_TypeIdentifiers;
    property ShareTypes: Boolean read get_ShareTypes;
    property Warnings: DDNC.System.Collections.Specialized.DNStringCollection read get_Warnings;
  end;

  TDNImportContext = class(TDNGenericImport<DNImportContextClass, DNImportContext>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSchemaImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BCF7FFDB-5BED-564A-BCB4-DA7845F8C438}']
  end;

  [DNTypeName('System.Xml.Serialization.SchemaImporter')]
  DNSchemaImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{22125E83-9D81-386B-916D-76E452B841E2}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSchemaImporter = class(TDNGenericImport<DNSchemaImporterClass, DNSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{96464474-8CC0-5E0F-8C99-1CB79222DC11}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaImporter; overload;
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNXmlSchemaImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaImporter')]
  DNXmlSchemaImporter = interface(DNSchemaImporter)
  ['{7888DB4E-113B-372F-BA1A-4BF94C6EB400}']
  { methods } 

    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    function ImportTypeMapping(name: DNXmlQualifiedName): DNXmlTypeMapping;
    function ImportMembersMapping(name: DNXmlQualifiedName): DNXmlMembersMapping; overload;
    function ImportAnyType(typeName: DNXmlQualifiedName; elementName: string): DNXmlMembersMapping;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>; baseType: DDNC.System.Private.CoreLib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSchemaImporter = class(TDNGenericImport<DNXmlSchemaImporterClass, DNXmlSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeOverridesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3FC6A4D5-9B6C-509E-ABAE-B7BE9CEBFBD4}']
  { constructors } 

    {class} function init: DNSoapAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributeOverrides')]
  DNSoapAttributeOverrides = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{79A12884-9E3E-30AD-ABCD-97B350F4F158}']
  { getters & setters } 

    function get_Item(&type: DDNC.System.Private.CoreLib.DNType): DNSoapAttributes; overload;
    function get_Item(&type: DDNC.System.Private.CoreLib.DNType; member: string): DNSoapAttributes; overload;

  { methods } 

    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; attributes: DNSoapAttributes); overload;
    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; member: string; attributes: DNSoapAttributes); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[&type: DDNC.System.Private.CoreLib.DNType]: DNSoapAttributes read get_Item; default;
    property Item[&type: DDNC.System.Private.CoreLib.DNType; member: string]: DNSoapAttributes read get_Item; default;
  end;

  TDNSoapAttributeOverrides = class(TDNGenericImport<DNSoapAttributeOverridesClass, DNSoapAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{68E7E44B-BDCD-5828-BF67-423DB106F114}']
  { constructors } 

    {class} function init: DNSoapAttributes; overload;
    {class} function init(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider): DNSoapAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapAttributes')]
  DNSoapAttributes = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{57C1654C-F3CA-3AA4-8068-E34C69F67D3F}']
  { getters & setters } 

    function get_SoapType: DNSoapTypeAttribute;
    procedure set_SoapType(value: DNSoapTypeAttribute);
    function get_SoapEnum: DNSoapEnumAttribute;
    procedure set_SoapEnum(value: DNSoapEnumAttribute);
    function get_SoapIgnore: Boolean;
    procedure set_SoapIgnore(value: Boolean);
    function get_SoapElement: DNSoapElementAttribute;
    procedure set_SoapElement(value: DNSoapElementAttribute);
    function get_SoapAttribute: DNSoapAttributeAttribute;
    procedure set_SoapAttribute(value: DNSoapAttributeAttribute);
    function get_SoapDefaultValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_SoapDefaultValue(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SoapType: DNSoapTypeAttribute read get_SoapType write set_SoapType;
    property SoapEnum: DNSoapEnumAttribute read get_SoapEnum write set_SoapEnum;
    property SoapIgnore: Boolean read get_SoapIgnore write set_SoapIgnore;
    property SoapElement: DNSoapElementAttribute read get_SoapElement write set_SoapElement;
    property SoapAttribute: DNSoapAttributeAttribute read get_SoapAttribute write set_SoapAttribute;
    property SoapDefaultValue: DDNC.System.Private.CoreLib.DNObject read get_SoapDefaultValue write set_SoapDefaultValue;
  end;

  TDNSoapAttributes = class(TDNGenericImport<DNSoapAttributesClass, DNSoapAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapReflectionImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CE9272ED-FF8C-52DB-B1DE-E11412C59F83}']
  { constructors } 

    {class} function init: DNSoapReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides): DNSoapReflectionImporter; overload;
    {class} function init(attributeOverrides: DNSoapAttributeOverrides; defaultNamespace: string): DNSoapReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.SoapReflectionImporter')]
  DNSoapReflectionImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A6E67DA4-7EFE-3065-88AC-D9AEBAD009B1}']
  { methods } 

    procedure IncludeTypes(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDNC.System.Private.CoreLib.DNType);
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSoapReflectionImporter = class(TDNGenericImport<DNSoapReflectionImporterClass, DNSoapReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaMemberClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8C02A722-5632-5154-B1A4-E7EC14352AAA}']
  { constructors } 

    {class} function init: DNSoapSchemaMember;

  end;

  [DNTypeName('System.Xml.Serialization.SoapSchemaMember')]
  DNSoapSchemaMember = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3114EE12-D9D9-3C9F-9032-317D0F869A6B}']
  { getters & setters } 

    function get_MemberType: DNXmlQualifiedName;
    procedure set_MemberType(value: DNXmlQualifiedName);
    function get_MemberName: string;
    procedure set_MemberName(value: string);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberType: DNXmlQualifiedName read get_MemberType write set_MemberType;
    property MemberName: string read get_MemberName write set_MemberName;
  end;

  TDNSoapSchemaMember = class(TDNGenericImport<DNSoapSchemaMemberClass, DNSoapSchemaMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeOverridesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1CD6DE32-83CA-5EC4-904B-5DB66E4CC534}']
  { constructors } 

    {class} function init: DNXmlAttributeOverrides;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributeOverrides')]
  DNXmlAttributeOverrides = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{643A1E19-63BC-3B21-B981-7980FAA6E16E}']
  { getters & setters } 

    function get_Item(&type: DDNC.System.Private.CoreLib.DNType): DNXmlAttributes; overload;
    function get_Item(&type: DDNC.System.Private.CoreLib.DNType; member: string): DNXmlAttributes; overload;

  { methods } 

    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; attributes: DNXmlAttributes); overload;
    procedure Add(&type: DDNC.System.Private.CoreLib.DNType; member: string; attributes: DNXmlAttributes); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[&type: DDNC.System.Private.CoreLib.DNType]: DNXmlAttributes read get_Item; default;
    property Item[&type: DDNC.System.Private.CoreLib.DNType; member: string]: DNXmlAttributes read get_Item; default;
  end;

  TDNXmlAttributeOverrides = class(TDNGenericImport<DNXmlAttributeOverridesClass, DNXmlAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{90BA1AFA-85ED-5D85-AD17-BAE1E07BAD7A}']
  { constructors } 

    {class} function init: DNXmlAttributes; overload;
    {class} function init(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider): DNXmlAttributes; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlAttributes')]
  DNXmlAttributes = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{08891D75-60A9-3201-96B7-7CE5D475412D}']
  { getters & setters } 

    function get_XmlElements: DNXmlElementAttributes;
    function get_XmlAttribute: DNXmlAttributeAttribute;
    procedure set_XmlAttribute(value: DNXmlAttributeAttribute);
    function get_XmlEnum: DNXmlEnumAttribute;
    procedure set_XmlEnum(value: DNXmlEnumAttribute);
    function get_XmlText: DNXmlTextAttribute;
    procedure set_XmlText(value: DNXmlTextAttribute);
    function get_XmlArray: DNXmlArrayAttribute;
    procedure set_XmlArray(value: DNXmlArrayAttribute);
    function get_XmlArrayItems: DNXmlArrayItemAttributes;
    function get_XmlDefaultValue: DDNC.System.Private.CoreLib.DNObject;
    procedure set_XmlDefaultValue(value: DDNC.System.Private.CoreLib.DNObject);
    function get_XmlIgnore: Boolean;
    procedure set_XmlIgnore(value: Boolean);
    function get_XmlType: DNXmlTypeAttribute;
    procedure set_XmlType(value: DNXmlTypeAttribute);
    function get_XmlRoot: DNXmlRootAttribute;
    procedure set_XmlRoot(value: DNXmlRootAttribute);
    function get_XmlAnyElements: DNXmlAnyElementAttributes;
    function get_XmlAnyAttribute: DNXmlAnyAttributeAttribute;
    procedure set_XmlAnyAttribute(value: DNXmlAnyAttributeAttribute);
    function get_XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute;
    function get_Xmlns: Boolean;
    procedure set_Xmlns(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlElements: DNXmlElementAttributes read get_XmlElements;
    property XmlAttribute: DNXmlAttributeAttribute read get_XmlAttribute write set_XmlAttribute;
    property XmlEnum: DNXmlEnumAttribute read get_XmlEnum write set_XmlEnum;
    property XmlText: DNXmlTextAttribute read get_XmlText write set_XmlText;
    property XmlArray: DNXmlArrayAttribute read get_XmlArray write set_XmlArray;
    property XmlArrayItems: DNXmlArrayItemAttributes read get_XmlArrayItems;
    property XmlDefaultValue: DDNC.System.Private.CoreLib.DNObject read get_XmlDefaultValue write set_XmlDefaultValue;
    property XmlIgnore: Boolean read get_XmlIgnore write set_XmlIgnore;
    property XmlType: DNXmlTypeAttribute read get_XmlType write set_XmlType;
    property XmlRoot: DNXmlRootAttribute read get_XmlRoot write set_XmlRoot;
    property XmlAnyElements: DNXmlAnyElementAttributes read get_XmlAnyElements;
    property XmlAnyAttribute: DNXmlAnyAttributeAttribute read get_XmlAnyAttribute write set_XmlAnyAttribute;
    property XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute read get_XmlChoiceIdentifier;
    property Xmlns: Boolean read get_Xmlns write set_Xmlns;
  end;

  TDNXmlAttributes = class(TDNGenericImport<DNXmlAttributesClass, DNXmlAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMappingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{ADFF518B-1838-5080-8F4F-37C0BFE61CCF}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMapping')]
  DNXmlMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B13B8ED8-11A9-3ABD-893F-E7FE8066D8AD}']
  { getters & setters } 

    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMembersMappingClass = interface(DNXmlMappingClass)
  ['{B2819B03-AE04-56EC-8586-3441FA26E7FF}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMembersMapping')]
  DNXmlMembersMapping = interface(DNXmlMapping)
  ['{25CD842D-9550-37AB-9125-465F16DAB1F0}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_Item(index: Int32): DNXmlMemberMapping;
    function get_Count: Int32;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property Item[index: Int32]: DNXmlMemberMapping read get_Item; default;
    property Count: Int32 read get_Count;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMembersMapping = class(TDNGenericImport<DNXmlMembersMappingClass, DNXmlMembersMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeMappingClass = interface(DNXmlMappingClass)
  ['{59019006-9106-5F38-8EEE-B9CE1C95571B}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlTypeMapping')]
  DNXmlTypeMapping = interface(DNXmlMapping)
  ['{8F4B0E59-F3CD-3F5B-8611-56AFB8E49A2D}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeFullName: string;
    function get_XsdTypeName: string;
    function get_XsdTypeNamespace: string;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    procedure SetKey(key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeFullName: string read get_TypeFullName;
    property XsdTypeName: string read get_XsdTypeName;
    property XsdTypeNamespace: string read get_XsdTypeNamespace;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
  end;

  TDNXmlTypeMapping = class(TDNGenericImport<DNXmlTypeMappingClass, DNXmlTypeMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMemberMappingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3CE1AE08-A4FA-56A2-9D8E-B8DF8AC47D5B}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlMemberMapping')]
  DNXmlMemberMapping = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FAFC5011-193E-3DFA-8B6E-10AD232ABFBE}']
  { getters & setters } 

    function get_Any: Boolean;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;
    function get_MemberName: string;
    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_TypeFullName: string;
    function get_CheckSpecified: Boolean;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Any: Boolean read get_Any;
    property ElementName: string read get_ElementName;
    property XsdElementName: string read get_XsdElementName;
    property Namespace: string read get_Namespace;
    property MemberName: string read get_MemberName;
    property TypeName: string read get_TypeName;
    property TypeNamespace: string read get_TypeNamespace;
    property TypeFullName: string read get_TypeFullName;
    property CheckSpecified: Boolean read get_CheckSpecified;
  end;

  TDNXmlMemberMapping = class(TDNGenericImport<DNXmlMemberMappingClass, DNXmlMemberMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionImporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1E3333D8-B484-51BF-B536-25C620BB89B2}']
  { constructors } 

    {class} function init: DNXmlReflectionImporter; overload;
    {class} function init(defaultNamespace: string): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides): DNXmlReflectionImporter; overload;
    {class} function init(attributeOverrides: DNXmlAttributeOverrides; defaultNamespace: string): DNXmlReflectionImporter; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionImporter')]
  DNXmlReflectionImporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F2DB16CE-9AF3-3F0E-B83C-B8AF3A9DA7D7}']
  { methods } 

    procedure IncludeTypes(provider: DDNC.System.Private.CoreLib.DNICustomAttributeProvider);
    procedure IncludeType(&type: DDNC.System.Private.CoreLib.DNType);
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlTypeMapping; overload;
    function ImportTypeMapping(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlTypeMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean): DNXmlMembersMapping; overload;
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlReflectionImporter = class(TDNGenericImport<DNXmlReflectionImporterClass, DNXmlReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionMemberClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{74C8782B-BD37-5336-A994-4E1A4BE9B937}']
  { constructors } 

    {class} function init: DNXmlReflectionMember;

  end;

  [DNTypeName('System.Xml.Serialization.XmlReflectionMember')]
  DNXmlReflectionMember = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4A8ABABC-4303-303D-99EF-6444CDC090CF}']
  { getters & setters } 

    function get_MemberType: DDNC.System.Private.CoreLib.DNType;
    procedure set_MemberType(value: DDNC.System.Private.CoreLib.DNType);
    function get_XmlAttributes: DNXmlAttributes;
    procedure set_XmlAttributes(value: DNXmlAttributes);
    function get_SoapAttributes: DNSoapAttributes;
    procedure set_SoapAttributes(value: DNSoapAttributes);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_IsReturnValue: Boolean;
    procedure set_IsReturnValue(value: Boolean);
    function get_OverrideIsNullable: Boolean;
    procedure set_OverrideIsNullable(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberType: DDNC.System.Private.CoreLib.DNType read get_MemberType write set_MemberType;
    property XmlAttributes: DNXmlAttributes read get_XmlAttributes write set_XmlAttributes;
    property SoapAttributes: DNSoapAttributes read get_SoapAttributes write set_SoapAttributes;
    property MemberName: string read get_MemberName write set_MemberName;
    property IsReturnValue: Boolean read get_IsReturnValue write set_IsReturnValue;
    property OverrideIsNullable: Boolean read get_OverrideIsNullable write set_OverrideIsNullable;
  end;

  TDNXmlReflectionMember = class(TDNGenericImport<DNXmlReflectionMemberClass, DNXmlReflectionMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaEnumeratorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{795DD7DC-7A78-5585-873C-467B8E227C0C}']
  { constructors } 

    {class} function init(list: DNXmlSchemas): DNXmlSchemaEnumerator;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaEnumerator')]
  DNXmlSchemaEnumerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4526DA1A-3E08-3431-BF90-AD5FFE8122FD}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaEnumerator = class(TDNGenericImport<DNXmlSchemaEnumeratorClass, DNXmlSchemaEnumerator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaExporterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3CBB125E-201D-550C-8AD7-5B33DAE7E8E8}']
  { constructors } 

    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaExporter;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSchemaExporter')]
  DNXmlSchemaExporter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0DF6EEC1-2860-30DF-A629-EF5D9C01A536}']
  { methods } 

    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping); overload;
    function ExportTypeMapping(xmlMembersMapping: DNXmlMembersMapping): DNXmlQualifiedName; overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    function ExportAnyType(ns: string): string; overload;
    function ExportAnyType(members: DNXmlMembersMapping): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSchemaExporter = class(TDNGenericImport<DNXmlSchemaExporterClass, DNXmlSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationGeneratedCodeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EB6CC711-A912-5B04-8F22-397A3836510B}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationGeneratedCode')]
  DNXmlSerializationGeneratedCode = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{84642B7C-8F83-30AA-8DB1-079C74537157}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationGeneratedCode = class(TDNGenericImport<DNXmlSerializationGeneratedCodeClass, DNXmlSerializationGeneratedCode>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationReaderClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{EBB46E56-A502-516C-A29A-5683FEBD041C}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationReader')]
  DNXmlSerializationReader = interface(DNXmlSerializationGeneratedCode)
  ['{D8B640D3-C786-35D7-ADA0-27C4E38D8433}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationReader = class(TDNGenericImport<DNXmlSerializationReaderClass, DNXmlSerializationReader>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationWriterClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{758E60AD-66AA-5328-BBFD-550B1F57B462}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializationWriter')]
  DNXmlSerializationWriter = interface(DNXmlSerializationGeneratedCode)
  ['{5D36C773-77BC-369A-8807-3629C9CF2E24}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializationWriter = class(TDNGenericImport<DNXmlSerializationWriterClass, DNXmlSerializationWriter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C7411C72-4139-5BE2-9529-C2B0CBA2E717}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    {class} function init(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;

  { static methods } 

    {class} function FromMappings(mappings: TArray<DNXmlMapping>): TArray<DNXmlSerializer>; overload;
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; &type: DDNC.System.Private.CoreLib.DNType): TArray<DNXmlSerializer>; overload;
    {class} function FromTypes(types: TArray<DDNC.System.Private.CoreLib.DNType>): TArray<DNXmlSerializer>;
    {class} function GetXmlSerializerAssemblyName(&type: DDNC.System.Private.CoreLib.DNType): string; overload;
    {class} function GetXmlSerializerAssemblyName(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): string; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializer')]
  DNXmlSerializer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D6BF4EF2-5292-3FC2-BC06-06892C0FFB1B}']
  { events } 

    procedure add_UnknownNode(value: DNXmlNodeEventHandler);
    procedure remove_UnknownNode(value: DNXmlNodeEventHandler);
    procedure add_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure remove_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure add_UnknownElement(value: DNXmlElementEventHandler);
    procedure remove_UnknownElement(value: DNXmlElementEventHandler);
    procedure add_UnreferencedObject(value: DNUnreferencedObjectEventHandler);
    procedure remove_UnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    procedure Serialize(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(stream: DDNC.System.Private.CoreLib.DNStream; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(stream: DDNC.System.Private.CoreLib.DNStream; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string); overload;
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDNC.System.Private.CoreLib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string; id: string); overload;
    function Deserialize(stream: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(textReader: DDNC.System.Private.CoreLib.DNTextReader): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; events: DNXmlDeserializationEvents): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string; events: DNXmlDeserializationEvents): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanDeserialize(xmlReader: DNXmlReader): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializer = class(TDNGenericImport<DNXmlSerializerClass, DNXmlSerializer>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerFactoryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BB1CDD6A-D94D-59EC-A420-1FC0B738E801}']
  { constructors } 

    {class} function init: DNXmlSerializerFactory;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerFactory')]
  DNXmlSerializerFactory = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{444EFCE8-10C7-3CEA-A935-1D1AC52103BA}']
  { methods } 

    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    function CreateSerializer(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    function CreateSerializer(&type: DDNC.System.Private.CoreLib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDNC.System.Private.CoreLib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlSerializerFactory = class(TDNGenericImport<DNXmlSerializerFactoryClass, DNXmlSerializerFactory>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerImplementationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CB6C3C05-A98E-5D32-B574-7E02CEF4E05A}']
  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerImplementation')]
  DNXmlSerializerImplementation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{35DA469F-DBF3-390D-BD97-0A3A5473F77B}']
  { getters & setters } 

    function get_Reader: DNXmlSerializationReader;
    function get_Writer: DNXmlSerializationWriter;
    function get_ReadMethods: DDNC.System.Private.CoreLib.DNHashtable;
    function get_WriteMethods: DDNC.System.Private.CoreLib.DNHashtable;
    function get_TypedSerializers: DDNC.System.Private.CoreLib.DNHashtable;

  { methods } 

    function CanSerialize(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetSerializer(&type: DDNC.System.Private.CoreLib.DNType): DNXmlSerializer;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Reader: DNXmlSerializationReader read get_Reader;
    property Writer: DNXmlSerializationWriter read get_Writer;
    property ReadMethods: DDNC.System.Private.CoreLib.DNHashtable read get_ReadMethods;
    property WriteMethods: DDNC.System.Private.CoreLib.DNHashtable read get_WriteMethods;
    property TypedSerializers: DDNC.System.Private.CoreLib.DNHashtable read get_TypedSerializers;
  end;

  TDNXmlSerializerImplementation = class(TDNGenericImport<DNXmlSerializerImplementationClass, DNXmlSerializerImplementation>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerNamespacesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{69D4C690-DD8D-5ECC-8568-07BF70E85982}']
  { constructors } 

    {class} function init: DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: DNXmlSerializerNamespaces): DNXmlSerializerNamespaces; overload;
    {class} function init(namespaces: TArray<DNXmlQualifiedName>): DNXmlSerializerNamespaces; overload;

  end;

  [DNTypeName('System.Xml.Serialization.XmlSerializerNamespaces')]
  DNXmlSerializerNamespaces = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{250162DB-E8A0-37E2-BC2B-190B43CF720D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(prefix: string; ns: string);
    function ToArray: TArray<DNXmlQualifiedName>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlSerializerNamespaces = class(TDNGenericImport<DNXmlSerializerNamespacesClass, DNXmlSerializerNamespaces>) end;

  //-------------namespace: System.Xml----------------
  DNXmlConvertClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DBE9D09B-0A19-56BA-9215-6190CA792336}']
  { constructors } 

    {class} function init: DNXmlConvert;

  { static methods } 

    {class} function ToDateTime(s: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; format: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; formats: TArray<string>): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTime(s: string; dateTimeOption: DNXmlDateTimeSerializationMode): DDNC.System.Private.CoreLib.DNDateTime; overload;
    {class} function ToDateTimeOffset(s: string): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; format: string): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToDateTimeOffset(s: string; formats: TArray<string>): DDNC.System.Private.CoreLib.DNDateTimeOffset; overload;
    {class} function ToGuid(s: string): DDNC.System.Private.CoreLib.DNGuid;
    {class} function EncodeName(name: string): string;
    {class} function EncodeNmToken(name: string): string;
    {class} function EncodeLocalName(name: string): string;
    {class} function DecodeName(name: string): string;
    {class} function VerifyName(name: string): string;
    {class} function VerifyNCName(name: string): string;
    {class} function VerifyTOKEN(token: string): string;
    {class} function VerifyNMTOKEN(name: string): string;
    {class} function VerifyXmlChars(content: string): string;
    {class} function VerifyPublicId(publicId: string): string;
    {class} function VerifyWhitespace(content: string): string;
    {class} function IsStartNCNameChar(ch: Char): Boolean;
    {class} function IsNCNameChar(ch: Char): Boolean;
    {class} function IsXmlChar(ch: Char): Boolean;
    {class} function IsXmlSurrogatePair(lowChar: Char; highChar: Char): Boolean;
    {class} function IsPublicIdChar(ch: Char): Boolean;
    {class} function IsWhitespaceChar(ch: Char): Boolean;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDecimal): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNTimeSpan): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime; format: string): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime; dateTimeOption: DNXmlDateTimeSerializationMode): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTimeOffset): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTimeOffset; format: string): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNGuid): string; overload;
    {class} function ToBoolean(s: string): Boolean;
    {class} function ToChar(s: string): Char;
    {class} function ToDecimal(s: string): DDNC.System.Private.CoreLib.DNDecimal;
    {class} function ToSByte(s: string): SByte;
    {class} function ToInt16(s: string): Int16;
    {class} function ToInt32(s: string): Int32;
    {class} function ToInt64(s: string): Int64;
    {class} function ToByte(s: string): Byte;
    {class} function ToUInt16(s: string): UInt16;
    {class} function ToUInt32(s: string): UInt32;
    {class} function ToUInt64(s: string): UInt64;
    {class} function ToSingle(s: string): Single;
    {class} function ToDouble(s: string): Double;
    {class} function ToTimeSpan(s: string): DDNC.System.Private.CoreLib.DNTimeSpan;

  end;

  [DNTypeName('System.Xml.XmlConvert')]
  DNXmlConvert = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{784C8D99-17CA-34A7-BAC7-4DDF3EAB10C5}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlConvert = class(TDNGenericImport<DNXmlConvertClass, DNXmlConvert>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{649C4013-37D6-572C-A0C7-DE15816316AC}']
  { constructors } 

    {class} function init: DNXmlImplementation; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{98624CF6-5DA6-3AF8-8387-CE98EF5A9070}']
  { methods } 

    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function CreateDocument: DNXmlDocument;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamedNodeMapClass = interface(DNObjectClass)
  ['{A38FAE5F-822E-501F-B76D-1707836390B5}']
  end;

  [DNTypeName('System.Xml.XmlNamedNodeMap')]
  DNXmlNamedNodeMap = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{F706839B-DF31-3CFF-BC23-A13A75DA21CA}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetNamedItem(name: string): DNXmlNode; overload;
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlNamedNodeMap = class(TDNGenericImport<DNXmlNamedNodeMapClass, DNXmlNamedNodeMap>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNXmlNamedNodeMapClass)
  ['{1D6FC44E-488B-5605-8236-6B9D5183A935}']
  end;

  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNXmlNamedNodeMap)
  ['{E6810B46-AE69-3B93-99FC-7DDC5F6C0E84}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    function RemoveAt(i: Int32): DNXmlAttribute;
    procedure RemoveAll;
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    function GetNamedItem(name: string): DNXmlNode; overload;
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    function Item(index: Int32): DNXmlNode;
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DNObjectClass)
  ['{02DDB756-C8EF-5D4A-8225-6562CCA0FB53}']
  { constructors } 

    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DNIXmlNamespaceResolver)
  ['{E7F6C4A9-FB0E-36E3-86B5-30E9017FA7C0}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    procedure PushScope;
    function PopScope: Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    procedure RemoveNamespace(prefix: string; uri: string);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltContextClass = interface(DNXmlNamespaceManagerClass)
  ['{555D44F6-572C-51CB-8542-FFCC9E953824}']
  end;

  [DNTypeName('System.Xml.Xsl.XsltContext')]
  DNXsltContext = interface(DNXmlNamespaceManager)
  ['{F4664B87-A0DF-37BF-B8EC-966C51B6A63C}']
  { getters & setters } 

    function get_Whitespace: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    function ResolveVariable(prefix: string; name: string): DNIXsltContextVariable;
    function ResolveFunction(prefix: string; name: string; ArgTypes: TArray<DNXPathResultType>): DNIXsltContextFunction;
    function PreserveWhitespace(node: DNXPathNavigator): Boolean;
    function CompareDocument(baseUri: string; nextbaseUri: string): Int32;
    procedure PushScope;
    function PopScope: Boolean;
    procedure AddNamespace(prefix: string; uri: string);
    procedure RemoveNamespace(prefix: string; uri: string);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(uri: string): string;
    function HasNamespace(prefix: string): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Whitespace: Boolean read get_Whitespace;
    property NameTable: DNXmlNameTable read get_NameTable;
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXsltContext = class(TDNGenericImport<DNXsltContextClass, DNXsltContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{85CBB4AF-1535-5AA4-8CDE-6F8B4E198434}']
  end;

  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{30DB57CF-F575-36CC-9752-F59CF30AC194}']
  { methods } 

    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Get(&array: string): string; overload;
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    function Add(&array: string): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNNameTableClass = interface(DNXmlNameTableClass)
  ['{1995F981-C31B-5134-9D6C-18902E2C266B}']
  { constructors } 

    {class} function init: DNNameTable;

  end;

  [DNTypeName('System.Xml.NameTable')]
  DNNameTable = interface(DNXmlNameTable)
  ['{4AFF7AAF-7D56-3AAD-80E3-3F262E70D5D3}']
  { methods } 

    function Add(key: string): string; overload;
    function Add(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function Get(value: string): string; overload;
    function Get(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNNameTable = class(TDNGenericImport<DNNameTableClass, DNNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DNObjectClass)
  ['{11873AAE-21CB-5F17-BDDF-7A82995F2BE9}']
  end;

  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDNC.System.Private.CoreLib.DNICloneable)
  ['{B0E4EA31-EF0D-3FFB-A4BA-BF767DF234ED}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{8B19228E-3ED7-5D91-AE5A-3A88FF91C116}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    {class} property InnerText: string write set_InnerText;
    {class} property InnerXml: string write set_InnerXml;
  end;

  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{33DD2FBB-6BF4-3B35-AF0D-BBC44C923CD0}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ParentNode: DNXmlNode read get_ParentNode;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Value: string read get_Value write set_Value;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerText: string write set_InnerText;
    property Specified: Boolean read get_Specified;
    property OwnerElement: DNXmlElement read get_OwnerElement;
    property InnerXml: string write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{7660E954-CC49-5031-A389-5EBE88E2A654}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDocument; overload;
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{985FB478-5E93-34ED-ADBD-16063DEEFC22}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DNXmlCDataSection;
    function CreateComment(data: string): DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    function CreateDocumentFragment: DNXmlDocumentFragment;
    function CreateElement(name: string): DNXmlElement; overload;
    function CreateEntityReference(name: string): DNXmlEntityReference;
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    function CreateTextNode(text: string): DNXmlText;
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    function CreateNavigator: DNXPathNavigator;
    function CreateWhitespace(text: string): DNXmlWhitespace;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function GetElementById(elementId: string): DNXmlElement;
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Load(txtReader: DDNC.System.Private.CoreLib.DNTextReader); overload;
    procedure Load(reader: DNXmlReader); overload;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(writer: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(w: DNXmlWriter); overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(xw: DNXmlWriter);
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    property &Implementation: DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DNXmlElement read get_DocumentElement;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property NameTable: DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{000CE558-B747-5E86-A2E4-A07629870ECF}']
  end;

  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{168755DD-183C-34DD-B46A-7C1DA5718CDF}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityClass = interface(DNXmlNodeClass)
  ['{8C962A37-6569-5638-9052-3EA80E945B88}']
  end;

  [DNTypeName('System.Xml.XmlEntity')]
  DNXmlEntity = interface(DNXmlNode)
  ['{4763BA82-AB72-350D-A841-E11E7652B14F}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Name: string;
    function get_LocalName: string;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_NotationName: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property NotationName: string read get_NotationName;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntity = class(TDNGenericImport<DNXmlEntityClass, DNXmlEntity>) end;

  //-------------namespace: System.Xml----------------
  DNXmlLinkedNodeClass = interface(DNXmlNodeClass)
  ['{A43EA618-DB99-5F5F-8C7F-0CEA13944DE6}']
  end;

  [DNTypeName('System.Xml.XmlLinkedNode')]
  DNXmlLinkedNode = interface(DNXmlNode)
  ['{020FA36C-7ADB-3270-B116-25D277926EC1}']
  { getters & setters } 

    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlLinkedNode = class(TDNGenericImport<DNXmlLinkedNodeClass, DNXmlLinkedNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCharacterDataClass = interface(DNXmlLinkedNodeClass)
  ['{CB30DCBB-BEE8-5A1D-98C8-EEC26B1CA22F}']
  end;

  [DNTypeName('System.Xml.XmlCharacterData')]
  DNXmlCharacterData = interface(DNXmlLinkedNode)
  ['{5BE2A495-DBDF-3561-A1CC-AFDECC7A6F8A}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    function CloneNode(deep: Boolean): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlCharacterData = class(TDNGenericImport<DNXmlCharacterDataClass, DNXmlCharacterData>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNXmlCharacterDataClass)
  ['{DA4DA3B0-79F5-5E48-AB52-CB0301A015E5}']
  end;

  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNXmlCharacterData)
  ['{FDC59C71-4236-37EC-B748-0540C61506F8}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property PreviousText: DNXmlNode read get_PreviousText;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNXmlCharacterDataClass)
  ['{15DE984C-6623-5866-B4A4-96CF09AF764D}']
  end;

  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNXmlCharacterData)
  ['{D7661660-63F6-36A8-AEE8-22D10EC89199}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{65D92A5A-363C-59FA-9338-F287DDD7D59E}']
  end;

  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNXmlCharacterData)
  ['{9681FE54-5C9D-3EB9-BDD5-D0C193F4C270}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNXmlCharacterDataClass)
  ['{D9FAB923-EE4A-53E4-A5DF-4EC950BE74FE}']
  end;

  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNXmlCharacterData)
  ['{0767EA0E-085E-3AE2-81E0-D6004E7D19FE}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function SplitText(offset: Int32): DNXmlText;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{8EAC5B4B-3D1A-55A7-8C26-6280F1A0E642}']
  end;

  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNXmlCharacterData)
  ['{01874C34-DC79-35CB-B7E0-D9FC3DB5DD99}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Substring(offset: Int32; count: Int32): string;
    procedure AppendData(strData: string);
    procedure InsertData(offset: Int32; strData: string);
    procedure DeleteData(offset: Int32; count: Int32);
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property Value: string read get_Value write set_Value;
    property PreviousText: DNXmlNode read get_PreviousText;
    property InnerText: string read get_InnerText write set_InnerText;
    property Data: string read get_Data write set_Data;
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNXmlLinkedNodeClass)
  ['{5C20DDF1-38BD-5F15-82FD-4B72BEF9BFEC}']
  end;

  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNXmlLinkedNode)
  ['{525E3FFE-3476-31BB-A0C2-0D3DC2E6105F}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Version: string read get_Version;
    property Encoding: string read get_Encoding write set_Encoding;
    property Standalone: string read get_Standalone write set_Standalone;
    property Value: string read get_Value write set_Value;
    property InnerText: string read get_InnerText write set_InnerText;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNXmlLinkedNodeClass)
  ['{B059743A-32C9-5BB0-8F4D-E79D7A4AC8CE}']
  end;

  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNXmlLinkedNode)
  ['{3EAB1E3B-1371-3201-BBB4-3BAA8B17B7B8}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_Entities: DNXmlNamedNodeMap;
    function get_Notations: DNXmlNamedNodeMap;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Entities: DNXmlNamedNodeMap read get_Entities;
    property Notations: DNXmlNamedNodeMap read get_Notations;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property InternalSubset: string read get_InternalSubset;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNXmlLinkedNodeClass)
  ['{EF625B45-11D8-5C59-B79C-794EDF1F8D07}']
  end;

  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNXmlLinkedNode)
  ['{AD38F132-1DA7-3F8C-A68F-D750F2908DBA}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    function GetAttribute(name: string): string; overload;
    procedure SetAttribute(name: string; value: string); overload;
    procedure RemoveAttribute(name: string); overload;
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    function HasAttribute(name: string): Boolean; overload;
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    procedure RemoveAllAttributes;
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property HasAttributes: Boolean read get_HasAttributes;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property InnerText: string read get_InnerText write set_InnerText;
    property NextSibling: DNXmlNode read get_NextSibling;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNXmlLinkedNodeClass)
  ['{550894B3-A735-54A7-917D-BF35EDED2D6B}']
  end;

  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNXmlLinkedNode)
  ['{8DE81ACE-23F1-3FC6-8E3B-4FA0BBBA5C50}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property BaseURI: string read get_BaseURI;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNXmlLinkedNodeClass)
  ['{BBF2E98D-14DB-511C-9461-BF034635349D}']
  end;

  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNXmlLinkedNode)
  ['{D622E48A-A786-3709-B394-8E91FA59F4B8}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property Value: string read get_Value write set_Value;
    property Target: string read get_Target;
    property Data: string read get_Data write set_Data;
    property InnerText: string read get_InnerText write set_InnerText;
    property NodeType: DNXmlNodeType read get_NodeType;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNotationClass = interface(DNXmlNodeClass)
  ['{EEAA2A6F-3A5E-5852-96A7-575F8FF8FD8C}']
  end;

  [DNTypeName('System.Xml.XmlNotation')]
  DNXmlNotation = interface(DNXmlNode)
  ['{D86142FF-48DC-319B-9245-D1D848818A64}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    function CloneNode(deep: Boolean): DNXmlNode;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Supports(feature: string; version: string): Boolean;
    function Clone: DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NodeType: DNXmlNodeType read get_NodeType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property PublicId: string read get_PublicId;
    property SystemId: string read get_SystemId;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNotation = class(TDNGenericImport<DNXmlNotationClass, DNXmlNotation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DNObjectClass)
  ['{C845AA1A-D0D2-5F3C-8B14-D844707F27FF}']
  end;

  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{21090816-D777-36C0-9944-7101E2EF3449}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    function Item(index: Int32): DNXmlNode;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlParserContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{75B87336-7E4B-5937-8E44-51FF48FE8B47}']
  { constructors } 

    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDNC.System.Private.CoreLib.DNEncoding): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDNC.System.Private.CoreLib.DNEncoding): DNXmlParserContext; overload;

  end;

  [DNTypeName('System.Xml.XmlParserContext')]
  DNXmlParserContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5A8E4BFA-650F-3BF4-9873-BCFDD8595638}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    function get_NamespaceManager: DNXmlNamespaceManager;
    procedure set_NamespaceManager(value: DNXmlNamespaceManager);
    function get_DocTypeName: string;
    procedure set_DocTypeName(value: string);
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_BaseURI: string;
    procedure set_BaseURI(value: string);
    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpace: DNXmlSpace;
    procedure set_XmlSpace(value: DNXmlSpace);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_Encoding(value: DDNC.System.Private.CoreLib.DNEncoding);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property NamespaceManager: DNXmlNamespaceManager read get_NamespaceManager write set_NamespaceManager;
    property DocTypeName: string read get_DocTypeName write set_DocTypeName;
    property PublicId: string read get_PublicId write set_PublicId;
    property SystemId: string read get_SystemId write set_SystemId;
    property BaseURI: string read get_BaseURI write set_BaseURI;
    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    property XmlLang: string read get_XmlLang write set_XmlLang;
    property XmlSpace: DNXmlSpace read get_XmlSpace write set_XmlSpace;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNXmlParserContext = class(TDNGenericImport<DNXmlParserContextClass, DNXmlParserContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlQualifiedNameClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A18DA599-A82C-58E8-B666-9A30DB255934}']
  { constructors } 

    {class} function init: DNXmlQualifiedName; overload;
    {class} function init(name: string): DNXmlQualifiedName; overload;
    {class} function init(name: string; ns: string): DNXmlQualifiedName; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQualifiedName;

  { static fields } 

    {class} property Empty: DNXmlQualifiedName read __fakeFieldGet_Empty;

  { static methods } 

    {class} function ToString(name: string; ns: string): string; overload;

  end;

  [DNTypeName('System.Xml.XmlQualifiedName')]
  DNXmlQualifiedName = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E518828B-CBA1-330E-B791-19B0BE7268E0}']
  { getters & setters } 

    function get_Namespace: string;
    function get_Name: string;
    function get_IsEmpty: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function ToString: string; overload;
    function Equals(other: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Namespace: string read get_Namespace;
    property Name: string read get_Name;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmlQualifiedName = class(TDNGenericImport<DNXmlQualifiedNameClass, DNXmlQualifiedName>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DNObjectClass)
  ['{117B2A7A-3AB1-5153-BA99-BA38DE69EA13}']
  { static methods } 

    {class} function Create(inputUri: string): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    {class} function Create(input: DDNC.System.Private.CoreLib.DNTextReader; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    {class} function IsName(str: string): Boolean;
    {class} function IsNameToken(str: string): Boolean;

  end;

  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{D2AAB9A1-9E3F-39A9-9181-9ADF6BBD297C}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Settings: DNXmlReaderSettings read get_Settings;
    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeReaderClass = interface(DNXmlReaderClass)
  ['{130EB403-9C50-5577-86FF-8280E602CC98}']
  { constructors } 

    {class} function init(node: DNXmlNode): DNXmlNodeReader;

  end;

  [DNTypeName('System.Xml.XmlNodeReader')]
  DNXmlNodeReader = interface(DNXmlReader)
  ['{86F83F9B-5286-3C46-A4B5-F26917D0FDE7}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_CanResolveEntity: Boolean;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_HasAttributes: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_CanReadBinaryContent: Boolean;
    function get_Settings: DNXmlReaderSettings;
    function get_QuoteChar: Char;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    function GetAttribute(attributeIndex: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(name: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(attributeIndex: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function ReadString: string;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadAttributeValue: Boolean;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property HasAttributes: Boolean read get_HasAttributes;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property Settings: DNXmlReaderSettings read get_Settings;
    property QuoteChar: Char read get_QuoteChar;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
  end;

  TDNXmlNodeReader = class(TDNGenericImport<DNXmlNodeReaderClass, DNXmlNodeReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextReaderClass = interface(DNXmlReaderClass)
  ['{29D16EE3-1ADD-5B24-B1C2-186F5B742D11}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(input: DDNC.System.Private.CoreLib.DNStream): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNStream): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNTextReader): DNXmlTextReader; overload;
    {class} function init(input: DDNC.System.Private.CoreLib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(url: string; input: DDNC.System.Private.CoreLib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    {class} function init(xmlFragment: DDNC.System.Private.CoreLib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    {class} function init(url: string): DNXmlTextReader; overload;
    {class} function init(url: string; nt: DNXmlNameTable): DNXmlTextReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlTextReader')]
  DNXmlTextReader = interface(DNXmlReader)
  ['{FAB5F5C1-C934-39E1-9725-88BD41CF0C57}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Normalization: Boolean;
    procedure set_Normalization(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_HasAttributes: Boolean;

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    procedure Skip;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    procedure ResetState;
    function GetRemainder: DDNC.System.Private.CoreLib.DNTextReader;
    function ReadChars(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function ReadBase64(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function ReadBinHex(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Normalization: Boolean read get_Normalization write set_Normalization;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlTextReader = class(TDNGenericImport<DNXmlTextReaderClass, DNXmlTextReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlValidatingReaderClass = interface(DNXmlReaderClass)
  ['{EFFD8875-0CC9-5D5F-8D52-67F278B9A2B2}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init(reader: DNXmlReader): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;
    {class} function init(xmlFragment: DDNC.System.Private.CoreLib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlValidatingReader')]
  DNXmlValidatingReader = interface(DNXmlReader)
  ['{148E210B-871C-316C-ADE4-3CAB808679B2}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SchemaType: DDNC.System.Private.CoreLib.DNObject;
    function get_Reader: DNXmlReader;
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_Schemas: DNXmlSchemaCollection;
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    function GetAttribute(name: string): string; overload;
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    function GetAttribute(i: Int32): string; overload;
    function MoveToAttribute(name: string): Boolean; overload;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    procedure MoveToAttribute(i: Int32); overload;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function MoveToElement: Boolean;
    function ReadAttributeValue: Boolean;
    function Read: Boolean;
    procedure Close;
    function LookupNamespace(prefix: string): string;
    procedure ResolveEntity;
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    function ReadString: string;
    function HasLineInfo: Boolean;
    function ReadTypedValue: DDNC.System.Private.CoreLib.DNObject;
    function GetValueAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsObjectAsync: DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadElementContentAsStringAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadElementContentAsAsync(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function ReadAsync: DDNC.System.Private.CoreLib.DNTask<Boolean>;
    function SkipAsync: DDNC.System.Private.CoreLib.DNTask;
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>;
    function MoveToContentAsync: DDNC.System.Private.CoreLib.DNTask<DNXmlNodeType>;
    function ReadInnerXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadOuterXmlAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadContentAsObject: DDNC.System.Private.CoreLib.DNObject;
    function ReadContentAsBoolean: Boolean;
    function ReadContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadContentAsDateTimeOffset: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    function ReadContentAsDouble: Double;
    function ReadContentAsFloat: Single;
    function ReadContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadContentAsInt: Int32;
    function ReadContentAsLong: Int64;
    function ReadContentAsString: string;
    function ReadContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject;
    function ReadElementContentAsObject: DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAsBoolean: Boolean; overload;
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    function ReadElementContentAsDateTime: DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDateTime; overload;
    function ReadElementContentAsDouble: Double; overload;
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    function ReadElementContentAsFloat: Single; overload;
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    function ReadElementContentAsDecimal: DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNDecimal; overload;
    function ReadElementContentAsInt: Int32; overload;
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    function ReadElementContentAsLong: Int64; overload;
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    function ReadElementContentAsString: string; overload;
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ReadElementContentAs(returnType: DDNC.System.Private.CoreLib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDNC.System.Private.CoreLib.DNObject; overload;
    procedure Skip;
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    function MoveToContent: DNXmlNodeType;
    procedure ReadStartElement; overload;
    procedure ReadStartElement(name: string); overload;
    procedure ReadStartElement(localname: string; ns: string); overload;
    function ReadElementString: string; overload;
    function ReadElementString(name: string): string; overload;
    function ReadElementString(localname: string; ns: string): string; overload;
    procedure ReadEndElement;
    function IsStartElement: Boolean; overload;
    function IsStartElement(name: string): Boolean; overload;
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    function ReadToFollowing(name: string): Boolean; overload;
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToDescendant(name: string): Boolean; overload;
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    function ReadToNextSibling(name: string): Boolean; overload;
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    function ReadInnerXml: string;
    function ReadOuterXml: string;
    function ReadSubtree: DNXmlReader;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNXmlNodeType read get_NodeType;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property HasValue: Boolean read get_HasValue;
    property Value: string read get_Value;
    property Depth: Int32 read get_Depth;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property IsDefault: Boolean read get_IsDefault;
    property QuoteChar: Char read get_QuoteChar;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property AttributeCount: Int32 read get_AttributeCount;
    property EOF: Boolean read get_EOF;
    property ReadState: DNReadState read get_ReadState;
    property NameTable: DNXmlNameTable read get_NameTable;
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
    property SchemaType: DDNC.System.Private.CoreLib.DNObject read get_SchemaType;
    property Reader: DNXmlReader read get_Reader;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property Schemas: DNXmlSchemaCollection read get_Schemas;
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property Settings: DNXmlReaderSettings read get_Settings;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlValidatingReader = class(TDNGenericImport<DNXmlValidatingReaderClass, DNXmlValidatingReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{259CF65A-743D-5753-B7B1-9DEF8427BBD4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXmlReaderSettings;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F0E42E39-FD3C-321D-A1D8-5A9C889389D9}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    procedure Reset;
    function Clone: DNXmlReaderSettings;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4B3DA97D-BC73-5434-BC07-DCF5C2D98D99}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7B0E1EC5-6C17-3AD0-B75A-7E10A139326F}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml.Resolvers----------------
  DNXmlPreloadedResolverClass = interface(DNXmlResolverClass)
  ['{ABE2494C-081C-5BBC-8157-84F8F88A445C}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { constructors } 

    {class} function init: DNXmlPreloadedResolver; overload;
    {class} function init(preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds; uriComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<DDNC.System.Private.Uri.DNUri>): DNXmlPreloadedResolver; overload;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.Resolvers.XmlPreloadedResolver')]
  DNXmlPreloadedResolver = interface(DNXmlResolver)
  ['{2FAB54ED-9BB1-346E-9F09-1018852ECBF6}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    function get_PreloadedUris: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.Uri.DNUri>;

  { methods } 

    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: TArray<Byte>); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Add(uri: DDNC.System.Private.Uri.DNUri; value: string); overload;
    procedure Remove(uri: DDNC.System.Private.Uri.DNUri);
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    property PreloadedUris: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.Uri.DNUri> read get_PreloadedUris;
  end;

  TDNXmlPreloadedResolver = class(TDNGenericImport<DNXmlPreloadedResolverClass, DNXmlPreloadedResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSecureResolverClass = interface(DNXmlResolverClass)
  ['{30BBB8FA-8DA7-5250-BC21-15A148E8896C}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { constructors } 

    {class} function init(resolver: DNXmlResolver; securityUrl: string): DNXmlSecureResolver;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  [DNTypeName('System.Xml.XmlSecureResolver')]
  DNXmlSecureResolver = interface(DNXmlResolver)
  ['{324C9BAA-9BFA-3926-916A-BC515002FE02}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
  end;

  TDNXmlSecureResolver = class(TDNGenericImport<DNXmlSecureResolverClass, DNXmlSecureResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlUrlResolverClass = interface(DNXmlResolverClass)
  ['{CAC7DCE5-80E6-5D1C-81F4-B59C6208607D}']
  { static getter & setter } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    procedure set_Proxy(value: DDNC.System.Net.Primitives.DNIWebProxy);
    procedure set_CachePolicy(value: DDNC.System.Net.Primitives.DNRequestCachePolicy);

  { constructors } 

    {class} function init: DNXmlUrlResolver;

  { static propertys } 

    {class} property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    {class} property Proxy: DDNC.System.Net.Primitives.DNIWebProxy write set_Proxy;
    {class} property CachePolicy: DDNC.System.Net.Primitives.DNRequestCachePolicy write set_CachePolicy;
  end;

  [DNTypeName('System.Xml.XmlUrlResolver')]
  DNXmlUrlResolver = interface(DNXmlResolver)
  ['{9CA17E81-AC26-3BB4-BEF3-B5107E14D538}']
  { getters & setters } 

    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    procedure set_Proxy(value: DDNC.System.Net.Primitives.DNIWebProxy);
    procedure set_CachePolicy(value: DDNC.System.Net.Primitives.DNRequestCachePolicy);

  { methods } 

    function GetEntity(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ResolveUri(baseUri: DDNC.System.Private.Uri.DNUri; relativeUri: string): DDNC.System.Private.Uri.DNUri;
    function GetEntityAsync(absoluteUri: DDNC.System.Private.Uri.DNUri; role: string; ofObjectToReturn: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Private.CoreLib.DNObject>;
    function SupportsType(absoluteUri: DDNC.System.Private.Uri.DNUri; &type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Credentials: DDNC.System.Net.Primitives.DNICredentials write set_Credentials;
    property Proxy: DDNC.System.Net.Primitives.DNIWebProxy write set_Proxy;
    property CachePolicy: DDNC.System.Net.Primitives.DNRequestCachePolicy write set_CachePolicy;
  end;

  TDNXmlUrlResolver = class(TDNGenericImport<DNXmlUrlResolverClass, DNXmlUrlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DNObjectClass)
  ['{9605D270-3C17-53AC-BCD7-B1DBDA023D62}']
  { static methods } 

    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    {class} function Create(outputFileName: string; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStream): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStream; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNTextWriter): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNTextWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStringBuilder): DNXmlWriter; overload;
    {class} function Create(output: DDNC.System.Private.CoreLib.DNStringBuilder; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;
    {class} function Create(output: DNXmlWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{6431BDF3-1D93-38BE-AD29-AB155A87BC6B}']
  { getters & setters } 

    function get_Settings: DNXmlWriterSettings;
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Settings: DNXmlWriterSettings read get_Settings;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextWriterClass = interface(DNXmlWriterClass)
  ['{B99E4050-DD8E-535C-91B1-EB83E4B942F5}']
  { constructors } 

    {class} function init(w: DDNC.System.Private.CoreLib.DNStream; encoding: DDNC.System.Private.CoreLib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(filename: string; encoding: DDNC.System.Private.CoreLib.DNEncoding): DNXmlTextWriter; overload;
    {class} function init(w: DDNC.System.Private.CoreLib.DNTextWriter): DNXmlTextWriter; overload;

  end;

  [DNTypeName('System.Xml.XmlTextWriter')]
  DNXmlTextWriter = interface(DNXmlWriter)
  ['{54B14A19-EB12-37CA-ADAA-C642EE0767F1}']
  { getters & setters } 

    function get_BaseStream: DDNC.System.Private.CoreLib.DNStream;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Formatting: DNFormatting;
    procedure set_Formatting(value: DNFormatting);
    function get_Indentation: Int32;
    procedure set_Indentation(value: Int32);
    function get_IndentChar: Char;
    procedure set_IndentChar(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteCData(text: string);
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(name: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    function LookupPrefix(ns: string): string;
    procedure WriteNmToken(name: string);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseStream: DDNC.System.Private.CoreLib.DNStream read get_BaseStream;
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    property Formatting: DNFormatting read get_Formatting write set_Formatting;
    property Indentation: Int32 read get_Indentation write set_Indentation;
    property IndentChar: Char read get_IndentChar write set_IndentChar;
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlTextWriter = class(TDNGenericImport<DNXmlTextWriterClass, DNXmlTextWriter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryOutputClass = interface(DNXmlWriterClass)
  ['{F1BA58B1-4C6F-54D5-AA63-449ABF1EA25F}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryOutput')]
  DNXmlQueryOutput = interface(DNXmlWriter)
  ['{7A911A0A-1BB5-3199-927F-D328B5EBDAF5}']
  { getters & setters } 

    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    procedure WriteStartDocument; overload;
    procedure WriteStartDocument(standalone: Boolean); overload;
    procedure WriteEndDocument;
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElement;
    procedure WriteFullEndElement;
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndAttribute;
    procedure WriteComment(text: string);
    procedure WriteProcessingInstruction(target: string; text: string);
    procedure WriteEntityRef(name: string);
    procedure WriteCharEntity(ch: Char);
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    procedure WriteWhitespace(ws: string);
    procedure WriteString(text: string);
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteRaw(data: string); overload;
    procedure WriteCData(text: string);
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Close;
    procedure Flush;
    function LookupPrefix(ns: string): string;
    procedure StartTree(rootType: DNXPathNodeType);
    procedure EndTree;
    procedure WriteStartElementUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartElementUnchecked(localName: string); overload;
    procedure StartElementContentUnchecked;
    procedure WriteEndElementUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteEndElementUnchecked(localName: string); overload;
    procedure WriteStartAttributeUnchecked(prefix: string; localName: string; ns: string); overload;
    procedure WriteStartAttributeUnchecked(localName: string); overload;
    procedure WriteEndAttributeUnchecked;
    procedure WriteNamespaceDeclarationUnchecked(prefix: string; ns: string);
    procedure WriteStringUnchecked(text: string);
    procedure WriteRawUnchecked(text: string);
    procedure WriteStartRoot;
    procedure WriteEndRoot;
    procedure WriteStartElementLocalName(localName: string);
    procedure WriteStartAttributeLocalName(localName: string);
    procedure WriteStartElementComputed(tagName: string; prefixMappingsIndex: Int32); overload;
    procedure WriteStartElementComputed(tagName: string; ns: string); overload;
    procedure WriteStartElementComputed(navigator: DNXPathNavigator); overload;
    procedure WriteStartElementComputed(name: DNXmlQualifiedName); overload;
    procedure WriteStartAttributeComputed(tagName: string; prefixMappingsIndex: Int32); overload;
    procedure WriteStartAttributeComputed(tagName: string; ns: string); overload;
    procedure WriteStartAttributeComputed(navigator: DNXPathNavigator); overload;
    procedure WriteStartAttributeComputed(name: DNXmlQualifiedName); overload;
    procedure WriteNamespaceDeclaration(prefix: string; ns: string);
    procedure WriteStartNamespace(prefix: string);
    procedure WriteNamespaceString(text: string);
    procedure WriteEndNamespace;
    procedure WriteStartComment;
    procedure WriteCommentString(text: string);
    procedure WriteEndComment;
    procedure WriteStartProcessingInstruction(target: string);
    procedure WriteProcessingInstructionString(text: string);
    procedure WriteEndProcessingInstruction;
    procedure WriteItem(item: DNXPathItem);
    procedure XsltCopyOf(navigator: DNXPathNavigator);
    function StartCopy(navigator: DNXPathNavigator): Boolean;
    procedure EndCopy(navigator: DNXPathNavigator);
    procedure WriteStartElement(localName: string; ns: string); overload;
    procedure WriteStartElement(localName: string); overload;
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    procedure WriteAttributeString(localName: string; value: string); overload;
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    procedure WriteStartAttribute(localName: string); overload;
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure WriteNmToken(name: string);
    procedure WriteName(name: string);
    procedure WriteQualifiedName(localName: string; ns: string);
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteValue(value: string); overload;
    procedure WriteValue(value: Boolean); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTime); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDateTimeOffset); overload;
    procedure WriteValue(value: Double); overload;
    procedure WriteValue(value: Single); overload;
    procedure WriteValue(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteValue(value: Int32); overload;
    procedure WriteValue(value: Int64); overload;
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    procedure WriteElementString(localName: string; value: string); overload;
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    procedure Dispose;
    function WriteStartDocumentAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteStartDocumentAsync(standalone: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteEndDocumentAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteFullEndElementAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCDataAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCommentAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteProcessingInstructionAsync(name: string; text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteEntityRefAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharEntityAsync(ch: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteWhitespaceAsync(ws: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteStringAsync(text: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDNC.System.Private.CoreLib.DNTask;
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteRawAsync(data: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function WriteNmTokenAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteNameAsync(name: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteQualifiedNameAsync(localName: string; ns: string): DDNC.System.Private.CoreLib.DNTask;
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask;
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDNC.System.Private.CoreLib.DNTask;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WriteState: DNWriteState read get_WriteState;
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    property XmlLang: string read get_XmlLang;
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlQueryOutput = class(TDNGenericImport<DNXmlQueryOutputClass, DNXmlQueryOutput>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B50CA020-1F0A-5EF0-BBAF-B673BB5F1F02}']
  { constructors } 

    {class} function init: DNXmlWriterSettings;

  end;

  [DNTypeName('System.Xml.XmlWriterSettings')]
  DNXmlWriterSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3FA55EEA-B2DF-3B56-A03A-70A0D08A9E0E}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_Encoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_OmitXmlDeclaration: Boolean;
    procedure set_OmitXmlDeclaration(value: Boolean);
    function get_NewLineHandling: DNNewLineHandling;
    procedure set_NewLineHandling(value: DNNewLineHandling);
    function get_NewLineChars: string;
    procedure set_NewLineChars(value: string);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_IndentChars: string;
    procedure set_IndentChars(value: string);
    function get_NewLineOnAttributes: Boolean;
    procedure set_NewLineOnAttributes(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_NamespaceHandling: DNNamespaceHandling;
    procedure set_NamespaceHandling(value: DNNamespaceHandling);
    function get_WriteEndDocumentOnClose: Boolean;
    procedure set_WriteEndDocumentOnClose(value: Boolean);
    function get_OutputMethod: DNXmlOutputMethod;
    function get_DoNotEscapeUriAttributes: Boolean;
    procedure set_DoNotEscapeUriAttributes(value: Boolean);

  { methods } 

    procedure Reset;
    function Clone: DNXmlWriterSettings;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Async: Boolean read get_Async write set_Async;
    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding write set_Encoding;
    property OmitXmlDeclaration: Boolean read get_OmitXmlDeclaration write set_OmitXmlDeclaration;
    property NewLineHandling: DNNewLineHandling read get_NewLineHandling write set_NewLineHandling;
    property NewLineChars: string read get_NewLineChars write set_NewLineChars;
    property Indent: Boolean read get_Indent write set_Indent;
    property IndentChars: string read get_IndentChars write set_IndentChars;
    property NewLineOnAttributes: Boolean read get_NewLineOnAttributes write set_NewLineOnAttributes;
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    property NamespaceHandling: DNNamespaceHandling read get_NamespaceHandling write set_NamespaceHandling;
    property WriteEndDocumentOnClose: Boolean read get_WriteEndDocumentOnClose write set_WriteEndDocumentOnClose;
    property OutputMethod: DNXmlOutputMethod read get_OutputMethod;
    property DoNotEscapeUriAttributes: Boolean read get_DoNotEscapeUriAttributes write set_DoNotEscapeUriAttributes;
  end;

  TDNXmlWriterSettings = class(TDNGenericImport<DNXmlWriterSettingsClass, DNXmlWriterSettings>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathDocumentClass = interface(DNObjectClass)
  ['{A58EDB0F-2733-54B7-9D8E-48ED54380785}']
  { constructors } 

    {class} function init(reader: DNXmlReader): DNXPathDocument; overload;
    {class} function init(reader: DNXmlReader; space: DNXmlSpace): DNXPathDocument; overload;
    {class} function init(textReader: DDNC.System.Private.CoreLib.DNTextReader): DNXPathDocument; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNXPathDocument; overload;
    {class} function init(uri: string): DNXPathDocument; overload;
    {class} function init(uri: string; space: DNXmlSpace): DNXPathDocument; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathDocument')]
  DNXPathDocument = interface(DNIXPathNavigable)
  ['{FCFED7B7-81DE-374F-A266-9171B2DD5E89}']
  { methods } 

    function CreateNavigator: DNXPathNavigator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXPathDocument = class(TDNGenericImport<DNXPathDocumentClass, DNXPathDocument>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D685657F-4CFF-55E9-ADA2-35DBD639D664}']
  { static methods } 

    {class} function Compile(xpath: string): DNXPathExpression; overload;
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B49646AB-B028-3AAB-A733-78F9EDBF3B69}']
  { getters & setters } 

    function get_Expression: string;
    function get_ReturnType: DNXPathResultType;

  { methods } 

    procedure AddSort(expr: DDNC.System.Private.CoreLib.DNObject; comparer: DDNC.System.Private.CoreLib.DNIComparer); overload;
    procedure AddSort(expr: DDNC.System.Private.CoreLib.DNObject; order: DNXmlSortOrder; caseOrder: DNXmlCaseOrder; lang: string; dataType: DNXmlDataType); overload;
    function Clone: DNXPathExpression;
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Expression: string read get_Expression;
    property ReturnType: DNXPathResultType read get_ReturnType;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathItemClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EE0811DD-5254-5185-B6FF-854E85FA26FC}']
  end;

  [DNTypeName('System.Xml.XPath.XPathItem')]
  DNXPathItem = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{70A312B0-1602-3EB9-A3CF-318FDDA4CE6D}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_Value: string;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;

  { methods } 

    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property Value: string read get_Value;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
  end;

  TDNXPathItem = class(TDNGenericImport<DNXPathItemClass, DNXPathItem>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlAtomicValueClass = interface(DNXPathItemClass)
  ['{8BBCA9CD-2F14-582A-945F-82E6988A38B2}']
  end;

  [DNTypeName('System.Xml.Schema.XmlAtomicValue')]
  DNXmlAtomicValue = interface(DNXPathItem)
  ['{994251A5-7132-3DAE-828F-092124089C66}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_Value: string;

  { methods } 

    function Clone: DNXmlAtomicValue;
    function ValueAs(&type: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function ToString: string;
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property Value: string read get_Value;
  end;

  TDNXmlAtomicValue = class(TDNGenericImport<DNXmlAtomicValueClass, DNXmlAtomicValue>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNXPathItemClass)
  ['{CB1DEF38-4445-51AD-8B28-E1166ED3C8CA}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer;

  { static propertys } 

    {class} property NavigatorComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNXPathItem)
  ['{BCAD13E6-45DD-3AF3-8058-E65EBF599A99}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_ValueType: DDNC.System.Private.CoreLib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDNC.System.Private.CoreLib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    function ToString: string;
    procedure SetValue(value: string);
    procedure SetTypedValue(typedValue: DDNC.System.Private.CoreLib.DNObject);
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType; nsResolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateNavigator: DNXPathNavigator;
    function LookupNamespace(prefix: string): string;
    function LookupPrefix(namespaceURI: string): string;
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDNC.System.Private.CoreLib.DNIDictionary<string, string>;
    function Clone: DNXPathNavigator;
    function ReadSubtree: DNXmlReader;
    procedure WriteSubtree(writer: DNXmlWriter);
    function GetAttribute(localName: string; namespaceURI: string): string;
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    function MoveToFirstAttribute: Boolean;
    function MoveToNextAttribute: Boolean;
    function GetNamespace(name: string): string;
    function MoveToNamespace(name: string): Boolean;
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    function MoveToFirstNamespace: Boolean; overload;
    function MoveToNextNamespace: Boolean; overload;
    function MoveToNext: Boolean; overload;
    function MoveToPrevious: Boolean;
    function MoveToFirst: Boolean;
    function MoveToFirstChild: Boolean;
    function MoveToParent: Boolean;
    procedure MoveToRoot;
    function MoveTo(other: DNXPathNavigator): Boolean;
    function MoveToId(id: string): Boolean;
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    function Compile(xpath: string): DNXPathExpression;
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    function Select(xpath: string): DNXPathNodeIterator; overload;
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    function Evaluate(xpath: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression): DDNC.System.Private.CoreLib.DNObject; overload;
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDNC.System.Private.CoreLib.DNObject; overload;
    function Matches(expr: DNXPathExpression): Boolean; overload;
    function Matches(xpath: string): Boolean; overload;
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    function PrependChild: DNXmlWriter; overload;
    function AppendChild: DNXmlWriter; overload;
    function InsertAfter: DNXmlWriter; overload;
    function InsertBefore: DNXmlWriter; overload;
    function CreateAttributes: DNXmlWriter;
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    procedure ReplaceSelf(newNode: string); overload;
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    procedure AppendChild(newChild: string); overload;
    procedure AppendChild(newChild: DNXmlReader); overload;
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    procedure PrependChild(newChild: string); overload;
    procedure PrependChild(newChild: DNXmlReader); overload;
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    procedure InsertBefore(newSibling: string); overload;
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    procedure InsertAfter(newSibling: string); overload;
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    procedure DeleteSelf;
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    function ValueAs(returnType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNode: Boolean read get_IsNode;
    property XmlType: DNXmlSchemaType read get_XmlType;
    property TypedValue: DDNC.System.Private.CoreLib.DNObject read get_TypedValue;
    property ValueType: DDNC.System.Private.CoreLib.DNType read get_ValueType;
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    property ValueAsDateTime: DDNC.System.Private.CoreLib.DNDateTime read get_ValueAsDateTime;
    property ValueAsDouble: Double read get_ValueAsDouble;
    property ValueAsInt: Int32 read get_ValueAsInt;
    property ValueAsLong: Int64 read get_ValueAsLong;
    property NameTable: DNXmlNameTable read get_NameTable;
    property NodeType: DNXPathNodeType read get_NodeType;
    property LocalName: string read get_LocalName;
    property Name: string read get_Name;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix;
    property BaseURI: string read get_BaseURI;
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    property XmlLang: string read get_XmlLang;
    property UnderlyingObject: DDNC.System.Private.CoreLib.DNObject read get_UnderlyingObject;
    property HasAttributes: Boolean read get_HasAttributes;
    property HasChildren: Boolean read get_HasChildren;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property CanEdit: Boolean read get_CanEdit;
    property OuterXml: string read get_OuterXml write set_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DNObjectClass)
  ['{57B10C58-77C7-5D98-8E2A-9406DD1520FA}']
  end;

  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDNC.System.Private.CoreLib.DNICloneable)
  ['{6272BE1F-9591-3380-B464-21FF3117292C}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    function Clone: DNXPathNodeIterator;
    function MoveNext: Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNXPathNavigator read get_Current;
    property CurrentPosition: Int32 read get_CurrentPosition;
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlCollationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9DEDE482-D30D-5F44-A5BA-12EF0A6E750F}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlCollation')]
  DNXmlCollation = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{9BE72A0F-9310-348C-BC17-90213EC52231}']
  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  end;

  TDNXmlCollation = class(TDNGenericImport<DNXmlCollationClass, DNXmlCollation>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlILIndexClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3A5FD23A-F963-5A77-81D4-8CA5C8A1F1FB}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlILIndex')]
  DNXmlILIndex = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{989D9303-000D-33F0-B6B5-8F797026EFE7}']
  { methods } 

    procedure Add(key: string; navigator: DNXPathNavigator);
    function Lookup(key: string): DNXmlQueryNodeSequence;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlILIndex = class(TDNGenericImport<DNXmlILIndexClass, DNXmlILIndex>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlILStorageConverterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E5109CAD-6469-588E-956A-990FA9317353}']
  { static methods } 

    {class} function StringToAtomicValue(value: string; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DecimalToAtomicValue(value: DDNC.System.Private.CoreLib.DNDecimal; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function Int64ToAtomicValue(value: Int64; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function Int32ToAtomicValue(value: Int32; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function BooleanToAtomicValue(value: Boolean; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DoubleToAtomicValue(value: Double; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function SingleToAtomicValue(value: Single; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function DateTimeToAtomicValue(value: DDNC.System.Private.CoreLib.DNDateTime; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function XmlQualifiedNameToAtomicValue(value: DNXmlQualifiedName; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function TimeSpanToAtomicValue(value: DDNC.System.Private.CoreLib.DNTimeSpan; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function BytesToAtomicValue(value: TArray<Byte>; index: Int32; runtime: DNXmlQueryRuntime): DNXmlAtomicValue;
    {class} function NavigatorsToItems(listNavigators: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    {class} function ItemsToNavigators(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlILStorageConverter')]
  DNXmlILStorageConverter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{383AAC24-B062-3A60-9710-28660C75F802}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlILStorageConverter = class(TDNGenericImport<DNXmlILStorageConverterClass, DNXmlILStorageConverter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlNavigatorFilterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DC49AF0D-C76F-55A8-A263-4A87E07DF64C}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlNavigatorFilter')]
  DNXmlNavigatorFilter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{65E3825B-2E4E-3361-8506-253EFC83BAB9}']
  { methods } 

    function MoveToContent(navigator: DNXPathNavigator): Boolean;
    function MoveToNextContent(navigator: DNXPathNavigator): Boolean;
    function MoveToFollowingSibling(navigator: DNXPathNavigator): Boolean;
    function MoveToPreviousSibling(navigator: DNXPathNavigator): Boolean;
    function MoveToFollowing(navigator: DNXPathNavigator; navigatorEnd: DNXPathNavigator): Boolean;
    function IsFiltered(navigator: DNXPathNavigator): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXmlNavigatorFilter = class(TDNGenericImport<DNXmlNavigatorFilterClass, DNXmlNavigatorFilter>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryContextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4EA276CF-E554-5B9C-A93A-837BF5EB7B8A}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryContext')]
  DNXmlQueryContext = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B3E707A2-18AF-3C69-9222-DF2B9756B096}']
  { getters & setters } 

    function get_QueryNameTable: DNXmlNameTable;
    function get_DefaultNameTable: DNXmlNameTable;
    function get_DefaultDataSource: DNXPathNavigator;

  { methods } 

    function GetDataSource(uriRelative: string; uriBase: string): DNXPathNavigator;
    function GetParameter(localName: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function GetLateBoundObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function LateBoundFunctionExists(name: string; namespaceUri: string): Boolean;
    function InvokeXsltLateBoundFunction(name: string; namespaceUri: string; args: TArray<DDNC.System.Private.CoreLib.DNIList<DNXPathItem>>): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    procedure OnXsltMessageEncountered(message: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property QueryNameTable: DNXmlNameTable read get_QueryNameTable;
    property DefaultNameTable: DNXmlNameTable read get_DefaultNameTable;
    property DefaultDataSource: DNXPathNavigator read get_DefaultDataSource;
  end;

  TDNXmlQueryContext = class(TDNGenericImport<DNXmlQueryContextClass, DNXmlQueryContext>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryRuntimeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C0801EA7-FF76-5124-8003-BE916EF186D8}']
  { static methods } 

    {class} function OnCurrentNodeChanged(currentNode: DNXPathNavigator): Int32;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryRuntime')]
  DNXmlQueryRuntime = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CD4C2680-BF5A-382A-A5FC-154459939B56}']
  { getters & setters } 

    function get_ExternalContext: DNXmlQueryContext;
    function get_XsltFunctions: DNXsltLibrary;
    function get_NameTable: DNXmlNameTable;
    function get_Output: DNXmlQueryOutput;

  { methods } 

    function DebugGetGlobalNames: TArray<string>;
    function DebugGetGlobalValue(name: string): DDNC.System.Private.CoreLib.DNIList;
    procedure DebugSetGlobalValue(name: string; value: DDNC.System.Private.CoreLib.DNObject);
    function DebugGetXsltValue(seq: DDNC.System.Private.CoreLib.DNIList): DDNC.System.Private.CoreLib.DNObject;
    function GetEarlyBoundObject(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    function EarlyBoundFunctionExists(name: string; namespaceUri: string): Boolean;
    function IsGlobalComputed(index: Int32): Boolean;
    function GetGlobalValue(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    procedure SetGlobalValue(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);
    function GetAtomizedName(index: Int32): string;
    function GetNameFilter(index: Int32): DNXmlNavigatorFilter;
    function GetTypeFilter(nodeType: DNXPathNodeType): DNXmlNavigatorFilter;
    function ParseTagName(tagName: string; indexPrefixMappings: Int32): DNXmlQualifiedName; overload;
    function ParseTagName(tagName: string; ns: string): DNXmlQualifiedName; overload;
    function IsQNameEqual(n1: DNXPathNavigator; n2: DNXPathNavigator): Boolean; overload;
    function IsQNameEqual(navigator: DNXPathNavigator; indexLocalName: Int32; indexNamespaceUri: Int32): Boolean; overload;
    function ChangeTypeXsltArgument(indexType: Int32; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ChangeTypeXsltResult(indexType: Int32; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    function MatchesXmlType(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; indexType: Int32): Boolean; overload;
    function MatchesXmlType(item: DNXPathItem; indexType: Int32): Boolean; overload;
    function MatchesXmlType(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; code: DNXmlTypeCode): Boolean; overload;
    function MatchesXmlType(item: DNXPathItem; code: DNXmlTypeCode): Boolean; overload;
    function GetCollation(index: Int32): DNXmlCollation;
    function CreateCollation(collation: string): DNXmlCollation;
    function ComparePosition(navigatorThis: DNXPathNavigator; navigatorThat: DNXPathNavigator): Int32;
    function DocOrderDistinct(seq: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;
    function GenerateId(navigator: DNXPathNavigator): string;
    function FindIndex(context: DNXPathNavigator; indexId: Int32; out index: DNXmlILIndex): Boolean;
    procedure AddNewIndex(context: DNXPathNavigator; indexId: Int32; index: DNXmlILIndex);
    procedure StartSequenceConstruction(out output: DNXmlQueryOutput);
    function EndSequenceConstruction(out output: DNXmlQueryOutput): DDNC.System.Private.CoreLib.DNIList<DNXPathItem>;
    procedure StartRtfConstruction(baseUri: string; out output: DNXmlQueryOutput);
    function EndRtfConstruction(out output: DNXmlQueryOutput): DNXPathNavigator;
    function TextRtfConstruction(text: string; baseUri: string): DNXPathNavigator;
    procedure SendMessage(message: string);
    procedure ThrowException(text: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ExternalContext: DNXmlQueryContext read get_ExternalContext;
    property XsltFunctions: DNXsltLibrary read get_XsltFunctions;
    property NameTable: DNXmlNameTable read get_NameTable;
    property Output: DNXmlQueryOutput read get_Output;
  end;

  TDNXmlQueryRuntime = class(TDNGenericImport<DNXmlQueryRuntimeClass, DNXmlQueryRuntime>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryItemSequenceClass = interface(DNObjectClass)
  ['{289D250C-CFB7-5F02-921C-C5451DDD9200}']
  { constructors } 

    {class} function init: DNXmlQueryItemSequence; overload;
    {class} function init(capacity: Int32): DNXmlQueryItemSequence; overload;
    {class} function init(item: DNXPathItem): DNXmlQueryItemSequence; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQueryItemSequence;

  { static fields } 

    {class} property Empty: DNXmlQueryItemSequence read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQueryItemSequence): DNXmlQueryItemSequence; overload;
    {class} function CreateOrReuse(seq: DNXmlQueryItemSequence; item: DNXPathItem): DNXmlQueryItemSequence; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryItemSequence')]
  DNXmlQueryItemSequence = interface(DNObject)
  ['{73BCAF6A-C092-3EBC-AAC7-506D5B486F1B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure AddClone(item: DNXPathItem);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNXPathItem>;
    function &Contains(value: DNXPathItem): Boolean;
    procedure CopyTo(&array: TArray<DNXPathItem>; index: Int32);
    function IndexOf(value: DNXPathItem): Int32;
    procedure Clear;
    procedure Add(value: DNXPathItem);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlQueryItemSequence = class(TDNGenericImport<DNXmlQueryItemSequenceClass, DNXmlQueryItemSequence>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQueryNodeSequenceClass = interface(DNObjectClass)
  ['{8707A007-3C06-5252-AB83-B5901FB65AB6}']
  { constructors } 

    {class} function init: DNXmlQueryNodeSequence; overload;
    {class} function init(capacity: Int32): DNXmlQueryNodeSequence; overload;
    {class} function init(list: DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>): DNXmlQueryNodeSequence; overload;
    {class} function init(&array: TArray<DNXPathNavigator>; size: Int32): DNXmlQueryNodeSequence; overload;
    {class} function init(navigator: DNXPathNavigator): DNXmlQueryNodeSequence; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQueryNodeSequence;

  { static fields } 

    {class} property Empty: DNXmlQueryNodeSequence read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQueryNodeSequence): DNXmlQueryNodeSequence; overload;
    {class} function CreateOrReuse(seq: DNXmlQueryNodeSequence; navigator: DNXPathNavigator): DNXmlQueryNodeSequence; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQueryNodeSequence')]
  DNXmlQueryNodeSequence = interface(DNObject)
  ['{EDA3EAB4-D150-3690-9707-42F00DF2BE74}']
  { getters & setters } 

    function get_IsDocOrderDistinct: Boolean;
    procedure set_IsDocOrderDistinct(value: Boolean);
    function get_Count: Int32;

  { methods } 

    function DocOrderDistinct(comparer: DDNC.System.Private.CoreLib.DNIComparer<DNXPathNavigator>): DNXmlQueryNodeSequence;
    procedure AddClone(navigator: DNXPathNavigator);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNXPathNavigator>;
    function &Contains(value: DNXPathNavigator): Boolean;
    procedure CopyTo(&array: TArray<DNXPathNavigator>; index: Int32);
    function IndexOf(value: DNXPathNavigator): Int32;
    procedure Clear;
    procedure Add(value: DNXPathNavigator);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsDocOrderDistinct: Boolean read get_IsDocOrderDistinct write set_IsDocOrderDistinct;
    property Count: Int32 read get_Count;
  end;

  TDNXmlQueryNodeSequence = class(TDNGenericImport<DNXmlQueryNodeSequenceClass, DNXmlQueryNodeSequence>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXmlQuerySequenceClass<T> = interface(DNObjectClass)
  ['{D8F35A62-C5F1-5D70-887F-01AFD2001542}']
  { constructors } 

    {class} function init: DNXmlQuerySequence<T>; overload;
    {class} function init(capacity: Int32): DNXmlQuerySequence<T>; overload;
    {class} function init(&array: TArray<T>; size: Int32): DNXmlQuerySequence<T>; overload;
    {class} function init(value: T): DNXmlQuerySequence<T>; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQuerySequence<T>;

  { static fields } 

    {class} property Empty: DNXmlQuerySequence<T> read __fakeFieldGet_Empty;

  { static methods } 

    {class} function CreateOrReuse(seq: DNXmlQuerySequence<T>): DNXmlQuerySequence<T>; overload;
    {class} function CreateOrReuse(seq: DNXmlQuerySequence<T>; item: T): DNXmlQuerySequence<T>; overload;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XmlQuerySequence`1')]
  DNXmlQuerySequence<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{9A653CE7-E774-3F3A-9E27-35867805F665}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(value: T): Int32;
    procedure Clear;
    procedure Add(value: T);
    procedure SortByKeys(keys: DDNC.System.Private.CoreLib.DNArray);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNXmlQuerySequence<T> = class(TDNGenericImport<DNXmlQuerySequenceClass<T>, DNXmlQuerySequence<T>>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltConvertClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{70BC1841-BFB2-52F6-AE52-F10362FCEFCD}']
  { static methods } 

    {class} function ToBoolean(item: DNXPathItem): Boolean; overload;
    {class} function ToBoolean(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean; overload;
    {class} function ToDouble(value: string): Double; overload;
    {class} function ToDouble(item: DNXPathItem): Double; overload;
    {class} function ToDouble(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Double; overload;
    {class} function ToNode(item: DNXPathItem): DNXPathNavigator; overload;
    {class} function ToNode(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DNXPathNavigator; overload;
    {class} function ToNodeSet(item: DNXPathItem): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>; overload;
    {class} function ToNodeSet(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(item: DNXPathItem): string; overload;
    {class} function ToString(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): string; overload;
    {class} function ToString(value: DDNC.System.Private.CoreLib.DNDateTime): string; overload;
    {class} function ToDouble(value: DDNC.System.Private.CoreLib.DNDecimal): Double; overload;
    {class} function ToDouble(value: Int32): Double; overload;
    {class} function ToDouble(value: Int64): Double; overload;
    {class} function ToDecimal(value: Double): DDNC.System.Private.CoreLib.DNDecimal;
    {class} function ToInt(value: Double): Int32;
    {class} function ToLong(value: Double): Int64;
    {class} function ToDateTime(value: string): DDNC.System.Private.CoreLib.DNDateTime;
    {class} function EnsureNodeSet(listItems: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): DDNC.System.Private.CoreLib.DNIList<DNXPathNavigator>;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltConvert')]
  DNXsltConvert = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2B0A7076-A6A4-3B1D-9E00-D47256F8B1E9}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltConvert = class(TDNGenericImport<DNXsltConvertClass, DNXsltConvert>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltFunctionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0A2ADBAD-3509-5885-8CAF-3CBAE22C6796}']
  { static methods } 

    {class} function StartsWith(s1: string; s2: string): Boolean;
    {class} function &Contains(s1: string; s2: string): Boolean;
    {class} function SubstringBefore(s1: string; s2: string): string;
    {class} function SubstringAfter(s1: string; s2: string): string;
    {class} function Substring(value: string; startIndex: Double): string; overload;
    {class} function Substring(value: string; startIndex: Double; length: Double): string; overload;
    {class} function NormalizeSpace(value: string): string;
    {class} function Translate(arg: string; mapString: string; transString: string): string;
    {class} function Lang(value: string; context: DNXPathNavigator): Boolean;
    {class} function Round(value: Double): Double;
    {class} function SystemProperty(name: DNXmlQualifiedName): DNXPathItem;
    {class} function BaseUri(navigator: DNXPathNavigator): string;
    {class} function OuterXml(navigator: DNXPathNavigator): string;
    {class} function EXslObjectType(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): string;
    {class} function MSNumber(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Double;
    {class} function MSFormatDateTime(dateTime: string; format: string; lang: string; isDate: Boolean): string;
    {class} function MSStringCompare(s1: string; s2: string; lang: string; options: string): Double;
    {class} function MSUtc(dateTime: string): string;
    {class} function MSLocalName(name: string): string;
    {class} function MSNamespaceUri(name: string; currentNode: DNXPathNavigator): string;

  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltFunctions')]
  DNXsltFunctions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{255B88E9-17C5-34EB-9A69-6343ADC33A82}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltFunctions = class(TDNGenericImport<DNXsltFunctionsClass, DNXsltFunctions>) end;

  //-------------namespace: System.Xml.Xsl.Runtime----------------
  DNXsltLibraryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{476007F3-19E7-5969-B436-57370047B015}']
  end;

  [DNTypeName('System.Xml.Xsl.Runtime.XsltLibrary')]
  DNXsltLibrary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1B8553AE-8BFD-34A9-A17E-C539D4D266F4}']
  { methods } 

    function FormatMessage(res: string; args: DDNC.System.Private.CoreLib.DNIList<string>): string;
    function CheckScriptNamespace(nsUri: string): Int32;
    function ElementAvailable(name: DNXmlQualifiedName): Boolean;
    function FunctionAvailable(name: DNXmlQualifiedName): Boolean;
    function RegisterDecimalFormat(name: DNXmlQualifiedName; infinitySymbol: string; nanSymbol: string; characters: string): Int32;
    function RegisterDecimalFormatter(formatPicture: string; infinitySymbol: string; nanSymbol: string; characters: string): Double;
    function FormatNumberStatic(value: Double; decimalFormatterIndex: Double): string;
    function FormatNumberDynamic(value: Double; formatPicture: string; decimalFormatName: DNXmlQualifiedName; errorMessageName: string): string;
    function NumberFormat(value: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; formatString: string; lang: Double; letterValue: string; groupingSeparator: string; groupingSize: Double): string;
    function LangToLcid(lang: string; forwardCompatibility: Boolean): Int32;
    function EqualityOperator(opCode: Double; left: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; right: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean;
    function RelationalOperator(opCode: Double; left: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>; right: DDNC.System.Private.CoreLib.DNIList<DNXPathItem>): Boolean;
    function IsSameNodeSort(nav1: DNXPathNavigator; nav2: DNXPathNavigator): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltLibrary = class(TDNGenericImport<DNXsltLibraryClass, DNXsltLibrary>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslCompiledTransformClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{36AC72BA-9B4F-51AC-B13C-FE1963D4BD00}']
  { constructors } 

    {class} function init: DNXslCompiledTransform; overload;
    {class} function init(enableDebug: Boolean): DNXslCompiledTransform; overload;

  end;

  [DNTypeName('System.Xml.Xsl.XslCompiledTransform')]
  DNXslCompiledTransform = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C2BB144A-5750-3FA3-93B3-361ABF941D9F}']
  { getters & setters } 

    function get_OutputSettings: DNXmlWriterSettings;

  { methods } 

    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheet: DNIXPathNavigable; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(stylesheetUri: string); overload;
    procedure Load(stylesheetUri: string; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    procedure Load(compiledStylesheet: DDNC.System.Private.CoreLib.DNType); overload;
    procedure Load(executeMethod: DDNC.System.Private.CoreLib.DNMethodInfo; queryData: TArray<Byte>; earlyBoundTypes: TArray<DDNC.System.Private.CoreLib.DNType>); overload;
    procedure Transform(input: DNIXPathNavigable; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNXmlReader; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(inputUri: string; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(inputUri: string; resultsFile: string); overload;
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property OutputSettings: DNXmlWriterSettings read get_OutputSettings;
  end;

  TDNXslCompiledTransform = class(TDNGenericImport<DNXslCompiledTransformClass, DNXslCompiledTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltArgumentListClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5B81379D-66B4-58C1-9B12-945ADC08B617}']
  { constructors } 

    {class} function init: DNXsltArgumentList;

  end;

  [DNTypeName('System.Xml.Xsl.XsltArgumentList')]
  DNXsltArgumentList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6FBA6FE0-B588-3DF5-AE60-ECB3A8C9782F}']
  { events } 

    procedure add_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);
    procedure remove_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);

  { methods } 

    function GetParam(name: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function GetExtensionObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    procedure AddParam(name: string; namespaceUri: string; parameter: DDNC.System.Private.CoreLib.DNObject);
    procedure AddExtensionObject(namespaceUri: string; extension: DDNC.System.Private.CoreLib.DNObject);
    function RemoveParam(name: string; namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    function RemoveExtensionObject(namespaceUri: string): DDNC.System.Private.CoreLib.DNObject;
    procedure Clear;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXsltArgumentList = class(TDNGenericImport<DNXsltArgumentListClass, DNXsltArgumentList>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslTransformClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CECA6451-24B3-5CDE-97CE-A471DD6858A8}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    {class} function init: DNXslTransform;

  { static propertys } 

    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  [DNTypeName('System.Xml.Xsl.XslTransform')]
  DNXslTransform = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3BCAC423-D83A-312F-8020-CA08B24D1507}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { methods } 

    procedure Load(stylesheet: DNXmlReader); overload;
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver); overload;
    procedure Load(stylesheet: DNXPathNavigator); overload;
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver); overload;
    procedure Load(url: string); overload;
    procedure Load(url: string; resolver: DNXmlResolver); overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList): DNXmlReader; overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    procedure Transform(inputfile: string; outputfile: string; resolver: DNXmlResolver); overload;
    procedure Transform(inputfile: string; outputfile: string); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  TDNXslTransform = class(TDNGenericImport<DNXslTransformClass, DNXslTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltSettingsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AA5C51CC-7977-511D-9863-FE39CCC4C30F}']
  { static getter & setter } 

    {class} function get_Default: DNXsltSettings;
    {class} function get_TrustedXslt: DNXsltSettings;

  { constructors } 

    {class} function init: DNXsltSettings; overload;
    {class} function init(enableDocumentFunction: Boolean; enableScript: Boolean): DNXsltSettings; overload;

  { static propertys } 

    {class} property &Default: DNXsltSettings read get_Default;
    {class} property TrustedXslt: DNXsltSettings read get_TrustedXslt;
  end;

  [DNTypeName('System.Xml.Xsl.XsltSettings')]
  DNXsltSettings = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B1FDA040-42F8-3E18-AF63-9717B1561988}']
  { getters & setters } 

    function get_EnableDocumentFunction: Boolean;
    procedure set_EnableDocumentFunction(value: Boolean);
    function get_EnableScript: Boolean;
    procedure set_EnableScript(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EnableDocumentFunction: Boolean read get_EnableDocumentFunction write set_EnableDocumentFunction;
    property EnableScript: Boolean read get_EnableScript write set_EnableScript;
  end;

  TDNXsltSettings = class(TDNGenericImport<DNXsltSettingsClass, DNXsltSettings>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Private.Xml, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51');

finalization

end.
