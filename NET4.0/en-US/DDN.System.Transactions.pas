//----------------------------------------------------------------------------
//  System.Transactions.dll: System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Transactions
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Transactions;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Transactions----------------
  ///<summary>Controls what kind of dependent transaction to create.</summary>
  [DNTypeName('System.Transactions.DependentCloneOption')]
  DNDependentCloneOption = type Integer;
  DNDependentCloneOptionHelper = record helper for DNDependentCloneOption
  public const
    ///<summary>The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or <see cref="M:System.Transactions.DependentTransaction.Complete" />
    ///  is called. In this case, additional work can be done on the transaction and new enlistments can be created.</summary>
    BlockCommitUntilComplete = 0;
    ///<summary>The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before <see cref="M:System.Transactions.DependentTransaction.Complete" />
    ///  is called.</summary>
    RollbackIfNotComplete = 1;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>Determines whether the object should be enlisted during the prepare phase.</summary>
  [DNTypeName('System.Transactions.EnlistmentOptions')]
  DNEnlistmentOptions = type Integer;
  DNEnlistmentOptionsHelper = record helper for DNEnlistmentOptions
  public const
    ///<summary>The object does not require enlistment during the initial phase of the commitment process.</summary>
    None = 0;
    ///<summary>The object must enlist during the initial phase of the commitment process.</summary>
    EnlistDuringPrepareRequired = 1;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>Specifies how distributed transactions interact with COM+ transactions.</summary>
  [DNTypeName('System.Transactions.EnterpriseServicesInteropOption')]
  DNEnterpriseServicesInteropOption = type Integer;
  DNEnterpriseServicesInteropOptionHelper = record helper for DNEnterpriseServicesInteropOption
  public const
    ///<summary>There is no synchronization between <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />
    ///  and <see cref="P:System.Transactions.Transaction.Current" />
    ///  .  </summary>
    None = 0;
    ///<summary>Search for an existing COM+ context and synchronize with it if one exists.</summary>
    Automatic = 1;
    ///<summary>The <see cref="N:System.EnterpriseServices" />
    ///  context (which can be retrieved by calling the static method <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />
    ///  of the <see cref="T:System.EnterpriseServices.ContextUtil" />
    ///  class) and the <see cref="N:System.Transactions" />
    ///  ambient transaction (which can be retrieved by calling the static method <see cref="P:System.Transactions.Transaction.Current" />
    ///  of the <see cref="T:System.Transactions.Transaction" />
    ///  class) are always synchronized. This introduces a performance penalty because new <see cref="N:System.EnterpriseServices" />
    ///  contexts may need to be created.</summary>
    Full = 2;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>Specifies the isolation level of a transaction.</summary>
  [DNTypeName('System.Transactions.IsolationLevel')]
  DNIsolationLevel = type Integer;
  DNIsolationLevelHelper = record helper for DNIsolationLevel
  public const
    ///<summary>Volatile data can be read but not modified, and no new data can be added during the transaction.</summary>
    Serializable = 0;
    ///<summary>Volatile data can be read but not modified during the transaction. New data can be added during the transaction.</summary>
    RepeatableRead = 1;
    ///<summary>Volatile data cannot be read during the transaction, but can be modified.</summary>
    ReadCommitted = 2;
    ///<summary>Volatile data can be read and modified during the transaction.</summary>
    ReadUncommitted = 3;
    ///<summary>Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.</summary>
    Snapshot = 4;
    ///<summary>The pending changes from more highly isolated transactions cannot be overwritten.</summary>
    Chaos = 5;
    ///<summary>A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.</summary>
    Unspecified = 6;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Specifies whether transaction flow across thread continuations is enabled for <see cref="T:System.Transactions.TransactionScope" />
  ///  .</summary>
  [DNTypeName('System.Transactions.TransactionScopeAsyncFlowOption')]
  DNTransactionScopeAsyncFlowOption = type Integer;
  DNTransactionScopeAsyncFlowOptionHelper = record helper for DNTransactionScopeAsyncFlowOption
  public const
    ///<summary>Specifies that transaction flow across thread continuations is suppressed.</summary>
    Suppress = 0;
    ///<summary>Specifies that transaction flow across thread continuations is enabled.</summary>
    Enabled = 1;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>Provides additional options for creating a transaction scope.</summary>
  [DNTypeName('System.Transactions.TransactionScopeOption')]
  DNTransactionScopeOption = type Integer;
  DNTransactionScopeOptionHelper = record helper for DNTransactionScopeOption
  public const
    ///<summary>A transaction is required by the scope. It uses an ambient transaction if one already exists. Otherwise, it creates a new transaction before entering the scope. This is the default value.</summary>
    Required = 0;
    ///<summary>A new transaction is always created for the scope.</summary>
    RequiresNew = 1;
    ///<summary>The ambient transaction context is suppressed when creating the scope. All operations within the scope are done without an ambient transaction context.</summary>
    Suppress = 2;
  end;


  //-------------namespace: System.Transactions----------------
  ///<summary>Describes the current status of a distributed transaction.</summary>
  [DNTypeName('System.Transactions.TransactionStatus')]
  DNTransactionStatus = type Integer;
  DNTransactionStatusHelper = record helper for DNTransactionStatus
  public const
    ///<summary>The status of the transaction is unknown, because some participants must still be polled.</summary>
    Active = 0;
    ///<summary>The transaction has been committed.</summary>
    Committed = 1;
    ///<summary>The transaction has been rolled back.</summary>
    Aborted = 2;
    ///<summary>The status of the transaction is unknown.</summary>
    InDoubt = 3;
  end;




type


{ declares }

  DNIDtcTransaction = interface; // type: System.Transactions.IDtcTransaction, namespace: System.Transactions
  DNIEnlistmentNotification = interface; // type: System.Transactions.IEnlistmentNotification, namespace: System.Transactions
  DNISinglePhaseNotification = interface; // type: System.Transactions.ISinglePhaseNotification, namespace: System.Transactions
  DNITransactionPromoter = interface; // type: System.Transactions.ITransactionPromoter, namespace: System.Transactions
  DNIPromotableSinglePhaseNotification = interface; // type: System.Transactions.IPromotableSinglePhaseNotification, namespace: System.Transactions
  DNISimpleTransactionSuperior = interface; // type: System.Transactions.ISimpleTransactionSuperior, namespace: System.Transactions
  DNDistributedTransactionPermissionAttribute = interface; // type: System.Transactions.DistributedTransactionPermissionAttribute, namespace: System.Transactions
  DNDefaultSettingsSection = interface; // type: System.Transactions.Configuration.DefaultSettingsSection, namespace: System.Transactions.Configuration
  DNMachineSettingsSection = interface; // type: System.Transactions.Configuration.MachineSettingsSection, namespace: System.Transactions.Configuration
  DNTransactionsSectionGroup = interface; // type: System.Transactions.Configuration.TransactionsSectionGroup, namespace: System.Transactions.Configuration
  DNTransactionEventArgs = interface; // type: System.Transactions.TransactionEventArgs, namespace: System.Transactions
  DNTransactionException = interface; // type: System.Transactions.TransactionException, namespace: System.Transactions
  DNTransactionAbortedException = interface; // type: System.Transactions.TransactionAbortedException, namespace: System.Transactions
  DNTransactionInDoubtException = interface; // type: System.Transactions.TransactionInDoubtException, namespace: System.Transactions
  DNTransactionManagerCommunicationException = interface; // type: System.Transactions.TransactionManagerCommunicationException, namespace: System.Transactions
  DNTransactionPromotionException = interface; // type: System.Transactions.TransactionPromotionException, namespace: System.Transactions
  DNDistributedTransactionPermission = interface; // type: System.Transactions.DistributedTransactionPermission, namespace: System.Transactions
  DNEnlistment = interface; // type: System.Transactions.Enlistment, namespace: System.Transactions
  DNPreparingEnlistment = interface; // type: System.Transactions.PreparingEnlistment, namespace: System.Transactions
  DNSinglePhaseEnlistment = interface; // type: System.Transactions.SinglePhaseEnlistment, namespace: System.Transactions
  DNTransaction = interface; // type: System.Transactions.Transaction, namespace: System.Transactions
  DNCommittableTransaction = interface; // type: System.Transactions.CommittableTransaction, namespace: System.Transactions
  DNDependentTransaction = interface; // type: System.Transactions.DependentTransaction, namespace: System.Transactions
  DNSubordinateTransaction = interface; // type: System.Transactions.SubordinateTransaction, namespace: System.Transactions
  DNTransactionInformation = interface; // type: System.Transactions.TransactionInformation, namespace: System.Transactions
  DNTransactionInterop = interface; // type: System.Transactions.TransactionInterop, namespace: System.Transactions
  DNTransactionManager = interface; // type: System.Transactions.TransactionManager, namespace: System.Transactions
  DNTransactionScope = interface; // type: System.Transactions.TransactionScope, namespace: System.Transactions
  DNTransactionOptions = interface; // type: System.Transactions.TransactionOptions, namespace: System.Transactions

{ delegates }

  ///<summary>Provides a mechanism for the hosting environment to supply its own default notion of <see cref="P:System.Transactions.Transaction.Current" />
  ///  .</summary>
  ///<returns>A <see cref="T:System.Transactions.Transaction" />
  ///  object.</returns>
  [DNTypeName('System.Transactions.HostCurrentTransactionCallback')]
  DNHostCurrentTransactionCallback = function: DNTransaction of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Transactions.Transaction.TransactionCompleted" />
  ///  event of a <see cref="T:System.Transactions.Transaction" />
  ///  class.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The <see cref="T:System.Transactions.TransactionEventArgs" />
  ///  that contains the event data.</param>
  [DNTypeName('System.Transactions.TransactionCompletedEventHandler')]
  DNTransactionCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTransactionEventArgs) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />
  ///  event of a <see cref="T:System.Transactions.TransactionManager" />
  ///  class.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The <see cref="T:System.Transactions.TransactionEventArgs" />
  ///  that contains the transaction from which transaction information can be retrieved.</param>
  [DNTypeName('System.Transactions.TransactionStartedEventHandler')]
  DNTransactionStartedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTransactionEventArgs) of object;




{ objects }

  //-------------namespace: System.Transactions----------------
  ///<summary>Describes a DTC transaction.</summary>
  [DNTypeName('System.Transactions.IDtcTransaction')]
  DNIDtcTransaction = interface(DDN.mscorlib.DNObject)
  ['{0FB15084-AF41-11CE-BD2B-204C4F4F5020}']
  { methods } 

    ///<summary>Commits a transaction.</summary>
    ///  <param name="retaining">This value must be <see langword="false" />
    ///  .</param>
    ///  <param name="commitType">A value taken from the OLE DB enumeration <see langword="XACTTC" />
    ///  .</param>
    ///  <param name="reserved">This value must be zero.</param>
    procedure Commit(retaining: Int32; commitType: Int32; reserved: Int32);
    ///<summary>Aborts a transaction.</summary>
    ///  <param name="reason">An optional <see cref="T:System.EnterpriseServices.BOID" />
    ///  that indicates why the transaction is being aborted. This parameter can be <see langword="null" />
    ///  , indicating that no reason for the abort is provided.</param>
    ///  <param name="retaining">This value must be <see langword="false" />
    ///  .</param>
    ///  <param name="async">When <paramref name="async" />
    ///  is <see langword="true" />
    ///  , an asynchronous abort is performed and the caller must use <see langword="ITransactionOutcomeEvents" />
    ///  to learn about the outcome of the transaction. </param>
    procedure &Abort(reason: IntPtr; retaining: Int32; async: Int32);
    ///<summary>Retrieves information about a transaction.</summary>
    ///  <param name="transactionInformation">Pointer to the caller-allocated <see cref="T:System.EnterpriseServices.XACTTRANSINFO" />
    ///  structure that will receive information about the transaction. This value must not be <see langword="null" />
    ///  . </param>
    procedure GetTransactionInfo(transactionInformation: IntPtr);

  end;

  //-------------namespace: System.Transactions----------------
  ///<summary>Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</summary>
  [DNTypeName('System.Transactions.IEnlistmentNotification')]
  DNIEnlistmentNotification = interface(DDN.mscorlib.DNObject)
  ['{68723FCB-A005-3CD5-AF43-E27703E304F2}']
  { methods } 

    ///<summary>Notifies an enlisted object that a transaction is being prepared for commitment.</summary>
    ///  <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment" />
    ///  object used to send a response to the transaction manager.</param>
    procedure Prepare(preparingEnlistment: DNPreparingEnlistment);
    ///<summary>Notifies an enlisted object that a transaction is being committed.</summary>
    ///  <param name="enlistment">An <see cref="T:System.Transactions.Enlistment" />
    ///  object used to send a response to the transaction manager.</param>
    procedure Commit(enlistment: DNEnlistment);
    ///<summary>Notifies an enlisted object that a transaction is being rolled back (aborted).</summary>
    ///  <param name="enlistment">A <see cref="T:System.Transactions.Enlistment" />
    ///  object used to send a response to the transaction manager.</param>
    procedure Rollback(enlistment: DNEnlistment);
    ///<summary>Notifies an enlisted object that the status of a transaction is in doubt.</summary>
    ///  <param name="enlistment">An <see cref="T:System.Transactions.Enlistment" />
    ///  object used to send a response to the transaction manager.</param>
    procedure InDoubt(enlistment: DNEnlistment);

  end;

  //-------------namespace: System.Transactions----------------
  ///<summary>Describes a resource object that supports single phase commit optimization to participate in a transaction.</summary>
  [DNTypeName('System.Transactions.ISinglePhaseNotification')]
  DNISinglePhaseNotification = interface(DNIEnlistmentNotification)
  ['{2354C464-7457-3AE8-AF68-751AF5A1FFC0}']
  { methods } 

    ///<summary>Represents the resource manager's implementation of the callback for the single phase commit optimization.  </summary>
    ///  <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  used to send a response to the transaction manager.</param>
    procedure SinglePhaseCommit(singlePhaseEnlistment: DNSinglePhaseEnlistment);

  end;

  //-------------namespace: System.Transactions----------------
  ///<summary>Describes a delegated transaction for an existing transaction that can be escalated to be managed by the MSDTC when needed.</summary>
  [DNTypeName('System.Transactions.ITransactionPromoter')]
  DNITransactionPromoter = interface(DDN.mscorlib.DNObject)
  ['{2EE24BD6-197C-3BD2-ABB2-03F7113E3B60}']
  { methods } 

    ///<summary>Notifies an enlisted object that an escalation of the delegated transaction has been requested.</summary>
    ///<returns>A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />
    ///  .</returns>
    function Promote: TArray<Byte>;

  end;

  //-------------namespace: System.Transactions----------------
  ///<summary>Describes an object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</summary>
  [DNTypeName('System.Transactions.IPromotableSinglePhaseNotification')]
  DNIPromotableSinglePhaseNotification = interface(DNITransactionPromoter)
  ['{5C25E3AA-572A-331E-88C5-CD69DCEF4C71}']
  { methods } 

    ///<summary>Notifies a transaction participant that enlistment has completed successfully.</summary>
    ///<exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
    procedure Initialize;
    ///<summary>Notifies an enlisted object that the transaction is being committed.</summary>
    ///  <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface used to send a response to the transaction manager.</param>
    procedure SinglePhaseCommit(singlePhaseEnlistment: DNSinglePhaseEnlistment);
    ///<summary>Notifies an enlisted object that the transaction is being rolled back.</summary>
    ///  <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  object used to send a response to the transaction manager.</param>
    procedure Rollback(singlePhaseEnlistment: DNSinglePhaseEnlistment);

  end;

  //-------------namespace: System.Transactions----------------
  ///<summary>Represents a transaction that is not a root transaction, but can be escalated to be managed by the MSDTC.</summary>
  [DNTypeName('System.Transactions.ISimpleTransactionSuperior')]
  DNISimpleTransactionSuperior = interface(DNITransactionPromoter)
  ['{8C30F42C-7396-303C-89E2-3EB683EF53BD}']
  { methods } 

    ///<summary>Notifies an enlisted object that the transaction is being rolled back.</summary>
    procedure Rollback;

  end;

  //-------------namespace: System.Transactions----------------
  DNDistributedTransactionPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{00E2FE68-2AF0-5A9B-8E84-804525B63B24}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.DistributedTransactionPermissionAttribute" />
    ///  class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  .</summary>
    ///  <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  values. </param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNDistributedTransactionPermissionAttribute;

  end;

  ///<summary>Allows security actions for <see cref="T:System.Transactions.DistributedTransactionPermission" />
  ///  to be applied to code using declarative security. This class cannot be inherited. </summary>
  [DNTypeName('System.Transactions.DistributedTransactionPermissionAttribute')]
  DNDistributedTransactionPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{D2A55554-97B4-34B9-90A9-CEB2B8A01CAF}']
  { getters & setters } 

    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  in an assembly's metadata.</summary>
    ///<returns>A serializable permission object.</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether full (unrestricted) permission to the resource protected by the attribute is declared.</summary>
    ///<returns><see langword="true" />
    ///  if full permission to the protected resource is declared; otherwise, <see langword="false" />
    ///  .</returns>
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDistributedTransactionPermissionAttribute = class(TDNGenericImport<DNDistributedTransactionPermissionAttributeClass, DNDistributedTransactionPermissionAttribute>) end;

  //-------------namespace: System.Transactions.Configuration----------------
  DNDefaultSettingsSectionClass = interface(DNObjectClass)
  ['{CFEC6732-E21B-556D-B7FE-FEE0A0C05207}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.Configuration.DefaultSettingsSection" />
    ///  class. </summary>
    {class} function init: DNDefaultSettingsSection;

  end;

  ///<summary>Represents an XML section in a configuration file that contains default values of a transaction. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.Configuration.DefaultSettingsSection')]
  DNDefaultSettingsSection = interface(DNObject)
  ['{E24E4EFA-EEB2-399F-B5FC-B348F421E78C}']
  { getters & setters } 

    function get_DistributedTransactionManagerName: string;
    procedure set_DistributedTransactionManagerName(value: string);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the transaction manager.</summary>
    ///<returns>The name of the transaction manager. The default value is an empty string.</returns>
    ///<exception cref="T:System.NotSupportedException">An attempt to set this property to fully qualified domain names or IP addresses.</exception><exception cref="T:System.Transactions.TransactionAbortedException">An attempt to set this property to localhost.</exception>
    property DistributedTransactionManagerName: string read get_DistributedTransactionManagerName write set_DistributedTransactionManagerName;
    ///<summary>Gets or sets a default time after which a transaction times out.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  object. The default property is 00:01:00. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">An attempt to set this property to negative values.</exception>
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDefaultSettingsSection = class(TDNGenericImport<DNDefaultSettingsSectionClass, DNDefaultSettingsSection>) end;

  //-------------namespace: System.Transactions.Configuration----------------
  DNMachineSettingsSectionClass = interface(DNObjectClass)
  ['{0150FFB0-583B-5E10-8176-B432576BE0E0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.Configuration.MachineSettingsSection" />
    ///  class. </summary>
    {class} function init: DNMachineSettingsSection;

  end;

  ///<summary>Represents an XML section in a configuration file encapsulating all settings that can be modified only at the machine level. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.Configuration.MachineSettingsSection')]
  DNMachineSettingsSection = interface(DNObject)
  ['{0F166A72-33B1-32E3-95D5-E72F596A703B}']
  { getters & setters } 

    function get_MaxTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_MaxTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a maximum amount of time allowed before a transaction times out.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  object that contains the maximum allowable time. The default value is 00:10:00.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">An attempt to set this property to negative values.</exception>
    property MaxTimeout: DDN.mscorlib.DNTimeSpan read get_MaxTimeout write set_MaxTimeout;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNMachineSettingsSection = class(TDNGenericImport<DNMachineSettingsSectionClass, DNMachineSettingsSection>) end;

  //-------------namespace: System.Transactions.Configuration----------------
  DNTransactionsSectionGroupClass = interface(DNObjectClass)
  ['{9477E008-2455-550C-B0E8-D02F758484B9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.Configuration.TransactionsSectionGroup" />
    ///  class. </summary>
    {class} function init: DNTransactionsSectionGroup;

  { static methods } 

    ///<summary>Provides static access to a <see cref="T:System.Transactions.Configuration.TransactionsSectionGroup" />
    ///  .</summary>
    ///  <param name="config">A <see cref="T:System.Configuration.Configuration" />
    ///  representing the configuration settings that apply to a particular computer, application, or resource.</param>
    ///<returns>A <see cref="T:System.Transactions.Configuration.TransactionsSectionGroup" />
    ///  object.</returns>
    {class} function GetSectionGroup(config: DDN.System.Configuration.DNConfiguration): DNTransactionsSectionGroup;

  end;

  ///<summary>Represents a configuration section that encapsulates and allows traversal of all the transaction configuration XML elements and attributes that are within this configuration section. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.Configuration.TransactionsSectionGroup')]
  DNTransactionsSectionGroup = interface(DNObject)
  ['{610A65FB-6AD3-3BD2-B78C-6E7D1FE961CC}']
  { getters & setters } 

    function get_DefaultSettings: DNDefaultSettingsSection;
    function get_MachineSettings: DNMachineSettingsSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the default settings used to initialize the elements and attributes in a transactions section.</summary>
    ///<returns>A <see cref="T:System.Transactions.Configuration.DefaultSettingsSection" />
    ///  that represents the default settings. The default is a <see cref="T:System.Transactions.Configuration.DefaultSettingsSection" />
    ///  that is populated with default values.</returns>
    property DefaultSettings: DNDefaultSettingsSection read get_DefaultSettings;
    ///<summary>Gets the configuration settings set at the machine level.</summary>
    ///<returns>A <see cref="T:System.Transactions.Configuration.MachineSettingsSection" />
    ///  that represents the configuration settings at the machine level. The default is a <see cref="T:System.Transactions.Configuration.MachineSettingsSection" />
    ///  that is populated with default values.</returns>
    property MachineSettings: DNMachineSettingsSection read get_MachineSettings;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNTransactionsSectionGroup = class(TDNGenericImport<DNTransactionsSectionGroupClass, DNTransactionsSectionGroup>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5C2E318B-7CCE-52E5-9100-75B339191E55}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionEventArgs" />
    ///  class. </summary>
    {class} function init: DNTransactionEventArgs;

  end;

  ///<summary>Provides data for the following transaction events: <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />
  ///  , <see cref="E:System.Transactions.Transaction.TransactionCompleted" />
  ///  .</summary>
  [DNTypeName('System.Transactions.TransactionEventArgs')]
  DNTransactionEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E3243E94-2E74-3227-A119-810C85B9D3DA}']
  { getters & setters } 

    function get_Transaction: DNTransaction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the transaction for which event status is provided.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  for which event status is provided.</returns>
    property Transaction: DNTransaction read get_Transaction;
  end;

  TDNTransactionEventArgs = class(TDNGenericImport<DNTransactionEventArgsClass, DNTransactionEventArgs>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{F391B338-8EAF-5A4E-BC31-1501E30EF695}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionException" />
    ///  class.</summary>
    {class} function init: DNTransactionException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionException" />
    ///  class with the specified message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    {class} function init(message: string): DNTransactionException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionException" />
    ///  class with the specified message and inner exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    ///  <param name="innerException">Gets the exception instance that causes the current exception. For more information, see the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTransactionException; overload;

  end;

  ///<summary>The exception that is thrown when you attempt to do work on a transaction that cannot accept new work.  </summary>
  [DNTypeName('System.Transactions.TransactionException')]
  DNTransactionException = interface(DDN.mscorlib.DNSystemException)
  ['{32C3E8D4-C5F9-3FF7-90F2-57726E395867}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTransactionException = class(TDNGenericImport<DNTransactionExceptionClass, DNTransactionException>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionAbortedExceptionClass = interface(DNTransactionExceptionClass)
  ['{11A22E82-CA40-5A28-ADCE-8DDAA6C26A0D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionAbortedException" />
    ///  class.</summary>
    {class} function init: DNTransactionAbortedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionAbortedException" />
    ///  class with the specified message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    {class} function init(message: string): DNTransactionAbortedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionAbortedException" />
    ///  class with the specified message and inner exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    ///  <param name="innerException">Gets the exception instance that causes the current exception. For more information, see the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTransactionAbortedException; overload;

  end;

  ///<summary>The exception that is thrown when an operation is attempted on a transaction that has already been rolled back, or an attempt is made to commit the transaction and the transaction aborts. </summary>
  [DNTypeName('System.Transactions.TransactionAbortedException')]
  DNTransactionAbortedException = interface(DNTransactionException)
  ['{264A2CB8-A0F1-39DF-907F-B3A449161777}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTransactionAbortedException = class(TDNGenericImport<DNTransactionAbortedExceptionClass, DNTransactionAbortedException>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionInDoubtExceptionClass = interface(DNTransactionExceptionClass)
  ['{F2E13E7D-2311-5EE2-9190-EDBF56FA8813}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionInDoubtException" />
    ///  class.</summary>
    {class} function init: DNTransactionInDoubtException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionInDoubtException" />
    ///  class with the specified message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    {class} function init(message: string): DNTransactionInDoubtException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionInDoubtException" />
    ///  class with the specified message and inner exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    ///  <param name="innerException">Gets the exception instance that causes the current exception. For more information, see the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTransactionInDoubtException; overload;

  end;

  ///<summary>The exception that is thrown when an operation is attempted on a transaction that is in doubt, or an attempt is made to commit the transaction and the transaction becomes InDoubt. </summary>
  [DNTypeName('System.Transactions.TransactionInDoubtException')]
  DNTransactionInDoubtException = interface(DNTransactionException)
  ['{E42E0FE2-B25F-31AD-A323-14EF161C5DE7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTransactionInDoubtException = class(TDNGenericImport<DNTransactionInDoubtExceptionClass, DNTransactionInDoubtException>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionManagerCommunicationExceptionClass = interface(DNTransactionExceptionClass)
  ['{2692616C-FBE5-5C3E-870A-1BD89EEA6486}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionManagerCommunicationException" />
    ///  class.</summary>
    {class} function init: DNTransactionManagerCommunicationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionManagerCommunicationException" />
    ///  class with the specified message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    {class} function init(message: string): DNTransactionManagerCommunicationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionManagerCommunicationException" />
    ///  class with the specified message and inner exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    ///  <param name="innerException">Gets the exception instance that causes the current exception. For more information, see the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTransactionManagerCommunicationException; overload;

  end;

  ///<summary>The exception that is thrown when a resource manager cannot communicate with the transaction manager.</summary>
  [DNTypeName('System.Transactions.TransactionManagerCommunicationException')]
  DNTransactionManagerCommunicationException = interface(DNTransactionException)
  ['{E6A4F19D-3F75-3801-B803-AA8D5AE73B7B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTransactionManagerCommunicationException = class(TDNGenericImport<DNTransactionManagerCommunicationExceptionClass, DNTransactionManagerCommunicationException>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionPromotionExceptionClass = interface(DNTransactionExceptionClass)
  ['{3106D3F5-BCE9-5645-956C-307DBA493DFE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionPromotionException" />
    ///  class. </summary>
    {class} function init: DNTransactionPromotionException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionPromotionException" />
    ///  class with the specified message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    {class} function init(message: string): DNTransactionPromotionException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionPromotionException" />
    ///  class with the specified message and inner exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that contains a message that explains why the exception occurred.</param>
    ///  <param name="innerException">Gets the exception instance that causes the current exception. For more information, see the <see cref="P:System.Exception.InnerException" />
    ///  property.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTransactionPromotionException; overload;

  end;

  ///<summary>The exception that is thrown when a promotion fails.</summary>
  [DNTypeName('System.Transactions.TransactionPromotionException')]
  DNTransactionPromotionException = interface(DNTransactionException)
  ['{A5DE4030-63EE-3BC5-9FB3-6144CA4234E4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTransactionPromotionException = class(TDNGenericImport<DNTransactionPromotionExceptionClass, DNTransactionPromotionException>) end;

  //-------------namespace: System.Transactions----------------
  DNDistributedTransactionPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{CC5250A9-DCFD-5FC3-910A-AC753F139F5D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.DistributedTransactionPermission" />
    ///  class. </summary>
    ///  <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />
    ///  values.</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNDistributedTransactionPermission;

  end;

  ///<summary>The permission that is demanded by <see cref="N:System.Transactions" />
  ///  when management of a transaction is escalated to MSDTC. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.DistributedTransactionPermission')]
  DNDistributedTransactionPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{E4FCAA7B-A6A2-3405-A95A-469AC05E43D5}']
  { methods } 

    ///<summary>Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.</summary>
    ///<returns><see langword="true" />
    ///  if unrestricted use of the resource protected by the permission is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Creates and returns an identical copy of the current permission.</summary>
    ///<returns>A copy of the current permission.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
    ///<returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is <see langword="null" />
    ///  if the intersection is empty.</returns>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates a permission that is the union of the current permission and the specified permission. </summary>
    ///  <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
    ///<returns>An <see cref="T:System.Security.IPermission" />
    ///  that represents the union of the current permission and the specified permission.</returns>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Returns a value that indicates whether the current permission is a subset of the specified permission.</summary>
    ///  <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
    ///<returns><see langword="true" />
    ///  if the current <see cref="T:System.Security.IPermission" />
    ///  is a subset of the specified <see cref="T:System.Security.IPermission" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates an XML encoding of the security object and its current state.</summary>
    ///<returns>A <see cref="T:System.Security.SecurityElement" />
    ///  that contains the XML encoding of the security object, including any state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
    ///  <param name="securityElement">The XML encoding used to reconstruct the permission.</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDistributedTransactionPermission = class(TDNGenericImport<DNDistributedTransactionPermissionClass, DNDistributedTransactionPermission>) end;

  //-------------namespace: System.Transactions----------------
  DNEnlistmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9A4DC1D8-37A2-5741-ADDC-33798B1EFA36}']
  end;

  ///<summary>Facilitates communication between an enlisted transaction participant and the transaction manager during the final phase of the transaction.</summary>
  [DNTypeName('System.Transactions.Enlistment')]
  DNEnlistment = interface(DDN.mscorlib.DNObject)
  ['{490BE79B-6E73-355B-B77C-20970441382A}']
  { methods } 

    ///<summary>Indicates that the transaction participant has completed its work.</summary>
    procedure Done;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnlistment = class(TDNGenericImport<DNEnlistmentClass, DNEnlistment>) end;

  //-------------namespace: System.Transactions----------------
  DNPreparingEnlistmentClass = interface(DNEnlistmentClass)
  ['{53E64456-0FFF-5FD0-B255-79F77681BC92}']
  end;

  ///<summary>Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.</summary>
  [DNTypeName('System.Transactions.PreparingEnlistment')]
  DNPreparingEnlistment = interface(DNEnlistment)
  ['{2E8C254B-7445-31C0-ADF5-8E190CFF7C3E}']
  { methods } 

    ///<summary>Indicates that the transaction can be committed.</summary>
    procedure Prepared;
    ///<summary>Indicates that the transaction should be rolled back.</summary>
    procedure ForceRollback; overload;
    ///<summary>Indicates that the transaction should be rolled back.</summary>
    ///  <param name="e">An explanation of why a rollback is triggered.</param>
    procedure ForceRollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>Gets the recovery information of an enlistment.</summary>
    ///<returns>The recovery information of an enlistment.</returns>
    ///<exception cref="T:System.InvalidOperationException">An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.</exception>
    function RecoveryInformation: TArray<Byte>;
    ///<summary>Indicates that the transaction participant has completed its work.</summary>
    procedure Done;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPreparingEnlistment = class(TDNGenericImport<DNPreparingEnlistmentClass, DNPreparingEnlistment>) end;

  //-------------namespace: System.Transactions----------------
  DNSinglePhaseEnlistmentClass = interface(DNEnlistmentClass)
  ['{B6024651-53EB-5EAF-8191-36AF8325C7AA}']
  end;

  ///<summary>Provides a set of callbacks that facilitate communication between a participant enlisted for Single Phase Commit and the transaction manager when the <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" />
  ///  notification is received.</summary>
  [DNTypeName('System.Transactions.SinglePhaseEnlistment')]
  DNSinglePhaseEnlistment = interface(DNEnlistment)
  ['{531BEC56-D463-318A-9BF2-F9F4A19DEAE7}']
  { methods } 

    ///<summary>Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back.</summary>
    procedure Aborted; overload;
    ///<summary>Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back, and provides an explanation.</summary>
    ///  <param name="e">An explanation of why a rollback is initiated.</param>
    procedure Aborted(e: DDN.mscorlib.DNException); overload;
    ///<summary>Represents a callback that is used to indicate to the transaction manager that the SinglePhaseCommit was successful.</summary>
    procedure Committed;
    ///<summary>Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt.</summary>
    procedure InDoubt; overload;
    ///<summary>Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt, and provides an explanation.</summary>
    ///  <param name="e">An explanation of why the transaction is in doubt.</param>
    procedure InDoubt(e: DDN.mscorlib.DNException); overload;
    ///<summary>Indicates that the transaction participant has completed its work.</summary>
    procedure Done;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSinglePhaseEnlistment = class(TDNGenericImport<DNSinglePhaseEnlistmentClass, DNSinglePhaseEnlistment>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionClass = interface(DNObjectClass)
  ['{A240520D-D05D-5B12-A682-729DD9A75FAC}']
  { static getter & setter } 

    {class} function get_Current: DNTransaction;
    {class} procedure set_Current(value: DNTransaction);

  { static propertys } 

    ///<summary>Gets or sets the ambient transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that describes the current transaction.</returns>
    {class} property Current: DNTransaction read get_Current write set_Current;
  end;

  ///<summary>Represents a transaction.</summary>
  [DNTypeName('System.Transactions.Transaction')]
  DNTransaction = interface(DDN.mscorlib.DNIDisposable)
  ['{E1F23ACF-DC76-3B52-8794-5BB90592C284}']
  { getters & setters } 

    function get_TransactionInformation: DNTransactionInformation;
    function get_IsolationLevel: DNIsolationLevel;
    function get_PromoterType: DDN.mscorlib.DNGuid;

  { events } 

    procedure add_TransactionCompleted(value: DNTransactionCompletedEventHandler);
    procedure remove_TransactionCompleted(value: DNTransactionCompletedEventHandler);

  { methods } 

    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether this transaction and the specified object are equal.</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this transaction are identical; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Releases the resources that are held by the object.</summary>
    procedure Dispose;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE). </summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification): Boolean; overload;
    ///<summary>Gets the  byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>The  byte[] returned by the Promote method when the transaction is promoted.</returns>
    function GetPromotedToken: TArray<Byte>;
    ///<summary>Enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    procedure Rollback; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    ///  <param name="e">An explanation of why a rollback occurred.</param>
    procedure Rollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>Enlists a volatile resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two-phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Creates a clone of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that is a copy of the current transaction object.</returns>
    function Clone: DNTransaction;
    ///<summary>Creates a dependent clone of the transaction.</summary>
    ///  <param name="cloneOption">A <see cref="T:System.Transactions.DependentCloneOption" />
    ///  that controls what kind of dependent transaction to create.</param>
    ///<returns>A <see cref="T:System.Transactions.DependentTransaction" />
    ///  that represents the dependent clone.</returns>
    function DependentClone(cloneOption: DNDependentCloneOption): DNDependentTransaction;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="promoterType">The type of the distributed transaction processor.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification; promoterType: DDN.mscorlib.DNGuid): Boolean; overload;
    ///<summary>[Supported in the .NET Framework 4.5.2 and later versions]Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="promotableNotification">An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    function PromoteAndEnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; promotableNotification: DNIPromotableSinglePhaseNotification; enlistmentNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment;
    ///<summary>Sets the distributed transaction identifier generated by the non-MSDTC promoter.</summary>
    ///  <param name="promotableNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="distributedTransactionIdentifier">The identifier for the transaction used by the distributed transaction manager.</param>
    procedure SetDistributedTransactionIdentifier(promotableNotification: DNIPromotableSinglePhaseNotification; distributedTransactionIdentifier: DDN.mscorlib.DNGuid);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Retrieves additional information about a transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.TransactionInformation" />
    ///  that contains additional information about the transaction.</returns>
    property TransactionInformation: DNTransactionInformation read get_TransactionInformation;
    ///<summary>Gets the isolation level of the transaction.</summary>
    ///<returns>One of the <see cref="T:System.Transactions.IsolationLevel" />
    ///  values that indicates the isolation level of the transaction.</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
    ///<summary>Uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>A guid that uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</returns>
    property PromoterType: DDN.mscorlib.DNGuid read get_PromoterType;
  end;

  TDNTransaction = class(TDNGenericImport<DNTransactionClass, DNTransaction>) end;

  //-------------namespace: System.Transactions----------------
  DNCommittableTransactionClass = interface(DNTransactionClass)
  ['{2CC0C5CF-9BF7-5CFC-99A9-DDF181ED2672}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" />
    ///  class. </summary>
    ///<exception cref="T:System.PlatformNotSupportedException">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</exception>
    {class} function init: DNCommittableTransaction; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" />
    ///  class with the specified <paramref name="timeout" />
    ///  value.</summary>
    ///  <param name="timeout">The maximum amount of time the transaction can exist, before it is aborted.</param>
    ///<exception cref="T:System.PlatformNotSupportedException">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</exception>
    {class} function init(timeout: DDN.mscorlib.DNTimeSpan): DNCommittableTransaction; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.CommittableTransaction" />
    ///  class with the specified transaction options.</summary>
    ///  <param name="options">A <see cref="T:System.Transactions.TransactionOptions" />
    ///  structure that describes the transaction options to use for the new transaction.</param>
    ///<exception cref="T:System.PlatformNotSupportedException">An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</exception><exception cref="T:System.ArgumentException"><paramref name="options" />
    ///  is invalid.</exception>
    {class} function init(options: DNTransactionOptions): DNCommittableTransaction; overload;

  end;

  ///<summary>Describes a committable transaction.</summary>
  [DNTypeName('System.Transactions.CommittableTransaction')]
  DNCommittableTransaction = interface(DNTransaction)
  ['{7586BDAA-D0AB-305A-9999-A0B5719BDDD3}']
  { getters & setters } 

    function get_TransactionInformation: DNTransactionInformation;
    function get_IsolationLevel: DNIsolationLevel;
    function get_PromoterType: DDN.mscorlib.DNGuid;

  { events } 

    procedure add_TransactionCompleted(value: DNTransactionCompletedEventHandler);
    procedure remove_TransactionCompleted(value: DNTransactionCompletedEventHandler);

  { methods } 

    ///<summary>Begins an attempt to commit the transaction asynchronously.</summary>
    ///  <param name="asyncCallback">The <see cref="T:System.AsyncCallback" />
    ///  delegate that is invoked when the transaction completes. This parameter can be <see langword="null" />
    ///  , in which case the application is not notified of the transaction's completion. Instead, the application must use the <see cref="T:System.IAsyncResult" />
    ///  interface to check for completion and wait accordingly, or call <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" />
    ///  to wait for completion.</param>
    ///  <param name="asyncState">An object, which might contain arbitrary state information, associated with the asynchronous commitment. This object is passed to the callback, and is not interpreted by <see cref="N:System.Transactions" />
    ///  . A null reference is permitted.</param>
    ///<returns>An <see cref="T:System.IAsyncResult" />
    ///  interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</returns>
    function BeginCommit(asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    ///<summary>Attempts to commit the transaction.</summary>
    ///<exception cref="T:System.Transactions.TransactionInDoubtException"><see cref="M:System.Transactions.CommittableTransaction.Commit" />
    ///  is called on a transaction and the transaction becomes <see cref="F:System.Transactions.TransactionStatus.InDoubt" />
    ///  .</exception><exception cref="T:System.Transactions.TransactionAbortedException"><see cref="M:System.Transactions.CommittableTransaction.Commit" />
    ///  is called and the transaction rolls back for the first time.</exception>
    procedure Commit;
    ///<summary>Ends an attempt to commit the transaction asynchronously.</summary>
    ///  <param name="asyncResult">The <see cref="T:System.IAsyncResult" />
    ///  object associated with the asynchronous commitment.</param>
    ///<exception cref="T:System.Transactions.TransactionAbortedException"><see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />
    ///  is called and the transaction rolls back for the first time.</exception>
    procedure EndCommit(asyncResult: DDN.mscorlib.DNIAsyncResult);
    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether this transaction and the specified object are equal.</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this transaction are identical; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Releases the resources that are held by the object.</summary>
    procedure Dispose;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE). </summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification): Boolean; overload;
    ///<summary>Gets the  byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>The  byte[] returned by the Promote method when the transaction is promoted.</returns>
    function GetPromotedToken: TArray<Byte>;
    ///<summary>Enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    procedure Rollback; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    ///  <param name="e">An explanation of why a rollback occurred.</param>
    procedure Rollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>Enlists a volatile resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two-phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Creates a clone of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that is a copy of the current transaction object.</returns>
    function Clone: DNTransaction;
    ///<summary>Creates a dependent clone of the transaction.</summary>
    ///  <param name="cloneOption">A <see cref="T:System.Transactions.DependentCloneOption" />
    ///  that controls what kind of dependent transaction to create.</param>
    ///<returns>A <see cref="T:System.Transactions.DependentTransaction" />
    ///  that represents the dependent clone.</returns>
    function DependentClone(cloneOption: DNDependentCloneOption): DNDependentTransaction;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="promoterType">The type of the distributed transaction processor.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification; promoterType: DDN.mscorlib.DNGuid): Boolean; overload;
    ///<summary>[Supported in the .NET Framework 4.5.2 and later versions]Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="promotableNotification">An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    function PromoteAndEnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; promotableNotification: DNIPromotableSinglePhaseNotification; enlistmentNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment;
    ///<summary>Sets the distributed transaction identifier generated by the non-MSDTC promoter.</summary>
    ///  <param name="promotableNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="distributedTransactionIdentifier">The identifier for the transaction used by the distributed transaction manager.</param>
    procedure SetDistributedTransactionIdentifier(promotableNotification: DNIPromotableSinglePhaseNotification; distributedTransactionIdentifier: DDN.mscorlib.DNGuid);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Retrieves additional information about a transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.TransactionInformation" />
    ///  that contains additional information about the transaction.</returns>
    property TransactionInformation: DNTransactionInformation read get_TransactionInformation;
    ///<summary>Gets the isolation level of the transaction.</summary>
    ///<returns>One of the <see cref="T:System.Transactions.IsolationLevel" />
    ///  values that indicates the isolation level of the transaction.</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
    ///<summary>Uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>A guid that uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</returns>
    property PromoterType: DDN.mscorlib.DNGuid read get_PromoterType;
  end;

  TDNCommittableTransaction = class(TDNGenericImport<DNCommittableTransactionClass, DNCommittableTransaction>) end;

  //-------------namespace: System.Transactions----------------
  DNDependentTransactionClass = interface(DNTransactionClass)
  ['{1E04B959-AC53-5D01-84ED-64B6829BDE00}']
  end;

  ///<summary>Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.DependentTransaction')]
  DNDependentTransaction = interface(DNTransaction)
  ['{168759F4-7CA6-3DF9-A44F-3FED676C58EF}']
  { getters & setters } 

    function get_TransactionInformation: DNTransactionInformation;
    function get_IsolationLevel: DNIsolationLevel;
    function get_PromoterType: DDN.mscorlib.DNGuid;

  { events } 

    procedure add_TransactionCompleted(value: DNTransactionCompletedEventHandler);
    procedure remove_TransactionCompleted(value: DNTransactionCompletedEventHandler);

  { methods } 

    ///<summary>Attempts to complete the dependent transaction.</summary>
    ///<exception cref="T:System.Transactions.TransactionException">Any attempt for additional work on the transaction after this method is called. These include invoking methods such as <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />
    ///  , <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />
    ///  , <see cref="M:System.Transactions.Transaction.Clone" />
    ///  , <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />
    ///  , or any serialization operations on the transaction. </exception>
    procedure Complete;
    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether this transaction and the specified object are equal.</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this transaction are identical; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Releases the resources that are held by the object.</summary>
    procedure Dispose;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE). </summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification): Boolean; overload;
    ///<summary>Gets the  byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>The  byte[] returned by the Promote method when the transaction is promoted.</returns>
    function GetPromotedToken: TArray<Byte>;
    ///<summary>Enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    procedure Rollback; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    ///  <param name="e">An explanation of why a rollback occurred.</param>
    procedure Rollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>Enlists a volatile resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two-phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Creates a clone of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that is a copy of the current transaction object.</returns>
    function Clone: DNTransaction;
    ///<summary>Creates a dependent clone of the transaction.</summary>
    ///  <param name="cloneOption">A <see cref="T:System.Transactions.DependentCloneOption" />
    ///  that controls what kind of dependent transaction to create.</param>
    ///<returns>A <see cref="T:System.Transactions.DependentTransaction" />
    ///  that represents the dependent clone.</returns>
    function DependentClone(cloneOption: DNDependentCloneOption): DNDependentTransaction;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="promoterType">The type of the distributed transaction processor.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification; promoterType: DDN.mscorlib.DNGuid): Boolean; overload;
    ///<summary>[Supported in the .NET Framework 4.5.2 and later versions]Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="promotableNotification">An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    function PromoteAndEnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; promotableNotification: DNIPromotableSinglePhaseNotification; enlistmentNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment;
    ///<summary>Sets the distributed transaction identifier generated by the non-MSDTC promoter.</summary>
    ///  <param name="promotableNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="distributedTransactionIdentifier">The identifier for the transaction used by the distributed transaction manager.</param>
    procedure SetDistributedTransactionIdentifier(promotableNotification: DNIPromotableSinglePhaseNotification; distributedTransactionIdentifier: DDN.mscorlib.DNGuid);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Retrieves additional information about a transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.TransactionInformation" />
    ///  that contains additional information about the transaction.</returns>
    property TransactionInformation: DNTransactionInformation read get_TransactionInformation;
    ///<summary>Gets the isolation level of the transaction.</summary>
    ///<returns>One of the <see cref="T:System.Transactions.IsolationLevel" />
    ///  values that indicates the isolation level of the transaction.</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
    ///<summary>Uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>A guid that uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</returns>
    property PromoterType: DDN.mscorlib.DNGuid read get_PromoterType;
  end;

  TDNDependentTransaction = class(TDNGenericImport<DNDependentTransactionClass, DNDependentTransaction>) end;

  //-------------namespace: System.Transactions----------------
  DNSubordinateTransactionClass = interface(DNTransactionClass)
  ['{6DA2EEFD-A857-5A38-B552-99DB799C6F63}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.SubordinateTransaction" />
    ///  class. </summary>
    ///  <param name="isoLevel">The isolation level of the transaction</param>
    ///  <param name="superior">A <see cref="T:System.Transactions.ISimpleTransactionSuperior" />
    ///</param>
    {class} function init(isoLevel: DNIsolationLevel; superior: DNISimpleTransactionSuperior): DNSubordinateTransaction;

  end;

  ///<summary>Represents a non-rooted transaction that can be delegated. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.SubordinateTransaction')]
  DNSubordinateTransaction = interface(DNTransaction)
  ['{560E99D3-37B1-3D38-8530-684E6F16B9B5}']
  { getters & setters } 

    function get_TransactionInformation: DNTransactionInformation;
    function get_IsolationLevel: DNIsolationLevel;
    function get_PromoterType: DDN.mscorlib.DNGuid;

  { events } 

    procedure add_TransactionCompleted(value: DNTransactionCompletedEventHandler);
    procedure remove_TransactionCompleted(value: DNTransactionCompletedEventHandler);

  { methods } 

    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether this transaction and the specified object are equal.</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this transaction are identical; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Releases the resources that are held by the object.</summary>
    procedure Dispose;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE). </summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification): Boolean; overload;
    ///<summary>Gets the  byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>The  byte[] returned by the Promote method when the transaction is promoted.</returns>
    function GetPromotedToken: TArray<Byte>;
    ///<summary>Enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    procedure Rollback; overload;
    ///<summary>Rolls back (aborts) the transaction.</summary>
    ///  <param name="e">An explanation of why a rollback occurred.</param>
    procedure Rollback(e: DDN.mscorlib.DNException); overload;
    ///<summary>Enlists a volatile resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two-phase commit notifications. </param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(enlistmentNotification: DNIEnlistmentNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.</summary>
    ///  <param name="singlePhaseNotification">An object that implements the <see cref="T:System.Transactions.ISinglePhaseNotification" />
    ///  interface that must be able to receive single phase commit and two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  object that describes the enlistment.</returns>
    function EnlistVolatile(singlePhaseNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment; overload;
    ///<summary>Creates a clone of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that is a copy of the current transaction object.</returns>
    function Clone: DNTransaction;
    ///<summary>Creates a dependent clone of the transaction.</summary>
    ///  <param name="cloneOption">A <see cref="T:System.Transactions.DependentCloneOption" />
    ///  that controls what kind of dependent transaction to create.</param>
    ///<returns>A <see cref="T:System.Transactions.DependentTransaction" />
    ///  that represents the dependent clone.</returns>
    function DependentClone(cloneOption: DNDependentCloneOption): DNDependentTransaction;
    ///<summary>Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).</summary>
    ///  <param name="promotableSinglePhaseNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="promoterType">The type of the distributed transaction processor.</param>
    ///<returns>A <see cref="T:System.Transactions.SinglePhaseEnlistment" />
    ///  interface implementation that describes the enlistment.</returns>
    function EnlistPromotableSinglePhase(promotableSinglePhaseNotification: DNIPromotableSinglePhaseNotification; promoterType: DDN.mscorlib.DNGuid): Boolean; overload;
    ///<summary>[Supported in the .NET Framework 4.5.2 and later versions]Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A unique identifier for a resource manager, which should persist across resource manager failure or reboot.</param>
    ///  <param name="promotableNotification">An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.</param>
    ///  <param name="enlistmentNotification">An object that implements the <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  interface to receive two phase commit notifications.</param>
    ///  <param name="enlistmentOptions"><see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />
    ///  if the resource manager wants to perform additional work during the prepare phase.</param>
    function PromoteAndEnlistDurable(resourceManagerIdentifier: DDN.mscorlib.DNGuid; promotableNotification: DNIPromotableSinglePhaseNotification; enlistmentNotification: DNISinglePhaseNotification; enlistmentOptions: DNEnlistmentOptions): DNEnlistment;
    ///<summary>Sets the distributed transaction identifier generated by the non-MSDTC promoter.</summary>
    ///  <param name="promotableNotification">A <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" />
    ///  interface implemented by the participant.</param>
    ///  <param name="distributedTransactionIdentifier">The identifier for the transaction used by the distributed transaction manager.</param>
    procedure SetDistributedTransactionIdentifier(promotableNotification: DNIPromotableSinglePhaseNotification; distributedTransactionIdentifier: DDN.mscorlib.DNGuid);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Retrieves additional information about a transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.TransactionInformation" />
    ///  that contains additional information about the transaction.</returns>
    property TransactionInformation: DNTransactionInformation read get_TransactionInformation;
    ///<summary>Gets the isolation level of the transaction.</summary>
    ///<returns>One of the <see cref="T:System.Transactions.IsolationLevel" />
    ///  values that indicates the isolation level of the transaction.</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
    ///<summary>Uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</summary>
    ///<returns>A guid that uniquely identifies the format of the byte[] returned by the Promote method when the transaction is promoted.</returns>
    property PromoterType: DDN.mscorlib.DNGuid read get_PromoterType;
  end;

  TDNSubordinateTransaction = class(TDNGenericImport<DNSubordinateTransactionClass, DNSubordinateTransaction>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{38D6BA6A-F0F3-5A40-B9C2-F6DC314258F6}']
  end;

  ///<summary>Provides additional information regarding a transaction.</summary>
  [DNTypeName('System.Transactions.TransactionInformation')]
  DNTransactionInformation = interface(DDN.mscorlib.DNObject)
  ['{CD41D142-1F2D-352D-9DE5-A5035C9529BD}']
  { getters & setters } 

    function get_LocalIdentifier: string;
    function get_DistributedIdentifier: DDN.mscorlib.DNGuid;
    function get_CreationTime: DDN.mscorlib.DNDateTime;
    function get_Status: DNTransactionStatus;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a unique identifier of the transaction.</summary>
    ///<returns>A unique identifier of the transaction.</returns>
    property LocalIdentifier: string read get_LocalIdentifier;
    ///<summary>Gets a unique identifier of the escalated transaction.</summary>
    ///<returns>A <see cref="T:System.Guid" />
    ///  that contains the unique identifier of the escalated transaction.</returns>
    property DistributedIdentifier: DDN.mscorlib.DNGuid read get_DistributedIdentifier;
    ///<summary>Gets the creation time of the transaction.</summary>
    ///<returns>A <see cref="T:System.DateTime" />
    ///  that contains the creation time of the transaction.</returns>
    property CreationTime: DDN.mscorlib.DNDateTime read get_CreationTime;
    ///<summary>Gets the status of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.TransactionStatus" />
    ///  that contains the status of the transaction.</returns>
    property Status: DNTransactionStatus read get_Status;
  end;

  TDNTransactionInformation = class(TDNGenericImport<DNTransactionInformationClass, DNTransactionInformation>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionInteropClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8558F78-E3D0-58D5-B9BF-DF6745C87B8C}']
  { static fields getter & setter } 

   function __fakeFieldGet_PromoterTypeDtc: DDN.mscorlib.DNGuid;

  { static fields } 

    ///<summary>The type of the distributed transaction processor.</summary>
    ///<returns>The type of the distributed transaction processor.</returns>
    {class} property PromoterTypeDtc: DDN.mscorlib.DNGuid read __fakeFieldGet_PromoterTypeDtc;

  { static methods } 

    ///<summary>Transforms a transaction object into an export transaction cookie.</summary>
    ///  <param name="transaction">The <see cref="T:System.Transactions.Transaction" />
    ///  object to be marshaled.</param>
    ///  <param name="whereabouts">An address that describes the location of the destination transaction manager. This permits two transaction managers to communicate with one another and thereby propagate a transaction from one system to the other.</param>
    ///<returns>An export transaction cookie representing the specified <see cref="T:System.Transactions.Transaction" />
    ///  object.</returns>
    {class} function GetExportCookie(transaction: DNTransaction; whereabouts: TArray<Byte>): TArray<Byte>;
    ///<summary>Generates a <see cref="T:System.Transactions.Transaction" />
    ///  from the specified an export cookie. Â </summary>
    ///  <param name="cookie">A marshaled form of the transaction object.</param>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  from the specified export cookie.</returns>
    {class} function GetTransactionFromExportCookie(cookie: TArray<Byte>): DNTransaction;
    ///<summary>Generates a propagation token for the specified <see cref="T:System.Transactions.Transaction" />
    ///  .</summary>
    ///  <param name="transaction">A transaction to be marshaled into a propagation token.</param>
    ///<returns>This method, together with the <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />
    ///  method, provide functionality for Transmitter/Receiver propagation, in which the transaction is "pulled" from the remote machine when the latter is called to unmarshal the transaction. For more information on different propagation models, see the Remarks section of the <see cref="T:System.Transactions.TransactionInterop" />
    ///  class.</returns>
    {class} function GetTransmitterPropagationToken(transaction: DNTransaction): TArray<Byte>;
    ///<summary>Generates a <see cref="T:System.Transactions.Transaction" />
    ///  instance from the specified transmitter propagation token.Â </summary>
    ///  <param name="propagationToken">A propagation token representing a transaction.</param>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  from the specified transmitter propagation token.</returns>
    ///<exception cref="T:System.Transactions.TransactionManagerCommunicationException">The deserialization of a transaction fails because the transaction manager cannot be contacted. This may be caused by network firewall or security settings.</exception>
    {class} function GetTransactionFromTransmitterPropagationToken(propagationToken: TArray<Byte>): DNTransaction;
    ///<summary>Gets an <see cref="T:System.Transactions.IDtcTransaction" />
    ///  instance that represents a <see cref="T:System.Transactions.Transaction" />
    ///  . Â </summary>
    ///  <param name="transaction">A <see cref="T:System.Transactions.Transaction" />
    ///  instance to be marshaled.</param>
    ///<returns>An <see cref="T:System.Transactions.IDtcTransaction" />
    ///  instance that represents a <see cref="T:System.Transactions.Transaction" />
    ///  . Â The <see cref="T:System.Transactions.IDtcTransaction" />
    ///  instance is compatible with the unmanaged form of ITransaction used by MSDTC and with the Managed form of <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  used by <see cref="N:System.EnterpriseServices" />
    ///  .</returns>
    {class} function GetDtcTransaction(transaction: DNTransaction): DNIDtcTransaction;
    ///<summary>Generates a <see cref="T:System.Transactions.Transaction" />
    ///  from a specified <see cref="T:System.Transactions.IDtcTransaction" />
    ///  .</summary>
    ///  <param name="transactionNative">The <see cref="T:System.Transactions.IDtcTransaction" />
    ///  object to be marshaled.</param>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  instance that represents the given <see cref="T:System.Transactions.IDtcTransaction" />
    ///  .</returns>
    {class} function GetTransactionFromDtcTransaction(transactionNative: DNIDtcTransaction): DNTransaction;
    ///<summary>Gets the Whereabouts of the distributed transaction manager that <see cref="N:System.Transactions" />
    ///  uses. Â </summary>
    ///<returns>The Whereabouts of the distributed transaction manager that <see cref="N:System.Transactions" />
    ///  uses. Â </returns>
    {class} function GetWhereabouts: TArray<Byte>;

  end;

  ///<summary>Facilitates interaction between <see cref="N:System.Transactions" />
  ///  and components that were previously written to interact with MSDTC, COM+, or <see cref="N:System.EnterpriseServices" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.TransactionInterop')]
  DNTransactionInterop = interface(DDN.mscorlib.DNObject)
  ['{F67C6D69-E281-3062-AA0B-8F77C17C1751}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransactionInterop = class(TDNGenericImport<DNTransactionInteropClass, DNTransactionInterop>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8446A03-570C-55CD-95EA-2B61C3991F45}']
  { static getter & setter } 

    {class} function get_HostCurrentCallback: DNHostCurrentTransactionCallback;
    {class} procedure set_HostCurrentCallback(value: DNHostCurrentTransactionCallback);
    {class} function get_DefaultTimeout: DDN.mscorlib.DNTimeSpan;
    {class} function get_MaximumTimeout: DDN.mscorlib.DNTimeSpan;

  { static methods } 

    ///<summary>Reenlists a durable participant in a transaction.</summary>
    ///  <param name="resourceManagerIdentifier">A <see cref="T:System.Guid" />
    ///  that uniquely identifies the resource manager.</param>
    ///  <param name="recoveryInformation">Contains additional information of recovery information.</param>
    ///  <param name="enlistmentNotification">A resource object that implements <see cref="T:System.Transactions.IEnlistmentNotification" />
    ///  to receive notifications.</param>
    ///<returns>An <see cref="T:System.Transactions.Enlistment" />
    ///  that describes the enlistment.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="recoveryInformation" />
    ///  is invalid.-or-Transaction Manager information in <paramref name="recoveryInformation" />
    ///  does not match the configured transaction manager.-or-
    ///  <paramref name="RecoveryInformation" />
    ///  is not recognized by <see cref="N:System.Transactions" />
    ///  .</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" />
    ///  has already been called for the specified <paramref name="resourceManagerIdentifier" />
    ///  . The reenlistment is rejected.</exception><exception cref="T:System.Transactions.TransactionException">The <paramref name="resourceManagerIdentifier" />
    ///  does not match the content of the specified recovery information in <paramref name="recoveryInformation" />
    ///  . </exception>
    {class} function Reenlist(resourceManagerIdentifier: DDN.mscorlib.DNGuid; recoveryInformation: TArray<Byte>; enlistmentNotification: DNIEnlistmentNotification): DNEnlistment;
    ///<summary>Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.</summary>
    ///  <param name="resourceManagerIdentifier">A <see cref="T:System.Guid" />
    ///  that uniquely identifies the resource to be recovered from.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="resourceManagerIdentifier" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} procedure RecoveryComplete(resourceManagerIdentifier: DDN.mscorlib.DNGuid);

  { static propertys } 

    ///<summary>Gets or sets a custom transaction factory.</summary>
    ///<returns>A <see cref="T:System.Transactions.HostCurrentTransactionCallback" />
    ///  that contains a custom transaction factory.</returns>
    {class} property HostCurrentCallback: DNHostCurrentTransactionCallback read get_HostCurrentCallback write set_HostCurrentCallback;
    ///<summary>Gets the default timeout interval for new transactions.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that specifies the timeout interval for new transactions.</returns>
    {class} property DefaultTimeout: DDN.mscorlib.DNTimeSpan read get_DefaultTimeout;
    ///<summary>Gets the default maximum timeout interval for new transactions.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that specifies the maximum timeout interval that is allowed when creating new transactions.</returns>
    {class} property MaximumTimeout: DDN.mscorlib.DNTimeSpan read get_MaximumTimeout;
  end;

  ///<summary>Contains methods used for transaction management. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.TransactionManager')]
  DNTransactionManager = interface(DDN.mscorlib.DNObject)
  ['{E8617F9C-039A-3366-A383-67B5F73D1E48}']
  { events } 

    {class} procedure add_DistributedTransactionStarted(value: DNTransactionStartedEventHandler);
    {class} procedure remove_DistributedTransactionStarted(value: DNTransactionStartedEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransactionManager = class(TDNGenericImport<DNTransactionManagerClass, DNTransactionManager>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionScopeClass = interface(DNObjectClass)
  ['{0EC82406-28A2-5E1A-AE67-3DFE1BD054EF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class. </summary>
    {class} function init: DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified requirements.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    {class} function init(scopeOption: DNTransactionScopeOption): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified asynchronous flow option.</summary>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified requirements and asynchronous flow option.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified timeout value and requirements.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="scopeTimeout">The <see cref="T:System.TimeSpan" />
    ///  after which the transaction scope times out and aborts the transaction.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; scopeTimeout: DDN.mscorlib.DNTimeSpan): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified timeout value, requirements, and asynchronous flow option.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="scopeTimeout">The <see cref="T:System.TimeSpan" />
    ///  after which the transaction scope times out and aborts the transaction.</param>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; scopeTimeout: DDN.mscorlib.DNTimeSpan; asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified requirements.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="transactionOptions">A <see cref="T:System.Transactions.TransactionOptions" />
    ///  structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; transactionOptions: DNTransactionOptions): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified requirements and asynchronous flow option.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="transactionOptions">A <see cref="T:System.Transactions.TransactionOptions" />
    ///  structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</param>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; transactionOptions: DNTransactionOptions; asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified scope and COM+ interoperability requirements, and transaction options.</summary>
    ///  <param name="scopeOption">An instance of the <see cref="T:System.Transactions.TransactionScopeOption" />
    ///  enumeration that describes the transaction requirements associated with this transaction scope.</param>
    ///  <param name="transactionOptions">A <see cref="T:System.Transactions.TransactionOptions" />
    ///  structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.</param>
    ///  <param name="interopOption">An instance of the <see cref="T:System.Transactions.EnterpriseServicesInteropOption" />
    ///  enumeration that describes how the associated transaction interacts with COM+ transactions.</param>
    {class} function init(scopeOption: DNTransactionScopeOption; transactionOptions: DNTransactionOptions; interopOption: DNEnterpriseServicesInteropOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction. </summary>
    ///  <param name="transactionToUse">The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</param>
    {class} function init(transactionToUse: DNTransaction): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</summary>
    ///  <param name="transactionToUse">The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</param>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(transactionToUse: DNTransaction; asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction. </summary>
    ///  <param name="transactionToUse">The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</param>
    ///  <param name="scopeTimeout">The <see cref="T:System.TimeSpan" />
    ///  after which the transaction scope times out and aborts the transaction.</param>
    {class} function init(transactionToUse: DNTransaction; scopeTimeout: DDN.mscorlib.DNTimeSpan): DNTransactionScope; overload;
    ///<summary>[Supported in the .NET Framework 4.5.1 and later versions] Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</summary>
    ///  <param name="transactionToUse">The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</param>
    ///  <param name="scopeTimeout">The <see cref="T:System.TimeSpan" />
    ///  after which the transaction scope times out and aborts the transaction.</param>
    ///  <param name="asyncFlowOption">An instance of the <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />
    ///  enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</param>
    {class} function init(transactionToUse: DNTransaction; scopeTimeout: DDN.mscorlib.DNTimeSpan; asyncFlowOption: DNTransactionScopeAsyncFlowOption): DNTransactionScope; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Transactions.TransactionScope" />
    ///  class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction. </summary>
    ///  <param name="transactionToUse">The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</param>
    ///  <param name="scopeTimeout">The <see cref="T:System.TimeSpan" />
    ///  after which the transaction scope times out and aborts the transaction.</param>
    ///  <param name="interopOption">An instance of the <see cref="T:System.Transactions.EnterpriseServicesInteropOption" />
    ///  enumeration that describes how the associated transaction interacts with COM+ transactions.</param>
    {class} function init(transactionToUse: DNTransaction; scopeTimeout: DDN.mscorlib.DNTimeSpan; interopOption: DNEnterpriseServicesInteropOption): DNTransactionScope; overload;

  end;

  ///<summary>Makes a code block transactional. This class cannot be inherited.</summary>
  [DNTypeName('System.Transactions.TransactionScope')]
  DNTransactionScope = interface(DDN.mscorlib.DNIDisposable)
  ['{9D930A75-06D4-3E93-A49C-17E4928B3821}']
  { methods } 

    ///<summary>Ends the transaction scope.</summary>
    procedure Dispose;
    ///<summary>Indicates that all operations within the scope are completed successfully.</summary>
    ///<exception cref="T:System.InvalidOperationException">This method has already been called once.</exception>
    procedure Complete;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransactionScope = class(TDNGenericImport<DNTransactionScopeClass, DNTransactionScope>) end;

  //-------------namespace: System.Transactions----------------
  DNTransactionOptionsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3B69E5E5-8A0C-54BD-91E1-FAAE8DECD7D8}']
  end;

  ///<summary>Contains additional information that specifies transaction behaviors.</summary>
  [DNTypeName('System.Transactions.TransactionOptions')]
  DNTransactionOptions = interface(DDN.mscorlib.DNValueType)
  ['{89EEABA3-B630-3A67-84EA-EDE60AE287B5}']
  { getters & setters } 

    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);
    function get_IsolationLevel: DNIsolationLevel;
    procedure set_IsolationLevel(value: DNIsolationLevel);

  { methods } 

    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether this <see cref="T:System.Transactions.TransactionOptions" />
    ///  instance and the specified object are equal.</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this <see cref="T:System.Transactions.TransactionOptions" />
    ///  instance are identical; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the timeout period for the transaction.</summary>
    ///<returns>A <see cref="T:System.TimeSpan" />
    ///  value that specifies the timeout period for the transaction.</returns>
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
    ///<summary>Gets or sets the isolation level of the transaction.</summary>
    ///<returns>A <see cref="T:System.Transactions.IsolationLevel" />
    ///  enumeration that specifies the isolation level of the transaction.</returns>
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel write set_IsolationLevel;
  end;

  TDNTransactionOptions = class(TDNGenericImport<DNTransactionOptionsClass, DNTransactionOptions>) end;


implementation


initialization
  LoadAssemblyModule('System.Transactions.dll', True);

finalization

end.
