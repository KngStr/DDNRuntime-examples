//----------------------------------------------------------------------------
//  System.Drawing.dll: System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Drawing
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Drawing;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定的绘图图面上的内容对齐方式。
  ///</summary>
  [DNTypeName('System.Drawing.ContentAlignment')]
  DNContentAlignment = type Integer;
  DNContentAlignmentHelper = record helper for DNContentAlignment
  public const
    ///<summary>
    ///  内容是在顶部，垂直对齐和水平方向上左对齐。
    ///</summary>
    TopLeft = 1;
    ///<summary>
    ///  内容是在顶部，垂直对齐和水平方向上居中对齐。
    ///</summary>
    TopCenter = 2;
    ///<summary>
    ///  内容是在顶部，垂直对齐和水平方向上右对齐。
    ///</summary>
    TopRight = 4;
    ///<summary>
    ///  内容是在中间，垂直对齐和水平方向上左对齐。
    ///</summary>
    MiddleLeft = 16;
    ///<summary>
    ///  内容是在中间，垂直对齐和水平方向上居中对齐。
    ///</summary>
    MiddleCenter = 32;
    ///<summary>
    ///  内容是在中间，垂直对齐和水平方向上右对齐。
    ///</summary>
    MiddleRight = 64;
    ///<summary>
    ///  内容是在底部，垂直对齐和水平方向上左对齐。
    ///</summary>
    BottomLeft = 256;
    ///<summary>
    ///  内容是在底部，垂直对齐和水平方向上居中对齐。
    ///</summary>
    BottomCenter = 512;
    ///<summary>
    ///  内容是在底部，垂直对齐和水平方向上右对齐。
    ///</summary>
    BottomRight = 1024;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  确定如何与目标颜色，以生成最终颜色的组合中复制像素操作的源颜色。
  ///</summary>
  [DNTypeName('System.Drawing.CopyPixelOperation')]
  DNCopyPixelOperation = type Integer;
  DNCopyPixelOperationHelper = record helper for DNCopyPixelOperation
  public const
    ///<summary>
    ///  通过使用与物理调色板中索引 0 处关联的颜色填充目标区域。
    ///  （此颜色为黑色，默认的物理调色板。
    ///</summary>
    Blackness = 66;
    ///<summary>
    ///  源和目标颜色组合使用布尔 <see langword="OR" />
    ///  然后逆转运算符和生成的颜色。
    ///</summary>
    NotSourceErase = 1114278;
    ///<summary>
    ///  反转的源区域复制到目标。
    ///</summary>
    NotSourceCopy = 3342344;
    ///<summary>
    ///  目标区域的颜色反转结合使用布尔值的源区域的颜色 <see langword="AND" />
    ///  运算符。
    ///</summary>
    SourceErase = 4457256;
    ///<summary>
    ///  目标区域已逆转。
    ///</summary>
    DestinationInvert = 5570569;
    ///<summary>
    ///  与相结合，目标设备上下文中当前选定的画笔的颜色的颜色的目标使用布尔 <see langword="XOR" />
    ///  运算符。
    ///</summary>
    PatInvert = 5898313;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="XOR" />
    ///  运算符。
    ///</summary>
    SourceInvert = 6684742;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="AND" />
    ///  运算符。
    ///</summary>
    SourceAnd = 8913094;
    ///<summary>
    ///  与目标区域的颜色合并反转的源区域的颜色，应使用布尔 <see langword="OR" />
    ///  运算符。
    ///</summary>
    MergePaint = 12255782;
    ///<summary>
    ///  源区域的颜色的目标设备上下文中使用布尔所选定画笔颜色与合并 <see langword="AND" />
    ///  运算符。
    ///</summary>
    MergeCopy = 12583114;
    ///<summary>
    ///  源区域是直接复制到目标区域。
    ///</summary>
    SourceCopy = 13369376;
    ///<summary>
    ///  源和目标区域的颜色组合使用布尔 <see langword="OR" />
    ///  运算符。
    ///</summary>
    SourcePaint = 15597702;
    ///<summary>
    ///  目标设备上下文中当前选定的画笔复制到目标位图。
    ///</summary>
    PatCopy = 15728673;
    ///<summary>
    ///  与使用布尔将反转的源区域的颜色相结合，目标设备上下文中当前选定的画笔的颜色 <see langword="OR" />
    ///  运算符。
    ///  此操作的结果结合使用布尔值的目标区域的颜色 <see langword="OR" />
    ///  运算符。
    ///</summary>
    PatPaint = 16452105;
    ///<summary>
    ///  通过使用与物理调色板中的索引 1 相关联的颜色填充目标区域。
    ///  （此颜色为默认的物理调色板的白色。
    ///</summary>
    Whiteness = 16711778;
    ///<summary>
    ///  包括彼此层叠于您的窗口顶部的 windows 在生成的图像。
    ///  默认情况下，映像将包含您的窗口。
    ///  请注意，这通常不能用于打印设备上下文。
    ///</summary>
    CaptureBlt = 1073741824;
    ///<summary>
    ///  未镜像该位图。
    ///</summary>
    NoMirrorBitmap = -2147483648;
  end;


  //-------------namespace: System.Drawing.Design----------------
  ///<summary>
  ///  指定用于指示值编辑样式的标识符 <see cref="T:System.Drawing.Design.UITypeEditor" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.Design.UITypeEditorEditStyle')]
  DNUITypeEditorEditStyle = type Integer;
  DNUITypeEditorEditStyleHelper = record helper for DNUITypeEditorEditStyle
  public const
    ///<summary>
    ///  不提供任何交互式用户界面 (UI) 组件。
    ///</summary>
    None = 1;
    ///<summary>
    ///  显示一个省略号 （...） 按钮以启动模式对话框中，才能继续程序需要用户输入或无模式对话框中，将停留在屏幕上并可用于在任何时候，但它允许用户执行其他活动。
    ///</summary>
    Modal = 2;
    ///<summary>
    ///  显示的下拉箭头按钮，并在下拉列表的对话框中承载用户界面 (UI)。
    ///</summary>
    DropDown = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定如何不同的剪辑区域可以组合。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CombineMode')]
  DNCombineMode = type Integer;
  DNCombineModeHelper = record helper for DNCombineMode
  public const
    ///<summary>
    ///  另一种将替换为一个剪辑区域。
    ///</summary>
    Replace = 0;
    ///<summary>
    ///  通过采用它们的交集组合两个剪辑区域。
    ///</summary>
    Intersect = 1;
    ///<summary>
    ///  通过采用这两者的 union 组合两个剪辑区域。
    ///</summary>
    Union = 2;
    ///<summary>
    ///  两个剪辑区域是组合采取相应的区域括起，一项或在其他区域中，但不是能同时。
    ///</summary>
    Xor_ = 3;
    ///<summary>
    ///  指定正在从现有的区域中删除的新区域的结果替换为现有区域。
    ///  换言之，从现有区域中排除的新区域。
    ///</summary>
    Exclude = 4;
    ///<summary>
    ///  指定正在从新的区域中删除现有区域的结果替换为现有区域。
    ///  换言之，从新区域中排除现有的区域。
    ///</summary>
    Complement = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定源颜色与背景色进行组合的方式。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingMode')]
  DNCompositingMode = type Integer;
  DNCompositingModeHelper = record helper for DNCompositingMode
  public const
    ///<summary>
    ///  指定的一种颜色呈现时，它与混合的背景色。
    ///  Blend 取决于所呈现的颜色的 alpha 分量。
    ///</summary>
    SourceOver = 0;
    ///<summary>
    ///  指定一种颜色呈现时，它将覆盖背景色。
    ///</summary>
    SourceCopy = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定要在复合期间使用的质量级别。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingQuality')]
  DNCompositingQuality = type Integer;
  DNCompositingQualityHelper = record helper for DNCompositingQuality
  public const
    ///<summary>
    ///  默认的质量。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  高速度、 低质量。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  高质量、 低速度复合。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  使用灰度校正。
    ///</summary>
    GammaCorrected = 3;
    ///<summary>
    ///  假定线性值。
    ///</summary>
    AssumeLinear = 4;
    ///<summary>
    ///  无效的质量。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定要评估坐标时使用的系统。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CoordinateSpace')]
  DNCoordinateSpace = type Integer;
  DNCoordinateSpaceHelper = record helper for DNCoordinateSpace
  public const
    ///<summary>
    ///  指定坐标世界坐标上下文中。
    ///  在建模环境之类的非物理环境中使用世界坐标。
    ///</summary>
    World = 0;
    ///<summary>
    ///  指定坐标在页坐标上下文中。
    ///  通过定义其单元 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性，并且必须是元素之一 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举。
    ///</summary>
    Page = 1;
    ///<summary>
    ///  指定设备坐标上下文中的坐标。
    ///  在计算机屏幕设备上坐标通常以像素为单位测量。
    ///</summary>
    Device = 2;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的图形形状的每个短划线虚线中在两端使用的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.DashCap')]
  DNDashCap = type Integer;
  DNDashCapHelper = record helper for DNDashCap
  public const
    ///<summary>
    ///  指定的每个短划线的两端均方形端帽。
    ///</summary>
    Flat = 0;
    ///<summary>
    ///  指定的每个短划线两端均将舍入为循环帽。
    ///</summary>
    Round = 2;
    ///<summary>
    ///  指定的每个短划线两端均为三角帽。
    ///</summary>
    Triangle = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定与绘制的虚线的样式 <see cref="T:System.Drawing.Pen" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.DashStyle')]
  DNDashStyle = type Integer;
  DNDashStyleHelper = record helper for DNDashStyle
  public const
    ///<summary>
    ///  指定一条实线。
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  指定包含短划线的行。
    ///</summary>
    Dash = 1;
    ///<summary>
    ///  指定由点构成的行。
    ///</summary>
    Dot = 2;
    ///<summary>
    ///  指定包含重复的点划线图案的行。
    ///</summary>
    DashDot = 3;
    ///<summary>
    ///  指定包含重复的短划线-点点图案的行。
    ///</summary>
    DashDotDot = 4;
    ///<summary>
    ///  指定用户定义自定义的短划线样式。
    ///</summary>
    Custom = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定如何填充封闭路径的内部。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.FillMode')]
  DNFillMode = type Integer;
  DNFillModeHelper = record helper for DNFillMode
  public const
    ///<summary>
    ///  指定备用填充模式。
    ///</summary>
    Alternate = 0;
    ///<summary>
    ///  指定环绕的填充模式。
    ///</summary>
    Winding = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定是否 （刷新），立即终止图形堆栈中的命令或尽可能快地执行。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.FlushIntention')]
  DNFlushIntention = type Integer;
  DNFlushIntentionHelper = record helper for DNFlushIntention
  public const
    ///<summary>
    ///  指定的所有图形操作堆栈立即刷新。
    ///</summary>
    Flush = 0;
    ///<summary>
    ///  指定在堆栈上的所有图形操作都执行越早越好。
    ///  这会同步图形状态。
    ///</summary>
    Sync = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定可用于不同的模式 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.HatchStyle')]
  DNHatchStyle = type Integer;
  DNHatchStyleHelper = record helper for DNHatchStyle
  public const
    ///<summary>
    ///  水平线的图案。
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  指定阴影样式 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  。
    ///</summary>
    Min = 0;
    ///<summary>
    ///  竖线，线的模式。
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  中的行从左上角到右下的对角模式。
    ///</summary>
    ForwardDiagonal = 2;
    ///<summary>
    ///  中的行从右上向左下的对角模式。
    ///</summary>
    BackwardDiagonal = 3;
    ///<summary>
    ///  指定交叉的水平和垂直线条。
    ///</summary>
    Cross = 4;
    ///<summary>
    ///  指定的阴影样式 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Cross" />
    ///  。
    ///</summary>
    LargeGrid = 4;
    ///<summary>
    ///  指定阴影样式 <see cref="F:System.Drawing.Drawing2D.HatchStyle.SolidDiamond" />
    ///  。
    ///</summary>
    Max = 4;
    ///<summary>
    ///  交叉对角线的模式。
    ///</summary>
    DiagonalCross = 5;
    ///<summary>
    ///  指定 5%阴影。
    ///  前景颜色与背景色比率为 5: 95。
    ///</summary>
    Percent05 = 6;
    ///<summary>
    ///  指定 10%阴影。
    ///  前景颜色与背景色比例为 10:90。
    ///</summary>
    Percent10 = 7;
    ///<summary>
    ///  指定 20%阴影。
    ///  前景颜色与背景色比例为 20: 80。
    ///</summary>
    Percent20 = 8;
    ///<summary>
    ///  指定 25%阴影。
    ///  前景颜色与背景色比例为 25: 75。
    ///</summary>
    Percent25 = 9;
    ///<summary>
    ///  指定 30%阴影。
    ///  前景颜色与背景色比例为 30: 70。
    ///</summary>
    Percent30 = 10;
    ///<summary>
    ///  指定 40%阴影。
    ///  前景颜色与背景色比例为 40: 60。
    ///</summary>
    Percent40 = 11;
    ///<summary>
    ///  指定 50%阴影。
    ///  前景颜色与背景色比例为 50: 50。
    ///</summary>
    Percent50 = 12;
    ///<summary>
    ///  指定 60%阴影。
    ///  前景颜色与背景色比例为 60: 40。
    ///</summary>
    Percent60 = 13;
    ///<summary>
    ///  指定 70%阴影。
    ///  前景颜色与背景色比例为 70: 30。
    ///</summary>
    Percent70 = 14;
    ///<summary>
    ///  指定 75%阴影。
    ///  前景颜色与背景色比例为 75: 25。
    ///</summary>
    Percent75 = 15;
    ///<summary>
    ///  指定 80%阴影。
    ///  前景颜色与背景色比例为 80: 100。
    ///</summary>
    Percent80 = 16;
    ///<summary>
    ///  指定 90%阴影。
    ///  前景颜色与背景色比例为 90:10。
    ///</summary>
    Percent90 = 17;
    ///<summary>
    ///  指定对角线向右倾斜从顶点到底点，它们是分布 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  , ，但不是消除锯齿。
    ///</summary>
    LightDownwardDiagonal = 18;
    ///<summary>
    ///  指定对角线向左倾斜从顶点到底点，它们是分布 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , ，但它们不是消除锯齿。
    ///</summary>
    LightUpwardDiagonal = 19;
    ///<summary>
    ///  指定的间隔从顶点到底点向右倾斜的对角线 50%比，并且是两次的宽度 <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  。
    ///  此阴影图案不是消除锯齿的。
    ///</summary>
    DarkDownwardDiagonal = 20;
    ///<summary>
    ///  指定的间隔从顶点到底点向左倾斜的对角线 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , ，和两次其宽度，但这些行不会消除锯齿。
    ///</summary>
    DarkUpwardDiagonal = 21;
    ///<summary>
    ///  指定从顶点到底点，具有相同间距与阴影样式向右倾斜的对角线 <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  , ，并且是其宽度的三倍，但不是消除锯齿。
    ///</summary>
    WideDownwardDiagonal = 22;
    ///<summary>
    ///  指定向左倾斜从顶点到底点，具有相同间距与阴影样式的对角线 <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , ，并且是其宽度的三倍，但不是消除锯齿。
    ///</summary>
    WideUpwardDiagonal = 23;
    ///<summary>
    ///  指定的竖线，线间距 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  。
    ///</summary>
    LightVertical = 24;
    ///<summary>
    ///  指定的水平线条间距 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  。
    ///</summary>
    LightHorizontal = 25;
    ///<summary>
    ///  指定竖线，线的间隔更接近 75%一起比阴影样式 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  (或 25%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.LightVertical" />
    ///  )。
    ///</summary>
    NarrowVertical = 26;
    ///<summary>
    ///  指定水平线的两边间距 75%阴影样式比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  (或 25%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.LightHorizontal" />
    ///  )。
    ///</summary>
    NarrowHorizontal = 27;
    ///<summary>
    ///  指定的竖线，线间距 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  ，并且是两次其宽度。
    ///</summary>
    DarkVertical = 28;
    ///<summary>
    ///  指定的水平线条间距 50%比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  ，并且是两次的宽度 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  。
    ///</summary>
    DarkHorizontal = 29;
    ///<summary>
    ///  指定对角虚线，表示从顶点到底点向右倾斜。
    ///</summary>
    DashedDownwardDiagonal = 30;
    ///<summary>
    ///  指定对角虚线，表示从顶点到底点向左倾斜。
    ///</summary>
    DashedUpwardDiagonal = 31;
    ///<summary>
    ///  指定水平的虚线。
    ///</summary>
    DashedHorizontal = 32;
    ///<summary>
    ///  指定垂直虚线。
    ///</summary>
    DashedVertical = 33;
    ///<summary>
    ///  指定具有外观的纸屑阴影。
    ///</summary>
    SmallConfetti = 34;
    ///<summary>
    ///  指定阴影的外观纸屑，并由组成比更大的片 <see cref="F:System.Drawing.Drawing2D.HatchStyle.SmallConfetti" />
    ///  。
    ///</summary>
    LargeConfetti = 35;
    ///<summary>
    ///  指定构成的水平线的水平线条。
    ///</summary>
    ZigZag = 36;
    ///<summary>
    ///  指定组成颚化符的水平线条。
    ///</summary>
    Wave = 37;
    ///<summary>
    ///  指定具有向左倾斜从到底点的顶点的分层砖块外观的阴影。
    ///</summary>
    DiagonalBrick = 38;
    ///<summary>
    ///  指定阴影的水平分层程序块的外观。
    ///</summary>
    HorizontalBrick = 39;
    ///<summary>
    ///  指定阴影织物的外观。
    ///</summary>
    Weave = 40;
    ///<summary>
    ///  指定阴影方格花纹材料的外观。
    ///</summary>
    Plaid = 41;
    ///<summary>
    ///  指定阴影草皮层的外观。
    ///</summary>
    Divot = 42;
    ///<summary>
    ///  指定水平和垂直线条，其中每个由点，跨越。
    ///</summary>
    DottedGrid = 43;
    ///<summary>
    ///  指定的正向对角线和反向对角线，其中每个由点，跨越。
    ///</summary>
    DottedDiamond = 44;
    ///<summary>
    ///  指定阴影向右倾斜从到底点的顶点的对角分层鹅卵石的外观。
    ///</summary>
    Shingle = 45;
    ///<summary>
    ///  指定具有外观的棚架阴影。
    ///</summary>
    Trellis = 46;
    ///<summary>
    ///  指定具有的外观球形阴影彼此相邻放置。
    ///</summary>
    Sphere = 47;
    ///<summary>
    ///  指定水平和垂直线条跨，它们是分布更近 50%阴影样式比 <see cref="F:System.Drawing.Drawing2D.HatchStyle.Cross" />
    ///  。
    ///</summary>
    SmallGrid = 48;
    ///<summary>
    ///  指定具有的外观呈现为棋盘阴影。
    ///</summary>
    SmallCheckerBoard = 49;
    ///<summary>
    ///  指定具有的外观与方块的大小的两倍的棋盘阴影 <see cref="F:System.Drawing.Drawing2D.HatchStyle.SmallCheckerBoard" />
    ///  。
    ///</summary>
    LargeCheckerBoard = 50;
    ///<summary>
    ///  指定的正向对角线和反向对角线跨但不消除锯齿的。
    ///</summary>
    OutlinedDiamond = 51;
    ///<summary>
    ///  指定具有外观的对角放置的棋盘阴影。
    ///</summary>
    SolidDiamond = 52;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary><see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
  ///  枚举指定的图像是缩放或旋转时使用的算法。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.InterpolationMode')]
  DNInterpolationMode = type Integer;
  DNInterpolationModeHelper = record helper for DNInterpolationMode
  public const
    ///<summary>
    ///  指定默认模式。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定低质量内插。
    ///</summary>
    Low = 1;
    ///<summary>
    ///  指定高质量内插。
    ///</summary>
    High = 2;
    ///<summary>
    ///  指定双线性内插。
    ///  进行任何预筛选。
    ///  此模式不适用于图像收缩为其原始大小的 50%以下。
    ///</summary>
    Bilinear = 3;
    ///<summary>
    ///  指定两次立方插值。
    ///  进行任何预筛选。
    ///  此模式不适用于图像收缩为其原始大小的 25%以下。
    ///</summary>
    Bicubic = 4;
    ///<summary>
    ///  指定最近邻域内插。
    ///</summary>
    NearestNeighbor = 5;
    ///<summary>
    ///  指定高质量、 双线性内插。
    ///  执行预筛选功能以确保高质量的收缩。
    ///</summary>
    HighQualityBilinear = 6;
    ///<summary>
    ///  指定高质量、 两次立方插值。
    ///  执行预筛选功能以确保高质量的收缩。
    ///  此模式可产生最高的质量转换图像。
    ///</summary>
    HighQualityBicubic = 7;
    ///<summary>
    ///  等效于 <see cref="F:System.Drawing.Drawing2D.QualityMode.Invalid" />
    ///  元素 <see cref="T:System.Drawing.Drawing2D.QualityMode" />
    ///  枚举。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的线性渐变的方向。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.LinearGradientMode')]
  DNLinearGradientMode = type Integer;
  DNLinearGradientModeHelper = record helper for DNLinearGradientMode
  public const
    ///<summary>
    ///  指定从左到右的渐变。
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  指定从上到下的渐变。
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  指定从左上到右下的渐变。
    ///</summary>
    ForwardDiagonal = 2;
    ///<summary>
    ///  指定从右上到左下的渐变。
    ///</summary>
    BackwardDiagonal = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定可用的线帽样式与其 <see cref="T:System.Drawing.Pen" />
  ///  对象可以用于行尾。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.LineCap')]
  DNLineCap = type Integer;
  DNLineCapHelper = record helper for DNLineCap
  public const
    ///<summary>
    ///  指定平面的线帽。
    ///</summary>
    Flat = 0;
    ///<summary>
    ///  指定正方形的线帽。
    ///</summary>
    Square = 1;
    ///<summary>
    ///  指定倒圆角的线帽。
    ///</summary>
    Round = 2;
    ///<summary>
    ///  指定三角形的线帽。
    ///</summary>
    Triangle = 3;
    ///<summary>
    ///  指定任何定位点。
    ///</summary>
    NoAnchor = 16;
    ///<summary>
    ///  指定方形定位点线帽。
    ///</summary>
    SquareAnchor = 17;
    ///<summary>
    ///  指定倒圆角的定位点端。
    ///</summary>
    RoundAnchor = 18;
    ///<summary>
    ///  指定菱形定位点端。
    ///</summary>
    DiamondAnchor = 19;
    ///<summary>
    ///  指定箭头状定位点端。
    ///</summary>
    ArrowAnchor = 20;
    ///<summary>
    ///  指定用于检查线帽是否为定位点端的掩码。
    ///</summary>
    AnchorMask = 240;
    ///<summary>
    ///  指定自定义线帽。
    ///</summary>
    Custom = 255;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定如何联接连续直线或曲线的段的图 （子路径） 中包含 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.LineJoin')]
  DNLineJoin = type Integer;
  DNLineJoinHelper = record helper for DNLineJoin
  public const
    ///<summary>
    ///  指定斜接的联接。
    ///  这将生成尖锐的角或裁剪后的角，具体取决于是否斜接的长度超过斜角限制。
    ///</summary>
    Miter = 0;
    ///<summary>
    ///  指定凹凸效果的联接。
    ///  这将产生斜向的角。
    ///</summary>
    Bevel = 1;
    ///<summary>
    ///  指定循环联接。
    ///  这将产生在行间平滑的圆弧。
    ///</summary>
    Round = 2;
    ///<summary>
    ///  指定斜接的联接。
    ///  这将产生尖锐的角或斜角，具体取决于是否斜接的长度超过斜角限制。
    ///</summary>
    MiterClipped = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定矩阵的转换操作的顺序。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.MatrixOrder')]
  DNMatrixOrder = type Integer;
  DNMatrixOrderHelper = record helper for DNMatrixOrder
  public const
    ///<summary>
    ///  在旧操作前将应用新的操作。
    ///</summary>
    Prepend = 0;
    ///<summary>
    ///  在旧操作后将应用新的操作。
    ///</summary>
    Append = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定类型的中点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathPointType')]
  DNPathPointType = type Integer;
  DNPathPointTypeHelper = record helper for DNPathPointType
  public const
    ///<summary>
    ///  起始点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象。
    ///</summary>
    Start = 0;
    ///<summary>
    ///  一条线段。
    ///</summary>
    Line = 1;
    ///<summary>
    ///  默认贝塞尔曲线。
    ///</summary>
    Bezier = 3;
    ///<summary>
    ///  三次贝塞尔曲线。
    ///</summary>
    Bezier3 = 3;
    ///<summary>
    ///  遮盖点。
    ///</summary>
    PathTypeMask = 7;
    ///<summary>
    ///  相应的分段为虚线。
    ///</summary>
    DashMode = 16;
    ///<summary>
    ///  路径标记。
    ///</summary>
    PathMarker = 32;
    ///<summary>
    ///  子路径的终结点。
    ///</summary>
    CloseSubpath = 128;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的对齐方式 <see cref="T:System.Drawing.Pen" />
  ///  对象相对于的理论的宽度为零行。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PenAlignment')]
  DNPenAlignment = type Integer;
  DNPenAlignmentHelper = record helper for DNPenAlignment
  public const
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.Pen" />
    ///  对象居中理论的线条。
    ///</summary>
    Center = 0;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.Pen" />
    ///  定位在内部的理论的线条上。
    ///</summary>
    Inset = 1;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.Pen" />
    ///  位于外部的理论的线条。
    ///</summary>
    Outset = 2;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.Pen" />
    ///  位于左侧的理论的线条。
    ///</summary>
    Left = 3;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.Pen" />
    ///  位于右侧的理论的线条。
    ///</summary>
    Right = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的填充类型 <see cref="T:System.Drawing.Pen" />
  ///  对象用来填充直线。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PenType')]
  DNPenType = type Integer;
  DNPenTypeHelper = record helper for DNPenType
  public const
    ///<summary>
    ///  指定纯色填充。
    ///</summary>
    SolidColor = 0;
    ///<summary>
    ///  指定阴影填充。
    ///</summary>
    HatchFill = 1;
    ///<summary>
    ///  指定位图纹理填充。
    ///</summary>
    TextureFill = 2;
    ///<summary>
    ///  指定路径渐变填充。
    ///</summary>
    PathGradient = 3;
    ///<summary>
    ///  指定线性渐变填充。
    ///</summary>
    LinearGradient = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定在呈现过程中如何偏移像素为单位。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PixelOffsetMode')]
  DNPixelOffsetMode = type Integer;
  DNPixelOffsetModeHelper = record helper for DNPixelOffsetMode
  public const
    ///<summary>
    ///  指定的默认模式。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定高速度、 低质量呈现。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  指定高质量、 低速度呈现。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  指定没有像素偏移量。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指定像素偏移-.5 个单元，表示水平和垂直两个高速抗锯齿的。
    ///</summary>
    Half = 4;
    ///<summary>
    ///  指定无效的模式。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  在呈现 GDI + 对象时指定的总体质量。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.QualityMode')]
  DNQualityMode = type Integer;
  DNQualityModeHelper = record helper for DNQualityMode
  public const
    ///<summary>
    ///  指定的默认模式。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定低质量、 高速度呈现。
    ///</summary>
    Low = 1;
    ///<summary>
    ///  指定高质量、 低速度呈现。
    ///</summary>
    High = 2;
    ///<summary>
    ///  指定无效的模式。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定是否将平滑 （抗锯齿） 应用于直线、 曲线和已填充区域边缘。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.SmoothingMode')]
  DNSmoothingMode = type Integer;
  DNSmoothingModeHelper = record helper for DNSmoothingMode
  public const
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    HighSpeed = 1;
    ///<summary>
    ///  指定消除锯齿的呈现。
    ///</summary>
    HighQuality = 2;
    ///<summary>
    ///  指定未抗锯齿。
    ///</summary>
    None = 3;
    ///<summary>
    ///  指定消除锯齿的呈现。
    ///</summary>
    AntiAlias = 4;
    ///<summary>
    ///  指定无效的模式。
    ///</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定的类型中应用的 warp 变换 <see cref="Overload:System.Drawing.Drawing2D.GraphicsPath.Warp" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.WarpMode')]
  DNWarpMode = type Integer;
  DNWarpModeHelper = record helper for DNWarpMode
  public const
    ///<summary>
    ///  指定透视的扭曲。
    ///</summary>
    Perspective = 0;
    ///<summary>
    ///  指定一种双线性变形。
    ///</summary>
    Bilinear = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>
  ///  指定纹理或渐变平铺小于所填充的区域时。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.WrapMode')]
  DNWrapMode = type Integer;
  DNWrapModeHelper = record helper for DNWrapMode
  public const
    ///<summary>
    ///  平铺渐变或纹理。
    ///</summary>
    Tile = 0;
    ///<summary>
    ///  水平方向将反转纹理或渐变，并将它们平铺纹理或渐变。
    ///</summary>
    TileFlipX = 1;
    ///<summary>
    ///  垂直方向将反转纹理或渐变，并将它们平铺纹理或渐变。
    ///</summary>
    TileFlipY = 2;
    ///<summary>
    ///  水平和垂直方向将反转纹理或渐变，并将它们平铺纹理或渐变。
    ///</summary>
    TileFlipXY = 3;
    ///<summary>
    ///  纹理或渐变没有平铺。
    ///</summary>
    Clamp = 4;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定应用于文本的样式信息。
  ///</summary>
  [DNTypeName('System.Drawing.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    ///<summary>
    ///  普通文本。
    ///</summary>
    Regular = 0;
    ///<summary>
    ///  显示为粗体文本。
    ///</summary>
    Bold = 1;
    ///<summary>
    ///  斜体文本。
    ///</summary>
    Italic = 2;
    ///<summary>
    ///  带下划线的文本。
    ///</summary>
    Underline = 4;
    ///<summary>
    ///  有一条线穿过中部的文本。
    ///</summary>
    Strikeout = 8;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定给定的数据的度量值的单位。
  ///</summary>
  [DNTypeName('System.Drawing.GraphicsUnit')]
  DNGraphicsUnit = type Integer;
  DNGraphicsUnitHelper = record helper for DNGraphicsUnit
  public const
    ///<summary>
    ///  世界坐标系单位指定为度量单位。
    ///</summary>
    World = 0;
    ///<summary>
    ///  指定显示设备的度量的单位。
    ///  通常为视频显示器和打印机的 1/100 英寸像素。
    ///</summary>
    Display = 1;
    ///<summary>
    ///  指定设备像素为度量单位。
    ///</summary>
    Pixel = 2;
    ///<summary>
    ///  作为度量单位指定打印机的点 （1/72 英寸）。
    ///</summary>
    Point = 3;
    ///<summary>
    ///  指定的度量单位为英寸。
    ///</summary>
    Inch = 4;
    ///<summary>
    ///  文档单位 （1/300 英寸） 指定为度量单位。
    ///</summary>
    Document = 5;
    ///<summary>
    ///  指定的度量单位为毫米。
    ///</summary>
    Millimeter = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定的 GDI + 对象使用的颜色调整信息。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorAdjustType')]
  DNColorAdjustType = type Integer;
  DNColorAdjustTypeHelper = record helper for DNColorAdjustType
  public const
    ///<summary>
    ///  由所有 GDI + 对象不具有其自己的颜色调整信息使用的颜色调整信息。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  颜色调整信息 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</summary>
    Bitmap = 1;
    ///<summary>
    ///  颜色调整信息 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    Brush = 2;
    ///<summary>
    ///  颜色调整信息 <see cref="T:System.Drawing.Pen" />
    ///  对象。
    ///</summary>
    Pen = 3;
    ///<summary>
    ///  文本的颜色调整信息。
    ///</summary>
    Text = 4;
    ///<summary>
    ///  指定的类型的数目。
    ///</summary>
    Count = 5;
    ///<summary>
    ///  指定的类型的数目。
    ///</summary>
    Any = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定在 CMYK （青、 品红、 黄色、 黑色） 颜色空间中的各个通道。
  ///  此枚举由 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetOutputChannel" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorChannelFlag')]
  DNColorChannelFlag = type Integer;
  DNColorChannelFlagHelper = record helper for DNColorChannelFlag
  public const
    ///<summary>
    ///  青色通道中。
    ///</summary>
    ColorChannelC = 0;
    ///<summary>
    ///  洋红色通道中。
    ///</summary>
    ColorChannelM = 1;
    ///<summary>
    ///  黄色通道中。
    ///</summary>
    ColorChannelY = 2;
    ///<summary>
    ///  黑色通道中。
    ///</summary>
    ColorChannelK = 3;
    ///<summary>
    ///  应使用上次选择的通道。
    ///</summary>
    ColorChannelLast = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定的颜色映射的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMapType')]
  DNColorMapType = type Integer;
  DNColorMapTypeHelper = record helper for DNColorMapType
  public const
    ///<summary>
    ///  默认的颜色映射。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定的颜色映射 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</summary>
    Brush = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定类型的图像和颜色的颜色和灰度调整设置将影响 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMatrixFlag')]
  DNColorMatrixFlag = type Integer;
  DNColorMatrixFlagHelper = record helper for DNColorMatrixFlag
  public const
    ///<summary>
    ///  所有颜色值，包括灰色阴影均由相同的颜色调整矩阵进行都调整。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  调整所有颜色，但不是都调整灰色底纹。
    ///  灰色阴影是具有相同的值及其红色、 绿色和蓝色组件的任何颜色。
    ///</summary>
    SkipGrays = 1;
    ///<summary>
    ///  仅调整灰度。
    ///</summary>
    AltGrays = 2;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定颜色分量值的两种模式。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMode')]
  DNColorMode = type Integer;
  DNColorModeHelper = record helper for DNColorMode
  public const
    ///<summary>
    ///  提供的整数值是 32 位值。
    ///</summary>
    Argb32Mode = 0;
    ///<summary>
    ///  提供的整数值是 64 位值。
    ///</summary>
    Argb64Mode = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  使用图元文件来读取和写入图形命令中指定为使用提供的方法。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EmfPlusRecordType')]
  DNEmfPlusRecordType = type Integer;
  DNEmfPlusRecordTypeHelper = record helper for DNEmfPlusRecordType
  public const
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfMin = 1;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfHeader = 1;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyBezier = 2;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolygon = 3;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyline = 4;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyBezierTo = 5;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyLineTo = 6;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyPolyline = 7;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyPolygon = 8;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetWindowExtEx = 9;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetWindowOrgEx = 10;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetViewportExtEx = 11;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetViewportOrgEx = 12;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetBrushOrgEx = 13;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfEof = 14;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetPixelV = 15;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetMapperFlags = 16;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetMapMode = 17;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetBkMode = 18;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetPolyFillMode = 19;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetROP2 = 20;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetStretchBltMode = 21;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetTextAlign = 22;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetColorAdjustment = 23;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetTextColor = 24;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetBkColor = 25;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfOffsetClipRgn = 26;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfMoveToEx = 27;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetMetaRgn = 28;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExcludeClipRect = 29;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfIntersectClipRect = 30;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfScaleViewportExtEx = 31;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfScaleWindowExtEx = 32;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSaveDC = 33;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfRestoreDC = 34;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetWorldTransform = 35;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfModifyWorldTransform = 36;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSelectObject = 37;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreatePen = 38;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreateBrushIndirect = 39;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfDeleteObject = 40;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfAngleArc = 41;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfEllipse = 42;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfRectangle = 43;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfRoundRect = 44;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfRoundArc = 45;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfChord = 46;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPie = 47;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSelectPalette = 48;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreatePalette = 49;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetPaletteEntries = 50;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfResizePalette = 51;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfRealizePalette = 52;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtFloodFill = 53;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfLineTo = 54;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfArcTo = 55;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyDraw = 56;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetArcDirection = 57;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetMiterLimit = 58;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfBeginPath = 59;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfEndPath = 60;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCloseFigure = 61;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfFillPath = 62;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfStrokeAndFillPath = 63;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfStrokePath = 64;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfFlattenPath = 65;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfWidenPath = 66;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSelectClipPath = 67;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfAbortPath = 68;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfReserved069 = 69;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfGdiComment = 70;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfFillRgn = 71;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfFrameRgn = 72;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfInvertRgn = 73;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPaintRgn = 74;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtSelectClipRgn = 75;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfBitBlt = 76;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfStretchBlt = 77;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfMaskBlt = 78;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPlgBlt = 79;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetDIBitsToDevice = 80;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfStretchDIBits = 81;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtCreateFontIndirect = 82;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtTextOutA = 83;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtTextOutW = 84;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyBezier16 = 85;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolygon16 = 86;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyline16 = 87;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyBezierTo16 = 88;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolylineTo16 = 89;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyPolyline16 = 90;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyPolygon16 = 91;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyDraw16 = 92;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreateMonoBrush = 93;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreateDibPatternBrushPt = 94;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtCreatePen = 95;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyTextOutA = 96;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPolyTextOutW = 97;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetIcmMode = 98;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreateColorSpace = 99;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetColorSpace = 100;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfDeleteColorSpace = 101;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfGlsRecord = 102;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfGlsBoundedRecord = 103;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPixelFormat = 104;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfDrawEscape = 105;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfExtEscape = 106;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfStartDoc = 107;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSmallTextOut = 108;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfForceUfiMapping = 109;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfNamedEscpae = 110;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfColorCorrectPalette = 111;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetIcmProfileA = 112;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetIcmProfileW = 113;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfAlphaBlend = 114;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetLayout = 115;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfTransparentBlt = 116;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfReserved117 = 117;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfGradientFill = 118;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetLinkedUfis = 119;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfSetTextJustification = 120;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfColorMatchToTargetW = 121;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfCreateColorSpaceW = 122;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfMax = 122;
    ///<summary>
    ///  表示无效的数据。
    ///</summary>
    Invalid = 16384;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"增强型格式元文件"。
    ///</summary>
    EmfPlusRecordBase = 16384;
    ///<summary>
    ///  标识一条记录的 EMF + 标头。
    ///</summary>
    Header = 16385;
    ///<summary>
    ///  此枚举最小值。
    ///</summary>
    Min = 16385;
    ///<summary>
    ///  标识将标记图元文件的最后一个 EMF + 个记录一条记录。
    ///</summary>
    EndOfFile = 16386;
    ///<summary>
    ///  请参阅 <see cref="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
    ///  。
    ///</summary>
    Comment = 16387;
    ///<summary>
    ///  请参阅 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  。
    ///</summary>
    GetDC = 16388;
    ///<summary>
    ///  将多个格式区域的开始标记。
    ///</summary>
    MultiFormatStart = 16389;
    ///<summary>
    ///  将多个格式节标记。
    ///</summary>
    MultiFormatSection = 16390;
    ///<summary>
    ///  将多个格式节的结尾处的标记。
    ///</summary>
    MultiFormatEnd = 16391;
    ///<summary>
    ///  标记对象。
    ///</summary>
    Object_ = 16392;
    ///<summary>
    ///  请参阅 <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
    ///  。
    ///</summary>
    Clear = 16393;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.FillRectangles" />
    ///  方法。
    ///</summary>
    FillRects = 16394;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawRectangles" />
    ///  方法。
    ///</summary>
    DrawRects = 16395;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.FillPolygon" />
    ///  方法。
    ///</summary>
    FillPolygon = 16396;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawLines" />
    ///  方法。
    ///</summary>
    DrawLines = 16397;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.FillEllipse" />
    ///  方法。
    ///</summary>
    FillEllipse = 16398;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawEllipse" />
    ///  方法。
    ///</summary>
    DrawEllipse = 16399;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.FillPie" />
    ///  方法。
    ///</summary>
    FillPie = 16400;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawPie" />
    ///  方法。
    ///</summary>
    DrawPie = 16401;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawArc" />
    ///  方法。
    ///</summary>
    DrawArc = 16402;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
    ///  。
    ///</summary>
    FillRegion = 16403;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
    ///  。
    ///</summary>
    FillPath = 16404;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
    ///  。
    ///</summary>
    DrawPath = 16405;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.FillClosedCurve" />
    ///  方法。
    ///</summary>
    FillClosedCurve = 16406;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawClosedCurve" />
    ///  方法。
    ///</summary>
    DrawClosedCurve = 16407;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawCurve" />
    ///  方法。
    ///</summary>
    DrawCurve = 16408;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawBeziers" />
    ///  方法。
    ///</summary>
    DrawBeziers = 16409;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  方法。
    ///</summary>
    DrawImage = 16410;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  方法。
    ///</summary>
    DrawImagePoints = 16411;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.DrawString" />
    ///  方法。
    ///</summary>
    DrawString = 16412;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.RenderingOrigin" />
    ///  。
    ///</summary>
    SetRenderingOrigin = 16413;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.SmoothingMode" />
    ///  。
    ///</summary>
    SetAntiAliasMode = 16414;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.TextRenderingHint" />
    ///  。
    ///</summary>
    SetTextRenderingHint = 16415;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.TextContrast" />
    ///  。
    ///</summary>
    SetTextContrast = 16416;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.InterpolationMode" />
    ///  。
    ///</summary>
    SetInterpolationMode = 16417;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.PixelOffsetMode" />
    ///  。
    ///</summary>
    SetPixelOffsetMode = 16418;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.CompositingMode" />
    ///  。
    ///</summary>
    SetCompositingMode = 16419;
    ///<summary>
    ///  请参阅<see cref="P:System.Drawing.Graphics.CompositingQuality" />
    ///  。
    ///</summary>
    SetCompositingQuality = 16420;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.Save" />
    ///  。
    ///</summary>
    Save = 16421;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
    ///  。
    ///</summary>
    Restore = 16422;
    ///<summary>
    ///  请参阅 <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  方法。
    ///</summary>
    BeginContainer = 16423;
    ///<summary>
    ///  请参阅 <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  方法。
    ///</summary>
    BeginContainerNoParams = 16424;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
    ///  。
    ///</summary>
    EndContainer = 16425;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  方法。
    ///</summary>
    SetWorldTransform = 16426;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.ResetTransform" />
    ///  。
    ///</summary>
    ResetWorldTransform = 16427;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.MultiplyTransform" />
    ///  方法。
    ///</summary>
    MultiplyWorldTransform = 16428;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  方法。
    ///</summary>
    TranslateWorldTransform = 16429;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.ScaleTransform" />
    ///  方法。
    ///</summary>
    ScaleWorldTransform = 16430;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.RotateTransform" />
    ///  方法。
    ///</summary>
    RotateWorldTransform = 16431;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  方法。
    ///</summary>
    SetPageTransform = 16432;
    ///<summary>
    ///  请参阅<see cref="M:System.Drawing.Graphics.ResetClip" />
    ///  。
    ///</summary>
    ResetClip = 16433;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  方法。
    ///</summary>
    SetClipRect = 16434;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  方法。
    ///</summary>
    SetClipPath = 16435;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  方法。
    ///</summary>
    SetClipRegion = 16436;
    ///<summary>
    ///  请参阅 <see cref="Overload:System.Drawing.Graphics.TranslateClip" />
    ///  方法。
    ///</summary>
    OffsetClip = 16437;
    ///<summary>
    ///  此枚举的最大值。
    ///</summary>
    Max = 16438;
    ///<summary>
    ///  指定一个字符的字符串、 位置和格式设置信息。
    ///</summary>
    DrawDriverString = 16438;
    ///<summary>
    ///  在内部使用。
    ///</summary>
    Total = 16439;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfRecordBase = 65536;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSaveDC = 65566;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfRealizePalette = 65589;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetPalEntries = 65591;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreatePalette = 65783;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetBkMode = 65794;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetMapMode = 65795;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetROP2 = 65796;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetRelAbs = 65797;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetPolyFillMode = 65798;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetStretchBltMode = 65799;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetTextCharExtra = 65800;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfRestoreDC = 65831;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfInvertRegion = 65834;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPaintRegion = 65835;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSelectClipRegion = 65836;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSelectObject = 65837;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetTextAlign = 65838;
    ///<summary>
    ///  增大或减小逻辑调色板基于指定的值的大小。
    ///</summary>
    WmfResizePalette = 65849;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfDibCreatePatternBrush = 65858;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetLayout = 65865;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfDeleteObject = 66032;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreatePatternBrush = 66041;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetBkColor = 66049;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetTextColor = 66057;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetTextJustification = 66058;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetWindowOrg = 66059;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetWindowExt = 66060;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetViewportOrg = 66061;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetViewportExt = 66062;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfOffsetWindowOrg = 66063;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfOffsetViewportOrg = 66065;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfLineTo = 66067;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfMoveTo = 66068;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfOffsetCilpRgn = 66080;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfFillRegion = 66088;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetMapperFlags = 66097;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSelectPalette = 66100;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreatePenIndirect = 66298;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreateFontIndirect = 66299;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreateBrushIndirect = 66300;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPolygon = 66340;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPolyline = 66341;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfScaleWindowExt = 66576;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfScaleViewportExt = 66578;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfExcludeClipRect = 66581;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfIntersectClipRect = 66582;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfEllipse = 66584;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfFloodFill = 66585;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfRectangle = 66587;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetPixel = 66591;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfFrameRegion = 66601;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfAnimatePalette = 66614;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfTextOut = 66849;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPolyPolygon = 66872;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfExtFloodFill = 66888;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfRoundRect = 67100;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPatBlt = 67101;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfEscape = 67110;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfCreateRegion = 67327;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfArc = 67607;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfPie = 67610;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfChord = 67632;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfBitBlt = 67874;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfDibBitBlt = 67904;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfExtTextOut = 68146;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfStretchBlt = 68387;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfDibStretchBlt = 68417;
    ///<summary>
    ///  请参阅 MSDN Library 的 GDI 部分中的"Windows 格式元文件"。
    ///</summary>
    WmfSetDibToDev = 68915;
    ///<summary>
    ///  将像素组成的矩形的颜色数据 DIB 内一个复制到指定的目标矩形。
    ///</summary>
    WmfStretchDib = 69443;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定放置在增强型图元文件 (EMF) 文件的记录的性质。
  ///  此枚举由几个构造函数中 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EmfType')]
  DNEmfType = type Integer;
  DNEmfTypeHelper = record helper for DNEmfType
  public const
    ///<summary>
    ///  指定将 EMF 记录，这可以通过 GDI 或 GDI + 显示图元文件中的所有记录。
    ///</summary>
    EmfOnly = 3;
    ///<summary>
    ///  指定将 EMF + 记录，这可以通过 GDI +，但不是能通过 GDI 显示图元文件中的所有记录。
    ///</summary>
    EmfPlusOnly = 4;
    ///<summary>
    ///  指定所有 EMF + 记录在图元文件中的替换的 EMF 记录相关联。
    ///  类型的图元文件 <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />
    ///  通过 GDI 或 GDI + 可以显示。
    ///</summary>
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  用于指定的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  用于 <see cref="Overload:System.Drawing.Image.Save" />
  ///  或 <see cref="Overload:System.Drawing.Image.SaveAdd" />
  ///  图像的方法。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameterValueType')]
  DNEncoderParameterValueType = type Integer;
  DNEncoderParameterValueTypeHelper = record helper for DNEncoderParameterValueType
  public const
    ///<summary>
    ///  指定数组中的每个值是一个 8 位无符号的整数。
    ///</summary>
    ValueTypeByte = 1;
    ///<summary>
    ///  指定的值的数组是以 null 结尾的 ASCII 字符字符串。
    ///  请注意， <see langword="NumberOfValues" />
    ///  数据成员的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象指示包括 NULL 终止符的字符字符串的长度。
    ///</summary>
    ValueTypeAscii = 2;
    ///<summary>
    ///  指定数组中的每个值是 16 位无符号整数。
    ///</summary>
    ValueTypeShort = 3;
    ///<summary>
    ///  指定数组中的每个值是 32 位无符号的整数。
    ///</summary>
    ValueTypeLong = 4;
    ///<summary>
    ///  指定数组中的每个值是一对 32 位无符号整数。
    ///  每个对都表示一小部分、 第一个整数是分子和第二个整数是分母。
    ///</summary>
    ValueTypeRational = 5;
    ///<summary>
    ///  指定数组中的每个值是一对 32 位无符号整数。
    ///  每一对表示数字的范围。
    ///</summary>
    ValueTypeLongRange = 6;
    ///<summary>
    ///  指定的值的数组是不没有定义任何数据类型的字节数组。
    ///</summary>
    ValueTypeUndefined = 7;
    ///<summary>
    ///  指定数组中的每个值是一套四个，32 位无符号整数。
    ///  前两个整数表示一个分数，而两个整数表示秒的小数部分。
    ///  这两个分数表示有理数一个范围。
    ///  第一个分数是在范围内，最小的有理数，秒的小数部分是在范围内的最大 rational 编号。
    ///</summary>
    ValueTypeRationalRange = 8;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  用于指定在使用时，参数值传递给一个 JPEG 或 TIFF 图像编码器 <see cref="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)" />
  ///  或 <see cref="M:System.Drawing.Image.SaveAdd(System.Drawing.Imaging.EncoderParameters)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderValue')]
  DNEncoderValue = type Integer;
  DNEncoderValueHelper = record helper for DNEncoderValue
  public const
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    ColorTypeCMYK = 0;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    ColorTypeYCCK = 1;
    ///<summary>
    ///  指定 LZW 压缩方案。
    ///  可以作为参数属于压缩类别传递到 TIFF 编码器。
    ///</summary>
    CompressionLZW = 2;
    ///<summary>
    ///  指定 CCITT3 压缩方案。
    ///  可以作为参数属于压缩类别传递到 TIFF 编码器。
    ///</summary>
    CompressionCCITT3 = 3;
    ///<summary>
    ///  指定 CCITT4 压缩方案。
    ///  可以作为参数属于压缩类别传递到 TIFF 编码器。
    ///</summary>
    CompressionCCITT4 = 4;
    ///<summary>
    ///  指定的角色压缩方案。
    ///  可以作为参数属于压缩类别传递到 TIFF 编码器。
    ///</summary>
    CompressionRle = 5;
    ///<summary>
    ///  指定无压缩。
    ///  可以作为参数属于压缩类别传递到 TIFF 编码器。
    ///</summary>
    CompressionNone = 6;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    ScanMethodInterlaced = 7;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    ScanMethodNonInterlaced = 8;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    VersionGif87 = 9;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    VersionGif89 = 10;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    RenderProgressive = 11;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    RenderNonProgressive = 12;
    ///<summary>
    ///  指定图像要将围绕中心旋转顺时针旋转 90 度。
    ///  可以作为转换类别所属的参数传递到 JPEG 编码器。
    ///</summary>
    TransformRotate90 = 13;
    ///<summary>
    ///  指定要将围绕中心旋转 180 度图像。
    ///  可以作为转换类别所属的参数传递到 JPEG 编码器。
    ///</summary>
    TransformRotate180 = 14;
    ///<summary>
    ///  指定图像要围绕其中心旋转顺时针旋转 270 度。
    ///  可以作为转换类别所属的参数传递到 JPEG 编码器。
    ///</summary>
    TransformRotate270 = 15;
    ///<summary>
    ///  指定要 （围绕垂直轴） 水平翻转图像。
    ///  可以作为转换类别所属的参数传递到 JPEG 编码器。
    ///</summary>
    TransformFlipHorizontal = 16;
    ///<summary>
    ///  指定该图像是翻转垂直 （绕水平轴）。
    ///  可以作为转换类别所属的参数传递到 JPEG 编码器。
    ///</summary>
    TransformFlipVertical = 17;
    ///<summary>
    ///  指定该图像具有多个帧 （页）。
    ///  可以传递到 TIFF 编码器作为一个参数，它属于保存标志类别。
    ///</summary>
    MultiFrame = 18;
    ///<summary>
    ///  指定在将多帧图像中的最后一帧。
    ///  可以传递到 TIFF 编码器作为一个参数，它属于保存标志类别。
    ///</summary>
    LastFrame = 19;
    ///<summary>
    ///  指定应关闭多个帧文件或流。
    ///  可以传递到 TIFF 编码器作为一个参数，它属于保存标志类别。
    ///</summary>
    Flush = 20;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    FrameDimensionTime = 21;
    ///<summary>
    ///  在 GDI + 1.0 版中未使用。
    ///</summary>
    FrameDimensionResolution = 22;
    ///<summary>
    ///  指定要添加到页面维度的图像的框架。
    ///  可以传递到 TIFF 编码器作为一个参数，它属于保存标志类别。
    ///</summary>
    FrameDimensionPage = 23;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  提供图像编码器/解码器 （编码解码器） 的属性。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageCodecFlags')]
  DNImageCodecFlags = type Integer;
  DNImageCodecFlagsHelper = record helper for DNImageCodecFlags
  public const
    ///<summary>
    ///  编解码器支持编码 （保存）。
    ///</summary>
    Encoder = 1;
    ///<summary>
    ///  编解码器支持解码 （读取）。
    ///</summary>
    Decoder = 2;
    ///<summary>
    ///  编解码器支持光栅图像 （位图）。
    ///</summary>
    SupportBitmap = 4;
    ///<summary>
    ///  编解码器支持矢量图像 （图元文件）。
    ///</summary>
    SupportVector = 8;
    ///<summary>
    ///  编码器需要可查找的输出流。
    ///</summary>
    SeekableEncode = 16;
    ///<summary>
    ///  解码器有在解码过程阻塞行为。
    ///</summary>
    BlockingDecode = 32;
    ///<summary>
    ///  编解码器内置在 GDI +。
    ///</summary>
    Builtin = 65536;
    ///<summary>
    ///  未使用。
    ///</summary>
    System = 131072;
    ///<summary>
    ///  未使用。
    ///</summary>
    User = 262144;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定的属性中包含的像素数据 <see cref="T:System.Drawing.Image" />
  ///  对象。
  ///<see cref="P:System.Drawing.Image.Flags" />
  ///  属性将返回此枚举的成员。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageFlags')]
  DNImageFlags = type Integer;
  DNImageFlagsHelper = record helper for DNImageFlags
  public const
    ///<summary>
    ///  没有格式的信息。
    ///</summary>
    None = 0;
    ///<summary>
    ///  像素数据是可扩展的。
    ///</summary>
    Scalable = 1;
    ///<summary>
    ///  像素数据包含 alpha 信息。
    ///</summary>
    HasAlpha = 2;
    ///<summary>
    ///  指定的像素数据的 alpha 值不为 0 （透明） 到 255 （不透明）。
    ///</summary>
    HasTranslucent = 4;
    ///<summary>
    ///  像素数据具有部分可伸缩性，但有一些限制。
    ///</summary>
    PartiallyScalable = 8;
    ///<summary>
    ///  像素数据使用 RGB 颜色空间。
    ///</summary>
    ColorSpaceRgb = 16;
    ///<summary>
    ///  像素数据使用 CMYK 颜色空间。
    ///</summary>
    ColorSpaceCmyk = 32;
    ///<summary>
    ///  像素数据为灰度。
    ///</summary>
    ColorSpaceGray = 64;
    ///<summary>
    ///  指定图像的存储使用 YCBCR 色彩空间。
    ///</summary>
    ColorSpaceYcbcr = 128;
    ///<summary>
    ///  指定使用 YCCK 颜色空间来存储图像。
    ///</summary>
    ColorSpaceYcck = 256;
    ///<summary>
    ///  指定每英寸点数信息存储在映像中。
    ///</summary>
    HasRealDpi = 4096;
    ///<summary>
    ///  指定像素大小存储在映像中。
    ///</summary>
    HasRealPixelSize = 8192;
    ///<summary>
    ///  像素数据是只读的。
    ///</summary>
    ReadOnly = 65536;
    ///<summary>
    ///  像素数据可以被缓存以提高访问速度。
    ///</summary>
    Caching = 131072;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定传递给标志参数的标志 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  方法。
  ///<see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  方法锁定图像的一部分，以便您可以读取或写入像素的数据。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageLockMode')]
  DNImageLockMode = type Integer;
  DNImageLockModeHelper = record helper for DNImageLockMode
  public const
    ///<summary>
    ///  指定图像的一部分被锁定以进行读取。
    ///</summary>
    ReadOnly = 1;
    ///<summary>
    ///  指定图像的一部分被锁定以进行写入。
    ///</summary>
    WriteOnly_ = 2;
    ///<summary>
    ///  指定用于读取或写入锁定的图像的一部分。
    ///</summary>
    ReadWrite = 3;
    ///<summary>
    ///  指定用户分配用于读取或写入像素数据的缓冲区。
    ///  如果设置此标志， <paramref name="flags" />
    ///  参数 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
    ///  方法为提供每年作为输入参数 （可能为输出参数）。
    ///  如果清除此标志，则 <paramref name="flags" />
    ///  参数仅充当输出参数。
    ///</summary>
    UserInputBuffer = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定用来调整大小和位置图元文件的矩形的度量单位。
  ///  这在创建过程中指定 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileFrameUnit')]
  DNMetafileFrameUnit = type Integer;
  DNMetafileFrameUnitHelper = record helper for DNMetafileFrameUnit
  public const
    ///<summary>
    ///  度量单位为 1 个像素。
    ///</summary>
    Pixel = 2;
    ///<summary>
    ///  度量单位是 1 打印机的点。
    ///</summary>
    Point = 3;
    ///<summary>
    ///  度量单位为 1 英寸。
    ///</summary>
    Inch = 4;
    ///<summary>
    ///  度量单位为一英寸的 1/300。
    ///</summary>
    Document = 5;
    ///<summary>
    ///  度量单位为 1 毫米。
    ///</summary>
    Millimeter = 6;
    ///<summary>
    ///  度量单位是 0.01 毫米。
    ///  提供使用 GDI 的兼容性。
    ///</summary>
    GdiCompatible = 7;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定类型的图元文件。
  ///<see cref="P:System.Drawing.Imaging.MetafileHeader.Type" />
  ///  属性将返回此枚举的成员。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileType')]
  DNMetafileType = type Integer;
  DNMetafileTypeHelper = record helper for DNMetafileType
  public const
    ///<summary>
    ///  在 GDI + 中指定的图元文件格式无法识别。
    ///</summary>
    Invalid = 0;
    ///<summary>
    ///  指定的 WMF （Windows 图元文件） 文件。
    ///  此类文件只包含 GDI 记录。
    ///</summary>
    Wmf = 1;
    ///<summary>
    ///  指定具有可放置的图元文件标头之前的 WMF （Windows 图元文件） 文件。
    ///</summary>
    WmfPlaceable = 2;
    ///<summary>
    ///  指定的增强型图元文件 (EMF) 文件。
    ///  此类文件只包含 GDI 记录。
    ///</summary>
    Emf = 3;
    ///<summary>
    ///  指定的 EMF + 文件。
    ///  此类文件只包含 GDI + 记录，必须通过使用 GDI + 显示。
    ///  显示使用 GDI 的记录可能会导致不可预知的结果。
    ///</summary>
    EmfPlusOnly = 4;
    ///<summary>
    ///  指定的 EMF + 双重文件。
    ///  此类文件包含 GDI + 以及备用 GDI 记录的记录，并且可以通过使用 GDI 或 GDI + 中显示。
    ///  显示使用 GDI 的记录可能会导致一些质量下降的情况。
    ///</summary>
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  系统调色板中指定颜色数据的类型。
  ///  数据可以是具有 alpha 通道，只将灰度数据或半色调数据的颜色数据。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.PaletteFlags')]
  DNPaletteFlags = type Integer;
  DNPaletteFlagsHelper = record helper for DNPaletteFlags
  public const
    ///<summary>
    ///  Alpha 数据。
    ///</summary>
    HasAlpha = 1;
    ///<summary>
    ///  灰度数据。
    ///</summary>
    GrayScale = 2;
    ///<summary>
    ///  半色调数据。
    ///</summary>
    Halftone = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>
  ///  指定图像中的每个像素的颜色数据格式。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.PixelFormat')]
  DNPixelFormat = type Integer;
  DNPixelFormatHelper = record helper for DNPixelFormat
  public const
    ///<summary>
    ///  指定没有像素格式。
    ///</summary>
    DontCare = 0;
    ///<summary>
    ///  像素格式未定义。
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  此枚举的最大值。
    ///</summary>
    Max = 15;
    ///<summary>
    ///  像素数据包含颜色索引值，这意味着这些值是在系统颜色表中，而不是各个颜色值的颜色的索引。
    ///</summary>
    Indexed = 65536;
    ///<summary>
    ///  像素数据包含 GDI 颜色。
    ///</summary>
    Gdi = 131072;
    ///<summary>
    ///  指定的格式是 16 位 / 像素;5 位用于红色、 绿色和蓝色组件。
    ///  不使用剩余的 1 位。
    ///</summary>
    Format16bppRgb555 = 135173;
    ///<summary>
    ///  指定的格式是 16 位 / 像素;5 位用于红色组件、 6 位用于绿色组件和 5 位用于蓝色分量。
    ///</summary>
    Format16bppRgb565 = 135174;
    ///<summary>
    ///  指定的格式是 24 位 / 像素;8 位用于红色、 绿色和蓝色组件。
    ///</summary>
    Format24bppRgb = 137224;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于红色、 绿色和蓝色组件。
    ///  不使用剩余的 8 位。
    ///</summary>
    Format32bppRgb = 139273;
    ///<summary>
    ///  指定的像素格式是每像素 1 位，它使用索引的颜色。
    ///  因此，颜色表中它有两种颜色。
    ///</summary>
    Format1bppIndexed = 196865;
    ///<summary>
    ///  指定的格式是 4 位 / 像素，编制索引。
    ///</summary>
    Format4bppIndexed = 197634;
    ///<summary>
    ///  指定的格式是 8 位 / 像素，编制索引。
    ///  因此，颜色表中它有 256 种颜色。
    ///</summary>
    Format8bppIndexed = 198659;
    ///<summary>
    ///  像素数据包含不自左乘的 alpha 值。
    ///</summary>
    Alpha = 262144;
    ///<summary>
    ///  像素格式是 16 位 / 像素。
    ///  颜色信息指定 32768 所属 5 位的红色、 5 位的颜色为绿色、 5 位为蓝色，和 1 的位是 alpha。
    ///</summary>
    Format16bppArgb1555 = 397319;
    ///<summary>
    ///  像素格式包含预乘 alpha 值。
    ///</summary>
    PAlpha = 524288;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于 alpha、 红色、 绿色和蓝色组件。
    ///  红色、 绿色和蓝色组件是根据 alpha 分量自左乘。
    ///</summary>
    Format32bppPArgb = 925707;
    ///<summary>
    ///  保留。
    ///</summary>
    Extended = 1048576;
    ///<summary>
    ///  像素格式是 16 位 / 像素。
    ///  颜色信息指定 65536 灰度梯度。
    ///</summary>
    Format16bppGrayScale = 1052676;
    ///<summary>
    ///  指定的格式是 48 位 / 像素;为红色、 绿色和蓝色组件使用 16 位。
    ///</summary>
    Format48bppRgb = 1060876;
    ///<summary>
    ///  指定的格式是每个像素; 64 位alpha、 红色、 绿色和蓝色组件使用 16 位。
    ///  红色、 绿色和蓝色组件进行自左乘的 alpha 分量根据。
    ///</summary>
    Format64bppPArgb = 1851406;
    ///<summary>
    ///  32 位 / 像素默认像素格式。
    ///  此格式指定 24 位颜色深度和一个 8 位 alpha 通道。
    ///</summary>
    Canonical = 2097152;
    ///<summary>
    ///  指定的格式是 32 位 / 像素;8 位用于 alpha、 红色、 绿色和蓝色组件。
    ///</summary>
    Format32bppArgb = 2498570;
    ///<summary>
    ///  指定的格式是每个像素; 64 位alpha、 红色、 绿色和蓝色组件使用 16 位。
    ///</summary>
    Format64bppArgb = 3424269;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定的已知的系统颜色。
  ///</summary>
  [DNTypeName('System.Drawing.KnownColor')]
  DNKnownColor = type Integer;
  DNKnownColorHelper = record helper for DNKnownColor
  public const
    ///<summary>
    ///  系统定义的活动窗口边框的颜色。
    ///</summary>
    ActiveBorder = 1;
    ///<summary>
    ///  系统定义的活动窗口标题栏背景的颜色。
    ///</summary>
    ActiveCaption = 2;
    ///<summary>
    ///  系统定义的活动窗口标题栏中文本的颜色。
    ///</summary>
    ActiveCaptionText = 3;
    ///<summary>
    ///  系统定义应用程序工作区的颜色。
    ///  应用程序工作区是不被文档占据的多个文档视图中的区域。
    ///</summary>
    AppWorkspace = 4;
    ///<summary>
    ///  三维元素的系统定义的表面颜色。
    ///</summary>
    Control = 5;
    ///<summary>
    ///  三维元素系统定义的阴影颜色。
    ///  阴影颜色适用于面向远离的光源的三维元素的部分。
    ///</summary>
    ControlDark = 6;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的暗阴影颜色。
    ///  暗阴影颜色应用于所最深的颜色的三维元素的部分中。
    ///</summary>
    ControlDarkDark = 7;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的亮色。
    ///  亮色适用于面向的光源的三维元素的部分。
    ///</summary>
    ControlLight = 8;
    ///<summary>
    ///  三维元素的系统定义的突出显示颜色。
    ///  突出显示颜色应用于所最亮色的三维元素的部分中。
    ///</summary>
    ControlLightLight = 9;
    ///<summary>
    ///  系统定义的三维元素中文本的颜色。
    ///</summary>
    ControlText = 10;
    ///<summary>
    ///  系统定义用作桌面颜色。
    ///</summary>
    Desktop = 11;
    ///<summary>
    ///  系统定义的浅灰色文本颜色。
    ///  列表中处于禁用状态的项将显示为浅灰色文本。
    ///</summary>
    GrayText = 12;
    ///<summary>
    ///  系统定义的选定项的背景颜色。
    ///  这包括所选的菜单项，以及所选的文本。
    ///</summary>
    Highlight = 13;
    ///<summary>
    ///  系统定义的选定项的文本颜色。
    ///</summary>
    HighlightText = 14;
    ///<summary>
    ///  用于指定热跟踪项的系统定义颜色。
    ///  右键单击热跟踪项执行项。
    ///</summary>
    HotTrack = 15;
    ///<summary>
    ///  系统定义非活动窗口边框的颜色。
    ///</summary>
    InactiveBorder = 16;
    ///<summary>
    ///  系统定义的非活动窗口标题栏背景的颜色。
    ///</summary>
    InactiveCaption = 17;
    ///<summary>
    ///  系统定义非活动窗口标题栏中文本的颜色。
    ///</summary>
    InactiveCaptionText = 18;
    ///<summary>
    ///  系统定义的工具提示的背景颜色。
    ///</summary>
    Info = 19;
    ///<summary>
    ///  系统定义的工具提示的文本颜色。
    ///</summary>
    InfoText = 20;
    ///<summary>
    ///  系统定义一个表示菜单背景的颜色。
    ///</summary>
    Menu = 21;
    ///<summary>
    ///  系统定义的一个表示菜单文本颜色。
    ///</summary>
    MenuText = 22;
    ///<summary>
    ///  系统定义的滚动条的背景颜色。
    ///</summary>
    ScrollBar = 23;
    ///<summary>
    ///  系统定义的一个窗口的工作区中的背景颜色。
    ///</summary>
    Window = 24;
    ///<summary>
    ///  系统定义窗口框架的颜色。
    ///</summary>
    WindowFrame = 25;
    ///<summary>
    ///  系统定义的一个窗口的工作区中文本的颜色。
    ///</summary>
    WindowText = 26;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Transparent = 27;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    AliceBlue = 28;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    AntiqueWhite = 29;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Aqua = 30;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Aquamarine = 31;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Azure = 32;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Beige = 33;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Bisque = 34;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Black = 35;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BlanchedAlmond = 36;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Blue = 37;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BlueViolet = 38;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Brown = 39;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    BurlyWood = 40;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    CadetBlue = 41;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Chartreuse = 42;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Chocolate = 43;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Coral = 44;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    CornflowerBlue = 45;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Cornsilk = 46;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Crimson = 47;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Cyan = 48;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkBlue = 49;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkCyan = 50;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGoldenrod = 51;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGray = 52;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkGreen = 53;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkKhaki = 54;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkMagenta = 55;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOliveGreen = 56;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOrange = 57;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkOrchid = 58;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkRed = 59;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSalmon = 60;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSeaGreen = 61;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSlateBlue = 62;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkSlateGray = 63;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkTurquoise = 64;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DarkViolet = 65;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DeepPink = 66;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DeepSkyBlue = 67;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DimGray = 68;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    DodgerBlue = 69;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Firebrick = 70;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    FloralWhite = 71;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    ForestGreen = 72;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Fuchsia = 73;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gainsboro = 74;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    GhostWhite = 75;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gold = 76;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Goldenrod = 77;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Gray = 78;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Green = 79;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    GreenYellow = 80;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Honeydew = 81;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    HotPink = 82;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    IndianRed = 83;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Indigo = 84;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Ivory = 85;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Khaki = 86;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Lavender = 87;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LavenderBlush = 88;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LawnGreen = 89;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LemonChiffon = 90;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightBlue = 91;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightCoral = 92;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightCyan = 93;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGoldenrodYellow = 94;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGray = 95;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightGreen = 96;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightPink = 97;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSalmon = 98;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSeaGreen = 99;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSkyBlue = 100;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSlateGray = 101;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightSteelBlue = 102;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LightYellow = 103;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Lime = 104;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    LimeGreen = 105;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Linen = 106;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Magenta = 107;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Maroon = 108;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumAquamarine = 109;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumBlue = 110;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumOrchid = 111;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumPurple = 112;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSeaGreen = 113;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSlateBlue = 114;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumSpringGreen = 115;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumTurquoise = 116;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MediumVioletRed = 117;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MidnightBlue = 118;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MintCream = 119;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    MistyRose = 120;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Moccasin = 121;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    NavajoWhite = 122;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Navy = 123;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OldLace = 124;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Olive = 125;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OliveDrab = 126;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Orange = 127;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    OrangeRed = 128;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Orchid = 129;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleGoldenrod = 130;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleGreen = 131;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleTurquoise = 132;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PaleVioletRed = 133;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PapayaWhip = 134;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PeachPuff = 135;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Peru = 136;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Pink = 137;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Plum = 138;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    PowderBlue = 139;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Purple = 140;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Red = 141;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    RosyBrown = 142;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    RoyalBlue = 143;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SaddleBrown = 144;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Salmon = 145;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SandyBrown = 146;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SeaGreen = 147;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SeaShell = 148;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Sienna = 149;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Silver = 150;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SkyBlue = 151;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SlateBlue = 152;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SlateGray = 153;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Snow = 154;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SpringGreen = 155;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    SteelBlue = 156;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Tan = 157;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Teal = 158;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Thistle = 159;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Tomato = 160;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Turquoise = 161;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Violet = 162;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Wheat = 163;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    White = 164;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    WhiteSmoke = 165;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    Yellow = 166;
    ///<summary>
    ///  系统定义的颜色。
    ///</summary>
    YellowGreen = 167;
    ///<summary>
    ///  三维元素的系统定义的表面颜色。
    ///</summary>
    ButtonFace = 168;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的突出显示颜色。
    ///  此颜色将应用于面向的光源的三维元素的部分。
    ///</summary>
    ButtonHighlight = 169;
    ///<summary>
    ///  系统定义的颜色，是一个三维元素的阴影颜色。
    ///  此颜色将应用于面向远离的光源的三维元素的部分。
    ///</summary>
    ButtonShadow = 170;
    ///<summary>
    ///  系统定义中的活动窗口标题栏的颜色渐变的最小颜色的颜色。
    ///</summary>
    GradientActiveCaption = 171;
    ///<summary>
    ///  系统定义中的非活动窗口标题栏的颜色渐变的最小颜色的颜色。
    ///</summary>
    GradientInactiveCaption = 172;
    ///<summary>
    ///  系统定义的菜单栏背景的颜色。
    ///</summary>
    MenuBar = 173;
    ///<summary>
    ///  用来在像平面菜单显示的菜单时突出显示菜单项的系统定义颜色。
    ///</summary>
    MenuHighlight = 174;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定打印机的双工设置。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.Duplex')]
  DNDuplex = type Integer;
  DNDuplexHelper = record helper for DNDuplex
  public const
    ///<summary>
    ///  单面打印。
    ///</summary>
    Simplex = 1;
    ///<summary>
    ///  双面垂直打印。
    ///</summary>
    Vertical = 2;
    ///<summary>
    ///  双面水平打印。
    ///</summary>
    Horizontal = 3;
    ///<summary>
    ///  打印机的默认双面打印设置。
    ///</summary>
    Default_ = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定标准纸张大小。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperKind')]
  DNPaperKind = type Integer;
  DNPaperKindHelper = record helper for DNPaperKind
  public const
    ///<summary>
    ///  纸张大小由用户定义。
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Letter 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    Letter = 1;
    ///<summary>
    ///  Letter small 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    LetterSmall = 2;
    ///<summary>
    ///  Tabloid 纸（11 英寸 × 17 英寸）。
    ///</summary>
    Tabloid = 3;
    ///<summary>
    ///  Ledger 纸（17 英寸 × 11 英寸）。
    ///</summary>
    Ledger = 4;
    ///<summary>
    ///  Legal 纸（8.5 英寸 × 14 英寸）。
    ///</summary>
    Legal = 5;
    ///<summary>
    ///  Statement 纸（5.5 英寸 × 8.5 英寸)。
    ///</summary>
    Statement = 6;
    ///<summary>
    ///  Executive 纸（7.25 英寸 × 10.5 英寸）。
    ///</summary>
    Executive = 7;
    ///<summary>
    ///  A3 纸（297 mm × 420 mm）。
    ///</summary>
    A3 = 8;
    ///<summary>
    ///  A4 纸（210 mm × 297 mm）。
    ///</summary>
    A4 = 9;
    ///<summary>
    ///  A4 small 纸（210 mm × 297 mm）。
    ///</summary>
    A4Small = 10;
    ///<summary>
    ///  A5 纸（148 mm × 210 mm）。
    ///</summary>
    A5 = 11;
    ///<summary>
    ///  B4 纸（250 mm × 353 mm）。
    ///</summary>
    B4 = 12;
    ///<summary>
    ///  B5 纸（176 mm × 250 mm）。
    ///</summary>
    B5 = 13;
    ///<summary>
    ///  对开纸（8.5 英寸 × 13 英寸）。
    ///</summary>
    Folio = 14;
    ///<summary>
    ///  四开纸（215 mm × 275 mm）。
    ///</summary>
    Quarto = 15;
    ///<summary>
    ///  Standard 纸（10 英寸 × 14 英寸）。
    ///</summary>
    Standard10x14 = 16;
    ///<summary>
    ///  Standard 纸（11 英寸 × 17 英寸）。
    ///</summary>
    Standard11x17 = 17;
    ///<summary>
    ///  Note 纸（8.5 英寸 × 11 英寸）。
    ///</summary>
    Note = 18;
    ///<summary>
    ///  #9 信封（3.875 英寸 × 8.875 英寸）。
    ///</summary>
    Number9Envelope = 19;
    ///<summary>
    ///  #10 信封（4.125 英寸 × 9.5 英寸）。
    ///</summary>
    Number10Envelope = 20;
    ///<summary>
    ///  #11 信封（4.5 英寸 × 10.375 英寸）。
    ///</summary>
    Number11Envelope = 21;
    ///<summary>
    ///  #12 信封（4.75 英寸 × 11 英寸）。
    ///</summary>
    Number12Envelope = 22;
    ///<summary>
    ///  #14 信封（5 英寸 × 11.5 英寸）。
    ///</summary>
    Number14Envelope = 23;
    ///<summary>
    ///  C 纸（17 英寸 × 22 英寸）。
    ///</summary>
    CSheet = 24;
    ///<summary>
    ///  D 纸（22 英寸 × 34 英寸）。
    ///</summary>
    DSheet = 25;
    ///<summary>
    ///  E 纸（34 英寸 × 44 英寸）。
    ///</summary>
    ESheet = 26;
    ///<summary>
    ///  DL 信封（110 mm × 220 mm）。
    ///</summary>
    DLEnvelope = 27;
    ///<summary>
    ///  C5 信封（162 mm × 229 mm）。
    ///</summary>
    C5Envelope = 28;
    ///<summary>
    ///  C3 信封（324 mm × 458 mm）。
    ///</summary>
    C3Envelope = 29;
    ///<summary>
    ///  C4 信封（229 mm × 324 mm）。
    ///</summary>
    C4Envelope = 30;
    ///<summary>
    ///  C6 信封（114 mm × 162 mm）。
    ///</summary>
    C6Envelope = 31;
    ///<summary>
    ///  C65 信封（114 mm × 229 mm）。
    ///</summary>
    C65Envelope = 32;
    ///<summary>
    ///  B4 信封（250 mm × 353 mm）。
    ///</summary>
    B4Envelope = 33;
    ///<summary>
    ///  B5 信封（176 mm × 250 mm）。
    ///</summary>
    B5Envelope = 34;
    ///<summary>
    ///  B6 信封（176 mm × 125 mm）。
    ///</summary>
    B6Envelope = 35;
    ///<summary>
    ///  意大利信封（110 mm × 230 mm）。
    ///</summary>
    ItalyEnvelope = 36;
    ///<summary>
    ///  君主式信封（3.875 英寸 × 7.5 英寸）。
    ///</summary>
    MonarchEnvelope = 37;
    ///<summary>
    ///  6 3/4 信封（3.625 英寸 × 6.5 英寸）。
    ///</summary>
    PersonalEnvelope = 38;
    ///<summary>
    ///  美国标准复写纸（14.875 英寸 × 11 英寸）。
    ///</summary>
    USStandardFanfold = 39;
    ///<summary>
    ///  德国标准复写纸（8.5 英寸 × 12 英寸）。
    ///</summary>
    GermanStandardFanfold = 40;
    ///<summary>
    ///  德国法律文书用复写纸（8.5 英寸 × 13 英寸）。
    ///</summary>
    GermanLegalFanfold = 41;
    ///<summary>
    ///  ISO B4（250 mm × 353 mm）。
    ///</summary>
    IsoB4 = 42;
    ///<summary>
    ///  Japanese postcard（100 mm × 148 mm）。
    ///</summary>
    JapanesePostcard = 43;
    ///<summary>
    ///  Standard 纸（9 英寸 × 11 英寸）。
    ///</summary>
    Standard9x11 = 44;
    ///<summary>
    ///  Standard 纸（10 英寸 × 11 英寸）。
    ///</summary>
    Standard10x11 = 45;
    ///<summary>
    ///  Standard 纸（15 英寸 × 11 英寸）。
    ///</summary>
    Standard15x11 = 46;
    ///<summary>
    ///  邀请信封（220 mm × 220 mm）。
    ///</summary>
    InviteEnvelope = 47;
    ///<summary>
    ///  Letter extra 纸（9.275 英寸 × 12 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    LetterExtra = 50;
    ///<summary>
    ///  Letter extra 纸（9.275 英寸 × 15 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    LegalExtra = 51;
    ///<summary>
    ///  Tabloid extra 纸（11.69 英寸 × 18 英寸）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用，以便节省纸张。
    ///</summary>
    TabloidExtra = 52;
    ///<summary>
    ///  A4 extra 纸（236 mm × 322 mm）。
    ///  此值特定于 PostScript 驱动程序，且仅由 Linotronic 打印机使用以帮助节省纸张。
    ///</summary>
    A4Extra = 53;
    ///<summary>
    ///  Letter transverse 纸（8.275 英寸 × 11 英寸）。
    ///</summary>
    LetterTransverse = 54;
    ///<summary>
    ///  A4 transverse 纸（210 mm × 297mm）。
    ///</summary>
    A4Transverse = 55;
    ///<summary>
    ///  Letter extra transverse 纸（9.275 英寸 × 12 英寸）。
    ///</summary>
    LetterExtraTransverse = 56;
    ///<summary>
    ///  SuperA/SuperA/A4 纸（227 mm × 356 mm）。
    ///</summary>
    APlus = 57;
    ///<summary>
    ///  SuperB/SuperB/A3 纸（305 mm × 487 mm）。
    ///</summary>
    BPlus = 58;
    ///<summary>
    ///  Letter plus 纸（8.5 英寸 × 12.69 英寸）。
    ///</summary>
    LetterPlus = 59;
    ///<summary>
    ///  A4 plus 纸（210 mm × 330 mm）。
    ///</summary>
    A4Plus = 60;
    ///<summary>
    ///  A5 transverse 纸（148 mm × 210 mm）。
    ///</summary>
    A5Transverse = 61;
    ///<summary>
    ///  JIS B5 transverse 纸（182 mm × 257 mm）。
    ///</summary>
    B5Transverse = 62;
    ///<summary>
    ///  A3 extra 纸（322 mm × 445 mm）。
    ///</summary>
    A3Extra = 63;
    ///<summary>
    ///  A5 extra 纸（174 mm × 235 mm）。
    ///</summary>
    A5Extra = 64;
    ///<summary>
    ///  ISO B5 extra 纸（201 mm × 276 mm）。
    ///</summary>
    B5Extra = 65;
    ///<summary>
    ///  A2 纸（420 mm × 594 mm）。
    ///</summary>
    A2 = 66;
    ///<summary>
    ///  A3 transverse 纸（297 mm × 420 mm）。
    ///</summary>
    A3Transverse = 67;
    ///<summary>
    ///  A3 extra transverse 纸（322 mm × 445 mm）。
    ///</summary>
    A3ExtraTransverse = 68;
    ///<summary>
    ///  Japanese double postcard（200 mm × 148 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseDoublePostcard = 69;
    ///<summary>
    ///  A6 纸（105 mm × 148 mm)。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A6 = 70;
    ///<summary>
    ///  Japanese Kaku #2 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber2 = 71;
    ///<summary>
    ///  Japanese Kaku #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber3 = 72;
    ///<summary>
    ///  Japanese Chou #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber3 = 73;
    ///<summary>
    ///  Japanese Chou #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber4 = 74;
    ///<summary>
    ///  Letter rotated 纸（11 英寸 × 8.5 英寸)。
    ///</summary>
    LetterRotated = 75;
    ///<summary>
    ///  A3 rotated 纸（420 mm × 297 mm）。
    ///</summary>
    A3Rotated = 76;
    ///<summary>
    ///  A4 rotated 纸（297 mm × 210 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A4Rotated = 77;
    ///<summary>
    ///  A5 rotated 纸（210 mm × 148 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A5Rotated = 78;
    ///<summary>
    ///  JIS B4 rotated 纸（364 mm × 257 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B4JisRotated = 79;
    ///<summary>
    ///  JIS B5 rotated 纸（257 mm × 182 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B5JisRotated = 80;
    ///<summary>
    ///  Japanese rotated postcard（148 mm × 100 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapanesePostcardRotated = 81;
    ///<summary>
    ///  Japanese rotated double postcard（148 mm × 200 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseDoublePostcardRotated = 82;
    ///<summary>
    ///  A6 rotated 纸（148 mm × 105 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    A6Rotated = 83;
    ///<summary>
    ///  Japanese rotated Kaku #2 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber2Rotated = 84;
    ///<summary>
    ///  Japanese rotated Kaku #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeKakuNumber3Rotated = 85;
    ///<summary>
    ///  Japanese rotated Chou #3 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber3Rotated = 86;
    ///<summary>
    ///  Japanese rotated Chou #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeChouNumber4Rotated = 87;
    ///<summary>
    ///  JIS B6 纸（128 mm × 182 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B6Jis = 88;
    ///<summary>
    ///  JIS B6 纸（182 mm × 128 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    B6JisRotated = 89;
    ///<summary>
    ///  Standard 纸（12 英寸 × 11 英寸）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Standard12x11 = 90;
    ///<summary>
    ///  Japanese You #4 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeYouNumber4 = 91;
    ///<summary>
    ///  Japanese You #4 rotated 信封。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    JapaneseEnvelopeYouNumber4Rotated = 92;
    ///<summary>
    ///  16K 纸（146 mm × 215 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc16K = 93;
    ///<summary>
    ///  32K 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32K = 94;
    ///<summary>
    ///  32K big 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KBig = 95;
    ///<summary>
    ///  #1 信封（102 mm × 165 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber1 = 96;
    ///<summary>
    ///  #2 信封（102 mm × 176 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber2 = 97;
    ///<summary>
    ///  #3 信封（125 mm × 176 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber3 = 98;
    ///<summary>
    ///  #4 信封（110 mm × 208 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber4 = 99;
    ///<summary>
    ///  #5 信封（110 mm × 220 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber5 = 100;
    ///<summary>
    ///  #6 信封（120 mm × 230 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber6 = 101;
    ///<summary>
    ///  #7 信封（160 mm × 230 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber7 = 102;
    ///<summary>
    ///  #8 信封（120 mm × 309 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber8 = 103;
    ///<summary>
    ///  #9 信封（229 mm × 324 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber9 = 104;
    ///<summary>
    ///  #10 信封（324 mm × 458 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber10 = 105;
    ///<summary>
    ///  16K rotated 纸（146 mm × 215 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc16KRotated = 106;
    ///<summary>
    ///  32K rotated 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KRotated = 107;
    ///<summary>
    ///  32K big rotated 纸（97 mm × 151 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    Prc32KBigRotated = 108;
    ///<summary>
    ///  #1 rotated 信封（165 mm × 102 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber1Rotated = 109;
    ///<summary>
    ///  #2 rotated 信封（176 mm × 102 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber2Rotated = 110;
    ///<summary>
    ///  #3 rotated 信封（176 mm × 125 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber3Rotated = 111;
    ///<summary>
    ///  #4 rotated 信封（208 mm × 110 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber4Rotated = 112;
    ///<summary>
    ///  Envelope #5 rotated 信封（220 mm × 110 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber5Rotated = 113;
    ///<summary>
    ///  #6 rotated 信封（230 mm × 120 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber6Rotated = 114;
    ///<summary>
    ///  #7 rotated 信封（230 mm × 160 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber7Rotated = 115;
    ///<summary>
    ///  #8 rotated 信封（309 mm × 120 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber8Rotated = 116;
    ///<summary>
    ///  #9 rotated 信封（324 mm × 229 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber9Rotated = 117;
    ///<summary>
    ///  #10 rotated 信封（458 mm × 324 mm）。
    ///  需要 Windows 98、Windows NT 4.0 或更高版本。
    ///</summary>
    PrcEnvelopeNumber10Rotated = 118;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  Standard 纸源。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSourceKind')]
  DNPaperSourceKind = type Integer;
  DNPaperSourceKindHelper = record helper for DNPaperSourceKind
  public const
    ///<summary>
    ///  上层纸盒打印机 （或默认中，如果打印机只有一个 bin）。
    ///</summary>
    Upper = 1;
    ///<summary>
    ///  打印机下层纸盒。
    ///</summary>
    Lower = 2;
    ///<summary>
    ///  打印机中间纸盒。
    ///</summary>
    Middle = 3;
    ///<summary>
    ///  以手动方式送入纸。
    ///</summary>
    Manual = 4;
    ///<summary>
    ///  信封。
    ///</summary>
    Envelope = 5;
    ///<summary>
    ///  以手动方式送入信封。
    ///</summary>
    ManualFeed = 6;
    ///<summary>
    ///  自动送入的纸张。
    ///</summary>
    AutomaticFeed = 7;
    ///<summary>
    ///  送纸器。
    ///</summary>
    TractorFeed = 8;
    ///<summary>
    ///  小型格式纸。
    ///</summary>
    SmallFormat = 9;
    ///<summary>
    ///  大格式纸。
    ///</summary>
    LargeFormat = 10;
    ///<summary>
    ///  打印机的大容量 bin。
    ///</summary>
    LargeCapacity = 11;
    ///<summary>
    ///  送纸器。
    ///</summary>
    Cassette = 14;
    ///<summary>
    ///  打印机的默认输入的 bin。
    ///</summary>
    FormSource = 15;
    ///<summary>
    ///  特定于打印机的纸张来源。
    ///</summary>
    Custom = 257;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定正在进行的打印操作的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintAction')]
  DNPrintAction = type Integer;
  DNPrintActionHelper = record helper for DNPrintAction
  public const
    ///<summary>
    ///  打印操作打印到文件。
    ///</summary>
    PrintToFile = 0;
    ///<summary>
    ///  打印操作为打印预览。
    ///</summary>
    PrintToPreview = 1;
    ///<summary>
    ///  打印操作打印到打印机。
    ///</summary>
    PrintToPrinter = 2;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定打印机分辨率。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterResolutionKind')]
  DNPrinterResolutionKind = type Integer;
  DNPrinterResolutionKindHelper = record helper for DNPrinterResolutionKind
  public const
    ///<summary>
    ///  自定义解决方法。
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  高分辨率。
    ///</summary>
    High = -4;
    ///<summary>
    ///  中等分辨率。
    ///</summary>
    Medium = -3;
    ///<summary>
    ///  较低的分辨率。
    ///</summary>
    Low = -2;
    ///<summary>
    ///  草稿质量分辨率。
    ///</summary>
    Draft = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定多个用于打印的度量单位。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterUnit')]
  DNPrinterUnit = type Integer;
  DNPrinterUnitHelper = record helper for DNPrinterUnit
  public const
    ///<summary>
    ///  默认单位 （0.01 英寸）。
    ///</summary>
    Display = 0;
    ///<summary>
    ///  一个千位的英寸 （0.001 英寸）。
    ///</summary>
    ThousandthsOfAnInch = 1;
    ///<summary>
    ///  百分之一毫米 （0.01 毫米）。
    ///</summary>
    HundredthsOfAMillimeter = 2;
    ///<summary>
    ///  十分之一毫米 （0.1 毫米）。
    ///</summary>
    TenthsOfAMillimeter = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定允许代码执行的打印的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermissionLevel')]
  DNPrintingPermissionLevel = type Integer;
  DNPrintingPermissionLevelHelper = record helper for DNPrintingPermissionLevel
  public const
    ///<summary>
    ///  禁止对打印机的访问。
    ///<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting" />
    ///  是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" />
    ///  的子集。
    ///</summary>
    NoPrinting = 0;
    ///<summary>
    ///  仅从受限制的对话框中提供打印。
    ///<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" />
    ///  是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" />
    ///  的子集。
    ///</summary>
    SafePrinting = 1;
    ///<summary>
    ///  提供以编程方式向默认打印机，以及通过半限制对话框安全打印的打印。
    ///<see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" />
    ///  是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" />
    ///  的子集。
    ///</summary>
    DefaultPrinting = 2;
    ///<summary>
    ///  提供对所有打印机的完全访问权限。
    ///</summary>
    AllPrinting = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>
  ///  指定要打印的文档的一部分。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintRange')]
  DNPrintRange = type Integer;
  DNPrintRangeHelper = record helper for DNPrintRange
  public const
    ///<summary>
    ///  打印所有页面。
    ///</summary>
    AllPages = 0;
    ///<summary>
    ///  打印选定的页。
    ///</summary>
    Selection = 1;
    ///<summary>
    ///  之间的页 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  和 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  打印。
    ///</summary>
    SomePages = 2;
    ///<summary>
    ///  打印当前显示的页面
    ///</summary>
    CurrentPage = 4194304;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定多少图像的旋转和翻转图像所用于的轴。
  ///</summary>
  [DNTypeName('System.Drawing.RotateFlipType')]
  DNRotateFlipType = type Integer;
  DNRotateFlipTypeHelper = record helper for DNRotateFlipType
  public const
    ///<summary>
    ///  指定后接水平和垂直的 180 度顺时针旋转翻转。
    ///</summary>
    Rotate180FlipXY = 0;
    ///<summary>
    ///  指定没有顺时针旋转和翻转。
    ///</summary>
    RotateNoneFlipNone = 0;
    ///<summary>
    ///  指定不进行翻转顺时针旋转 90 度。
    ///</summary>
    Rotate90FlipNone = 1;
    ///<summary>
    ///  指定后接水平和垂直的 270 度顺时针旋转翻转。
    ///</summary>
    Rotate270FlipXY = 1;
    ///<summary>
    ///  指定不进行翻转 180 度的顺时针旋转。
    ///</summary>
    Rotate180FlipNone = 2;
    ///<summary>
    ///  指定没有顺时针旋转后接水平和垂直翻转。
    ///</summary>
    RotateNoneFlipXY = 2;
    ///<summary>
    ///  指定不进行翻转顺时针旋转 270 度。
    ///</summary>
    Rotate270FlipNone = 3;
    ///<summary>
    ///  指定旋转 90 度顺时针旋转后接水平和垂直翻转。
    ///</summary>
    Rotate90FlipXY = 3;
    ///<summary>
    ///  指定没有跟水平翻转的顺时针旋转。
    ///</summary>
    RotateNoneFlipX = 4;
    ///<summary>
    ///  指定垂直翻转后跟 180 度顺时针旋转。
    ///</summary>
    Rotate180FlipY = 4;
    ///<summary>
    ///  指定后接水平翻转的 90 度的顺时针旋转。
    ///</summary>
    Rotate90FlipX = 5;
    ///<summary>
    ///  指定垂直翻转后跟的 270 度顺时针旋转。
    ///</summary>
    Rotate270FlipY = 5;
    ///<summary>
    ///  指定后接水平翻转的 180 度顺时针旋转。
    ///</summary>
    Rotate180FlipX = 6;
    ///<summary>
    ///  指定垂直翻转后跟没有顺时针旋转。
    ///</summary>
    RotateNoneFlipY = 6;
    ///<summary>
    ///  指定后接水平翻转的 270 度顺时针旋转。
    ///</summary>
    Rotate270FlipX = 7;
    ///<summary>
    ///  指定垂直翻转后跟 90 度顺时针旋转。
    ///</summary>
    Rotate90FlipY = 7;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定相对于其布局矩形的文本字符串的对齐方式。
  ///</summary>
  [DNTypeName('System.Drawing.StringAlignment')]
  DNStringAlignment = type Integer;
  DNStringAlignmentHelper = record helper for DNStringAlignment
  public const
    ///<summary>
    ///  指定文本对齐靠近布局。
    ///  在从左到右布局中，保留近的位置。
    ///  在从右到左布局中，近的位置是右。
    ///</summary>
    Near_ = 0;
    ///<summary>
    ///  指定文本在布局矩形的中心对齐。
    ///</summary>
    Center = 1;
    ///<summary>
    ///  指定文本对齐与相差甚远的布局矩形的来源位置。
    ///  在从左到右布局中，远的位置是右。
    ///  在从右到左布局中，保留远的位置。
    ///</summary>
    Far_ = 2;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary><see cref="T:System.Drawing.StringDigitSubstitute" />
  ///  枚举指定如何替代根据用户的区域设置或语言字符串中的数字。
  ///</summary>
  [DNTypeName('System.Drawing.StringDigitSubstitute')]
  DNStringDigitSubstitute = type Integer;
  DNStringDigitSubstituteHelper = record helper for DNStringDigitSubstitute
  public const
    ///<summary>
    ///  指定用户定义的替代方案。
    ///</summary>
    User = 0;
    ///<summary>
    ///  指定要禁用替换项。
    ///</summary>
    None = 1;
    ///<summary>
    ///  指定与用户的区域设置的正式国家/地区语言对应的替换数字。
    ///</summary>
    National = 2;
    ///<summary>
    ///  指定与用户的本机脚本相对应的替换数字或语言中，这可能是不同于用户的区域设置的官方国家/地区的语言。
    ///</summary>
    Traditional = 3;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定文本字符串的显示和布局的信息。
  ///</summary>
  [DNTypeName('System.Drawing.StringFormatFlags')]
  DNStringFormatFlags = type Integer;
  DNStringFormatFlagsHelper = record helper for DNStringFormatFlags
  public const
    ///<summary>
    ///  从右到左显示文本。
    ///</summary>
    DirectionRightToLeft = 1;
    ///<summary>
    ///  垂直对齐文本。
    ///</summary>
    DirectionVertical = 2;
    ///<summary>
    ///  允许的字符部分延伸字符串的布局矩形。
    ///  默认情况下，将重新定位字符以避免任何延伸。
    ///</summary>
    FitBlackBox = 4;
    ///<summary>
    ///  控制字符，如从左到右标记并具有代表性的标志符号输出所示。
    ///</summary>
    DisplayFormatControl = 32;
    ///<summary>
    ///  回退到不支持请求的字体中的字符的可选字体处于禁用状态。
    ///  使用缺少符号，通常是一个空的方块的字体显示缺失的任何字符。
    ///</summary>
    NoFontFallback = 1024;
    ///<summary>
    ///  包括每个行的结尾处的尾随空格。
    ///  默认情况下返回的边界矩形 <see cref="Overload:System.Drawing.Graphics.MeasureString" />
    ///  方法不包括每个行的结尾处的空格。
    ///  设置此标志，以包括该空间的度量单位。
    ///</summary>
    MeasureTrailingSpaces = 2048;
    ///<summary>
    ///  文本换行时禁用格式设置的矩形范围内。
    ///  当传递的是点而不是一个矩形，或指定的矩形具有行长度为零，则暗指此标志。
    ///</summary>
    NoWrap = 4096;
    ///<summary>
    ///  只有整个行的布局的格式设置的矩形中。
    ///  默认情况下布局会继续，直到的末尾的文本，或直到没有更多的行由于剪辑，具体取决于第一个可见。
    ///  请注意，默认设置允许最后一行以部分而不是行高度的整数倍的格式设置矩形变暗。
    ///  若要确保显示整行，则指定此值，并小心地将其提供格式化矩形的高度至少为一个行的高度。
    ///</summary>
    LineLimit = 8192;
    ///<summary>
    ///  允许的标志符号和解包换行文本格式设置矩形外伸出部分显示。
    ///  默认情况下将剪切到达边框外的所有文本和字形部分。
    ///</summary>
    NoClip = 16384;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定如何修整字符串不完全适合布局形状中的字符。
  ///</summary>
  [DNTypeName('System.Drawing.StringTrimming')]
  DNStringTrimming = type Integer;
  DNStringTrimmingHelper = record helper for DNStringTrimming
  public const
    ///<summary>
    ///  指定不进行任何修整。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定将文本修整到最接近的字符。
    ///</summary>
    Character = 1;
    ///<summary>
    ///  指定文本则剪裁为最接近的单词。
    ///</summary>
    Word = 2;
    ///<summary>
    ///  指定将文本修整到最接近的字符，并且在被修整的行的末尾插入一个省略号。
    ///</summary>
    EllipsisCharacter = 3;
    ///<summary>
    ///  指定文本则剪裁为最接近的单词，并在被修整的行的末尾插入一个省略号。
    ///</summary>
    EllipsisWord = 4;
    ///<summary>
    ///  从修整行中删除中心并将其替换为省略号。
    ///  该算法会保留尽可能多的最后一个斜杠分隔的段的可能的行。
    ///</summary>
    EllipsisPath = 5;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  指定的文本字符串的度量值的单位。
  ///</summary>
  [DNTypeName('System.Drawing.StringUnit')]
  DNStringUnit = type Integer;
  DNStringUnitHelper = record helper for DNStringUnit
  public const
    ///<summary>
    ///  指定作为度量单位的世界单位。
    ///</summary>
    World = 0;
    ///<summary>
    ///  设备单位指定为度量单位。
    ///</summary>
    Display = 1;
    ///<summary>
    ///  指定的度量单位为像素。
    ///</summary>
    Pixel = 2;
    ///<summary>
    ///  作为度量单位指定打印机的点 （1/72 英寸）。
    ///</summary>
    Point = 3;
    ///<summary>
    ///  指定的度量单位为英寸。
    ///</summary>
    Inch = 4;
    ///<summary>
    ///  指定作为度量单位 1/300 英寸。
    ///</summary>
    Document = 5;
    ///<summary>
    ///  指定的度量单位为毫米为单位
    ///</summary>
    Millimeter = 6;
    ///<summary>
    ///  指定作为度量单位的打印机的全身大小为 32。
    ///</summary>
    Em = 32;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>
  ///  指定泛型 <see cref="T:System.Drawing.FontFamily" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Text.GenericFontFamilies')]
  DNGenericFontFamilies = type Integer;
  DNGenericFontFamiliesHelper = record helper for DNGenericFontFamilies
  public const
    ///<summary>
    ///  一般 Serif <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    Serif = 0;
    ///<summary>
    ///  一般 Sans Serif <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    SansSerif = 1;
    ///<summary>
    ///  一般 Monospace <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    Monospace = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>
  ///  指定显示的热键前缀与文本相关的类型。
  ///</summary>
  [DNTypeName('System.Drawing.Text.HotkeyPrefix')]
  DNHotkeyPrefix = type Integer;
  DNHotkeyPrefixHelper = record helper for DNHotkeyPrefix
  public const
    ///<summary>
    ///  任何热键的前缀。
    ///</summary>
    None = 0;
    ///<summary>
    ///  显示热键前缀。
    ///</summary>
    Show = 1;
    ///<summary>
    ///  不显示热键前缀。
    ///</summary>
    Hide = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>
  ///  指定文本呈现质量。
  ///</summary>
  [DNTypeName('System.Drawing.Text.TextRenderingHint')]
  DNTextRenderingHint = type Integer;
  DNTextRenderingHintHelper = record helper for DNTextRenderingHint
  public const
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号，使用系统默认呈现提示。
    ///  将使用在用户已经选择任何字体平滑显示的设置的系统绘制文本。
    ///</summary>
    SystemDefault = 0;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号。
    ///  提示用于改善在主干和弯曲字符外观。
    ///</summary>
    SingleBitPerPixelGridFit = 1;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号。
    ///  不使用提示。
    ///</summary>
    SingleBitPerPixel = 2;
    ///<summary>
    ///  在有提示使用抗锯齿标志符号位图来绘制字符的每个字符。
    ///  得更好的质量由于抗锯齿功能，但在较高的性能开销。
    ///</summary>
    AntiAliasGridFit = 3;
    ///<summary>
    ///  不提示的情况下使用抗锯齿标志符号位图来绘制每个字符。
    ///  由于抗锯齿质量就越好。
    ///  因为关闭了提示，词干宽度之间的差异可能非常明显。
    ///</summary>
    AntiAlias = 4;
    ///<summary>
    ///  每个字符使用位图来绘制其标志符号 ClearType 有提示。
    ///  最高的质量设置。
    ///  用来利用 ClearType 字体功能。
    ///</summary>
    ClearTypeGridFit = 5;
  end;




type


{ declares }

  DNIPropertyValueUIService = interface; // type: System.Drawing.Design.IPropertyValueUIService, namespace: System.Drawing.Design
  DNIToolboxItemProvider = interface; // type: System.Drawing.Design.IToolboxItemProvider, namespace: System.Drawing.Design
  DNIToolboxService = interface; // type: System.Drawing.Design.IToolboxService, namespace: System.Drawing.Design
  DNIToolboxUser = interface; // type: System.Drawing.Design.IToolboxUser, namespace: System.Drawing.Design
  DNIDeviceContext = interface; // type: System.Drawing.IDeviceContext, namespace: System.Drawing
  DNBitmapSuffixInSameAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSameAssemblyAttribute, namespace: System.Drawing
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute, namespace: System.Drawing
  DNToolboxBitmapAttribute = interface; // type: System.Drawing.ToolboxBitmapAttribute, namespace: System.Drawing
  DNPrintingPermissionAttribute = interface; // type: System.Drawing.Printing.PrintingPermissionAttribute, namespace: System.Drawing.Printing
  DNCategoryNameCollection = interface; // type: System.Drawing.Design.CategoryNameCollection, namespace: System.Drawing.Design
  DNToolboxItemCollection = interface; // type: System.Drawing.Design.ToolboxItemCollection, namespace: System.Drawing.Design
  DNFontConverter_FontUnitConverter = interface; // type: System.Drawing.FontConverter+FontUnitConverter, namespace: System.Drawing
  DNIconConverter = interface; // type: System.Drawing.IconConverter, namespace: System.Drawing
  DNMarginsConverter = interface; // type: System.Drawing.Printing.MarginsConverter, namespace: System.Drawing.Printing
  DNColorConverter = interface; // type: System.Drawing.ColorConverter, namespace: System.Drawing
  DNFontConverter = interface; // type: System.Drawing.FontConverter, namespace: System.Drawing
  DNFontConverter_FontNameConverter = interface; // type: System.Drawing.FontConverter+FontNameConverter, namespace: System.Drawing
  DNImageConverter = interface; // type: System.Drawing.ImageConverter, namespace: System.Drawing
  DNImageFormatConverter = interface; // type: System.Drawing.ImageFormatConverter, namespace: System.Drawing
  DNPointConverter = interface; // type: System.Drawing.PointConverter, namespace: System.Drawing
  DNRectangleConverter = interface; // type: System.Drawing.RectangleConverter, namespace: System.Drawing
  DNSizeConverter = interface; // type: System.Drawing.SizeConverter, namespace: System.Drawing
  DNSizeFConverter = interface; // type: System.Drawing.SizeFConverter, namespace: System.Drawing
  DNSystemDrawingSection = interface; // type: System.Drawing.Configuration.SystemDrawingSection, namespace: System.Drawing.Configuration
  DNBrushes = interface; // type: System.Drawing.Brushes, namespace: System.Drawing
  DNBufferedGraphics = interface; // type: System.Drawing.BufferedGraphics, namespace: System.Drawing
  DNBufferedGraphicsContext = interface; // type: System.Drawing.BufferedGraphicsContext, namespace: System.Drawing
  DNBufferedGraphicsManager = interface; // type: System.Drawing.BufferedGraphicsManager, namespace: System.Drawing
  DNColorTranslator = interface; // type: System.Drawing.ColorTranslator, namespace: System.Drawing
  DNPropertyValueUIItem = interface; // type: System.Drawing.Design.PropertyValueUIItem, namespace: System.Drawing.Design
  DNToolboxItem = interface; // type: System.Drawing.Design.ToolboxItem, namespace: System.Drawing.Design
  DNUITypeEditor = interface; // type: System.Drawing.Design.UITypeEditor, namespace: System.Drawing.Design
  DNBlend = interface; // type: System.Drawing.Drawing2D.Blend, namespace: System.Drawing.Drawing2D
  DNColorBlend = interface; // type: System.Drawing.Drawing2D.ColorBlend, namespace: System.Drawing.Drawing2D
  DNPathData = interface; // type: System.Drawing.Drawing2D.PathData, namespace: System.Drawing.Drawing2D
  DNRegionData = interface; // type: System.Drawing.Drawing2D.RegionData, namespace: System.Drawing.Drawing2D
  DNImageAnimator = interface; // type: System.Drawing.ImageAnimator, namespace: System.Drawing
  DNBitmapData = interface; // type: System.Drawing.Imaging.BitmapData, namespace: System.Drawing.Imaging
  DNColorMap = interface; // type: System.Drawing.Imaging.ColorMap, namespace: System.Drawing.Imaging
  DNColorMatrix = interface; // type: System.Drawing.Imaging.ColorMatrix, namespace: System.Drawing.Imaging
  DNColorPalette = interface; // type: System.Drawing.Imaging.ColorPalette, namespace: System.Drawing.Imaging
  DNEncoder = interface; // type: System.Drawing.Imaging.Encoder, namespace: System.Drawing.Imaging
  DNEncoderParameter = interface; // type: System.Drawing.Imaging.EncoderParameter, namespace: System.Drawing.Imaging
  DNEncoderParameters = interface; // type: System.Drawing.Imaging.EncoderParameters, namespace: System.Drawing.Imaging
  DNFrameDimension = interface; // type: System.Drawing.Imaging.FrameDimension, namespace: System.Drawing.Imaging
  DNImageAttributes = interface; // type: System.Drawing.Imaging.ImageAttributes, namespace: System.Drawing.Imaging
  DNImageCodecInfo = interface; // type: System.Drawing.Imaging.ImageCodecInfo, namespace: System.Drawing.Imaging
  DNImageFormat = interface; // type: System.Drawing.Imaging.ImageFormat, namespace: System.Drawing.Imaging
  DNMetafileHeader = interface; // type: System.Drawing.Imaging.MetafileHeader, namespace: System.Drawing.Imaging
  DNMetaHeader = interface; // type: System.Drawing.Imaging.MetaHeader, namespace: System.Drawing.Imaging
  DNPropertyItem = interface; // type: System.Drawing.Imaging.PropertyItem, namespace: System.Drawing.Imaging
  DNWmfPlaceableFileHeader = interface; // type: System.Drawing.Imaging.WmfPlaceableFileHeader, namespace: System.Drawing.Imaging
  DNPens = interface; // type: System.Drawing.Pens, namespace: System.Drawing
  DNMargins = interface; // type: System.Drawing.Printing.Margins, namespace: System.Drawing.Printing
  DNPageSettings = interface; // type: System.Drawing.Printing.PageSettings, namespace: System.Drawing.Printing
  DNPaperSize = interface; // type: System.Drawing.Printing.PaperSize, namespace: System.Drawing.Printing
  DNPaperSource = interface; // type: System.Drawing.Printing.PaperSource, namespace: System.Drawing.Printing
  DNPreviewPageInfo = interface; // type: System.Drawing.Printing.PreviewPageInfo, namespace: System.Drawing.Printing
  DNPrintController = interface; // type: System.Drawing.Printing.PrintController, namespace: System.Drawing.Printing
  DNPreviewPrintController = interface; // type: System.Drawing.Printing.PreviewPrintController, namespace: System.Drawing.Printing
  DNStandardPrintController = interface; // type: System.Drawing.Printing.StandardPrintController, namespace: System.Drawing.Printing
  DNPrinterResolution = interface; // type: System.Drawing.Printing.PrinterResolution, namespace: System.Drawing.Printing
  DNPrinterSettings = interface; // type: System.Drawing.Printing.PrinterSettings, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSizeCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSizeCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSourceCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSourceCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PrinterResolutionCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_StringCollection = interface; // type: System.Drawing.Printing.PrinterSettings+StringCollection, namespace: System.Drawing.Printing
  DNPrinterUnitConvert = interface; // type: System.Drawing.Printing.PrinterUnitConvert, namespace: System.Drawing.Printing
  DNSystemBrushes = interface; // type: System.Drawing.SystemBrushes, namespace: System.Drawing
  DNSystemColors = interface; // type: System.Drawing.SystemColors, namespace: System.Drawing
  DNSystemFonts = interface; // type: System.Drawing.SystemFonts, namespace: System.Drawing
  DNSystemIcons = interface; // type: System.Drawing.SystemIcons, namespace: System.Drawing
  DNSystemPens = interface; // type: System.Drawing.SystemPens, namespace: System.Drawing
  DNFontCollection = interface; // type: System.Drawing.Text.FontCollection, namespace: System.Drawing.Text
  DNInstalledFontCollection = interface; // type: System.Drawing.Text.InstalledFontCollection, namespace: System.Drawing.Text
  DNPrivateFontCollection = interface; // type: System.Drawing.Text.PrivateFontCollection, namespace: System.Drawing.Text
  DNPrintEventArgs = interface; // type: System.Drawing.Printing.PrintEventArgs, namespace: System.Drawing.Printing
  DNQueryPageSettingsEventArgs = interface; // type: System.Drawing.Printing.QueryPageSettingsEventArgs, namespace: System.Drawing.Printing
  DNPaintValueEventArgs = interface; // type: System.Drawing.Design.PaintValueEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatedEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatedEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatingEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatingEventArgs, namespace: System.Drawing.Design
  DNPrintPageEventArgs = interface; // type: System.Drawing.Printing.PrintPageEventArgs, namespace: System.Drawing.Printing
  DNInvalidPrinterException = interface; // type: System.Drawing.Printing.InvalidPrinterException, namespace: System.Drawing.Printing
  DNPrintDocument = interface; // type: System.Drawing.Printing.PrintDocument, namespace: System.Drawing.Printing
  DNBrush = interface; // type: System.Drawing.Brush, namespace: System.Drawing
  DNHatchBrush = interface; // type: System.Drawing.Drawing2D.HatchBrush, namespace: System.Drawing.Drawing2D
  DNLinearGradientBrush = interface; // type: System.Drawing.Drawing2D.LinearGradientBrush, namespace: System.Drawing.Drawing2D
  DNPathGradientBrush = interface; // type: System.Drawing.Drawing2D.PathGradientBrush, namespace: System.Drawing.Drawing2D
  DNSolidBrush = interface; // type: System.Drawing.SolidBrush, namespace: System.Drawing
  DNTextureBrush = interface; // type: System.Drawing.TextureBrush, namespace: System.Drawing
  DNCustomLineCap = interface; // type: System.Drawing.Drawing2D.CustomLineCap, namespace: System.Drawing.Drawing2D
  DNAdjustableArrowCap = interface; // type: System.Drawing.Drawing2D.AdjustableArrowCap, namespace: System.Drawing.Drawing2D
  DNGraphicsContainer = interface; // type: System.Drawing.Drawing2D.GraphicsContainer, namespace: System.Drawing.Drawing2D
  DNGraphicsPath = interface; // type: System.Drawing.Drawing2D.GraphicsPath, namespace: System.Drawing.Drawing2D
  DNGraphicsPathIterator = interface; // type: System.Drawing.Drawing2D.GraphicsPathIterator, namespace: System.Drawing.Drawing2D
  DNGraphicsState = interface; // type: System.Drawing.Drawing2D.GraphicsState, namespace: System.Drawing.Drawing2D
  DNMatrix = interface; // type: System.Drawing.Drawing2D.Matrix, namespace: System.Drawing.Drawing2D
  DNFont = interface; // type: System.Drawing.Font, namespace: System.Drawing
  DNFontFamily = interface; // type: System.Drawing.FontFamily, namespace: System.Drawing
  DNGraphics = interface; // type: System.Drawing.Graphics, namespace: System.Drawing
  DNIcon = interface; // type: System.Drawing.Icon, namespace: System.Drawing
  DNImage = interface; // type: System.Drawing.Image, namespace: System.Drawing
  DNBitmap = interface; // type: System.Drawing.Bitmap, namespace: System.Drawing
  DNMetafile = interface; // type: System.Drawing.Imaging.Metafile, namespace: System.Drawing.Imaging
  DNPen = interface; // type: System.Drawing.Pen, namespace: System.Drawing
  DNRegion = interface; // type: System.Drawing.Region, namespace: System.Drawing
  DNStringFormat = interface; // type: System.Drawing.StringFormat, namespace: System.Drawing
  DNPrintingPermission = interface; // type: System.Drawing.Printing.PrintingPermission, namespace: System.Drawing.Printing
  DNCharacterRange = interface; // type: System.Drawing.CharacterRange, namespace: System.Drawing
  DNColor = interface; // type: System.Drawing.Color, namespace: System.Drawing
  DNPoint = interface; // type: System.Drawing.Point, namespace: System.Drawing
  DNPointF = interface; // type: System.Drawing.PointF, namespace: System.Drawing
  DNRectangle = interface; // type: System.Drawing.Rectangle, namespace: System.Drawing
  DNRectangleF = interface; // type: System.Drawing.RectangleF, namespace: System.Drawing
  DNSize = interface; // type: System.Drawing.Size, namespace: System.Drawing
  DNSizeF = interface; // type: System.Drawing.SizeF, namespace: System.Drawing

{ delegates }

  ///<summary>
  ///  表示将委托添加到的实现的方法 <see cref="T:System.Drawing.Design.IPropertyValueUIService" />
  ///  。
  ///</summary>
  ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
  ///  可用来获取上下文信息。
  ///</param>
  ///  <param name="propDesc">
  ///  一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />
  ///  表示正在查询的属性。
  ///</param>
  ///  <param name="valueUIItemList"><see cref="T:System.Collections.ArrayList" />
  ///  的 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  对象包含用户界面项目与属性关联。
  ///</param>
  [DNTypeName('System.Drawing.Design.PropertyValueUIHandler')]
  DNPropertyValueUIHandler = procedure(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor; valueUIItemList: DDN.mscorlib.DNArrayList) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler" />
  ///  的 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
  ///  与双击的图标关联的属性。
  ///</param>
  ///  <param name="descriptor">
  ///  与双击的图标关联的属性。
  ///</param>
  ///  <param name="invokedItem"><see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  与双击的图标关联。
  ///</param>
  [DNTypeName('System.Drawing.Design.PropertyValueUIItemInvokeHandler')]
  DNPropertyValueUIItemInvokeHandler = procedure(context: DDN.System.DNITypeDescriptorContext; descriptor: DDN.System.DNPropertyDescriptor; invokedItem: DNPropertyValueUIItem) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />
  ///  事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  为事件提供数据的 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventHandler')]
  DNToolboxComponentsCreatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatedEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />
  ///  事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  为事件提供数据的 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventHandler')]
  DNToolboxComponentsCreatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatingEventArgs) of object;

  ///<summary>
  ///  提供回调机制，可以创建 <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  。
  ///</summary>
  ///  <param name="serializedObject">
  ///  包含要创建的数据的对象 <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  有关。
  ///</param>
  ///  <param name="format">
  ///  若要创建的剪贴板数据格式的名称 <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  有关。
  ///</param>
  ///<returns>
  ///  反序列化 <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  指定对象 <paramref name="serializedObject" />
  ///  。
  ///</returns>
  [DNTypeName('System.Drawing.Design.ToolboxItemCreatorCallback')]
  DNToolboxItemCreatorCallback = function(serializedObject: DDN.mscorlib.DNObject; format: string): DNToolboxItem of object;

  ///<summary>
  ///  提供回调方法，以决定何时 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应过早地取消执行，并停止绘制图像。
  ///</summary>
  ///  <param name="callbackdata">
  ///  指定的回调方法的数据的内部指针。
  ///  此参数不传递由所有 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  重载。
  ///  您可以通过检查的值测试它是否存在 <see cref="F:System.IntPtr.Zero" />
  ///  。
  ///</param>
  ///<returns>
  ///  此方法返回 <see langword="true" />
  ///  它决定，如果 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应提前停止执行。
  ///  否则，返回 <see langword="false" />
  ///  以指示 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  方法应继续执行。
  ///</returns>
  [DNTypeName('System.Drawing.Graphics+DrawImageAbort')]
  DNGraphics_DrawImageAbort = function(callbackdata: IntPtr): Boolean of object;

  ///<summary>
  ///  不使用此委托。
  ///  枚举的图元文件记录的示例，请参阅 <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
  ///  。
  ///</summary>
  ///  <param name="recordType">
  ///  未使用。
  ///</param>
  ///  <param name="flags">
  ///  未使用。
  ///</param>
  ///  <param name="dataSize">
  ///  未使用。
  ///</param>
  ///  <param name="recordData">
  ///  未使用。
  ///</param>
  [DNTypeName('System.Drawing.Imaging.PlayRecordCallback')]
  DNPlayRecordCallback = procedure(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; recordData: IntPtr) of object;

  ///<summary>
  ///  提供的回调方法 <see cref="Overload:System.Drawing.Graphics.EnumerateMetafile" />
  ///  方法。
  ///</summary>
  ///  <param name="recordType">
  ///  成员 <see cref="T:System.Drawing.Imaging.EmfPlusRecordType" />
  ///  枚举，用于指定的图元文件记录的类型。
  ///</param>
  ///  <param name="flags">
  ///  标志，用于指定记录属性的组。
  ///</param>
  ///  <param name="dataSize">
  ///  在记录数据的字节数。
  ///</param>
  ///  <param name="data">
  ///  指向包含记录数据的缓冲区的指针。
  ///</param>
  ///  <param name="callbackData">
  ///  未使用。
  ///</param>
  ///<returns>
  ///  返回 <see langword="true" />
  ///  如果你想要继续枚举记录; 否则为 <see langword="false" />
  ///  。
  ///</returns>
  [DNTypeName('System.Drawing.Graphics+EnumerateMetafileProc')]
  DNGraphics_EnumerateMetafileProc = function(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: IntPtr; callbackData: DNPlayRecordCallback): Boolean of object;

  ///<summary>
  ///  提供回调方法，以确定何时 <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  方法应过早地取消执行。
  ///</summary>
  ///<returns>
  ///  此方法返回 <see langword="true" />
  ///  它决定，如果 <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  方法应提前停止执行; 否则，它将返回 <see langword="false" />
  ///  。
  ///</returns>
  [DNTypeName('System.Drawing.Image+GetThumbnailImageAbort')]
  DNImage_GetThumbnailImageAbort = function: Boolean of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  或 <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  事件 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.PrintEventHandler')]
  DNPrintEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintEventArgs) of object;

  ///<summary>
  ///  表示将用来处理 <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  的 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.PrintPageEventHandler')]
  DNPrintPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintPageEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  事件 <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventHandler')]
  DNQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryPageSettingsEventArgs) of object;




{ objects }

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>
  ///  提供一个接口来管理映像、 工具提示、 和属性的属性浏览器中显示的组件的事件处理程序。
  ///</summary>
  [DNTypeName('System.Drawing.Design.IPropertyValueUIService')]
  DNIPropertyValueUIService = interface(DDN.mscorlib.DNObject)
  ['{F040B2E4-FA29-3542-9D43-C6B81C6A55DC}']
  { events } 

    procedure add_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Drawing.Design.PropertyValueUIHandler" />
    ///  到此服务。
    ///</summary>
    ///  <param name="newHandler">
    ///  属性值 UI 要添加处理程序。
    ///</param>
    procedure AddPropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  符合指定的上下文和属性描述符特性的对象。
    ///</summary>
    ///  <param name="context">
    ///  可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  。
    ///</param>
    ///  <param name="propDesc">
    ///  一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  ，该值指示与要返回的属性进行匹配的属性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  与指定的参数匹配的对象。
    ///</returns>
    function GetPropertyUIValueItems(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor): TArray<DNPropertyValueUIItem>;
    ///<summary>
    ///  通知 <see cref="T:System.Drawing.Design.IPropertyValueUIService" />
    ///  实现程序的全局列表 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  修改对象。
    ///</summary>
    procedure NotifyPropertyValueUIItemsChanged;
    ///<summary>
    ///  移除指定 <see cref="T:System.Drawing.Design.PropertyValueUIHandler" />
    ///  根据属性值 UI 服务。
    ///</summary>
    ///  <param name="newHandler">
    ///  要删除的处理程序。
    ///</param>
    procedure RemovePropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);

  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>
  ///  显示工具箱项的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Design.IToolboxItemProvider')]
  DNIToolboxItemProvider = interface(DDN.mscorlib.DNObject)
  ['{7F949FDD-E8FA-3F3A-B2FA-BA70C779B8E9}']
  { getters & setters } 

    function get_Items: DNToolboxItemCollection;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  对象的集合。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  对象的集合。
    ///</returns>
    property Items: DNToolboxItemCollection read get_Items;
  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>
  ///  提供方法和属性来管理和查询在开发环境中的工具箱。
  ///</summary>
  [DNTypeName('System.Drawing.Design.IToolboxService')]
  DNIToolboxService = interface(DDN.mscorlib.DNObject)
  ['{4BACD258-DE64-4048-BC4E-FEDBEF9ACB76}']
  { getters & setters } 

    function get_CategoryNames: DNCategoryNameCollection;
    function get_SelectedCategory: string;
    procedure set_SelectedCategory(value: string);

  { methods } 

    ///<summary>
    ///  添加新工具箱项的创建者用于指定的数据格式。
    ///</summary>
    ///  <param name="creator">
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />
    ///  ，可在调用工具箱项时创建组件。
    ///</param>
    ///  <param name="format">
    ///  创建者处理数据格式。
    ///</param>
    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string); overload;
    ///<summary>
    ///  添加新工具箱项的创建者指定的数据格式和设计器宿主。
    ///</summary>
    ///  <param name="creator">
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />
    ///  ，可在调用工具箱项时创建组件。
    ///</param>
    ///  <param name="format">
    ///  创建者处理数据格式。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  ，表示要创建者相关联的设计器宿主。
    ///</param>
    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>
    ///  将指定的项目链接的工具箱项添加到工具箱。
    ///</summary>
    ///  <param name="toolboxItem">
    ///  链接 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  将添加到工具箱。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  为当前的设计文档。
    ///</param>
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>
    ///  将指定的项目链接的工具箱项添加到指定类别的工具箱。
    ///</summary>
    ///  <param name="toolboxItem">
    ///  链接 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  将添加到工具箱。
    ///</param>
    ///  <param name="category">
    ///  工具箱将项添加到工具箱项类别。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  为当前的设计文档。
    ///</param>
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; category: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>
    ///  将指定的工具箱项添加到工具箱。
    ///</summary>
    ///  <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  将添加到工具箱。
    ///</param>
    procedure AddToolboxItem(toolboxItem: DNToolboxItem); overload;
    ///<summary>
    ///  将指定的工具箱项添加到指定类别的工具箱。
    ///</summary>
    ///  <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  将添加到工具箱。
    ///</param>
    ///  <param name="category">
    ///  若要添加的工具箱项类别 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  到。
    ///</param>
    procedure AddToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    ///<summary>
    ///  从指定的对象，表示已序列化的窗体中的工具箱项中获取的工具箱项。
    ///</summary>
    ///  <param name="serializedObject">
    ///  对象，其中包含 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  来检索。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  从序列化的对象创建的。
    ///</returns>
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject): DNToolboxItem; overload;
    ///<summary>
    ///  从表示已序列化窗体中，使用指定的设计器宿主中的工具箱项的指定对象中获取的工具箱项。
    ///</summary>
    ///  <param name="serializedObject">
    ///  对象，其中包含 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  来检索。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  要与此关联 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  创建从反序列化。
    ///</returns>
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    ///<summary>
    ///  获取当前选定的工具箱项。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  ，当前没有选定，或 <see langword="null" />
    ///  如果尚未选定任何工具箱项。
    ///</returns>
    function GetSelectedToolboxItem: DNToolboxItem; overload;
    ///<summary>
    ///  获取当前选定的工具箱项是否可用的所有设计器，或者如果支持指定的设计器。
    ///</summary>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  所选的工具必须与为其返回相关联。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  ，当前没有选定，或 <see langword="null" />
    ///  如果当前没有选定任何工具箱项。
    ///</returns>
    function GetSelectedToolboxItem(host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    ///<summary>
    ///  从工具箱中获取工具箱项的整个的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  包含当前工具箱项。
    ///</returns>
    function GetToolboxItems: DNToolboxItemCollection; overload;
    ///<summary>
    ///  获取与从工具箱中指定的设计器宿主关联的工具箱项的集合。
    ///</summary>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  要检索的工具箱项与该键相关联。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  ，包含与指定的设计器宿主关联的当前工具箱项。
    ///</returns>
    function GetToolboxItems(host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    ///<summary>
    ///  获取从工具箱中指定的类别相匹配的工具箱项的集合。
    ///</summary>
    ///  <param name="category">
    ///  要检索中的所有工具箱项的工具箱项类别。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  ，包含与指定的类别相关联的当前工具箱项。
    ///</returns>
    function GetToolboxItems(category: string): DNToolboxItemCollection; overload;
    ///<summary>
    ///  获取与指定设计器宿主和从工具箱的类别相关联的工具箱项的集合。
    ///</summary>
    ///  <param name="category">
    ///  要检索从工具箱项的工具箱项类别。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  要检索的工具箱项与该键相关联。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  ，包含与指定的类别和设计器宿主关联的当前工具箱项。
    ///</returns>
    function GetToolboxItems(category: string; host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    ///<summary>
    ///  获取一个值，该值指定设计器宿主是否可以使用指定的对象表示一个序列化的工具箱项。
    ///</summary>
    ///  <param name="serializedObject">
    ///  对象，其中包含 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  来检索。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  要测试其支持 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否与指定的设计器宿主; 兼容否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值表示序列化的工具箱项的指定的对象是否与指定的特性匹配。
    ///</summary>
    ///  <param name="serializedObject">
    ///  对象，其中包含 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  来检索。
    ///</param>
    ///  <param name="filterAttributes"><see cref="T:System.Collections.ICollection" />
    ///  ，其中包含要测试的序列化的对象的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象与指定的属性，则匹配否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; filterAttributes: DDN.mscorlib.DNICollection): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指定的对象是否序列化的工具箱项。
    ///</summary>
    ///  <param name="serializedObject">
    ///  要检查的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象包含工具箱项对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指定的对象是否序列化的工具箱项，使用指定的设计器宿主。
    ///</summary>
    ///  <param name="serializedObject">
    ///  要检查的对象。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  ，正在发出此请求。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象包含工具箱项对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    ///<summary>
    ///  刷新工具箱项的状态。
    ///</summary>
    procedure Refresh;
    ///<summary>
    ///  移除以前添加的工具箱项创建者的指定的数据格式。
    ///</summary>
    ///  <param name="format">
    ///  若要删除的创建者数据格式。
    ///</param>
    procedure RemoveCreator(format: string); overload;
    ///<summary>
    ///  移除与指定的数据格式和指定的设计器宿主关联以前添加的工具箱创建者。
    ///</summary>
    ///  <param name="format">
    ///  若要删除的创建者数据格式。
    ///</param>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  要删除的创建者与该键相关联。
    ///</param>
    procedure RemoveCreator(format: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>
    ///  从工具箱中删除指定的工具箱项。
    ///</summary>
    ///  <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  从工具箱中删除。
    ///</param>
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem); overload;
    ///<summary>
    ///  从工具箱中删除指定的工具箱项。
    ///</summary>
    ///  <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  从工具箱中删除。
    ///</param>
    ///  <param name="category">
    ///  若要删除的工具箱项类别 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  从。
    ///</param>
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    ///<summary>
    ///  通知工具箱服务已使用所选的工具。
    ///</summary>
    procedure SelectedToolboxItemUsed;
    ///<summary>
    ///  获取一个表示指定的工具箱项的可序列化对象。
    ///</summary>
    ///  <param name="toolboxItem">
    ///  要序列化的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个对象，表示指定 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    function SerializeToolboxItem(toolboxItem: DNToolboxItem): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将当前应用程序的光标设置为一个游标，表示当前所选的工具。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果将光标设置的当前选定的工具， <see langword="false" />
    ///  如果没有任何工具处于选中状态并将光标设置为标准的 windows 的光标。
    ///</returns>
    function SetCursor: Boolean;
    ///<summary>
    ///  选择指定的工具箱项。
    ///</summary>
    ///  <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  选择。
    ///</param>
    procedure SetSelectedToolboxItem(toolboxItem: DNToolboxItem);

  { propertys } 

    ///<summary>
    ///  获取当前在工具箱上的所有工具的类别的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  包含工具类别。
    ///</returns>
    property CategoryNames: DNCategoryNameCollection read get_CategoryNames;
    ///<summary>
    ///  获取或设置当前选定的工具类别的名称从工具箱。
    ///</summary>
    ///<returns>
    ///  当前所选的类别的名称。
    ///</returns>
    property SelectedCategory: string read get_SelectedCategory write set_SelectedCategory;
  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>
  ///  定义用于将设置当前选定的工具箱项和，该值指示设计器是否支持特定的工具箱项的接口。
  ///</summary>
  [DNTypeName('System.Drawing.Design.IToolboxUser')]
  DNIToolboxUser = interface(DDN.mscorlib.DNObject)
  ['{024519CA-FA87-3CEF-A9FD-B3045C8BF453}']
  { methods } 

    ///<summary>
    ///  获取一个值，该值指示当前设计器是否支持指定的工具。
    ///</summary>
    ///  <param name="tool"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  要测试的工具箱支持。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果工具箱支持该工具，并可以启用; <see langword="false" />
    ///  如果文档设计器不知道如何使用该工具。
    ///</returns>
    function GetToolSupported(tool: DNToolboxItem): Boolean;
    ///<summary>
    ///  选择指定的工具。
    ///</summary>
    ///  <param name="tool"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  选择。
    ///</param>
    procedure ToolPicked(tool: DNToolboxItem);

  end;

  //-------------namespace: System.Drawing----------------
  ///<summary>
  ///  定义用于获取和释放现有的 Windows 设备上下文句柄的方法。
  ///</summary>
  [DNTypeName('System.Drawing.IDeviceContext')]
  DNIDeviceContext = interface(DDN.mscorlib.DNIDisposable)
  ['{3B0820CC-0BAB-3225-A135-975CF1F66BA5}']
  { methods } 

    ///<summary>
    ///  返回到 Windows 的设备上下文的句柄。
    ///</summary>
    ///<returns><see cref="T:System.IntPtr" />
    ///  表示设备上下文句柄。
    ///</returns>
    function GetHdc: IntPtr;
    ///<summary>
    ///  释放 Windows 设备上下文句的柄。
    ///</summary>
    procedure ReleaseHdc;

  end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSameAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C24982A4-D71E-5366-8253-A7F32372902F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.BitmapSuffixInSameAssemblyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBitmapSuffixInSameAssemblyAttribute;

  end;

  ///<summary>
  ///  指定当解释时，， <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
  ///  声明，该程序集应查找指示资源位于同一程序集中，但使用 <see cref="P:System.Drawing.Configuration.SystemDrawingSection.BitmapSuffix" />
  ///  声明的文件名后附加的配置值。
  ///</summary>
  [DNTypeName('System.Drawing.BitmapSuffixInSameAssemblyAttribute')]
  DNBitmapSuffixInSameAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9449CA8F-3B8D-3EA9-B6DB-2E03AB8D5600}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSameAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSameAssemblyAttributeClass, DNBitmapSuffixInSameAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSatelliteAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8AD5958-1F97-5AEA-8C8D-D89675889BC3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBitmapSuffixInSatelliteAssemblyAttribute;

  end;

  ///<summary>
  ///  指定当解释时，， <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
  ///  声明，该程序集应查找指示资源的附属程序集，但具有 <see cref="P:System.Drawing.Configuration.SystemDrawingSection.BitmapSuffix" />
  ///  声明的文件名后附加的配置值。
  ///</summary>
  [DNTypeName('System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute')]
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E91912D3-D8A5-3DED-8DD7-5A140B63BF6D}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSatelliteAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSatelliteAssemblyAttributeClass, DNBitmapSuffixInSatelliteAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNToolboxBitmapAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F18CF918-B3C3-59F4-999F-59B337ED1173}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  具有来自指定文件的图像对象。
    ///</summary>
    ///  <param name="imageFile">
    ///  一个包含 16 × 16 位图文件的名称。
    ///</param>
    {class} function init(imageFile: string): DNToolboxBitmapAttribute; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象基于作为资源嵌入指定的程序集的 16x16 位图。
    ///</summary>
    ///  <param name="t">
    ///  一个 <see cref="T:System.Type" />
    ///  位图资源中搜索其定义的程序集。
    ///</param>
    {class} function init(t: DDN.mscorlib.DNType): DNToolboxBitmapAttribute; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象基于作为资源嵌入指定的程序集的 16 × 16 位图。
    ///</summary>
    ///  <param name="t">
    ///  一个 <see cref="T:System.Type" />
    ///  位图资源中搜索其定义的程序集。
    ///</param>
    ///  <param name="name">
    ///  嵌入的位图资源的名称。
    ///</param>
    {class} function init(t: DDN.mscorlib.DNType; name: string): DNToolboxBitmapAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxBitmapAttribute;

  { static fields } 

    ///<summary>
    ///  一个 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  具有其小图像并设置为其大图像对象 <see langword="null" />
    ///  。
    ///</summary>
    {class} property &Default: DNToolboxBitmapAttribute read __fakeFieldGet_Default;

  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Image" />
    ///  根据嵌入到程序集中的位图资源的对象。
    ///</summary>
    ///  <param name="t">
    ///  此方法搜索嵌入的位图资源中定义的类型 t 参数所指定的程序集。
    ///  例如，如果您将 typeof(ControlA) 传递到 t 参数时，此方法搜索定义控件的程序集。
    ///</param>
    ///  <param name="imageName">
    ///  嵌入的位图资源的名称。
    ///</param>
    ///  <param name="large">
    ///  指定此方法返回一个大图像 (true) 还是小图像 (false)。
    ///  小图像是 16 × 16，而较大的图像是 32 x 32。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  对象基于检索到的位图。
    ///</returns>
    {class} function GetImageFromResource(t: DDN.mscorlib.DNType; imageName: string; large: Boolean): DNImage;

  end;

  ///<summary>
  ///  可以指定一个图标来表示容器，如 Microsoft Visual Studio 窗体设计器中的控件。
  ///</summary>
  [DNTypeName('System.Drawing.ToolboxBitmapAttribute')]
  DNToolboxBitmapAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{958611BF-572A-3521-8649-F0196B634BBC}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  指示指定的对象是否为 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象以及是否等同于此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="value" />
    ///  既是 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象以及是否等同于此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此哈希代码 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  此哈希代码 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取小型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="component">
    ///  如果此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象不具有小图像，此方法搜索中定义的由组件参数指定的对象类型的程序集的位图资源。
    ///  例如，如果将控件类型的对象传递给组件参数，此方法搜索定义控件的程序集。
    ///</param>
    ///<returns>
    ///  小型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetImage(component: DDN.mscorlib.DNObject): DNImage; overload;
    ///<summary>
    ///  获取小型或大型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="component">
    ///  如果此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象不具有小图像，此方法搜索中定义的由组件参数指定的对象类型的程序集的位图资源。
    ///  例如，如果控件类型的对象传递给组件参数时，此方法搜索定义控件的程序集。
    ///</param>
    ///  <param name="large">
    ///  指定此方法是否返回较大的图像 (<see langword="true" />
    ///  ) 或一个小图像 (<see langword="false" />
    ///  )。
    ///  小图像是 16 × 16，而较大的图像是 32 × 32。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  对象与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetImage(component: DDN.mscorlib.DNObject; large: Boolean): DNImage; overload;
    ///<summary>
    ///  获取小型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="type">
    ///  如果此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象不具有小图像，此方法搜索中定义的类型参数指定的类型的程序集的位图资源。
    ///  例如，如果您将 typeof(ControlA) 传递给类型参数时，此方法搜索定义控件的程序集。
    ///</param>
    ///<returns>
    ///  小型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetImage(&type: DDN.mscorlib.DNType): DNImage; overload;
    ///<summary>
    ///  获取小型或大型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="type">
    ///  如果此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象不具有小图像，此方法搜索中定义的组件类型由指定的类型的程序集的位图资源。
    ///  例如，如果您将 typeof(ControlA) 传递给类型参数时，此方法搜索定义控件的程序集。
    ///</param>
    ///  <param name="large">
    ///  指定此方法是否返回较大的图像 (<see langword="true" />
    ///  ) 或一个小图像 (<see langword="false" />
    ///  )。
    ///  小图像是 16 × 16，而较大的图像是 32 × 32。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetImage(&type: DDN.mscorlib.DNType; large: Boolean): DNImage; overload;
    ///<summary>
    ///  获取小型或大型 <see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</summary>
    ///  <param name="type">
    ///  如果此 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象不具有小图像，此方法搜索嵌入的位图资源中定义的组件类型由指定的类型的程序集。
    ///  例如，如果您将 typeof(ControlA) 传递给类型参数时，此方法搜索定义控件的程序集。
    ///</param>
    ///  <param name="imgName">
    ///  嵌入的位图资源的名称。
    ///</param>
    ///  <param name="large">
    ///  指定此方法是否返回较大的图像 (<see langword="true" />
    ///  ) 或一个小图像 (<see langword="false" />
    ///  )。
    ///  小图像是 16 × 16，而较大的图像是 32 × 32。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  与此相关 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  对象。
    ///</returns>
    function GetImage(&type: DDN.mscorlib.DNType; imgName: string; large: Boolean): DNImage; overload;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxBitmapAttribute = class(TDNGenericImport<DNToolboxBitmapAttributeClass, DNToolboxBitmapAttribute>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{27880435-7C49-5C6E-B24D-01933E2BFDEC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintingPermissionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="action"><see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值之一。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNPrintingPermissionAttribute;

  end;

  ///<summary>
  ///  允许声明打印权限检查。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermissionAttribute')]
  DNPrintingPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{D1C669D1-CD77-385B-B501-843601DA7831}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  创建基于请求的访问级别，通过设置权限 <see cref="P:System.Drawing.Printing.PrintingPermissionAttribute.Level" />
    ///  特性上的属性。
    ///</summary>
    ///<returns><see cref="T:System.Security.IPermission" />
    ///  表示创建的权限。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置允许的打印类型。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该值不是 <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  值之一。
    ///</exception>
    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrintingPermissionAttribute = class(TDNGenericImport<DNPrintingPermissionAttributeClass, DNPrintingPermissionAttribute>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNCategoryNameCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{ABF49256-3068-5ADC-AF1F-B840D0C0E415}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  类使用指定的集合。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  ，其中包含要初始化到的集合值的名称。
    ///</param>
    {class} function init(value: DNCategoryNameCollection): DNCategoryNameCollection; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  类使用指定的名称数组。
    ///</summary>
    ///  <param name="value">
    ///  包含要初始化到的集合值的类别的名称的字符串数组。
    ///</param>
    {class} function init(value: TArray<string>): DNCategoryNameCollection; overload;

  end;

  ///<summary>
  ///  表示类别名称字符串的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Design.CategoryNameCollection')]
  DNCategoryNameCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{90EDDA3E-F955-3197-82E3-15B2AC28BD27}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  指示在集合中是否包含指定的类别。
    ///</summary>
    ///  <param name="value">
    ///  要检查在集合中的字符串。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合中的包含指定的类别否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: string): Boolean;
    ///<summary>
    ///  将集合元素复制到指定数组的指定索引处。
    ///</summary>
    ///  <param name="array">
    ///  要复制到的数组。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的目标数组的索引。
    ///</param>
    procedure CopyTo(&array: TArray<string>; index: Int32);
    ///<summary>
    ///  获取指定的值的索引。
    ///</summary>
    ///  <param name="value">
    ///  要检索的索引集合中的类别名称。
    ///</param>
    ///<returns>
    ///  在集合中，索引或 <see langword="null" />
    ///  如果集合中不存在该字符串。
    ///</returns>
    function IndexOf(value: string): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCategoryNameCollection = class(TDNGenericImport<DNCategoryNameCollectionClass, DNCategoryNameCollection>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{45954401-EFBA-5D96-9174-419CE609A37B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  类使用指定的集合。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  来填充新集合。
    ///</param>
    {class} function init(value: DNToolboxItemCollection): DNToolboxItemCollection; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  类使用指定的工具箱项数组。
    ///</summary>
    ///  <param name="value">
    ///  类型的数组 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  包含工具箱项来填充集合。
    ///</param>
    {class} function init(value: TArray<DNToolboxItem>): DNToolboxItemCollection; overload;

  end;

  ///<summary>
  ///  表示工具箱项的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Design.ToolboxItemCollection')]
  DNToolboxItemCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{58541023-7DF4-3273-AA27-E4C0362FE493}']
  { getters & setters } 

    function get_Item(index: Int32): DNToolboxItem;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  表示集合是否包含指定的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  若要在集合中搜索。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含指定的对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(value: DNToolboxItem): Boolean;
    ///<summary>
    ///  将集合复制到指定的目标索引开始的指定的数组。
    ///</summary>
    ///  <param name="array">
    ///  要复制到的数组。
    ///</param>
    ///  <param name="index">
    ///  要开始向复制的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNToolboxItem>; index: Int32);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  , ，如果它在集合中存在。
    ///</summary>
    ///  <param name="value">
    ///  一个 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  若要在集合中获取的索引。
    ///</param>
    ///<returns>
    ///  指定的索引 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    function IndexOf(value: DNToolboxItem): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNToolboxItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNToolboxItemCollection = class(TDNGenericImport<DNToolboxItemCollectionClass, DNToolboxItemCollection>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontUnitConverterClass = interface(DNObjectClass)
  ['{E52EC7AA-2FBD-5159-8F8E-64117BB8B2B9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.FontConverter.FontUnitConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFontConverter_FontUnitConverter;

  end;

  ///<summary>
  ///  和从其他单元类型之间进行转换字体单位。
  ///</summary>
  [DNTypeName('System.Drawing.FontConverter+FontUnitConverter')]
  DNFontConverter_FontUnitConverter = interface(DNObject)
  ['{6A1AEA9B-ED2B-355F-86C4-00BFB8F91FD2}']
  { methods } 

    ///<summary>
    ///  返回标准值的集合，对有效 <see cref="T:System.Drawing.Font" />
    ///  类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontUnitConverter = class(TDNGenericImport<DNFontConverter_FontUnitConverterClass, DNFontConverter_FontUnitConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNIconConverterClass = interface(DNObjectClass)
  ['{80FD3AC4-64BA-5D2F-BBA5-37556D2CF30D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.IconConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNIconConverter;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Drawing.Icon" />
  ///  对象从一种数据类型到另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.IconConverter')]
  DNIconConverter = interface(DNObject)
  ['{9B244C3F-C2B0-3BD6-83AB-96CADE65010F}']
  { methods } 

    ///<summary>
    ///  确定是否这 <see cref="T:System.Drawing.IconConverter" />
    ///  可以转换到指定类型的实例 <see cref="T:System.Drawing.Icon" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，指定您想要从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.IconConverter" />
    ///  能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否这 <see cref="T:System.Drawing.IconConverter" />
    ///  可转换 <see cref="T:System.Drawing.Icon" />
    ///  到具有指定类型的实例，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，指定想要转换为的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.IconConverter" />
    ///  能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  指定将对象转换为 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，用于保存有关特定区域性的信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果此方法成功，它将返回 <see cref="T:System.Drawing.Icon" />
    ///  它通过将指定的对象来创建。
    ///  否则，它将引发异常。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法执行转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Icon" />
    ///  (或可强制转换为对象 <see cref="T:System.Drawing.Icon" />
    ///  ) 为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它指定使用特定区域性的格式设置约定。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///  此对象应为类型图标或可强制转换为某种类型的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的图标的类型。
    ///</param>
    ///<returns>
    ///  此方法返回转换后的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法执行转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIconConverter = class(TDNGenericImport<DNIconConverterClass, DNIconConverter>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsConverterClass = interface(DNObjectClass)
  ['{D8F6CE72-3903-5F84-917D-8167CD235FEA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.MarginsConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMarginsConverter;

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Drawing.Printing.MarginsConverter" />
  ///  为 <see cref="T:System.Drawing.Printing.Margins" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.MarginsConverter')]
  DNMarginsConverter = interface(DNObject)
  ['{F95545A7-1A52-3CB5-92D0-6BA9F2145F85}']
  { methods } 

    ///<summary>
    ///  返回此转换器是否可以将指定的源类型的对象转换为使用指定的上下文的转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  表示想要转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象可以执行转换，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示要转换的类型。
    ///</param>
    ///<returns>
    ///  如果该转换器能够执行转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回更改此对象上的某个值是否要求对调用 <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  方法来创建一个新值，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果更改此对象的属性要求对调用 <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  若要创建一个新的值; 否则为 <see langword="false" />
    ///  。
    ///  此方法始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  将指定的对象转换为转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，它提供要转换的语言。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示转换后的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不包含全部四个边距的值。
    ///  例如，"100100100100"指定一英寸的左、 右、 上边框和下边距。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  不能执行转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将给定的值对象转换为使用指定的上下文和参数指定的目标类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，它提供要转换的语言。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///  <param name="destinationType"><see cref="T:System.Type" />
    ///  要与其进行转换的值。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示转换后的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  不能执行转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Object" />
    ///  对象给定的一组属性值。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="propertyValues">
    ///  新属性值的 <see cref="T:System.Collections.IDictionary" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示指定 <see cref="T:System.Collections.IDictionary" />
    ///  , ，或 <see langword="null" />
    ///  如果不能创建该对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyValues" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarginsConverter = class(TDNGenericImport<DNMarginsConverterClass, DNMarginsConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNColorConverterClass = interface(DNObjectClass)
  ['{F6A5D361-A51E-504E-B922-B7DFF92D8343}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.ColorConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNColorConverter;

  end;

  ///<summary>
  ///  将颜色从一种数据类型转换到另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.ColorConverter')]
  DNColorConverter = interface(DNObject)
  ['{0DCDEF42-0CC9-36F4-8F69-4F9D5805DEC3}']
  { methods } 

    ///<summary>
    ///  确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///  此对象可用于获取有关从中调用该转换器的环境的其他信息。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此对象可以执行转换，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示要转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行该操作;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  检索包含用于为其设计此验证程序的数据类型的标准值集的集合。
    ///  这将返回 <see langword="null" />
    ///  如果数据类型不支持标准值集。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  使用此对象来提取有关从中调用该转换器的环境的附加信息。
    ///  始终检查该值是否 <see langword="null" />
    ///  。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  集合包含 <see langword="null" />
    ///  或一组标准的有效值。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    ///<summary>
    ///  确定此对象是否支持可以从列表中选择的值的标准集。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" />
    ///  必须调用来查找一组公共对象支持的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  将给定的对象转换为转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个提供格式上下文的 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  。
    ///  此对象可用于获取有关从中调用该转换器的环境的其他信息。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，它指定要表示颜色的区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示转换后的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  不能执行转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换为另一种类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  使用此对象来提取有关从中调用该转换器的环境的附加信息。
    ///  始终检查该值是否 <see langword="null" />
    ///  。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，它指定要表示颜色的区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示转换后的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationtype" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  不能执行转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorConverter = class(TDNGenericImport<DNColorConverterClass, DNColorConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverterClass = interface(DNObjectClass)
  ['{CC812D60-ABA3-5B71-9E16-EC78F4F8F9DD}']
  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.FontConverter" />
    ///  对象。
    ///</summary>
    {class} function init: DNFontConverter;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Drawing.Font" />
  ///  对象从一种数据类型转换为另一个。
  ///</summary>
  [DNTypeName('System.Drawing.FontConverter')]
  DNFontConverter = interface(DNObject)
  ['{EF60651F-9566-36AA-8388-C90CDC3DB73B}']
  { methods } 

    ///<summary>
    ///  确定此转换器是否可以将指定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要将从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此对象可以执行转换。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context"><see langword="ITypeDescriptorContext" />
    ///  提供格式上下文的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  对象，表示要转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果该转换器能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否更改此对象上的某个值是否需要对调用 <see cref="Overload:System.Drawing.FontConverter.CreateInstance" />
    ///  方法来创建一个新值。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see langword="CreateInstance" />
    ///  更改时发出此对象的一个或多个属性; 否则为应调用对象 <see langword="false" />
    ///  。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定此对象是否支持属性。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see cref="M:System.Drawing.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" />
    ///  方法应该调用来查找此对象的属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  将指定的对象转换为转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  格式化程序上下文。
    ///  此对象可用来获取有关从中调用该转换器的环境的其他信息。
    ///  这可能是<see langword="null" />
    ///  ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回<see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  A<see langword="CultureInfo" />
    ///  对象，它指定用于表示字体的区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法执行转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换为另一种类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它指定用于表示该对象的区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换到的对象的数据类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  转换不成功。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  为该对象使用一组指定的属性值创建此类型的对象。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///  <param name="propertyValues">
    ///  新属性值的字典。
    ///  字典中包含一系列名称 / 值对，一个用于每个属性返回从 <see cref="Overload:System.Drawing.FontConverter.GetProperties" />
    ///  方法。
    ///</param>
    ///<returns>
    ///  新创建的对象，或 <see langword="null" />
    ///  如果无法创建该对象。
    ///  默认实现返回 <see langword="null" />
    ///  。
    ///<see cref="M:System.Drawing.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  用于创建具有可更改属性的非可更改对象很有用。
    ///</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检索此类型的属性集。
    ///  默认情况下，一种类型没有要返回的任何属性。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///  <param name="value">
    ///  要获取的属性的对象的值。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  此数据类型不应公开的属性集。
    ///  如果应公开任何属性，这可能会返回 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///  可以调用此方法的简单实现 <see cref="Overload:System.ComponentModel.TypeConverter.GetProperties" />
    ///  为正确的数据类型的方法。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter = class(TDNGenericImport<DNFontConverterClass, DNFontConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontNameConverterClass = interface(DNObjectClass)
  ['{9F84072F-A21E-57B7-BCDA-6F4A572C257C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.FontConverter.FontNameConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFontConverter_FontNameConverter;

  end;

  ///<summary><see cref="T:System.Drawing.FontConverter.FontNameConverter" />
  ///  是用来与其他各种表示形式转换字体名称的类型转换器。
  ///</summary>
  [DNTypeName('System.Drawing.FontConverter+FontNameConverter')]
  DNFontConverter_FontNameConverter = interface(DNObject)
  ['{F4E660EE-5F2C-3FD1-9F3C-B4DECB492462}']
  { methods } 

    ///<summary>
    ///  确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来提取有关从中调用此转换器的环境的附加信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  要从转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行转换，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  将给定的对象转换为转换器的本机类型。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来提取有关从中调用此转换器的环境的附加信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  用来执行转换
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定从是否返回的标准值列表 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  方法为独占列表。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来提取有关从中调用此转换器的环境的附加信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果从集合返回 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  是可能的值的独占列表; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定此对象是否支持可以从列表中选取的值的标准集。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来提取有关从中调用此转换器的环境的附加信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果应调用 <see langword="true" />
    ///  来查找对象支持的一组公共值，则为 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  检索包含一组适用于此转换器的数据类型的标准值的集合。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来提取有关从中调用此转换器的环境的附加信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含一组标准的有效的值的集合或 <see langword="null" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontNameConverter = class(TDNGenericImport<DNFontConverter_FontNameConverterClass, DNFontConverter_FontNameConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageConverterClass = interface(DNObjectClass)
  ['{4A2CE72A-BAE7-5C80-B713-4D7435711BF7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.ImageConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNImageConverter;

  end;

  ///<summary><see cref="T:System.Drawing.ImageConverter" />
  ///  是一个类，可用于将转换 <see cref="T:System.Drawing.Image" />
  ///  对象从一种数据类型转换为另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.ImageConverter')]
  DNImageConverter = interface(DNObject)
  ['{D0A407DC-F920-3AAA-AE30-85A1F49D7160}']
  { methods } 

    ///<summary>
    ///  获取此类型的属性集。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///  <param name="value">
    ///  要获取的属性的对象的值。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  此数据类型不应公开的属性集。
    ///  如果应公开任何属性，则此方法可返回 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>
    ///  指示此对象是否支持属性。
    ///  默认情况下，这是 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see cref="Overload:System.Drawing.ImageConverter.GetProperties" />
    ///  应调用方法来查找此对象的属性。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定是否这 <see cref="T:System.Drawing.ImageConverter" />
    ///  可以转换到指定类型的实例 <see cref="T:System.Drawing.Image" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，指定您想要从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.ImageConverter" />
    ///  能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否这 <see cref="T:System.Drawing.ImageConverter" />
    ///  可转换 <see cref="T:System.Drawing.Image" />
    ///  到具有指定类型的实例，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，指定想要转换为的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.ImageConverter" />
    ///  能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  指定将对象转换为 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  ，用于保存有关特定区域性的信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果此方法成功，它将返回 <see cref="T:System.Drawing.Image" />
    ///  它通过将指定的对象来创建。
    ///  否则，它将引发异常。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Image" />
    ///  (或可强制转换为对象 <see cref="T:System.Drawing.Image" />
    ///  ) 为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的详细信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它指定使用特定区域性的格式设置约定。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destinationType"><see cref="T:System.Type" />
    ///  要转换为的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回转换后的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageConverter = class(TDNGenericImport<DNImageConverterClass, DNImageConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageFormatConverterClass = interface(DNObjectClass)
  ['{9B9898F3-5F4C-5876-B5F5-BB43A0AEA1DE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.ImageFormatConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNImageFormatConverter;

  end;

  ///<summary><see cref="T:System.Drawing.ImageFormatConverter" />
  ///  是一个类，可用于将转换 <see cref="T:System.Drawing.Imaging.ImageFormat" />
  ///  对象从一种数据类型转换为另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.ImageFormatConverter')]
  DNImageFormatConverter = interface(DNObject)
  ['{813DEBD4-AFA2-3311-AB49-2241417CC926}']
  { methods } 

    ///<summary>
    ///  指示此转换器是否可以为该转换器的本机类型转换指定的源类型的对象。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的详细信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要将从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此对象可以执行转换。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示此转换器是否可以将对象转换为指定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，指定此类型转换的上下文。
    ///</param>
    ///  <param name="destinationType"><see cref="T:System.Type" />
    ///  ，它表示您想要将其转换的类型 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此对象可以执行转换。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  指定将对象转换为 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的详细信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它指定针对特定区域性的格式设置约定。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换成指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的详细信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象，它指定针对特定区域性的格式设置约定。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  为 <see langword="null." />
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  获取一个集合，包含用于此验证程序所面向的数据类型的标准值集。
    ///  返回 <see langword="null" />
    ///  如果数据类型不支持标准值集。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的详细信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  包含一组标准的有效的值的集合或 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    ///<summary>
    ///  指示此对象是否支持可以从列表中选取的值的标准集。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see cref="Overload:System.Drawing.ImageFormatConverter.GetStandardValues" />
    ///  应调用方法以查找一组公共对象支持的值。
    ///</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageFormatConverter = class(TDNGenericImport<DNImageFormatConverterClass, DNImageFormatConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNPointConverterClass = interface(DNObjectClass)
  ['{443635B0-AF21-5209-AA72-172902CF83D1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.PointConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPointConverter;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Drawing.Point" />
  ///  对象从一种数据类型到另一个。
  ///</summary>
  [DNTypeName('System.Drawing.PointConverter')]
  DNPointConverter = interface(DNObject)
  ['{1B140E71-044F-3B84-9559-E223FEB29F6F}']
  { methods } 

    ///<summary>
    ///  确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要将从转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此对象可以执行转换，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  提供格式上下文的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  对象，表示要转换的类型。
    ///</param>
    ///<returns>
    ///  如果该转换器能够执行转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  若要创建一个新值。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  更改时发出此对象的一个或多个属性; 否则为应调用方法 <see langword="false" />
    ///  。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定此对象是否支持属性。
    ///  默认情况下，这是 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns>
    ///  如果应调用 <see langword="true" />
    ///  来查找此对象的属性，则为 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  指定将对象转换为 <see cref="T:System.Drawing.Point" />
    ///  对象。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换成指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture">
    ///  一个包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  创建此类型的对象提供一组属性值的实例。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///  <param name="propertyValues">
    ///  新属性值的字典。
    ///  字典中包含一系列名称 / 值对，一个用于每个属性返回从 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的对象，或 <see langword="null" />
    ///  如果无法创建该对象。
    ///  默认实现返回 <see langword="null" />
    ///  。
    ///</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检索此类型的属性集。
    ///  默认情况下，一种类型不返回任何属性。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///  <param name="value">
    ///  要获取的属性的对象的值。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  为此数据类型公开的属性集。
    ///  如果未公开任何属性，则此方法可能返回 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleConverterClass = interface(DNObjectClass)
  ['{367FB9EA-845B-536D-BF02-545CC1341507}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.RectangleConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRectangleConverter;

  end;

  ///<summary>
  ///  将矩形从一种数据类型转换为另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.RectangleConverter')]
  DNRectangleConverter = interface(DNObject)
  ['{51E83AD8-34A3-3815-99DF-4BEEB6701484}']
  { methods } 

    ///<summary>
    ///  确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个格式化程序的上下文。
    ///  此对象可以用于获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要将从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此对象可以执行的转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  提供格式上下文的对象。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可以返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  对象，表示要转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果该转换器能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  若要创建一个新值。
    ///</summary>
    ///  <param name="context">
    ///  可以通过它提供其他上下文将类型描述符。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  更改时发出此对象的一个或多个属性; 否则为应调用 <see langword="false" />
    ///  。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定此对象是否支持属性。
    ///  默认情况下，这是 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  应被调用来查找此对象的属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  将给定类型转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  包含区域性特定信息，如语言、 日历和关联与特定区域性的区域性约定。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换成指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  包含区域性特定信息，如语言、 日历和关联与特定区域性的区域性约定。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  创建此类型的对象提供一组属性值的实例。
    ///  这非常有用的是固定不变，但仍想要提供可变属性的对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///  <param name="propertyValues">
    ///  新属性值的字典。
    ///  该字典包含一系列名称 / 值对，一个用于每个属性返回通过调用 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  方法。
    ///</param>
    ///<returns>
    ///  新创建的对象，或 <see langword="null" />
    ///  如果无法创建该对象。
    ///  默认实现返回 <see langword="null" />
    ///  。
    ///</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检索此类型的属性集。
    ///  默认情况下，一种类型不返回任何属性。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///  <param name="value">
    ///  要获取的属性的对象的值。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  此数据类型不应公开的属性集。
    ///  如果应公开任何属性，这可能会返回 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectangleConverter = class(TDNGenericImport<DNRectangleConverterClass, DNRectangleConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeConverterClass = interface(DNObjectClass)
  ['{49BE830D-5D51-560C-852B-2BF0871657C5}']
  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.SizeConverter" />
    ///  对象。
    ///</summary>
    {class} function init: DNSizeConverter;

  end;

  ///<summary><see cref="T:System.Drawing.SizeConverter" />
  ///  类用于从一种数据类型转换到另一个。
  ///  访问此类通过 <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.SizeConverter')]
  DNSizeConverter = interface(DNObject)
  ['{0149E1CD-362B-368D-8F5E-257A59ACEED2}']
  { methods } 

    ///<summary>
    ///  确定此转换器是否可以将指定的源类型的对象转换为该转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sourceType">
    ///  您想要将从转换的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果此对象可以执行转换。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此总是需要检查。
    ///  同样，context 对象的属性可以返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示你希望转换为的类型。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果该转换器能够执行转换; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否更改此对象上的某个值是否需要对调用 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  方法来创建一个新值。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  对此对象的一个或多个属性进行更改时，应调用对象。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  确定此对象是否支持属性。
    ///  默认情况下，这是 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  应调用方法来查找此对象的属性。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  将指定的对象转换为转换器的本机类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的对象转换成指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可用来获取有关从中调用此转换器的环境的其他信息。
    ///  这可能是 <see langword="null" />
    ///  , ，因此应始终对其进行检查。
    ///  同样，上下文对象上的属性也可能返回 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  包含区域性特定信息，如语言、 日历和区域性的约定与特定区域性关联的对象。
    ///  它基于 RFC 1766 标准。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  无法完成转换。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  为该对象使用一组指定的属性值创建此类型的对象。
    ///  这可用于创建具有可更改属性的非可更改对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///  <param name="propertyValues">
    ///  新属性值的字典。
    ///  字典中包含一系列名称 / 值对，一个用于每个属性返回从 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  方法。
    ///</param>
    ///<returns>
    ///  新创建的对象，或 <see langword="null" />
    ///  如果无法创建该对象。
    ///  默认实现返回 <see langword="null" />
    ///  。
    ///</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检索此类型的属性集。
    ///  默认情况下，一种类型没有要返回的任何属性。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  可以提供通过哪些其他上下文。
    ///</param>
    ///  <param name="value">
    ///  要获取的属性的对象的值。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  此数据类型不应公开的属性集。
    ///  如果应公开任何属性，这可能会返回 <see langword="null" />
    ///  。
    ///  默认实现始终返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFConverterClass = interface(DNObjectClass)
  ['{A5C40D56-7FF1-5EBE-8B7E-C76DD640AFB0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.SizeFConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSizeFConverter;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Drawing.SizeF" />
  ///  从一种类型到另一个对象。
  ///</summary>
  [DNTypeName('System.Drawing.SizeFConverter')]
  DNSizeFConverter = interface(DNObject)
  ['{EEF07B80-8E1B-3AF5-BACF-FFEE3B7A57EF}']
  { methods } 

    ///<summary>
    ///  返回一个值，该值指示该转换器可以转换到指定的类型 <see cref="T:System.Drawing.SizeF" />
    ///  类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可提供通过哪些其他上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  表示您希望从转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换可执行;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回一个值，该值指示是否 <see cref="T:System.Drawing.SizeFConverter" />
    ///  可转换 <see cref="T:System.Drawing.SizeF" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可提供通过哪些其他上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示您想要将从转换的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该转换器能够执行转换，否则 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回一个值，该值指示是否更改此对象的值需要调用 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" />
    ///  方法来创建一个新值。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///  这可能是 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  返回是否 <see cref="T:System.Drawing.SizeF" />
    ///  类型支持属性。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可提供通过哪些其他上下文。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示转换后的值。
    ///</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  使用指定的上下文和区域性信息将给定值对象转换为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///  如果传递 null，则采用当前区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  值参数所要转换成的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示转换后的值。
    ///</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Drawing.SizeF" />
    ///  具有使用指定的上下文的指定的属性值。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可提供通过哪些其他上下文。
    ///</param>
    ///  <param name="propertyValues"><see cref="T:System.Collections.IDictionary" />
    ///  包含属性名称和值。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示新 <see cref="T:System.Drawing.SizeF" />
    ///  , ，或 <see langword="null" />
    ///  如果不能创建该对象。
    ///</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检索属性的一组 <see cref="T:System.Drawing.SizeF" />
    ///  类型使用指定的上下文和属性。
    ///</summary>
    ///  <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  可提供通过哪些其他上下文。
    ///</param>
    ///  <param name="value"><see cref="T:System.Object" />
    ///  要返回的属性。
    ///</param>
    ///  <param name="attributes">
    ///  一个数组 <see cref="T:System.Attribute" />
    ///  描述属性的对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  包含的属性。
    ///</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeFConverter = class(TDNGenericImport<DNSizeFConverterClass, DNSizeFConverter>) end;

  //-------------namespace: System.Drawing.Configuration----------------
  DNSystemDrawingSectionClass = interface(DNObjectClass)
  ['{AE5FA05C-C43D-5E9F-BD9A-79C3816F312B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Configuration.SystemDrawingSection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSystemDrawingSection;

  end;

  ///<summary>
  ///  表示一个配置节中的类使用 <see cref="N:System.Drawing" />
  ///  命名空间。
  ///</summary>
  [DNTypeName('System.Drawing.Configuration.SystemDrawingSection')]
  DNSystemDrawingSection = interface(DNObject)
  ['{289B240A-8971-3582-9549-E64B875A76C1}']
  { getters & setters } 

    function get_BitmapSuffix: string;
    procedure set_BitmapSuffix(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要附加到所指示的文件名称的后缀 <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  时程序集用声明的 <see cref="T:System.Drawing.BitmapSuffixInSameAssemblyAttribute" />
    ///  或 <see cref="T:System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute" />
    ///  。
    ///</summary>
    ///<returns>
    ///  位图后缀。
    ///</returns>
    property BitmapSuffix: string read get_BitmapSuffix write set_BitmapSuffix;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSystemDrawingSection = class(TDNGenericImport<DNSystemDrawingSectionClass, DNSystemDrawingSection>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{168C1B92-8815-550A-8D88-A455269AF7F6}']
  { static getter & setter } 

    {class} function get_Transparent: DNBrush;
    {class} function get_AliceBlue: DNBrush;
    {class} function get_AntiqueWhite: DNBrush;
    {class} function get_Aqua: DNBrush;
    {class} function get_Aquamarine: DNBrush;
    {class} function get_Azure: DNBrush;
    {class} function get_Beige: DNBrush;
    {class} function get_Bisque: DNBrush;
    {class} function get_Black: DNBrush;
    {class} function get_BlanchedAlmond: DNBrush;
    {class} function get_Blue: DNBrush;
    {class} function get_BlueViolet: DNBrush;
    {class} function get_Brown: DNBrush;
    {class} function get_BurlyWood: DNBrush;
    {class} function get_CadetBlue: DNBrush;
    {class} function get_Chartreuse: DNBrush;
    {class} function get_Chocolate: DNBrush;
    {class} function get_Coral: DNBrush;
    {class} function get_CornflowerBlue: DNBrush;
    {class} function get_Cornsilk: DNBrush;
    {class} function get_Crimson: DNBrush;
    {class} function get_Cyan: DNBrush;
    {class} function get_DarkBlue: DNBrush;
    {class} function get_DarkCyan: DNBrush;
    {class} function get_DarkGoldenrod: DNBrush;
    {class} function get_DarkGray: DNBrush;
    {class} function get_DarkGreen: DNBrush;
    {class} function get_DarkKhaki: DNBrush;
    {class} function get_DarkMagenta: DNBrush;
    {class} function get_DarkOliveGreen: DNBrush;
    {class} function get_DarkOrange: DNBrush;
    {class} function get_DarkOrchid: DNBrush;
    {class} function get_DarkRed: DNBrush;
    {class} function get_DarkSalmon: DNBrush;
    {class} function get_DarkSeaGreen: DNBrush;
    {class} function get_DarkSlateBlue: DNBrush;
    {class} function get_DarkSlateGray: DNBrush;
    {class} function get_DarkTurquoise: DNBrush;
    {class} function get_DarkViolet: DNBrush;
    {class} function get_DeepPink: DNBrush;
    {class} function get_DeepSkyBlue: DNBrush;
    {class} function get_DimGray: DNBrush;
    {class} function get_DodgerBlue: DNBrush;
    {class} function get_Firebrick: DNBrush;
    {class} function get_FloralWhite: DNBrush;
    {class} function get_ForestGreen: DNBrush;
    {class} function get_Fuchsia: DNBrush;
    {class} function get_Gainsboro: DNBrush;
    {class} function get_GhostWhite: DNBrush;
    {class} function get_Gold: DNBrush;
    {class} function get_Goldenrod: DNBrush;
    {class} function get_Gray: DNBrush;
    {class} function get_Green: DNBrush;
    {class} function get_GreenYellow: DNBrush;
    {class} function get_Honeydew: DNBrush;
    {class} function get_HotPink: DNBrush;
    {class} function get_IndianRed: DNBrush;
    {class} function get_Indigo: DNBrush;
    {class} function get_Ivory: DNBrush;
    {class} function get_Khaki: DNBrush;
    {class} function get_Lavender: DNBrush;
    {class} function get_LavenderBlush: DNBrush;
    {class} function get_LawnGreen: DNBrush;
    {class} function get_LemonChiffon: DNBrush;
    {class} function get_LightBlue: DNBrush;
    {class} function get_LightCoral: DNBrush;
    {class} function get_LightCyan: DNBrush;
    {class} function get_LightGoldenrodYellow: DNBrush;
    {class} function get_LightGreen: DNBrush;
    {class} function get_LightGray: DNBrush;
    {class} function get_LightPink: DNBrush;
    {class} function get_LightSalmon: DNBrush;
    {class} function get_LightSeaGreen: DNBrush;
    {class} function get_LightSkyBlue: DNBrush;
    {class} function get_LightSlateGray: DNBrush;
    {class} function get_LightSteelBlue: DNBrush;
    {class} function get_LightYellow: DNBrush;
    {class} function get_Lime: DNBrush;
    {class} function get_LimeGreen: DNBrush;
    {class} function get_Linen: DNBrush;
    {class} function get_Magenta: DNBrush;
    {class} function get_Maroon: DNBrush;
    {class} function get_MediumAquamarine: DNBrush;
    {class} function get_MediumBlue: DNBrush;
    {class} function get_MediumOrchid: DNBrush;
    {class} function get_MediumPurple: DNBrush;
    {class} function get_MediumSeaGreen: DNBrush;
    {class} function get_MediumSlateBlue: DNBrush;
    {class} function get_MediumSpringGreen: DNBrush;
    {class} function get_MediumTurquoise: DNBrush;
    {class} function get_MediumVioletRed: DNBrush;
    {class} function get_MidnightBlue: DNBrush;
    {class} function get_MintCream: DNBrush;
    {class} function get_MistyRose: DNBrush;
    {class} function get_Moccasin: DNBrush;
    {class} function get_NavajoWhite: DNBrush;
    {class} function get_Navy: DNBrush;
    {class} function get_OldLace: DNBrush;
    {class} function get_Olive: DNBrush;
    {class} function get_OliveDrab: DNBrush;
    {class} function get_Orange: DNBrush;
    {class} function get_OrangeRed: DNBrush;
    {class} function get_Orchid: DNBrush;
    {class} function get_PaleGoldenrod: DNBrush;
    {class} function get_PaleGreen: DNBrush;
    {class} function get_PaleTurquoise: DNBrush;
    {class} function get_PaleVioletRed: DNBrush;
    {class} function get_PapayaWhip: DNBrush;
    {class} function get_PeachPuff: DNBrush;
    {class} function get_Peru: DNBrush;
    {class} function get_Pink: DNBrush;
    {class} function get_Plum: DNBrush;
    {class} function get_PowderBlue: DNBrush;
    {class} function get_Purple: DNBrush;
    {class} function get_Red: DNBrush;
    {class} function get_RosyBrown: DNBrush;
    {class} function get_RoyalBlue: DNBrush;
    {class} function get_SaddleBrown: DNBrush;
    {class} function get_Salmon: DNBrush;
    {class} function get_SandyBrown: DNBrush;
    {class} function get_SeaGreen: DNBrush;
    {class} function get_SeaShell: DNBrush;
    {class} function get_Sienna: DNBrush;
    {class} function get_Silver: DNBrush;
    {class} function get_SkyBlue: DNBrush;
    {class} function get_SlateBlue: DNBrush;
    {class} function get_SlateGray: DNBrush;
    {class} function get_Snow: DNBrush;
    {class} function get_SpringGreen: DNBrush;
    {class} function get_SteelBlue: DNBrush;
    {class} function get_Tan: DNBrush;
    {class} function get_Teal: DNBrush;
    {class} function get_Thistle: DNBrush;
    {class} function get_Tomato: DNBrush;
    {class} function get_Turquoise: DNBrush;
    {class} function get_Violet: DNBrush;
    {class} function get_Wheat: DNBrush;
    {class} function get_White: DNBrush;
    {class} function get_WhiteSmoke: DNBrush;
    {class} function get_Yellow: DNBrush;
    {class} function get_YellowGreen: DNBrush;

  { static propertys } 

    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Transparent: DNBrush read get_Transparent;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property AliceBlue: DNBrush read get_AliceBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property AntiqueWhite: DNBrush read get_AntiqueWhite;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Aqua: DNBrush read get_Aqua;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Aquamarine: DNBrush read get_Aquamarine;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Azure: DNBrush read get_Azure;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Beige: DNBrush read get_Beige;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Bisque: DNBrush read get_Bisque;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Black: DNBrush read get_Black;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BlanchedAlmond: DNBrush read get_BlanchedAlmond;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Blue: DNBrush read get_Blue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BlueViolet: DNBrush read get_BlueViolet;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Brown: DNBrush read get_Brown;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BurlyWood: DNBrush read get_BurlyWood;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property CadetBlue: DNBrush read get_CadetBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Chartreuse: DNBrush read get_Chartreuse;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Chocolate: DNBrush read get_Chocolate;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Coral: DNBrush read get_Coral;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property CornflowerBlue: DNBrush read get_CornflowerBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Cornsilk: DNBrush read get_Cornsilk;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Crimson: DNBrush read get_Crimson;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Cyan: DNBrush read get_Cyan;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkBlue: DNBrush read get_DarkBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkCyan: DNBrush read get_DarkCyan;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGoldenrod: DNBrush read get_DarkGoldenrod;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGray: DNBrush read get_DarkGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGreen: DNBrush read get_DarkGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkKhaki: DNBrush read get_DarkKhaki;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkMagenta: DNBrush read get_DarkMagenta;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOliveGreen: DNBrush read get_DarkOliveGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOrange: DNBrush read get_DarkOrange;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOrchid: DNBrush read get_DarkOrchid;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkRed: DNBrush read get_DarkRed;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSalmon: DNBrush read get_DarkSalmon;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSeaGreen: DNBrush read get_DarkSeaGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSlateBlue: DNBrush read get_DarkSlateBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSlateGray: DNBrush read get_DarkSlateGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkTurquoise: DNBrush read get_DarkTurquoise;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkViolet: DNBrush read get_DarkViolet;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DeepPink: DNBrush read get_DeepPink;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DeepSkyBlue: DNBrush read get_DeepSkyBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DimGray: DNBrush read get_DimGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DodgerBlue: DNBrush read get_DodgerBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Firebrick: DNBrush read get_Firebrick;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property FloralWhite: DNBrush read get_FloralWhite;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property ForestGreen: DNBrush read get_ForestGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Fuchsia: DNBrush read get_Fuchsia;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gainsboro: DNBrush read get_Gainsboro;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property GhostWhite: DNBrush read get_GhostWhite;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gold: DNBrush read get_Gold;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Goldenrod: DNBrush read get_Goldenrod;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gray: DNBrush read get_Gray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Green: DNBrush read get_Green;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property GreenYellow: DNBrush read get_GreenYellow;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Honeydew: DNBrush read get_Honeydew;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property HotPink: DNBrush read get_HotPink;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property IndianRed: DNBrush read get_IndianRed;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Indigo: DNBrush read get_Indigo;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Ivory: DNBrush read get_Ivory;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Khaki: DNBrush read get_Khaki;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Lavender: DNBrush read get_Lavender;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LavenderBlush: DNBrush read get_LavenderBlush;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LawnGreen: DNBrush read get_LawnGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LemonChiffon: DNBrush read get_LemonChiffon;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightBlue: DNBrush read get_LightBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightCoral: DNBrush read get_LightCoral;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightCyan: DNBrush read get_LightCyan;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGoldenrodYellow: DNBrush read get_LightGoldenrodYellow;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGreen: DNBrush read get_LightGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGray: DNBrush read get_LightGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightPink: DNBrush read get_LightPink;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSalmon: DNBrush read get_LightSalmon;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSeaGreen: DNBrush read get_LightSeaGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSkyBlue: DNBrush read get_LightSkyBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSlateGray: DNBrush read get_LightSlateGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSteelBlue: DNBrush read get_LightSteelBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightYellow: DNBrush read get_LightYellow;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Lime: DNBrush read get_Lime;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LimeGreen: DNBrush read get_LimeGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Linen: DNBrush read get_Linen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Magenta: DNBrush read get_Magenta;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Maroon: DNBrush read get_Maroon;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumAquamarine: DNBrush read get_MediumAquamarine;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumBlue: DNBrush read get_MediumBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumOrchid: DNBrush read get_MediumOrchid;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumPurple: DNBrush read get_MediumPurple;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSeaGreen: DNBrush read get_MediumSeaGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSlateBlue: DNBrush read get_MediumSlateBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSpringGreen: DNBrush read get_MediumSpringGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumTurquoise: DNBrush read get_MediumTurquoise;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumVioletRed: DNBrush read get_MediumVioletRed;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MidnightBlue: DNBrush read get_MidnightBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MintCream: DNBrush read get_MintCream;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MistyRose: DNBrush read get_MistyRose;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Moccasin: DNBrush read get_Moccasin;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property NavajoWhite: DNBrush read get_NavajoWhite;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Navy: DNBrush read get_Navy;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OldLace: DNBrush read get_OldLace;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Olive: DNBrush read get_Olive;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OliveDrab: DNBrush read get_OliveDrab;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Orange: DNBrush read get_Orange;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OrangeRed: DNBrush read get_OrangeRed;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Orchid: DNBrush read get_Orchid;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleGoldenrod: DNBrush read get_PaleGoldenrod;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleGreen: DNBrush read get_PaleGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleTurquoise: DNBrush read get_PaleTurquoise;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleVioletRed: DNBrush read get_PaleVioletRed;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PapayaWhip: DNBrush read get_PapayaWhip;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PeachPuff: DNBrush read get_PeachPuff;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Peru: DNBrush read get_Peru;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Pink: DNBrush read get_Pink;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Plum: DNBrush read get_Plum;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PowderBlue: DNBrush read get_PowderBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Purple: DNBrush read get_Purple;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Red: DNBrush read get_Red;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property RosyBrown: DNBrush read get_RosyBrown;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property RoyalBlue: DNBrush read get_RoyalBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SaddleBrown: DNBrush read get_SaddleBrown;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Salmon: DNBrush read get_Salmon;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SandyBrown: DNBrush read get_SandyBrown;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SeaGreen: DNBrush read get_SeaGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SeaShell: DNBrush read get_SeaShell;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Sienna: DNBrush read get_Sienna;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Silver: DNBrush read get_Silver;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SkyBlue: DNBrush read get_SkyBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SlateBlue: DNBrush read get_SlateBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SlateGray: DNBrush read get_SlateGray;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Snow: DNBrush read get_Snow;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SpringGreen: DNBrush read get_SpringGreen;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SteelBlue: DNBrush read get_SteelBlue;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Tan: DNBrush read get_Tan;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Teal: DNBrush read get_Teal;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Thistle: DNBrush read get_Thistle;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Tomato: DNBrush read get_Tomato;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Turquoise: DNBrush read get_Turquoise;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Violet: DNBrush read get_Violet;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Wheat: DNBrush read get_Wheat;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property White: DNBrush read get_White;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property WhiteSmoke: DNBrush read get_WhiteSmoke;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Yellow: DNBrush read get_Yellow;
    ///<summary>
    ///  获取系统定义 <see cref="T:System.Drawing.Brush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property YellowGreen: DNBrush read get_YellowGreen;
  end;

  ///<summary>
  ///  所有标准颜色的画笔。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Brushes')]
  DNBrushes = interface(DDN.mscorlib.DNObject)
  ['{C63C38E2-2655-356B-9A1A-0117499AEC35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushes = class(TDNGenericImport<DNBrushesClass, DNBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsClass = interface(DNObjectClass)
  ['{A7CA480C-8C3B-58A8-BBDB-9FE64246B5C8}']
  end;

  ///<summary>
  ///  为双缓冲提供图形缓冲区。
  ///</summary>
  [DNTypeName('System.Drawing.BufferedGraphics')]
  DNBufferedGraphics = interface(DDN.mscorlib.DNIDisposable)
  ['{330A3DBD-B0A9-3C31-AB87-C7E25DD86B21}']
  { getters & setters } 

    function get_Graphics: DNGraphics;

  { methods } 

    ///<summary>
    ///  将图形缓冲区的内容写入默认设备。
    ///</summary>
    procedure Render; overload;
    ///<summary>
    ///  释放由 <see cref="T:System.Drawing.BufferedGraphics" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将图形缓冲区的内容写入与指定的 <see cref="T:System.IntPtr" />
    ///  句柄关联的设备上下文。
    ///</summary>
    ///  <param name="targetDC"><see cref="T:System.IntPtr" />
    ///  指向设备上下文，图形缓冲区的内容将被写入这个设备上下文。
    ///</param>
    procedure Render(targetDC: IntPtr); overload;
    ///<summary>
    ///  将图形缓冲区的内容写入指定的 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="target">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  对象，要向其中写入图形缓冲区的内容。
    ///</param>
    procedure Render(target: DNGraphics); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</returns>
    property Graphics: DNGraphics read get_Graphics;
  end;

  TDNBufferedGraphics = class(TDNGenericImport<DNBufferedGraphicsClass, DNBufferedGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsContextClass = interface(DNObjectClass)
  ['{BAC41E8C-E712-5FD5-9455-C8CDA1EAF623}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBufferedGraphicsContext;

  end;

  ///<summary>
  ///  提供用于创建可用来进行双缓冲图形缓冲区的方法。
  ///</summary>
  [DNTypeName('System.Drawing.BufferedGraphicsContext')]
  DNBufferedGraphicsContext = interface(DDN.mscorlib.DNIDisposable)
  ['{E35AA1CB-98A1-3C1B-8B01-CD59A9CB2791}']
  { getters & setters } 

    function get_MaximumBuffer: DNSize;
    procedure set_MaximumBuffer(value: DNSize);

  { methods } 

    ///<summary>
    ///  创建使用指定的像素格式的指定大小的图形缓冲区 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="targetGraphics"><see cref="T:System.Drawing.Graphics" />
    ///  以匹配新缓冲区的像素格式。
    ///</param>
    ///  <param name="targetRectangle">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，该值指示要创建的缓冲区的大小。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.BufferedGraphics" />
    ///  可用来绘制到指定的尺寸的缓冲区。
    ///</returns>
    function Allocate(targetGraphics: DNGraphics; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    ///<summary>
    ///  创建使用指定的像素格式的指定大小的图形缓冲区 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="targetDC"><see cref="T:System.IntPtr" />
    ///  到设备上下文，以匹配新缓冲区的像素格式。
    ///</param>
    ///  <param name="targetRectangle">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，该值指示要创建的缓冲区的大小。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.BufferedGraphics" />
    ///  可用来绘制到指定的尺寸的缓冲区。
    ///</returns>
    function Allocate(targetDC: IntPtr; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    ///<summary>
    ///  释放由 <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  如果缓冲区已分配，并且尚未释放，释放当前的图形缓冲区。
    ///</summary>
    procedure Invalidate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要使用的缓冲区的最大大小。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  ，该值指示缓冲区尺寸的最大大小。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度或宽度大小小于或等于零。
    ///</exception>
    property MaximumBuffer: DNSize read get_MaximumBuffer write set_MaximumBuffer;
  end;

  TDNBufferedGraphicsContext = class(TDNGenericImport<DNBufferedGraphicsContextClass, DNBufferedGraphicsContext>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DB77C3A-2632-539B-B93B-1D2640EF8267}']
  { static getter & setter } 

    {class} function get_Current: DNBufferedGraphicsContext;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  为当前应用程序域。
    ///</summary>
    ///<returns>
    ///  当前应用程序域的 <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  。
    ///</returns>
    {class} property Current: DNBufferedGraphicsContext read get_Current;
  end;

  ///<summary>
  ///  提供对主缓冲的图形上下文对象的应用程序域的访问。
  ///</summary>
  [DNTypeName('System.Drawing.BufferedGraphicsManager')]
  DNBufferedGraphicsManager = interface(DDN.mscorlib.DNObject)
  ['{52C2C884-4CCF-3F14-AB9E-090103E4157B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBufferedGraphicsManager = class(TDNGenericImport<DNBufferedGraphicsManagerClass, DNBufferedGraphicsManager>) end;

  //-------------namespace: System.Drawing----------------
  DNColorTranslatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4122E647-1518-5D38-99A8-8DC28AD4D278}']
  { static methods } 

    ///<summary>
    ///  将转换指定 <see cref="T:System.Drawing.Color" />
    ///  Windows 颜色的结构。
    ///</summary>
    ///  <param name="c">
    ///  要转换的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  Windows 颜色值。
    ///</returns>
    {class} function ToWin32(c: DNColor): Int32;
    ///<summary>
    ///  将转换指定 <see cref="T:System.Drawing.Color" />
    ///  OLE 颜色的结构。
    ///</summary>
    ///  <param name="c">
    ///  要转换的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  OLE 颜色值。
    ///</returns>
    {class} function ToOle(c: DNColor): Int32;
    ///<summary>
    ///  将转换为 GDI + 的 OLE 颜色值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="oleColor">
    ///  要转换的 OLE 颜色。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Color" />
    ///  结构，它表示已转换的 OLE 颜色。
    ///</returns>
    {class} function FromOle(oleColor: Int32): DNColor;
    ///<summary>
    ///  将转换为 GDI + 的 Windows 颜色值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="win32Color">
    ///  要转换的 Windows 颜色。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Color" />
    ///  结构，它表示已翻译的 Windows 颜色。
    ///</returns>
    {class} function FromWin32(win32Color: Int32): DNColor;
    ///<summary>
    ///  将转换为 GDI + 的 HTML 颜色表示 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="htmlColor">
    ///  要转换的 Html 颜色字符串表示。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Color" />
    ///  结构，它表示已翻译的 HTML 颜色或 <see cref="F:System.Drawing.Color.Empty" />
    ///  如果 <paramref name="htmlColor" />
    ///  是 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Exception"><paramref name="htmlColor" />
    ///  不是有效的 HTML 颜色名称。
    ///</exception>
    {class} function FromHtml(htmlColor: string): DNColor;
    ///<summary>
    ///  将转换指定 <see cref="T:System.Drawing.Color" />
    ///  为 HTML 字符串颜色表示形式的结构。
    ///</summary>
    ///  <param name="c">
    ///  要转换的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  表示 HTML 颜色的字符串。
    ///</returns>
    {class} function ToHtml(c: DNColor): string;

  end;

  ///<summary>
  ///  将为和 GDI + 中的颜色转换 <see cref="T:System.Drawing.Color" />
  ///  结构。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.ColorTranslator')]
  DNColorTranslator = interface(DDN.mscorlib.DNObject)
  ['{564300EB-EE73-38E4-AE22-C0DB8F4979D4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorTranslator = class(TDNGenericImport<DNColorTranslatorClass, DNColorTranslator>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPropertyValueUIItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6965276E-8BB8-5FDC-BAEE-CD1F4E975D40}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="uiItemImage">
    ///  要显示的图标。
    ///  映像必须是 8 x 8 像素。
    ///</param>
    ///  <param name="handler">
    ///  双击该图像时要调用该处理程序。
    ///</param>
    ///  <param name="tooltip"><see cref="P:System.Drawing.Design.PropertyValueUIItem.ToolTip" />
    ///  要为该属性显示此 <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  与相关联。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uiItemImage" />
    ///  或 <paramref name="handler" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(uiItemImage: DNImage; handler: DNPropertyValueUIItemInvokeHandler; tooltip: string): DNPropertyValueUIItem;

  end;

  ///<summary>
  ///  提供有关属性显示在属性窗口，其中包括关联的事件处理程序、 弹出信息字符串和图标以显示属性的信息。
  ///</summary>
  [DNTypeName('System.Drawing.Design.PropertyValueUIItem')]
  DNPropertyValueUIItem = interface(DDN.mscorlib.DNObject)
  ['{C2D34DDC-4DEF-3B22-B852-2334D3D9E33C}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_InvokeHandler: DNPropertyValueUIItemInvokeHandler;
    function get_ToolTip: string;

  { methods } 

    ///<summary>
    ///  重置用户界面 (UI) 项。
    ///</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取将在属性窗口中绘制的 8 x 8 像素图像。
    ///</summary>
    ///<returns>
    ///  要使用属性图标的图像。
    ///</returns>
    property Image: DNImage read get_Image;
    ///<summary>
    ///  获取当用户双击此项时引发的处理程序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler" />
    ///  ，该值指示此用户界面 (UI) 项的事件处理程序。
    ///</returns>
    property InvokeHandler: DNPropertyValueUIItemInvokeHandler read get_InvokeHandler;
    ///<summary>
    ///  获取或设置要为此项显示的信息字符串。
    ///</summary>
    ///<returns>
    ///  包含要为此项显示的信息字符串的字符串。
    ///</returns>
    property ToolTip: string read get_ToolTip;
  end;

  TDNPropertyValueUIItem = class(TDNGenericImport<DNPropertyValueUIItemClass, DNPropertyValueUIItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemClass = interface(DNObjectClass)
  ['{93226D67-BDB9-5256-B65F-33A067F2F32F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNToolboxItem; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  创建指定的类型的组件的类。
    ///</summary>
    ///  <param name="toolType">
    ///  一种 <see cref="T:System.ComponentModel.IComponent" />
    ///  工具箱项创建。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  已锁定。
    ///</exception>
    {class} function init(toolType: DDN.mscorlib.DNType): DNToolboxItem; overload;

  end;

  ///<summary>
  ///  提供工具箱项的基实现。
  ///</summary>
  [DNTypeName('System.Drawing.Design.ToolboxItem')]
  DNToolboxItem = interface(DDN.mscorlib.DNISerializable)
  ['{DC283D53-B4AF-30F8-80E9-F6FBBF5CCCD2}']
  { getters & setters } 

    function get_AssemblyName: DDN.mscorlib.DNAssemblyName;
    procedure set_AssemblyName(value: DDN.mscorlib.DNAssemblyName);
    function get_DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName>;
    procedure set_DependentAssemblies(value: TArray<DDN.mscorlib.DNAssemblyName>);
    function get_Bitmap: DNBitmap;
    procedure set_Bitmap(value: DNBitmap);
    function get_OriginalBitmap: DNBitmap;
    procedure set_OriginalBitmap(value: DNBitmap);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_ComponentType: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_Filter: DDN.mscorlib.DNICollection;
    procedure set_Filter(value: DDN.mscorlib.DNICollection);
    function get_IsTransient: Boolean;
    procedure set_IsTransient(value: Boolean);
    function get_Locked: Boolean;
    function get_Properties: DDN.mscorlib.DNIDictionary;
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Version: string;

  { events } 

    procedure add_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure remove_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure add_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);
    procedure remove_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);

  { methods } 

    ///<summary>
    ///  创建工具箱项的配置中指定要创建的组件。
    ///</summary>
    ///<returns>
    ///  创建的 <see cref="T:System.ComponentModel.IComponent" />
    ///  对象数组。
    ///</returns>
    function CreateComponents: TArray<DDN.System.DNIComponent>; overload;
    ///<summary>
    ///  使用指定的设计器宿主创建工具箱项的配置中指定要创建的组件。
    ///</summary>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  创建组件时要使用。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.ComponentModel.IComponent" />
    ///  对象数组。
    ///</returns>
    function CreateComponents(host: DDN.System.DNIDesignerHost): TArray<DDN.System.DNIComponent>; overload;
    ///<summary>
    ///  使用指定的设计器宿主和默认值创建工具箱项的配置中指定要创建的组件。
    ///</summary>
    ///  <param name="host"><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  创建组件时要使用。
    ///</param>
    ///  <param name="defaultValues">
    ///  初始化组件时所用的默认值的属性名称/值对字典。
    ///</param>
    ///<returns>
    ///  创建的 <see cref="T:System.ComponentModel.IComponent" />
    ///  对象数组。
    ///</returns>
    function CreateComponents(host: DDN.System.DNIDesignerHost; defaultValues: DDN.mscorlib.DNIDictionary): TArray<DDN.System.DNIComponent>; overload;
    ///<summary>
    ///  确定两个 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  实例是否相等。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  进行比较的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see langword="true" />
    ///  等于当前的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  ，则为 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  允许访问与工具箱项关联的类型。
    ///</summary>
    ///  <param name="host">
    ///  查询设计器宿主 <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />
    ///  。
    ///</param>
    ///<returns>
    ///  与工具箱项关联的类型。
    ///</returns>
    function GetType(host: DDN.System.DNIDesignerHost): DDN.mscorlib.DNType; overload;
    ///<summary>
    ///  锁定工具箱项，防止更改其属性。
    ///</summary>
    procedure Lock;
    ///<summary>
    ///  返回一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示当前的 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  使用将创建的指定类型初始化当前工具箱项。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  工具箱项创建。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  已锁定。
    ///</exception>
    procedure Initialize(&type: DDN.mscorlib.DNType);
    function GetType: DDN.mscorlib.DNType; overload;

  { propertys } 

    ///<summary>
    ///  获取或者设置程序集的名称，该程序集中包含工具箱项创建的一个或多个类型。
    ///</summary>
    ///<returns><see cref="T:System.Reflection.AssemblyName" />
    ///  ，该值指示包含要创建的类型的程序集。
    ///</returns>
    property AssemblyName: DDN.mscorlib.DNAssemblyName read get_AssemblyName write set_AssemblyName;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Reflection.AssemblyName" />
    ///  工具箱项。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.AssemblyName" />
    ///  对象数组。
    ///</returns>
    property DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName> read get_DependentAssemblies write set_DependentAssemblies;
    ///<summary>
    ///  获取或设置表示工具箱中的工具箱项的位图。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Bitmap" />
    ///  表示工具箱中的工具箱项。
    ///</returns>
    property Bitmap: DNBitmap read get_Bitmap write set_Bitmap;
    ///<summary>
    ///  获取或设置将在工具箱中用于此项的原始位图。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Bitmap" />
    ///  表示工具箱中的工具箱项。
    ///</returns>
    property OriginalBitmap: DNBitmap read get_OriginalBitmap write set_OriginalBitmap;
    ///<summary>
    ///  获取或设置此公司名称 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它指定为此公司 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    property Company: string read get_Company write set_Company;
    ///<summary>
    ///  获取此组件类型 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  组件类型指定为此 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    property ComponentType: string read get_ComponentType;
    ///<summary>
    ///  获取或设置此说明 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  用于指定此说明 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  获取或设置此工具箱项的显示名称。
    ///</summary>
    ///<returns>
    ///  工具箱项的显示名称。
    ///</returns>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>
    ///  获取或设置确定工具箱项是否可以用于目标组件的筛选器。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />
    ///  对象的 <see cref="T:System.Collections.ICollection" />
    ///  。
    ///</returns>
    property Filter: DDN.mscorlib.DNICollection read get_Filter write set_Filter;
    ///<summary>
    ///  获取一个值，该值指示工具箱项是否为临时工具箱项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果此工具箱项不应存储在任何工具箱数据库中时关闭的应用程序提供工具箱;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsTransient: Boolean read get_IsTransient write set_IsTransient;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  当前被锁定。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果工具箱项被锁定，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Locked: Boolean read get_Locked;
    ///<summary>
    ///  获取属性的字典。
    ///</summary>
    ///<returns>
    ///  名称/值对字典，其中名称为属性名称，值为属性值。
    ///</returns>
    property Properties: DDN.mscorlib.DNIDictionary read get_Properties;
    ///<summary>
    ///  获取或设置的类型的完全限定的名 <see cref="T:System.ComponentModel.IComponent" />
    ///  工具箱项创建时调用。
    ///</summary>
    ///<returns>
    ///  此工具箱项创建的组件类型的完全限定类型名。
    ///</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>
    ///  获取此版本 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，指定的版本为此 <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  。
    ///</returns>
    property Version: string read get_Version;
  end;

  TDNToolboxItem = class(TDNGenericImport<DNToolboxItemClass, DNToolboxItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNUITypeEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5800513C-779B-5AFD-B482-18908D1F5A3C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNUITypeEditor;

  end;

  ///<summary>
  ///  提供可用于设计值编辑器的基类，这些编辑器可提供用户界面 (UI) 以用来表示和编辑所支持的数据类型的对象值。
  ///</summary>
  [DNTypeName('System.Drawing.Design.UITypeEditor')]
  DNUITypeEditor = interface(DDN.mscorlib.DNObject)
  ['{99538F93-7A3F-3E3D-84D3-38275B52C7A5}']
  { getters & setters } 

    function get_IsDropDownResizable: Boolean;

  { methods } 

    ///<summary>
    ///  通过指示的值指定的对象使用的编辑器样式编辑 <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  方法。
    ///</summary>
    ///  <param name="provider"><see cref="T:System.IServiceProvider" />
    ///  此编辑器可以用来获取服务。
    ///</param>
    ///  <param name="value">
    ///  要编辑的对象。
    ///</param>
    ///<returns>
    ///  对象的新值。
    ///</returns>
    function EditValue(provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  通过指示指定的对象的值使用的编辑器样式编辑 <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  方法。
    ///</summary>
    ///  <param name="context">
    ///  可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  。
    ///</param>
    ///  <param name="provider"><see cref="T:System.IServiceProvider" />
    ///  此编辑器可以用来获取服务。
    ///</param>
    ///  <param name="value">
    ///  要编辑的对象。
    ///</param>
    ///<returns>
    ///  对象的新值。
    ///  如果尚未更改对象的值，则它返回的对象应与传递给它的对象相同。
    ///</returns>
    function EditValue(context: DDN.System.DNITypeDescriptorContext; provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  获取使用的编辑器样式 <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />
    ///  枚举值，该值指示由当前使用的编辑器样式 <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  。
    ///  默认情况下，此方法将返回 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />
    ///  。
    ///</returns>
    function GetEditStyle: DNUITypeEditorEditStyle; overload;
    ///<summary>
    ///  指示该编辑器是否支持绘制对象值的表示形式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
    ///  实现; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetPaintValueSupported: Boolean; overload;
    ///<summary>
    ///  指示指定的上下文是否支持在指定的上下文内绘制对象值的表示形式。
    ///</summary>
    ///  <param name="context">
    ///  可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
    ///  实现; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GetPaintValueSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>
    ///  获取使用的编辑器样式 <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  方法。
    ///</summary>
    ///  <param name="context">
    ///  可用于获取附加上下文信息的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />
    ///  值，表示 <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  方法使用的编辑器样式。
    ///  如果 <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  不支持此方法，则 <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  将返回 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />
    ///  。
    ///</returns>
    function GetEditStyle(context: DDN.System.DNITypeDescriptorContext): DNUITypeEditorEditStyle; overload;
    ///<summary>
    ///  将指定对象值表示形式绘制到指定的画布上。
    ///</summary>
    ///  <param name="value">
    ///  此类型编辑器将显示其值的对象。
    ///</param>
    ///  <param name="canvas">
    ///  在其上绘制对象的值的表示形式的画布。
    ///</param>
    ///  <param name="rectangle">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  绘制值其边界内。
    ///</param>
    procedure PaintValue(value: DDN.mscorlib.DNObject; canvas: DNGraphics; rectangle: DNRectangle); overload;
    ///<summary>
    ///  使用指定的对象的值表示绘制 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  。
    ///</summary>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  ，该值指示绘制内容和绘制位置。
    ///</param>
    procedure PaintValue(e: DNPaintValueEventArgs); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否应由用户调整下拉编辑器的大小。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果下拉编辑器是一种可调整大小;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDropDownResizable: Boolean read get_IsDropDownResizable;
  end;

  TDNUITypeEditor = class(TDNGenericImport<DNUITypeEditorClass, DNUITypeEditor>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7F7B8D2-F73D-5EF8-99CE-C8C85DC7CC57}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBlend; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  的因子和位置的指定个数的类。
    ///</summary>
    ///  <param name="count">
    ///  中的元素数 <see cref="P:System.Drawing.Drawing2D.Blend.Factors" />
    ///  和 <see cref="P:System.Drawing.Drawing2D.Blend.Positions" />
    ///  数组。
    ///</param>
    {class} function init(count: Int32): DNBlend; overload;

  end;

  ///<summary>
  ///  为定义的混合模式 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.Blend')]
  DNBlend = interface(DDN.mscorlib.DNObject)
  ['{6B74E20B-F4FF-3273-9FA8-CBD66D5D00B2}']
  { getters & setters } 

    function get_Factors: TArray<Single>;
    procedure set_Factors(value: TArray<Single>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个混合因子的渐变的数组。
    ///</summary>
    ///<returns>
    ///  一个指定的开始颜色和要使用的相应位置的结束颜色的百分比的混合因子的数组。
    ///</returns>
    property Factors: TArray<Single> read get_Factors write set_Factors;
    ///<summary>
    ///  获取或设置一个混合位置的渐变的数组。
    ///</summary>
    ///<returns>
    ///  指定沿渐变线的距离的百分比的混合位置的数组。
    ///</returns>
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNBlend = class(TDNGenericImport<DNBlendClass, DNBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNColorBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C640630-04BF-5E8C-9C8D-1C535E8716E8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNColorBlend; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  的颜色和位置的指定个数的类。
    ///</summary>
    ///  <param name="count">
    ///  颜色和在此位置的数目 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  。
    ///</param>
    {class} function init(count: Int32): DNColorBlend; overload;

  end;

  ///<summary>
  ///  定义颜色和用于插值颜色混合在多色渐变中的位置的数组。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.ColorBlend')]
  DNColorBlend = interface(DDN.mscorlib.DNObject)
  ['{E64D2B60-BEB1-3554-BCD3-2481BBE334A6}']
  { getters & setters } 

    function get_Colors: TArray<DNColor>;
    procedure set_Colors(value: TArray<DNColor>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置表示要在沿渐变的相应位置处使用的颜色的颜色的数组。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Color" />
    ///  这些结构表示要在沿渐变的相应位置处使用的颜色。
    ///</returns>
    property Colors: TArray<DNColor> read get_Colors write set_Colors;
    ///<summary>
    ///  获取或设置沿渐变线的位置。
    ///</summary>
    ///<returns>
    ///  指定沿渐变线的距离的百分比的值的数组。
    ///</returns>
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNColorBlend = class(TDNGenericImport<DNColorBlendClass, DNColorBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B48935A-E731-53B0-8E8A-566DDE8D810C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPathData;

  end;

  ///<summary>
  ///  包含组成的图形数据 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathData')]
  DNPathData = interface(DDN.mscorlib.DNObject)
  ['{556E6DFC-86A0-333E-B6CC-B80DBDF05065}']
  { getters & setters } 

    function get_Points: TArray<DNPointF>;
    procedure set_Points(value: TArray<DNPointF>);
    function get_Types: TArray<Byte>;
    procedure set_Types(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要通过其构成路径的点。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  表示要通过其构成路径的点的对象。
    ///</returns>
    property Points: TArray<DNPointF> read get_Points write set_Points;
    ///<summary>
    ///  获取或设置路径中的相应点的类型。
    ///</summary>
    ///<returns>
    ///  路径中指定相应的点的类型的字节数组。
    ///</returns>
    property Types: TArray<Byte> read get_Types write set_Types;
  end;

  TDNPathData = class(TDNGenericImport<DNPathDataClass, DNPathData>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNRegionDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{702718D6-9F2B-53F3-8F47-63AA1DF7DFD7}']
  end;

  ///<summary>
  ///  封装的数据，后者构成 <see cref="T:System.Drawing.Region" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.RegionData')]
  DNRegionData = interface(DDN.mscorlib.DNObject)
  ['{AFF2E189-33BC-3173-98F4-F6125CAB3B08}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个指定的字节数组 <see cref="T:System.Drawing.Region" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个指定的字节数组 <see cref="T:System.Drawing.Region" />
    ///  对象。
    ///</returns>
    property Data: TArray<Byte> read get_Data write set_Data;
  end;

  TDNRegionData = class(TDNGenericImport<DNRegionDataClass, DNRegionData>) end;

  //-------------namespace: System.Drawing----------------
  DNImageAnimatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{849A1BD4-4F51-5757-A37E-BF6219C4A424}']
  { static methods } 

    ///<summary>
    ///  使帧在指定的图像中前移。
    ///  新帧在下一次呈现图像时绘制。
    ///  此方法只适用于包含基于时间的帧的图像。
    ///</summary>
    ///  <param name="image">
    ///  要为其更新帧的 <see cref="T:System.Drawing.Image" />
    ///  对象。
    ///</param>
    {class} procedure UpdateFrames(image: DNImage); overload;
    ///<summary>
    ///  返回一个布尔值，该值指示指定的映像是否包含基于时间的帧。
    ///</summary>
    ///  <param name="image">
    ///  要测试的 <see cref="T:System.Drawing.Image" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的图像包含基于时间的帧; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function CanAnimate(image: DNImage): Boolean;
    ///<summary>
    ///  终止正在运行的动画。
    ///</summary>
    ///  <param name="image">
    ///  要停止动画处理的 <see cref="T:System.Drawing.Image" />
    ///  对象。
    ///</param>
    ///  <param name="onFrameChangedHandler">
    ///  一个 <see langword="EventHandler" />
    ///  对象，它指定在动画帧发生更改时调用的方法。
    ///</param>
    {class} procedure StopAnimate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    ///<summary>
    ///  将多帧图像显示为动画。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象进行动画处理。
    ///</param>
    ///  <param name="onFrameChangedHandler">
    ///  一个 <see langword="EventHandler" />
    ///  对象，它指定在动画帧发生更改时调用的方法。
    ///</param>
    {class} procedure Animate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    ///<summary>
    ///  使帧在当前进行动画处理的所有图像中前移。
    ///  新帧在下一次呈现图像时绘制。
    ///</summary>
    {class} procedure UpdateFrames; overload;

  end;

  ///<summary>
  ///  包含基于时间的帧的映像进行动画处理。
  ///</summary>
  [DNTypeName('System.Drawing.ImageAnimator')]
  DNImageAnimator = interface(DDN.mscorlib.DNObject)
  ['{79D045E9-9A50-34E4-A668-72E48DC7DB90}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAnimator = class(TDNGenericImport<DNImageAnimatorClass, DNImageAnimator>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNBitmapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE65B648-C66F-50C6-BAF2-C9A54865BD12}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBitmapData;

  end;

  ///<summary>
  ///  指定位图图像的属性。
  ///<see cref="T:System.Drawing.Imaging.BitmapData" />
  ///  类由 <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  和 <see cref="M:System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)" />
  ///  方法 <see cref="T:System.Drawing.Bitmap" />
  ///  类。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.BitmapData')]
  DNBitmapData = interface(DDN.mscorlib.DNObject)
  ['{3E7E92A8-C78F-3FB2-A197-5AF12F6DBA38}']
  { getters & setters } 

    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Stride: Int32;
    procedure set_Stride(value: Int32);
    function get_PixelFormat: DNPixelFormat;
    procedure set_PixelFormat(value: DNPixelFormat);
    function get_Scan0: IntPtr;
    procedure set_Scan0(value: IntPtr);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的像素宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///  这也可以看作是一个扫描行中的像素数。
    ///</summary>
    ///<returns>
    ///  像素宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的像素高度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///  也有时称为扫描行数。
    ///</summary>
    ///<returns>
    ///  像素高度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取或设置 stride （也称为扫描宽度） 的宽度 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  跨距宽度，以字节为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property Stride: Int32 read get_Stride write set_Stride;
    ///<summary>
    ///  获取或设置的格式中的像素信息 <see cref="T:System.Drawing.Bitmap" />
    ///  返回此对象 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  关联指定格式的像素信息 <see cref="T:System.Drawing.Bitmap" />
    ///  对象。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  获取或设置在位图中的第一个像素数据的地址。
    ///  这也可以看作是位图中的第一个扫描行。
    ///</summary>
    ///<returns>
    ///  在位图中的第一个像素数据的地址。
    ///</returns>
    property Scan0: IntPtr read get_Scan0 write set_Scan0;
    ///<summary>
    ///  保留。
    ///  请勿使用。
    ///</summary>
    ///<returns>
    ///  保留。
    ///  请勿使用。
    ///</returns>
    property Reserved: Int32 read get_Reserved write set_Reserved;
  end;

  TDNBitmapData = class(TDNGenericImport<DNBitmapDataClass, DNBitmapData>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FB1C5DF-C902-585D-8D71-A2C1FDB00778}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNColorMap;

  end;

  ///<summary>
  ///  定义将颜色转换的映射。
  ///  几种方法 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  类调整图像的颜色，通过使用颜色重新映射表，它是数组的 <see cref="T:System.Drawing.Imaging.ColorMap" />
  ///  结构。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMap')]
  DNColorMap = interface(DDN.mscorlib.DNObject)
  ['{D0BEF867-AEA4-37FE-B61A-D3AA050E1B32}']
  { getters & setters } 

    function get_OldColor: DNColor;
    procedure set_OldColor(value: DNColor);
    function get_NewColor: DNColor;
    procedure set_NewColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置现有 <see cref="T:System.Drawing.Color" />
    ///  要转换的结构。
    ///</summary>
    ///<returns>
    ///  现有 <see cref="T:System.Drawing.Color" />
    ///  要转换的结构。
    ///</returns>
    property OldColor: DNColor read get_OldColor write set_OldColor;
    ///<summary>
    ///  获取或设置新 <see cref="T:System.Drawing.Color" />
    ///  要转换为结构。
    ///</summary>
    ///<returns>
    ///  新 <see cref="T:System.Drawing.Color" />
    ///  要转换为结构。
    ///</returns>
    property NewColor: DNColor read get_NewColor write set_NewColor;
  end;

  TDNColorMap = class(TDNGenericImport<DNColorMapClass, DNColorMap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMatrixClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6515D929-3D5B-517B-B804-07A917853004}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNColorMatrix; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  类使用指定的矩阵中的元素 <paramref name="newColorMatrix" />
    ///  。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  新元素的值 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</param>
    {class} function init(newColorMatrix: TArray<TArray<Single>>): DNColorMatrix; overload;

  end;

  ///<summary>
  ///  定义了一个 5 × 5 矩阵包含 RGBAW 空间的坐标。
  ///  几种方法 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  类通过使用颜色矩阵来调整图像的颜色。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMatrix')]
  DNColorMatrix = interface(DDN.mscorlib.DNObject)
  ['{149DE87C-0360-3126-8E4E-16844F0C316A}']
  { getters & setters } 

    function get_Matrix00: Single;
    procedure set_Matrix00(value: Single);
    function get_Matrix01: Single;
    procedure set_Matrix01(value: Single);
    function get_Matrix02: Single;
    procedure set_Matrix02(value: Single);
    function get_Matrix03: Single;
    procedure set_Matrix03(value: Single);
    function get_Matrix04: Single;
    procedure set_Matrix04(value: Single);
    function get_Matrix10: Single;
    procedure set_Matrix10(value: Single);
    function get_Matrix11: Single;
    procedure set_Matrix11(value: Single);
    function get_Matrix12: Single;
    procedure set_Matrix12(value: Single);
    function get_Matrix13: Single;
    procedure set_Matrix13(value: Single);
    function get_Matrix14: Single;
    procedure set_Matrix14(value: Single);
    function get_Matrix20: Single;
    procedure set_Matrix20(value: Single);
    function get_Matrix21: Single;
    procedure set_Matrix21(value: Single);
    function get_Matrix22: Single;
    procedure set_Matrix22(value: Single);
    function get_Matrix23: Single;
    procedure set_Matrix23(value: Single);
    function get_Matrix24: Single;
    procedure set_Matrix24(value: Single);
    function get_Matrix30: Single;
    procedure set_Matrix30(value: Single);
    function get_Matrix31: Single;
    procedure set_Matrix31(value: Single);
    function get_Matrix32: Single;
    procedure set_Matrix32(value: Single);
    function get_Matrix33: Single;
    procedure set_Matrix33(value: Single);
    function get_Matrix34: Single;
    procedure set_Matrix34(value: Single);
    function get_Matrix40: Single;
    procedure set_Matrix40(value: Single);
    function get_Matrix41: Single;
    procedure set_Matrix41(value: Single);
    function get_Matrix42: Single;
    procedure set_Matrix42(value: Single);
    function get_Matrix43: Single;
    procedure set_Matrix43(value: Single);
    function get_Matrix44: Single;
    procedure set_Matrix44(value: Single);
    function get_Item(row: Int32; column: Int32): Single;
    procedure set_Item(row: Int32; column: Int32; value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 0 处的元素，（零） 行和此 0 列 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  0 的行和此 0 列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix00: Single read get_Matrix00 write set_Matrix00;
    ///<summary>
    ///  获取或设置 0 处的元素，（零） 的行和第一列这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  0 行、 第一列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix01: Single read get_Matrix01 write set_Matrix01;
    ///<summary>
    ///  获取或设置的元素，0 （零） 行和第二列的这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  0 行、 第二列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix02: Single read get_Matrix02 write set_Matrix02;
    ///<summary>
    ///  获取或设置的元素，0 （零） 行、 第三列的这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///  表示的 alpha 分量。
    ///</summary>
    ///<returns>
    ///  元素中的 0 行、 第三个列的这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix03: Single read get_Matrix03 write set_Matrix03;
    ///<summary>
    ///  获取或设置的元素，0 （零） 行、 第四列的这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在 0 行和第四列中的此元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix04: Single read get_Matrix04 write set_Matrix04;
    ///<summary>
    ///  获取或设置的元素，在第一行和 0 （零） 的此列 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第一行和此 0 列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix10: Single read get_Matrix10 write set_Matrix10;
    ///<summary>
    ///  获取或设置的第一行和第一列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  元素中的第一行和第一列这 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix11: Single read get_Matrix11 write set_Matrix11;
    ///<summary>
    ///  获取或设置此第一的行和第二列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此第一的行和第二列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix12: Single read get_Matrix12 write set_Matrix12;
    ///<summary>
    ///  获取或设置此第一行和第三列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///  表示的 alpha 分量。
    ///</summary>
    ///<returns>
    ///  此第一行和第三列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix13: Single read get_Matrix13 write set_Matrix13;
    ///<summary>
    ///  获取或设置此第一行和第四个列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此第一的行、 第四列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix14: Single read get_Matrix14 write set_Matrix14;
    ///<summary>
    ///  获取或设置的元素，在第二行和 0 （零） 的此列 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第二行和此 0 列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix20: Single read get_Matrix20 write set_Matrix20;
    ///<summary>
    ///  获取或设置第二行、 第一列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在第二行和第一列，此元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix21: Single read get_Matrix21 write set_Matrix21;
    ///<summary>
    ///  获取或设置此的第二行和第二列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这第二行和第二列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix22: Single read get_Matrix22 write set_Matrix22;
    ///<summary>
    ///  获取或设置此的第二行、 第三列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这第二行、 第三列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix23: Single read get_Matrix23 write set_Matrix23;
    ///<summary>
    ///  获取或设置此的第二行、 第四列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这第二行、 第四列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix24: Single read get_Matrix24 write set_Matrix24;
    ///<summary>
    ///  获取或设置的元素，在第三行和 0 （零） 的此列 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第三行和此 0 列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix30: Single read get_Matrix30 write set_Matrix30;
    ///<summary>
    ///  获取或设置第三行、 第一列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在第三行和第一列，此元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix31: Single read get_Matrix31 write set_Matrix31;
    ///<summary>
    ///  获取或设置此第三行和第二列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此第三个行和第二列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix32: Single read get_Matrix32 write set_Matrix32;
    ///<summary>
    ///  获取或设置此第三行、 第三列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///  表示的 alpha 分量。
    ///</summary>
    ///<returns>
    ///  这第三行、 第三列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix33: Single read get_Matrix33 write set_Matrix33;
    ///<summary>
    ///  获取或设置此第三行、 第四列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这第三行、 第四列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix34: Single read get_Matrix34 write set_Matrix34;
    ///<summary>
    ///  获取或设置的元素，在第四行和 0 （零） 的此列 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第四行和此 0 列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix40: Single read get_Matrix40 write set_Matrix40;
    ///<summary>
    ///  获取或设置第四行、 第一列这处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第四行的第一列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix41: Single read get_Matrix41 write set_Matrix41;
    ///<summary>
    ///  获取或设置此的第四行和第二列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这样的第四行和第二列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix42: Single read get_Matrix42 write set_Matrix42;
    ///<summary>
    ///  获取或设置此的第四行、 第三列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///  表示的 alpha 分量。
    ///</summary>
    ///<returns>
    ///  这样的第四行、 第三列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix43: Single read get_Matrix43 write set_Matrix43;
    ///<summary>
    ///  获取或设置此的第四行、 第四列的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  这样的第四行、 第四列处的元素 <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  。
    ///</returns>
    property Matrix44: Single read get_Matrix44 write set_Matrix44;
    property Item[row: Int32; column: Int32]: Single read get_Item write set_Item; default;
  end;

  TDNColorMatrix = class(TDNGenericImport<DNColorMatrixClass, DNColorMatrix>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorPaletteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D5700A5-F93A-528A-AAEA-8A5C32FB3939}']
  end;

  ///<summary>
  ///  定义一个数组构成的调色板的颜色。
  ///  颜色是 32 位 ARGB 颜色。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ColorPalette')]
  DNColorPalette = interface(DDN.mscorlib.DNObject)
  ['{0CF09C28-25D5-32B7-A65A-CB9710DCD5DB}']
  { getters & setters } 

    function get_Flags: Int32;
    function get_Entries: TArray<DNColor>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，指定如何解释在数组中的颜色的颜色信息。
    ///</summary>
    ///<returns>
    ///  下面的标志值是有效的︰
    ///  0x00000001
    ///  数组中的颜色值包含 alpha 信息。
    ///  0x00000002
    ///  数组中的颜色是灰度值。
    ///  0x00000004
    ///  数组中的颜色是半色调值。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  数组 <see cref="T:System.Drawing.Color" />
    ///  结构组成此 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  。
    ///</returns>
    property Entries: TArray<DNColor> read get_Entries;
  end;

  TDNColorPalette = class(TDNGenericImport<DNColorPaletteClass, DNColorPalette>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24E9A650-C428-5F5F-88CD-C510A480FCBA}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  类从指定的全局唯一标识符 (GUID)。
    ///  GUID 指定图像编码器参数类别。
    ///</summary>
    ///  <param name="guid">
    ///  全局唯一标识符，用于标识图像编码器参数类别。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNEncoder;

  { static fields getter & setter } 

   function __fakeFieldGet_Compression: DNEncoder;
   function __fakeFieldGet_ColorDepth: DNEncoder;
   function __fakeFieldGet_ScanMethod: DNEncoder;
   function __fakeFieldGet_Version: DNEncoder;
   function __fakeFieldGet_RenderMethod: DNEncoder;
   function __fakeFieldGet_Quality: DNEncoder;
   function __fakeFieldGet_Transformation: DNEncoder;
   function __fakeFieldGet_LuminanceTable: DNEncoder;
   function __fakeFieldGet_ChrominanceTable: DNEncoder;
   function __fakeFieldGet_SaveFlag: DNEncoder;

  { static fields } 

    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用压缩参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Compression: DNEncoder read __fakeFieldGet_Compression;
    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用颜色深度参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ColorDepth: DNEncoder read __fakeFieldGet_ColorDepth;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用扫描方法参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ScanMethod: DNEncoder read __fakeFieldGet_ScanMethod;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用版本参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Version: DNEncoder read __fakeFieldGet_Version;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用 render 方法参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property RenderMethod: DNEncoder read __fakeFieldGet_RenderMethod;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用质量参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Quality: DNEncoder read __fakeFieldGet_Quality;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用转换参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property Transformation: DNEncoder read __fakeFieldGet_Transformation;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用亮度表参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property LuminanceTable: DNEncoder read __fakeFieldGet_LuminanceTable;
    ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  用色度表参数类别的全局唯一标识符初始化的对象。
    ///</summary>
    {class} property ChrominanceTable: DNEncoder read __fakeFieldGet_ChrominanceTable;
    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  使用保存的全局唯一标识符初始化的对象标志参数类别。
    ///</summary>
    {class} property SaveFlag: DNEncoder read __fakeFieldGet_SaveFlag;

  end;

  ///<summary><see cref="T:System.Drawing.Imaging.Encoder" />
  ///  对象所封装标识图像编码器参数的类别的全局唯一标识符 (GUID)。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.Encoder')]
  DNEncoder = interface(DDN.mscorlib.DNObject)
  ['{673667DC-F729-31F3-8A8C-824C297FFEBB}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取标识图像编码器的全局唯一标识符 (GUID) 参数类别。
    ///</summary>
    ///<returns>
    ///  标识图像编码器参数类别的 GUID。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParameterClass = interface(DNObjectClass)
  ['{47EFB640-614B-569F-A64B-546A1D6032F7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位无符号的整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个 8 位无符号的整数，指定存储中的值 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Byte): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位值。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  或 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定的值存储在一个字节 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="undefined">
    ///  如果 <see langword="true" />
    ///  , 、 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; 否则为 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Byte; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 16 位整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个指定中存储的值的 16 位整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Int16): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 64 位整数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  （32 位），并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定的值存储在一个 64 位整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: Int64): DNEncoderParameter; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和 32 位整数对初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类的新实例。
    ///  整数对表示一个分数，第一个整数为分子，第二个整数为分母。
    ///  将 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  ，并将 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator">
    ///  一个表示分数分子的 32 位整数。
    ///  必须为非负数。
    ///</param>
    ///  <param name="denominator">
    ///  一个表示分数分母的 32 位整数。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator: Int32; denominator: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一对 64 位整数。
    ///  对整数表示整数、 要在范围内，最少数量的第一个整数和第二个要在范围内的最大数的整数的范围。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="rangebegin">
    ///  一个 64 位整数，表示将范围中最少数量的整数。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="rangeend">
    ///  一个 64 位整数表示整数范围中的最大数。
    ///  必须为非负数。
    ///  此参数转换为 32 位整数，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; rangebegin: Int64; rangeend: Int64): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和四个，32 位整数。
    ///  这四个整数表示秒的小数部分的一个范围。
    ///  前两个整数表示在范围内，最小的分数，其余两个整数表示该范围中最大的分数。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为 1。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator1">
    ///  一个 32 位整数，表示该范围中最小的分数的分子。
    ///  必须为非负数。
    ///</param>
    ///  <param name="demoninator1">
    ///  一个 32 位整数，表示该范围中最小的分数的分母。
    ///  必须为非负数。
    ///</param>
    ///  <param name="numerator2">
    ///  一个 32 位整数，表示该范围中最小的分数的分母。
    ///  必须为非负数。
    ///</param>
    ///  <param name="demoninator2">
    ///  一个 32 位整数，表示该范围中最大的分数的分子。
    ///  必须为非负数。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator1: Int32; demoninator1: Int32; numerator2: Int32; demoninator2: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个字符的字符串。
    ///  此字符串将转换为以 null 结尾的 ASCII 字符串，然后将存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeAscii" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为包括 NULL 终止符的 ASCII 字符串的长度。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.String" />
    ///  ，指定的值存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: string): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 8 位无符号整数的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 8 位无符号整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个字节数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  或 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的字节数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="undefined">
    ///  如果 <see langword="true" />
    ///  , 、 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; 否则为 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和一个 16 位整数数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 16 位整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负整数数组中。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Int16>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和 64 位整数的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  （32-位），并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为数组中元素的数目。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="value">
    ///  指定存储中的值的 64 位整数数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    {class} function init(encoder: DNEncoder; value: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和两个 32 位整数数组。
    ///  这两个数组表示秒的小数部分的数组。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="numerator" />
    ///  数组，它必须是元素的数目相同中 <paramref name="denominator" />
    ///  数组。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator">
    ///  指定的秒的小数部分分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator">
    ///  指定的秒的小数部分分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///  给定索引的分母配合分子相同的索引。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator: TArray<Int32>; denominator: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和两个 64 位整数数组。
    ///  这两个数组表示一组整数范围。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="rangebegin" />
    ///  数组，它必须是元素的数目相同中 <paramref name="rangeend" />
    ///  数组。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="rangebegin">
    ///  指定整数范围中的最小值的 64 位整数数组。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</param>
    ///  <param name="rangeend">
    ///  指定整数范围中的最大值的 64 位整数数组。
    ///  必须为非负整数数组中。
    ///  64 位整数转换为 32 位整数，然后将它们存储在 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象。
    ///  给定索引的最大值与相同的索引的最小值配对。
    ///</param>
    {class} function init(encoder: DNEncoder; rangebegin: TArray<Int64>; rangeend: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和四个 32 位整数数组。
    ///  这四个数组表示一个数组有理范围。
    ///  合理的范围是从最小小数部分值的最大的小数部分值通过所有分数的集合。
    ///  设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为 <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , ，并设置 <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性中的元素数 <paramref name="numerator1" />
    ///  数组，它必须是与其他三个数组中的元素数相同。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numerator1">
    ///  指定该范围中的最小值的分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator1">
    ///  指定该范围中的最小值的分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="numerator2">
    ///  指定该范围中的最大值的分子的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    ///  <param name="denominator2">
    ///  指定该范围中的最大值的分母的 32 位整数数组。
    ///  必须为非负整数数组中。
    ///</param>
    {class} function init(encoder: DNEncoder; numerator1: TArray<Int32>; denominator1: TArray<Int32>; numerator2: TArray<Int32>; denominator2: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象和指定多个值，值，以及指向中存储的值的指针的数据类型的三个整数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="NumberOfValues">
    ///  一个整数，指定存储中的值的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="Type">
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  指定中存储的值的数据类型的枚举 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Type" />
    ///  和 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="Value">
    ///  指向由指定类型的值的数组的指针 <paramref name="Type" />
    ///  参数。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  类型不是有效 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  。
    ///</exception>
    {class} function init(encoder: DNEncoder; NumberOfValues: Int32; &Type: Int32; Value: Int32): DNEncoderParameter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  类与指定 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象、 值的数量、 数据类型的值，以及指向中存储的值的指针 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="encoder">
    ///  一个 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，用于封装参数类别的全局唯一标识符。
    ///</param>
    ///  <param name="numberValues">
    ///  一个整数，指定存储中的值的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="type">
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  指定中存储的值的数据类型的枚举 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Type" />
    ///  和 <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  属性设置为此值。
    ///</param>
    ///  <param name="value">
    ///  指向由指定类型的值的数组的指针 <paramref name="Type" />
    ///  参数。
    ///</param>
    {class} function init(encoder: DNEncoder; numberValues: Int32; &type: DNEncoderParameterValueType; value: IntPtr): DNEncoderParameter; overload;

  end;

  ///<summary>
  ///  用于将一个值或一个值，数组传递给图像编码器。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameter')]
  DNEncoderParameter = interface(DDN.mscorlib.DNIDisposable)
  ['{81498B35-5C97-31F7-B6AA-9737D41547EB}']
  { getters & setters } 

    function get_Encoder: DNEncoder;
    procedure set_Encoder(value: DNEncoder);
    function get_Type: DNEncoderParameterValueType;
    function get_ValueType: DNEncoderParameterValueType;
    function get_NumberOfValues: Int32;

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象与此相关 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///<see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象所封装的全局唯一标识符 (GUID) 指定的类别 (例如 <see cref="F:System.Drawing.Imaging.Encoder.Quality" />
    ///  , ，<see cref="F:System.Drawing.Imaging.Encoder.ColorDepth" />
    ///  , ，或 <see cref="F:System.Drawing.Imaging.Encoder.Compression" />
    ///  ) 存储在此参数的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.Encoder" />
    ///  对象，它封装指定的类别存储在此参数的 GUID <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property Encoder: DNEncoder read get_Encoder write set_Encoder;
    ///<summary>
    ///  获取在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  枚举，指示在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property &Type: DNEncoderParameterValueType read get_Type;
    ///<summary>
    ///  获取在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  枚举，指示在此存储的值的数据类型 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property ValueType: DNEncoderParameterValueType read get_ValueType;
    ///<summary>
    ///  获取的值存储在此数组中元素的数目 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个整数，指示的值存储在此数组中的元素数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property NumberOfValues: Int32 read get_NumberOfValues;
  end;

  TDNEncoderParameter = class(TDNGenericImport<DNEncoderParameterClass, DNEncoderParameter>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParametersClass = interface(DNObjectClass)
  ['{AB2EF01F-00D9-5693-B2FA-09F4A916F9E6}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  类可以包含指定的数量的 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///  <param name="count">
    ///  一个整数，指定的数 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象可以包含。
    ///</param>
    {class} function init(count: Int32): DNEncoderParameters; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  类可以包含一个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    {class} function init: DNEncoderParameters; overload;

  end;

  ///<summary>
  ///  封装的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameters')]
  DNEncoderParameters = interface(DDN.mscorlib.DNIDisposable)
  ['{809106FA-A250-36F7-BEB3-4B323D20606C}']
  { getters & setters } 

    function get_Param: TArray<DNEncoderParameter>;
    procedure set_Param(value: TArray<DNEncoderParameter>);

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///</returns>
    property Param: TArray<DNEncoderParameter> read get_Param write set_Param;
  end;

  TDNEncoderParameters = class(TDNGenericImport<DNEncoderParametersClass, DNEncoderParameters>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNFrameDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C5EB92-BC52-5E9B-9698-1CFAFBCDCA03}']
  { static getter & setter } 

    {class} function get_Time: DNFrameDimension;
    {class} function get_Resolution: DNFrameDimension;
    {class} function get_Page: DNFrameDimension;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  类使用指定 <see langword="Guid" />
    ///  结构。
    ///</summary>
    ///  <param name="guid">
    ///  一个 <see langword="Guid" />
    ///  结构，它包含此 GUID <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNFrameDimension;

  { static propertys } 

    ///<summary>
    ///  获取时间维度。
    ///</summary>
    ///<returns>
    ///  时间维度中。
    ///</returns>
    {class} property Time: DNFrameDimension read get_Time;
    ///<summary>
    ///  获取解析维度。
    ///</summary>
    ///<returns>
    ///  分辨率维度。
    ///</returns>
    {class} property Resolution: DNFrameDimension read get_Resolution;
    ///<summary>
    ///  获取页维度。
    ///</summary>
    ///<returns>
    ///  页面维度。
    ///</returns>
    {class} property Page: DNFrameDimension read get_Page;
  end;

  ///<summary>
  ///  提供了获取图像的框架维度的属性。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.FrameDimension')]
  DNFrameDimension = interface(DDN.mscorlib.DNObject)
  ['{46DCD9AD-47E5-3ACD-95F1-1D9D21950994}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示指定的对象是否为 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  等效于此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///  <param name="o">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  等效于此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="int" />
    ///  该键的哈希代码值 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取表示此全局唯一标识符 (GUID) <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="Guid" />
    ///  结构，其中包含一个 GUID，表示此 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  对象。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNFrameDimension = class(TDNGenericImport<DNFrameDimensionClass, DNFrameDimension>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageAttributesClass = interface(DNObjectClass)
  ['{64FD85C9-5B18-5481-8629-5F2381840509}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNImageAttributes;

  end;

  ///<summary>
  ///  包含有关在呈现时如何操作位图和图元文件颜色的信息。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageAttributes')]
  DNImageAttributes = interface(DDN.mscorlib.DNICloneable)
  ['{F8730A05-D36D-3ED8-97B3-A0C36EC3A959}']
  { methods } 

    ///<summary>
    ///  为指定类别设置颜色调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  的元素，它指定将受颜色调整矩阵影响的图像和颜色的类型。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置颜色调整矩阵的类别。
    ///</param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为指定类别清除颜色键（透明范围）。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除颜色键的类别。
    ///</param>
    procedure ClearColorKey(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此类创建的 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象，作为一个对象来转换。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  为默认类别设置颜色调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix); overload;
    ///<summary>
    ///  为默认类别设置颜色调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  的元素，它指定将受颜色调整矩阵影响的图像和颜色的类型。
    ///</param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    ///<summary>
    ///  为默认类别清除颜色调整矩阵。
    ///</summary>
    procedure ClearColorMatrix; overload;
    ///<summary>
    ///  清除指定类别的颜色调整矩阵。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除颜色调整矩阵的类别。
    ///</param>
    procedure ClearColorMatrix(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置颜色调整矩阵和灰度调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    ///  <param name="grayMatrix">
    ///  灰度调整矩阵。
    ///</param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix); overload;
    ///<summary>
    ///  为默认类别设置颜色调整矩阵和灰度调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    ///  <param name="grayMatrix">
    ///  灰度调整矩阵。
    ///</param>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  的元素，它指定将受颜色调整矩阵和灰度调整矩阵影响的图像和颜色的类型。
    ///</param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    ///<summary>
    ///  为指定类别设置颜色调整矩阵和灰度调整矩阵。
    ///</summary>
    ///  <param name="newColorMatrix">
    ///  颜色调整矩阵。
    ///</param>
    ///  <param name="grayMatrix">
    ///  灰度调整矩阵。
    ///</param>
    ///  <param name="mode"><see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  的元素，它指定将受颜色调整矩阵和灰度调整矩阵影响的图像和颜色的类型。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置颜色调整矩阵和灰度调整矩阵的类别。
    ///</param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置阈值（透明范围）。
    ///</summary>
    ///  <param name="threshold">
    ///  指定阈值的实数。
    ///</param>
    procedure SetThreshold(threshold: Single); overload;
    ///<summary>
    ///  为指定类别设置阈值（透明范围）。
    ///</summary>
    ///  <param name="threshold">
    ///  0.0 到 1.0 之间的阈值，用作一个断点，以便对将映射为最大值或最小值的颜色进行排序。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置颜色阈值的类别。
    ///</param>
    procedure SetThreshold(threshold: Single; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别清除阈值。
    ///</summary>
    procedure ClearThreshold; overload;
    ///<summary>
    ///  为指定类别清除阈值。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除阈值的类别。
    ///</param>
    procedure ClearThreshold(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置伽玛值。
    ///</summary>
    ///  <param name="gamma">
    ///  灰度校正值。
    ///</param>
    procedure SetGamma(gamma: Single); overload;
    ///<summary>
    ///  为指定类别设置伽玛值。
    ///</summary>
    ///  <param name="gamma">
    ///  灰度校正值。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  枚举的一个元素，指定将设置伽玛值的类别。
    ///</param>
    procedure SetGamma(gamma: Single; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别禁用灰度校正。
    ///</summary>
    procedure ClearGamma; overload;
    ///<summary>
    ///  为指定类别禁用灰度校正。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将禁用灰度校正的类别。
    ///</param>
    procedure ClearGamma(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别关闭颜色调整。
    ///  可以调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
    ///  方法恢复在调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
    ///  方法前已存在的颜色调整设置。
    ///</summary>
    procedure SetNoOp; overload;
    ///<summary>
    ///  为指定类别关闭颜色调整。
    ///  可以调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
    ///  方法恢复在调用 <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
    ///  方法前已存在的颜色调整设置。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将关闭颜色校正的类别。
    ///</param>
    procedure SetNoOp(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  清除默认类别的 <see langword="NoOp" />
    ///  设置。
    ///</summary>
    procedure ClearNoOp; overload;
    ///<summary>
    ///  清除指定类别的 <see langword="NoOp" />
    ///  设置。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除 <see langword="NoOp" />
    ///  设置的类别。
    ///</param>
    procedure ClearNoOp(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置颜色键。
    ///</summary>
    ///  <param name="colorLow">
    ///  低颜色键值。
    ///</param>
    ///  <param name="colorHigh">
    ///  高颜色键值。
    ///</param>
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor); overload;
    ///<summary>
    ///  为指定类别设置颜色键（透明范围）。
    ///</summary>
    ///  <param name="colorLow">
    ///  低颜色键值。
    ///</param>
    ///  <param name="colorHigh">
    ///  高颜色键值。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置颜色键的类别。
    ///</param>
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别清除颜色键（透明范围）。
    ///</summary>
    procedure ClearColorKey; overload;
    ///<summary>
    ///  为默认类别设置 CMYK（青色-洋红色-黄色-黑色）输出通道。
    ///</summary>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ColorChannelFlag" />
    ///  的一个元素，指定输出通道。
    ///</param>
    procedure SetOutputChannel(flags: DNColorChannelFlag); overload;
    ///<summary>
    ///  为指定的类别设置 CMYK（青色-洋红色-黄色-黑色）输出通道。
    ///</summary>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ColorChannelFlag" />
    ///  的一个元素，指定输出通道。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置输出通道的类别。
    ///</param>
    procedure SetOutputChannel(flags: DNColorChannelFlag; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别清除 CMYK（青色-洋红色-黄色-黑色）输出通道设置。
    ///</summary>
    procedure ClearOutputChannel; overload;
    ///<summary>
    ///  为指定类别清除（青色-洋红色-黄色-黑色）输出通道设置。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除输出通道设置的类别。
    ///</param>
    procedure ClearOutputChannel(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置输出通道颜色配置文件。
    ///</summary>
    ///  <param name="colorProfileFilename">
    ///  颜色配置文件的路径名。
    ///  如果颜色配置文件位于 %SystemRoot%\System32\Spool\Drivers\Color 目录中，则该参数可以是该文件的文件名。
    ///  否则，该参数必须是完全限定的路径名。
    ///</param>
    procedure SetOutputChannelColorProfile(colorProfileFilename: string); overload;
    ///<summary>
    ///  为指定类别设置输出通道颜色配置文件。
    ///</summary>
    ///  <param name="colorProfileFilename">
    ///  颜色配置文件的路径名。
    ///  如果颜色配置文件位于 %SystemRoot%\System32\Spool\Drivers\Color 目录中，则该参数可以是该文件的文件名。
    ///  否则，该参数必须是完全限定的路径名。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置输出通道颜色配置文件的类别。
    ///</param>
    procedure SetOutputChannelColorProfile(colorProfileFilename: string; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别清除输出通道颜色配置文件设置。
    ///</summary>
    procedure ClearOutputChannelColorProfile; overload;
    ///<summary>
    ///  为指定类别清除输出通道颜色配置文件设置。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除输出通道配置文件设置的类别。
    ///</param>
    procedure ClearOutputChannelColorProfile(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别设置颜色重新映射表。
    ///</summary>
    ///  <param name="map"><see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  类型的颜色对数组。
    ///  每个颜色对包含现有的颜色（第一个值）和它将映射到的颜色（第二个值）。
    ///</param>
    procedure SetRemapTable(map: TArray<DNColorMap>); overload;
    ///<summary>
    ///  为指定类别设置颜色重新映射表。
    ///</summary>
    ///  <param name="map"><see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  类型的颜色对数组。
    ///  每个颜色对包含现有的颜色（第一个值）和它将映射到的颜色（第二个值）。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将设置颜色重新映射表的类别。
    ///</param>
    procedure SetRemapTable(map: TArray<DNColorMap>; &type: DNColorAdjustType); overload;
    ///<summary>
    ///  为默认类别清除颜色重新映射表。
    ///</summary>
    procedure ClearRemapTable; overload;
    ///<summary>
    ///  为指定类别清除颜色重新映射表。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定将清除重新映射表的类别。
    ///</param>
    procedure ClearRemapTable(&type: DNColorAdjustType); overload;
    ///<summary>
    ///  为画笔类别设置颜色重新映射表。
    ///</summary>
    ///  <param name="map">
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  对象数组。
    ///</param>
    procedure SetBrushRemapTable(map: TArray<DNColorMap>);
    ///<summary>
    ///  清除该 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象的画笔颜色重新映射表。
    ///</summary>
    procedure ClearBrushRemapTable;
    ///<summary>
    ///  设置环绕模式，该模式用于决定如何将纹理平铺到一个形状上或平铺到形状的边界上。
    ///  当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。
    ///</summary>
    ///  <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  的一个元素，它指定使用重复的图像副本平铺区域的方式。
    ///</param>
    procedure SetWrapMode(mode: DNWrapMode); overload;
    ///<summary>
    ///  设置环绕模式和颜色，用于决定如何将纹理平铺到一个形状上，或平铺到形状的边界上。
    ///  当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。
    ///</summary>
    ///  <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  的一个元素，它指定使用重复的图像副本平铺区域的方式。
    ///</param>
    ///  <param name="color">
    ///  一个 <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象，指定所呈现图像外部的像素的颜色。
    ///  如果模式参数设置为 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />
    ///  并且传递给 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  的源矩形大于图像本身，则该颜色可见。
    ///</param>
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor); overload;
    ///<summary>
    ///  设置环绕模式和颜色，用于决定如何将纹理平铺到一个形状上，或平铺到形状的边界上。
    ///  当纹理小于它所填充的形状时，纹理在该形状上平铺以填满该形状。
    ///</summary>
    ///  <param name="mode"><see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  的一个元素，它指定使用重复的图像副本平铺区域的方式。
    ///</param>
    ///  <param name="color">
    ///  一个 Color 对象，指定所呈现图像外部的像素的颜色。
    ///  如果模式参数设置为 <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />
    ///  并且传递给 <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  的源矩形大于图像本身，则该颜色可见。
    ///</param>
    ///  <param name="clamp">
    ///  此参数不起作用。
    ///  将其设置为 <see langword="false" />
    ///  。
    ///</param>
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor; clamp: Boolean); overload;
    ///<summary>
    ///  根据指定类别的调整设置，调整调色板中的颜色。
    ///</summary>
    ///  <param name="palette"><see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，在输入时包含要调整的调色板，在输出时包含已调整的调色板。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  的一个元素，指定其调整设置将应用于调色板的类别。
    ///</param>
    procedure GetAdjustedPalette(palette: DNColorPalette; &type: DNColorAdjustType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAttributes = class(TDNGenericImport<DNImageAttributesClass, DNImageAttributes>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageCodecInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8865BE7-D8A2-5329-820A-E3B1F73D98DD}']
  { static methods } 

    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象，其中包含有关内置在 GDI + 的图像解码器的信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象数组。
    ///  每个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  数组中的对象包含有关某一个内置图像解码器的信息。
    ///</returns>
    {class} function GetImageDecoders: TArray<DNImageCodecInfo>;
    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象，其中包含有关内置在 GDI + 的图像编码器的信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  对象数组。
    ///  每个 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  数组中的对象包含有关某一个内置图像编码器的信息。
    ///</returns>
    {class} function GetImageEncoders: TArray<DNImageCodecInfo>;

  end;

  ///<summary><see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
  ///  类提供必要的存储成员和方法来检索有关已安装的图像编码器和解码器 （称为编解码器） 的所有相关信息。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageCodecInfo')]
  DNImageCodecInfo = interface(DDN.mscorlib.DNObject)
  ['{537B3612-FB61-3670-ADA4-71FFA9B084A4}']
  { getters & setters } 

    function get_Clsid: DDN.mscorlib.DNGuid;
    procedure set_Clsid(value: DDN.mscorlib.DNGuid);
    function get_FormatID: DDN.mscorlib.DNGuid;
    procedure set_FormatID(value: DDN.mscorlib.DNGuid);
    function get_CodecName: string;
    procedure set_CodecName(value: string);
    function get_DllName: string;
    procedure set_DllName(value: string);
    function get_FormatDescription: string;
    procedure set_FormatDescription(value: string);
    function get_FilenameExtension: string;
    procedure set_FilenameExtension(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Flags: DNImageCodecFlags;
    procedure set_Flags(value: DNImageCodecFlags);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_SignaturePatterns: TArray<TArray<Byte>>;
    procedure set_SignaturePatterns(value: TArray<TArray<Byte>>);
    function get_SignatureMasks: TArray<TArray<Byte>>;
    procedure set_SignatureMasks(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Guid" />
    ///  结构，其中包含标识特定的编码解码器的 GUID。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，其中包含标识特定的编码解码器的 GUID。
    ///</returns>
    property Clsid: DDN.mscorlib.DNGuid read get_Clsid write set_Clsid;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Guid" />
    ///  结构，其中包含标识的编解码器格式的 GUID。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，其中包含标识的编解码器格式的 GUID。
    ///</returns>
    property FormatID: DDN.mscorlib.DNGuid read get_FormatID write set_FormatID;
    ///<summary>
    ///  获取或设置一个字符串，包含的编解码器的名称。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的编解码器的名称。
    ///</returns>
    property CodecName: string read get_CodecName write set_CodecName;
    ///<summary>
    ///  获取或设置字符串，其中包含存放编解码器的 DLL 的路径名称。
    ///  如果编解码器不是在 DLL 中，该指针是 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个字符串，其中包含存放编解码器的 DLL 的路径名称。
    ///</returns>
    property DllName: string read get_DllName write set_DllName;
    ///<summary>
    ///  获取或设置一个字符串，描述编解码器的文件格式。
    ///</summary>
    ///<returns>
    ///  一个字符串，描述编解码器的文件格式。
    ///</returns>
    property FormatDescription: string read get_FormatDescription write set_FormatDescription;
    ///<summary>
    ///  获取或设置包含编码解码器中使用的文件扩展名的字符串。
    ///  扩展之间用分号分隔。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的文件扩展名用于编解码器。
    ///</returns>
    property FilenameExtension: string read get_FilenameExtension write set_FilenameExtension;
    ///<summary>
    ///  获取或设置一个字符串，包含的编解码器的多用途 Internet 邮件扩展 (MIME) 类型。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的编解码器的多用途 Internet 邮件扩展 (MIME) 类型。
    ///</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>
    ///  获取或设置用于存储有关编解码器的其他信息的 32 位值。
    ///  此属性返回中标志的组合 <see cref="T:System.Drawing.Imaging.ImageCodecFlags" />
    ///  枚举。
    ///</summary>
    ///<returns>
    ///  一个 32 位值，用于存储有关编解码器的其他信息。
    ///</returns>
    property Flags: DNImageCodecFlags read get_Flags write set_Flags;
    ///<summary>
    ///  获取或设置编解码器的版本号。
    ///</summary>
    ///<returns>
    ///  编解码器的版本号。
    ///</returns>
    property Version: Int32 read get_Version write set_Version;
    ///<summary>
    ///  获取或设置两个字节表示的签名的编解码器的二维数组。
    ///</summary>
    ///<returns>
    ///  两个字节表示的签名的编解码器的二维数组。
    ///</returns>
    property SignaturePatterns: TArray<TArray<Byte>> read get_SignaturePatterns write set_SignaturePatterns;
    ///<summary>
    ///  获取或设置两个二维可以用作筛选器的字节数组。
    ///</summary>
    ///<returns>
    ///  两个二维可以用作筛选器的字节数组。
    ///</returns>
    property SignatureMasks: TArray<TArray<Byte>> read get_SignatureMasks write set_SignatureMasks;
  end;

  TDNImageCodecInfo = class(TDNGenericImport<DNImageCodecInfoClass, DNImageCodecInfo>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25FC6ED2-3943-578C-9A01-211CB8B0A6F6}']
  { static getter & setter } 

    {class} function get_MemoryBmp: DNImageFormat;
    {class} function get_Bmp: DNImageFormat;
    {class} function get_Emf: DNImageFormat;
    {class} function get_Wmf: DNImageFormat;
    {class} function get_Gif: DNImageFormat;
    {class} function get_Jpeg: DNImageFormat;
    {class} function get_Png: DNImageFormat;
    {class} function get_Tiff: DNImageFormat;
    {class} function get_Exif: DNImageFormat;
    {class} function get_Icon: DNImageFormat;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  使用指定的类 <see cref="T:System.Guid" />
    ///  结构。
    ///</summary>
    ///  <param name="guid"><see cref="T:System.Guid" />
    ///  结构，它指定特定图像格式。
    ///</param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNImageFormat;

  { static propertys } 

    ///<summary>
    ///  获取在内存中的位图的格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示在内存中的位图的格式。
    ///</returns>
    {class} property MemoryBmp: DNImageFormat read get_MemoryBmp;
    ///<summary>
    ///  获取位图 (BMP) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示位图图像格式。
    ///</returns>
    {class} property Bmp: DNImageFormat read get_Bmp;
    ///<summary>
    ///  获取增强型图元文件 (EMF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示增强型图元文件图像格式。
    ///</returns>
    {class} property Emf: DNImageFormat read get_Emf;
    ///<summary>
    ///  获取 Windows 图元文件 (WMF) 映像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Windows 图元文件图像格式。
    ///</returns>
    {class} property Wmf: DNImageFormat read get_Wmf;
    ///<summary>
    ///  获取图形交换格式 (GIF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 GIF 图像格式。
    ///</returns>
    {class} property Gif: DNImageFormat read get_Gif;
    ///<summary>
    ///  获取联合图像专家组 (JPEG) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 JPEG 图像格式。
    ///</returns>
    {class} property Jpeg: DNImageFormat read get_Jpeg;
    ///<summary>
    ///  获取 W3C 可移植网络图形 (PNG) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 PNG 图像格式。
    ///</returns>
    {class} property Png: DNImageFormat read get_Png;
    ///<summary>
    ///  获取标记图像文件格式 (TIFF) 图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 TIFF 图像格式。
    ///</returns>
    {class} property Tiff: DNImageFormat read get_Tiff;
    ///<summary>
    ///  获取可交换图像文件 (Exif) 格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Exif 格式。
    ///</returns>
    {class} property Exif: DNImageFormat read get_Exif;
    ///<summary>
    ///  获取 Windows 图标图像格式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它指示 Windows 图标图像格式。
    ///</returns>
    {class} property Icon: DNImageFormat read get_Icon;
  end;

  ///<summary>
  ///  指定图像文件格式。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.ImageFormat')]
  DNImageFormat = interface(DDN.mscorlib.DNObject)
  ['{EBB52948-9B23-3FA2-A8D3-F339D076BDA1}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示指定的对象是否为 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它等效于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="o">
    ///  要测试的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象，它等效于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回一个表示此对象的哈希代码值。
    ///</summary>
    ///<returns>
    ///  表示此对象哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Guid" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Guid" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  对象。
    ///</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNImageFormat = class(TDNGenericImport<DNImageFormatClass, DNImageFormat>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D930988B-9641-52BA-BDC2-94C1D02C11B8}']
  end;

  ///<summary>
  ///  包含属性相关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileHeader')]
  DNMetafileHeader = interface(DDN.mscorlib.DNObject)
  ['{F749C549-2F5E-3D94-970D-D1C8FF510A13}']
  { getters & setters } 

    function get_Type: DNMetafileType;
    function get_MetafileSize: Int32;
    function get_Version: Int32;
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Bounds: DNRectangle;
    function get_WmfHeader: DNMetaHeader;
    function get_EmfPlusHeaderSize: Int32;
    function get_LogicalDpiX: Int32;
    function get_LogicalDpiY: Int32;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  采用 Windows 图元文件格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  采用 Windows 图元文件格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsWmf: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  是 Windows 可放置的图元文件格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  是 Windows 可放置的图元文件格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsWmfPlaceable: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  采用 Windows 增强型图元文件格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  采用 Windows 增强型图元文件格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEmf: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  处于 Windows 增强型图元文件格式或 Windows 增强型图元文件以及格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  处于 Windows 增强型图元文件格式或 Windows 增强型图元文件以及格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEmfOrEmfPlus: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  处于 Windows 增强型图元文件和格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  处于 Windows 增强型图元文件以及格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEmfPlus: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  采用双增强型图元文件格式。
    ///  此格式支持增强和增强型 plus 格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  双增强型图元文件格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEmfPlusDual: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  支持仅 Windows 增强型图元文件和格式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  支持仅 Windows 增强型图元文件以及格式; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEmfPlusOnly: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  是否与设备相关。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  是设备依赖; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDisplay: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取关联的类型 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileType" />
    ///  表示关联的类型的枚举 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property &Type: DNMetafileType read get_Type;
    ///<summary>
    ///  获取大小，以字节为单位，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  大小，以字节为单位，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property MetafileSize: Int32 read get_MetafileSize;
    ///<summary>
    ///  获取关联的版本号 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  关联的版本号 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property Version: Int32 read get_Version;
    ///<summary>
    ///  获取水平分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  水平分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property DpiX: Single read get_DpiX;
    ///<summary>
    ///  获取以每英寸点数，关联的垂直分辨率， <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property DpiY: Single read get_DpiY;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Rectangle" />
    ///  ，限定关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，限定关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>
    ///  获取为关联的 Windows 图元文件 (WMF) 标头文件 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.MetaHeader" />
    ///  ，其中包含关联的 WMF 标头文件 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property WmfHeader: DNMetaHeader read get_WmfHeader;
    ///<summary>
    ///  获取大小，以字节为单位的增强型图元文件和头文件。
    ///</summary>
    ///<returns>
    ///  大小 （以字节为单位的增强型图元文件和头文件）。
    ///</returns>
    property EmfPlusHeaderSize: Int32 read get_EmfPlusHeaderSize;
    ///<summary>
    ///  获取逻辑的水平分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  逻辑的水平分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property LogicalDpiX: Int32 read get_LogicalDpiX;
    ///<summary>
    ///  获取逻辑的垂直分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  逻辑的垂直分辨率，以每英寸点数，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    property LogicalDpiY: Int32 read get_LogicalDpiY;
  end;

  TDNMetafileHeader = class(TDNGenericImport<DNMetafileHeaderClass, DNMetafileHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetaHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6928A08A-60A0-5685-9949-5EDCD878DA0F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="MetaHeader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMetaHeader;

  end;

  ///<summary>
  ///  包含有关 windows 格式 (WMF) 图元文件的信息。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.MetaHeader')]
  DNMetaHeader = interface(DDN.mscorlib.DNObject)
  ['{238A9696-BFF3-30AB-81F2-AA745499233B}']
  { getters & setters } 

    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_HeaderSize: Int16;
    procedure set_HeaderSize(value: Int16);
    function get_Version: Int16;
    procedure set_Version(value: Int16);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_NoObjects: Int16;
    procedure set_NoObjects(value: Int16);
    function get_MaxRecord: Int32;
    procedure set_MaxRecord(value: Int32);
    function get_NoParameters: Int16;
    procedure set_NoParameters(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置关联的类型 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  关联的类型 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</returns>
    property &Type: Int16 read get_Type write set_Type;
    ///<summary>
    ///  获取或设置大小，以字节为单位的头文件。
    ///</summary>
    ///<returns>
    ///  大小 （以字节为单位的头文件）。
    ///</returns>
    property HeaderSize: Int16 read get_HeaderSize write set_HeaderSize;
    ///<summary>
    ///  获取或设置标头格式的版本号。
    ///</summary>
    ///<returns>
    ///  标头格式的版本号。
    ///</returns>
    property Version: Int16 read get_Version write set_Version;
    ///<summary>
    ///  获取或设置大小，以字节为单位，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  大小，以字节为单位，关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  获取或设置中存在的对象的最大数目 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  在同一时间的对象。
    ///</summary>
    ///<returns>
    ///  中存在的对象的最大数目 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  在同一时间的对象。
    ///</returns>
    property NoObjects: Int16 read get_NoObjects write set_NoObjects;
    ///<summary>
    ///  获取或设置大小，以字节为单位的最大记录在关联 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  大小 （字节） 关联的最大记录 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  对象。
    ///</returns>
    property MaxRecord: Int32 read get_MaxRecord write set_MaxRecord;
    ///<summary>
    ///  未使用。
    ///  始终返回 0。
    ///</summary>
    ///<returns>
    ///  始终为 0。
    ///</returns>
    property NoParameters: Int16 read get_NoParameters write set_NoParameters;
  end;

  TDNMetaHeader = class(TDNGenericImport<DNMetaHeaderClass, DNMetaHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNPropertyItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47C1C0A9-9953-5D4C-A0AD-BD082331D0C9}']
  end;

  ///<summary>
  ///  封装要将图像文件中包含的元数据属性。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.PropertyItem')]
  DNPropertyItem = interface(DDN.mscorlib.DNObject)
  ['{8167BE6A-869C-366B-9369-37CA48FFC88C}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_Len: Int32;
    procedure set_Len(value: Int32);
    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的属性 ID。
    ///</summary>
    ///<returns>
    ///  一个整数，表示该属性的 ID。
    ///</returns>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  获取或设置的长度 （以字节为单位） <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个整数，表示的长度 （以字节为单位） <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  字节数组。
    ///</returns>
    property Len: Int32 read get_Len write set_Len;
    ///<summary>
    ///  获取或设置一个整数，定义中包含的数据类型 <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个整数，定义中包含的数据类型 <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  。
    ///</returns>
    property &Type: Int16 read get_Type write set_Type;
    ///<summary>
    ///  获取或设置属性项的值。
    ///</summary>
    ///<returns>
    ///  一个表示属性项的值的字节数组。
    ///</returns>
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNPropertyItem = class(TDNGenericImport<DNPropertyItemClass, DNPropertyItem>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNWmfPlaceableFileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF04ADAF-7FD3-5524-854F-F9D8D3EE7A41}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="WmfPlaceableFileHeader" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWmfPlaceableFileHeader;

  end;

  ///<summary>
  ///  定义可放置的图元文件。
  ///  不可继承。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.WmfPlaceableFileHeader')]
  DNWmfPlaceableFileHeader = interface(DDN.mscorlib.DNObject)
  ['{4EC535F9-C5FC-3378-B06A-011F02BA919D}']
  { getters & setters } 

    function get_Key: Int32;
    procedure set_Key(value: Int32);
    function get_Hmf: Int16;
    procedure set_Hmf(value: Int16);
    function get_BboxLeft: Int16;
    procedure set_BboxLeft(value: Int16);
    function get_BboxTop: Int16;
    procedure set_BboxTop(value: Int16);
    function get_BboxRight: Int16;
    procedure set_BboxRight(value: Int16);
    function get_BboxBottom: Int16;
    procedure set_BboxBottom(value: Int16);
    function get_Inch: Int16;
    procedure set_Inch(value: Int16);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);
    function get_Checksum: Int16;
    procedure set_Checksum(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值可放置的图元文件标头。
    ///</summary>
    ///<returns>
    ///  指示存在可放置的图元文件标头的值。
    ///</returns>
    property Key: Int32 read get_Key write set_Key;
    ///<summary>
    ///  获取或设置在内存中的图元文件的句柄。
    ///</summary>
    ///<returns>
    ///  在内存中的图元文件的句柄。
    ///</returns>
    property Hmf: Int16 read get_Hmf write set_Hmf;
    ///<summary>
    ///  获取或设置输出设备上的图元文件图像的边框的左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  输出设备上图元文件图像的边框的左上角 x 坐标。
    ///</returns>
    property BboxLeft: Int16 read get_BboxLeft write set_BboxLeft;
    ///<summary>
    ///  获取或设置输出设备上的图元文件图像的边框的左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  输出设备上图元文件图像的边框的左上角 y 坐标。
    ///</returns>
    property BboxTop: Int16 read get_BboxTop write set_BboxTop;
    ///<summary>
    ///  获取或设置输出设备上的图元文件图像的边框的右下角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  在输出设备上的图元文件图像的边框的右下角的 x 坐标值。
    ///</returns>
    property BboxRight: Int16 read get_BboxRight write set_BboxRight;
    ///<summary>
    ///  获取或设置输出设备上的图元文件图像的边框的右下角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  在输出设备上的图元文件图像的边框的右下角的 y 坐标值。
    ///</returns>
    property BboxBottom: Int16 read get_BboxBottom write set_BboxBottom;
    ///<summary>
    ///  获取或设置的每英寸点数缇数。
    ///</summary>
    ///<returns>
    ///  缇每英寸点数为单位数。
    ///</returns>
    property Inch: Int16 read get_Inch write set_Inch;
    ///<summary>
    ///  保留。
    ///  请勿使用。
    ///</summary>
    ///<returns>
    ///  保留。
    ///  请勿使用。
    ///</returns>
    property Reserved: Int32 read get_Reserved write set_Reserved;
    ///<summary>
    ///  获取或设置校验和值的上一个 10 <see langword="WORD" />
    ///  头。
    ///</summary>
    ///<returns>
    ///  校验和值前 10 个 <see langword="WORD" />
    ///  头。
    ///</returns>
    property Checksum: Int16 read get_Checksum write set_Checksum;
  end;

  TDNWmfPlaceableFileHeader = class(TDNGenericImport<DNWmfPlaceableFileHeaderClass, DNWmfPlaceableFileHeader>) end;

  //-------------namespace: System.Drawing----------------
  DNPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6072B564-E9D4-544C-8D0A-CD686B6C4D0E}']
  { static getter & setter } 

    {class} function get_Transparent: DNPen;
    {class} function get_AliceBlue: DNPen;
    {class} function get_AntiqueWhite: DNPen;
    {class} function get_Aqua: DNPen;
    {class} function get_Aquamarine: DNPen;
    {class} function get_Azure: DNPen;
    {class} function get_Beige: DNPen;
    {class} function get_Bisque: DNPen;
    {class} function get_Black: DNPen;
    {class} function get_BlanchedAlmond: DNPen;
    {class} function get_Blue: DNPen;
    {class} function get_BlueViolet: DNPen;
    {class} function get_Brown: DNPen;
    {class} function get_BurlyWood: DNPen;
    {class} function get_CadetBlue: DNPen;
    {class} function get_Chartreuse: DNPen;
    {class} function get_Chocolate: DNPen;
    {class} function get_Coral: DNPen;
    {class} function get_CornflowerBlue: DNPen;
    {class} function get_Cornsilk: DNPen;
    {class} function get_Crimson: DNPen;
    {class} function get_Cyan: DNPen;
    {class} function get_DarkBlue: DNPen;
    {class} function get_DarkCyan: DNPen;
    {class} function get_DarkGoldenrod: DNPen;
    {class} function get_DarkGray: DNPen;
    {class} function get_DarkGreen: DNPen;
    {class} function get_DarkKhaki: DNPen;
    {class} function get_DarkMagenta: DNPen;
    {class} function get_DarkOliveGreen: DNPen;
    {class} function get_DarkOrange: DNPen;
    {class} function get_DarkOrchid: DNPen;
    {class} function get_DarkRed: DNPen;
    {class} function get_DarkSalmon: DNPen;
    {class} function get_DarkSeaGreen: DNPen;
    {class} function get_DarkSlateBlue: DNPen;
    {class} function get_DarkSlateGray: DNPen;
    {class} function get_DarkTurquoise: DNPen;
    {class} function get_DarkViolet: DNPen;
    {class} function get_DeepPink: DNPen;
    {class} function get_DeepSkyBlue: DNPen;
    {class} function get_DimGray: DNPen;
    {class} function get_DodgerBlue: DNPen;
    {class} function get_Firebrick: DNPen;
    {class} function get_FloralWhite: DNPen;
    {class} function get_ForestGreen: DNPen;
    {class} function get_Fuchsia: DNPen;
    {class} function get_Gainsboro: DNPen;
    {class} function get_GhostWhite: DNPen;
    {class} function get_Gold: DNPen;
    {class} function get_Goldenrod: DNPen;
    {class} function get_Gray: DNPen;
    {class} function get_Green: DNPen;
    {class} function get_GreenYellow: DNPen;
    {class} function get_Honeydew: DNPen;
    {class} function get_HotPink: DNPen;
    {class} function get_IndianRed: DNPen;
    {class} function get_Indigo: DNPen;
    {class} function get_Ivory: DNPen;
    {class} function get_Khaki: DNPen;
    {class} function get_Lavender: DNPen;
    {class} function get_LavenderBlush: DNPen;
    {class} function get_LawnGreen: DNPen;
    {class} function get_LemonChiffon: DNPen;
    {class} function get_LightBlue: DNPen;
    {class} function get_LightCoral: DNPen;
    {class} function get_LightCyan: DNPen;
    {class} function get_LightGoldenrodYellow: DNPen;
    {class} function get_LightGreen: DNPen;
    {class} function get_LightGray: DNPen;
    {class} function get_LightPink: DNPen;
    {class} function get_LightSalmon: DNPen;
    {class} function get_LightSeaGreen: DNPen;
    {class} function get_LightSkyBlue: DNPen;
    {class} function get_LightSlateGray: DNPen;
    {class} function get_LightSteelBlue: DNPen;
    {class} function get_LightYellow: DNPen;
    {class} function get_Lime: DNPen;
    {class} function get_LimeGreen: DNPen;
    {class} function get_Linen: DNPen;
    {class} function get_Magenta: DNPen;
    {class} function get_Maroon: DNPen;
    {class} function get_MediumAquamarine: DNPen;
    {class} function get_MediumBlue: DNPen;
    {class} function get_MediumOrchid: DNPen;
    {class} function get_MediumPurple: DNPen;
    {class} function get_MediumSeaGreen: DNPen;
    {class} function get_MediumSlateBlue: DNPen;
    {class} function get_MediumSpringGreen: DNPen;
    {class} function get_MediumTurquoise: DNPen;
    {class} function get_MediumVioletRed: DNPen;
    {class} function get_MidnightBlue: DNPen;
    {class} function get_MintCream: DNPen;
    {class} function get_MistyRose: DNPen;
    {class} function get_Moccasin: DNPen;
    {class} function get_NavajoWhite: DNPen;
    {class} function get_Navy: DNPen;
    {class} function get_OldLace: DNPen;
    {class} function get_Olive: DNPen;
    {class} function get_OliveDrab: DNPen;
    {class} function get_Orange: DNPen;
    {class} function get_OrangeRed: DNPen;
    {class} function get_Orchid: DNPen;
    {class} function get_PaleGoldenrod: DNPen;
    {class} function get_PaleGreen: DNPen;
    {class} function get_PaleTurquoise: DNPen;
    {class} function get_PaleVioletRed: DNPen;
    {class} function get_PapayaWhip: DNPen;
    {class} function get_PeachPuff: DNPen;
    {class} function get_Peru: DNPen;
    {class} function get_Pink: DNPen;
    {class} function get_Plum: DNPen;
    {class} function get_PowderBlue: DNPen;
    {class} function get_Purple: DNPen;
    {class} function get_Red: DNPen;
    {class} function get_RosyBrown: DNPen;
    {class} function get_RoyalBlue: DNPen;
    {class} function get_SaddleBrown: DNPen;
    {class} function get_Salmon: DNPen;
    {class} function get_SandyBrown: DNPen;
    {class} function get_SeaGreen: DNPen;
    {class} function get_SeaShell: DNPen;
    {class} function get_Sienna: DNPen;
    {class} function get_Silver: DNPen;
    {class} function get_SkyBlue: DNPen;
    {class} function get_SlateBlue: DNPen;
    {class} function get_SlateGray: DNPen;
    {class} function get_Snow: DNPen;
    {class} function get_SpringGreen: DNPen;
    {class} function get_SteelBlue: DNPen;
    {class} function get_Tan: DNPen;
    {class} function get_Teal: DNPen;
    {class} function get_Thistle: DNPen;
    {class} function get_Tomato: DNPen;
    {class} function get_Turquoise: DNPen;
    {class} function get_Violet: DNPen;
    {class} function get_Wheat: DNPen;
    {class} function get_White: DNPen;
    {class} function get_WhiteSmoke: DNPen;
    {class} function get_Yellow: DNPen;
    {class} function get_YellowGreen: DNPen;

  { static propertys } 

    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Transparent: DNPen read get_Transparent;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property AliceBlue: DNPen read get_AliceBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property AntiqueWhite: DNPen read get_AntiqueWhite;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Aqua: DNPen read get_Aqua;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Aquamarine: DNPen read get_Aquamarine;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Azure: DNPen read get_Azure;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Beige: DNPen read get_Beige;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Bisque: DNPen read get_Bisque;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Black: DNPen read get_Black;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BlanchedAlmond: DNPen read get_BlanchedAlmond;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Blue: DNPen read get_Blue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BlueViolet: DNPen read get_BlueViolet;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Brown: DNPen read get_Brown;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property BurlyWood: DNPen read get_BurlyWood;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property CadetBlue: DNPen read get_CadetBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Chartreuse: DNPen read get_Chartreuse;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Chocolate: DNPen read get_Chocolate;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Coral: DNPen read get_Coral;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property CornflowerBlue: DNPen read get_CornflowerBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Cornsilk: DNPen read get_Cornsilk;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Crimson: DNPen read get_Crimson;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Cyan: DNPen read get_Cyan;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkBlue: DNPen read get_DarkBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkCyan: DNPen read get_DarkCyan;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGoldenrod: DNPen read get_DarkGoldenrod;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGray: DNPen read get_DarkGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkGreen: DNPen read get_DarkGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkKhaki: DNPen read get_DarkKhaki;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkMagenta: DNPen read get_DarkMagenta;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOliveGreen: DNPen read get_DarkOliveGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOrange: DNPen read get_DarkOrange;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkOrchid: DNPen read get_DarkOrchid;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkRed: DNPen read get_DarkRed;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSalmon: DNPen read get_DarkSalmon;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSeaGreen: DNPen read get_DarkSeaGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSlateBlue: DNPen read get_DarkSlateBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkSlateGray: DNPen read get_DarkSlateGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkTurquoise: DNPen read get_DarkTurquoise;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DarkViolet: DNPen read get_DarkViolet;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DeepPink: DNPen read get_DeepPink;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DeepSkyBlue: DNPen read get_DeepSkyBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DimGray: DNPen read get_DimGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property DodgerBlue: DNPen read get_DodgerBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Firebrick: DNPen read get_Firebrick;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property FloralWhite: DNPen read get_FloralWhite;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property ForestGreen: DNPen read get_ForestGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Fuchsia: DNPen read get_Fuchsia;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gainsboro: DNPen read get_Gainsboro;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property GhostWhite: DNPen read get_GhostWhite;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gold: DNPen read get_Gold;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Goldenrod: DNPen read get_Goldenrod;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Gray: DNPen read get_Gray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Green: DNPen read get_Green;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property GreenYellow: DNPen read get_GreenYellow;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Honeydew: DNPen read get_Honeydew;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property HotPink: DNPen read get_HotPink;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property IndianRed: DNPen read get_IndianRed;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Indigo: DNPen read get_Indigo;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Ivory: DNPen read get_Ivory;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Khaki: DNPen read get_Khaki;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Lavender: DNPen read get_Lavender;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LavenderBlush: DNPen read get_LavenderBlush;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LawnGreen: DNPen read get_LawnGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LemonChiffon: DNPen read get_LemonChiffon;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightBlue: DNPen read get_LightBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightCoral: DNPen read get_LightCoral;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightCyan: DNPen read get_LightCyan;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGoldenrodYellow: DNPen read get_LightGoldenrodYellow;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGreen: DNPen read get_LightGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightGray: DNPen read get_LightGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightPink: DNPen read get_LightPink;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSalmon: DNPen read get_LightSalmon;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSeaGreen: DNPen read get_LightSeaGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSkyBlue: DNPen read get_LightSkyBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSlateGray: DNPen read get_LightSlateGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightSteelBlue: DNPen read get_LightSteelBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LightYellow: DNPen read get_LightYellow;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Lime: DNPen read get_Lime;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property LimeGreen: DNPen read get_LimeGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Linen: DNPen read get_Linen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Magenta: DNPen read get_Magenta;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Maroon: DNPen read get_Maroon;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumAquamarine: DNPen read get_MediumAquamarine;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumBlue: DNPen read get_MediumBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumOrchid: DNPen read get_MediumOrchid;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumPurple: DNPen read get_MediumPurple;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSeaGreen: DNPen read get_MediumSeaGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSlateBlue: DNPen read get_MediumSlateBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumSpringGreen: DNPen read get_MediumSpringGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumTurquoise: DNPen read get_MediumTurquoise;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MediumVioletRed: DNPen read get_MediumVioletRed;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MidnightBlue: DNPen read get_MidnightBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MintCream: DNPen read get_MintCream;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property MistyRose: DNPen read get_MistyRose;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Moccasin: DNPen read get_Moccasin;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property NavajoWhite: DNPen read get_NavajoWhite;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Navy: DNPen read get_Navy;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OldLace: DNPen read get_OldLace;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Olive: DNPen read get_Olive;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OliveDrab: DNPen read get_OliveDrab;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Orange: DNPen read get_Orange;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property OrangeRed: DNPen read get_OrangeRed;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Orchid: DNPen read get_Orchid;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleGoldenrod: DNPen read get_PaleGoldenrod;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleGreen: DNPen read get_PaleGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleTurquoise: DNPen read get_PaleTurquoise;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PaleVioletRed: DNPen read get_PaleVioletRed;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PapayaWhip: DNPen read get_PapayaWhip;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PeachPuff: DNPen read get_PeachPuff;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Peru: DNPen read get_Peru;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Pink: DNPen read get_Pink;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Plum: DNPen read get_Plum;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property PowderBlue: DNPen read get_PowderBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Purple: DNPen read get_Purple;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Red: DNPen read get_Red;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property RosyBrown: DNPen read get_RosyBrown;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property RoyalBlue: DNPen read get_RoyalBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SaddleBrown: DNPen read get_SaddleBrown;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Salmon: DNPen read get_Salmon;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SandyBrown: DNPen read get_SandyBrown;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SeaGreen: DNPen read get_SeaGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SeaShell: DNPen read get_SeaShell;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Sienna: DNPen read get_Sienna;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Silver: DNPen read get_Silver;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SkyBlue: DNPen read get_SkyBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SlateBlue: DNPen read get_SlateBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SlateGray: DNPen read get_SlateGray;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Snow: DNPen read get_Snow;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SpringGreen: DNPen read get_SpringGreen;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property SteelBlue: DNPen read get_SteelBlue;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Tan: DNPen read get_Tan;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Teal: DNPen read get_Teal;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Thistle: DNPen read get_Thistle;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Tomato: DNPen read get_Tomato;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Turquoise: DNPen read get_Turquoise;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Violet: DNPen read get_Violet;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Wheat: DNPen read get_Wheat;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property White: DNPen read get_White;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property WhiteSmoke: DNPen read get_WhiteSmoke;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property Yellow: DNPen read get_Yellow;
    ///<summary>
    ///  系统定义 <see cref="T:System.Drawing.Pen" />
    ///  宽度为 1 的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  对象设置为系统定义的颜色。
    ///</returns>
    {class} property YellowGreen: DNPen read get_YellowGreen;
  end;

  ///<summary>
  ///  所有标准颜色的笔。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Pens')]
  DNPens = interface(DDN.mscorlib.DNObject)
  ['{DDE10CFF-4319-33E5-B17E-2D7F271CFE8E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPens = class(TDNGenericImport<DNPensClass, DNPens>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsClass = interface(DNObjectClass)
  ['{9C3CF37A-1B86-5A2C-AD1B-1833E79D2D04}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.Margins" />
    ///  类 1 英寸宽的边距。
    ///</summary>
    {class} function init: DNMargins; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.Margins" />
    ///  类具有指定左、 右、 顶部、 边距和下边距。
    ///</summary>
    ///  <param name="left">
    ///  左边的距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="right">
    ///  右边距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="top">
    ///  上边距，以百分之一英寸为单位。
    ///</param>
    ///  <param name="bottom">
    ///  下边距，以百分之一英寸。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="left" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="right" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="top" />
    ///  参数值小于 0。
    ///  - 或 -
    ///  <paramref name="bottom" />
    ///  参数值小于 0。
    ///</exception>
    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;

  end;

  ///<summary>
  ///  指定打印页的边距的尺寸。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.Margins')]
  DNMargins = interface(DDN.mscorlib.DNICloneable)
  ['{E3900763-C225-303C-9673-70085B3ACEEB}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    ///<summary>
    ///  检索此对象，逐个成员的副本。
    ///</summary>
    ///<returns>
    ///  此对象的副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  比较此 <see cref="T:System.Drawing.Printing.Margins" />
    ///  到指定 <see cref="T:System.Object" />
    ///  以确定它们是否具有相同的尺寸。
    ///</summary>
    ///  <param name="obj">
    ///  要进行比较，向其中对象 <see cref="T:System.Drawing.Printing.Margins" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是 <see cref="T:System.Drawing.Printing.Margins" />
    ///  并具有相同 <see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  , ，<see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  , ，<see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  和 <see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  值，则为此 <see cref="T:System.Drawing.Printing.Margins" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  计算并检索基于左、 右、 上边框和下边距宽度的哈希代码。
    ///</summary>
    ///<returns>
    ///  基于左、 右、 上边框和下边距的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Printing.Margins" />
    ///  为字符串。
    ///</summary>
    ///<returns><see cref="T:System.String" />
    ///  的 <see cref="T:System.Drawing.Printing.Margins" />
    ///  表示形式。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置左边的距的宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  左边的距的宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  获取或设置右边距的宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  右边距的宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  获取或设置上边距宽度，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  上边距宽度，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  获取或设置下边距，以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  下边距，以百分之一英寸。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  属性设置为小于 0 的值。
    ///</exception>
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPageSettingsClass = interface(DNObjectClass)
  ['{1A742101-AB39-5A46-8351-A82BA2415C14}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  类使用默认打印机。
    ///</summary>
    {class} function init: DNPageSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  类使用指定的打印机。
    ///</summary>
    ///  <param name="printerSettings"><see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，描述要使用的打印机。
    ///</param>
    {class} function init(printerSettings: DNPrinterSettings): DNPageSettings; overload;

  end;

  ///<summary>
  ///  指定将应用于单个打印页面的设置。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PageSettings')]
  DNPageSettings = interface(DDN.mscorlib.DNICloneable)
  ['{AD0BA20F-317B-3261-86E9-488F717D1BA7}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Color: Boolean;
    procedure set_Color(value: Boolean);
    function get_HardMarginX: Single;
    function get_HardMarginY: Single;
    function get_Landscape: Boolean;
    procedure set_Landscape(value: Boolean);
    function get_Margins: DNMargins;
    procedure set_Margins(value: DNMargins);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_PaperSource: DNPaperSource;
    procedure set_PaperSource(value: DNPaperSource);
    function get_PrintableArea: DNRectangleF;
    function get_PrinterResolution: DNPrinterResolution;
    procedure set_PrinterResolution(value: DNPrinterResolution);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);

  { methods } 

    ///<summary>
    ///  会创建一份 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该对象的一个副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  将复制中的相关信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  到指定 <see langword="DEVMODE " />
    ///  结构。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    procedure CopyToHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将复制到的相关信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  从指定 <see langword="DEVMODE" />
    ///  结构。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception><exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  为字符串形式。
    ///</summary>
    ///<returns>
    ///  显示的各种属性设置一个字符串 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取页上，考虑到由指定的页面方向的大小 <see cref="P:System.Drawing.Printing.PageSettings.Landscape" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示长度和宽度，以百分之一英寸的页。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>
    ///  获取或设置一个值，该值指示是否应以彩色打印页面。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应颜色; 在打印的页，否则为 <see langword="false" />
    ///  。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Color: Boolean read get_Color write set_Color;
    ///<summary>
    ///  获取以百分之一英寸，硬距左侧的页上的 x 坐标。
    ///</summary>
    ///<returns>
    ///  X 坐标，以百分之一英寸，左侧的硬页边距。
    ///</returns>
    property HardMarginX: Single read get_HardMarginX;
    ///<summary>
    ///  获取 y 坐标，以百分之一英寸，页顶部的硬边距。
    ///</summary>
    ///<returns>
    ///  Y 坐标，以百分之一英寸，页顶部的硬边距。
    ///</returns>
    property HardMarginY: Single read get_HardMarginY;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在横向或纵向方向打印的页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果以横向方向; 应打印的页，否则为 <see langword="false" />
    ///  。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Landscape: Boolean read get_Landscape write set_Landscape;
    ///<summary>
    ///  获取或设置此页的边距。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.Margins" />
    ///  表示中百分之一英寸的页的边距。
    ///  默认值为各边的 1 英寸边距。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    property Margins: DNMargins read get_Margins write set_Margins;
    ///<summary>
    ///  获取或设置页上的纸张大小。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  表示在纸张的大小。
    ///  默认值为打印机的默认纸张大小。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    ///<summary>
    ///  获取或设置页的纸张来源;例如，打印机的上层送纸器。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  ，它指定纸张来源。
    ///  默认值为打印机的默认纸张来源。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PaperSource: DNPaperSource read get_PaperSource write set_PaperSource;
    ///<summary>
    ///  获取打印机页上的可打印区域的边界。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示长度和宽度，以百分之一英寸，区域的打印机是否能够在打印。
    ///</returns>
    property PrintableArea: DNRectangleF read get_PrintableArea;
    ///<summary>
    ///  获取或设置页上的打印机分辨率。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  ，它指定页上的打印机分辨率。
    ///  默认值为打印机的默认解析。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在或未安装的默认打印机。
    ///</exception>
    property PrinterResolution: DNPrinterResolution read get_PrinterResolution write set_PrinterResolution;
    ///<summary>
    ///  获取或设置与页关联的打印机设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，表示与页关联的打印机设置。
    ///</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
  end;

  TDNPageSettings = class(TDNGenericImport<DNPageSettingsClass, DNPageSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EDA3B12-D5E3-5F25-B87F-D32097D3FB96}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPaperSize; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  在纸张的名称。
    ///</param>
    ///  <param name="width">
    ///  中百分之一英寸的纸张的宽度。
    ///</param>
    ///  <param name="height">
    ///  中百分之一英寸的纸张的高度。
    ///</param>
    {class} function init(name: string; width: Int32; height: Int32): DNPaperSize; overload;

  end;

  ///<summary>
  ///  指定一张纸的大小。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSize')]
  DNPaperSize = interface(DDN.mscorlib.DNObject)
  ['{19C1F738-FF0A-34D5-8CA1-0FE5B08906EB}']
  { getters & setters } 

    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Kind: DNPaperKind;
    function get_PaperName: string;
    procedure set_PaperName(value: string);
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);

  { methods } 

    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置在纸张的高度以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  中百分之一英寸的纸张的高度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取纸张的类型。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PaperKind" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Kind: DNPaperKind read get_Kind;
    ///<summary>
    ///  获取或设置的纸张类型的名称。
    ///</summary>
    ///<returns>
    ///  纸张类型的名称。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为 <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property PaperName: string read get_PaperName write set_PaperName;
    ///<summary>
    ///  获取或设置一个整数，表示之一 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  值或自定义值。
    ///</summary>
    ///<returns>
    ///  一个整数，表示之一 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  值或自定义的值。
    ///</returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>
    ///  获取或设置在纸张的宽度以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  中百分之一英寸纸张的宽度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  属性未设置为<see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  。
    ///</exception>
    property Width: Int32 read get_Width write set_Width;
  end;

  TDNPaperSize = class(TDNGenericImport<DNPaperSizeClass, DNPaperSize>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E071617-CB4D-5AA8-97E5-B16FCDD4823E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPaperSource;

  end;

  ///<summary>
  ///  指定从中给打印机送纸的送纸器。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PaperSource')]
  DNPaperSource = interface(DDN.mscorlib.DNObject)
  ['{42181C14-259D-307A-8D1A-B2B952F93DC7}']
  { getters & setters } 

    function get_Kind: DNPaperSourceKind;
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_SourceName: string;
    procedure set_SourceName(value: string);

  { methods } 

    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取纸张来源。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值之一。
    ///</returns>
    property Kind: DNPaperSourceKind read get_Kind;
    ///<summary>
    ///  获取或设置表示之一的整数 <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值或自定义值。
    ///</summary>
    ///<returns>
    ///  整数值，表示之一 <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  值或自定义值。
    ///</returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>
    ///  获取或设置纸张来源的名称。
    ///</summary>
    ///<returns>
    ///  纸张来源的名称。
    ///</returns>
    property SourceName: string read get_SourceName write set_SourceName;
  end;

  TDNPaperSource = class(TDNGenericImport<DNPaperSourceClass, DNPaperSource>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CBEA6CF-3B47-58B2-9628-0F2551A46969}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PreviewPageInfo" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="image">
    ///  所打印页面的图像。
    ///</param>
    ///  <param name="physicalSize">
    ///  以百分之一英寸的打印页面的大小。
    ///</param>
    {class} function init(image: DNImage; physicalSize: DNSize): DNPreviewPageInfo;

  end;

  ///<summary>
  ///  指定单个页面的打印预览信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PreviewPageInfo')]
  DNPreviewPageInfo = interface(DDN.mscorlib.DNObject)
  ['{E9C17F39-040C-36F1-8B60-2A04D0382492}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_PhysicalSize: DNSize;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取所打印页面的图像。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示打印的页面。
    ///</returns>
    property Image: DNImage read get_Image;
    ///<summary>
    ///  获取与打印页的大小以百分之一英寸。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  ，指定所打印页面的大小以百分之一英寸。
    ///</returns>
    property PhysicalSize: DNSize read get_PhysicalSize;
  end;

  TDNPreviewPageInfo = class(TDNGenericImport<DNPreviewPageInfoClass, DNPreviewPageInfo>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF429C9D-CD57-5F4C-96F8-DEE2A5F0DFFD}']
  end;

  ///<summary>
  ///  控制如何打印文档时，从 Windows 窗体应用程序打印时。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintController')]
  DNPrintController = interface(DDN.mscorlib.DNObject)
  ['{1FF59139-A803-31C5-B176-6D24D5A3BF55}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    ///<summary>
    ///  当在派生类中重写，开始控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  。
    ///</param>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>
    ///  当在派生类中重写，开始控制序列，该序列确定何时以及如何打印文档的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  表示中的一页 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</returns>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>
    ///  当在派生类中重写，完成控制序列，该序列确定何时以及如何打印文档的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  。
    ///</param>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>
    ///  当在派生类中重写，完成控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  它表示当前正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  包含事件数据的 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  。
    ///</param>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Drawing.Printing.PrintController" />
    ///  用于打印预览。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPrintControllerClass = interface(DNPrintControllerClass)
  ['{A1CBA942-4144-5A5D-A199-208D7EE91934}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PreviewPrintController" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPreviewPrintController;

  end;

  ///<summary>
  ///  指定一个打印控制器，它在屏幕上将文档显示为一系列图像。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PreviewPrintController')]
  DNPreviewPrintController = interface(DNPrintController)
  ['{8C7C352B-4A85-3963-BFBE-0834E68A7EF4}']
  { getters & setters } 

    function get_IsPreview: Boolean;
    function get_UseAntiAlias: Boolean;
    procedure set_UseAntiAlias(value: Boolean);

  { methods } 

    ///<summary>
    ///  开始控制序列，该序列确定何时以及如何预览打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在预览的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  ，其中包含有关如何打印文档的数据。
    ///</param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>
    ///  开始控制序列，该序列确定何时以及如何预览打印文档中的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在预览的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  ，其中包含有关如何预览打印文档中的页的数据。
    ///  最初， <see cref="P:System.Drawing.Printing.PrintPageEventArgs.Graphics" />
    ///  此参数的属性将为 <see langword="null" />
    ///  。
    ///  此方法所返回的值被用于对此属性进行设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  表示中的一页 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</returns>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>
    ///  完成控制序列，该序列确定何时以及如何预览打印文档中的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在预览的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  ，其中包含有关如何预览打印文档中的页的数据。
    ///</param>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>
    ///  完成控制序列，该序列确定何时以及如何预览打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在预览的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  ，其中包含有关如何预览打印文档的数据。
    ///</param>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>
    ///  将文档中的页捕获为一系列图像。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.Drawing.Printing.PreviewPageInfo" />
    ///  包含的页 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  作为一系列图像。
    ///</returns>
    function GetPreviewPageInfo: TArray<DNPreviewPageInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此控制器用于打印预览。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property IsPreview: Boolean read get_IsPreview;
    ///<summary>
    ///  获取或设置一个值，该值指示显示打印预览时是否使用抗锯齿效果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印预览使用抗锯齿;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property UseAntiAlias: Boolean read get_UseAntiAlias write set_UseAntiAlias;
  end;

  TDNPreviewPrintController = class(TDNGenericImport<DNPreviewPrintControllerClass, DNPreviewPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNStandardPrintControllerClass = interface(DNPrintControllerClass)
  ['{6EA475BD-4348-56D2-B652-03893FB9EB5E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.StandardPrintController" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNStandardPrintController;

  end;

  ///<summary>
  ///  指定将信息发送到打印机的打印控制器。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.StandardPrintController')]
  DNStandardPrintController = interface(DNPrintController)
  ['{69D833C9-4486-3127-9A18-EDC3EEBAD194}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    ///<summary>
    ///  开始控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  ，其中包含有关如何打印文档的数据。
    ///</param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  打印机设置是无效的。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  本机的 Win32 应用程序编程接口 (API) 无法启动打印作业。
    ///</exception>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>
    ///  开始控制序列，该序列确定何时以及如何打印文档中的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  ，其中包含有关如何打印文档中的页的数据。
    ///  最初， <see cref="P:System.Drawing.Printing.PrintPageEventArgs.Graphics" />
    ///  此参数的属性将为 <see langword="null" />
    ///  。
    ///  从返回的值 <see cref="M:System.Drawing.Printing.StandardPrintController.OnStartPage(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintPageEventArgs)" />
    ///  方法将用于设置此属性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  对象，表示从页面 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  本机的 Win32 应用程序编程接口 (API) 未能准备要接受的数据的打印机驱动程序。
    ///  - 或 -
    ///  本机 Win32 API 无法更新指定的打印机或绘图仪设备上下文 (DC) 使用指定的信息。
    ///</exception>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>
    ///  完成控制序列，该序列确定何时以及如何打印文档的页。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  ，其中包含有关如何打印文档中的页的数据。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  本机的 Win32 应用程序编程接口 (API) 无法完成对页的写。
    ///</exception>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>
    ///  完成控制序列，该序列确定何时以及如何打印文档。
    ///</summary>
    ///  <param name="document">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  ，表示正在打印的文档。
    ///</param>
    ///  <param name="e">
    ///  一个 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  ，其中包含有关如何打印文档的数据。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  本机的 Win32 应用程序编程接口 (API) 无法完成打印作业。
    ///  - 或 -
    ///  本机 Win32 API 无法删除指定的设备上下文 (DC)。
    ///</exception>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Drawing.Printing.PrintController" />
    ///  用于打印预览。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNStandardPrintController = class(TDNGenericImport<DNStandardPrintControllerClass, DNStandardPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BE7C6948-F399-5E8D-ABFF-7A901642495B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrinterResolution;

  end;

  ///<summary>
  ///  表示打印机支持的分辨率。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterResolution')]
  DNPrinterResolution = interface(DDN.mscorlib.DNObject)
  ['{75B45367-ECCC-30F8-86CD-7748B9CC6B7F}']
  { getters & setters } 

    function get_Kind: DNPrinterResolutionKind;
    procedure set_Kind(value: DNPrinterResolutionKind);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>
    ///  此成员重写 <see cref="M:System.Object.ToString" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含有关 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  的信息。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置打印机分辨率。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrinterResolutionKind" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  分配的值不是成员的 <see cref="T:System.Drawing.Printing.PrinterResolutionKind" />
    ///  枚举。
    ///</exception>
    property Kind: DNPrinterResolutionKind read get_Kind write set_Kind;
    ///<summary>
    ///  获取以每英寸点数打印机水平分辨率。
    ///</summary>
    ///<returns>
    ///  水平打印机分辨率，以每英寸点数，如果 <see cref="P:System.Drawing.Printing.PrinterResolution.Kind" />
    ///  设置为 <see cref="F:System.Drawing.Printing.PrinterResolutionKind.Custom" />
    ///  ; 否则为 <see langword="dmPrintQuality" />
    ///  值。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取垂直打印机分辨率以每英寸点数。
    ///</summary>
    ///<returns>
    ///  垂直打印机分辨率，以每英寸点数为单位。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPrinterResolution = class(TDNGenericImport<DNPrinterResolutionClass, DNPrinterResolution>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettingsClass = interface(DNObjectClass)
  ['{7676BB00-8FB4-5924-B413-C4DEDEA38DE2}']
  { static getter & setter } 

    {class} function get_InstalledPrinters: DNPrinterSettings_StringCollection;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrinterSettings;

  { static propertys } 

    ///<summary>
    ///  获取在计算机上安装的所有打印机的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  表示计算机上安装的所有打印机的名称。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法枚举可用的打印机。
    ///</exception>
    {class} property InstalledPrinters: DNPrinterSettings_StringCollection read get_InstalledPrinters;
  end;

  ///<summary>
  ///  指定有关文档的打印方式，包括打印，从 Windows 窗体应用程序打印时的打印机信息。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings')]
  DNPrinterSettings = interface(DDN.mscorlib.DNICloneable)
  ['{5C0D0EE8-9D2A-3308-A024-607A2B3101D6}']
  { getters & setters } 

    function get_CanDuplex: Boolean;
    function get_Copies: Int16;
    procedure set_Copies(value: Int16);
    function get_Collate: Boolean;
    procedure set_Collate(value: Boolean);
    function get_DefaultPageSettings: DNPageSettings;
    function get_Duplex: DNDuplex;
    procedure set_Duplex(value: DNDuplex);
    function get_FromPage: Int32;
    procedure set_FromPage(value: Int32);
    function get_IsDefaultPrinter: Boolean;
    function get_IsPlotter: Boolean;
    function get_IsValid: Boolean;
    function get_LandscapeAngle: Int32;
    function get_MaximumCopies: Int32;
    function get_MaximumPage: Int32;
    procedure set_MaximumPage(value: Int32);
    function get_MinimumPage: Int32;
    procedure set_MinimumPage(value: Int32);
    function get_PrintFileName: string;
    procedure set_PrintFileName(value: string);
    function get_PaperSizes: DNPrinterSettings_PaperSizeCollection;
    function get_PaperSources: DNPrinterSettings_PaperSourceCollection;
    function get_PrintRange: DNPrintRange;
    procedure set_PrintRange(value: DNPrintRange);
    function get_PrintToFile: Boolean;
    procedure set_PrintToFile(value: Boolean);
    function get_PrinterName: string;
    procedure set_PrinterName(value: string);
    function get_PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection;
    function get_SupportsColor: Boolean;
    function get_ToPage: Int32;
    procedure set_ToPage(value: Int32);

  { methods } 

    ///<summary>
    ///  会创建一份 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该对象的一个副本。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Graphics" />
    ///  ，包含创建时很有帮助的打印机信息 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含来自打印机的信息。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    function CreateMeasurementGraphics: DNGraphics; overload;
    ///<summary>
    ///  返回<see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息，可以选择指定边距处原点。
    ///</summary>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  若要指示边距; 处的原点否则为<see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  A <see cref="T:System.Drawing.Graphics" />
    ///  ，包含从的打印机信息<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Graphics" />
    ///  ，包含具有指定关联的打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  要检索的 graphics 对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings): DNGraphics; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Graphics" />
    ///  与指定的页设置相关联，并选择性地指定边距处原点。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  检索 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</param>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  若要指定边距; 处原点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  包含打印机信息 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  。
    ///</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings; honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVMODE" />
    ///  结构，它对应于打印机设置。
    ///</summary>
    ///<returns>
    ///  句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法检索打印机的初始化信息。
    ///</exception>
    function GetHdevmode: IntPtr; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVMODE" />
    ///  结构，它对应于打印机和通过指定的页设置 <paramref name="pageSettings" />
    ///  参数。
    ///</summary>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  对象 <see langword="DEVMODE" />
    ///  结构的句柄对应。
    ///</param>
    ///<returns>
    ///  句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  无法检索打印机的初始化信息。
    ///</exception>
    function GetHdevmode(pageSettings: DNPageSettings): IntPtr; overload;
    ///<summary>
    ///  创建到一个句柄 <see langword="DEVNAMES" />
    ///  结构，它对应于打印机设置。
    ///</summary>
    ///<returns>
    ///  句柄 <see langword="DEVNAMES" />
    ///  结构。
    ///</returns>
    function GetHdevnames: IntPtr;
    ///<summary>
    ///  返回一个值，该值的打印机是否支持打印指定的图像格式。
    ///</summary>
    ///  <param name="imageFormat"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  打印。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果打印机支持打印指定的图像格式;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDirectPrintingSupported(imageFormat: DNImageFormat): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值的打印机是否支持打印指定的图像文件。
    ///</summary>
    ///  <param name="image">
    ///  要打印的图像。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果打印机支持打印指定的图像;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDirectPrintingSupported(image: DNImage): Boolean; overload;
    ///<summary>
    ///  将给定句柄出来放入相关的信息复制 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///  <param name="hdevmode">
    ///  对 Win32 句柄 <see langword="DEVMODE" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>
    ///  将给定句柄出来放入相关的信息复制 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  。
    ///</summary>
    ///  <param name="hdevnames">
    ///  对 Win32 句柄 <see langword="DEVNAMES" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  打印机句柄无效。
    ///</exception>
    procedure SetHdevnames(hdevnames: IntPtr);
    ///<summary>
    ///  提供以下信息 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  以字符串形式。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否打印机支持双面打印。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印机支持双面打印;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanDuplex: Boolean read get_CanDuplex;
    ///<summary>
    ///  获取或设置要打印的文档的副本数。
    ///</summary>
    ///<returns>
    ///  要打印的份数。
    ///  默认值为 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
    ///  属性也不可小于零。
    ///</exception>
    property Copies: Int16 read get_Copies write set_Copies;
    ///<summary>
    ///  获取或设置一个值，该值指示是否逐份打印的文档。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果逐份打印的文档否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Collate: Boolean read get_Collate write set_Collate;
    ///<summary>
    ///  获取默认值为此打印机的页设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ，表示此打印机的默认页设置。
    ///</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings;
    ///<summary>
    ///  获取或设置双面打印的打印机设置。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.Duplex" />
    ///  值之一。
    ///  默认值取决于打印机。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
    ///  属性不属于某个 <see cref="T:System.Drawing.Printing.Duplex" />
    ///  值。
    ///</exception>
    property Duplex: DNDuplex read get_Duplex write set_Duplex;
    ///<summary>
    ///  获取或设置要打印的第一页的页码。
    ///</summary>
    ///<returns>
    ///  若要打印的第一页的页码。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  属性的值小于零。
    ///</exception>
    property FromPage: Int32 read get_FromPage write set_FromPage;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定默认打印机，除用户显式设置 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  指定默认打印机; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefaultPrinter: Boolean read get_IsDefaultPrinter;
    ///<summary>
    ///  获取一个值，该值指示该打印机是否绘图。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印机绘图仪; <see langword="false" />
    ///  如果打印机光栅。
    ///</returns>
    property IsPlotter: Boolean read get_IsPlotter;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定有效的打印机。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性指定有效的打印机; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  获取纵向方向旋转以生成横向方向的角度，以度为单位。
    ///</summary>
    ///<returns>
    ///  角度 （以度为单位，纵向方向旋转以生成横向方向）。
    ///</returns>
    property LandscapeAngle: Int32 read get_LandscapeAngle;
    ///<summary>
    ///  获取最大的打印机使用户能够一次打印的份数。
    ///</summary>
    ///<returns>
    ///  最大打印机使用户能够一次打印的份数。
    ///</returns>
    property MaximumCopies: Int32 read get_MaximumCopies;
    ///<summary>
    ///  获取或设置最大 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</summary>
    ///<returns>
    ///  最大值 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
    ///  属性也不可小于零。
    ///</exception>
    property MaximumPage: Int32 read get_MaximumPage write set_MaximumPage;
    ///<summary>
    ///  获取或设置所需的最低 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</summary>
    ///<returns>
    ///  所需的最低 <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  或 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  可选择在 <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
    ///  属性也不可小于零。
    ///</exception>
    property MinimumPage: Int32 read get_MinimumPage write set_MinimumPage;
    ///<summary>
    ///  获取或设置时打印到文件的文件名。
    ///</summary>
    ///<returns>
    ///  打印到文件时文件名称。
    ///</returns>
    property PrintFileName: string read get_PrintFileName write set_PrintFileName;
    ///<summary>
    ///  获取支持的这台打印机的纸张大小。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  ，表示支持的这台打印机的纸张大小。
    ///</returns>
    property PaperSizes: DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    ///<summary>
    ///  获取可用打印机的纸张来源纸盒。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  ，它表示位于这台打印机的纸张来源纸盒。
    ///</returns>
    property PaperSources: DNPrinterSettings_PaperSourceCollection read get_PaperSources;
    ///<summary>
    ///  获取或设置用户已指定要打印的页码。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintRange" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
    ///  属性不属于某个 <see cref="T:System.Drawing.Printing.PrintRange" />
    ///  值。
    ///</exception>
    property PrintRange: DNPrintRange read get_PrintRange write set_PrintRange;
    ///<summary>
    ///  获取或设置一个值，该值指示是否打印输出发送到一个文件而不是一个端口。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果打印输出发送到一个文件;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PrintToFile: Boolean read get_PrintToFile write set_PrintToFile;
    ///<summary>
    ///  获取或设置要使用的打印机的名称。
    ///</summary>
    ///<returns>
    ///  要使用的打印机的名称。
    ///</returns>
    property PrinterName: string read get_PrinterName write set_PrinterName;
    ///<summary>
    ///  获取所有支持的这台打印机的解决方法。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  ，表示支持的这台打印机的解决方法。
    ///</returns>
    property PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection read get_PrinterResolutions;
    ///<summary>
    ///  获取一个值，该值指示是否此打印机支持彩色打印。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此打印机支持彩色打印否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SupportsColor: Boolean read get_SupportsColor;
    ///<summary>
    ///  获取或设置要打印的最后一页的数目。
    ///</summary>
    ///<returns>
    ///  若要打印的最后一页的数。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  属性也不可小于零。
    ///</exception>
    property ToPage: Int32 read get_ToPage write set_ToPage;
  end;

  TDNPrinterSettings = class(TDNGenericImport<DNPrinterSettingsClass, DNPrinterSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSizeCollectionClass = interface(DNObjectClass)
  ['{D314BDB6-5CFF-5342-9670-44AAC3799605}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PaperSize" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPaperSize>): DNPrinterSettings_PaperSizeCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PaperSize" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSizeCollection')]
  DNPrinterSettings_PaperSizeCollection = interface(DDN.mscorlib.DNICollection)
  ['{F2DC6D91-B2ED-36E4-B5A2-706A808045D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSize;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="paperSizes">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(paperSizes: TArray<DNPaperSize>; index: Int32);
    ///<summary>
    ///  添加 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="paperSize">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(paperSize: DNPaperSize): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的不同的纸张大小的数目。
    ///</summary>
    ///<returns>
    ///  集合中的不同的纸张大小的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSize read get_Item; default;
  end;

  TDNPrinterSettings_PaperSizeCollection = class(TDNGenericImport<DNPrinterSettings_PaperSizeCollectionClass, DNPrinterSettings_PaperSizeCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSourceCollectionClass = interface(DNObjectClass)
  ['{5100E56B-B5DC-5249-B8D7-B0F2B861D340}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PaperSource" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPaperSource>): DNPrinterSettings_PaperSourceCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PaperSource" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSourceCollection')]
  DNPrinterSettings_PaperSourceCollection = interface(DDN.mscorlib.DNICollection)
  ['{0CB10CF3-79E3-3D88-93A5-DD986AFAF5BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSource;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="paperSources">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(paperSources: TArray<DNPaperSource>; index: Int32);
    ///<summary>
    ///  添加指定 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  到末尾 <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  。
    ///</summary>
    ///  <param name="paperSource">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  。
    ///</param>
    ///<returns>
    ///  从零开始的索引位置 <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  已添加。
    ///</returns>
    function Add(paperSource: DNPaperSource): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的不同的纸张来源的数目。
    ///</summary>
    ///<returns>
    ///  集合中的不同的纸张来源的数。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSource read get_Item; default;
  end;

  TDNPrinterSettings_PaperSourceCollection = class(TDNGenericImport<DNPrinterSettings_PaperSourceCollectionClass, DNPrinterSettings_PaperSourceCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PrinterResolutionCollectionClass = interface(DNObjectClass)
  ['{668BC649-4DAA-5E00-AB27-8A362631F6B7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<DNPrinterResolution>): DNPrinterSettings_PrinterResolutionCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.Drawing.Printing.PrinterResolution" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection')]
  DNPrinterSettings_PrinterResolutionCollection = interface(DDN.mscorlib.DNICollection)
  ['{185EA4C4-A9C2-35B6-9219-E54A78482F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPrinterResolution;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  到指定的数组，指定索引处开始。
    ///</summary>
    ///  <param name="printerResolutions">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(printerResolutions: TArray<DNPrinterResolution>; index: Int32);
    ///<summary>
    ///  添加 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  到集合的末尾。
    ///</summary>
    ///  <param name="printerResolution">
    ///  要添加到集合中的 <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(printerResolution: DNPrinterResolution): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中可用的打印机分辨率的数目。
    ///</summary>
    ///<returns>
    ///  集合中的可用打印机分辨率的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPrinterResolution read get_Item; default;
  end;

  TDNPrinterSettings_PrinterResolutionCollection = class(TDNGenericImport<DNPrinterSettings_PrinterResolutionCollectionClass, DNPrinterSettings_PrinterResolutionCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_StringCollectionClass = interface(DNObjectClass)
  ['{77A66E73-7EC6-5C1E-B999-E119E23B82DD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="array"><see cref="T:System.String" />
    ///  类型的数组。
    ///</param>
    {class} function init(&array: TArray<string>): DNPrinterSettings_StringCollection;

  end;

  ///<summary>
  ///  包含 <see cref="T:System.String" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+StringCollection')]
  DNPrinterSettings_StringCollection = interface(DDN.mscorlib.DNICollection)
  ['{797C1ACD-B7D5-3449-A800-F41050E30EEC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    ///<summary>
    ///  返回一个可循环访问集合的枚举数。
    ///</summary>
    ///<returns>
    ///  用于 <see cref="T:System.Collections.IEnumerator" />
    ///  的 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将当前的内容复制 <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  到指定的数组，指定索引处开始
    ///</summary>
    ///  <param name="strings">
    ///  从零开始的数组，用于接收从复制的项 <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  从此处开始复制的项索引。
    ///</param>
    procedure CopyTo(strings: TArray<string>; index: Int32);
    ///<summary>
    ///  将一个字符串添加到集合的末尾。
    ///</summary>
    ///  <param name="value">
    ///  要添加到集合的字符串。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(value: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的字符串的数量。
    ///</summary>
    ///<returns>
    ///  集合中的字符串的数量。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNPrinterSettings_StringCollection = class(TDNGenericImport<DNPrinterSettings_StringCollectionClass, DNPrinterSettings_StringCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterUnitConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8024AF2E-A700-524C-9FAB-758EE5FC4922}']
  { static methods } 

    ///<summary>
    ///  将一个双精度浮点数从一种 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一种 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns>
    ///  双精度浮点数，它表示转换后的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: Double; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Double; overload;
    ///<summary>
    ///  将一个 32 位的符号整数从一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的值。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns>
    ///  32 位有符号整数，它表示转换后的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: Int32; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Int32; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Point" />
    ///  从一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: DNPoint; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNPoint; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Size" />
    ///  从一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: DNSize; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNSize; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Rectangle" />
    ///  从一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: DNRectangle; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNRectangle; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Printing.Margins" />
    ///  从一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型转换为另一个 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  类型。
    ///</summary>
    ///  <param name="value">
    ///  正在转换的 <see cref="T:System.Drawing.Printing.Margins" />
    ///  。
    ///</param>
    ///  <param name="fromUnit">
    ///  要从其进行转换的单元。
    ///</param>
    ///  <param name="toUnit">
    ///  要转换为其的单元。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Printing.Margins" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  。
    ///</returns>
    {class} function Convert(value: DNMargins; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNMargins; overload;

  end;

  ///<summary>
  ///  指定一系列与 Win32 打印 API 互操作时非常有用的转换方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrinterUnitConvert')]
  DNPrinterUnitConvert = interface(DDN.mscorlib.DNObject)
  ['{7566FB87-BC85-3EF3-B1BD-FF61ECA936A2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrinterUnitConvert = class(TDNGenericImport<DNPrinterUnitConvertClass, DNPrinterUnitConvert>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{33838080-5025-5B34-B824-039B9A202B58}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNBrush;
    {class} function get_ActiveCaption: DNBrush;
    {class} function get_ActiveCaptionText: DNBrush;
    {class} function get_AppWorkspace: DNBrush;
    {class} function get_ButtonFace: DNBrush;
    {class} function get_ButtonHighlight: DNBrush;
    {class} function get_ButtonShadow: DNBrush;
    {class} function get_Control: DNBrush;
    {class} function get_ControlLightLight: DNBrush;
    {class} function get_ControlLight: DNBrush;
    {class} function get_ControlDark: DNBrush;
    {class} function get_ControlDarkDark: DNBrush;
    {class} function get_ControlText: DNBrush;
    {class} function get_Desktop: DNBrush;
    {class} function get_GradientActiveCaption: DNBrush;
    {class} function get_GradientInactiveCaption: DNBrush;
    {class} function get_GrayText: DNBrush;
    {class} function get_Highlight: DNBrush;
    {class} function get_HighlightText: DNBrush;
    {class} function get_HotTrack: DNBrush;
    {class} function get_InactiveCaption: DNBrush;
    {class} function get_InactiveBorder: DNBrush;
    {class} function get_InactiveCaptionText: DNBrush;
    {class} function get_Info: DNBrush;
    {class} function get_InfoText: DNBrush;
    {class} function get_Menu: DNBrush;
    {class} function get_MenuBar: DNBrush;
    {class} function get_MenuHighlight: DNBrush;
    {class} function get_MenuText: DNBrush;
    {class} function get_ScrollBar: DNBrush;
    {class} function get_Window: DNBrush;
    {class} function get_WindowFrame: DNBrush;
    {class} function get_WindowText: DNBrush;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Brush" />
    ///  从指定 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="c"><see cref="T:System.Drawing.Color" />
    ///  从中创建结构 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</returns>
    {class} function FromSystemColor(c: DNColor): DNBrush;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口边框的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口边框的颜色。
    ///</returns>
    {class} property ActiveBorder: DNBrush read get_ActiveBorder;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口标题栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口标题栏的背景的颜色。
    ///</returns>
    {class} property ActiveCaption: DNBrush read get_ActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口标题栏中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口标题栏的背景的颜色。
    ///</returns>
    {class} property ActiveCaptionText: DNBrush read get_ActiveCaptionText;
    ///<summary>
    ///  获取表示应用程序工作区的颜色的 <see cref="T:System.Drawing.SolidBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是应用程序工作区的颜色。
    ///</returns>
    {class} property AppWorkspace: DNBrush read get_AppWorkspace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是表面的三维元素的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property ButtonFace: DNBrush read get_ButtonFace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ButtonHighlight: DNBrush read get_ButtonHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ButtonShadow: DNBrush read get_ButtonShadow;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是表面的三维元素的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property Control: DNBrush read get_Control;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ControlLightLight: DNBrush read get_ControlLightLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的亮色。
    ///</returns>
    {class} property ControlLight: DNBrush read get_ControlLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDark: DNBrush read get_ControlDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDarkDark: DNBrush read get_ControlDarkDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素中文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是三维元素中文本的颜色。
    ///</returns>
    {class} property ControlText: DNBrush read get_ControlText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是桌面的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是桌面的颜色。
    ///</returns>
    {class} property Desktop: DNBrush read get_Desktop;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientActiveCaption: DNBrush read get_GradientActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientInactiveCaption: DNBrush read get_GradientInactiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是浅灰色文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是浅灰色文本的颜色。
    ///</returns>
    {class} property GrayText: DNBrush read get_GrayText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示选定项的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示选定项的背景的颜色。
    ///</returns>
    {class} property Highlight: DNBrush read get_Highlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示选定项的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示选定项的文本的颜色。
    ///</returns>
    {class} property HighlightText: DNBrush read get_HighlightText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示用于指定热跟踪项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示用于指定热跟踪项的颜色。
    ///</returns>
    {class} property HotTrack: DNBrush read get_HotTrack;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏的背景的颜色。
    ///</returns>
    {class} property InactiveCaption: DNBrush read get_InactiveCaption;
    ///<summary>
    ///  获取作为非活动窗口边框的颜色的 <see cref="T:System.Drawing.SolidBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示活动窗口边框的颜色。
    ///</returns>
    {class} property InactiveBorder: DNBrush read get_InactiveBorder;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是活动窗口的标题栏中的文本颜色。
    ///</returns>
    {class} property InactiveCaptionText: DNBrush read get_InactiveCaptionText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个工具提示的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个工具提示的背景颜色。
    ///</returns>
    {class} property Info: DNBrush read get_Info;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个工具提示文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  为工具提示的文本的颜色。
    ///</returns>
    {class} property InfoText: DNBrush read get_InfoText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个菜单背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个菜单背景的颜色。
    ///</returns>
    {class} property Menu: DNBrush read get_Menu;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是菜单栏的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是菜单栏的背景颜色。
    ///</returns>
    {class} property MenuBar: DNBrush read get_MenuBar;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</returns>
    {class} property MenuHighlight: DNBrush read get_MenuHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个菜单文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个菜单文本的颜色。
    ///</returns>
    {class} property MenuText: DNBrush read get_MenuText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个滚动条的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个滚动条的背景颜色。
    ///</returns>
    {class} property ScrollBar: DNBrush read get_ScrollBar;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是在一个窗口的工作区中的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是在一个窗口的工作区中的背景颜色。
    ///</returns>
    {class} property Window: DNBrush read get_Window;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示窗口框架的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，表示窗口框架的颜色。
    ///</returns>
    {class} property WindowFrame: DNBrush read get_WindowFrame;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个窗口的工作区中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SolidBrush" />
    ///  ，它是一个窗口的工作区中的文本颜色。
    ///</returns>
    {class} property WindowText: DNBrush read get_WindowText;
  end;

  ///<summary>
  ///  每个属性 <see cref="T:System.Drawing.SystemBrushes" />
  ///  类是 <see cref="T:System.Drawing.SolidBrush" />
  ///  是 Windows 显示元素的颜色。
  ///</summary>
  [DNTypeName('System.Drawing.SystemBrushes')]
  DNSystemBrushes = interface(DDN.mscorlib.DNObject)
  ['{8F04EEF1-EFAB-3D0A-A3C1-8B5578A1FD52}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemBrushes = class(TDNGenericImport<DNSystemBrushesClass, DNSystemBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8743384-ED03-57E1-90C8-BCA0D1AE1516}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNColor;
    {class} function get_ActiveCaption: DNColor;
    {class} function get_ActiveCaptionText: DNColor;
    {class} function get_AppWorkspace: DNColor;
    {class} function get_ButtonFace: DNColor;
    {class} function get_ButtonHighlight: DNColor;
    {class} function get_ButtonShadow: DNColor;
    {class} function get_Control: DNColor;
    {class} function get_ControlDark: DNColor;
    {class} function get_ControlDarkDark: DNColor;
    {class} function get_ControlLight: DNColor;
    {class} function get_ControlLightLight: DNColor;
    {class} function get_ControlText: DNColor;
    {class} function get_Desktop: DNColor;
    {class} function get_GradientActiveCaption: DNColor;
    {class} function get_GradientInactiveCaption: DNColor;
    {class} function get_GrayText: DNColor;
    {class} function get_Highlight: DNColor;
    {class} function get_HighlightText: DNColor;
    {class} function get_HotTrack: DNColor;
    {class} function get_InactiveBorder: DNColor;
    {class} function get_InactiveCaption: DNColor;
    {class} function get_InactiveCaptionText: DNColor;
    {class} function get_Info: DNColor;
    {class} function get_InfoText: DNColor;
    {class} function get_Menu: DNColor;
    {class} function get_MenuBar: DNColor;
    {class} function get_MenuHighlight: DNColor;
    {class} function get_MenuText: DNColor;
    {class} function get_ScrollBar: DNColor;
    {class} function get_Window: DNColor;
    {class} function get_WindowFrame: DNColor;
    {class} function get_WindowText: DNColor;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口边框的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口边框的颜色。
    ///</returns>
    {class} property ActiveBorder: DNColor read get_ActiveBorder;
    ///<summary>
    ///  获取<see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口标题栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口标题栏的颜色。
    ///</returns>
    {class} property ActiveCaption: DNColor read get_ActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口标题栏中的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口标题栏中的文本颜色。
    ///</returns>
    {class} property ActiveCaptionText: DNColor read get_ActiveCaptionText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是应用程序工作区的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示应用程序工作区的颜色。
    ///</returns>
    {class} property AppWorkspace: DNColor read get_AppWorkspace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的表面颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property ButtonFace: DNColor read get_ButtonFace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ButtonHighlight: DNColor read get_ButtonHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ButtonShadow: DNColor read get_ButtonShadow;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的表面颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property Control: DNColor read get_Control;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDark: DNColor read get_ControlDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDarkDark: DNColor read get_ControlDarkDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的亮色。
    ///</returns>
    {class} property ControlLight: DNColor read get_ControlLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ControlLightLight: DNColor read get_ControlLightLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是三维元素中的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是三维元素中文本的颜色。
    ///</returns>
    {class} property ControlText: DNColor read get_ControlText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是桌面的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是桌面的颜色。
    ///</returns>
    {class} property Desktop: DNColor read get_Desktop;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientActiveCaption: DNColor read get_GradientActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientInactiveCaption: DNColor read get_GradientInactiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是浅灰色文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是浅灰色文本的颜色。
    ///</returns>
    {class} property GrayText: DNColor read get_GrayText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是选定项的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示选定项的背景的颜色。
    ///</returns>
    {class} property Highlight: DNColor read get_Highlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是选定项的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示选定项的文本的颜色。
    ///</returns>
    {class} property HighlightText: DNColor read get_HighlightText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是用来指定热跟踪项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示用于指定热跟踪项的颜色。
    ///</returns>
    {class} property HotTrack: DNColor read get_HotTrack;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个非活动窗口边框的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示活动窗口边框的颜色。
    ///</returns>
    {class} property InactiveBorder: DNColor read get_InactiveBorder;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口的标题栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口的标题栏的背景的颜色。
    ///</returns>
    {class} property InactiveCaption: DNColor read get_InactiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是活动窗口的标题栏中的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是活动窗口的标题栏中的文本颜色。
    ///</returns>
    {class} property InactiveCaptionText: DNColor read get_InactiveCaptionText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个工具提示的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个工具提示的背景颜色。
    ///</returns>
    {class} property Info: DNColor read get_Info;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个工具提示的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个工具提示文本的颜色。
    ///</returns>
    {class} property InfoText: DNColor read get_InfoText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个菜单背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个菜单背景的颜色。
    ///</returns>
    {class} property Menu: DNColor read get_Menu;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是菜单栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是菜单栏的背景颜色。
    ///</returns>
    {class} property MenuBar: DNColor read get_MenuBar;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</returns>
    {class} property MenuHighlight: DNColor read get_MenuHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个菜单文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个菜单文本的颜色。
    ///</returns>
    {class} property MenuText: DNColor read get_MenuText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是滚动条的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个滚动条的背景颜色。
    ///</returns>
    {class} property ScrollBar: DNColor read get_ScrollBar;
    ///<summary>
    ///  获取<see cref="T:System.Drawing.Color" />
    ///  结构，它是窗口的工作区中的背景的颜色。
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Drawing.Color" />
    ///  ，它是窗口的工作区中的背景颜色。
    ///</returns>
    {class} property Window: DNColor read get_Window;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个窗口框架的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，表示窗口框架的颜色。
    ///</returns>
    {class} property WindowFrame: DNColor read get_WindowFrame;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Color" />
    ///  结构，它是一个窗口的工作区中的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  ，它是一个窗口的工作区中的文本颜色。
    ///</returns>
    {class} property WindowText: DNColor read get_WindowText;
  end;

  ///<summary>
  ///  每个属性 <see cref="T:System.Drawing.SystemColors" />
  ///  类是 <see cref="T:System.Drawing.Color" />
  ///  结构，它是 Windows 的颜色显示元素。
  ///</summary>
  [DNTypeName('System.Drawing.SystemColors')]
  DNSystemColors = interface(DDN.mscorlib.DNObject)
  ['{10A38EB3-7AF4-3F68-A063-A3D0F88166E3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemColors = class(TDNGenericImport<DNSystemColorsClass, DNSystemColors>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D1FF717-A482-579A-A5CE-D672A646DB0E}']
  { static getter & setter } 

    {class} function get_CaptionFont: DNFont;
    {class} function get_SmallCaptionFont: DNFont;
    {class} function get_MenuFont: DNFont;
    {class} function get_StatusFont: DNFont;
    {class} function get_MessageBoxFont: DNFont;
    {class} function get_IconTitleFont: DNFont;
    {class} function get_DefaultFont: DNFont;
    {class} function get_DialogFont: DNFont;

  { static methods } 

    ///<summary>
    ///  返回一个字体对应于对象指定的系统字体名称。
    ///</summary>
    ///  <param name="systemFontName">
    ///  您需要为一个 font 对象为系统字体的名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  如果指定的名称中的值匹配 <see cref="T:System.Drawing.SystemFonts" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    {class} function GetFontByName(systemFontName: string): DNFont;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  用于在 windows 的标题栏中显示文本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  用于在 windows 的标题栏中显示文本。
    ///</returns>
    {class} property CaptionFont: DNFont read get_CaptionFont;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  用于小型窗口，例如工具窗口标题栏中显示文本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  用于小型窗口，例如工具窗口标题栏中显示文本。
    ///</returns>
    {class} property SmallCaptionFont: DNFont read get_SmallCaptionFont;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  用于菜单。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  用于菜单。
    ///</returns>
    {class} property MenuFont: DNFont read get_MenuFont;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  ，用来在状态栏中显示文本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  ，用来在状态栏中显示文本。
    ///</returns>
    {class} property StatusFont: DNFont read get_StatusFont;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  用于消息框。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  用于消息框
    ///</returns>
    {class} property MessageBoxFont: DNFont read get_MessageBoxFont;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Font" />
    ///  所用的图标标题。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  所用的图标标题。
    ///</returns>
    {class} property IconTitleFont: DNFont read get_IconTitleFont;
    ///<summary>
    ///  获取应用程序可以使用对话框和窗体的默认字体。
    ///</summary>
    ///<returns>
    ///  默认值 <see cref="T:System.Drawing.Font" />
    ///  的系统。
    ///  返回的值取决于用户的操作系统和他们的系统的本地区域性设置而异。
    ///</returns>
    {class} property DefaultFont: DNFont read get_DefaultFont;
    ///<summary>
    ///  获取应用程序可以使用对话框和窗体的字体。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Font" />
    ///  可用于的对话框和窗体，具体取决于操作系统和本地区域性设置的系统。
    ///</returns>
    {class} property DialogFont: DNFont read get_DialogFont;
  end;

  ///<summary>
  ///  指定用于在 Windows 中显示文本的字体显示元素。
  ///</summary>
  [DNTypeName('System.Drawing.SystemFonts')]
  DNSystemFonts = interface(DDN.mscorlib.DNObject)
  ['{0BDC7CB2-BF00-36B8-AC47-38EADBACD892}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemFonts = class(TDNGenericImport<DNSystemFontsClass, DNSystemFonts>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemIconsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0811C24B-7B5F-59A7-BE4A-B867BE5327EA}']
  { static getter & setter } 

    {class} function get_Application: DNIcon;
    {class} function get_Asterisk: DNIcon;
    {class} function get_Error: DNIcon;
    {class} function get_Exclamation: DNIcon;
    {class} function get_Hand: DNIcon;
    {class} function get_Information: DNIcon;
    {class} function get_Question: DNIcon;
    {class} function get_Warning: DNIcon;
    {class} function get_WinLogo: DNIcon;
    {class} function get_Shield: DNIcon;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含默认应用程序图标 (WIN32: IDI_APPLICATION)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含默认应用程序图标。
    ///</returns>
    {class} property Application: DNIcon read get_Application;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统星号图标 (WIN32: IDI_ASTERISK)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统星号图标。
    ///</returns>
    {class} property Asterisk: DNIcon read get_Asterisk;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统错误图标 (WIN32: IDI_ERROR)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统错误图标。
    ///</returns>
    {class} property Error: DNIcon read get_Error;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统感叹号图标 (WIN32: IDI_EXCLAMATION)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统感叹号图标。
    ///</returns>
    {class} property Exclamation: DNIcon read get_Exclamation;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统手形图标 (WIN32: IDI_HAND)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统手形图标。
    ///</returns>
    {class} property Hand: DNIcon read get_Hand;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统信息图标 (WIN32: IDI_INFORMATION)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统信息图标。
    ///</returns>
    {class} property Information: DNIcon read get_Information;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统问号图标 (WIN32: IDI_QUESTION)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统问号图标。
    ///</returns>
    {class} property Question: DNIcon read get_Question;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统警告图标 (WIN32: IDI_WARNING)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含系统警告图标。
    ///</returns>
    {class} property Warning: DNIcon read get_Warning;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含 Windows 徽标图标 (WIN32: IDI_WINLOGO)。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含 Windows 徽标图标。
    ///</returns>
    {class} property WinLogo: DNIcon read get_WinLogo;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含盾牌图标。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Icon" />
    ///  对象，其中包含盾牌图标。
    ///</returns>
    {class} property Shield: DNIcon read get_Shield;
  end;

  ///<summary>
  ///  每个属性 <see cref="T:System.Drawing.SystemIcons" />
  ///  类是 <see cref="T:System.Drawing.Icon" />
  ///  Windows 系统级图标的对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.SystemIcons')]
  DNSystemIcons = interface(DDN.mscorlib.DNObject)
  ['{5A42D3FD-8519-31FF-8531-51F2442A97AE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemIcons = class(TDNGenericImport<DNSystemIconsClass, DNSystemIcons>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC8172BB-7789-50A9-893B-C26AA54154C5}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNPen;
    {class} function get_ActiveCaption: DNPen;
    {class} function get_ActiveCaptionText: DNPen;
    {class} function get_AppWorkspace: DNPen;
    {class} function get_ButtonFace: DNPen;
    {class} function get_ButtonHighlight: DNPen;
    {class} function get_ButtonShadow: DNPen;
    {class} function get_Control: DNPen;
    {class} function get_ControlText: DNPen;
    {class} function get_ControlDark: DNPen;
    {class} function get_ControlDarkDark: DNPen;
    {class} function get_ControlLight: DNPen;
    {class} function get_ControlLightLight: DNPen;
    {class} function get_Desktop: DNPen;
    {class} function get_GradientActiveCaption: DNPen;
    {class} function get_GradientInactiveCaption: DNPen;
    {class} function get_GrayText: DNPen;
    {class} function get_Highlight: DNPen;
    {class} function get_HighlightText: DNPen;
    {class} function get_HotTrack: DNPen;
    {class} function get_InactiveBorder: DNPen;
    {class} function get_InactiveCaption: DNPen;
    {class} function get_InactiveCaptionText: DNPen;
    {class} function get_Info: DNPen;
    {class} function get_InfoText: DNPen;
    {class} function get_Menu: DNPen;
    {class} function get_MenuBar: DNPen;
    {class} function get_MenuHighlight: DNPen;
    {class} function get_MenuText: DNPen;
    {class} function get_ScrollBar: DNPen;
    {class} function get_Window: DNPen;
    {class} function get_WindowFrame: DNPen;
    {class} function get_WindowText: DNPen;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Pen" />
    ///  从指定 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</summary>
    ///  <param name="c"><see cref="T:System.Drawing.Color" />
    ///  新 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</returns>
    {class} function FromSystemColor(c: DNColor): DNPen;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口边框的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口边框的颜色。
    ///</returns>
    {class} property ActiveBorder: DNPen read get_ActiveBorder;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口标题栏的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口标题栏的背景的颜色。
    ///</returns>
    {class} property ActiveCaption: DNPen read get_ActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口标题栏中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口标题栏中的文本颜色。
    ///</returns>
    {class} property ActiveCaptionText: DNPen read get_ActiveCaptionText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示应用程序工作区的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示应用程序工作区的颜色。
    ///</returns>
    {class} property AppWorkspace: DNPen read get_AppWorkspace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是表面的三维元素的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property ButtonFace: DNPen read get_ButtonFace;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ButtonHighlight: DNPen read get_ButtonHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ButtonShadow: DNPen read get_ButtonShadow;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是表面的三维元素的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是表面的三维元素的颜色。
    ///</returns>
    {class} property Control: DNPen read get_Control;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素中文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素中文本的颜色。
    ///</returns>
    {class} property ControlText: DNPen read get_ControlText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDark: DNPen read get_ControlDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的阴影颜色。
    ///</returns>
    {class} property ControlDarkDark: DNPen read get_ControlDarkDark;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的亮色。
    ///</returns>
    {class} property ControlLight: DNPen read get_ControlLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的突出显示颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是三维元素的突出显示颜色。
    ///</returns>
    {class} property ControlLightLight: DNPen read get_ControlLightLight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是 Windows 桌面的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是 Windows 桌面的颜色。
    ///</returns>
    {class} property Desktop: DNPen read get_Desktop;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientActiveCaption: DNPen read get_GradientActiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏的颜色渐变中的最亮色。
    ///</returns>
    {class} property GradientInactiveCaption: DNPen read get_GradientInactiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是浅灰色文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是浅灰色文本的颜色。
    ///</returns>
    {class} property GrayText: DNPen read get_GrayText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示选定项的背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示选定项的背景的颜色。
    ///</returns>
    {class} property Highlight: DNPen read get_Highlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示选定项的文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示选定项的文本的颜色。
    ///</returns>
    {class} property HighlightText: DNPen read get_HighlightText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示用于指定热跟踪项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示用于指定热跟踪项的颜色。
    ///</returns>
    {class} property HotTrack: DNPen read get_HotTrack;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  为非活动窗口的边框的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口边框的颜色。
    ///</returns>
    {class} property InactiveBorder: DNPen read get_InactiveBorder;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示活动窗口的标题栏标题的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示活动窗口的标题栏标题的颜色。
    ///</returns>
    {class} property InactiveCaption: DNPen read get_InactiveCaption;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是活动窗口的标题栏中的文本颜色。
    ///</returns>
    {class} property InactiveCaptionText: DNPen read get_InactiveCaptionText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个工具提示的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个工具提示的背景颜色。
    ///</returns>
    {class} property Info: DNPen read get_Info;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个工具提示文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个工具提示文本的颜色。
    ///</returns>
    {class} property InfoText: DNPen read get_InfoText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个菜单背景的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个菜单背景的颜色。
    ///</returns>
    {class} property Menu: DNPen read get_Menu;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是菜单栏的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是菜单栏的背景颜色。
    ///</returns>
    {class} property MenuBar: DNPen read get_MenuBar;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是用来在菜单上显示为平面菜单时突出显示菜单项的颜色。
    ///</returns>
    {class} property MenuHighlight: DNPen read get_MenuHighlight;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个菜单文本的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个菜单文本的颜色。
    ///</returns>
    {class} property MenuText: DNPen read get_MenuText;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个滚动条的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个滚动条的背景颜色。
    ///</returns>
    {class} property ScrollBar: DNPen read get_ScrollBar;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是在一个窗口的工作区中的背景颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是在一个窗口的工作区中的背景颜色。
    ///</returns>
    {class} property Window: DNPen read get_Window;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，表示窗口框架的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，表示窗口框架的颜色。
    ///</returns>
    {class} property WindowFrame: DNPen read get_WindowFrame;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个窗口的工作区中的文本颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它是一个窗口的工作区中的文本颜色。
    ///</returns>
    {class} property WindowText: DNPen read get_WindowText;
  end;

  ///<summary>
  ///  每个属性 <see cref="T:System.Drawing.SystemPens" />
  ///  类是 <see cref="T:System.Drawing.Pen" />
  ///  Windows 显示元素的颜色并且拥有宽度为 1 个像素。
  ///</summary>
  [DNTypeName('System.Drawing.SystemPens')]
  DNSystemPens = interface(DDN.mscorlib.DNObject)
  ['{0193DFF9-1BC0-3C1F-A57C-B0588F275126}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemPens = class(TDNGenericImport<DNSystemPensClass, DNSystemPens>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNFontCollectionClass = interface(DNObjectClass)
  ['{658FAB24-84C8-575B-AEF2-6C87356F9CD5}']
  end;

  ///<summary>
  ///  安装和专用字体集合提供基类。
  ///</summary>
  [DNTypeName('System.Drawing.Text.FontCollection')]
  DNFontCollection = interface(DDN.mscorlib.DNIDisposable)
  ['{1E49A6A1-22AE-3BA9-ADA8-DE8A9D090BDE}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取数组的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象与此相关 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  对象数组。
    ///</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNFontCollection = class(TDNGenericImport<DNFontCollectionClass, DNFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNInstalledFontCollectionClass = interface(DNFontCollectionClass)
  ['{1A9D8C9E-5A4D-5333-8C03-23685FE64160}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Text.InstalledFontCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInstalledFontCollection;

  end;

  ///<summary>
  ///  表示系统上安装的字体。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Text.InstalledFontCollection')]
  DNInstalledFontCollection = interface(DNFontCollection)
  ['{18BAC7AC-7EC1-3E37-A600-CA3CC56B849F}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取数组的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象与此相关 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  对象数组。
    ///</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNInstalledFontCollection = class(TDNGenericImport<DNInstalledFontCollectionClass, DNInstalledFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNPrivateFontCollectionClass = interface(DNFontCollectionClass)
  ['{D9E6F7A7-DA39-552D-8F60-71C2E5F257FE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrivateFontCollection;

  end;

  ///<summary>
  ///  提供从客户端应用程序提供的字体文件生成的字体系列的集合。
  ///</summary>
  [DNTypeName('System.Drawing.Text.PrivateFontCollection')]
  DNPrivateFontCollection = interface(DNFontCollection)
  ['{397F6523-8278-3AFB-97E5-5444365E9A72}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>
    ///  将一种字体从指定的文件添加到此 <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  。
    ///</summary>
    ///  <param name="filename">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含要添加的字体的文件名。
    ///</param>
    ///<exception cref="T:System.IO.FileNotFoundException">
    ///  不支持指定的字体或找不到字体文件。
    ///</exception>
    procedure AddFontFile(filename: string);
    ///<summary>
    ///  将添加到此系统内存中的字体 <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  。
    ///</summary>
    ///  <param name="memory">
    ///  要添加的字体的内存地址。
    ///</param>
    ///  <param name="length">
    ///  要添加的字体内存长度。
    ///</param>
    procedure AddMemoryFont(memory: IntPtr; length: Int32);
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取数组的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象与此相关 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  对象数组。
    ///</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNPrivateFontCollection = class(TDNGenericImport<DNPrivateFontCollectionClass, DNPrivateFontCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintEventArgsClass = interface(DNObjectClass)
  ['{DD88D947-6F22-569B-9601-6073DB817CC1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrintEventArgs;

  end;

  ///<summary>
  ///  提供有关 <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  和 <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  事件的数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintEventArgs')]
  DNPrintEventArgs = interface(DNObject)
  ['{740149A2-C310-3A38-90EC-D84638581A00}']
  { getters & setters } 

    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在所有情况下均返回 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNPrintEventArgs = class(TDNGenericImport<DNPrintEventArgsClass, DNPrintEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNQueryPageSettingsEventArgsClass = interface(DNPrintEventArgsClass)
  ['{40D2D17D-329D-5469-85F9-313B929E506A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="pageSettings">
    ///  要打印页的页设置。
    ///</param>
    {class} function init(pageSettings: DNPageSettings): DNQueryPageSettingsEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventArgs')]
  DNQueryPageSettingsEventArgs = interface(DNPrintEventArgs)
  ['{89C40DE8-7377-3FD3-B574-143C6A9E7BB0}']
  { getters & setters } 

    function get_PageSettings: DNPageSettings;
    procedure set_PageSettings(value: DNPageSettings);
    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要打印页的页设置。
    ///</summary>
    ///<returns>
    ///  要打印页的页设置。
    ///</returns>
    property PageSettings: DNPageSettings read get_PageSettings write set_PageSettings;
    ///<summary>
    ///  在所有情况下均返回 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  。
    ///</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNQueryPageSettingsEventArgs = class(TDNGenericImport<DNQueryPageSettingsEventArgsClass, DNQueryPageSettingsEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPaintValueEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E07A33BE-AA54-50C0-8DCF-2233AEC4103E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  类使用指定的值。
    ///</summary>
    ///  <param name="context">
    ///  值出现的上下文。
    ///</param>
    ///  <param name="value">
    ///  要绘制的值。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  绘图与之进行的对象。
    ///</param>
    ///  <param name="bounds"><see cref="T:System.Drawing.Rectangle" />
    ///  中哪一个绘图是来完成。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; graphics: DNGraphics; bounds: DNRectangle): DNPaintValueEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Drawing.Design.PaintValueEventArgs')]
  DNPaintValueEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{930E4EF8-64A3-3225-9E76-6A89F790EF1E}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Context: DDN.System.DNITypeDescriptorContext;
    function get_Graphics: DNGraphics;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取指示应在其中完成绘制的区域的矩形。
    ///</summary>
    ///<returns>
    ///  指示应在其中完成绘制的区域的矩形。
    ///</returns>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  接口，以用来获得此值的上下文有关的其他信息将出现在。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，该值指示事件的上下文。
    ///</returns>
    property Context: DDN.System.DNITypeDescriptorContext read get_Context;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Graphics" />
    ///  应与其完成绘制的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  要用于绘制对象。
    ///</returns>
    property Graphics: DNGraphics read get_Graphics;
    ///<summary>
    ///  获取要绘制的值。
    ///</summary>
    ///<returns>
    ///  一个指示绘制内容的对象。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNPaintValueEventArgs = class(TDNGenericImport<DNPaintValueEventArgsClass, DNPaintValueEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{957F3B55-1AA3-5DCA-8C10-13F6A0BF1883}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="components">
    ///  要在工具箱中包含的组件。
    ///</param>
    {class} function init(components: TArray<DDN.System.DNIComponent>): DNToolboxComponentsCreatedEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />
  ///  组件添加到工具箱时发生的事件。
  ///</summary>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventArgs')]
  DNToolboxComponentsCreatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D9C9B38B-6C71-3629-9227-22C80CF66162}']
  { getters & setters } 

    function get_Components: TArray<DDN.System.DNIComponent>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组，包含要添加到工具箱的组件。
    ///</summary>
    ///<returns>
    ///  类型的数组 <see cref="T:System.ComponentModel.IComponent" />
    ///  ，该值指示要添加到工具箱的组件。
    ///</returns>
    property Components: TArray<DDN.System.DNIComponent> read get_Components;
  end;

  TDNToolboxComponentsCreatedEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatedEventArgsClass, DNToolboxComponentsCreatedEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6CEBDD0-D42F-5AF7-A8EC-04D931626653}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="host">
    ///  设计器宿主正在发出请求。
    ///</param>
    {class} function init(host: DDN.System.DNIDesignerHost): DNToolboxComponentsCreatingEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />
  ///  组件添加到工具箱时发生的事件。
  ///</summary>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventArgs')]
  DNToolboxComponentsCreatingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B7F90306-D408-3A12-9B2C-CD1F3CE5A5AE}']
  { getters & setters } 

    function get_DesignerHost: DDN.System.DNIDesignerHost;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的一个实例 <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  进行创建工具箱组件的请求。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  的请求创建工具箱组件或 <see langword="null" />
    ///  如果设计器的任何主机不提供给工具箱项。
    ///</returns>
    property DesignerHost: DDN.System.DNIDesignerHost read get_DesignerHost;
  end;

  TDNToolboxComponentsCreatingEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatingEventArgsClass, DNToolboxComponentsCreatingEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintPageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FAEE24EA-1B7E-5DA1-AE8A-791352369941}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  用于绘制该项。
    ///</param>
    ///  <param name="marginBounds">
    ///  边距之间的区域。
    ///</param>
    ///  <param name="pageBounds">
    ///  在纸张的整个区域。
    ///</param>
    ///  <param name="pageSettings"><see cref="T:System.Drawing.Printing.PageSettings" />
    ///  页。
    ///</param>
    {class} function init(graphics: DNGraphics; marginBounds: DNRectangle; pageBounds: DNRectangle; pageSettings: DNPageSettings): DNPrintPageEventArgs;

  end;

  ///<summary>
  ///  为 <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintPageEventArgs')]
  DNPrintPageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2A5D8F32-812E-3C94-9263-51BCC040C47C}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_Graphics: DNGraphics;
    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_MarginBounds: DNRectangle;
    function get_PageBounds: DNRectangle;
    function get_PageSettings: DNPageSettings;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否应取消打印作业。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应取消打印作业;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Graphics" />
    ///  用来绘制页。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Graphics" />
    ///  用来绘制页。
    ///</returns>
    property Graphics: DNGraphics read get_Graphics;
    ///<summary>
    ///  获取或设置一个值，该值指示是否应打印附加页。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应打印附加页;，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    ///<summary>
    ///  获取表示边距内页面的部分的矩形区域。
    ///</summary>
    ///<returns>
    ///  矩形区域，以百分之一英寸，它表示边距以内页面的部分。
    ///</returns>
    property MarginBounds: DNRectangle read get_MarginBounds;
    ///<summary>
    ///  获取表示页上的总区域的矩形区域。
    ///</summary>
    ///<returns>
    ///  表示页上的总区域的矩形区域。
    ///</returns>
    property PageBounds: DNRectangle read get_PageBounds;
    ///<summary>
    ///  获取当前页的页设置。
    ///</summary>
    ///<returns>
    ///  当前页的页设置。
    ///</returns>
    property PageSettings: DNPageSettings read get_PageSettings;
  end;

  TDNPrintPageEventArgs = class(TDNGenericImport<DNPrintPageEventArgsClass, DNPrintPageEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNInvalidPrinterExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{61B60F22-03DD-5D86-8926-7775864970BB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.InvalidPrinterException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="settings">
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，指定打印机的设置。
    ///</param>
    {class} function init(settings: DNPrinterSettings): DNInvalidPrinterException;

  end;

  ///<summary>
  ///  表示当您尝试使用无效的打印机设置访问打印机时引发的异常。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.InvalidPrinterException')]
  DNInvalidPrinterException = interface(DDN.mscorlib.DNSystemException)
  ['{6D01472A-14A8-36E6-8E93-3577E1A8A4B5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  重写。
    ///  使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  ，它保存关于所引发异常的序列化对象数据。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  ，它包含关于源或目标的上下文信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPrinterException = class(TDNGenericImport<DNInvalidPrinterExceptionClass, DNInvalidPrinterException>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintDocumentClass = interface(DNObjectClass)
  ['{34BD3BB6-F9F1-504E-B7D3-3DB900132744}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrintDocument;

  end;

  ///<summary>
  ///  从 Windows 窗体应用程序打印时，定义一种可重用的可发送到打印机上的对象。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintDocument')]
  DNPrintDocument = interface(DNObject)
  ['{9501869F-5E2A-35B6-8588-737438CB7BC8}']
  { getters & setters } 

    function get_DefaultPageSettings: DNPageSettings;
    procedure set_DefaultPageSettings(value: DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DNPrintController;
    procedure set_PrintController(value: DNPrintController);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DNPrintEventHandler);
    procedure remove_BeginPrint(value: DNPrintEventHandler);
    procedure add_EndPrint(value: DNPrintEventHandler);
    procedure remove_EndPrint(value: DNPrintEventHandler);
    procedure add_PrintPage(value: DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  开始文档的打印进程。
    ///</summary>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">
    ///  中指定的打印机 <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  属性不存在。
    ///</exception>
    procedure Print;
    ///<summary>
    ///  以字符串形式提供有关打印文档的信息。
    ///</summary>
    ///<returns>
    ///  一个字符串。
    ///</returns>
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置用作要打印的所有页的默认设置的页设置。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ，它指定文档的默认页设置。
    ///</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    ///<summary>
    ///  获取或设置打印文档时要显示的文档名称（例如，在打印状态对话框或打印机队列中）。
    ///</summary>
    ///<returns>
    ///  打印文档时要显示的文档名。
    ///  默认为“文档”。
    ///</returns>
    property DocumentName: string read get_DocumentName write set_DocumentName;
    ///<summary>
    ///  获取或设置一个值，该值指示与页关联的图形对象的位置是位于用户指定边距内，还是位于该页可打印区域的左上角。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果图形原点起始于页边距; <see langword="false" />
    ///  如果图形原点位于可打印的页面的左上角。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    ///<summary>
    ///  获取或设置指导打印进程的打印控制器。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintController" />
    ///  指导打印进程。
    ///  默认值为的新实例 <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" />
    ///  类。
    ///</returns>
    property PrintController: DNPrintController read get_PrintController write set_PrintController;
    ///<summary>
    ///  获取或设置对文档进行打印的打印机。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  ，它指定在何处以及如何打印文档。
    ///  默认值是 <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  其属性值设为其默认值。
    ///</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNPrintDocument = class(TDNGenericImport<DNPrintDocumentClass, DNPrintDocument>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{629CBCB4-595B-51D5-8891-446B38F904D4}']
  end;

  ///<summary>
  ///  定义用来填充的如矩形、 椭圆、 饼、 多边形和路径的图形形状的内部对象。
  ///</summary>
  [DNTypeName('System.Drawing.Brush')]
  DNBrush = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{60C4596A-1199-3E69-B581-7E1C9CDE9B1A}']
  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  当在派生类中重写时创建的一个精确副本 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNHatchBrushClass = interface(DNBrushClass)
  ['{2463DC27-A67E-5974-965B-A398DFD6DA3E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  枚举和前景色。
    ///</summary>
    ///  <param name="hatchstyle">
    ///  其中一个 <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  值，该值表示所绘制的这图案 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</param>
    ///  <param name="foreColor"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示此绘制的线条的颜色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</param>
    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor): DNHatchBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  枚举、 前景色和背景色。
    ///</summary>
    ///  <param name="hatchstyle">
    ///  其中一个 <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  值，该值表示所绘制的这图案 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</param>
    ///  <param name="foreColor"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示此绘制的线条的颜色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</param>
    ///  <param name="backColor"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示空间之间由此绘制的线条的颜色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</param>
    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor; backColor: DNColor): DNHatchBrush; overload;

  end;

  ///<summary>
  ///  定义矩形画笔阴影样式、 前景颜色与背景色。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.HatchBrush')]
  DNHatchBrush = interface(DNBrush)
  ['{77A4D49D-2D7A-373D-88B0-CA6E954C3537}']
  { getters & setters } 

    function get_HatchStyle: DNHatchStyle;
    function get_ForegroundColor: DNColor;
    function get_BackgroundColor: DNColor;

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此的阴影样式 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  值，该值表示此模式 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</returns>
    property HatchStyle: DNHatchStyle read get_HatchStyle;
    ///<summary>
    ///  获取由此绘制阴影线的颜色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示此的前景色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</returns>
    property ForegroundColor: DNColor read get_ForegroundColor;
    ///<summary>
    ///  获取由此绘制阴影线之间的空格的颜色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示此的背景色 <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  。
    ///</returns>
    property BackgroundColor: DNColor read get_BackgroundColor;
  end;

  TDNHatchBrush = class(TDNGenericImport<DNHatchBrushClass, DNHatchBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNLinearGradientBrushClass = interface(DNBrushClass)
  ['{469B1A6B-7DF1-528C-A017-CA7DE0537B7A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类具有两个指定的点和颜色。
    ///</summary>
    ///  <param name="point1">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  结构，它表示线性渐变的起始点。
    ///</param>
    ///  <param name="point2">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  结构，它表示线性渐变的终结点。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示线性渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示线性渐变的结束颜色。
    ///</param>
    {class} function init(point1: DNPointF; point2: DNPointF; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类具有两个指定的点和颜色。
    ///</summary>
    ///  <param name="point1">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构，它表示线性渐变的起始点。
    ///</param>
    ///  <param name="point2">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构，它表示线性渐变的终结点。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示线性渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示线性渐变的结束颜色。
    ///</param>
    {class} function init(point1: DNPoint; point2: DNPoint; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  根据矩形、 开始和结束颜色以及方向模式。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="linearGradientMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" />
    ///  枚举元素，它指定渐变的方向。
    ///  方向决定的渐变的起始和结束点。
    ///  例如， <see langword="LinearGradientMode.ForwardDiagonal" />
    ///  指定的起始点是该矩形的左上角和结束点是矩形右下角。
    ///</param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类根据一个矩形，开始和结束颜色以及方向。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="linearGradientMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" />
    ///  枚举元素，它指定渐变的方向。
    ///  方向决定的渐变的起始和结束点。
    ///  例如， <see langword="LinearGradientMode.ForwardDiagonal" />
    ///  指定的起始点是该矩形的左上角和结束点是矩形右下角。
    ///</param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类根据一个矩形，开始和结束颜色以及方向角度。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="angle">
    ///  以度数为单位从 x 轴顺时针方向的渐变线的角度。
    ///</param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类根据一个矩形，开始和结束颜色以及方向角度。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="angle">
    ///  以度数为单位从 x 轴顺时针方向的渐变线的角度。
    ///</param>
    ///  <param name="isAngleScaleable">
    ///  设置为 <see langword="true" />
    ///  指定角度受与此关联的转换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类根据一个矩形，开始和结束颜色以及方向角度。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="angle">
    ///  以度数为单位从 x 轴顺时针方向的渐变线的角度。
    ///</param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  类根据一个矩形，开始和结束颜色以及方向角度。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定线性渐变的边界。
    ///</param>
    ///  <param name="color1">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的开始颜色。
    ///</param>
    ///  <param name="color2">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示的渐变的结束颜色。
    ///</param>
    ///  <param name="angle">
    ///  以度数为单位从 x 轴顺时针方向的渐变线的角度。
    ///</param>
    ///  <param name="isAngleScaleable">
    ///  设置为 <see langword="true" />
    ///  指定角度受与此关联的转换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;

  end;

  ///<summary>
  ///  封装 <see cref="T:System.Drawing.Brush" />
  ///  带有线性渐变。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.LinearGradientBrush')]
  DNLinearGradientBrush = interface(DNBrush)
  ['{5AE2600B-BBD2-3404-8FE9-C6553DE9329B}']
  { getters & setters } 

    function get_LinearColors: TArray<DNColor>;
    procedure set_LinearColors(value: TArray<DNColor>);
    function get_Rectangle: DNRectangleF;
    function get_GammaCorrection: Boolean;
    procedure set_GammaCorrection(value: Boolean);
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);

  { methods } 

    ///<summary>
    ///  将局部几何变换平移指定尺寸。
    ///  此方法预先计算转换的转换。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建基于钟形曲线的渐变过渡过程。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定渐变 （其中均匀混合的开始颜色和结束颜色的点） 的中心值。
    ///</param>
    procedure SetSigmaBellShape(focus: Single); overload;
    ///<summary>
    ///  创建基于钟形曲线的渐变过渡过程。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定渐变 （渐变构成的点仅的结束颜色） 的中心值。
    ///</param>
    ///  <param name="scale">
    ///  一个介于 0 到 1，指定颜色过渡的过渡速度从 <paramref name="focus" />
    ///  。
    ///</param>
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    ///<summary>
    ///  使用中间颜色和线性过渡到两端一种颜色创建线性渐变。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定渐变 （渐变构成的点仅的结束颜色） 的中心值。
    ///</param>
    procedure SetBlendTriangularShape(focus: Single); overload;
    ///<summary>
    ///  使用中间颜色和线性过渡到两端一种颜色创建线性渐变。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定渐变 （渐变构成的点仅的结束颜色） 的中心值。
    ///</param>
    ///  <param name="scale">
    ///  取值范围为 0 指定颜色过渡的过渡速度从起始颜色的 through1 <paramref name="focus" />
    ///  （结束色）
    ///</param>
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    ///<summary>
    ///  重置 <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
    ///  属性设置为标识。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  乘以 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，表示此局部几何变换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  通过预先计算指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  用来乘的几何变换。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  乘以 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，表示此局部几何变换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  按照指定的顺序。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  用来乘的几何变换。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定按什么顺序两个矩阵相乘。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何变换平移指定的顺序指定的尺寸。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    ///  <param name="order">
    ///  应用转换的顺序（在前面添加或在后面追加）。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何变换缩放指定的量。
    ///  此方法将前面添加缩放矩阵的转换。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放变换的量。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放变换的量。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  刻度将局部几何变换以指定顺序指定的数量。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放变换的量。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放变换的量。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何变换旋转指定的量。
    ///  此方法将追加到变换旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  将局部几何变换旋转指定的顺序指定的量。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定是在后面追加旋转矩阵还是在前面添加旋转矩阵。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置渐变的开始和结束颜色。
    ///</summary>
    ///<returns>
    ///  两个数组 <see cref="T:System.Drawing.Color" />
    ///  这些结构表示的起始和结束的渐变的颜色。
    ///</returns>
    property LinearColors: TArray<DNColor> read get_LinearColors write set_LinearColors;
    ///<summary>
    ///  获取一个定义的渐变的起始和结束点的矩形区域。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定的起始和结束点的渐变。
    ///</returns>
    property Rectangle: DNRectangleF read get_Rectangle;
    ///<summary>
    ///  获取或设置一个值，该值指示此启用灰度校正 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  值是 <see langword="true" />
    ///  如果灰度校正启用了使此 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GammaCorrection: Boolean read get_GammaCorrection write set_GammaCorrection;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  ，用于指定位置和定义自定义的渐变过渡的因素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  ，它表示自定义的渐变过渡。
    ///</returns>
    property Blend: DNBlend read get_Blend write set_Blend;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  定义多色线性渐变。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  定义多色线性渐变。
    ///</returns>
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，指示此环绕模式 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  ，它指定如何与此绘制填充 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  平铺。
    ///</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>
    ///  获取或设置一个副本 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  此定义局部几何变换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一份 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  定义仅适用于与此绘制填充的几何变换 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  。
    ///</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
  end;

  TDNLinearGradientBrush = class(TDNGenericImport<DNLinearGradientBrushClass, DNLinearGradientBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathGradientBrushClass = interface(DNBrushClass)
  ['{E741BBA6-B534-5F44-8D3F-42CE30184DD3}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  使用指定的点的类。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要构成路径的顶点的点。
    ///</param>
    {class} function init(points: TArray<DNPointF>): DNPathGradientBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  类使用指定的点和环绕模式。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要构成路径的顶点的点。
    ///</param>
    ///  <param name="wrapMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  ，它指定如何与此绘制填充 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  平铺。
    ///</param>
    {class} function init(points: TArray<DNPointF>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  使用指定的点的类。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示要构成路径的顶点的点。
    ///</param>
    {class} function init(points: TArray<DNPoint>): DNPathGradientBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  类使用指定的点和环绕模式。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示要构成路径的顶点的点。
    ///</param>
    ///  <param name="wrapMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  ，它指定如何与此绘制填充 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  平铺。
    ///</param>
    {class} function init(points: TArray<DNPoint>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  类，具有指定的路径。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  定义此填充的区域 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  。
    ///</param>
    {class} function init(path: DNGraphicsPath): DNPathGradientBrush; overload;

  end;

  ///<summary>
  ///  封装 <see cref="T:System.Drawing.Brush" />
  ///  填充的内部对象 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  使用渐变对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathGradientBrush')]
  DNPathGradientBrush = interface(DNBrush)
  ['{E5B2B033-F0E6-3A04-A0D0-8CF89EBF335A}']
  { getters & setters } 

    function get_CenterColor: DNColor;
    procedure set_CenterColor(value: DNColor);
    function get_SurroundColors: TArray<DNColor>;
    procedure set_SurroundColors(value: TArray<DNColor>);
    function get_CenterPoint: DNPointF;
    procedure set_CenterPoint(value: DNPointF);
    function get_Rectangle: DNRectangleF;
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_FocusScales: DNPointF;
    procedure set_FocusScales(value: DNPointF);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建更改的中心向外的路径从开始到路径的边界的颜色渐变画笔。
    ///  从一种颜色过渡到另一个基于钟形曲线。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定，沿任意半径向上路径中心到路径的边界，中间颜色将在其中亮度最高值。
    ///  如果值为 1 （默认值） 将最高亮度放在路径的中心。
    ///</param>
    procedure SetSigmaBellShape(focus: Single); overload;
    ///<summary>
    ///  创建更改的中心向外的路径从开始到路径的边界的颜色渐变画笔。
    ///  从一种颜色过渡到另一个基于钟形曲线。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定，沿任意半径向上路径中心到路径的边界，中间颜色将在其中亮度最高值。
    ///  如果值为 1 （默认值） 将最高亮度放在路径的中心。
    ///</param>
    ///  <param name="scale">
    ///  介于 0 和 1 指定的最大强度获取与边界色混合的中间颜色值。
    ///  如果值为 1 导致中心颜色的亮度最高可能，并且它是默认值。
    ///</param>
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    ///<summary>
    ///  创建具有中心颜色和向周围色线性过渡的渐变。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定，沿任意半径向上路径中心到路径的边界，中间颜色将在其中亮度最高值。
    ///  如果值为 1 （默认值） 将最高亮度放在路径的中心。
    ///</param>
    procedure SetBlendTriangularShape(focus: Single); overload;
    ///<summary>
    ///  创建具有中心颜色和向各周围色线性过渡的渐变。
    ///</summary>
    ///  <param name="focus">
    ///  介于 0 和 1 指定，沿任意半径向上路径中心到路径的边界，中间颜色将在其中亮度最高值。
    ///  如果值为 1 （默认值） 将最高亮度放在路径的中心。
    ///</param>
    ///  <param name="scale">
    ///  介于 0 和 1 指定的最大强度获取与边界色混合的中间颜色值。
    ///  如果值为 1 导致中心颜色的亮度最高可能，并且它是默认值。
    ///</param>
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    ///<summary>
    ///  重置 <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.Transform" />
    ///  属性设置为标识。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  更新与另一个矩阵相乘的画笔的变换矩阵的乘积画笔的变换矩阵。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，将乘以该画笔的当前变换矩阵。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  更新与另一个矩阵相乘的画笔的变换矩阵的乘积画笔的变换矩阵。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，将乘以该画笔的当前变换矩阵。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定按什么顺序两个矩阵相乘。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将指定的平移应用于局部几何变换。
    ///  此方法预先计算转换的转换。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  将指定的平移应用于局部几何变换以指定顺序。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    ///  <param name="order">
    ///  应用转换的顺序（在前面添加或在后面追加）。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何变换缩放指定的量。
    ///  此方法将前面添加缩放矩阵的转换。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向的转换缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  Y 轴方向的转换缩放比例。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  刻度将局部几何变换以指定顺序指定的数量。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向的转换缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  Y 轴方向的转换缩放比例。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何变换旋转指定的量。
    ///  此方法将追加到变换旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度 （范围）。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  将局部几何变换旋转指定的顺序指定的量。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度 （范围）。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定是在后面追加旋转矩阵还是在前面添加旋转矩阵。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置在中心路径渐变的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示中心的路径渐变的颜色。
    ///</returns>
    property CenterColor: DNColor read get_CenterColor write set_CenterColor;
    ///<summary>
    ///  获取或设置此对应的路径中的点的颜色数组 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  填充。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Color" />
    ///  路径中的这些结构表示要与每个关联的颜色指出此 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  填充。
    ///</returns>
    property SurroundColors: TArray<DNColor> read get_SurroundColors write set_SurroundColors;
    ///<summary>
    ///  获取或设置路径渐变的中心点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  表示路径渐变的中心点。
    ///</returns>
    property CenterPoint: DNPointF read get_CenterPoint write set_CenterPoint;
    ///<summary>
    ///  获取此绑定矩形 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  ，这表示限定路径的矩形区域 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  填充。
    ///</returns>
    property Rectangle: DNRectangleF read get_Rectangle;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  ，用于指定位置和定义自定义的渐变过渡的因素。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  ，它表示自定义的渐变过渡。
    ///</returns>
    property Blend: DNBlend read get_Blend write set_Blend;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  定义多色线性渐变。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  定义多色线性渐变。
    ///</returns>
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    ///<summary>
    ///  获取或设置一份 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  此定义局部几何变换 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一份 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  定义仅适用于与此绘制填充的几何变换 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  。
    ///</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取或设置渐变过渡的焦点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示渐变过渡的关注点。
    ///</returns>
    property FocusScales: DNPointF read get_FocusScales write set_FocusScales;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  ，指示此环绕模式 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  ，它指定如何与此绘制填充 <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  平铺。
    ///</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
  end;

  TDNPathGradientBrush = class(TDNGenericImport<DNPathGradientBrushClass, DNPathGradientBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNSolidBrushClass = interface(DNBrushClass)
  ['{D7F20627-0C7C-58D3-997D-61EA3F7FF064}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.SolidBrush" />
    ///  指定颜色的对象。
    ///</summary>
    ///  <param name="color">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示此画笔的颜色。
    ///</param>
    {class} function init(color: DNColor): DNSolidBrush;

  end;

  ///<summary>
  ///  定义一种颜色的画笔。
  ///  画笔用于填充图形形状，如矩形、 椭圆、 饼、 多边形和路径。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.SolidBrush')]
  DNSolidBrush = interface(DNBrush)
  ['{F91083B8-1E45-3C38-9B63-5362D63049B4}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.SolidBrush" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.SolidBrush" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置此颜色 <see cref="T:System.Drawing.SolidBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示此画笔的颜色。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.SolidBrush.Color" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.SolidBrush" />
    ///  。
    ///</exception>
    property Color: DNColor read get_Color write set_Color;
  end;

  TDNSolidBrush = class(TDNGenericImport<DNSolidBrushClass, DNSolidBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNTextureBrushClass = interface(DNBrushClass)
  ['{FFC9F2B2-99D2-5913-AC6F-7D4D3E0F07B3}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的映像。
    ///</summary>
    ///  <param name="bitmap"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    {class} function init(bitmap: DNImage): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的映像和自动换行模式。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="wrapMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，用于指定如何将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的平铺。
    ///</param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像、 环绕模式和边框。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="wrapMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，用于指定如何将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的平铺。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangleF): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像、 环绕模式和边框。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="wrapMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，用于指定如何将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的平铺。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangle): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像和边框。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; dstRect: DNRectangleF): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像、 边框和图像属性。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象，其中包含有关由此所使用的映像的其他信息 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; dstRect: DNRectangleF; imageAttr: DNImageAttributes): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像和边框。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; dstRect: DNRectangle): DNTextureBrush; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象，它使用指定的图像、 边框和图像属性。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  对象与此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象来填充其内部。
    ///</param>
    ///  <param name="dstRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  对象，其中包含有关由此所使用的映像的其他信息 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</param>
    {class} function init(image: DNImage; dstRect: DNRectangle; imageAttr: DNImageAttributes): DNTextureBrush; overload;

  end;

  ///<summary>
  ///  每个属性 <see cref="T:System.Drawing.TextureBrush" />
  ///  类是 <see cref="T:System.Drawing.Brush" />
  ///  用图像来填充形状的内部对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.TextureBrush')]
  DNTextureBrush = interface(DNBrush)
  ['{794DFFD4-9CAD-3DB9-A95A-EAD7CB72AD6C}']
  { getters & setters } 

    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Image: DNImage;

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.TextureBrush" />
    ///  此方法创建的对象强制转换为 <see cref="T:System.Object" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的 <see langword="Transform" />
    ///  属性重置为标识。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  通过预先计算指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象，将表示此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象与指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象相乘。
    ///</summary>
    ///  <param name="matrix">
    ///  要乘以几何转换的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  将表示此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象与指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象按指定顺序相乘。
    ///</summary>
    ///  <param name="matrix">
    ///  要乘以几何转换的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象。
    ///</param>
    ///  <param name="order">
    ///  用于指定两个矩阵相乘的顺序的 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  根据指定维度，转换此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何变换。
    ///  此方法将平移添加到转换前。
    ///</summary>
    ///  <param name="dx">
    ///  沿 x 方向平移变换时要使用的维度。
    ///</param>
    ///  <param name="dy">
    ///  沿 y 方向平移变换时要使用的维度。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  按指定顺序将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换平移指定的尺寸。
    ///</summary>
    ///  <param name="dx">
    ///  沿 x 方向平移变换时要使用的维度。
    ///</param>
    ///  <param name="dy">
    ///  沿 y 方向平移变换时要使用的维度。
    ///</param>
    ///  <param name="order">
    ///  应用转换的顺序（在前面添加或在后面追加）。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  此局部几何变换缩放 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象指定的量。
    ///  此方法将缩放矩阵添加到转换前。
    ///</summary>
    ///  <param name="sx">
    ///  若要在 x 方向缩放变换的量。
    ///</param>
    ///  <param name="sy">
    ///  若要在 y 方向缩放变换的量。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  以指定顺序将此 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换按指定量进行缩放。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 方向缩放转换的量。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 方向缩放转换的量。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换旋转指定量。
    ///  此方法将旋转添加到转换前。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  以指定顺序将 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象的局部几何转换旋转指定的量。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举，指定是在后面追加还是在前面添加旋转矩阵。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Brush" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一份 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象，用于定义与此相关联的映像局部几何变换 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一份 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象，用于定义仅适用于使用此绘制填充几何变换 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，指示此环绕模式 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  枚举，用于指定如何通过使用此绘制填充 <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  平铺对象。
    ///</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Image" />
    ///  对象与此相关 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  对象，表示与此图像 <see cref="T:System.Drawing.TextureBrush" />
    ///  对象填充形状。
    ///</returns>
    property Image: DNImage read get_Image;
  end;

  TDNTextureBrush = class(TDNGenericImport<DNTextureBrushClass, DNTextureBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNCustomLineCapClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{09507B6C-0C81-5A60-969B-023BAE664F05}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  类的指定的边框和填充。
    ///</summary>
    ///  <param name="fillPath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的填充。
    ///</param>
    ///  <param name="strokePath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的轮廓。
    ///</param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath): DNCustomLineCap; overload;
    ///<summary>
    ///  初始化的新实例 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  类从指定的现有 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举与指定的边框和填充。
    ///</summary>
    ///  <param name="fillPath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的填充。
    ///</param>
    ///  <param name="strokePath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的轮廓。
    ///</param>
    ///  <param name="baseCap">
    ///  据以创建自定义线帽线帽。
    ///</param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap): DNCustomLineCap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  类从指定的现有 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举与指定的轮廓、 填充和内边距。
    ///</summary>
    ///  <param name="fillPath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的填充。
    ///</param>
    ///  <param name="strokePath">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象，用于定义自定义线帽的轮廓。
    ///</param>
    ///  <param name="baseCap">
    ///  据以创建自定义线帽线帽。
    ///</param>
    ///  <param name="baseInset">
    ///  指针帽和行之间的距离。
    ///</param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap; baseInset: Single): DNCustomLineCap; overload;

  end;

  ///<summary>
  ///  封装用户定义的自定义线帽。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.CustomLineCap')]
  DNCustomLineCap = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{6450327A-3128-3AF9-B7DD-84092A06D609}']
  { getters & setters } 

    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置 cap 用来启动和结束行构成此自定义线帽。
    ///</summary>
    ///  <param name="startCap"><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此线帽内的行的开头使用。
    ///</param>
    ///  <param name="endCap"><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  此线帽内行末尾使用的枚举。
    ///</param>
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  枚举，它确定如何撰写这行 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  联接对象。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  枚举这 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  对象用于联接线。
    ///</returns>
    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  为基础。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  为基础。
    ///</returns>
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    ///<summary>
    ///  获取或设置 cap 和行之间的距离。
    ///</summary>
    ///<returns>
    ///  指针帽的开头和行尾之间的距离。
    ///</returns>
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    ///<summary>
    ///  获取或设置的缩放量 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  类对象的宽度对于 <see cref="T:System.Drawing.Pen" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  缩放指针帽的数量。
    ///</returns>
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNCustomLineCap = class(TDNGenericImport<DNCustomLineCapClass, DNCustomLineCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNAdjustableArrowCapClass = interface(DNCustomLineCapClass)
  ['{8CFD6120-22B3-5398-82D0-784AAF7B9677}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap" />
    ///  类，具有指定的宽度和高度。
    ///  始终填充使用此构造函数创建的箭头端帽。
    ///</summary>
    ///  <param name="width">
    ///  箭头的宽度。
    ///</param>
    ///  <param name="height">
    ///  箭头的高度。
    ///</param>
    {class} function init(width: Single; height: Single): DNAdjustableArrowCap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap" />
    ///  类，具有指定的宽度、 高度和填充属性。
    ///  是否填充箭头端帽取决于传递给参数 <paramref name="isFilled" />
    ///  参数。
    ///</summary>
    ///  <param name="width">
    ///  箭头的宽度。
    ///</param>
    ///  <param name="height">
    ///  箭头的高度。
    ///</param>
    ///  <param name="isFilled"><see langword="true" />
    ///  若要填充箭头帽;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(width: Single; height: Single; isFilled: Boolean): DNAdjustableArrowCap; overload;

  end;

  ///<summary>
  ///  表示可调整箭头形状的线帽。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.AdjustableArrowCap')]
  DNAdjustableArrowCap = interface(DNCustomLineCap)
  ['{072BBE91-D5FA-39A0-8FA7-04AEF7702C58}']
  { getters & setters } 

    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_MiddleInset: Single;
    procedure set_MiddleInset(value: Single);
    function get_Filled: Boolean;
    procedure set_Filled(value: Boolean);
    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置 cap 用来启动和结束行构成此自定义线帽。
    ///</summary>
    ///  <param name="startCap"><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此线帽内的行的开头使用。
    ///</param>
    ///  <param name="endCap"><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  此线帽内行末尾使用的枚举。
    ///</param>
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置箭头帽的高度。
    ///</summary>
    ///<returns>
    ///  箭头线帽的高度。
    ///</returns>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  获取或设置箭头帽的宽度。
    ///</summary>
    ///<returns>
    ///  采用单位箭头帽的宽度。
    ///</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置之间的箭头帽边框和填充的单位数。
    ///</summary>
    ///<returns>
    ///  箭头帽的边框和箭头帽的填充之间的单位数。
    ///</returns>
    property MiddleInset: Single read get_MiddleInset write set_MiddleInset;
    ///<summary>
    ///  获取或设置是否填充箭头帽。
    ///</summary>
    ///<returns>
    ///  此属性是 <see langword="true" />
    ///  箭头帽是否填充; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Filled: Boolean read get_Filled write set_Filled;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  枚举，它确定如何撰写这行 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  联接对象。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  枚举这 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  对象用于联接线。
    ///</returns>
    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  为基础。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  枚举此 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  为基础。
    ///</returns>
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    ///<summary>
    ///  获取或设置 cap 和行之间的距离。
    ///</summary>
    ///<returns>
    ///  指针帽的开头和行尾之间的距离。
    ///</returns>
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    ///<summary>
    ///  获取或设置的缩放量 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  类对象的宽度对于 <see cref="T:System.Drawing.Pen" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  缩放指针帽的数量。
    ///</returns>
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNAdjustableArrowCap = class(TDNGenericImport<DNAdjustableArrowCapClass, DNAdjustableArrowCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsContainerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{98368B9B-4EED-5BC8-971A-17292A7F5E67}']
  end;

  ///<summary>
  ///  表示图形容器的内部数据。
  ///  保存的状态时使用此类 <see cref="T:System.Drawing.Graphics" />
  ///  对象使用 <see cref="M:System.Drawing.Graphics.BeginContainer" />
  ///  和 <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
  ///  方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsContainer')]
  DNGraphicsContainer = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{59F0647C-2277-3516-9AF1-9B27E963FAC5}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsContainer = class(TDNGenericImport<DNGraphicsContainerClass, DNGraphicsContainer>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{14B290CE-ECCD-59E2-A69C-E477F26C5DA5}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" />
    ///  值 <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  。
    ///</summary>
    {class} function init: DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举。
    ///</summary>
    ///  <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，它确定了此内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  用指定的数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.PointF" />
    ///  数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  用指定的数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.PointF" />
    ///  数组以及指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举元素。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    ///  <param name="fillMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.Point" />
    ///  数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  和 <see cref="T:System.Drawing.Point" />
    ///  数组以及指定 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举元素。
    ///</summary>
    ///  <param name="pts">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义构成这点的坐标的结构 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="types">
    ///  一个数组 <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  枚举元素，指定的类型中每个相应点 <paramref name="pts" />
    ///  数组。
    ///</param>
    ///  <param name="fillMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;

  end;

  ///<summary>
  ///  表示一系列连接的直线和曲线。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsPath')]
  DNGraphicsPath = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{5C410D7F-42A1-329D-83AE-05AA8D2623B4}']
  { getters & setters } 

    function get_FillMode: DNFillMode;
    procedure set_FillMode(value: DNFillMode);
    function get_PathData: DNPathData;
    function get_PointCount: Int32;
    function get_PathTypes: TArray<Byte>;
    function get_PathPoints: TArray<DNPointF>;

  { methods } 

    ///<summary>
    ///  为此路径添加一个矩形。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示要添加的矩形。
    ///</param>
    procedure AddRectangle(rect: DNRectangle); overload;
    ///<summary>
    ///  创建此路径的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  清空 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  和 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组和设置 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  到 <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  开始一个新图形而不关闭当前图形。
    ///  所有后续的点添加到的路径添加到此新的图形。
    ///</summary>
    procedure StartFigure;
    ///<summary>
    ///  关闭当前图形并开始新的图形。
    ///  如果当前图包含一系列连接的直线和曲线，该方法通过从终结点的一条线连接到的起始点关闭循环。
    ///</summary>
    procedure CloseFigure;
    ///<summary>
    ///  关闭所有打开的数字，在此路径，并开始一个新图形。
    ///  通过将行从其终结点连接到其起始点，则关闭每个打开的图形。
    ///</summary>
    procedure CloseAllFigures;
    ///<summary>
    ///  对此设置标记 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    procedure SetMarkers;
    ///<summary>
    ///  清除此路径中的所有标记。
    ///</summary>
    procedure ClearMarkers;
    ///<summary>
    ///  中的点的顺序反转 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  此数组 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    procedure Reverse;
    ///<summary>
    ///  获取最后一个点以 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  此数组 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示在此的最后一个点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetLastPoint: DNPointF;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示要测试的点。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  中指定的可见剪辑区域 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示要测试的点。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  指定的点是否包含在此; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(pt: DNPointF; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示要测试的点。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  , ，使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示指定的点是否包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示要测试的点。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(pt: DNPoint; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(point: DNPointF; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(pt: DNPointF; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(point: DNPoint; pen: DNPen): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  指示是否指定的点包含在 （下） 此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制并用指定 <see cref="T:System.Drawing.Pen" />
    ///  并使用指定 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它指定要测试的位置。
    ///</param>
    ///  <param name="pen">
    ///  要测试的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</param>
    ///  <param name="graphics"><see cref="T:System.Drawing.Graphics" />
    ///  要测试可见性。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果指定的点包含在此大纲 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  绘制具有指定 <see cref="T:System.Drawing.Pen" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsOutlineVisible(pt: DNPoint; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  表示行的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示行的终结点。
    ///</param>
    procedure AddLine(pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="x1">
    ///  直线起始点 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  直线起始点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  直线终点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  直线终点的 y 坐标。
    ///</param>
    procedure AddLine(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  将一系列连接的直线段追加到末尾 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示要定义要添加的直线线段的点。
    ///</param>
    procedure AddLines(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将一条线段追加到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  表示行的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示行的终结点。
    ///</param>
    procedure AddLine(pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>
    ///  向当前图形中追加一条线段。
    ///</summary>
    ///  <param name="x1">
    ///  直线起始点 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  直线起始点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  直线终点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  直线终点的 y 坐标。
    ///</param>
    procedure AddLine(x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>
    ///  将一系列连接的直线段追加到末尾 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示要定义要添加的直线线段的点。
    ///</param>
    procedure AddLines(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示从中提取弧线的椭圆的矩形边界。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="x">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中提取弧线的椭圆的矩形区域的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中提取弧线的椭圆的矩形区域的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示从中提取弧线的椭圆的矩形边界。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将椭圆弧追加到当前图。
    ///</summary>
    ///  <param name="x">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中提取弧线的椭圆的矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中提取弧线的椭圆的矩形区域的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中提取弧线的椭圆的矩形区域的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量弧线的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和弧线的结束。
    ///</param>
    procedure AddArc(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，它表示曲线的终结点。
    ///</param>
    procedure AddBezier(pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 x 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的终结点的 x 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的终结点的 y 坐标。
    ///</param>
    procedure AddBezier(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>
    ///  将连接三次方贝塞尔曲线的序列添加到当前图。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddBeziers(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="pt1">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，它表示曲线的终结点。
    ///</param>
    procedure AddBezier(pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>
    ///  将三次方贝塞尔曲线添加到当前图。
    ///</summary>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 x 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的终结点的 x 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的终结点的 y 坐标。
    ///</param>
    procedure AddBezier(x1: Int32; y1: Int32; x2: Int32; y2: Int32; x3: Int32; y3: Int32; x4: Int32; y4: Int32); overload;
    ///<summary>
    ///  将连接三次方贝塞尔曲线的序列添加到当前图。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddBeziers(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="offset">
    ///  中的元素的索引 <paramref name="points" />
    ///  用作在曲线中的第一个点的数组。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  用于绘制曲线的段的数目。
    ///  可以将一个段看作一条连接两个点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  向当前图形的样条曲线。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="offset">
    ///  中的元素的索引 <paramref name="points" />
    ///  用作在曲线中的第一个点的数组。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    ///  <param name="tension">
    ///  一个值，指定该曲线控制点间弯曲的量。
    ///  大于 1 的值将产生不可预知的结果。
    ///</param>
    procedure AddCurve(points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  介于 0 和 1 指定曲线弯曲 0 表示最小弯曲 （清晰角），1 表示平滑曲线的点之间的量之间的值。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  将闭合的曲线添加到此路径。
    ///  使用基数样条曲线是因为曲线经过每个点数组中。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  介于 0 和 1 指定曲线弯曲 0 表示最小弯曲 （清晰角），1 表示平滑曲线的点之间的量之间的值。
    ///</param>
    procedure AddClosedCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  为此路径添加一个矩形。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  ，它表示要添加的矩形。
    ///</param>
    procedure AddRectangle(rect: DNRectangleF); overload;
    ///<summary>
    ///  将一系列矩形添加到此路径。
    ///</summary>
    ///  <param name="rects">
    ///  一个数组 <see cref="T:System.Drawing.RectangleF" />
    ///  这些结构表示要添加的矩形。
    ///</param>
    procedure AddRectangles(rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  将一系列矩形添加到此路径。
    ///</summary>
    ///  <param name="rects">
    ///  一个数组 <see cref="T:System.Drawing.Rectangle" />
    ///  这些结构表示要添加的矩形。
    ///</param>
    procedure AddRectangles(rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  ，它表示定义椭圆的边框。
    ///</param>
    procedure AddEllipse(rect: DNRectangleF); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    procedure AddEllipse(x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示定义椭圆的边框。
    ///</param>
    procedure AddEllipse(rect: DNRectangle); overload;
    ///<summary>
    ///  向当前路径中添加一个椭圆。
    ///</summary>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    procedure AddEllipse(x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  ，它表示定义从中绘制饼图的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  和扇形区，以从顺时针旋转度为单位的结束 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="x">
    ///  定义从中绘制饼图的椭圆的边框的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中绘制饼图的椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中绘制饼图的椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中绘制饼图的椭圆的边框的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  饼图部分，以从顺时针旋转度为单位的末尾 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将饼图形状的轮廓添加到此路径。
    ///</summary>
    ///  <param name="x">
    ///  定义从中绘制饼图的椭圆的边框的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义从中绘制饼图的椭圆的边框的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义从中绘制饼图的椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义从中绘制饼图的椭圆的边框的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  以度为单位从 x 轴沿顺时针方向度量扇形区的起始角度。
    ///</param>
    ///  <param name="sweepAngle">
    ///  之间的角度 <paramref name="startAngle" />
    ///  饼图部分，以从顺时针旋转度为单位的末尾 <paramref name="startAngle" />
    ///  。
    ///</param>
    procedure AddPie(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  将多边形添加到此路径。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义要添加的多边形的结构。
    ///</param>
    procedure AddPolygon(points: TArray<DNPointF>); overload;
    ///<summary>
    ///  将多边形添加到此路径。
    ///</summary>
    ///  <param name="points">
    ///  一个数组 <see cref="T:System.Drawing.Point" />
    ///  定义要添加的多边形的结构。
    ///</param>
    procedure AddPolygon(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  指定将追加 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到此路径。
    ///</summary>
    ///  <param name="addingPath">
    ///  要添加的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="connect">
    ///  一个布尔值，指定第一张图中添加的路径是否为此路径中的最后一个图形的一部分。
    ///  值为 <see langword="true" />
    ///  指定 （如果可能） 添加的路径中的第一个图形是此路径中的最后一个图形的一部分。
    ///  值为 <see langword="false" />
    ///  指定添加的路径中的第一个图形是独立于此路径中的最后一个图形。
    ///</param>
    procedure AddPath(addingPath: DNGraphicsPath; connect: Boolean);
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="origin">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示文本的开始位置的点。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPointF; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="origin">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  ，表示文本的开始位置的点。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPoint; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="layoutRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定文本的矩形。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>
    ///  将文本字符串添加到此路径。
    ///</summary>
    ///  <param name="s">
    ///  要添加的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="family">
    ///  一个 <see cref="T:System.Drawing.FontFamily" />
    ///  ，它表示与绘制测试的字体名称。
    ///</param>
    ///  <param name="style">
    ///  一个 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举，它表示文本 （粗体、 斜体，等等） 的样式信息。
    ///  这必须转换为整数 （请参阅本节后面的示例代码）。
    ///</param>
    ///  <param name="emSize">
    ///  限定字符的 em 方形框的高度。
    ///</param>
    ///  <param name="layoutRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定文本的矩形。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定文本格式设置信息，如行距和对齐方式。
    ///</param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangle; format: DNStringFormat); overload;
    ///<summary>
    ///  一个转换矩阵应用到此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它表示要应用的转换。
    ///</param>
    procedure Transform(matrix: DNMatrix);
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds: DNRectangleF; overload;
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  时转换该路径指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于此路径，在计算的边框之前的转换。
    ///  此路径不永久转换;仅在计算的边框的过程使用转换。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds(matrix: DNMatrix): DNRectangleF; overload;
    ///<summary>
    ///  返回限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  时转换的当前路径由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  和与指定位置绘制 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于此路径，在计算的边框之前的转换。
    ///  此路径不永久转换;仅在计算的边框的过程使用转换。
    ///</param>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  用来绘制 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定此矩形 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    function GetBounds(matrix: DNMatrix; pen: DNPen): DNRectangleF; overload;
    ///<summary>
    ///  将此路径中的每个曲线转换为一系列连接的直线线段。
    ///</summary>
    procedure Flatten; overload;
    ///<summary>
    ///  应用指定的转换，然后将转换在此每条曲线 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到一系列连接的直线线段。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  平面化前。
    ///</param>
    procedure Flatten(matrix: DNMatrix); overload;
    ///<summary>
    ///  将转换在此每条曲线 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到一系列连接的直线线段。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  平面化前。
    ///</param>
    ///  <param name="flatness">
    ///  指定该曲线与其平展的近似值之间的最大允许的错误。
    ///  默认值为 0.25 的值。
    ///  减少平滑度值将增加的近似中的直线线段数量。
    ///</param>
    procedure Flatten(matrix: DNMatrix; flatness: Single); overload;
    ///<summary>
    ///  向路径添加附加的轮廓。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    procedure Widen(pen: DNPen); overload;
    ///<summary>
    ///  添加到附加轮廓 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定一个转换，以便在扩大转换之前应用到该路径。
    ///</param>
    procedure Widen(pen: DNPen; matrix: DNMatrix); overload;
    ///<summary>
    ///  替换此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，用包含用指定的钢笔绘制此路径时，将填入的区域曲线。
    ///</summary>
    ///  <param name="pen">
    ///  一个 <see cref="T:System.Drawing.Pen" />
    ///  ，它指定之间的路径的原始轮廓和此方法创建的新轮廓的宽度。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定一个转换，以便在扩大转换之前应用到该路径。
    ///</param>
    ///  <param name="flatness">
    ///  该值指定曲线展平。
    ///</param>
    procedure Widen(pen: DNPen; matrix: DNMatrix; flatness: Single); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix); overload;
    ///<summary>
    ///  适用定义一个矩形和一个平行四边形，至此 warp 变换 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形，向其定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    ///  <param name="warpMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  枚举，用于指定此 warp 操作使用角度来看或双线性模式。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode); overload;
    ///<summary>
    ///  应用 warp 转换，由一个矩形和一个平行四边形，到此定义 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="destPoints">
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  定义一个平行四边形的定义的矩形的结构 <paramref name="srcRect" />
    ///  转换。
    ///  该数组可以包含三个或四个元素。
    ///  如果数组包含三个元素，平行四边形的右下角所隐含的前三个点。
    ///</param>
    ///  <param name="srcRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示传递给定义的平行四边形的矩形的转换 <paramref name="destPoints" />
    ///  。
    ///</param>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，它指定要应用于路径的几何变换。
    ///</param>
    ///  <param name="warpMode">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  枚举，用于指定此 warp 操作使用角度来看或双线性模式。
    ///</param>
    ///  <param name="flatness">
    ///  是一个介于 0 或 1，用于指定如何展平的生成路径。
    ///  有关详细信息，请参阅 <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" />
    ///  方法。
    ///</param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode; flatness: Single); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，它确定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举，用于指定如何在此形状的内部 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  进行填充。
    ///</returns>
    property FillMode: DNFillMode read get_FillMode write set_FillMode;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  封装的点数组 (<paramref name="points" />
    ///  ) 和类型 (<paramref name="types" />
    ///  ) 此 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  封装的点数组和为此类型 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</returns>
    property PathData: DNPathData read get_PathData;
    ///<summary>
    ///  获取中的元素数 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  或 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组。
    ///</summary>
    ///<returns>
    ///  一个整数，指定中的元素数 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  或 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  数组。
    ///</returns>
    property PointCount: Int32 read get_PointCount;
    ///<summary>
    ///  获取类型中的相应点 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  数组。
    ///</summary>
    ///<returns>
    ///  在路径中指定相应的点的类型的字节数组。
    ///</returns>
    property PathTypes: TArray<Byte> read get_PathTypes;
    ///<summary>
    ///  获取路径中的点。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.PointF" />
    ///  表示路径的对象。
    ///</returns>
    property PathPoints: TArray<DNPointF> read get_PathPoints;
  end;

  TDNGraphicsPath = class(TDNGenericImport<DNGraphicsPathClass, DNGraphicsPath>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathIteratorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{66A5F06A-337C-5F68-A324-5E71717B8321}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  类与指定 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  此帮助器类要为其进行初始化的对象。
    ///</param>
    {class} function init(path: DNGraphicsPath): DNGraphicsPathIterator;

  end;

  ///<summary>
  ///  提供的功能来循环访问中的子路径 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  和测试类型的每个子路径中包含的形状。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsPathIterator')]
  DNGraphicsPathIterator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{55968918-F8EA-33EB-97AA-66016B21FB1A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SubpathCount: Int32;

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    function NextSubpath(out startIndex: Int32; out endIndex: Int32; out isClosed: Boolean): Int32; overload;
    function NextSubpath(path: DNGraphicsPath; out isClosed: Boolean): Int32; overload;
    function NextPathType(out pathType: Byte; out startIndex: Int32; out endIndex: Int32): Int32;
    function NextMarker(out startIndex: Int32; out endIndex: Int32): Int32; overload;
    ///<summary>
    ///  这 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  对象具有 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象与之关联。
    ///<see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  方法递增关联 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到其路径和第二个包含的当前标记与下一个标记 （或路径的末尾） 之间的所有点的副本中的下一个标记 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  对象传递给该参数。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  点将复制到对象。
    ///</param>
    ///<returns>
    ///  此标记和下一步之间的点的数目。
    ///</returns>
    function NextMarker(path: DNGraphicsPath): Int32; overload;
    ///<summary>
    ///  指示与此关联的路径是否 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  包含曲线。
    ///</summary>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果当前的子路径包含一条曲线; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasCurve: Boolean;
    ///<summary>
    ///  对此进行倒带 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  到其关联路径的开头。
    ///</summary>
    procedure Rewind;
    function Enumerate(out points: TArray<DNPointF>; out types: TArray<Byte>): Int32;
    function CopyData(out points: TArray<DNPointF>; out types: TArray<Byte>; startIndex: Int32; endIndex: Int32): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取路径中的点的数量。
    ///</summary>
    ///<returns>
    ///  在路径中的点的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取路径中的子路径数。
    ///</summary>
    ///<returns>
    ///  在路径中的子路径数。
    ///</returns>
    property SubpathCount: Int32 read get_SubpathCount;
  end;

  TDNGraphicsPathIterator = class(TDNGenericImport<DNGraphicsPathIteratorClass, DNGraphicsPathIterator>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsStateClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E333BB85-84A5-5579-B326-3FCA6BB060EC}']
  end;

  ///<summary>
  ///  表示状态的 <see cref="T:System.Drawing.Graphics" />
  ///  对象。
  ///  此对象将返回通过调用 <see cref="M:System.Drawing.Graphics.Save" />
  ///  方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsState')]
  DNGraphicsState = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8A98BC4E-E202-3891-AF68-E1F545AC82CE}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsState = class(TDNGenericImport<DNGraphicsStateClass, DNGraphicsState>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNMatrixClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F48E5EE0-BFA5-5ED3-A983-09F1FEE84FB5}']
  { constructors } 

    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为单位矩阵。
    ///</summary>
    {class} function init: DNMatrix; overload;
    ///<summary>
    ///  使用指定的元素初始化 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="m11">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第一行和第一列中的值。
    ///</param>
    ///  <param name="m12">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第一行和第二列中的值。
    ///</param>
    ///  <param name="m21">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第二行和第一列中的值。
    ///</param>
    ///  <param name="m22">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第二行和第二列中的值。
    ///</param>
    ///  <param name="dx">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第三行和第一列中的值。
    ///</param>
    ///  <param name="dy">
    ///  新的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的第三行和第二列中的值。
    ///</param>
    {class} function init(m11: Single; m12: Single; m21: Single; m22: Single; dx: Single; dy: Single): DNMatrix; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为指定矩形和点数组定义的几何变换。
    ///</summary>
    ///  <param name="rect">
    ///  表示将变换的矩形的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///  <param name="plgpts">
    ///  一个由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构构成的数组，该数组表示矩形的左上角、右上角和左下角将变换为的平行四边形的三个点。
    ///  平行四边形的右下角的位置可从前三个角的位置导出。
    ///</param>
    {class} function init(rect: DNRectangleF; plgpts: TArray<DNPointF>): DNMatrix; overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  类的一个新实例初始化为指定矩形和点数组定义的几何变换。
    ///</summary>
    ///  <param name="rect">
    ///  表示将变换的矩形的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///  <param name="plgpts">
    ///  一个由三个 <see cref="T:System.Drawing.Point" />
    ///  结构构成的数组，该数组表示矩形的左上角、右上角和左下角将变换为的平行四边形的三个点。
    ///  平行四边形的右下角的位置可从前三个角的位置导出。
    ///</param>
    {class} function init(rect: DNRectangle; plgpts: TArray<DNPoint>): DNMatrix; overload;

  end;

  ///<summary>
  ///  封装表示几何变换的 3x3 仿射矩阵。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Drawing2D.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8DE19850-6042-39C0-AA35-BE31D935886B}']
  { getters & setters } 

    function get_Elements: TArray<Single>;
    function get_OffsetX: Single;
    function get_OffsetY: Single;
    function get_IsInvertible: Boolean;
    function get_IsIdentity: Boolean;

  { methods } 

    ///<summary>
    ///  重置此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  得到单位矩阵的元素。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  对指定的点数组应用此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所表示的几何变换。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformPoints(pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  对指定的点数组应用此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所表示的几何变换。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformPoints(pts: TArray<DNPoint>); overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  测试指定的对象是否是 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  以及是否与此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  相同。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  是等同于此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，则该方法返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</returns>
    function Clone: DNMatrix;
    ///<summary>
    ///  通过预先计算指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，将此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  与 <paramref name="matrix" />
    ///  参数中指定的矩阵相乘。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  将与之相乘。
    ///</param>
    procedure Multiply(matrix: DNMatrix); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  与 <paramref name="matrix" />
    ///  参数中指定的矩阵相乘，而且采用 <paramref name="order" />
    ///  参数中指定的顺序。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  将与之相乘。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，表示乘法的顺序。
    ///</param>
    procedure Multiply(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算转换向量，将指定的转换向量（<paramref name="offsetX" />
    ///  和 <paramref name="offsetY" />
    ///  ）应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="offsetX">
    ///  x 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="offsetY">
    ///  y 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    procedure Translate(offsetX: Single; offsetY: Single); overload;
    ///<summary>
    ///  按指定的顺序，将指定的转换向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="offsetX">
    ///  x 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="offsetY">
    ///  y 值，通过它转换此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定将转换应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Translate(offsetX: Single; offsetY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算比例向量，将指定的比例向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="scaleX">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 X 轴方向缩放的值。
    ///</param>
    ///  <param name="scaleY">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 Y 轴方向缩放的值。
    ///</param>
    procedure Scale(scaleX: Single; scaleY: Single); overload;
    ///<summary>
    ///  使用指定的顺序，将指定的比例向量（<paramref name="scaleX" />
    ///  和 <paramref name="scaleY" />
    ///  ）应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="scaleX">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 X 轴方向缩放的值。
    ///</param>
    ///  <param name="scaleY">
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  在 Y 轴方向缩放的值。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定应用比例向量到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的顺序（追加或预先计算）。
    ///</param>
    procedure Scale(scaleX: Single; scaleY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  预先计算此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，沿原点并按指定角度顺时针旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转的角度（单位：度）。
    ///</param>
    procedure Rotate(angle: Single); overload;
    ///<summary>
    ///  按照 <paramref name="angle" />
    ///  参数中指定的顺时针旋转量，对此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  沿原点（X 和 Y 坐标为零处）旋转。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（范围）（单位：度）。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定旋转此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  时所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Rotate(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  沿 <paramref name="point" />
    ///  参数中指定的点并通过预先计算该旋转，来顺时针旋转此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（范围）（单位：度）。
    ///</param>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示旋转中心。
    ///</param>
    procedure RotateAt(angle: Single; point: DNPointF); overload;
    ///<summary>
    ///  按指定的顺序，沿指定点顺时针旋转该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="angle">
    ///  旋转的角度（单位：度）。
    ///</param>
    ///  <param name="point">
    ///  一个 <see cref="T:System.Drawing.PointF" />
    ///  ，表示旋转中心。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定旋转的顺序（追加或预先计算）。
    ///</param>
    procedure RotateAt(angle: Single; point: DNPointF; order: DNMatrixOrder); overload;
    ///<summary>
    ///  通过预先计算切变变换，将指定的切变向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="shearX">
    ///  水平切变因子。
    ///</param>
    ///  <param name="shearY">
    ///  垂直切变因子。
    ///</param>
    procedure Shear(shearX: Single; shearY: Single); overload;
    ///<summary>
    ///  按指定的顺序，将指定的切变向量应用到此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="shearX">
    ///  水平切变因子。
    ///</param>
    ///  <param name="shearY">
    ///  垂直切变因子。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定应用切变所采用的顺序（追加或预先计算）。
    ///</param>
    procedure Shear(shearX: Single; shearY: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  如果此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是可逆转的，则进行逆转。
    ///</summary>
    procedure Invert;
    ///<summary>
    ///  将数组中的每个矢量与矩阵相乘。
    ///  该矩阵的转换元素（第三行）被忽略。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformVectors(pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  将数组中的每个矢量与矩阵相乘。
    ///  该矩阵的转换元素（第三行）被忽略。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure VectorTransformPoints(pts: TArray<DNPoint>);
    ///<summary>
    ///  只将该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的缩放和旋转成分应用到指定的点数组。
    ///</summary>
    ///  <param name="pts">
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构的数组，它表示要变换的点。
    ///</param>
    procedure TransformVectors(pts: TArray<DNPoint>); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个浮点值数组，它表示该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的元素。
    ///</summary>
    ///<returns>
    ///  一个浮点值数组，它表示该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的元素。
    ///</returns>
    property Elements: TArray<Single> read get_Elements;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 x 转换值（dx 值，或第三行、第一列中的元素）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 x 转换值。
    ///</returns>
    property OffsetX: Single read get_OffsetX;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 y 转换值（dy 值，或第三行、第二列中的元素）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  的 y 转换值。
    ///</returns>
    property OffsetY: Single read get_OffsetY;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是否可逆转。
    ///</summary>
    ///<returns>
    ///  如果该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是可逆转的，则该属性为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsInvertible: Boolean read get_IsInvertible;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是否是单位矩阵。
    ///</summary>
    ///<returns>
    ///  如果该 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  是标识，则该属性为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsIdentity: Boolean read get_IsIdentity;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Drawing----------------
  DNFontClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F89AC109-B6DF-5073-9E9F-EBB7614B5634}']
  { constructors } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Font" />
    ///  ，它使用指定的现有 <see cref="T:System.Drawing.Font" />
    ///  和 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举。
    ///</summary>
    ///  <param name="prototype">
    ///  从中创建新 <see cref="T:System.Drawing.Font" />
    ///  的现有 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</param>
    ///  <param name="newStyle">
    ///  应用于新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///  可以用 <see langword="OR" />
    ///  运算符将 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举的多个值组合起来。
    ///</param>
    {class} function init(prototype: DNFont; newStyle: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定
    ///  用于新字体的 GDI 字符集。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定
    ///  用于此字体的 GDI 字符集。
    ///</param>
    ///  <param name="gdiVerticalFont">
    ///  一个布尔值，该值指示新字体是否从 GDI 垂直字体派生。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null " />
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定用于此字体的 GDI 字符集。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式、单位和字符集初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///  <param name="gdiCharSet">
    ///  一个 <see cref="T:System.Byte" />
    ///  ，它指定用于此字体的 GDI 字符集。
    ///</param>
    ///  <param name="gdiVerticalFont">
    ///  一个布尔值，该值指示新 <see cref="T:System.Drawing.Font" />
    ///  是否从 GDI 垂直字体派生。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和样式初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///  将此样式设置为 <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="family">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single): DNFont; overload;
    ///<summary>
    ///  使用指定的大小、样式和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无限大或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和样式初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///  <param name="style">
    ///  新字体的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>
    ///  使用指定的大小和单位初始化新的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///  样式设置为 <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（采用 <paramref name="unit" />
    ///  参数指定的单位）。
    ///</param>
    ///  <param name="unit">
    ///  新字体的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无穷大，或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>
    ///  使用指定的大小初始化新 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="familyName">
    ///  新 <see cref="T:System.Drawing.Font" />
    ///  的 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串表示形式。
    ///</param>
    ///  <param name="emSize">
    ///  新字体的全身大小（以磅为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  是小于或等于 0，计算结果为无限大或者不是有效的数字。
    ///</exception>
    {class} function init(familyName: string; emSize: Single): DNFont; overload;

  { static methods } 

    ///<summary>
    ///  从指定的 Windows 句柄创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="hfont">
    ///  GDI 字体的 Windows 句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="hfont" />
    ///  指向一个对象，它不 TrueType 字体。
    ///</exception>
    {class} function FromHfont(hfont: IntPtr): DNFont;
    ///<summary>
    ///  从指定的 GDI 逻辑字体 (LOGFONT) 结构创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="lf">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示从中创建 <see cref="T:System.Drawing.Font" />
    ///  的 GDI <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///  <param name="hdc">
    ///  包含有关 <paramref name="lf" />
    ///  结构的其他信息的设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  不，该字体为 TrueType 字体。
    ///</exception>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject; hdc: IntPtr): DNFont; overload;
    ///<summary>
    ///  从指定的 GDI 逻辑字体 (LOGFONT) 结构创建一个 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="lf">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示从中创建 <see cref="T:System.Drawing.Font" />
    ///  的 GDI <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject): DNFont; overload;
    ///<summary>
    ///  从设备上下文的指定 Windows 句柄创建 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的设备上下文的字体不 TrueType 字体。
    ///</exception>
    {class} function FromHdc(hdc: IntPtr): DNFont;

  end;

  ///<summary>
  ///  定义特定的文本格式，包括字体、字号和样式特性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Font')]
  DNFont = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{091B628B-3473-38BF-9A98-4F9DB4FB61F8}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Bold: Boolean;
    function get_GdiCharSet: Byte;
    function get_GdiVerticalFont: Boolean;
    function get_Italic: Boolean;
    function get_Name: string;
    function get_OriginalFontName: string;
    function get_Strikeout: Boolean;
    function get_Underline: Boolean;
    function get_Style: DNFontStyle;
    function get_Size: Single;
    function get_SizeInPoints: Single;
    function get_Unit: DNGraphicsUnit;
    function get_Height: Int32;
    function get_IsSystemFont: Boolean;
    function get_SystemFontName: string;

  { methods } 

    ///<summary>
    ///  从此 <see cref="T:System.Drawing.Font" />
    ///  创建一个 GDI 逻辑字体 (LOGFONT) 结构。
    ///</summary>
    ///  <param name="logFont">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示此方法创建的 <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从此 <see cref="T:System.Drawing.Font" />
    ///  创建一个 GDI 逻辑字体 (LOGFONT) 结构。
    ///</summary>
    ///  <param name="logFont">
    ///  一个 <see cref="T:System.Object" />
    ///  ，它表示此方法创建的 <see langword="LOGFONT" />
    ///  结构。
    ///</param>
    ///  <param name="graphics">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它提供 <see langword="LOGFONT" />
    ///  结构的其他信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject; graphics: DNGraphics); overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Font" />
    ///  的句柄。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的 Windows 句柄。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  该操作不成功。
    ///</exception>
    function ToHfont: IntPtr;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Font" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的、强制转换为 <see cref="T:System.Object" />
    ///  的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Font" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  指示指定对象是否为 <see cref="T:System.Drawing.Font" />
    ///  ，以及是否具有与此 <see cref="T:System.Drawing.Font" />
    ///  相同的 <see cref="P:System.Drawing.Font.FontFamily" />
    ///  、<see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  、<see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  、<see cref="P:System.Drawing.Font.Style" />
    ///  、<see cref="P:System.Drawing.Font.Size" />
    ///  和 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性值。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  参数为 <see cref="T:System.Drawing.Font" />
    ///  并且具有与此 <see cref="T:System.Drawing.Font" />
    ///  相同的 <see cref="P:System.Drawing.Font.FontFamily" />
    ///  、<see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  、<see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  、<see cref="P:System.Drawing.Font.Style" />
    ///  、<see cref="P:System.Drawing.Font.Size" />
    ///  和 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Font" />
    ///  可读的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Font" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  采用指定的 <see cref="T:System.Drawing.Graphics" />
    ///  的当前单位，返回此字体的行距。
    ///</summary>
    ///  <param name="graphics">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  对象，它存储显示设备的垂直分辨率（每英寸点数）、页面单位和页面比例设置。
    ///</param>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetHeight(graphics: DNGraphics): Single; overload;
    ///<summary>
    ///  返回此字体的行距（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    function GetHeight: Single; overload;
    ///<summary>
    ///  当用指定的垂直分辨率绘制到设备时，返回此 <see cref="T:System.Drawing.Font" />
    ///  的高度（以像素为单位）。
    ///</summary>
    ///  <param name="dpi">
    ///  用于计算字体高度的垂直分辨率，以每英寸的点数为单位。
    ///</param>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的高度（以像素为单位）。
    ///</returns>
    function GetHeight(dpi: Single): Single; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Drawing.FontFamily" />
    ///  关联的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Drawing.FontFamily" />
    ///  关联的 <see cref="T:System.Drawing.Font" />
    ///  。
    ///</returns>
    property FontFamily: DNFontFamily read get_FontFamily;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否为粗体。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  为粗体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Bold: Boolean read get_Bold;
    ///<summary>
    ///  获取一个字节值，该值指定此 <see cref="T:System.Drawing.Font" />
    ///  使用的 GDI 字符集。
    ///</summary>
    ///<returns>
    ///  一个字节值，该值指定此 GDI 使用的 <see cref="T:System.Drawing.Font" />
    ///  字符集。
    ///  默认值为 1。
    ///</returns>
    property GdiCharSet: Byte read get_GdiCharSet;
    ///<summary>
    ///  获取一个布尔值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否从 GDI 垂直字体派生。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  是从 GDI 垂直字体派生的，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GdiVerticalFont: Boolean read get_GdiVerticalFont;
    ///<summary>
    ///  获取一个值，该值指示此字体是否已应用斜体样式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  表明此字体已应用斜体样式；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Italic: Boolean read get_Italic;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的字体名称。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的字体名称的字符串表示形式。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取最初指定的字体的名称。
    ///</summary>
    ///<returns>
    ///  表示最初指定的字体的名称的字符串。
    ///</returns>
    property OriginalFontName: string read get_OriginalFontName;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否指定贯穿字体的横线。
    ///</summary>
    ///<returns>
    ///  如果有一条横线贯穿此 <see cref="T:System.Drawing.Font" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Strikeout: Boolean read get_Strikeout;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Font" />
    ///  是否有下划线。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Font" />
    ///  有下划线，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Underline: Boolean read get_Underline;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的样式信息。
    ///</summary>
    ///<returns>
    ///  包含此 <see cref="T:System.Drawing.Font" />
    ///  的样式信息的 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举。
    ///</returns>
    property Style: DNFontStyle read get_Style;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小，单位采用 <see cref="P:System.Drawing.Font.Unit" />
    ///  属性指定的单位。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小。
    ///</returns>
    property Size: Single read get_Size;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小（以点为单位）。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Font" />
    ///  的全身大小（以点为单位）。
    ///</returns>
    property SizeInPoints: Single read get_SizeInPoints;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Font" />
    ///  的度量单位。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  ，它表示此 <see cref="T:System.Drawing.Font" />
    ///  的度量单位。
    ///</returns>
    property &Unit: DNGraphicsUnit read get_Unit;
    ///<summary>
    ///  获取此字体的行距。
    ///</summary>
    ///<returns>
    ///  此字体的行距（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取一个值，该值表示此字体是否是 <see cref="T:System.Drawing.SystemFonts" />
    ///  的一个成员。
    ///</summary>
    ///<returns>
    ///  如果此字体是 <see cref="T:System.Drawing.SystemFonts" />
    ///  的一个成员，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSystemFont: Boolean read get_IsSystemFont;
    ///<summary>
    ///  如果 <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  属性返回 <see langword="true" />
    ///  ，则获取系统字体的名称。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  返回 <see langword="true" />
    ///  ，则为系统字体的名称；否则为一个空字符串 ("")。
    ///</returns>
    property SystemFontName: string read get_SystemFontName;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: System.Drawing----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8ACB9960-8FA2-5EB0-98A5-806C8FF6BA78}']
  { static getter & setter } 

    {class} function get_Families: TArray<DNFontFamily>;
    {class} function get_GenericSansSerif: DNFontFamily;
    {class} function get_GenericSerif: DNFontFamily;
    {class} function get_GenericMonospace: DNFontFamily;

  { constructors } 

    ///<summary>
    ///  用指定的名称初始化新 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  新 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为空字符串 ("")。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定运行该应用程序的计算机未安装的字体。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定不是 TrueType 字体的字体。
    ///</exception>
    {class} function init(name: string): DNFontFamily; overload;
    ///<summary>
    ///  使用指定名称初始化指定的 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  中的新 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  一个 <see cref="T:System.String" />
    ///  ，表示新 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</param>
    ///  <param name="fontCollection">
    ///  包含此 <see cref="T:System.Drawing.FontFamily" />
    ///  的 <see cref="T:System.Drawing.Text.FontCollection" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为空字符串 ("")。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定运行该应用程序的计算机未安装的字体。
    ///  - 或 -
    ///  <paramref name="name" />
    ///  指定不是 TrueType 字体的字体。
    ///</exception>
    {class} function init(name: string; fontCollection: DNFontCollection): DNFontFamily; overload;
    ///<summary>
    ///  从指定的一般字体系列初始化新 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///  <param name="genericFamily">
    ///  从中创建新 <see cref="T:System.Drawing.FontFamily" />
    ///  的 <see cref="T:System.Drawing.Text.GenericFontFamilies" />
    ///  。
    ///</param>
    {class} function init(genericFamily: DNGenericFontFamilies): DNFontFamily; overload;

  { static methods } 

    ///<summary>
    ///  返回一个数组，该数组包含指定的图形上下文可用的所有 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///  <param name="graphics">
    ///  从其返回 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Drawing.Graphics" />
    ///  对象可用的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的数组。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics " />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetFamilies(graphics: DNGraphics): TArray<DNFontFamily>;

  { static propertys } 

    ///<summary>
    ///  返回一个数组，该数组包含与当前图形上下文相关的所有 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  与当前图形上下文相关的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象的数组。
    ///</returns>
    {class} property Families: TArray<DNFontFamily> read get_Families;
    ///<summary>
    ///  获取一般 sans serif <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  表示一般 sans serif 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  对象。
    ///</returns>
    {class} property GenericSansSerif: DNFontFamily read get_GenericSansSerif;
    ///<summary>
    ///  获取一般 serif <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示一般 serif 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</returns>
    {class} property GenericSerif: DNFontFamily read get_GenericSerif;
    ///<summary>
    ///  获取一般 monospace <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示一般 monospace 字体的 <see cref="T:System.Drawing.FontFamily" />
    ///  。
    ///</returns>
    {class} property GenericMonospace: DNFontFamily read get_GenericMonospace;
  end;

  ///<summary>
  ///  定义有着相似的基本设计但在形式上有某些差异的一组字样。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{FE31F082-2955-34AC-8BA8-9BC7BF319D78}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  枚举是否可用。
    ///</summary>
    ///  <param name="style">
    ///  要测试的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  可用，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsStyleAvailable(style: DNFontStyle): Boolean;
    ///<summary>
    ///  获取指定样式的 em 方形的高度，采用字体设计单位。
    ///</summary>
    ///  <param name="style">
    ///  为其获取全身高度的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  em 方形的高度。
    ///</returns>
    function GetEmHeight(style: DNFontStyle): Int32;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的行距，采用设计单位。
    ///  行距是两个连续文本行的基线之间的垂直距离。
    ///</summary>
    ///  <param name="style">
    ///  要应用的 <see cref="T:System.Drawing.FontStyle" />
    ///  。
    ///</param>
    ///<returns>
    ///  两行相邻文本之间的距离。
    ///</returns>
    function GetLineSpacing(style: DNFontStyle): Int32;
    ///<summary>
    ///  指示指定的对象是否为 <see cref="T:System.Drawing.FontFamily" />
    ///  以及是否与此 <see cref="T:System.Drawing.FontFamily" />
    ///  相等。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  为 <see cref="T:System.Drawing.FontFamily" />
    ///  且与此 <see cref="T:System.Drawing.FontFamily" />
    ///  相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.FontFamily" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.FontFamily" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.FontFamily" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.FontFamily" />
    ///  转换为可读的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  用指定的语言返回此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</summary>
    ///  <param name="language">
    ///  返回此名称所用的语言。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它用指定的语言表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</returns>
    function GetName(language: Int32): string;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格上升，采用设计单位。
    ///</summary>
    ///  <param name="style"><see cref="T:System.Drawing.FontStyle" />
    ///  ，它包含字体的样式信息。
    ///</param>
    ///<returns>
    ///  使用了指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  的此 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格上升。
    ///</returns>
    function GetCellAscent(style: DNFontStyle): Int32;
    ///<summary>
    ///  返回指定样式的 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格下降，采用设计单位。
    ///</summary>
    ///  <param name="style"><see cref="T:System.Drawing.FontStyle" />
    ///  ，它包含字体的样式信息。
    ///</param>
    ///<returns>
    ///  使用了指定的 <see cref="T:System.Drawing.FontStyle" />
    ///  的此 <see cref="T:System.Drawing.FontFamily" />
    ///  的单元格下降度量。
    ///</returns>
    function GetCellDescent(style: DNFontStyle): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示此 <see cref="T:System.Drawing.FontFamily" />
    ///  的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Drawing----------------
  DNGraphicsClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8B64F2D6-2CA6-5EB8-AAD8-B244F4CE7A55}']
  { static methods } 

    ///<summary>
    ///  从设备上下文的指定句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的设备上下文返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdc(hdc: IntPtr): DNGraphics; overload;
    ///<summary>
    ///  返回指定设备上下文的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///<returns>
    ///  指定设备上下文的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdcInternal(hdc: IntPtr): DNGraphics;
    ///<summary>
    ///  创建指定 Windows 句柄的新 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hwnd">
    ///  窗口的句柄。
    ///</param>
    ///<returns>
    ///  指定窗口句柄的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHwndInternal(hwnd: IntPtr): DNGraphics;
    ///<summary>
    ///  从指定的 <see cref="T:System.Drawing.Image" />
    ///  创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  从中创建新 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法为指定的 <see cref="T:System.Drawing.Image" />
    ///  返回一个新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception"><paramref name="image" />
    ///  具有索引的像素格式或其格式未定义。
    ///</exception>
    {class} function FromImage(image: DNImage): DNGraphics;
    ///<summary>
    ///  获取当前 Windows 的半色调调色板的句柄。
    ///</summary>
    ///<returns>
    ///  指定调色板的句柄的内部指针。
    ///</returns>
    {class} function GetHalftonePalette: IntPtr;
    ///<summary>
    ///  从设备上下文的指定句柄和设备的句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="hdevice">
    ///  设备的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的设备上下文和设备返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHdc(hdc: IntPtr; hdevice: IntPtr): DNGraphics; overload;
    ///<summary>
    ///  从窗口的指定句柄创建新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="hwnd">
    ///  窗口的句柄。
    ///</param>
    ///<returns>
    ///  此方法为指定的窗口句柄返回新的 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</returns>
    {class} function FromHwnd(hwnd: IntPtr): DNGraphics;

  end;

  ///<summary>
  ///  封装一个 GDI+ 绘图图面。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Graphics')]
  DNGraphics = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{3EAFE9D3-C1B1-3755-AB28-DA7CAFBF37FC}']
  { getters & setters } 

    function get_CompositingMode: DNCompositingMode;
    procedure set_CompositingMode(value: DNCompositingMode);
    function get_RenderingOrigin: DNPoint;
    procedure set_RenderingOrigin(value: DNPoint);
    function get_CompositingQuality: DNCompositingQuality;
    procedure set_CompositingQuality(value: DNCompositingQuality);
    function get_TextRenderingHint: DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DNTextRenderingHint);
    function get_TextContrast: Int32;
    procedure set_TextContrast(value: Int32);
    function get_SmoothingMode: DNSmoothingMode;
    procedure set_SmoothingMode(value: DNSmoothingMode);
    function get_PixelOffsetMode: DNPixelOffsetMode;
    procedure set_PixelOffsetMode(value: DNPixelOffsetMode);
    function get_InterpolationMode: DNInterpolationMode;
    procedure set_InterpolationMode(value: DNInterpolationMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PageUnit: DNGraphicsUnit;
    procedure set_PageUnit(value: DNGraphicsUnit);
    function get_PageScale: Single;
    procedure set_PageScale(value: Single);
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Clip: DNRegion;
    procedure set_Clip(value: DNRegion);
    function get_ClipBounds: DNRectangleF;
    function get_IsClipEmpty: Boolean;
    function get_VisibleClipBounds: DNRectangleF;
    function get_IsVisibleClipEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  释放通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</summary>
    ///  <param name="hdc">
    ///  通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</param>
    procedure ReleaseHdc(hdc: IntPtr); overload;
    ///<summary>
    ///  释放设备上下文的句柄。
    ///</summary>
    ///  <param name="hdc">
    ///  设备上下文的句柄。
    ///</param>
    procedure ReleaseHdcInternal(hdc: IntPtr);
    ///<summary>
    ///  通过使此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵左乘指定的平移来更改坐标系统的原点。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  通过以指定顺序将指定平移应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵来更改坐标系统的原点。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将平移添加到变换矩阵前还是追加到变换矩阵后。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  获取与指定的 <see cref="T:System.Drawing.Color" />
    ///  结构最接近的颜色。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，为其查找匹配项。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示与 <paramref name="color" />
    ///  参数指定的颜色最接近的颜色。
    ///</returns>
    function GetNearestColor(color: DNColor): DNColor;
    ///<summary>
    ///  绘制一条连接由坐标对指定的两个点的线条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  第一个点的 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  第一个点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  第二个点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  第二个点的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect">
    ///  表示要绘制的矩形的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>
    ///  绘制由坐标对、宽度和高度指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  要绘制的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要绘制的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要绘制的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要绘制的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  绘制由坐标对、宽度和高度指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  要绘制的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要绘制的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要绘制的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要绘制的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawRectangle(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  绘制边界 <see cref="T:System.Drawing.RectangleF" />
    ///  定义的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangleF); overload;
    ///<summary>
    ///  清除整个绘图面并以指定背景色填充。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示绘图面的背景色。
    ///</param>
    procedure Clear(color: DNColor);
    ///<summary>
    ///  填充由一对坐标、一个宽度和一个高度指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  要填充的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要填充的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要填充的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要填充的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度和一个高度指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  要填充的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要填充的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要填充的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要填充的矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的一系列矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.Rectangle" />
    ///  结构数组，这些结构表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是一个长度为零的数组。
    ///</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Point" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  填充边框所定义的椭圆的内部，该边框由一对坐标、一个宽度和一个高度指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Region" />
    ///  的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  ，它表示要填充的区域。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRegion(brush: DNBrush; region: DNRegion);
    ///<summary>
    ///  在指定位置并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="x">
    ///  所绘制文本的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制文本的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single); overload;
    ///<summary>
    ///  在指定矩形并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制文本的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的矩形中绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制文本的位置。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  结构，它指定文本的最大布局区域。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="width">
    ///  字符串的最大宽度。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; width: Int32; format: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  在由坐标对指定的位置，使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangle); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  所绘制图像的宽度。
    ///</param>
    ///  <param name="height">
    ///  所绘制图像的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see langword="DrawImage" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与指定 <see cref="T:System.Drawing.Region" />
    ///  的组合结果。
    ///</summary>
    ///  <param name="region">
    ///  要组合的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(region: DNRegion; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域，以排除 <see cref="T:System.Drawing.Region" />
    ///  所指定的区域。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  ，它指定要从剪辑区域排除的区域。
    ///</param>
    procedure ExcludeClip(region: DNRegion); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域沿水平方向和垂直方向平移指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateClip(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  获取累积的图形上下文。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Object" />
    ///  ，表示累积的图形上下文。
    ///</returns>
    function GetContextInfo: DDN.mscorlib.DNObject;
    ///<summary>
    ///  指示 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试其可见性的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  参数指定的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  保存此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态，并用 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  标识保存的状态。
    ///</summary>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  ，该对象表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的保存状态。
    ///</returns>
    function Save: DNGraphicsState;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态还原到 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  表示的状态。
    ///</summary>
    ///  <param name="gstate"><see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  ，它表示要将此 <see cref="T:System.Drawing.Graphics" />
    ///  还原到的状态。
    ///</param>
    procedure Restore(gstate: DNGraphicsState);
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用新的图形容器。
    ///</summary>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer: DNGraphicsContainer; overload;
    ///<summary>
    ///  关闭当前图形容器，并将此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态还原到通过调用 <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  方法保存的状态。
    ///</summary>
    ///  <param name="container"><see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，它表示此方法还原的容器。
    ///</param>
    procedure EndContainer(container: DNGraphicsContainer);
    ///<summary>
    ///  获取与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的设备上下文的句柄。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的设备上下文的句柄。
    ///</returns>
    function GetHdc: IntPtr;
    ///<summary>
    ///  释放通过以前对此 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  方法的调用获得的设备上下文句柄。
    ///</summary>
    procedure ReleaseHdc; overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Graphics" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  强制执行所有挂起的图形操作并立即返回而不等待操作完成。
    ///</summary>
    procedure Flush; overload;
    ///<summary>
    ///  用此方法强制执行所有挂起的图形操作，按照指定，等待或者不等待，在操作完成之前返回。
    ///</summary>
    ///  <param name="intention"><see cref="T:System.Drawing.Drawing2D.FlushIntention" />
    ///  枚举的成员，它指定该方法是立即返回还是等待所有现有的操作都完成。
    ///</param>
    procedure Flush(intention: DNFlushIntention); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="upperLeftSource">
    ///  位于源矩形左上角的点。
    ///</param>
    ///  <param name="upperLeftDestination">
    ///  位于目标矩形左上角的点。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="sourceX">
    ///  位于源矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="sourceY">
    ///  位于源矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="destinationX">
    ///  位于目标矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="destinationY">
    ///  位于目标矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="upperLeftSource">
    ///  位于源矩形左上角的点。
    ///</param>
    ///  <param name="upperLeftDestination">
    ///  位于目标矩形左上角的点。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///  <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  不是成员的 <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>
    ///  执行颜色数据（对应于由像素组成的矩形）从屏幕到 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图图面的位块传输。
    ///</summary>
    ///  <param name="sourceX">
    ///  位于源矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="sourceY">
    ///  位于源矩形左上角的点的 y 坐标
    ///</param>
    ///  <param name="destinationX">
    ///  位于目标矩形左上角的点的 x 坐标。
    ///</param>
    ///  <param name="destinationY">
    ///  位于目标矩形左上角的点的 y 坐标。
    ///</param>
    ///  <param name="blockRegionSize">
    ///  要传输的区域大小。
    ///</param>
    ///  <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  不是成员的 <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.Win32Exception">
    ///  操作失败。
    ///</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换矩阵重置为单位矩阵。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换乘以指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  乘以世界变换的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  以指定顺序将此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界变换乘以指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix">
    ///  乘以世界变换的 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它确定乘法的顺序。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将指定的缩放操作应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵，方法是将该对象的变换矩阵左乘该缩放矩阵。
    ///</summary>
    ///  <param name="sx">
    ///  x 方向的缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  y 方向的缩放比例。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  以指定顺序将指定的缩放操作应用到此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="sx">
    ///  x 方向的缩放比例。
    ///</param>
    ///  <param name="sy">
    ///  y 方向的缩放比例。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将缩放操作添加到变换矩阵前还是追加到变换矩阵后。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将指定旋转应用于此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（以度为单位）。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  以指定顺序将指定旋转应用到此 <see cref="T:System.Drawing.Graphics" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度（以度为单位）。
    ///</param>
    ///  <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  枚举的成员，它指定是将旋转追加到矩阵变换之后还是添加到矩阵变换之前。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  使用此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前世界变换和页变换，将点数组从一个坐标空间转换到另一个坐标空间。
    ///</summary>
    ///  <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定目标坐标空间。
    ///</param>
    ///  <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定源坐标空间。
    ///</param>
    ///  <param name="pts"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要变换的点。
    ///</param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前世界变换和页变换，将点数组从一个坐标空间转换到另一个坐标空间。
    ///</summary>
    ///  <param name="destSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定目标坐标空间。
    ///</param>
    ///  <param name="srcSpace"><see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  枚举成员，它指定源坐标空间。
    ///</param>
    ///  <param name="pts"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要变换的点。
    ///</param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一条连接由坐标对指定的两个点的线条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  第一个点的 x 坐标。
    ///</param>
    ///  <param name="y1">
    ///  第一个点的 y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  第二个点的 x 坐标。
    ///</param>
    ///  <param name="y2">
    ///  第二个点的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  绘制一条连接两个 <see cref="T:System.Drawing.PointF" />
    ///  结构的线。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示要连接的第一个点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示要连接的第二个点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>
    ///  绘制一系列连接一组 <see cref="T:System.Drawing.PointF" />
    ///  结构的线段。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线段的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要连接的点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制一条连接两个 <see cref="T:System.Drawing.Point" />
    ///  结构的线。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线条的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示要连接的第一个点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示要连接的第二个点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>
    ///  绘制一系列连接一组 <see cref="T:System.Drawing.Point" />
    ///  结构的线段。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定线段的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要连接的点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一段弧线，它表示由一对坐标、宽度和高度指定的椭圆部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的矩形的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawArc(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一段弧线，它表示 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的椭圆的一部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一段弧线，它表示由一对坐标、宽度和高度指定的椭圆部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的矩形的高度。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawArc(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  绘制一段弧线，它表示 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的椭圆的一部分。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定弧线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到弧线的起始点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到弧线的结束点沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制由四个表示点的有序坐标对定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x1">
    ///  曲线起始点的 X 坐标。
    ///</param>
    ///  <param name="y1">
    ///  曲线起始点的 Y 坐标。
    ///</param>
    ///  <param name="x2">
    ///  曲线的第一个控制点的 X 坐标。
    ///</param>
    ///  <param name="y2">
    ///  曲线的第一个控制点的 Y 坐标。
    ///</param>
    ///  <param name="x3">
    ///  曲线的第二个控制点的 X 坐标。
    ///</param>
    ///  <param name="y3">
    ///  曲线的第二个控制点的 Y 坐标。
    ///</param>
    ///  <param name="x4">
    ///  曲线的结束点的 X 坐标。
    ///</param>
    ///  <param name="y4">
    ///  曲线的结束点的 Y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>
    ///  绘制由 4 个 <see cref="T:System.Drawing.PointF" />
    ///  结构定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示曲线的结束点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>
    ///  用 <see cref="T:System.Drawing.PointF" />
    ///  结构数组绘制一系列贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构的数组，这些结构表示确定曲线的点。
    ///  此数组中的点数应为 3 的倍数加 1，如 4、7 或 10。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制由 4 个 <see cref="T:System.Drawing.Point" />
    ///  结构定义的贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  结构，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的起始点。
    ///</param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的第一个控制点。
    ///</param>
    ///  <param name="pt3"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的第二个控制点。
    ///</param>
    ///  <param name="pt4"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示曲线的结束点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>
    ///  用 <see cref="T:System.Drawing.Point" />
    ///  结构数组绘制一系列贝塞尔样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构的数组，这些结构表示确定曲线的点。
    ///  此数组中的点数应为 3 的倍数加 1，如 4、7 或 10。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制一系列由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形轮廓线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.RectangleF" />
    ///  结构数组，这些结构表示要绘制的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  绘制一系列由 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定矩形轮廓线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.Rectangle" />
    ///  结构数组，这些结构表示要绘制的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  是长度为零的数组。
    ///</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangle>); overload;
    ///<summary>
    ///  绘制一个由边框（该边框由一对坐标、高度和宽度指定）定义的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  绘制边界 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的椭圆。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它定义椭圆的边界。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>
    ///  绘制一个由边框定义的椭圆，该边框由矩形的左上角坐标、高度和宽度指定。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawEllipse(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  绘制由一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构和两条射线所指定的椭圆定义的扇形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示定义该扇形所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一个扇形，该形状由一个坐标对、宽度、高度以及两条射线所指定的椭圆定义。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  边框的左上角的 x 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框的左上角的 y 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制由一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构和两条射线所指定的椭圆定义的扇形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义该扇形所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  绘制一个扇形，该形状由一个坐标对、宽度、高度以及两条射线所指定的椭圆定义。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定扇形的颜色、宽度和样式。
    ///</param>
    ///  <param name="x">
    ///  边框的左上角的 x 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框的左上角的 y 坐标，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴到扇形的第一条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数到扇形的第二条边沿顺时针方向度量的角（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPie(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  绘制由一组 <see cref="T:System.Drawing.PointF" />
    ///  结构定义的多边形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定多边形的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  绘制由一组 <see cref="T:System.Drawing.Point" />
    ///  结构定义的多边形。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定多边形的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  绘制 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定路径的颜色、宽度和样式。
    ///</param>
    ///  <param name="path">
    ///  要绘制的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawPath(pen: DNPen; path: DNGraphicsPath);
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构的数组，这些结构表示定义曲线的点。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///  从相对于数组开始位置的偏移量开始绘制。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构的基数样条。
    ///  从相对于数组开始位置的偏移量开始绘制。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>
    ///  使用指定的张力绘制经过一组指定的 <see cref="T:System.Drawing.Point" />
    ///  结构的基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和样式。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="offset">
    ///  从 <paramref name="points" />
    ///  参数数组中的第一个元素到曲线中起始点的偏移量。
    ///</param>
    ///  <param name="numberOfSegments">
    ///  起始点之后要包含在曲线中的段数。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.PointF" />
    ///  结构的数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的张力绘制由 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///  需要此参数但被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>
    ///  绘制由 <see cref="T:System.Drawing.Point" />
    ///  结构的数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的张力绘制由 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条。
    ///</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  ，它确定曲线的颜色、宽度和高度。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///  需要此参数但被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的一系列矩形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rects"><see cref="T:System.Drawing.RectangleF" />
    ///  结构数组，这些结构表示要填充的矩形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="rects" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="Rects" />
    ///  是一个长度为零的数组。
    ///</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangleF>); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.PointF" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.PointF" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///  <param name="fillMode">
    ///  确定填充样式的 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>; fillMode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.Point" />
    ///  结构指定的点数组所定义的多边形的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构表示要填充的多边形的顶点。
    ///</param>
    ///  <param name="fillMode">
    ///  确定填充样式的 <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>; fillMode: DNFillMode); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的边框所定义的椭圆的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示定义椭圆的边框。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Rectangle" />
    ///  结构指定的边框所定义的椭圆的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义椭圆的边框。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>
    ///  填充边框所定义的椭圆的内部，该边框由一对坐标、一个宽度和一个高度指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  定义椭圆的边框的左上角的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  定义椭圆的边框的左上角的 Y 坐标。
    ///</param>
    ///  <param name="width">
    ///  定义椭圆的边框的宽度。
    ///</param>
    ///  <param name="height">
    ///  定义椭圆的边框的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillEllipse(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  填充椭圆所定义的扇形区的内部，该椭圆由 <see cref="T:System.Drawing.RectangleF" />
    ///  结构和两条射线指定。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示定义该扇形区所属的椭圆的边框。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度、一个高度以及两条射线指定的椭圆所定义的扇形区的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  边框左上角的 x 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框左上角的 y 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>
    ///  填充由一对坐标、一个宽度、一个高度以及两条射线指定的椭圆所定义的扇形区的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  边框左上角的 x 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="y">
    ///  边框左上角的 y 坐标，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="width">
    ///  边框的宽度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="height">
    ///  边框的高度，该边框定义扇形区所属的椭圆。
    ///</param>
    ///  <param name="startAngle">
    ///  从 x 轴沿顺时针方向旋转到扇形区第一个边所测得的角度（以度为单位）。
    ///</param>
    ///  <param name="sweepAngle">
    ///  从 <paramref name="startAngle" />
    ///  参数沿顺时针方向旋转到扇形区第二个边所测得的角度（以度为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPie(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>
    ///  填充 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它表示要填充的路径。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillPath(brush: DNBrush; path: DNGraphicsPath);
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式和张力填充 <see cref="T:System.Drawing.PointF" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.PointF" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>
    ///  填充由 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>
    ///  使用指定的填充模式填充 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode); overload;
    ///<summary>
    ///  使用指定的填充模式和张力填充 <see cref="T:System.Drawing.Point" />
    ///  结构数组定义的闭合基数样条曲线的内部。
    ///</summary>
    ///  <param name="brush">
    ///  确定填充特性的 <see cref="T:System.Drawing.Brush" />
    ///  。
    ///</param>
    ///  <param name="points"><see cref="T:System.Drawing.Point" />
    ///  结构数组，这些结构定义样条。
    ///</param>
    ///  <param name="fillmode"><see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  枚举的成员，它确定填充曲线的方式。
    ///</param>
    ///  <param name="tension">
    ///  大于或等于 0.0F 的值，该值指定曲线的张力。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="points" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>
    ///  在指定位置并且用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制文本的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的位置绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="x">
    ///  所绘制文本的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制文本的左上角的 y 坐标。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single; format: DNStringFormat); overload;
    ///<summary>
    ///  使用指定 <see cref="T:System.Drawing.StringFormat" />
    ///  的格式化特性，用指定的 <see cref="T:System.Drawing.Brush" />
    ///  和 <see cref="T:System.Drawing.Font" />
    ///  对象在指定的位置绘制指定的文本字符串。
    ///</summary>
    ///  <param name="s">
    ///  要绘制的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  ，它确定所绘制文本的颜色和纹理。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制文本的左上角。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它指定应用于所绘制文本的格式化特性（如行距和对齐方式）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF; format: DNStringFormat); overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat; out charactersFitted: Int32; out linesFilled: Int32): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制并用指定的 <see cref="T:System.Drawing.StringFormat" />
    ///  格式化的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="origin"><see cref="T:System.Drawing.PointF" />
    ///  结构，它表示字符串的左上角。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数和 <paramref name="stringFormat" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; origin: DNPointF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>
    ///  当在指定的布局区域内以指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制时，测量指定的字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  结构，它指定文本的最大布局区域。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示 <paramref name="text" />
    ///  参数指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF): DNSizeF; overload;
    ///<summary>
    ///  测量用指定的 <see cref="T:System.Drawing.Font" />
    ///  绘制的指定字符串。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的格式。
    ///</param>
    ///  <param name="width">
    ///  字符串的最大宽度（以像素为单位）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.SizeF" />
    ///  结构，该结构表示在 <paramref name="text" />
    ///  参数中指定的、使用 <paramref name="font" />
    ///  参数绘制的字符串的大小，单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function MeasureString(text: string; font: DNFont; width: Int32): DNSizeF; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Region" />
    ///  对象的数组，其中每个对象将字符位置的范围限定在指定字符串内。
    ///</summary>
    ///  <param name="text">
    ///  要测量的字符串。
    ///</param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  ，它定义字符串的文本格式。
    ///</param>
    ///  <param name="layoutRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定字符串的布局矩形。
    ///</param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  ，它表示字符串的格式化信息（如行距）。
    ///</param>
    ///<returns>
    ///  此方法返回 <see cref="T:System.Drawing.Region" />
    ///  对象的数组，其中每个对象将字符位置的范围限定在指定字符串内。
    ///</returns>
    function MeasureCharacterRanges(text: string; font: DNFont; layoutRect: DNRectangleF; stringFormat: DNStringFormat): TArray<DNRegion>;
    ///<summary>
    ///  在指定坐标处绘制由指定的 <see cref="T:System.Drawing.Icon" />
    ///  表示的图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIcon(icon: DNIcon; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在 <see cref="T:System.Drawing.Icon" />
    ///  结构指定的区域内绘制指定的 <see cref="T:System.Drawing.Rectangle" />
    ///  表示的图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定显示面上结果图像的位置和大小。
    ///  将 <paramref name="icon" />
    ///  参数中包含的图像缩放为此矩形区域的尺寸。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIcon(icon: DNIcon; targetRect: DNRectangle); overload;
    ///<summary>
    ///  绘制指定的 <see cref="T:System.Drawing.Icon" />
    ///  表示的图像，而不缩放该图像。
    ///</summary>
    ///  <param name="icon">
    ///  要绘制的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  不缩放图像以适合此矩形的大小，但保留其原始大小。
    ///  如果该图像比该矩形大，将它剪裁到适合它的大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawIconUnstretched(icon: DNIcon; targetRect: DNRectangle);
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图像的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; point: DNPointF); overload;
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangleF); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  所绘制图像的宽度。
    ///</param>
    ///  <param name="height">
    ///  所绘制图像的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  在指定的位置使用原始物理大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  结构，它表示所绘制图像的左上角的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; point: DNPoint); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图像的左上角。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; point: DNPoint); overload;
    ///<summary>
    ///  在由坐标对指定的位置，使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  ，它指定了所绘制图像的左上角。
    ///  该矩形的 X 和 Y 属性指定左上角。
    ///  宽度和高度属性被忽略。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; rect: DNRectangle); overload;
    ///<summary>
    ///  在指定的位置使用图像的原始物理大小绘制指定的图像。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  未使用。
    ///</param>
    ///  <param name="height">
    ///  未使用。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>
    ///  在不进行缩放的情况下绘制指定的图像，并在需要时剪辑该图像以适合指定的矩形。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="rect">
    ///  要在其中绘制图像的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImageUnscaledAndClipped(image: DNImage; rect: DNRectangle);
    ///<summary>
    ///  在指定位置并且按指定形状和大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>); overload;
    ///<summary>
    ///  在指定位置并且按指定形状和大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>); overload;
    ///<summary>
    ///  在指定的位置绘制图像的一部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <see cref="T:System.Drawing.Image" />
    ///  中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定的位置绘制图像的一部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="x">
    ///  所绘制图像的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  所绘制图像的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定 <paramref name="image" />
    ///  对象中要绘制的部分。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定 <paramref name="srcRect" />
    ///  参数所用的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  方法时要使用的附加数据。
    ///</param>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  对象的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  方法的执行。
    ///</param>
    ///  <param name="callbackData">
    ///  一个值，它为 <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托指定在检查是否停止执行 <see langword="DrawImage" />
    ///  方法时要使用的附加数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit); overload;
    ///<summary>
    ///  在指定位置并且按指定大小绘制指定的 <see cref="T:System.Drawing.Image" />
    ///  的指定部分。
    ///</summary>
    ///  <param name="image">
    ///  要绘制的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图像的位置和大小。
    ///  将图像进行缩放以适合该矩形。
    ///</param>
    ///  <param name="srcX">
    ///  要绘制的源图像部分的左上角的 x 坐标。
    ///</param>
    ///  <param name="srcY">
    ///  要绘制的源图像部分的左上角的 y 坐标。
    ///</param>
    ///  <param name="srcWidth">
    ///  要绘制的源图像部分的宽度。
    ///</param>
    ///  <param name="srcHeight">
    ///  要绘制的源图像部分的高度。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定用于确定源矩形的度量单位。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定 <paramref name="image" />
    ///  的重新着色和伽玛信息。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  委托，它指定在绘制图像期间要调用的方法。
    ///  此方法被频繁调用以检查是否根据应用程序确定的条件停止 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  方法的执行。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的点处用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的点处用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的矩形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的矩形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的平行四边形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中的记录逐个发送到回调方法，以在指定的平行四边形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的点处用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的点处显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的点处用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  结构，它指定所绘制图元文件的左上角的位置。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的矩形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的矩形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的矩形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定所绘制图元文件的位置和大小。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的平行四边形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.PointF" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法以在指定的平行四边形中显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="srcUnit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>
    ///  将 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  中选定矩形内的记录逐个发送到回调方法，以在指定的平行四边形中用指定的图像特性显示。
    ///</summary>
    ///  <param name="metafile">
    ///  要枚举的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="destPoints">
    ///  由三个 <see cref="T:System.Drawing.Point" />
    ///  结构组成的数组，这三个结构定义一个用来确定所绘制图元文件的大小和位置的平行四边形。
    ///</param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它相对于图元文件的左上角指定要绘制的部分图元文件。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定度量单位，该度量单位用于确定 <paramref name="srcRect" />
    ///  参数指定的矩形所包含的部分图元文件。
    ///</param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  委托，它指定将图元文件记录发送到的方法。
    ///</param>
    ///  <param name="callbackData">
    ///  必需但被忽略的内部指针。
    ///  可以为此参数传递 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  ，它指定所绘制图像的图像特性信息。
    ///</param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为指定 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see langword="Clip" />
    ///  属性。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  ，从该对象中获取新剪辑区域。
    ///</param>
    procedure SetClip(g: DNGraphics); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域和指定的 <see cref="T:System.Drawing.Graphics" />
    ///  的 <see cref="P:System.Drawing.Graphics.Clip" />
    ///  属性指定的组合操作的结果。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  ，它指定要组合的剪辑区域。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(g: DNGraphics; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与 <see cref="T:System.Drawing.Rectangle" />
    ///  结构所指定矩形的组合结果。
    ///</summary>
    ///  <param name="rect">
    ///  要组合的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(rect: DNRectangle; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与 <see cref="T:System.Drawing.RectangleF" />
    ///  结构所指定矩形的组合结果。
    ///</summary>
    ///  <param name="rect">
    ///  要组合的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(rect: DNRectangleF; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它表示新的剪辑区域。
    ///</param>
    procedure SetClip(path: DNGraphicsPath); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域设置为当前剪辑区域与指定 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的组合结果。
    ///</summary>
    ///  <param name="path">
    ///  要组合的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///  <param name="combineMode"><see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  枚举的成员，它指定要使用的组合操作。
    ///</param>
    procedure SetClip(path: DNGraphicsPath; combineMode: DNCombineMode); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  与当前剪辑区域相交的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    procedure IntersectClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  与当前剪辑区域相交的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    procedure IntersectClip(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  对象的剪辑区域更新为当前剪辑区域与指定 <see cref="T:System.Drawing.Region" />
    ///  的交集。
    ///</summary>
    ///  <param name="region">
    ///  要与当前区域交叉的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure IntersectClip(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域，以排除 <see cref="T:System.Drawing.Rectangle" />
    ///  结构所指定的区域。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定要从剪辑区域排除的矩形。
    ///</param>
    procedure ExcludeClip(rect: DNRectangle); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域重置为无限区域。
    ///</summary>
    procedure ResetClip;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域沿水平方向和垂直方向平移指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  平移的 x 坐标。
    ///</param>
    ///  <param name="dy">
    ///  平移的 y 坐标。
    ///</param>
    procedure TranslateClip(dx: Single; dy: Single); overload;
    ///<summary>
    ///  指示由一对坐标指定的点是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的点的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的点的 y 坐标。
    ///</param>
    ///<returns>
    ///  如果由 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数定义的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.Point" />
    ///  结构是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="point">
    ///  要测试其可见性的 <see cref="T:System.Drawing.Point" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="point" />
    ///  参数指定的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标指定的点是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的点的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的点的 y 坐标。
    ///</param>
    ///<returns>
    ///  如果由 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  参数定义的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  指示指定的 <see cref="T:System.Drawing.PointF" />
    ///  结构是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="point">
    ///  要测试其可见性的 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="point" />
    ///  参数指定的点包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标、一个宽度和一个高度指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试其可见性的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试其可见性的矩形的高度。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  、<paramref name="y" />
    ///  、<paramref name="width" />
    ///  和 <paramref name="height" />
    ///  参数定义的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>
    ///  指示由一对坐标、一个宽度和一个高度指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="x">
    ///  要测试其可见性的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试其可见性的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试其可见性的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试其可见性的矩形的高度。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  、<paramref name="y" />
    ///  、<paramref name="width" />
    ///  和 <paramref name="height" />
    ///  参数定义的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>
    ///  指示 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的矩形是否包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试其可见性的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  参数指定的矩形包含在此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用具有指定缩放变形的新图形容器。
    ///</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它与 <paramref name="srcrect" />
    ///  参数一起为新的图形容器指定缩放变换。
    ///</param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构，它与 <paramref name="dstrect" />
    ///  参数一起为新的图形容器指定缩放变换。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定容器的度量单位。
    ///</param>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer(dstrect: DNRectangleF; srcrect: DNRectangleF; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>
    ///  保存具有此 <see cref="T:System.Drawing.Graphics" />
    ///  的当前状态的图形容器，然后打开并使用具有指定缩放变形的新图形容器。
    ///</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它与 <paramref name="srcrect" />
    ///  参数一起为容器指定缩放变换。
    ///</param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构，它与 <paramref name="dstrect" />
    ///  参数一起为容器指定缩放变换。
    ///</param>
    ///  <param name="unit"><see cref="T:System.Drawing.GraphicsUnit" />
    ///  枚举的成员，它指定容器的度量单位。
    ///</param>
    ///<returns>
    ///  此方法返回一个 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  ，该对象表示该方法调用运行时此 <see cref="T:System.Drawing.Graphics" />
    ///  的状态。
    ///</returns>
    function BeginContainer(dstrect: DNRectangle; srcrect: DNRectangle; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>
    ///  向当前 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  添加注释。
    ///</summary>
    ///  <param name="data">
    ///  包含注释的字节的数组。
    ///</param>
    procedure AddMetafileComment(data: TArray<Byte>);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指定如何将合成图像绘制到此 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.CompositingMode" />
    ///  枚举的成员。
    ///  默认值为 <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />
    ///  。
    ///</returns>
    property CompositingMode: DNCompositingMode read get_CompositingMode write set_CompositingMode;
    ///<summary>
    ///  为抵色处理和阴影画笔获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的呈现原点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Point" />
    ///  结构，它表示 8 位/像素和 16 位/像素抖色处理的抖色原点，还用于设置阴影画笔的原点。
    ///</returns>
    property RenderingOrigin: DNPoint read get_RenderingOrigin write set_RenderingOrigin;
    ///<summary>
    ///  获取或设置绘制到此 <see cref="T:System.Drawing.Graphics" />
    ///  的合成图像的呈现质量。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />
    ///  枚举的成员。
    ///  默认值为 <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />
    ///  。
    ///</returns>
    property CompositingQuality: DNCompositingQuality read get_CompositingQuality write set_CompositingQuality;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的文本的呈现模式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Text.TextRenderingHint" />
    ///  值之一。
    ///</returns>
    property TextRenderingHint: DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    ///<summary>
    ///  获取或设置呈现文本的灰度校正值。
    ///</summary>
    ///<returns>
    ///  用于呈现抗锯齿和 ClearType 文本的伽玛校正值。
    ///</returns>
    property TextContrast: Int32 read get_TextContrast write set_TextContrast;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的呈现质量。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.SmoothingMode" />
    ///  值之一。
    ///</returns>
    property SmoothingMode: DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    ///<summary>
    ///  获取或设置一个值，该值指定在呈现此 <see cref="T:System.Drawing.Graphics" />
    ///  的过程中像素如何偏移。
    ///</summary>
    ///<returns>
    ///  此属性指定 <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />
    ///  枚举的成员。
    ///</returns>
    property PixelOffsetMode: DNPixelOffsetMode read get_PixelOffsetMode write set_PixelOffsetMode;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Drawing.Graphics" />
    ///  关联的插补模式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
    ///  值之一。
    ///</returns>
    property InterpolationMode: DNInterpolationMode read get_InterpolationMode write set_InterpolationMode;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的几何世界变换的副本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  副本，表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的几何世界变换。
    ///</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取或设置用于此 <see cref="T:System.Drawing.Graphics" />
    ///  中的页坐标的度量单位。
    ///</summary>
    ///<returns>
    ///  除 <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  以外的 <see cref="T:System.Drawing.GraphicsUnit" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  设置为 <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  , ，这不是物理单元。
    ///</exception>
    property PageUnit: DNGraphicsUnit read get_PageUnit write set_PageUnit;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界单位和页单位之间的比例。
    ///</summary>
    ///<returns>
    ///  此属性指定此 <see cref="T:System.Drawing.Graphics" />
    ///  的世界单位和页单位之间的比例值。
    ///</returns>
    property PageScale: Single read get_PageScale write set_PageScale;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的水平分辨率。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Graphics" />
    ///  支持的水平分辨率的值（以每英寸点数为单位）。
    ///</returns>
    property DpiX: Single read get_DpiX;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的垂直分辨率。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Graphics" />
    ///  支持的垂直分辨率的值（以每英寸点数为单位）。
    ///</returns>
    property DpiY: Single read get_DpiY;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Region" />
    ///  ，它限定此 <see cref="T:System.Drawing.Graphics" />
    ///  的绘图区域。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Region" />
    ///  ，它限定此 <see cref="T:System.Drawing.Graphics" />
    ///  当前可用的绘图区域。
    ///</returns>
    property Clip: DNRegion read get_Clip write set_Clip;
    ///<summary>
    ///  获取一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，该结构限定此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域的边框。
    ///</returns>
    property ClipBounds: DNRectangleF read get_ClipBounds;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域是否为空。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域为空，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsClipEmpty: Boolean read get_IsClipEmpty;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域的边框。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域的边框。
    ///</returns>
    property VisibleClipBounds: DNRectangleF read get_VisibleClipBounds;
    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Graphics" />
    ///  的可见剪辑区域是否为空。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Graphics" />
    ///  的剪辑区域的可见部分为空，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsVisibleClipEmpty: Boolean read get_IsVisibleClipEmpty;
  end;

  TDNGraphics = class(TDNGenericImport<DNGraphicsClass, DNGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNIconClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{3D203B12-B3FE-5D34-A578-F82BA634BF10}']
  { constructors } 

    ///<summary>
    ///  从指定的文件名初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  要从其中加载 <see cref="T:System.Drawing.Icon" />
    ///  的文件。
    ///</param>
    {class} function init(fileName: string): DNIcon; overload;
    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的指定大小的新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  包含图标数据的文件的名称和路径。
    ///</param>
    ///  <param name="size">
    ///  所需的图标大小。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="string" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(fileName: string; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  使用指定文件中的指定宽度和高度初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="fileName">
    ///  包含 <see cref="T:System.Drawing.Icon" />
    ///  数据的文件的名称和路径。
    ///</param>
    ///  <param name="width">
    ///  需要的 <see cref="T:System.Drawing.Icon" />
    ///  宽度。
    ///</param>
    ///  <param name="height">
    ///  需要的 <see cref="T:System.Drawing.Icon" />
    ///  高度。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="string" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(fileName: string; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例，并尝试查找与所请求的大小匹配的图标版本。
    ///</summary>
    ///  <param name="original">
    ///  要从其中加载新调整大小的图标的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</param>
    ///  <param name="size">
    ///  用于指定新 <see cref="T:System.Drawing.Icon" />
    ///  的高度和宽度的 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="original" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(original: DNIcon; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例，并尝试查找与所请求的大小匹配的图标版本。
    ///</summary>
    ///  <param name="original">
    ///  要从其中加载不同大小的图标。
    ///</param>
    ///  <param name="width">
    ///  新图标的宽度。
    ///</param>
    ///  <param name="height">
    ///  新图标的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="original" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(original: DNIcon; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>
    ///  从指定程序集中的资源初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  ，它指定在其中查找资源的程序集。
    ///</param>
    ///  <param name="resource">
    ///  要加载的资源的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的一个图标 <paramref name="resource" />
    ///  不能在包含指定程序集中找到 <paramref name="type" />
    ///  。
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNIcon; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从其中加载 <see cref="T:System.Drawing.Icon" />
    ///  的数据流。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNIcon; overload;
    ///<summary>
    ///  从指定的流初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的指定大小的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  包含图标数据的流。
    ///</param>
    ///  <param name="size">
    ///  所需的图标大小。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  是 <see langword="null" />
    ///  也不包含图像数据。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; size: DNSize): DNIcon; overload;
    ///<summary>
    ///  从指定的数据流用指定的宽度和高度初始化 <see cref="T:System.Drawing.Icon" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从其中加载图标的数据流。
    ///</param>
    ///  <param name="width">
    ///  图标的宽度（以像素为单位）。
    ///</param>
    ///  <param name="height">
    ///  图标的高度（以像素为单位）。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; width: Int32; height: Int32): DNIcon; overload;

  { static methods } 

    ///<summary>
    ///  返回指定文件中包含的图像的图标表示形式。
    ///</summary>
    ///  <param name="filePath">
    ///  包含图像的文件的路径。
    ///</param>
    ///<returns>
    ///  指定文件中包含的图像的 <see cref="T:System.Drawing.Icon" />
    ///  表示形式。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="filePath" />
    ///  并不表示有效的文件。
    ///  - 或 -
    ///  <paramref name="filePath" />
    ///  指明通用命名约定 (UNC) 路径。
    ///</exception>
    {class} function ExtractAssociatedIcon(filePath: string): DNIcon;
    ///<summary>
    ///  从图标的指定 Windows 句柄 (<see langword="HICON" />
    ///  ) 创建 GDI+ <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</summary>
    ///  <param name="handle">
    ///  图标的 Windows 句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</returns>
    {class} function FromHandle(handle: IntPtr): DNIcon;

  end;

  ///<summary>
  ///  表示 Windows 图标，它是用于表示对象的小位图图像。
  ///  尽管图标的大小由系统决定，但仍可将其视为透明的位图。
  ///</summary>
  [DNTypeName('System.Drawing.Icon')]
  DNIcon = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F874226E-D299-3CEF-A532-1EA4153B91FC}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_Height: Int32;
    function get_Size: DNSize;
    function get_Width: Int32;

  { methods } 

    ///<summary>
    ///  克隆 <see cref="T:System.Drawing.Icon" />
    ///  ，创建重复图像。
    ///</summary>
    ///<returns>
    ///  可强制转换为 <see cref="T:System.Drawing.Icon" />
    ///  的对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Icon" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Icon" />
    ///  保存到指定的输出 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="outputStream">
    ///  要保存到的 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Icon" />
    ///  转换为 GDI+ <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Bitmap" />
    ///  ，它表示已转换的 <see cref="T:System.Drawing.Icon" />
    ///  。
    ///</returns>
    function ToBitmap: DNBitmap;
    ///<summary>
    ///  获取用于描述 <see cref="T:System.Drawing.Icon" />
    ///  的可读字符串。
    ///</summary>
    ///<returns>
    ///  描述 <see cref="T:System.Drawing.Icon" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的 Windows 句柄。
    ///  这并非该句柄的副本；请不要释放它。
    ///</summary>
    ///<returns>
    ///  该图标的 Windows 句柄。
    ///</returns>
    property Handle: IntPtr read get_Handle;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Icon" />
    ///  的高度。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  结构，它指定此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度和高度。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Icon" />
    ///  的宽度。
    ///</returns>
    property Width: Int32 read get_Width;
  end;

  TDNIcon = class(TDNGenericImport<DNIconClass, DNIcon>) end;

  //-------------namespace: System.Drawing----------------
  DNImageClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{79A48C86-C565-56AC-8B0C-7D93CF731D7E}']
  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的文件。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含用来创建文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException">
    ///  该文件没有有效的图像格式。
    ///  - 或 -
    ///  GDI+ 不支持该文件的像素格式。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  指定的文件不存在。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是 <see cref="T:System.Uri" />
    ///  。
    ///</exception>
    {class} function FromFile(filename: string): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的文件使用嵌入的颜色管理信息在该文件中。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含用来创建文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement">
    ///  设置为 <see langword="true" />
    ///  使用颜色管理信息嵌入到图像文件中; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException">
    ///  该文件没有有效的图像格式。
    ///  - 或 -
    ///  GDI+ 不支持该文件的像素格式。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  指定的文件不存在。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是 <see cref="T:System.Uri" />
    ///  。
    ///</exception>
    {class} function FromFile(filename: string; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流 （可选） 使用嵌入的颜色管理信息该流中。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  若要使用数据流; 中嵌入的颜色管理信息否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从 GDI 位图的句柄。
    ///</summary>
    ///  <param name="hbitmap">
    ///  GDI 从中创建位图句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHbitmap(hbitmap: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从 GDI 位图和 GDI 调色板的句柄的句柄。
    ///</summary>
    ///  <param name="hbitmap">
    ///  GDI 从中创建位图句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="hpalette">
    ///  句柄 GDI 用于如果中指定的位图定义位图颜色的调色板 <paramref name="hBitmap" />
    ///  参数不是与设备无关位图 (DIB)。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHbitmap(hbitmap: IntPtr; hpalette: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  返回指定像素格式的颜色深度（每个像素的位数）。
    ///</summary>
    ///  <param name="pixfmt"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  成员，用于指定要查找其大小的格式。
    ///</param>
    ///<returns>
    ///  指定的像素格式的颜色深度。
    ///</returns>
    {class} function GetPixelFormatSize(pixfmt: DNPixelFormat): Int32;
    ///<summary>
    ///  返回一个值，该值指示的像素格式是否为此 <see cref="T:System.Drawing.Image" />
    ///  包含 alpha 信息。
    ///</summary>
    ///  <param name="pixfmt">
    ///  要测试的 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  包含 alpha 信息; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsAlphaPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该像素格式是否为每个像素 64 位。
    ///</summary>
    ///  <param name="pixfmt"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举值，用于测试。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  扩展; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsExtendedPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该像素格式是否为每个像素 32 位。
    ///</summary>
    ///  <param name="pixfmt">
    ///  要测试的 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="pixfmt" />
    ///  规范; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsCanonicalPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Image" />
    ///  从指定的数据流 （可选） 使用嵌入的颜色管理信息并验证图像数据。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  若要使用数据流; 中嵌入的颜色管理信息否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="validateImageData"><see langword="true" />
    ///  若要验证图像数据;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  流不是有效的图像格式。
    ///</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean; validateImageData: Boolean): DNImage; overload;

  end;

  ///<summary>
  ///  一个抽象基类，提供了用于功能 <see cref="T:System.Drawing.Bitmap" />
  ///  和 <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  继承的类。
  ///</summary>
  [DNTypeName('System.Drawing.Image')]
  DNImage = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{451DBF16-B46B-3B4F-993C-EFD8B01553A0}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapClass = interface(DNImageClass)
  ['{94ACAB77-01F8-5022-B397-D27F8602028F}']
  { constructors } 

    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  位图文件的名称和路径中。
    ///</param>
    ///<exception cref="T:System.IO.FileNotFoundException">
    ///  找不到指定的文件。
    ///</exception>
    {class} function init(filename: string): DNBitmap; overload;
    ///<summary>
    ///  从指定的文件初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  位图文件的名称。
    ///</param>
    ///  <param name="useIcm"><see langword="true" />
    ///  要用于此颜色校正 <see cref="T:System.Drawing.Bitmap" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(filename: string; useIcm: Boolean): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的资源。
    ///</summary>
    ///  <param name="type">
    ///  用于提取资源的类。
    ///</param>
    ///  <param name="resource">
    ///  资源的名称。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNBitmap; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  用于加载图像的数据流。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  不包含图像数据，或者是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  包含单个维度大于 65535 像素的 PNG 图像文件。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNBitmap; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  用于加载图像的数据流。
    ///</param>
    ///  <param name="useIcm"><see langword="true" />
    ///  要用于此颜色校正 <see cref="T:System.Drawing.Bitmap" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  不包含图像数据，或者是 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="stream" />
    ///  包含单个维度大于 65535 像素的 PNG 图像文件。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; useIcm: Boolean): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  用指定的大小、 像素格式和像素数据的类。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="stride">
    ///  指定两次一次扫描行的开头之间的字节偏移量的整数。
    ///  这通常 （但不是一定） 是像素格式 (例如，16 位 / 像素的 2) 中的字节数乘以位图的宽度。
    ///  传递给此参数的值必须是四的倍数...
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///  <param name="scan0">
    ///  指向包含像素数据的字节数组的指针。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    {class} function init(width: Int32; height: Int32; stride: Int32; format: DNPixelFormat; scan0: IntPtr): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类，具有指定的大小和格式。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    {class} function init(width: Int32; height: Int32; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类具有指定大小。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类具有指定大小，并使用指定的解决方法 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  对象，它指定为新的分辨率 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(width: Int32; height: Int32; g: DNGraphics): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    {class} function init(original: DNImage): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像，缩放到指定的大小。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="width">
    ///  宽度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  高度，以像素为单位，新的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(original: DNImage; width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Bitmap" />
    ///  类从指定的现有图像，缩放到指定的大小。
    ///</summary>
    ///  <param name="original">
    ///  从中创建新 <see cref="T:System.Drawing.Bitmap" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="newSize"><see cref="T:System.Drawing.Size" />
    ///  结构，它表示大小的新 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    {class} function init(original: DNImage; newSize: DNSize): DNBitmap; overload;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从图标的 Windows 句柄。
    ///</summary>
    ///  <param name="hicon">
    ///  指向一个图标的句柄。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromHicon(hicon: IntPtr): DNBitmap;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Bitmap" />
    ///  从指定的 Windows 资源。
    ///</summary>
    ///  <param name="hinstance">
    ///  包含资源的可执行文件的实例句柄。
    ///</param>
    ///  <param name="bitmapName">
    ///  一个字符串，包含资源位图的名称。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    {class} function FromResource(hinstance: IntPtr; bitmapName: string): DNBitmap;

  end;

  ///<summary>
  ///  封装 GDI+ 包含图形图像和其属性的像素数据的位图。
  ///  一个 <see cref="T:System.Drawing.Bitmap" />
  ///  是用来处理图像像素数据所定义的对象。
  ///</summary>
  [DNTypeName('System.Drawing.Bitmap')]
  DNBitmap = interface(DNImage)
  ['{6549E875-8857-35A3-94A2-C3D574DDEB1D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  创建 GDI 从此位图对象 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  句柄 GDI 此方法创建的位图对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度或位图的宽度是否大于 <see cref="F:System.Int16.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHbitmap: IntPtr; overload;
    ///<summary>
    ///  创建 GDI 从此位图对象 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="background">
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它指定背景色。
    ///  如果是完全不透明的位图，则忽略此参数。
    ///</param>
    ///<returns>
    ///  句柄 GDI 此方法创建的位图对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  高度或位图的宽度是否大于 <see cref="F:System.Int16.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHbitmap(background: DNColor): IntPtr; overload;
    ///<summary>
    ///  返回一个图标的句柄。
    ///</summary>
    ///<returns>
    ///  同一个图像作为带图标的 Windows 句柄 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetHicon: IntPtr;
    ///<summary>
    ///  创建此分区的副本 <see cref="T:System.Drawing.Bitmap" />
    ///  由定义 <see cref="T:System.Drawing.Rectangle" />
    ///  结构并使用指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举。
    ///</summary>
    ///  <param name="rect">
    ///  定义此部分 <see cref="T:System.Drawing.Bitmap" />
    ///  复制。
    ///  坐标是相对于此 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  新的像素格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///  这必须指定一个值，开头 <paramref name="Format" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  位于源位图边界之外。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  高度或宽度 <paramref name="rect" />
    ///  为 0。
    ///  - 或 -
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  未指定值，其名称不以开头 格式。
    ///  例如，指定 <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  将导致 <see cref="T:System.ArgumentException" />
    ///  , ，但 <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  将不会。
    ///</exception>
    function Clone(rect: DNRectangle; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  创建此分区的副本 <see cref="T:System.Drawing.Bitmap" />
    ///  定义与指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举。
    ///</summary>
    ///  <param name="rect">
    ///  定义此部分 <see cref="T:System.Drawing.Bitmap" />
    ///  复制。
    ///</param>
    ///  <param name="format">
    ///  指定 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举为目标 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  位于源位图边界之外。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  高度或宽度 <paramref name="rect" />
    ///  为 0。
    ///</exception>
    function Clone(rect: DNRectangleF; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>
    ///  让 <see cref="T:System.Drawing.Bitmap" />
    ///  的默认透明颜色为透明。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Drawing.Bitmap" />
    ///  的图像格式为图标格式。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure MakeTransparent; overload;
    ///<summary>
    ///  使指定的颜色透明此 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="transparentColor"><see cref="T:System.Drawing.Color" />
    ///  结构，它表示要将设置为透明的颜色。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  图像格式的 <see cref="T:System.Drawing.Bitmap" />
    ///  是一种图标格式。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure MakeTransparent(transparentColor: DNColor); overload;
    ///<summary>
    ///  锁定 <see cref="T:System.Drawing.Bitmap" />
    ///  到系统内存。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它指定的部分 <see cref="T:System.Drawing.Bitmap" />
    ///  为锁。
    ///</param>
    ///  <param name="flags"><see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  枚举，用于为指定的访问级别 （读/写） <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  枚举，用于指定的数据格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  不是特定的每像素位值。
    ///  - 或 -
    ///  不正确 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  传入的位图。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat): DNBitmapData; overload;
    ///<summary>
    ///  锁定 <see cref="T:System.Drawing.Bitmap" />
    ///  到系统内存
    ///</summary>
    ///  <param name="rect">
    ///  矩形结构，它指定的部分 <see cref="T:System.Drawing.Bitmap" />
    ///  为锁。
    ///</param>
    ///  <param name="flags">
    ///  其中一个 <see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  为指定的访问级别 （读/写） 的值 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  其中一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  值，该值指定的数据格式 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="bitmapData">
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，包含有关该锁定操作信息。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  值不是特定的每像素位值。
    ///  - 或 -
    ///  不正确 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  传入的位图。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat; bitmapData: DNBitmapData): DNBitmapData; overload;
    ///<summary>
    ///  解锁此 <see cref="T:System.Drawing.Bitmap" />
    ///  于系统内存。
    ///</summary>
    ///  <param name="bitmapdata">
    ///  一个 <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  ，它指定该锁定操作有关的信息。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure UnlockBits(bitmapdata: DNBitmapData);
    ///<summary>
    ///  在此获取指定的像素的颜色 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要检索的像素 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要检索的像素 y 坐标。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，它表示指定的像素的颜色。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x" />
    ///  小于 0，或大于或等于 <see cref="P:System.Drawing.Image.Width" />
    ///  。
    ///  - 或 -
    ///  <paramref name="y" />
    ///  小于 0，或大于或等于 <see cref="P:System.Drawing.Image.Height" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    function GetPixel(x: Int32; y: Int32): DNColor;
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Bitmap" />
    ///  中设置指定像素的颜色。
    ///</summary>
    ///  <param name="x">
    ///  要设置的像素的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要设置的像素的 y 坐标。
    ///</param>
    ///  <param name="color">
    ///  代表分配到指定像素的颜色的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure SetPixel(x: Int32; y: Int32; color: DNColor);
    ///<summary>
    ///  此设置的分辨率 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</summary>
    ///  <param name="xDpi">
    ///  水平分辨率，以每英寸点数为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///  <param name="yDpi">
    ///  垂直分辨率，以每英寸点数为单位的 <see cref="T:System.Drawing.Bitmap" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  操作失败。
    ///</exception>
    procedure SetResolution(xDpi: Single; yDpi: Single);
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNBitmap = class(TDNGenericImport<DNBitmapClass, DNBitmap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileClass = interface(DNImageClass)
  ['{42D491F2-DEA3-52BA-AE62-751A64D411AB}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的类和一个 <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  。
    ///</summary>
    ///  <param name="hmetafile">
    ///  Windows 句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="wmfHeader"><see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  。
    ///</param>
    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的类和一个 <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  。
    ///  此外， <paramref name="deleteWmf" />
    ///  参数可以用于删除图元文件时删除该句柄。
    ///</summary>
    ///  <param name="hmetafile">
    ///  Windows 句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="wmfHeader"><see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  。
    ///</param>
    ///  <param name="deleteWmf"><see langword="true" />
    ///  若要删除新的句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  时 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  已删除; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader; deleteWmf: Boolean): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定句柄。
    ///</summary>
    ///  <param name="henhmetafile">
    ///  增强型图元文件句柄。
    ///</param>
    ///  <param name="deleteEmf"><see langword="true" />
    ///  若要删除的增强型图元文件处理时 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  已删除; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(henhmetafile: IntPtr; deleteEmf: Boolean): DNMetafile; overload;
    ///<summary>
    ///  从指定的文件名初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filename">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示从中创建新文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(filename: string): DNMetafile; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  从中创建新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  的 <see cref="T:System.IO.Stream" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的设备上下文的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定句柄的设备上下文的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  可以提供一个字符串来命名该文件。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="emfType"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定使用提供的度量单位的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于使用所提供的将度量值单位的指定矩形和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于使用所提供的将度量值单位的指定矩形和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  可以提供一个字符串来命名该文件。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于指定使用提供的度量单位的矩形。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于使用所提供的将度量值单位的指定矩形和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的设备上下文中，受限于使用所提供的将度量值单位的指定矩形和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  可以提供一个字符串来命名该文件。
    ///</summary>
    ///  <param name="referenceHdc">
    ///  设备上下文的句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="desc">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; desc: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  初始化具有指定的文件名称。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  描述性字符串可以被添加，进去。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///  此外可以添加描述性字符串。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="desc">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; desc: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  此外可以添加描述性字符串。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  具有指定的文件名，设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///  此外可以添加描述性字符串。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类具有指定的文件名，设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  此外可以添加描述性字符串。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  ，它表示新的文件名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  从指定的数据流初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  此外，一个字符串，包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  可以添加。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  一个字符串，包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  可以添加。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  从指定的数据流、 设备上下文的 Windows 句柄的类和一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，并提供的度量单位。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  类从指定的数据流、 设备上下文的 Windows 句柄 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示的矩形的限定新 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , ，所提供的度量值，单位和 <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  枚举，用于指定的格式 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///  一个字符串，包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  可以添加。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  ，其中会包含数据此 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="referenceHdc">
    ///  设备上下文的 Windows 句柄。
    ///</param>
    ///  <param name="frameRect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  表示限定新矩形 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="frameUnit">
    ///  一个 <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  ，它指定的度量单位 <paramref name="frameRect" />
    ///  。
    ///</param>
    ///  <param name="type"><see cref="T:System.Drawing.Imaging.EmfType" />
    ///  指定格式的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    ///  <param name="description">
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含新的描述性名称 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;

  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="hmetafile">
    ///  窗口的句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  要为其返回一个标头。
    ///</param>
    ///  <param name="wmfHeader"><see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  。
    ///</param>
    ///<returns>
    ///  与指定 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    {class} function GetMetafileHeader(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafileHeader; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="henhmetafile">
    ///  增强的句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  为其返回一个标头。
    ///</param>
    ///<returns>
    ///  与指定 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    {class} function GetMetafileHeader(henhmetafile: IntPtr): DNMetafileHeader; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="fileName">
    ///  一个 <see cref="T:System.String" />
    ///  包含名称的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  检索标头。
    ///</param>
    ///<returns>
    ///  与指定 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    {class} function GetMetafileHeader(fileName: string): DNMetafileHeader; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///  <param name="stream">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  包含 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  检索标头。
    ///</param>
    ///<returns>
    ///  与指定 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    {class} function GetMetafileHeader(stream: DDN.mscorlib.DNStream): DNMetafileHeader; overload;

  end;

  ///<summary>
  ///  定义图形的图元文件。
  ///  图元文件包含描述一系列可以记录 （构造） 的图形操作的记录和播放 （显示）。
  ///  此类不是可继承的。
  ///</summary>
  [DNTypeName('System.Drawing.Imaging.Metafile')]
  DNMetafile = interface(DNImage)
  ['{0039BEED-721E-35E8-A37D-1DBBB36A5A0D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>
    ///  返回与此 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此 <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  关联的 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    function GetMetafileHeader: DNMetafileHeader; overload;
    ///<summary>
    ///  将 Windows 句柄返回到增强 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此增强的 Windows 句柄 <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  。
    ///</returns>
    function GetHenhmetafile: IntPtr;
    ///<summary>
    ///  播放的单个图元文件记录。
    ///</summary>
    ///  <param name="recordType">
    ///  元素 <see cref="T:System.Drawing.Imaging.EmfPlusRecordType" />
    ///  ，它指定所播放的图元文件记录的类型。
    ///</param>
    ///  <param name="flags">
    ///  标志，用于指定记录属性的一组。
    ///</param>
    ///  <param name="dataSize">
    ///  在记录数据的字节数。
    ///</param>
    ///  <param name="data">
    ///  包含记录数据的字节数组。
    ///</param>
    procedure PlayRecord(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: TArray<Byte>);
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Image" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  此方法创建的、 强制转换为一个对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Image" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  返回有关指定的图像编码器所支持的参数的信息。
    ///</summary>
    ///  <param name="encoder">
    ///  用于指定图像编码器的 GUID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，其中包含的数组 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  对象。
    ///  每个 <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  包含有关指定的图像编码器所支持的参数之一的信息。
    ///</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件或流。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件中指定的格式。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="format">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="format" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>
    ///  这会将保存 <see cref="T:System.Drawing.Image" />
    ///  写入指定的文件，使用指定的编码器和图像编码器参数。
    ///</summary>
    ///  <param name="filename">
    ///  一个字符串，包含要保存此文件的名称 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  要用于此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  或 <paramref name="encoder" />
    ///  是 <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///  - 或 -
    ///  图像已保存到同一文件从创建它。
    ///</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将此图像以指定的格式保存到指定的流中。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="format"><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  指定保存的图像的格式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  或 <paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  包含错误的图像格式保存图像
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>
    ///  使用指定的编码器和图像编码器参数，将该图像保存到指定的流。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  将在其中保存图像。
    ///</param>
    ///  <param name="encoder">
    ///  用于此 <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  的 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</param>
    ///  <param name="encoderParams"><see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，它指定图像编码器使用的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">
    ///  使用错误的图像格式保存图像。
    ///</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///  使用此方法将多帧图像中的选定帧保存到另一个多帧图像。
    ///</summary>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>
    ///  将帧添加到上次对 <see cref="Overload:System.Drawing.Image.Save" />
    ///  方法调用时所指定的文件或流中。
    ///</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  ，包含要添加的帧。
    ///</param>
    ///  <param name="encoderParams">
    ///  一个 <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  ，包含保存-添加操作使用的图像编码器所需的参数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>
    ///  返回此缩略图 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="thumbWidth">
    ///  以像素为单位，请求的缩略图的宽度。
    ///</param>
    ///  <param name="thumbHeight">
    ///  以像素为单位，请求的缩略图的高度。
    ///</param>
    ///  <param name="callback">
    ///  一个 <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  委托。
    ///  注意   必须创建一个委托，并将传递对作为委托的引用 <paramref name="callback" />
    ///  不使用参数，但该委托。
    ///</param>
    ///  <param name="callbackData">
    ///  必须是 <see cref="F:System.IntPtr.Zero" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Image" />
    ///  表示缩略图。
    ///</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>
    ///  返回指定维度的帧数。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///<returns>
    ///  指定维度中的帧数。
    ///</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>
    ///  选择由维度和索引指定的帧。
    ///</summary>
    ///  <param name="dimension">
    ///  一个 <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  指定维度类型标识。
    ///</param>
    ///  <param name="frameIndex">
    ///  活动帧的索引。
    ///</param>
    ///<returns>
    ///  始终返回 0。
    ///</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>
    ///  旋转、 翻转，或将旋转和翻转 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="rotateFlipType">
    ///  一个 <see cref="T:System.Drawing.RotateFlipType" />
    ///  成员，用于指定的旋转和翻转将应用于映像的类型。
    ///</param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>
    ///  获取指定的属性项从此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要获取属性项的 ID。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  此方法获取。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>
    ///  从这中移除指定的属性项 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///  <param name="propid">
    ///  要移除的属性项的 ID。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  映像不包含请求的属性项。
    ///  - 或 -
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>
    ///  在此 <see cref="T:System.Drawing.Image" />
    ///  中存储一个属性项（元数据片）。
    ///</summary>
    ///  <param name="propitem">
    ///  要存储的 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  此图像的图像格式不支持属性项。
    ///</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供有关图像的附加数据的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ，它提供有关图像的附加数据。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>
    ///  获取此图像的宽度和高度。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.SizeF" />
    ///  结构，它表示的宽度和高度这<see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>
    ///  获取此图像的宽度和高度（以像素为单位）。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它表示的宽度和高度，以像素为单位，此映像。
    ///</returns>
    property Size: DNSize read get_Size;
    ///<summary>
    ///  获取的宽度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  宽度，以像素为单位，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  获取的高度，以像素为单位，这 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  的高度（以像素为单位）。
    ///</returns>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  获取以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  以每英寸的像素为单位的水平分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>
    ///  获取以每英寸的像素为单位的垂直分辨率 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  垂直分辨率，以像素 / 英寸，此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>
    ///  获取特性的像素数据的这标志 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示的按位组合的整数 <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>
    ///  获取此文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  表示的文件格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>
    ///  获取此像素格式 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  ，它会表示像素格式此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>
    ///  获取或设置用于此目的的颜色调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  ，它表示用于此目的的调色板 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>
    ///  获取表示在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  指定在此帧的维数的 Guid 的数组， <see cref="T:System.Drawing.Image" />
    ///  从最重要到最不重要。
    ///</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>
    ///  获取存储于此的属性项的 Id <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  由属性 ID 组成的一个数组，此图像中存储的每个属性项各有一个 ID。
    ///</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>
    ///  获取的所有属性项 （元数据片） 存储在此 <see cref="T:System.Drawing.Image" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  对象，每个属性项存储在映像中的一个对象。
    ///</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNMetafile = class(TDNGenericImport<DNMetafileClass, DNMetafile>) end;

  //-------------namespace: System.Drawing----------------
  DNPenClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C1364DE7-F49E-5C06-941C-C2AD2E6AB4B2}']
  { constructors } 

    ///<summary>
    ///  用指定颜色初始化 <see cref="T:System.Drawing.Pen" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，指示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</param>
    {class} function init(color: DNColor): DNPen; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.Pen" />
    ///  和 <see cref="T:System.Drawing.Color" />
    ///  属性初始化 <see cref="P:System.Drawing.Pen.Width" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  结构，指示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</param>
    ///  <param name="width">
    ///  指示此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度的值。
    ///</param>
    {class} function init(color: DNColor; width: Single): DNPen; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Pen" />
    ///  初始化 <see cref="T:System.Drawing.Brush" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="brush">
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，确定该 <see cref="T:System.Drawing.Pen" />
    ///  的填充属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(brush: DNBrush): DNPen; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Pen" />
    ///  和 <see cref="T:System.Drawing.Brush" />
    ///  初始化 <see cref="P:System.Drawing.Pen.Width" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="brush">
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，决定此 <see cref="T:System.Drawing.Pen" />
    ///  的特征。
    ///</param>
    ///  <param name="width">
    ///  新 <see cref="T:System.Drawing.Pen" />
    ///  的宽度。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(brush: DNBrush; width: Single): DNPen; overload;

  end;

  ///<summary>
  ///  定义用于绘制直线和曲线的对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Pen')]
  DNPen = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CDC550AB-7CA0-3E7F-AB2B-7A88B65D0ECD}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_StartCap: DNLineCap;
    procedure set_StartCap(value: DNLineCap);
    function get_EndCap: DNLineCap;
    procedure set_EndCap(value: DNLineCap);
    function get_DashCap: DNDashCap;
    procedure set_DashCap(value: DNDashCap);
    function get_LineJoin: DNLineJoin;
    procedure set_LineJoin(value: DNLineJoin);
    function get_CustomStartCap: DNCustomLineCap;
    procedure set_CustomStartCap(value: DNCustomLineCap);
    function get_CustomEndCap: DNCustomLineCap;
    procedure set_CustomEndCap(value: DNCustomLineCap);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_Alignment: DNPenAlignment;
    procedure set_Alignment(value: DNPenAlignment);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PenType: DNPenType;
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_DashOffset: Single;
    procedure set_DashOffset(value: Single);
    function get_DashPattern: TArray<Single>;
    procedure set_DashPattern(value: TArray<Single>);
    function get_CompoundArray: TArray<Single>;
    procedure set_CompoundArray(value: TArray<Single>);

  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Pen" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  一个可以强制转换为 <see cref="T:System.Drawing.Pen" />
    ///  的 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Pen" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  设置用于确定线帽样式的值，线帽用于结束通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线。
    ///</summary>
    ///  <param name="startCap">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  ，表示要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线起点使用的线帽样式。
    ///</param>
    ///  <param name="endCap">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  ，表示要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线终点使用的线帽样式。
    ///</param>
    ///  <param name="dashCap">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  ，表示要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的虚线起点或终点使用的线帽样式。
    ///</param>
    procedure SetLineCap(startCap: DNLineCap; endCap: DNLineCap; dashCap: DNDashCap);
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换矩阵重置为单位矩阵。
    ///</summary>
    procedure ResetTransform;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  乘以此 <see cref="T:System.Drawing.Pen" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="matrix">
    ///  用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  对象。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>
    ///  按照指定的顺序，用指定的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  乘以此 <see cref="T:System.Drawing.Pen" />
    ///  的变换矩阵。
    ///</summary>
    ///  <param name="matrix">
    ///  用来乘变换矩阵的 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</param>
    ///  <param name="order">
    ///  执行乘法运算的顺序。
    ///</param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何转换平移指定尺寸。
    ///  此方法将平移添加到变换前。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>
    ///  按指定的顺序将局部几何转换平移指定的尺寸。
    ///</summary>
    ///  <param name="dx">
    ///  X 方向的转换值。
    ///</param>
    ///  <param name="dy">
    ///  Y 方向的转换值。
    ///</param>
    ///  <param name="order">
    ///  应用转换的顺序（在前面添加或在后面追加）。
    ///</param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  按指定因子缩放局部几何转换。
    ///  此方法将缩放矩阵添加到转换前。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放转换的因子。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>
    ///  将局部几何转换以指定顺序缩放指定因子。
    ///</summary>
    ///  <param name="sx">
    ///  沿 x 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="sy">
    ///  沿 y 轴方向缩放转换的因子。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，指定是在后面追加缩放矩阵还是在前面添加缩放矩阵。
    ///</param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>
    ///  将局部几何转换旋转指定角度。
    ///  此方法将旋转添加到变换前。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>
    ///  以指定顺序将局部几何转换旋转指定角度。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  ，它指定是在后面追加旋转矩阵还是在前面添加旋转矩阵。
    ///</param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度，以用于绘图的 <see cref="T:System.Drawing.Graphics" />
    ///  对象为单位。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Pen" />
    ///  的宽度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Width" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线起点使用的线帽样式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  值之一，表示在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线起点使用的线帽样式。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  指定的值不是成员的 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.StartCap" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property StartCap: DNLineCap read get_StartCap write set_StartCap;
    ///<summary>
    ///  获取或设置要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线终点使用的线帽样式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  值之一，表示在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线终点使用的线帽样式。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  指定的值不是成员的 <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.EndCap" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property EndCap: DNLineCap read get_EndCap write set_EndCap;
    ///<summary>
    ///  获取或设置用在短划线终点的线帽样式，这些短划线构成通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的虚线。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.DashCap" />
    ///  值之一，表示用在短划线起点和终点的线帽样式，这些短划线构成通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的虚线。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  指定的值不是成员的 <see cref="T:System.Drawing.Drawing2D.DashCap" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashCap" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashCap: DNDashCap read get_DashCap write set_DashCap;
    ///<summary>
    ///  获取或设置通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的两条连续直线的端点的联接样式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  ，表示通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的两条连续直线的端点的联接样式。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.LineJoin" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property LineJoin: DNLineJoin read get_LineJoin write set_LineJoin;
    ///<summary>
    ///  获取或设置要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线起点使用的自定义线帽。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  ，表示在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线起点使用的线帽。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.CustomStartCap" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property CustomStartCap: DNCustomLineCap read get_CustomStartCap write set_CustomStartCap;
    ///<summary>
    ///  获取或设置要在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线终点使用的自定义线帽。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  ，表示在通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线终点使用的线帽。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.CustomEndCap" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property CustomEndCap: DNCustomLineCap read get_CustomEndCap write set_CustomEndCap;
    ///<summary>
    ///  获取或设置斜接角上联接宽度的限制。
    ///</summary>
    ///<returns>
    ///  斜接角上联接宽度的限制。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.MiterLimit" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的对齐方式。
    ///</summary>
    ///<returns>
    ///  表示该 <see cref="T:System.Drawing.Drawing2D.PenAlignment" />
    ///  的对齐方式的 <see cref="T:System.Drawing.Pen" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
    ///  指定的值不是成员的 <see cref="T:System.Drawing.Drawing2D.PenAlignment" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Alignment" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Alignment: DNPenAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换的副本。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  副本，表示此 <see cref="T:System.Drawing.Pen" />
    ///  的几何变换。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Transform" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>
    ///  获取用此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线的样式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Drawing2D.PenType" />
    ///  枚举，指定用此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的直线的样式。
    ///</returns>
    property PenType: DNPenType read get_PenType;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，表示此 <see cref="T:System.Drawing.Pen" />
    ///  的颜色。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Color" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Drawing.Brush" />
    ///  ，用于确定此 <see cref="T:System.Drawing.Pen" />
    ///  的特性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Brush" />
    ///  ，用于确定此 <see cref="T:System.Drawing.Pen" />
    ///  的特性。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.Brush" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property Brush: DNBrush read get_Brush write set_Brush;
    ///<summary>
    ///  获取或设置用于通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的虚线的样式。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.DashStyle" />
    ///  ，表示用于通过此 <see cref="T:System.Drawing.Pen" />
    ///  绘制的虚线的样式。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashStyle" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  获取或设置直线的起点到短划线图案起始处的距离。
    ///</summary>
    ///<returns>
    ///  直线的起点到短划线图案起始处的距离。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashOffset" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashOffset: Single read get_DashOffset write set_DashOffset;
    ///<summary>
    ///  获取或设置自定义的短划线和空白区域的数组。
    ///</summary>
    ///<returns>
    ///  实数数组，指定虚线中交替出现的短划线和空白区域的长度。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.DashPattern" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property DashPattern: TArray<Single> read get_DashPattern write set_DashPattern;
    ///<summary>
    ///  获取或设置用于指定复合钢笔的值数组。
    ///  复合钢笔绘制由平行直线和空白区域组成的复合直线。
    ///</summary>
    ///<returns>
    ///  用于指定复合数组的实数组。
    ///  该数组中的元素必须按升序排列，不能小于 0，也不能大于 1。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Drawing.Pen.CompoundArray" />
    ///  属性设置对不可变 <see cref="T:System.Drawing.Pen" />
    ///  , ，例如由 <see cref="T:System.Drawing.Pens" />
    ///  类。
    ///</exception>
    property CompoundArray: TArray<Single> read get_CompoundArray write set_CompoundArray;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Drawing----------------
  DNRegionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B5420B2-257B-550F-892E-A967F1CA8C5D}']
  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    {class} function init: DNRegion; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它定义新的内部 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangleF): DNRegion; overload;
    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  一个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它定义新的内部 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    {class} function init(rect: DNRectangle): DNRegion; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  初始化新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="path">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ，它定义新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(path: DNGraphicsPath): DNRegion; overload;
    ///<summary>
    ///  从指定的数据中初始化新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rgnData">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  ，它定义新的 <see cref="T:System.Drawing.Region" />
    ///  的内部。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgnData" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(rgnData: DNRegionData): DNRegion; overload;

  { static methods } 

    ///<summary>
    ///  初始化新 <see cref="T:System.Drawing.Region" />
    ///  从指定的现有的句柄 GDI 区域。
    ///</summary>
    ///  <param name="hrgn">
    ///  一个现有的句柄 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</returns>
    {class} function FromHrgn(hrgn: IntPtr): DNRegion;

  end;

  ///<summary>
  ///  描述组成矩形和路径的图形形状的内部。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Region')]
  DNRegion = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{ECA0B9D1-F8EA-3069-9AF8-DD9A08876F74}']
  { methods } 

    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.Region" />
    ///  的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</returns>
    function Clone: DNRegion;
    ///<summary>
    ///  初始化此 <see cref="T:System.Drawing.Region" />
    ///  无限内部的对象。
    ///</summary>
    procedure MakeInfinite;
    ///<summary>
    ///  初始化此 <see cref="T:System.Drawing.Region" />
    ///  为一个空内部。
    ///</summary>
    procedure MakeEmpty;
    ///<summary>
    ///  通过指定的 <see cref="T:System.Drawing.Region" />
    ///  ，将此 <see cref="T:System.Drawing.Region" />
    ///  更新为其自身的交集。
    ///</summary>
    ///  <param name="region">
    ///  要与此 <see cref="T:System.Drawing.Region" />
    ///  相交的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Union(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Exclude(rect: DNRectangle); overload;
    ///<summary>
    ///  这将返回 Windows 句柄 <see cref="T:System.Drawing.Region" />
    ///  中指定的图形上下文。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  绘制。
    ///</param>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  的 Windows 句柄。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetHrgn(g: DNGraphics): IntPtr;
    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Region" />
    ///  有无限内部指定的绘图图面上。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此内部 <see cref="T:System.Drawing.Region" />
    ///  时与关联的转换是无限期 <paramref name="g" />
    ///  应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function IsInfinite(g: DNGraphics): Boolean;
    ///<summary>
    ///  释放此 <see cref="T:System.Drawing.Region" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  至其自身的与指定的交点 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  相交与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Region" />
    ///  更新为其自身与指定的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  要与此 <see cref="T:System.Drawing.Region" />
    ///  相交的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  至其自身的与指定的交点 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  要与此相交 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Intersect(path: DNGraphicsPath); overload;
    ///<summary>
    ///  释放该 <see cref="T:System.Drawing.Region" />
    ///  的句柄。
    ///</summary>
    ///  <param name="regionHandle"><see cref="T:System.Drawing.Region" />
    ///  的句柄。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="regionHandle" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ReleaseHrgn(regionHandle: IntPtr);
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Union(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Union(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  为自身与指定联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  与此联合 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Union(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构 <see cref="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure &Xor(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure &Xor(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  到 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure &Xor(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  到的并集的交集本身具有指定减去 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  到 <see cref="Overload:System.Drawing.Region.Xor" />
    ///  与此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure &Xor(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Exclude(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Exclude(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  包含只有不相交具有指定其内部的部分 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  排除这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Exclude(region: DNRegion); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  要包含的指定部分 <see cref="T:System.Drawing.RectangleF" />
    ///  与此不相交的结构 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  结构来补充这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Complement(rect: DNRectangleF); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  要包含的指定部分 <see cref="T:System.Drawing.Rectangle" />
    ///  与此不相交的结构 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  结构来补充这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    procedure Complement(rect: DNRectangle); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  以包含与此 <see cref="T:System.Drawing.Region" />
    ///  不相交的指定的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  的那部分。
    ///</summary>
    ///  <param name="path">
    ///  要对此 <see cref="T:System.Drawing.Region" />
    ///  进行补充的 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Complement(path: DNGraphicsPath); overload;
    ///<summary>
    ///  更新此 <see cref="T:System.Drawing.Region" />
    ///  以包含与此 <see cref="T:System.Drawing.Region" />
    ///  不相交的指定的 <see cref="T:System.Drawing.Region" />
    ///  的那部分。
    ///</summary>
    ///  <param name="region">
    ///  要对此 <see cref="T:System.Drawing.Region" />
    ///  对象进行补充的 <see cref="T:System.Drawing.Region" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Complement(region: DNRegion); overload;
    ///<summary>
    ///  这些坐标偏移 <see cref="T:System.Drawing.Region" />
    ///  指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  水平。
    ///</param>
    ///  <param name="dy">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  垂直方向。
    ///</param>
    procedure Translate(dx: Single; dy: Single); overload;
    ///<summary>
    ///  这些坐标偏移 <see cref="T:System.Drawing.Region" />
    ///  指定的量。
    ///</summary>
    ///  <param name="dx">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  水平。
    ///</param>
    ///  <param name="dy">
    ///  此偏移量 <see cref="T:System.Drawing.Region" />
    ///  垂直方向。
    ///</param>
    procedure Translate(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  这一转变源自 <see cref="T:System.Drawing.Region" />
    ///  由指定 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  进行变换这 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Transform(matrix: DNMatrix);
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示限定此矩形 <see cref="T:System.Drawing.Region" />
    ///  的绘图图面上 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  此 <see cref="T:System.Drawing.Region" />
    ///  绘制。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示此边界的矩形 <see cref="T:System.Drawing.Region" />
    ///  绘图图面上指定。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetBounds(g: DNGraphics): DNRectangleF;
    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Region" />
    ///  有空的内部指定的绘图图面上。
    ///</summary>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此内部 <see cref="T:System.Drawing.Region" />
    ///  与转换相关联时，是空 <paramref name="g" />
    ///  应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function IsEmpty(g: DNGraphics): Boolean;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Region" />
    ///  是否与此 <see cref="T:System.Drawing.Region" />
    ///  绘图图面上指定。
    ///</summary>
    ///  <param name="region">
    ///  要测试的 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示绘图图面。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果与转换关联时，均不同于内部与此区域的内部与区域 <paramref name="g" />
    ///  参数是应用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  或 <paramref name="region" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Equals(region: DNRegion; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  表示描述此信息 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  表示描述此信息 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</returns>
    function GetRegionData: DNRegionData;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.PointF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.PointF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPointF; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.RectangleF" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangleF; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  对象时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  对象。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的点包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Point" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  要测试其结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  测试是否指定 <see cref="T:System.Drawing.Point" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当 <paramref name="point" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(point: DNPoint; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  要测试其结构。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  测试是否指定任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="x">
    ///  要测试的矩形的左上角 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的矩形的左上角 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  要测试的矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  要测试的矩形的高度。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  当指定的任何的矩形部分包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  测试是否有任何指定的部分 <see cref="T:System.Drawing.Rectangle" />
    ///  结构包含在此 <see cref="T:System.Drawing.Region" />
    ///  时使用指定绘制 <see cref="T:System.Drawing.Graphics" />
    ///  。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  要测试其结构。
    ///</param>
    ///  <param name="g">
    ///  一个 <see cref="T:System.Drawing.Graphics" />
    ///  ，它表示的图形上下文。
    ///</param>
    ///<returns><see langword="true" />
    ///  时的任何部分 <paramref name="rect" />
    ///  包含在此 <see cref="T:System.Drawing.Region" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsVisible(rect: DNRectangle; g: DNGraphics): Boolean; overload;
    ///<summary>
    ///  返回的数组 <see cref="T:System.Drawing.RectangleF" />
    ///  近似的结构 <see cref="T:System.Drawing.Region" />
    ///  应用指定的矩阵变换之后。
    ///</summary>
    ///  <param name="matrix">
    ///  一个 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ，表示要应用于区域的几何变换。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Drawing.RectangleF" />
    ///  近似的结构 <see cref="T:System.Drawing.Region" />
    ///  应用指定的矩阵变换之后。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function GetRegionScans(matrix: DNMatrix): TArray<DNRectangleF>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegion = class(TDNGenericImport<DNRegionClass, DNRegion>) end;

  //-------------namespace: System.Drawing----------------
  DNStringFormatClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{56C8F5D2-5C03-54B7-9939-1F548CEBD429}']
  { static getter & setter } 

    {class} function get_GenericDefault: DNStringFormat;
    {class} function get_GenericTypographic: DNStringFormat;

  { constructors } 

    ///<summary>
    ///  初始化新的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    {class} function init: DNStringFormat; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="options">
    ///  新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</param>
    {class} function init(options: DNStringFormatFlags): DNStringFormat; overload;
    ///<summary>
    ///  用指定的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举和语言初始化新的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="options">
    ///  新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</param>
    ///  <param name="language">
    ///  一个指示文本语言的值。
    ///</param>
    {class} function init(options: DNStringFormatFlags; language: Int32): DNStringFormat; overload;
    ///<summary>
    ///  从指定的现有 <see cref="T:System.Drawing.StringFormat" />
    ///  对象初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  对象，从该对象初始化新 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="format" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(format: DNStringFormat): DNStringFormat; overload;

  { static propertys } 

    ///<summary>
    ///  获取泛型默认 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  泛型默认 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    {class} property GenericDefault: DNStringFormat read get_GenericDefault;
    ///<summary>
    ///  获取泛型版式 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  泛型版式 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    {class} property GenericTypographic: DNStringFormat read get_GenericTypographic;
  end;

  ///<summary>
  ///  封装文本布局信息（如对齐方式、方向和制表位）、显示操作（如省略号插入和区域数字替换）和 OpenType 功能。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.StringFormat')]
  DNStringFormat = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{977C6406-2374-3D2B-ADE1-F9C93DB908CA}']
  { getters & setters } 

    function get_FormatFlags: DNStringFormatFlags;
    procedure set_FormatFlags(value: DNStringFormatFlags);
    function get_Alignment: DNStringAlignment;
    procedure set_Alignment(value: DNStringAlignment);
    function get_LineAlignment: DNStringAlignment;
    procedure set_LineAlignment(value: DNStringAlignment);
    function get_HotkeyPrefix: DNHotkeyPrefix;
    procedure set_HotkeyPrefix(value: DNHotkeyPrefix);
    function get_Trimming: DNStringTrimming;
    procedure set_Trimming(value: DNStringTrimming);
    function get_DigitSubstitutionMethod: DNStringDigitSubstitute;
    function get_DigitSubstitutionLanguage: Int32;

  { methods } 

    ///<summary>
    ///  释放由此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  创建此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的一个精确副本。
    ///</summary>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.StringFormat" />
    ///  对象。
    ///</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  指定 <see cref="T:System.Drawing.CharacterRange" />
    ///  结构的数组，这些结构表示通过调用 <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  方法来测定的字符的范围。
    ///</summary>
    ///  <param name="ranges"><see cref="T:System.Drawing.CharacterRange" />
    ///  结构的数组，这些结构指定由调用 <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  方法来测定的字符范围。
    ///</param>
    ///<exception cref="T:System.OverflowException">
    ///  已设置超过 32 个字符范围。
    ///</exception>
    procedure SetMeasurableCharacterRanges(ranges: TArray<DNCharacterRange>);
    ///<summary>
    ///  为此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象设置制表位。
    ///</summary>
    ///  <param name="firstTabOffset">
    ///  文本行开头和第一个制表位之间的空格数。
    ///</param>
    ///  <param name="tabStops">
    ///  制表位之间的距离的数组，这些距离的单位由 <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  属性指定。
    ///</param>
    procedure SetTabStops(firstTabOffset: Single; tabStops: TArray<Single>);
    function GetTabStops(out firstTabOffset: Single): TArray<Single>;
    ///<summary>
    ///  指定将本地数字替换为西方数字时所使用的语言和方法。
    ///</summary>
    ///  <param name="language">
    ///  一个区域语言支持 (NLS) 语言标识符，它标识在将本地数字替换为西方数字时所使用的语言。
    ///  可将 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性作为 NLS 语言标识符传递。
    ///  例如，假定通过将字符串“ar-EG”传递给 <see cref="T:System.Globalization.CultureInfo" />
    ///  构造函数来创建 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///  如果将该 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性连同 <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  一起传递给 <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  ，则在显示时阿拉伯 - 印度文数字将会替换西方数字。
    ///</param>
    ///  <param name="substitute"><see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  枚举的一个元素，它指定如何显示数字位。
    ///</param>
    procedure SetDigitSubstitution(language: Int32; substitute: DNStringDigitSubstitute);
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象转换为可读的字符串。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的字符串表示形式。
    ///</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置包含格式化信息的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</summary>
    ///<returns>
    ///  包含格式化信息的 <see cref="T:System.Drawing.StringFormatFlags" />
    ///  枚举。
    ///</returns>
    property FormatFlags: DNStringFormatFlags read get_FormatFlags write set_FormatFlags;
    ///<summary>
    ///  获取或设置字符串的水平对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringAlignment" />
    ///  枚举，它指定字符串的水平对齐方式。
    ///</returns>
    property Alignment: DNStringAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  获取或设置字符串的垂直对齐方式。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringAlignment" />
    ///  枚举，它表示行的垂直对齐方式。
    ///</returns>
    property LineAlignment: DNStringAlignment read get_LineAlignment write set_LineAlignment;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  对象，默认值为 <see cref="F:System.Drawing.Text.HotkeyPrefix.None" />
    ///  。
    ///</returns>
    property HotkeyPrefix: DNHotkeyPrefix read get_HotkeyPrefix write set_HotkeyPrefix;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象的 <see cref="T:System.Drawing.StringTrimming" />
    ///  枚举。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringTrimming" />
    ///  枚举，它指示当用此 <see cref="T:System.Drawing.StringFormat" />
    ///  对象绘制的文本超出布局矩形的边缘时被剪裁的方式。
    ///</returns>
    property Trimming: DNStringTrimming read get_Trimming write set_Trimming;
    ///<summary>
    ///  获取要用于数字替换的方法。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  枚举值，它指定如何替换字符串中因当前字体不支持而无法显示的字符。
    ///</returns>
    property DigitSubstitutionMethod: DNStringDigitSubstitute read get_DigitSubstitutionMethod;
    ///<summary>
    ///  获取将本地数字替换西方数字时所使用的语言。
    ///</summary>
    ///<returns>
    ///  一个区域语言支持 (NLS) 语言标识符，它标识在将本地数字替换为西方数字时所使用的语言。
    ///  可将 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性作为 NLS 语言标识符传递。
    ///  例如，假定通过将字符串“ar-EG”传递给 <see cref="T:System.Globalization.CultureInfo" />
    ///  构造函数来创建 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象。
    ///  如果将该 <see cref="T:System.Globalization.CultureInfo" />
    ///  对象的 <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  属性连同 <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  一起传递给 <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  方法，则在显示时阿拉伯 - 印度文数字将会替换西方数字。
    ///</returns>
    property DigitSubstitutionLanguage: Int32 read get_DigitSubstitutionLanguage;
  end;

  TDNStringFormat = class(TDNGenericImport<DNStringFormatClass, DNStringFormat>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1AFC8C9-0BA1-5D62-A388-9EFEA4850FEF}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PrintingPermission" />
    ///  使用完全受限制或不受限制的访问权限，为指定的类。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  值之一。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="state" />
    ///  不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />
    ///  。
    ///</exception>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNPrintingPermission; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Printing.PrintingPermission" />
    ///  类具有指定的打印访问级别。
    ///</summary>
    ///  <param name="printingLevel"><see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  值之一。
    ///</param>
    {class} function init(printingLevel: DNPrintingPermissionLevel): DNPrintingPermission; overload;

  end;

  ///<summary>
  ///  控制对打印机的访问。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermission')]
  DNPrintingPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{0C882D6F-8421-398D-A24E-BBA452CC6928}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示是否不受限制的权限。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果权限不受限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  确定当前的权限对象是否为指定权限的子集。
    ///</summary>
    ///  <param name="target">
    ///  测试子集关系权限对象。
    ///  此对象必须是类型的与当前权限对象相同。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前的权限对象的一个子集 <paramref name="target" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  创建并返回的权限，则当前的权限对象和目标权限对象的交集。
    ///</summary>
    ///  <param name="target">
    ///  权限与当前权限对象具有相同类型的对象。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前对象和指定的目标的交集。
    ///  如果交集为空，则此对象为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建组合权限对象和目标权限对象的权限。
    ///</summary>
    ///  <param name="target">
    ///  权限与当前权限对象具有相同类型的对象。
    ///</param>
    ///<returns>
    ///  新权限对象，表示当前的权限对象和指定的权限对象的并集。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  是不是与当前权限对象具有相同类型的对象。
    ///</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建并返回当前的权限对象的相同副本。
    ///</summary>
    ///<returns>
    ///  当前权限对象的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建安全对象及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  安全对象的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  通过 XML 编码重新构造具有指定状态的安全对象。
    ///</summary>
    ///  <param name="esd">
    ///  用于重新构造安全对象的 XML 编码。
    ///</param>
    procedure FromXml(esd: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置打印访问代码的级别。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  值之一。
    ///</returns>
    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
  end;

  TDNPrintingPermission = class(TDNGenericImport<DNPrintingPermissionClass, DNPrintingPermission>) end;

  //-------------namespace: System.Drawing----------------
  DNCharacterRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A0A5CEDC-68FB-58AB-8D49-C44FE49BC34B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.CharacterRange" />
    ///  结构，并指定字符串中字符位置的范围。
    ///</summary>
    ///  <param name="First">
    ///  第一个字符的范围内的位置。
    ///  例如，如果 <paramref name="First" />
    ///  设置为 0 时，该范围的第一个位置是在字符串中的位置 0。
    ///</param>
    ///  <param name="Length">
    ///  范围内的位置数。
    ///</param>
    {class} function init(First: Int32; Length: Int32): DNCharacterRange;

  end;

  ///<summary>
  ///  指定字符串中字符位置的范围。
  ///</summary>
  [DNTypeName('System.Drawing.CharacterRange')]
  DNCharacterRange = interface(DDN.mscorlib.DNValueType)
  ['{D26938C9-752E-36A5-8A7F-544485A0DBCA}']
  { getters & setters } 

    function get_First: Int32;
    procedure set_First(value: Int32);
    function get_Length: Int32;
    procedure set_Length(value: Int32);

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示此对象是否等效于指定的对象。
    ///</summary>
    ///  <param name="obj">
    ///  要比较相等的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  指示指定的对象是否具有相同的实例 <see cref="P:System.Drawing.CharacterRange.First" />
    ///  和 <see cref="P:System.Drawing.CharacterRange.Length" />
    ///  值与此实例; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  一个 32 位带符号整数，它是此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置的第一个字符的字符串中的位置 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</summary>
    ///<returns>
    ///  第一个位置 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</returns>
    property First: Int32 read get_First write set_First;
    ///<summary>
    ///  获取或设置在此位置数 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</summary>
    ///<returns>
    ///  在此位置数 <see cref="T:System.Drawing.CharacterRange" />
    ///  。
    ///</returns>
    property Length: Int32 read get_Length write set_Length;
  end;

  TDNCharacterRange = class(TDNGenericImport<DNCharacterRangeClass, DNCharacterRange>) end;

  //-------------namespace: System.Drawing----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F54C08F6-E6CF-5D2A-8BBC-E1387E7CC027}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    ///<summary>
    ///  表示颜色，它是 <see langword="null" />
    ///  。
    ///</summary>
    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从 32 位 ARGB 值结构。
    ///</summary>
    ///  <param name="argb">
    ///  指定的 32 位 ARGB 值的值。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Color" />
    ///  此方法创建的结构。
    ///</returns>
    {class} function FromArgb(argb: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的 8 位颜色值 （红色、 绿色和蓝色） 的结构。
    ///  Alpha 值隐式地为 255 （完全不透明）。
    ///  尽管此方法允许为每个颜色组件传递一个 32 位值，但每个分量的值仅限于 8 位。
    ///</summary>
    ///  <param name="red">
    ///  新的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="green">
    ///  新的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="blue">
    ///  新的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="red" />
    ///  , <paramref name="green" />
    ///  , ，或 <paramref name="blue" />
    ///  小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的结构预定义颜色。
    ///</summary>
    ///  <param name="color">
    ///  一个元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    {class} function FromKnownColor(color: DNKnownColor): DNColor;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  预定义的颜色的指定名称的结构。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串，是一种预定义颜色的名称。
    ///  有效的名称为的元素的名称相同 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    {class} function FromName(name: string): DNColor;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从四个 ARGB 组件 （alpha、 红色、 绿色和蓝色） 的结构的值。
    ///  尽管此方法允许为每个组件传递一个 32 位值，但每个分量的值仅限于 8 位。
    ///</summary>
    ///  <param name="alpha">
    ///  Alpha 分量。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="red">
    ///  红色组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="green">
    ///  绿色的组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="blue">
    ///  蓝色组件。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  , <paramref name="red" />
    ///  , ，<paramref name="green" />
    ///  , ，或 <paramref name="blue" />
    ///  小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(alpha: Int32; red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.Color" />
    ///  从指定的结构 <see cref="T:System.Drawing.Color" />
    ///  结构，但要使用新指定的 alpha 值。
    ///  虽然此方法允许传递的 alpha 值为 32 位值，该值被限制为 8 位。
    ///</summary>
    ///  <param name="alpha">
    ///  新的 alpha 值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  有效值为 0 到 255 之间。
    ///</param>
    ///  <param name="baseColor">
    ///  从中创建新 <see cref="T:System.Drawing.Color" />
    ///  的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法创建的 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  为小于 0 或大于 255。
    ///</exception>
    {class} function FromArgb(alpha: Int32; baseColor: DNColor): DNColor; overload;

  { static propertys } 

    ///<summary>
    ///  获取系统定义的颜色。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Transparent: DNColor read get_Transparent;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0F8FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property AliceBlue: DNColor read get_AliceBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAEBD7。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Aqua: DNColor read get_Aqua;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7FFFD4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Aquamarine: DNColor read get_Aquamarine;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Azure: DNColor read get_Azure;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5F5DC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Beige: DNColor read get_Beige;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4C4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Bisque: DNColor read get_Bisque;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF000000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Black: DNColor read get_Black;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFEBCD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF0000FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Blue: DNColor read get_Blue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8A2BE2。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BlueViolet: DNColor read get_BlueViolet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA52A2A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Brown: DNColor read get_Brown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDEB887。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property BurlyWood: DNColor read get_BurlyWood;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF5F9EA0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property CadetBlue: DNColor read get_CadetBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7FFF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Chartreuse: DNColor read get_Chartreuse;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD2691E。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Chocolate: DNColor read get_Chocolate;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF7F50。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Coral: DNColor read get_Coral;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6495ED。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    ///<summary>
    ///  获取的 ARGB 值为系统定义的颜色 #FFFFF8DC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Cornsilk: DNColor read get_Cornsilk;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDC143C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Crimson: DNColor read get_Crimson;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Cyan: DNColor read get_Cyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00008B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkBlue: DNColor read get_DarkBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008B8B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkCyan: DNColor read get_DarkCyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB8860B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA9A9A9。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGray: DNColor read get_DarkGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF006400。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkGreen: DNColor read get_DarkGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBDB76B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B008B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF556B2F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF8C00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOrange: DNColor read get_DarkOrange;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9932CC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B0000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkRed: DNColor read get_DarkRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE9967A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8FBC8F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF483D8B。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF2F4F4F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00CED1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9400D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DarkViolet: DNColor read get_DarkViolet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF1493。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DeepPink: DNColor read get_DeepPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00BFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF696969。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DimGray: DNColor read get_DimGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF1E90FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB22222。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Firebrick: DNColor read get_Firebrick;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFAF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property FloralWhite: DNColor read get_FloralWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF228B22。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property ForestGreen: DNColor read get_ForestGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF00FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Fuchsia: DNColor read get_Fuchsia;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDCDCDC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Gainsboro: DNColor read get_Gainsboro;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF8F8FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property GhostWhite: DNColor read get_GhostWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFD700。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Gold: DNColor read get_Gold;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDAA520。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Goldenrod: DNColor read get_Goldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF808080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  结构，表示系统定义的颜色。
    ///</returns>
    {class} property Gray: DNColor read get_Gray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Green: DNColor read get_Green;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFADFF2F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property GreenYellow: DNColor read get_GreenYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0FFF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Honeydew: DNColor read get_Honeydew;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF69B4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property HotPink: DNColor read get_HotPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFCD5C5C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property IndianRed: DNColor read get_IndianRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4B0082。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Indigo: DNColor read get_Indigo;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFF0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Ivory: DNColor read get_Ivory;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF0E68C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Khaki: DNColor read get_Khaki;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE6E6FA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Lavender: DNColor read get_Lavender;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFF0F5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7CFC00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LawnGreen: DNColor read get_LawnGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFACD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    ///<summary>
    ///  获取具有 ARGB 值的系统定义的颜色#FFADD8E6。
    ///</summary>
    ///<returns>
    ///  A<see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightBlue: DNColor read get_LightBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF08080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightCoral: DNColor read get_LightCoral;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFE0FFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightCyan: DNColor read get_LightCyan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAFAD2。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF90EE90。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGreen: DNColor read get_LightGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD3D3D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightGray: DNColor read get_LightGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFB6C1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightPink: DNColor read get_LightPink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFA07A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSalmon: DNColor read get_LightSalmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF20B2AA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF87CEFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF778899。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB0C4DE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFE0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LightYellow: DNColor read get_LightYellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Lime: DNColor read get_Lime;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF32CD32。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property LimeGreen: DNColor read get_LimeGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFAF0E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Linen: DNColor read get_Linen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF00FF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Magenta: DNColor read get_Magenta;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF800000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Maroon: DNColor read get_Maroon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF66CDAA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF0000CD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumBlue: DNColor read get_MediumBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBA55D3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9370DB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumPurple: DNColor read get_MediumPurple;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF3CB371。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF7B68EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FA9A。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF48D1CC。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFC71585。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF191970。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5FFFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MintCream: DNColor read get_MintCream;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4E1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property MistyRose: DNColor read get_MistyRose;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFE4B5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Moccasin: DNColor read get_Moccasin;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFDEAD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF000080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Navy: DNColor read get_Navy;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFDF5E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OldLace: DNColor read get_OldLace;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF808000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Olive: DNColor read get_Olive;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6B8E23。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OliveDrab: DNColor read get_OliveDrab;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFA500。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Orange: DNColor read get_Orange;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF4500。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property OrangeRed: DNColor read get_OrangeRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDA70D6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Orchid: DNColor read get_Orchid;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFEEE8AA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF98FB98。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleGreen: DNColor read get_PaleGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFAFEEEE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDB7093。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFEFD5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFDAB9。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PeachPuff: DNColor read get_PeachPuff;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFCD853F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Peru: DNColor read get_Peru;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFC0CB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Pink: DNColor read get_Pink;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFDDA0DD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Plum: DNColor read get_Plum;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFB0E0E6。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property PowderBlue: DNColor read get_PowderBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF800080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Purple: DNColor read get_Purple;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF0000。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Red: DNColor read get_Red;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFBC8F8F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property RosyBrown: DNColor read get_RosyBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4169E1。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF8B4513。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFA8072。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Salmon: DNColor read get_Salmon;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF4A460。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SandyBrown: DNColor read get_SandyBrown;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF2E8B57。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SeaGreen: DNColor read get_SeaGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFF5EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SeaShell: DNColor read get_SeaShell;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFA0522D。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Sienna: DNColor read get_Sienna;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFC0C0C0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Silver: DNColor read get_Silver;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF87CEEB。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SkyBlue: DNColor read get_SkyBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF6A5ACD。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SlateBlue: DNColor read get_SlateBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF708090。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SlateGray: DNColor read get_SlateGray;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFAFA。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Snow: DNColor read get_Snow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF00FF7F。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SpringGreen: DNColor read get_SpringGreen;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF4682B4。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property SteelBlue: DNColor read get_SteelBlue;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD2B48C。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Tan: DNColor read get_Tan;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF008080。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Teal: DNColor read get_Teal;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFD8BFD8。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Thistle: DNColor read get_Thistle;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFF6347。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Tomato: DNColor read get_Tomato;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF40E0D0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Turquoise: DNColor read get_Turquoise;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFEE82EE。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Violet: DNColor read get_Violet;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5DEB3。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Wheat: DNColor read get_Wheat;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFFFF。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property White: DNColor read get_White;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFF5F5F5。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FFFFFF00。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property Yellow: DNColor read get_Yellow;
    ///<summary>
    ///  获取系统定义的颜色具有 ARGB 值 #FF9ACD32。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Color" />
    ///  表示系统定义的颜色。
    ///</returns>
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  ///<summary>
  ///  表示 alpha、 红色、 绿色 (蓝色） 的 ARGB 颜色。
  ///</summary>
  [DNTypeName('System.Drawing.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{173627B3-3CAB-3FF6-8CAB-93E849D6A8A5}']
  { getters & setters } 

    function get_R: Byte;
    function get_G: Byte;
    function get_B: Byte;
    function get_A: Byte;
    function get_IsKnownColor: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsNamedColor: Boolean;
    function get_IsSystemColor: Boolean;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  获取此的色调-饱和度-亮度 (HSB) 亮度值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此亮度 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  亮度范围介于 0.0 到 1.0，其中 0.0 表示黑，1.0 表示白。
    ///</returns>
    function GetBrightness: Single;
    ///<summary>
    ///  获取的色调-饱和度-亮度 (HSB) 色调值，以度为单位，此 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  色调以度为单位，此 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  色调以度为单位，范围介于 0.0 到 360.0，在 HSB 颜色空间中。
    ///</returns>
    function GetHue: Single;
    ///<summary>
    ///  获取此的色调-饱和度-亮度 (HSB) 饱和度值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此饱和度 <see cref="T:System.Drawing.Color" />
    ///  。
    ///  饱和度介于 0.0 到 1.0，其中 0.0 为灰度，1.0 表示最饱和。
    ///</returns>
    function GetSaturation: Single;
    ///<summary>
    ///  获取此的 32 位 ARGB 值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此 32 位 ARGB 值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    function ToArgb: Int32;
    ///<summary>
    ///  获取 <see cref="T:System.Drawing.KnownColor" />
    ///  此值的 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举中，如果 <see cref="T:System.Drawing.Color" />
    ///  通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 0。
    ///</returns>
    function ToKnownColor: DNKnownColor;
    ///<summary>
    ///  测试指定的对象是否为 <see cref="T:System.Drawing.Color" />
    ///  结构，并且等效于此 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Color" />
    ///  结构等效于此 <see cref="T:System.Drawing.Color" />
    ///  结构; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希代码 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.Color" />
    ///  用户可读的字符串的结构。
    ///</summary>
    ///<returns>
    ///  此名称的字符串 <see cref="T:System.Drawing.Color" />
    ///  , ，如果 <see cref="T:System.Drawing.Color" />
    ///  通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 ARGB 组件名称和它们的值组成的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的红色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property R: Byte read get_R;
    ///<summary>
    ///  获取此的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的绿色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property G: Byte read get_G;
    ///<summary>
    ///  获取此的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此的蓝色分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property B: Byte read get_B;
    ///<summary>
    ///  获取此的 alpha 分量值 <see cref="T:System.Drawing.Color" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  This 的 alpha 分量值 <see cref="T:System.Drawing.Color" />
    ///  。
    ///</returns>
    property A: Byte read get_A;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是预定义的颜色。
    ///  预定义的颜色表示的元素 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  已通过使用创建的预定义的颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsKnownColor: Boolean read get_IsKnownColor;
    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.Color" />
    ///  结构未初始化。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  该颜色是否未初始化; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是已命名的颜色或成员的 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  由使用 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNamedColor: Boolean read get_IsNamedColor;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.Color" />
    ///  结构是一种系统颜色。
    ///  系统颜色是一种 Windows 显示元素中使用的颜色。
    ///  系统颜色由元素的 <see cref="T:System.Drawing.KnownColor" />
    ///  枚举。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Drawing.Color" />
    ///  已通过使用创建的系统颜色 <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  方法或 <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSystemColor: Boolean read get_IsSystemColor;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Color" />
    ///  的名称。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Color" />
    ///  的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Drawing----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B23E3AA6-C68F-573E-8FD5-A8150E5D4997}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类的指定坐标。
    ///</summary>
    ///  <param name="x">
    ///  点的水平位置。
    ///</param>
    ///  <param name="y">
    ///  点的垂直位置。
    ///</param>
    {class} function init(x: Int32; y: Int32): DNPoint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</summary>
    ///  <param name="sz">
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  新指定的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    {class} function init(sz: DNSize): DNPoint; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Point" />
    ///  类使用的整数值所指定的坐标。
    ///</summary>
    ///  <param name="dw">
    ///  一个 32 位整数，它指定为新的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    {class} function init(dw: Int32): DNPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPoint;

  { static fields } 

    ///<summary>
    ///  表示 <see cref="T:System.Drawing.Point" />
    ///  具有 <see cref="P:System.Drawing.Point.X" />
    ///  和 <see cref="P:System.Drawing.Point.Y" />
    ///  值设置为零。
    ///</summary>
    {class} property Empty: DNPoint read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加指定 <see cref="T:System.Drawing.Size" />
    ///  到指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="pt">
    ///  要添加的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  添加
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  即加法运算的结果。
    ///</returns>
    {class} function Add(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>
    ///  返回的结果中减去指定 <see cref="T:System.Drawing.Size" />
    ///  从指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.Point" />
    ///  被减数。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  要从中减去 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  它是减法运算的结果。
    ///</returns>
    {class} function Subtract(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过舍入的值 <see cref="T:System.Drawing.PointF" />
    ///  到下一个较大的整数值。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Ceiling(value: DNPointF): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过截断的值 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Truncate(value: DNPointF): DNPoint;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.PointF" />
    ///  到 <see cref="T:System.Drawing.Point" />
    ///  通过舍入的对象 <see cref="T:System.Drawing.Point" />
    ///  值到最接近的整数。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  此方法将转换为。
    ///</returns>
    {class} function Round(value: DNPointF): DNPoint;

  end;

  ///<summary>
  ///  表示的整数 x 坐标和 y 坐标点定义在二维平面中的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{CD6CB0A8-D6EF-33E8-888E-FE8C78CA568F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.Point" />
    ///  包含与指定相同的坐标 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Point" />
    ///  并且具有与此相同的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  按指定量平移此 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="dx">
    ///  x 坐标的偏移量。
    ///</param>
    ///  <param name="dy">
    ///  y 坐标的偏移量。
    ///</param>
    procedure Offset(dx: Int32; dy: Int32); overload;
    ///<summary>
    ///  会将其转换 <see cref="T:System.Drawing.Point" />
    ///  由指定 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///  <param name="p"><see cref="T:System.Drawing.Point" />
    ///  使用偏移量这 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    procedure Offset(p: DNPoint); overload;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.Point" />
    ///  到用户可读字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Point" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.Point" />
    ///  是否为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="P:System.Drawing.Point.X" />
    ///  和 <see cref="P:System.Drawing.Point.Y" />
    ///  0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此的 x 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 x 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取或设置此的 y 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 y 坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Drawing----------------
  DNPointFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68F24B46-D3A6-59B7-BF29-00901DF2B211}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.PointF" />
    ///  类的指定坐标。
    ///</summary>
    ///  <param name="x">
    ///  点的水平位置。
    ///</param>
    ///  <param name="y">
    ///  点的垂直位置。
    ///</param>
    {class} function init(x: Single; y: Single): DNPointF;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPointF;

  { static fields } 

    ///<summary>
    ///  表示的新实例 <see cref="T:System.Drawing.PointF" />
    ///  类的成员数据未被初始化。
    ///</summary>
    {class} property Empty: DNPointF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  将转换给定 <see cref="T:System.Drawing.PointF" />
    ///  由指定 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  ，它指定要添加到的坐标的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Add(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.PointF" />
    ///  按指定大小的负值。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.Size" />
    ///  ，它指定要从中的坐标减去的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>
    ///  将转换给定 <see cref="T:System.Drawing.PointF" />
    ///  由指定 <see cref="T:System.Drawing.SizeF" />
    ///  。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.SizeF" />
    ///  ，它指定要添加到的坐标的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Add(pt: DNPointF; sz: DNSizeF): DNPointF; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.PointF" />
    ///  按指定大小的负值。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  转换。
    ///</param>
    ///  <param name="sz"><see cref="T:System.Drawing.SizeF" />
    ///  ，它指定要从中的坐标减去的数字 <paramref name="pt" />
    ///  。
    ///</param>
    ///<returns>
    ///  经过平移 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSizeF): DNPointF; overload;

  end;

  ///<summary>
  ///  表示的浮点 x 坐标和 y 坐标点定义在二维平面中的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.PointF')]
  DNPointF = interface(DDN.mscorlib.DNValueType)
  ['{A521101D-A776-3125-B530-67030F2E0A21}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);

  { methods } 

    ///<summary>
    ///  指定是否这 <see cref="T:System.Drawing.PointF" />
    ///  包含与指定相同的坐标 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.PointF" />
    ///  并且具有与此相同的坐标 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此转换 <see cref="T:System.Drawing.PointF" />
    ///  到可读字符串。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.PointF" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示此 <see cref="T:System.Drawing.PointF" />
    ///  是否为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="P:System.Drawing.PointF.X" />
    ///  和 <see cref="P:System.Drawing.PointF.Y" />
    ///  0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此的 x 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 x 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  获取或设置此的 y 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此的 y 坐标 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</returns>
    property Y: Single read get_Y write set_Y;
  end;

  TDNPointF = class(TDNGenericImport<DNPointFClass, DNPointF>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{24950A89-FDF4-51EA-80AD-37BF2A502082}']
  { constructors } 

    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.Rectangle" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="x">
    ///  矩形左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  矩形左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  矩形的高度。
    ///</param>
    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNRectangle; overload;
    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.Rectangle" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="location"><see cref="T:System.Drawing.Point" />
    ///  ，它表示矩形区域的左上角。
    ///</param>
    ///  <param name="size"><see cref="T:System.Drawing.Size" />
    ///  ，它表示矩形区域的宽度和高度。
    ///</param>
    {class} function init(location: DNPoint; size: DNSize): DNRectangle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    ///<summary>
    ///  表示其属性未被初始化的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建一个具有指定边缘位置的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="left">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///</param>
    ///  <param name="top">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///</param>
    ///  <param name="right">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构右下角的 x 坐标。
    ///</param>
    ///  <param name="bottom">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构右下角的 y 坐标。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function FromLTRB(left: Int32; top: Int32; right: Int32; bottom: Int32): DNRectangle;
    ///<summary>
    ///  通过截断 <see cref="T:System.Drawing.RectangleF" />
    ///  值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Rectangle" />
    ///  的截断值。
    ///</returns>
    {class} function Truncate(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  返回第三个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，它表示其他两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集。
    ///  如果没有重叠，将返回空的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="a">
    ///  要相交的矩形。
    ///</param>
    ///  <param name="b">
    ///  要相交的矩形。
    ///</param>
    ///<returns>
    ///  表示 <paramref name="a" />
    ///  和 <paramref name="b" />
    ///  的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Intersect(a: DNRectangle; b: DNRectangle): DNRectangle; overload;
    ///<summary>
    ///  获取包含两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="a">
    ///  要合并的矩形。
    ///</param>
    ///  <param name="b">
    ///  要合并的矩形。
    ///</param>
    ///<returns>
    ///  包含两个 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的交集的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</returns>
    {class} function Union(a: DNRectangle; b: DNRectangle): DNRectangle;
    ///<summary>
    ///  通过将 <see cref="T:System.Drawing.RectangleF" />
    ///  值舍入到比它大的相邻整数值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Ceiling(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  通过将 <see cref="T:System.Drawing.RectangleF" />
    ///  舍入到最近的整数值，将指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  转换为 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Rectangle" />
    ///  的四舍五入整数值。
    ///</returns>
    {class} function Round(value: DNRectangleF): DNRectangle;
    ///<summary>
    ///  创建并返回指定 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的放大副本。
    ///  该副本被放大指定的量。
    ///  不修改原始 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="rect">
    ///  要从其开始操作的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///  不修改此矩形。
    ///</param>
    ///  <param name="x">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的水平放大量。
    ///</param>
    ///  <param name="y">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的垂直放大量。
    ///</param>
    ///<returns>
    ///  放大的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</returns>
    {class} function Inflate(rect: DNRectangle; x: Int32; y: Int32): DNRectangle; overload;

  end;

  ///<summary>
  ///  存储一组整数，共四个，表示一个矩形的位置和大小
  ///</summary>
  [DNTypeName('System.Drawing.Rectangle')]
  DNRectangle = interface(DDN.mscorlib.DNValueType)
  ['{548BBB02-5F3C-35FB-A75F-1FBD3D0D3584}']
  { getters & setters } 

    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Left: Int32;
    function get_Top: Int32;
    function get_Right: Int32;
    function get_Bottom: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  定义的点包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(x: Int32; y: Int32): Boolean; overload;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="pt">
    ///  要测试的 <see cref="T:System.Drawing.Point" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="pt" />
    ///  表示的点包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(pt: DNPoint): Boolean; overload;
    ///<summary>
    ///  确定 <paramref name="rect" />
    ///  表示的矩形区域是否完全包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="rect" />
    ///  表示的矩形区域完全包含在此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构内，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(rect: DNRectangle): Boolean; overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="width">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的水平放大量。
    ///</param>
    ///  <param name="height">
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的垂直放大量。
    ///</param>
    procedure Inflate(width: Int32; height: Int32); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  替换为其自身与指定 <see cref="T:System.Drawing.Rectangle" />
    ///  的交集。
    ///</summary>
    ///  <param name="rect">
    ///  用其进行相交操作的 <see cref="T:System.Drawing.Rectangle" />
    ///  。
    ///</param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>
    ///  确定此矩形是否与 <paramref name="rect" />
    ///  相交。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的矩形。
    ///</param>
    ///<returns>
    ///  如果有重叠，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function IntersectsWith(rect: DNRectangle): Boolean;
    ///<summary>
    ///  测试 <paramref name="obj" />
    ///  是否为与此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构具有相同位置和大小的 <see cref="T:System.Drawing.Rectangle" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Rectangle" />
    ///  结构，并且其 <see cref="P:System.Drawing.Rectangle.X" />
    ///  、<see cref="P:System.Drawing.Rectangle.Y" />
    ///  、<see cref="P:System.Drawing.Rectangle.Width" />
    ///  和 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  属性与此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的对应属性相等，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的哈希代码。
    ///  有关如何使用哈希代码的信息，请参见 <see cref="M:System.Object.GetHashCode" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个整数，表示此矩形的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="size">
    ///  此矩形的放大量。
    ///</param>
    procedure Inflate(size: DNSize); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="pos">
    ///  该位置的偏移量。
    ///</param>
    procedure Offset(pos: DNPoint); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="x">
    ///  水平偏移量。
    ///</param>
    ///  <param name="y">
    ///  垂直偏移量。
    ///</param>
    procedure Offset(x: Int32; y: Int32); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.Rectangle" />
    ///  的特性转换为可读字符串。
    ///</summary>
    ///<returns>
    ///  一个包含此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构 ¾ 的位置、宽度和高度的字符串，例如 {X=20, Y=20, Width=100, Height=50}
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的坐标。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Point" />
    ///  ，它表示此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的左上角。
    ///</returns>
    property Location: DNPoint read get_Location write set_Location;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  ，它表示此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度和高度。
    ///</returns>
    property Size: DNSize read get_Size write set_Size;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 x 坐标。
    ///  默认值为 0。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左上角的 y 坐标。
    ///  默认值为 0。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的宽度。
    ///  默认值为 0。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的高度。
    ///  默认值为 0。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左边缘的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构左边缘的 x 坐标。
    ///</returns>
    property Left: Int32 read get_Left;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构上边缘的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构上边缘的 y 坐标。
    ///</returns>
    property Top: Int32 read get_Top;
    ///<summary>
    ///  获取 x 坐标，该坐标是此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的 <see cref="P:System.Drawing.Rectangle.X" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  属性值之和。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.X" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  之和的 x 坐标。
    ///</returns>
    property Right: Int32 read get_Right;
    ///<summary>
    ///  获取 y 坐标，该坐标是此 <see cref="T:System.Drawing.Rectangle" />
    ///  结构的 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  属性值之和。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  与 <see cref="P:System.Drawing.Rectangle.Height" />
    ///  之和的 y 坐标。
    ///</returns>
    property Bottom: Int32 read get_Bottom;
    ///<summary>
    ///  测试此 <see cref="T:System.Drawing.Rectangle" />
    ///  的所有数值属性是否都具有零值。
    ///</summary>
    ///<returns>
    ///  如果此 <see cref="T:System.Drawing.Rectangle" />
    ///  的 <see cref="P:System.Drawing.Rectangle.Width" />
    ///  、<see cref="P:System.Drawing.Rectangle.Height" />
    ///  、<see cref="P:System.Drawing.Rectangle.X" />
    ///  和 <see cref="P:System.Drawing.Rectangle.Y" />
    ///  属性都具有零值，此属性将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{93812BD6-FBF9-555C-B730-A20DE51F8701}']
  { constructors } 

    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.RectangleF" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="x">
    ///  矩形左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  矩形左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  矩形的高度。
    ///</param>
    {class} function init(x: Single; y: Single; width: Single; height: Single): DNRectangleF; overload;
    ///<summary>
    ///  用指定的位置和大小初始化 <see cref="T:System.Drawing.RectangleF" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="location"><see cref="T:System.Drawing.PointF" />
    ///  ，它表示矩形区域的左上角。
    ///</param>
    ///  <param name="size"><see cref="T:System.Drawing.SizeF" />
    ///  ，它表示矩形区域的宽度和高度。
    ///</param>
    {class} function init(location: DNPointF; size: DNSizeF): DNRectangleF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangleF;

  { static fields } 

    ///<summary>
    ///  表示实例 <see cref="T:System.Drawing.RectangleF" />
    ///  未初始化其成员的类。
    ///</summary>
    {class} property Empty: DNRectangleF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  创建可以包含两个形成并集的两个矩形的最小可能第三个矩形。
    ///</summary>
    ///  <param name="a">
    ///  要合并的矩形。
    ///</param>
    ///  <param name="b">
    ///  要合并的矩形。
    ///</param>
    ///<returns>
    ///  第三个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，其中包含这两个形成并集的两个矩形。
    ///</returns>
    {class} function Union(a: DNRectangleF; b: DNRectangleF): DNRectangleF;
    ///<summary>
    ///  创建 <see cref="T:System.Drawing.RectangleF" />
    ///  结构具有窗口左上角和右下角位于指定位置。
    ///</summary>
    ///  <param name="left">
    ///  该矩形区域的左上角 x 坐标。
    ///</param>
    ///  <param name="top">
    ///  该矩形区域的左上角 y 坐标。
    ///</param>
    ///  <param name="right">
    ///  该矩形区域的右下角 x 坐标。
    ///</param>
    ///  <param name="bottom">
    ///  该矩形区域的右下角 y 坐标。
    ///</param>
    ///<returns>
    ///  此方法创建的新 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</returns>
    {class} function FromLTRB(left: Single; top: Single; right: Single; bottom: Single): DNRectangleF;
    ///<summary>
    ///  创建并返回指定 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的放大副本。
    ///  该副本被放大指定量并不修改原始矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要复制的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///  不修改此矩形。
    ///</param>
    ///  <param name="x">
    ///  水平副本的矩形的放大量。
    ///</param>
    ///  <param name="y">
    ///  副本的矩形垂直放大量。
    ///</param>
    ///<returns>
    ///  放大的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</returns>
    {class} function Inflate(rect: DNRectangleF; x: Single; y: Single): DNRectangleF; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Drawing.RectangleF" />
    ///  结构，它表示两个矩形交集。
    ///  如果没有重叠和空 <see cref="T:System.Drawing.RectangleF" />
    ///  返回。
    ///</summary>
    ///  <param name="a">
    ///  要相交的矩形。
    ///</param>
    ///  <param name="b">
    ///  要相交的矩形。
    ///</param>
    ///<returns>
    ///  第三个 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的大小表示两个指定的矩形的重叠的区域。
    ///</returns>
    {class} function Intersect(a: DNRectangleF; b: DNRectangleF): DNRectangleF; overload;

  end;

  ///<summary>
  ///  存储一组表示位置的四个浮点数字和矩形的大小。
  ///  对于更高级的区域函数，请使用 <see cref="T:System.Drawing.Region" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Drawing.RectangleF')]
  DNRectangleF = interface(DDN.mscorlib.DNValueType)
  ['{A5567232-D740-3F7B-BBC9-D2F5B3EB90CB}']
  { getters & setters } 

    function get_Location: DNPointF;
    procedure set_Location(value: DNPointF);
    function get_Size: DNSizeF;
    procedure set_Size(value: DNSizeF);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Left: Single;
    function get_Top: Single;
    function get_Right: Single;
    function get_Bottom: Single;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  这将放大 <see cref="T:System.Drawing.RectangleF" />
    ///  结构指定的量。
    ///</summary>
    ///  <param name="x">
    ///  这样的放大量 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的水平。
    ///</param>
    ///  <param name="y">
    ///  这样的放大量 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的垂直。
    ///</param>
    procedure Inflate(x: Single; y: Single); overload;
    ///<summary>
    ///  测试是否 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.RectangleF" />
    ///  具有相同的位置和大小的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.RectangleF" />
    ///  并将其 <see langword="X" />
    ///  , ，<see langword="Y" />
    ///  , ，<see langword="Width" />
    ///  , ，和 <see langword="Height" />
    ///  的对应属性相等 <see cref="T:System.Drawing.RectangleF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="x">
    ///  要测试的点的 X 坐标。
    ///</param>
    ///  <param name="y">
    ///  要测试的点的 Y 坐标。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="x" />
    ///  和 <paramref name="y" />
    ///  定义的点包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构中，此方法将返回 <see langword="true" />
    ///  ；否则将返回 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(x: Single; y: Single): Boolean; overload;
    ///<summary>
    ///  确定指定的点是否包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="pt">
    ///  要测试的 <see cref="T:System.Drawing.PointF" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果表示的点 <paramref name="pt" />
    ///  参数包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(pt: DNPointF): Boolean; overload;
    ///<summary>
    ///  确定 <paramref name="rect" />
    ///  表示的矩形区域是否完全包含在此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构内。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的 <see cref="T:System.Drawing.RectangleF" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果表示矩形区域 <paramref name="rect" />
    ///  所表示的矩形区域范围内完全包含 <see cref="T:System.Drawing.RectangleF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(rect: DNRectangleF): Boolean; overload;
    ///<summary>
    ///  获取此哈希代码 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///  有关使用哈希代码的信息，请参阅 <see langword="Object.GetHashCode" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.RectangleF" />
    ///  放大指定量。
    ///</summary>
    ///  <param name="size">
    ///  此矩形的放大量。
    ///</param>
    procedure Inflate(size: DNSizeF); overload;
    ///<summary>
    ///  将此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构替换为其自身与指定的 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的交集。
    ///</summary>
    ///  <param name="rect">
    ///  要相交的矩形。
    ///</param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>
    ///  确定此矩形是否与 <paramref name="rect" />
    ///  相交。
    ///</summary>
    ///  <param name="rect">
    ///  要测试的矩形。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果重叠。
    ///</returns>
    function IntersectsWith(rect: DNRectangleF): Boolean;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="pos">
    ///  该位置的偏移量。
    ///</param>
    procedure Offset(pos: DNPointF); overload;
    ///<summary>
    ///  将此矩形的位置调整指定的量。
    ///</summary>
    ///  <param name="x">
    ///  该位置的水平偏移量。
    ///</param>
    ///  <param name="y">
    ///  该位置的垂直偏移量。
    ///</param>
    procedure Offset(x: Single; y: Single); overload;
    ///<summary>
    ///  将转换 <see langword="Location" />
    ///  和 <see cref="T:System.Drawing.Size" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  到用户可读字符串。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含位置、 宽度和高度这 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///  例如，"{X = 20，Y = 20，Width = 100，Height = 50}"。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的坐标。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.PointF" />
    ///  ，它表示此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的左上角。
    ///</returns>
    property Location: DNPointF read get_Location write set_Location;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  的大小。
    ///</summary>
    ///<returns><see cref="T:System.Drawing.SizeF" />
    ///  ，它表示此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度和高度。
    ///</returns>
    property Size: DNSizeF read get_Size write set_Size;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 x 坐标。
    ///  默认值为 0。
    ///</returns>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左上角的 y 坐标。
    ///  默认值为 0。
    ///</returns>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的宽度。
    ///  默认值为 0。
    ///</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的高度。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构的高度。
    ///  默认值为 0。
    ///</returns>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左边缘的 x 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构左边缘的 x 坐标。
    ///</returns>
    property Left: Single read get_Left;
    ///<summary>
    ///  获取此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构上边缘的 y 坐标。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构上边缘的 y 坐标。
    ///</returns>
    property Top: Single read get_Top;
    ///<summary>
    ///  获取是之和的 x 坐标 <see cref="P:System.Drawing.RectangleF.X" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  之和的 x 坐标 <see cref="P:System.Drawing.RectangleF.X" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</returns>
    property Right: Single read get_Right;
    ///<summary>
    ///  获取是之和的 y 坐标 <see cref="P:System.Drawing.RectangleF.Y" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  之和的 y 坐标 <see cref="P:System.Drawing.RectangleF.Y" />
    ///  和 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  此 <see cref="T:System.Drawing.RectangleF" />
    ///  结构。
    ///</returns>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  测试是否 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  或 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  属性 <see cref="T:System.Drawing.RectangleF" />
    ///  值为零。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  如果 <see cref="P:System.Drawing.RectangleF.Width" />
    ///  或 <see cref="P:System.Drawing.RectangleF.Height" />
    ///  属性 <see cref="T:System.Drawing.RectangleF" />
    ///  值为零; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangleF = class(TDNGenericImport<DNRectangleFClass, DNRectangleF>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{156B7BC2-8B4A-54A9-9F29-1BBCFEFCB428}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Size" />
    ///  从指定的结构 <see cref="T:System.Drawing.Point" />
    ///  结构。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.Point" />
    ///  结构，可用于初始化此 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</param>
    {class} function init(pt: DNPoint): DNSize; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.Size" />
    ///  根据指定的维度的结构。
    ///</summary>
    ///  <param name="width">
    ///  新的宽度分量 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  新的高度分量 <see cref="T:System.Drawing.Size" />
    ///  。
    ///</param>
    {class} function init(width: Int32; height: Int32): DNSize; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSize;

  { static fields } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.Size" />
    ///  结构具有 <see cref="P:System.Drawing.Size.Height" />
    ///  和 <see cref="P:System.Drawing.Size.Width" />
    ///  值为 0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  具有 <see cref="P:System.Drawing.Size.Height" />
    ///  和 <see cref="P:System.Drawing.Size.Width" />
    ///  值为 0。
    ///</returns>
    {class} property Empty: DNSize read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加的宽度和高度的其中一个 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度与另一个 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1">
    ///  第一个 <see cref="T:System.Drawing.Size" />
    ///  可添加结构。
    ///</param>
    ///  <param name="sz2">
    ///  第二个 <see cref="T:System.Drawing.Size" />
    ///  可添加结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它是加法运算的结果。
    ///</returns>
    {class} function Add(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  按舍入的值显示结构 <see cref="T:System.Drawing.Size" />
    ///  到下一个较大的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Ceiling(value: DNSizeF): DNSize;
    ///<summary>
    ///  减去的宽度和高度的其中一个 <see cref="T:System.Drawing.Size" />
    ///  从宽度和高度与另一个结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1"><see cref="T:System.Drawing.Size" />
    ///  减法运算符左侧的结构。
    ///</param>
    ///  <param name="sz2"><see cref="T:System.Drawing.Size" />
    ///  减法运算符右侧的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.Size" />
    ///  结构，它是减法运算的结果。
    ///</returns>
    {class} function Subtract(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  通过截断的值的结构 <see cref="T:System.Drawing.SizeF" />
    ///  到下一个较低的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Truncate(value: DNSizeF): DNSize;
    ///<summary>
    ///  将指定 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  按舍入的值显示结构 <see cref="T:System.Drawing.SizeF" />
    ///  到最接近的整数值的结构。
    ///</summary>
    ///  <param name="value"><see cref="T:System.Drawing.SizeF" />
    ///  要转换的结构。
    ///</param>
    ///<returns><see cref="T:System.Drawing.Size" />
    ///  此方法将转换为结构。
    ///</returns>
    {class} function Round(value: DNSizeF): DNSize;

  end;

  ///<summary>
  ///  存储的整数，指定一个有序的对 <see cref="P:System.Drawing.Size.Height" />
  ///  和 <see cref="P:System.Drawing.Size.Width" />
  ///  。
  ///</summary>
  [DNTypeName('System.Drawing.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{ECD5EB7F-1CD0-3F82-9997-5E4C9AB9F326}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);

  { methods } 

    ///<summary>
    ///  测试以确定指定的对象是否为 <see cref="T:System.Drawing.Size" />
    ///  具有与此相同的维度的结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.Size" />
    ///  具有相同的宽度和高度与此 <see cref="T:System.Drawing.Size" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建一个用户可读的字符串，表示此 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  表示此 <see cref="T:System.Drawing.Size" />
    ///  的字符串。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  测试是否这 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度均为 0。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  时这 <see cref="T:System.Drawing.Size" />
    ///  结构的宽度和高度均为 0; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置此水平组件<see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此水平组件<see cref="T:System.Drawing.Size" />
    ///  结构，通常以像素度量。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的垂直分量 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  垂直分量 <see cref="T:System.Drawing.Size" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{889E69F7-7C5F-5D31-9A96-7A897B044864}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  从指定的现有结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="size"><see cref="T:System.Drawing.SizeF" />
    ///  从中创建新的结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(size: DNSizeF): DNSizeF; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  从指定的结构 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///  <param name="pt"><see cref="T:System.Drawing.PointF" />
    ///  结构，可用于初始化此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(pt: DNPointF): DNSizeF; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Drawing.SizeF" />
    ///  根据指定的维度的结构。
    ///</summary>
    ///  <param name="width">
    ///  新的宽度分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    ///  <param name="height">
    ///  新的高度分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</param>
    {class} function init(width: Single; height: Single): DNSizeF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSizeF;

  { static fields } 

    ///<summary>
    ///  获取 <see cref="T:System.Drawing.SizeF" />
    ///  结构具有 <see cref="P:System.Drawing.SizeF.Height" />
    ///  和 <see cref="P:System.Drawing.SizeF.Width" />
    ///  值为 0。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构具有 <see cref="P:System.Drawing.SizeF.Height" />
    ///  和 <see cref="P:System.Drawing.SizeF.Width" />
    ///  值为 0。
    ///</returns>
    {class} property Empty: DNSizeF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  添加的宽度和高度的其中一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构的宽度和高度与另一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1">
    ///  第一个 <see cref="T:System.Drawing.SizeF" />
    ///  可添加结构。
    ///</param>
    ///  <param name="sz2">
    ///  第二个 <see cref="T:System.Drawing.SizeF" />
    ///  可添加结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构，它是加法运算的结果。
    ///</returns>
    {class} function Add(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;
    ///<summary>
    ///  减去的宽度和高度的其中一个 <see cref="T:System.Drawing.SizeF" />
    ///  从宽度和高度与另一个结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="sz1"><see cref="T:System.Drawing.SizeF" />
    ///  减法运算符左侧的结构。
    ///</param>
    ///  <param name="sz2"><see cref="T:System.Drawing.SizeF" />
    ///  减法运算符右侧的结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Drawing.SizeF" />
    ///  结构，它是减法运算的结果。
    ///</returns>
    {class} function Subtract(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;

  end;

  ///<summary>
  ///  将存储浮点数、 通常的宽度和高度的矩形的有序的对。
  ///</summary>
  [DNTypeName('System.Drawing.SizeF')]
  DNSizeF = interface(DDN.mscorlib.DNValueType)
  ['{56ABB41C-4516-30F6-882E-57F234AB5028}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);

  { methods } 

    ///<summary>
    ///  测试以确定指定的对象是否为 <see cref="T:System.Drawing.SizeF" />
    ///  具有与此相同的维度的结构 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///  <param name="obj">
    ///  要测试的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns>
    ///  此方法返回 <see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  是 <see cref="T:System.Drawing.SizeF" />
    ///  具有相同的宽度和高度与此 <see cref="T:System.Drawing.SizeF" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个整数值，指定此哈希值 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.PointF" />
    ///  结构。
    ///</returns>
    function ToPointF: DNPointF;
    ///<summary>
    ///  将转换 <see cref="T:System.Drawing.SizeF" />
    ///  结构 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Drawing.Size" />
    ///  结构。
    ///</returns>
    function ToSize: DNSize;
    ///<summary>
    ///  创建一个用户可读的字符串，表示此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示此 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Drawing.SizeF" />
    ///  结构的零宽度和高度。
    ///</summary>
    ///<returns>
    ///  此属性返回 <see langword="true" />
    ///  时这 <see cref="T:System.Drawing.SizeF" />
    ///  结构的宽度和高度均为零; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置的水平分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  水平分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  获取或设置的垂直分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  垂直分量 <see cref="T:System.Drawing.SizeF" />
    ///  结构，通常以像素为单位进行度量。
    ///</returns>
    property Height: Single read get_Height write set_Height;
  end;

  TDNSizeF = class(TDNGenericImport<DNSizeFClass, DNSizeF>) end;


implementation


initialization
  LoadAssemblyModule('System.Drawing.dll', True);

finalization

end.
