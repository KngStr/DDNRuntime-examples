//----------------------------------------------------------------------------
//  System.Threading.Thread.dll: System.Threading.Thread, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Threading.Thread
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Threading.Thread;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Security.Principal,
  DDNC.System.Runtime.Extensions;

type


{ declares }

  DNThreadExceptionEventArgs = interface; // type: System.Threading.ThreadExceptionEventArgs, namespace: System.Threading
  DNLocalDataStoreSlot = interface; // type: System.LocalDataStoreSlot, namespace: System
  DNThread = interface; // type: System.Threading.Thread, namespace: System.Threading
  DNCompressedStack = interface; // type: System.Threading.CompressedStack, namespace: System.Threading

{ delegates }

  [DNTypeName('System.Threading.ThreadExceptionEventHandler')]
  DNThreadExceptionEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNThreadExceptionEventArgs) of object;




{ objects }

  //-------------namespace: System.Threading----------------
  DNThreadExceptionEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{C8E4E70F-83F2-58F2-981B-8796D5F79EDA}']
  { constructors } 

    {class} function init(t: DDNC.System.Private.CoreLib.DNException): DNThreadExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.ThreadExceptionEventArgs')]
  DNThreadExceptionEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{E4A57F9E-6C95-364E-9DA7-39BAC4169BFC}']
  { getters & setters } 

    function get_Exception: DDNC.System.Private.CoreLib.DNException;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Exception: DDNC.System.Private.CoreLib.DNException read get_Exception;
  end;

  TDNThreadExceptionEventArgs = class(TDNGenericImport<DNThreadExceptionEventArgsClass, DNThreadExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNLocalDataStoreSlotClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2D9AED23-ECFE-5050-8452-602A665999BC}']
  end;

  [DNTypeName('System.LocalDataStoreSlot')]
  DNLocalDataStoreSlot = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F9ED3C4D-E981-317D-A4D9-3E38E35D1CCE}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNLocalDataStoreSlot = class(TDNGenericImport<DNLocalDataStoreSlotClass, DNLocalDataStoreSlot>) end;

  //-------------namespace: System.Threading----------------
  DNThreadClass = interface(DDNC.System.Private.CoreLib.DNCriticalFinalizerObjectClass)
  ['{7A0D6B94-772C-5DD7-9E4B-433B22A35F22}']
  { static getter & setter } 

    {class} function get_CurrentThread: DNThread;
    {class} function get_CurrentPrincipal: DDNC.System.Security.Principal.DNIPrincipal;
    {class} procedure set_CurrentPrincipal(value: DDNC.System.Security.Principal.DNIPrincipal);

  { constructors } 

    {class} function init(start: DDNC.System.Private.CoreLib.DNThreadStart): DNThread; overload;
    {class} function init(start: DDNC.System.Private.CoreLib.DNThreadStart; maxStackSize: Int32): DNThread; overload;
    {class} function init(start: DDNC.System.Private.CoreLib.DNParameterizedThreadStart): DNThread; overload;
    {class} function init(start: DDNC.System.Private.CoreLib.DNParameterizedThreadStart; maxStackSize: Int32): DNThread; overload;

  { static methods } 

    {class} procedure ResetAbort;
    {class} procedure BeginCriticalRegion;
    {class} procedure EndCriticalRegion;
    {class} procedure BeginThreadAffinity;
    {class} procedure EndThreadAffinity;
    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} procedure FreeNamedDataSlot(name: string);
    {class} function GetData(slot: DNLocalDataStoreSlot): DDNC.System.Private.CoreLib.DNObject;
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DDNC.System.Private.CoreLib.DNObject);
    {class} function GetCurrentProcessorId: Int32;
    {class} function GetDomain: DDNC.System.Runtime.Extensions.DNAppDomain;
    {class} function GetDomainID: Int32;
    {class} procedure MemoryBarrier;
    {class} procedure Sleep(millisecondsTimeout: Int32); overload;
    {class} procedure Sleep(timeout: DDNC.System.Private.CoreLib.DNTimeSpan); overload;
    {class} procedure SpinWait(iterations: Int32);
    {class} function Yield: Boolean;
    {class} function VolatileRead(out address: Byte): Byte; overload;
    {class} function VolatileRead(out address: Double): Double; overload;
    {class} function VolatileRead(out address: Int16): Int16; overload;
    {class} function VolatileRead(out address: Int32): Int32; overload;
    {class} function VolatileRead(out address: Int64): Int64; overload;
    {class} function VolatileRead(out address: IntPtr): IntPtr; overload;
    {class} function VolatileRead(out address: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function VolatileRead(out address: SByte): SByte; overload;
    {class} function VolatileRead(out address: Single): Single; overload;
    {class} function VolatileRead(out address: UInt16): UInt16; overload;
    {class} function VolatileRead(out address: UInt32): UInt32; overload;
    {class} function VolatileRead(out address: UInt64): UInt64; overload;
    {class} function VolatileRead(out address: UIntPtr): UIntPtr; overload;
    {class} procedure VolatileWrite(out address: Byte; value: Byte); overload;
    {class} procedure VolatileWrite(out address: Double; value: Double); overload;
    {class} procedure VolatileWrite(out address: Int16; value: Int16); overload;
    {class} procedure VolatileWrite(out address: Int32; value: Int32); overload;
    {class} procedure VolatileWrite(out address: Int64; value: Int64); overload;
    {class} procedure VolatileWrite(out address: IntPtr; value: IntPtr); overload;
    {class} procedure VolatileWrite(out address: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure VolatileWrite(out address: SByte; value: SByte); overload;
    {class} procedure VolatileWrite(out address: Single; value: Single); overload;
    {class} procedure VolatileWrite(out address: UInt16; value: UInt16); overload;
    {class} procedure VolatileWrite(out address: UInt32; value: UInt32); overload;
    {class} procedure VolatileWrite(out address: UInt64; value: UInt64); overload;
    {class} procedure VolatileWrite(out address: UIntPtr; value: UIntPtr); overload;

  { static propertys } 

    {class} property CurrentThread: DNThread read get_CurrentThread;
    {class} property CurrentPrincipal: DDNC.System.Security.Principal.DNIPrincipal read get_CurrentPrincipal write set_CurrentPrincipal;
  end;

  [DNTypeName('System.Threading.Thread')]
  DNThread = interface(DDNC.System.Private.CoreLib.DNCriticalFinalizerObject)
  ['{79069F42-1297-3355-B36D-F0C3A766AECD}']
  { getters & setters } 

    function get_CurrentCulture: DDNC.System.Private.CoreLib.DNCultureInfo;
    procedure set_CurrentCulture(value: DDNC.System.Private.CoreLib.DNCultureInfo);
    function get_CurrentUICulture: DDNC.System.Private.CoreLib.DNCultureInfo;
    procedure set_CurrentUICulture(value: DDNC.System.Private.CoreLib.DNCultureInfo);
    function get_ExecutionContext: DDNC.System.Private.CoreLib.DNExecutionContext;
    function get_IsAlive: Boolean;
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_IsThreadPoolThread: Boolean;
    function get_ManagedThreadId: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Priority: DDNC.System.Private.CoreLib.DNThreadPriority;
    procedure set_Priority(value: DDNC.System.Private.CoreLib.DNThreadPriority);
    function get_ThreadState: DDNC.System.Private.CoreLib.DNThreadState;
    function get_ApartmentState: DDNC.System.Private.CoreLib.DNApartmentState;
    procedure set_ApartmentState(value: DDNC.System.Private.CoreLib.DNApartmentState);

  { methods } 

    procedure &Abort; overload;
    procedure &Abort(stateInfo: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Suspend;
    procedure Resume;
    procedure SetApartmentState(state: DDNC.System.Private.CoreLib.DNApartmentState);
    function TrySetApartmentState(state: DDNC.System.Private.CoreLib.DNApartmentState): Boolean;
    function GetCompressedStack: DNCompressedStack;
    procedure SetCompressedStack(stack: DNCompressedStack);
    function GetHashCode: Int32;
    procedure Interrupt;
    procedure Join; overload;
    function Join(millisecondsTimeout: Int32): Boolean; overload;
    function Join(timeout: DDNC.System.Private.CoreLib.DNTimeSpan): Boolean; overload;
    procedure Start; overload;
    procedure Start(parameter: DDNC.System.Private.CoreLib.DNObject); overload;
    function GetApartmentState: DDNC.System.Private.CoreLib.DNApartmentState;
    procedure DisableComObjectEagerCleanup;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property CurrentCulture: DDNC.System.Private.CoreLib.DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    property CurrentUICulture: DDNC.System.Private.CoreLib.DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    property ExecutionContext: DDNC.System.Private.CoreLib.DNExecutionContext read get_ExecutionContext;
    property IsAlive: Boolean read get_IsAlive;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    property IsThreadPoolThread: Boolean read get_IsThreadPoolThread;
    property ManagedThreadId: Int32 read get_ManagedThreadId;
    property Name: string read get_Name write set_Name;
    property Priority: DDNC.System.Private.CoreLib.DNThreadPriority read get_Priority write set_Priority;
    property ThreadState: DDNC.System.Private.CoreLib.DNThreadState read get_ThreadState;
    property ApartmentState: DDNC.System.Private.CoreLib.DNApartmentState read get_ApartmentState write set_ApartmentState;
  end;

  TDNThread = class(TDNGenericImport<DNThreadClass, DNThread>) end;

  //-------------namespace: System.Threading----------------
  DNCompressedStackClass = interface(DNObjectClass)
  ['{B854B9B3-71DB-5564-847D-FBB238D8A0AD}']
  { static methods } 

    {class} function Capture: DNCompressedStack;
    {class} function GetCompressedStack: DNCompressedStack;
    {class} procedure Run(compressedStack: DNCompressedStack; callback: DDNC.System.Private.CoreLib.DNContextCallback; state: DDNC.System.Private.CoreLib.DNObject);

  end;

  [DNTypeName('System.Threading.CompressedStack')]
  DNCompressedStack = interface(DDNC.System.Private.CoreLib.DNISerializable)
  ['{17D6B934-C6EA-3572-B905-0FFE48F58E4C}']
  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function CreateCopy: DNCompressedStack;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCompressedStack = class(TDNGenericImport<DNCompressedStackClass, DNCompressedStack>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Threading.Thread, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
