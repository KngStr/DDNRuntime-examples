//----------------------------------------------------------------------------
//  System.Drawing.dll: System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Drawing
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Drawing;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies alignment of content on the drawing surface.</summary>
  [DNTypeName('System.Drawing.ContentAlignment')]
  DNContentAlignment = type Integer;
  DNContentAlignmentHelper = record helper for DNContentAlignment
  public const
    ///<summary>Content is vertically aligned at the top, and horizontally aligned on the left.</summary>
    TopLeft = 1;
    ///<summary>Content is vertically aligned at the top, and horizontally aligned at the center.</summary>
    TopCenter = 2;
    ///<summary>Content is vertically aligned at the top, and horizontally aligned on the right.</summary>
    TopRight = 4;
    ///<summary>Content is vertically aligned in the middle, and horizontally aligned on the left.</summary>
    MiddleLeft = 16;
    ///<summary>Content is vertically aligned in the middle, and horizontally aligned at the center.</summary>
    MiddleCenter = 32;
    ///<summary>Content is vertically aligned in the middle, and horizontally aligned on the right.</summary>
    MiddleRight = 64;
    ///<summary>Content is vertically aligned at the bottom, and horizontally aligned on the left.</summary>
    BottomLeft = 256;
    ///<summary>Content is vertically aligned at the bottom, and horizontally aligned at the center.</summary>
    BottomCenter = 512;
    ///<summary>Content is vertically aligned at the bottom, and horizontally aligned on the right.</summary>
    BottomRight = 1024;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Determines how the source color in a copy pixel operation is combined with the destination color to result in a final color.</summary>
  [DNTypeName('System.Drawing.CopyPixelOperation')]
  DNCopyPixelOperation = type Integer;
  DNCopyPixelOperationHelper = record helper for DNCopyPixelOperation
  public const
    ///<summary>The destination area is filled by using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)</summary>
    Blackness = 66;
    ///<summary>The source and destination colors are combined using the Boolean <see langword="OR" />
    ///  operator, and then resultant color is then inverted.</summary>
    NotSourceErase = 1114278;
    ///<summary>The inverted source area is copied to the destination.</summary>
    NotSourceCopy = 3342344;
    ///<summary>The inverted colors of the destination area are combined with the colors of the source area using the Boolean <see langword="AND" />
    ///  operator.</summary>
    SourceErase = 4457256;
    ///<summary>The destination area is inverted.</summary>
    DestinationInvert = 5570569;
    ///<summary>The colors of the brush currently selected in the destination device context are combined with the colors of the destination are using the Boolean <see langword="XOR" />
    ///  operator.</summary>
    PatInvert = 5898313;
    ///<summary>The colors of the source and destination areas are combined using the Boolean <see langword="XOR" />
    ///  operator.</summary>
    SourceInvert = 6684742;
    ///<summary>The colors of the source and destination areas are combined using the Boolean <see langword="AND" />
    ///  operator.</summary>
    SourceAnd = 8913094;
    ///<summary>The colors of the inverted source area are merged with the colors of the destination area by using the Boolean <see langword="OR" />
    ///  operator.</summary>
    MergePaint = 12255782;
    ///<summary>The colors of the source area are merged with the colors of the selected brush of the destination device context using the Boolean <see langword="AND" />
    ///  operator.</summary>
    MergeCopy = 12583114;
    ///<summary>The source area is copied directly to the destination area.</summary>
    SourceCopy = 13369376;
    ///<summary>The colors of the source and destination areas are combined using the Boolean <see langword="OR" />
    ///  operator.</summary>
    SourcePaint = 15597702;
    ///<summary>The brush currently selected in the destination device context is copied to the destination bitmap.</summary>
    PatCopy = 15728673;
    ///<summary>The colors of the brush currently selected in the destination device context are combined with the colors of the inverted source area using the Boolean <see langword="OR" />
    ///  operator. The result of this operation is combined with the colors of the destination area using the Boolean <see langword="OR" />
    ///  operator.</summary>
    PatPaint = 16452105;
    ///<summary>The destination area is filled by using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)</summary>
    Whiteness = 16711778;
    ///<summary>Windows that are layered on top of your window are included in the resulting image. By default, the image contains only your window. Note that this generally cannot be used for printing device contexts.</summary>
    CaptureBlt = 1073741824;
    ///<summary>The bitmap is not mirrored.</summary>
    NoMirrorBitmap = -2147483648;
  end;


  //-------------namespace: System.Drawing.Design----------------
  ///<summary>Specifies identifiers that indicate the value editing style of a <see cref="T:System.Drawing.Design.UITypeEditor" />
  ///  .</summary>
  [DNTypeName('System.Drawing.Design.UITypeEditorEditStyle')]
  DNUITypeEditorEditStyle = type Integer;
  DNUITypeEditorEditStyleHelper = record helper for DNUITypeEditorEditStyle
  public const
    ///<summary>Provides no interactive user interface (UI) component.</summary>
    None = 1;
    ///<summary>Displays an ellipsis (...) button to start a modal dialog box, which requires user input before continuing a program, or a modeless dialog box, which stays on the screen and is available for use at any time but permits other user activities.</summary>
    Modal = 2;
    ///<summary>Displays a drop-down arrow button and hosts the user interface (UI) in a drop-down dialog box.</summary>
    DropDown = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how different clipping regions can be combined.</summary>
  [DNTypeName('System.Drawing.Drawing2D.CombineMode')]
  DNCombineMode = type Integer;
  DNCombineModeHelper = record helper for DNCombineMode
  public const
    ///<summary>One clipping region is replaced by another.</summary>
    Replace = 0;
    ///<summary>Two clipping regions are combined by taking their intersection.</summary>
    Intersect = 1;
    ///<summary>Two clipping regions are combined by taking the union of both.</summary>
    Union = 2;
    ///<summary>Two clipping regions are combined by taking only the areas enclosed by one or the other region, but not both.</summary>
    Xor_ = 3;
    ///<summary>Specifies that the existing region is replaced by the result of the new region being removed from the existing region. Said differently, the new region is excluded from the existing region.</summary>
    Exclude = 4;
    ///<summary>Specifies that the existing region is replaced by the result of the existing region being removed from the new region. Said differently, the existing region is excluded from the new region.</summary>
    Complement = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how the source colors are combined with the background colors.</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingMode')]
  DNCompositingMode = type Integer;
  DNCompositingModeHelper = record helper for DNCompositingMode
  public const
    ///<summary>Specifies that when a color is rendered, it is blended with the background color. The blend is determined by the alpha component of the color being rendered.</summary>
    SourceOver = 0;
    ///<summary>Specifies that when a color is rendered, it overwrites the background color.</summary>
    SourceCopy = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the quality level to use during compositing.</summary>
  [DNTypeName('System.Drawing.Drawing2D.CompositingQuality')]
  DNCompositingQuality = type Integer;
  DNCompositingQualityHelper = record helper for DNCompositingQuality
  public const
    ///<summary>Default quality.</summary>
    Default_ = 0;
    ///<summary>High speed, low quality.</summary>
    HighSpeed = 1;
    ///<summary>High quality, low speed compositing.</summary>
    HighQuality = 2;
    ///<summary>Gamma correction is used.</summary>
    GammaCorrected = 3;
    ///<summary>Assume linear values.</summary>
    AssumeLinear = 4;
    ///<summary>Invalid quality.</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the system to use when evaluating coordinates.</summary>
  [DNTypeName('System.Drawing.Drawing2D.CoordinateSpace')]
  DNCoordinateSpace = type Integer;
  DNCoordinateSpaceHelper = record helper for DNCoordinateSpace
  public const
    ///<summary>Specifies that coordinates are in the world coordinate context. World coordinates are used in a nonphysical environment, such as a modeling environment.</summary>
    World = 0;
    ///<summary>Specifies that coordinates are in the page coordinate context. Their units are defined by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, and must be one of the elements of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration.</summary>
    Page = 1;
    ///<summary>Specifies that coordinates are in the device coordinate context. On a computer screen the device coordinates are usually measured in pixels.</summary>
    Device = 2;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the type of graphic shape to use on both ends of each dash in a dashed line.</summary>
  [DNTypeName('System.Drawing.Drawing2D.DashCap')]
  DNDashCap = type Integer;
  DNDashCapHelper = record helper for DNDashCap
  public const
    ///<summary>Specifies a square cap that squares off both ends of each dash.</summary>
    Flat = 0;
    ///<summary>Specifies a circular cap that rounds off both ends of each dash.</summary>
    Round = 2;
    ///<summary>Specifies a triangular cap that points both ends of each dash.</summary>
    Triangle = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the style of dashed lines drawn with a <see cref="T:System.Drawing.Pen" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.Drawing2D.DashStyle')]
  DNDashStyle = type Integer;
  DNDashStyleHelper = record helper for DNDashStyle
  public const
    ///<summary>Specifies a solid line.</summary>
    Solid = 0;
    ///<summary>Specifies a line consisting of dashes.</summary>
    Dash = 1;
    ///<summary>Specifies a line consisting of dots.</summary>
    Dot = 2;
    ///<summary>Specifies a line consisting of a repeating pattern of dash-dot.</summary>
    DashDot = 3;
    ///<summary>Specifies a line consisting of a repeating pattern of dash-dot-dot.</summary>
    DashDotDot = 4;
    ///<summary>Specifies a user-defined custom dash style.</summary>
    Custom = 5;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how the interior of a closed path is filled.</summary>
  [DNTypeName('System.Drawing.Drawing2D.FillMode')]
  DNFillMode = type Integer;
  DNFillModeHelper = record helper for DNFillMode
  public const
    ///<summary>Specifies the alternate fill mode.</summary>
    Alternate = 0;
    ///<summary>Specifies the winding fill mode.</summary>
    Winding = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies whether commands in the graphics stack are terminated (flushed) immediately or executed as soon as possible.</summary>
  [DNTypeName('System.Drawing.Drawing2D.FlushIntention')]
  DNFlushIntention = type Integer;
  DNFlushIntentionHelper = record helper for DNFlushIntention
  public const
    ///<summary>Specifies that the stack of all graphics operations is flushed immediately.</summary>
    Flush = 0;
    ///<summary>Specifies that all graphics operations on the stack are executed as soon as possible. This synchronizes the graphics state.</summary>
    Sync = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the different patterns available for <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Drawing2D.HatchStyle')]
  DNHatchStyle = type Integer;
  DNHatchStyleHelper = record helper for DNHatchStyle
  public const
    ///<summary>A pattern of horizontal lines.</summary>
    Horizontal = 0;
    ///<summary>Specifies hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  .</summary>
    Min = 0;
    ///<summary>A pattern of vertical lines.</summary>
    Vertical = 1;
    ///<summary>A pattern of lines on a diagonal from upper left to lower right.</summary>
    ForwardDiagonal = 2;
    ///<summary>A pattern of lines on a diagonal from upper right to lower left.</summary>
    BackwardDiagonal = 3;
    ///<summary>Specifies horizontal and vertical lines that cross.</summary>
    Cross = 4;
    ///<summary>Specifies the hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.Cross" />
    ///  .</summary>
    LargeGrid = 4;
    ///<summary>Specifies hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.SolidDiamond" />
    ///  .</summary>
    Max = 4;
    ///<summary>A pattern of crisscross diagonal lines.</summary>
    DiagonalCross = 5;
    ///<summary>Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:95.</summary>
    Percent05 = 6;
    ///<summary>Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:90.</summary>
    Percent10 = 7;
    ///<summary>Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:80.</summary>
    Percent20 = 8;
    ///<summary>Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:75.</summary>
    Percent25 = 9;
    ///<summary>Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:70.</summary>
    Percent30 = 10;
    ///<summary>Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:60.</summary>
    Percent40 = 11;
    ///<summary>Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:50.</summary>
    Percent50 = 12;
    ///<summary>Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:40.</summary>
    Percent60 = 13;
    ///<summary>Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:30.</summary>
    Percent70 = 14;
    ///<summary>Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:25.</summary>
    Percent75 = 15;
    ///<summary>Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.</summary>
    Percent80 = 16;
    ///<summary>Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:10.</summary>
    Percent90 = 17;
    ///<summary>Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  , but are not antialiased.</summary>
    LightDownwardDiagonal = 18;
    ///<summary>Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , but they are not antialiased.</summary>
    LightUpwardDiagonal = 19;
    ///<summary>Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  . This hatch pattern is not antialiased.</summary>
    DarkDownwardDiagonal = 20;
    ///<summary>Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , and are twice its width, but the lines are not antialiased.</summary>
    DarkUpwardDiagonal = 21;
    ///<summary>Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.ForwardDiagonal" />
    ///  , and are triple its width, but are not antialiased.</summary>
    WideDownwardDiagonal = 22;
    ///<summary>Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.BackwardDiagonal" />
    ///  , and are triple its width, but are not antialiased.</summary>
    WideUpwardDiagonal = 23;
    ///<summary>Specifies vertical lines that are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  .</summary>
    LightVertical = 24;
    ///<summary>Specifies horizontal lines that are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  .</summary>
    LightHorizontal = 25;
    ///<summary>Specifies vertical lines that are spaced 75 percent closer together than hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  (or 25 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.LightVertical" />
    ///  ).</summary>
    NarrowVertical = 26;
    ///<summary>Specifies horizontal lines that are spaced 75 percent closer together than hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  (or 25 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.LightHorizontal" />
    ///  ).</summary>
    NarrowHorizontal = 27;
    ///<summary>Specifies vertical lines that are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.Vertical" />
    ///  and are twice its width.</summary>
    DarkVertical = 28;
    ///<summary>Specifies horizontal lines that are spaced 50 percent closer together than <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  and are twice the width of <see cref="F:System.Drawing.Drawing2D.HatchStyle.Horizontal" />
    ///  .</summary>
    DarkHorizontal = 29;
    ///<summary>Specifies dashed diagonal lines, that slant to the right from top points to bottom points.</summary>
    DashedDownwardDiagonal = 30;
    ///<summary>Specifies dashed diagonal lines, that slant to the left from top points to bottom points.</summary>
    DashedUpwardDiagonal = 31;
    ///<summary>Specifies dashed horizontal lines.</summary>
    DashedHorizontal = 32;
    ///<summary>Specifies dashed vertical lines.</summary>
    DashedVertical = 33;
    ///<summary>Specifies a hatch that has the appearance of confetti.</summary>
    SmallConfetti = 34;
    ///<summary>Specifies a hatch that has the appearance of confetti, and is composed of larger pieces than <see cref="F:System.Drawing.Drawing2D.HatchStyle.SmallConfetti" />
    ///  .</summary>
    LargeConfetti = 35;
    ///<summary>Specifies horizontal lines that are composed of zigzags.</summary>
    ZigZag = 36;
    ///<summary>Specifies horizontal lines that are composed of tildes.</summary>
    Wave = 37;
    ///<summary>Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.</summary>
    DiagonalBrick = 38;
    ///<summary>Specifies a hatch that has the appearance of horizontally layered bricks.</summary>
    HorizontalBrick = 39;
    ///<summary>Specifies a hatch that has the appearance of a woven material.</summary>
    Weave = 40;
    ///<summary>Specifies a hatch that has the appearance of a plaid material.</summary>
    Plaid = 41;
    ///<summary>Specifies a hatch that has the appearance of divots.</summary>
    Divot = 42;
    ///<summary>Specifies horizontal and vertical lines, each of which is composed of dots, that cross.</summary>
    DottedGrid = 43;
    ///<summary>Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.</summary>
    DottedDiamond = 44;
    ///<summary>Specifies a hatch that has the appearance of diagonally layered shingles that slant to the right from top points to bottom points.</summary>
    Shingle = 45;
    ///<summary>Specifies a hatch that has the appearance of a trellis.</summary>
    Trellis = 46;
    ///<summary>Specifies a hatch that has the appearance of spheres laid adjacent to one another.</summary>
    Sphere = 47;
    ///<summary>Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style <see cref="F:System.Drawing.Drawing2D.HatchStyle.Cross" />
    ///  .</summary>
    SmallGrid = 48;
    ///<summary>Specifies a hatch that has the appearance of a checkerboard.</summary>
    SmallCheckerBoard = 49;
    ///<summary>Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of <see cref="F:System.Drawing.Drawing2D.HatchStyle.SmallCheckerBoard" />
    ///  .</summary>
    LargeCheckerBoard = 50;
    ///<summary>Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.</summary>
    OutlinedDiamond = 51;
    ///<summary>Specifies a hatch that has the appearance of a checkerboard placed diagonally.</summary>
    SolidDiamond = 52;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>The <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
  ///  enumeration specifies the algorithm that is used when images are scaled or rotated. </summary>
  [DNTypeName('System.Drawing.Drawing2D.InterpolationMode')]
  DNInterpolationMode = type Integer;
  DNInterpolationModeHelper = record helper for DNInterpolationMode
  public const
    ///<summary>Specifies default mode.</summary>
    Default_ = 0;
    ///<summary>Specifies low quality interpolation.</summary>
    Low = 1;
    ///<summary>Specifies high quality interpolation.</summary>
    High = 2;
    ///<summary>Specifies bilinear interpolation. No prefiltering is done. This mode is not suitable for shrinking an image below 50 percent of its original size. </summary>
    Bilinear = 3;
    ///<summary>Specifies bicubic interpolation. No prefiltering is done. This mode is not suitable for shrinking an image below 25 percent of its original size.</summary>
    Bicubic = 4;
    ///<summary>Specifies nearest-neighbor interpolation.</summary>
    NearestNeighbor = 5;
    ///<summary>Specifies high-quality, bilinear interpolation. Prefiltering is performed to ensure high-quality shrinking. </summary>
    HighQualityBilinear = 6;
    ///<summary>Specifies high-quality, bicubic interpolation. Prefiltering is performed to ensure high-quality shrinking. This mode produces the highest quality transformed images.</summary>
    HighQualityBicubic = 7;
    ///<summary>Equivalent to the <see cref="F:System.Drawing.Drawing2D.QualityMode.Invalid" />
    ///  element of the <see cref="T:System.Drawing.Drawing2D.QualityMode" />
    ///  enumeration.</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the direction of a linear gradient.</summary>
  [DNTypeName('System.Drawing.Drawing2D.LinearGradientMode')]
  DNLinearGradientMode = type Integer;
  DNLinearGradientModeHelper = record helper for DNLinearGradientMode
  public const
    ///<summary>Specifies a gradient from left to right.</summary>
    Horizontal = 0;
    ///<summary>Specifies a gradient from top to bottom.</summary>
    Vertical = 1;
    ///<summary>Specifies a gradient from upper left to lower right.</summary>
    ForwardDiagonal = 2;
    ///<summary>Specifies a gradient from upper right to lower left.</summary>
    BackwardDiagonal = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the available cap styles with which a <see cref="T:System.Drawing.Pen" />
  ///  object can end a line.</summary>
  [DNTypeName('System.Drawing.Drawing2D.LineCap')]
  DNLineCap = type Integer;
  DNLineCapHelper = record helper for DNLineCap
  public const
    ///<summary>Specifies a flat line cap.</summary>
    Flat = 0;
    ///<summary>Specifies a square line cap.</summary>
    Square = 1;
    ///<summary>Specifies a round line cap.</summary>
    Round = 2;
    ///<summary>Specifies a triangular line cap.</summary>
    Triangle = 3;
    ///<summary>Specifies no anchor.</summary>
    NoAnchor = 16;
    ///<summary>Specifies a square anchor line cap.</summary>
    SquareAnchor = 17;
    ///<summary>Specifies a round anchor cap.</summary>
    RoundAnchor = 18;
    ///<summary>Specifies a diamond anchor cap.</summary>
    DiamondAnchor = 19;
    ///<summary>Specifies an arrow-shaped anchor cap.</summary>
    ArrowAnchor = 20;
    ///<summary>Specifies a mask used to check whether a line cap is an anchor cap.</summary>
    AnchorMask = 240;
    ///<summary>Specifies a custom line cap.</summary>
    Custom = 255;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how to join consecutive line or curve segments in a figure (subpath) contained in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.Drawing2D.LineJoin')]
  DNLineJoin = type Integer;
  DNLineJoinHelper = record helper for DNLineJoin
  public const
    ///<summary>Specifies a mitered join. This produces a sharp corner or a clipped corner, depending on whether the length of the miter exceeds the miter limit.</summary>
    Miter = 0;
    ///<summary>Specifies a beveled join. This produces a diagonal corner.</summary>
    Bevel = 1;
    ///<summary>Specifies a circular join. This produces a smooth, circular arc between the lines.</summary>
    Round = 2;
    ///<summary>Specifies a mitered join. This produces a sharp corner or a beveled corner, depending on whether the length of the miter exceeds the miter limit.</summary>
    MiterClipped = 3;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the order for matrix transform operations.</summary>
  [DNTypeName('System.Drawing.Drawing2D.MatrixOrder')]
  DNMatrixOrder = type Integer;
  DNMatrixOrderHelper = record helper for DNMatrixOrder
  public const
    ///<summary>The new operation is applied before the old operation.</summary>
    Prepend = 0;
    ///<summary>The new operation is applied after the old operation.</summary>
    Append = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the type of point in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathPointType')]
  DNPathPointType = type Integer;
  DNPathPointTypeHelper = record helper for DNPathPointType
  public const
    ///<summary>The starting point of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object.</summary>
    Start = 0;
    ///<summary>A line segment.</summary>
    Line = 1;
    ///<summary>A default BÃ©zier curve.</summary>
    Bezier = 3;
    ///<summary>A cubic BÃ©zier curve.</summary>
    Bezier3 = 3;
    ///<summary>A mask point.</summary>
    PathTypeMask = 7;
    ///<summary>The corresponding segment is dashed.</summary>
    DashMode = 16;
    ///<summary>A path marker.</summary>
    PathMarker = 32;
    ///<summary>The endpoint of a subpath.</summary>
    CloseSubpath = 128;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the alignment of a <see cref="T:System.Drawing.Pen" />
  ///  object in relation to the theoretical, zero-width line.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PenAlignment')]
  DNPenAlignment = type Integer;
  DNPenAlignmentHelper = record helper for DNPenAlignment
  public const
    ///<summary>Specifies that the <see cref="T:System.Drawing.Pen" />
    ///  object is centered over the theoretical line.</summary>
    Center = 0;
    ///<summary>Specifies that the <see cref="T:System.Drawing.Pen" />
    ///  is positioned on the inside of the theoretical line.</summary>
    Inset = 1;
    ///<summary>Specifies the <see cref="T:System.Drawing.Pen" />
    ///  is positioned on the outside of the theoretical line.</summary>
    Outset = 2;
    ///<summary>Specifies the <see cref="T:System.Drawing.Pen" />
    ///  is positioned to the left of the theoretical line.</summary>
    Left = 3;
    ///<summary>Specifies the <see cref="T:System.Drawing.Pen" />
    ///  is positioned to the right of the theoretical line.</summary>
    Right = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the type of fill a <see cref="T:System.Drawing.Pen" />
  ///  object uses to fill lines.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PenType')]
  DNPenType = type Integer;
  DNPenTypeHelper = record helper for DNPenType
  public const
    ///<summary>Specifies a solid fill.</summary>
    SolidColor = 0;
    ///<summary>Specifies a hatch fill.</summary>
    HatchFill = 1;
    ///<summary>Specifies a bitmap texture fill.</summary>
    TextureFill = 2;
    ///<summary>Specifies a path gradient fill.</summary>
    PathGradient = 3;
    ///<summary>Specifies a linear gradient fill.</summary>
    LinearGradient = 4;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how pixels are offset during rendering.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PixelOffsetMode')]
  DNPixelOffsetMode = type Integer;
  DNPixelOffsetModeHelper = record helper for DNPixelOffsetMode
  public const
    ///<summary>Specifies the default mode.</summary>
    Default_ = 0;
    ///<summary>Specifies high speed, low quality rendering.</summary>
    HighSpeed = 1;
    ///<summary>Specifies high quality, low speed rendering.</summary>
    HighQuality = 2;
    ///<summary>Specifies no pixel offset.</summary>
    None = 3;
    ///<summary>Specifies that pixels are offset by -.5 units, both horizontally and vertically, for high speed antialiasing.</summary>
    Half = 4;
    ///<summary>Specifies an invalid mode.</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the overall quality when rendering GDI+ objects.</summary>
  [DNTypeName('System.Drawing.Drawing2D.QualityMode')]
  DNQualityMode = type Integer;
  DNQualityModeHelper = record helper for DNQualityMode
  public const
    ///<summary>Specifies the default mode.</summary>
    Default_ = 0;
    ///<summary>Specifies low quality, high speed rendering.</summary>
    Low = 1;
    ///<summary>Specifies high quality, low speed rendering.</summary>
    High = 2;
    ///<summary>Specifies an invalid mode.</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.</summary>
  [DNTypeName('System.Drawing.Drawing2D.SmoothingMode')]
  DNSmoothingMode = type Integer;
  DNSmoothingModeHelper = record helper for DNSmoothingMode
  public const
    ///<summary>Specifies no antialiasing.</summary>
    Default_ = 0;
    ///<summary>Specifies no antialiasing.</summary>
    HighSpeed = 1;
    ///<summary>Specifies antialiased rendering.</summary>
    HighQuality = 2;
    ///<summary>Specifies no antialiasing.</summary>
    None = 3;
    ///<summary>Specifies antialiased rendering.</summary>
    AntiAlias = 4;
    ///<summary>Specifies an invalid mode.</summary>
    Invalid = -1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies the type of warp transformation applied in a <see cref="Overload:System.Drawing.Drawing2D.GraphicsPath.Warp" />
  ///  method.</summary>
  [DNTypeName('System.Drawing.Drawing2D.WarpMode')]
  DNWarpMode = type Integer;
  DNWarpModeHelper = record helper for DNWarpMode
  public const
    ///<summary>Specifies a perspective warp.</summary>
    Perspective = 0;
    ///<summary>Specifies a bilinear warp.</summary>
    Bilinear = 1;
  end;


  //-------------namespace: System.Drawing.Drawing2D----------------
  ///<summary>Specifies how a texture or gradient is tiled when it is smaller than the area being filled.</summary>
  [DNTypeName('System.Drawing.Drawing2D.WrapMode')]
  DNWrapMode = type Integer;
  DNWrapModeHelper = record helper for DNWrapMode
  public const
    ///<summary>Tiles the gradient or texture.</summary>
    Tile = 0;
    ///<summary>Reverses the texture or gradient horizontally and then tiles the texture or gradient.</summary>
    TileFlipX = 1;
    ///<summary>Reverses the texture or gradient vertically and then tiles the texture or gradient.</summary>
    TileFlipY = 2;
    ///<summary>Reverses the texture or gradient horizontally and vertically and then tiles the texture or gradient.</summary>
    TileFlipXY = 3;
    ///<summary>The texture or gradient is not tiled.</summary>
    Clamp = 4;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies style information applied to text.</summary>
  [DNTypeName('System.Drawing.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    ///<summary>Normal text.</summary>
    Regular = 0;
    ///<summary>Bold text.</summary>
    Bold = 1;
    ///<summary>Italic text.</summary>
    Italic = 2;
    ///<summary>Underlined text.</summary>
    Underline = 4;
    ///<summary>Text with a line through the middle.</summary>
    Strikeout = 8;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies the unit of measure for the given data.</summary>
  [DNTypeName('System.Drawing.GraphicsUnit')]
  DNGraphicsUnit = type Integer;
  DNGraphicsUnitHelper = record helper for DNGraphicsUnit
  public const
    ///<summary>Specifies the world coordinate system unit as the unit of measure.</summary>
    World = 0;
    ///<summary>Specifies the unit of measure of the display device. Typically pixels for video displays, and 1/100 inch for printers.</summary>
    Display = 1;
    ///<summary>Specifies a device pixel as the unit of measure.</summary>
    Pixel = 2;
    ///<summary>Specifies a printer's point (1/72 inch) as the unit of measure.</summary>
    Point = 3;
    ///<summary>Specifies the inch as the unit of measure.</summary>
    Inch = 4;
    ///<summary>Specifies the document unit (1/300 inch) as the unit of measure.</summary>
    Document = 5;
    ///<summary>Specifies the millimeter as the unit of measure.</summary>
    Millimeter = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies which GDI+ objects use color adjustment information.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorAdjustType')]
  DNColorAdjustType = type Integer;
  DNColorAdjustTypeHelper = record helper for DNColorAdjustType
  public const
    ///<summary>Color adjustment information that is used by all GDI+ objects that do not have their own color adjustment information.</summary>
    Default_ = 0;
    ///<summary>Color adjustment information for <see cref="T:System.Drawing.Bitmap" />
    ///  objects.</summary>
    Bitmap = 1;
    ///<summary>Color adjustment information for <see cref="T:System.Drawing.Brush" />
    ///  objects.</summary>
    Brush = 2;
    ///<summary>Color adjustment information for <see cref="T:System.Drawing.Pen" />
    ///  objects.</summary>
    Pen = 3;
    ///<summary>Color adjustment information for text.</summary>
    Text = 4;
    ///<summary>The number of types specified.</summary>
    Count = 5;
    ///<summary>The number of types specified.</summary>
    Any = 6;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies individual channels in the CMYK (cyan, magenta, yellow, black) color space. This enumeration is used by the <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetOutputChannel" />
  ///  methods.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorChannelFlag')]
  DNColorChannelFlag = type Integer;
  DNColorChannelFlagHelper = record helper for DNColorChannelFlag
  public const
    ///<summary>The cyan color channel.</summary>
    ColorChannelC = 0;
    ///<summary>The magenta color channel.</summary>
    ColorChannelM = 1;
    ///<summary>The yellow color channel.</summary>
    ColorChannelY = 2;
    ///<summary>The black color channel.</summary>
    ColorChannelK = 3;
    ///<summary>The last selected channel should be used.</summary>
    ColorChannelLast = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the types of color maps.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMapType')]
  DNColorMapType = type Integer;
  DNColorMapTypeHelper = record helper for DNColorMapType
  public const
    ///<summary>A default color map.</summary>
    Default_ = 0;
    ///<summary>Specifies a color map for a <see cref="T:System.Drawing.Brush" />
    ///  .</summary>
    Brush = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the types of images and colors that will be affected by the color and grayscale adjustment settings of an <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  .</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMatrixFlag')]
  DNColorMatrixFlag = type Integer;
  DNColorMatrixFlagHelper = record helper for DNColorMatrixFlag
  public const
    ///<summary>All color values, including gray shades, are adjusted by the same color-adjustment matrix.</summary>
    Default_ = 0;
    ///<summary>All colors are adjusted, but gray shades are not adjusted. A gray shade is any color that has the same value for its red, green, and blue components.</summary>
    SkipGrays = 1;
    ///<summary>Only gray shades are adjusted.</summary>
    AltGrays = 2;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies two modes for color component values.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMode')]
  DNColorMode = type Integer;
  DNColorModeHelper = record helper for DNColorMode
  public const
    ///<summary>The integer values supplied are 32-bit values.</summary>
    Argb32Mode = 0;
    ///<summary>The integer values supplied are 64-bit values.</summary>
    Argb64Mode = 1;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the methods available for use with a metafile to read and write graphic commands. </summary>
  [DNTypeName('System.Drawing.Imaging.EmfPlusRecordType')]
  DNEmfPlusRecordType = type Integer;
  DNEmfPlusRecordTypeHelper = record helper for DNEmfPlusRecordType
  public const
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfMin = 1;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfHeader = 1;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyBezier = 2;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolygon = 3;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyline = 4;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyBezierTo = 5;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyLineTo = 6;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyPolyline = 7;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyPolygon = 8;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetWindowExtEx = 9;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetWindowOrgEx = 10;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetViewportExtEx = 11;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetViewportOrgEx = 12;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetBrushOrgEx = 13;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfEof = 14;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetPixelV = 15;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetMapperFlags = 16;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetMapMode = 17;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetBkMode = 18;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetPolyFillMode = 19;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetROP2 = 20;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetStretchBltMode = 21;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetTextAlign = 22;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetColorAdjustment = 23;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetTextColor = 24;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetBkColor = 25;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfOffsetClipRgn = 26;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfMoveToEx = 27;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetMetaRgn = 28;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExcludeClipRect = 29;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfIntersectClipRect = 30;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfScaleViewportExtEx = 31;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfScaleWindowExtEx = 32;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSaveDC = 33;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfRestoreDC = 34;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetWorldTransform = 35;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfModifyWorldTransform = 36;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSelectObject = 37;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreatePen = 38;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreateBrushIndirect = 39;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfDeleteObject = 40;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfAngleArc = 41;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfEllipse = 42;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfRectangle = 43;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfRoundRect = 44;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfRoundArc = 45;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfChord = 46;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPie = 47;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSelectPalette = 48;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreatePalette = 49;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetPaletteEntries = 50;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfResizePalette = 51;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfRealizePalette = 52;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtFloodFill = 53;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfLineTo = 54;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfArcTo = 55;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyDraw = 56;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetArcDirection = 57;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetMiterLimit = 58;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfBeginPath = 59;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfEndPath = 60;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCloseFigure = 61;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfFillPath = 62;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfStrokeAndFillPath = 63;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfStrokePath = 64;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfFlattenPath = 65;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfWidenPath = 66;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSelectClipPath = 67;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfAbortPath = 68;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfReserved069 = 69;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfGdiComment = 70;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfFillRgn = 71;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfFrameRgn = 72;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfInvertRgn = 73;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPaintRgn = 74;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtSelectClipRgn = 75;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfBitBlt = 76;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfStretchBlt = 77;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfMaskBlt = 78;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPlgBlt = 79;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetDIBitsToDevice = 80;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfStretchDIBits = 81;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtCreateFontIndirect = 82;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtTextOutA = 83;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtTextOutW = 84;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyBezier16 = 85;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolygon16 = 86;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyline16 = 87;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyBezierTo16 = 88;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolylineTo16 = 89;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyPolyline16 = 90;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyPolygon16 = 91;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyDraw16 = 92;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreateMonoBrush = 93;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreateDibPatternBrushPt = 94;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtCreatePen = 95;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyTextOutA = 96;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPolyTextOutW = 97;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetIcmMode = 98;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreateColorSpace = 99;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetColorSpace = 100;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfDeleteColorSpace = 101;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfGlsRecord = 102;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfGlsBoundedRecord = 103;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPixelFormat = 104;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfDrawEscape = 105;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfExtEscape = 106;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfStartDoc = 107;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSmallTextOut = 108;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfForceUfiMapping = 109;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfNamedEscpae = 110;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfColorCorrectPalette = 111;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetIcmProfileA = 112;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetIcmProfileW = 113;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfAlphaBlend = 114;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetLayout = 115;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfTransparentBlt = 116;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfReserved117 = 117;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfGradientFill = 118;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetLinkedUfis = 119;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfSetTextJustification = 120;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfColorMatchToTargetW = 121;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfCreateColorSpaceW = 122;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfMax = 122;
    ///<summary>Indicates invalid data.</summary>
    Invalid = 16384;
    ///<summary>See "Enhanced-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    EmfPlusRecordBase = 16384;
    ///<summary>Identifies a record that is the EMF+ header.</summary>
    Header = 16385;
    ///<summary>The minimum value for this enumeration.</summary>
    Min = 16385;
    ///<summary>Identifies a record that marks the last EMF+ record of a metafile.</summary>
    EndOfFile = 16386;
    ///<summary>See <see cref="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
    ///  .</summary>
    Comment = 16387;
    ///<summary>See <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  .</summary>
    GetDC = 16388;
    ///<summary>Marks the start of a multiple-format section.</summary>
    MultiFormatStart = 16389;
    ///<summary>Marks a multiple-format section.</summary>
    MultiFormatSection = 16390;
    ///<summary>Marks the end of a multiple-format section.</summary>
    MultiFormatEnd = 16391;
    ///<summary>Marks an object.</summary>
    Object_ = 16392;
    ///<summary>See <see cref="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
    ///  .</summary>
    Clear = 16393;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.FillRectangles" />
    ///  methods.</summary>
    FillRects = 16394;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawRectangles" />
    ///  methods.</summary>
    DrawRects = 16395;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.FillPolygon" />
    ///  methods.</summary>
    FillPolygon = 16396;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawLines" />
    ///  methods.</summary>
    DrawLines = 16397;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.FillEllipse" />
    ///  methods.</summary>
    FillEllipse = 16398;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawEllipse" />
    ///  methods.</summary>
    DrawEllipse = 16399;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.FillPie" />
    ///  methods.</summary>
    FillPie = 16400;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawPie" />
    ///  methods.</summary>
    DrawPie = 16401;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawArc" />
    ///  methods.</summary>
    DrawArc = 16402;
    ///<summary>See <see cref="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
    ///  .</summary>
    FillRegion = 16403;
    ///<summary>See <see cref="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
    ///  .</summary>
    FillPath = 16404;
    ///<summary>See <see cref="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
    ///  .</summary>
    DrawPath = 16405;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.FillClosedCurve" />
    ///  methods.</summary>
    FillClosedCurve = 16406;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawClosedCurve" />
    ///  methods.</summary>
    DrawClosedCurve = 16407;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawCurve" />
    ///  methods.</summary>
    DrawCurve = 16408;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawBeziers" />
    ///  methods.</summary>
    DrawBeziers = 16409;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  methods.</summary>
    DrawImage = 16410;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  methods.</summary>
    DrawImagePoints = 16411;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.DrawString" />
    ///  methods.</summary>
    DrawString = 16412;
    ///<summary>See <see cref="P:System.Drawing.Graphics.RenderingOrigin" />
    ///  .</summary>
    SetRenderingOrigin = 16413;
    ///<summary>See <see cref="P:System.Drawing.Graphics.SmoothingMode" />
    ///  .</summary>
    SetAntiAliasMode = 16414;
    ///<summary>See <see cref="P:System.Drawing.Graphics.TextRenderingHint" />
    ///  .</summary>
    SetTextRenderingHint = 16415;
    ///<summary>See <see cref="P:System.Drawing.Graphics.TextContrast" />
    ///  .</summary>
    SetTextContrast = 16416;
    ///<summary>See <see cref="P:System.Drawing.Graphics.InterpolationMode" />
    ///  .</summary>
    SetInterpolationMode = 16417;
    ///<summary>See <see cref="P:System.Drawing.Graphics.PixelOffsetMode" />
    ///  .</summary>
    SetPixelOffsetMode = 16418;
    ///<summary>See <see cref="P:System.Drawing.Graphics.CompositingMode" />
    ///  .</summary>
    SetCompositingMode = 16419;
    ///<summary>See <see cref="P:System.Drawing.Graphics.CompositingQuality" />
    ///  .</summary>
    SetCompositingQuality = 16420;
    ///<summary>See <see cref="M:System.Drawing.Graphics.Save" />
    ///  .</summary>
    Save = 16421;
    ///<summary>See <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
    ///  .</summary>
    Restore = 16422;
    ///<summary>See <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  methods.</summary>
    BeginContainer = 16423;
    ///<summary>See <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  methods.</summary>
    BeginContainerNoParams = 16424;
    ///<summary>See <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
    ///  .</summary>
    EndContainer = 16425;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  methods.</summary>
    SetWorldTransform = 16426;
    ///<summary>See <see cref="M:System.Drawing.Graphics.ResetTransform" />
    ///  .</summary>
    ResetWorldTransform = 16427;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.MultiplyTransform" />
    ///  methods.</summary>
    MultiplyWorldTransform = 16428;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  methods.</summary>
    TranslateWorldTransform = 16429;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.ScaleTransform" />
    ///  methods.</summary>
    ScaleWorldTransform = 16430;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.RotateTransform" />
    ///  methods.</summary>
    RotateWorldTransform = 16431;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.TransformPoints" />
    ///  methods.</summary>
    SetPageTransform = 16432;
    ///<summary>See <see cref="M:System.Drawing.Graphics.ResetClip" />
    ///  .</summary>
    ResetClip = 16433;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  methods.</summary>
    SetClipRect = 16434;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  methods.</summary>
    SetClipPath = 16435;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.SetClip" />
    ///  methods.</summary>
    SetClipRegion = 16436;
    ///<summary>See <see cref="Overload:System.Drawing.Graphics.TranslateClip" />
    ///  methods.</summary>
    OffsetClip = 16437;
    ///<summary>The maximum value for this enumeration.</summary>
    Max = 16438;
    ///<summary>Specifies a character string, a location, and formatting information.</summary>
    DrawDriverString = 16438;
    ///<summary>Used internally.</summary>
    Total = 16439;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfRecordBase = 65536;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSaveDC = 65566;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfRealizePalette = 65589;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetPalEntries = 65591;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreatePalette = 65783;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetBkMode = 65794;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetMapMode = 65795;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetROP2 = 65796;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetRelAbs = 65797;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetPolyFillMode = 65798;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetStretchBltMode = 65799;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetTextCharExtra = 65800;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfRestoreDC = 65831;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfInvertRegion = 65834;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPaintRegion = 65835;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSelectClipRegion = 65836;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSelectObject = 65837;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetTextAlign = 65838;
    ///<summary>Increases or decreases the size of a logical palette based on the specified value.</summary>
    WmfResizePalette = 65849;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfDibCreatePatternBrush = 65858;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetLayout = 65865;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfDeleteObject = 66032;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreatePatternBrush = 66041;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetBkColor = 66049;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetTextColor = 66057;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetTextJustification = 66058;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetWindowOrg = 66059;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetWindowExt = 66060;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetViewportOrg = 66061;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetViewportExt = 66062;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfOffsetWindowOrg = 66063;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfOffsetViewportOrg = 66065;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfLineTo = 66067;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfMoveTo = 66068;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfOffsetCilpRgn = 66080;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfFillRegion = 66088;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetMapperFlags = 66097;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSelectPalette = 66100;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreatePenIndirect = 66298;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreateFontIndirect = 66299;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreateBrushIndirect = 66300;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPolygon = 66340;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPolyline = 66341;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfScaleWindowExt = 66576;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfScaleViewportExt = 66578;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfExcludeClipRect = 66581;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfIntersectClipRect = 66582;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfEllipse = 66584;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfFloodFill = 66585;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfRectangle = 66587;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetPixel = 66591;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfFrameRegion = 66601;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfAnimatePalette = 66614;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfTextOut = 66849;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPolyPolygon = 66872;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfExtFloodFill = 66888;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfRoundRect = 67100;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPatBlt = 67101;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfEscape = 67110;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfCreateRegion = 67327;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfArc = 67607;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfPie = 67610;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfChord = 67632;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfBitBlt = 67874;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfDibBitBlt = 67904;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfExtTextOut = 68146;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfStretchBlt = 68387;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfDibStretchBlt = 68417;
    ///<summary>See "Windows-Format Metafiles" in the GDI section of the MSDN Library.</summary>
    WmfSetDibToDev = 68915;
    ///<summary>Copies the color data for a rectangle of pixels in a DIB to the specified destination rectangle.</summary>
    WmfStretchDib = 69443;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the nature of the records that are placed in an Enhanced Metafile (EMF) file. This enumeration is used by several constructors in the <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  class.</summary>
  [DNTypeName('System.Drawing.Imaging.EmfType')]
  DNEmfType = type Integer;
  DNEmfTypeHelper = record helper for DNEmfType
  public const
    ///<summary>Specifies that all the records in the metafile are EMF records, which can be displayed by GDI or GDI+.</summary>
    EmfOnly = 3;
    ///<summary>Specifies that all the records in the metafile are EMF+ records, which can be displayed by GDI+ but not by GDI.</summary>
    EmfPlusOnly = 4;
    ///<summary>Specifies that all EMF+ records in the metafile are associated with an alternate EMF record. Metafiles of type <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />
    ///  can be displayed by GDI or by GDI+.</summary>
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Used to specify the data type of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  used with the <see cref="Overload:System.Drawing.Image.Save" />
  ///  or <see cref="Overload:System.Drawing.Image.SaveAdd" />
  ///  method of an image. </summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameterValueType')]
  DNEncoderParameterValueType = type Integer;
  DNEncoderParameterValueTypeHelper = record helper for DNEncoderParameterValueType
  public const
    ///<summary>Specifies that each value in the array is an 8-bit unsigned integer.</summary>
    ValueTypeByte = 1;
    ///<summary>Specifies that the array of values is a null-terminated ASCII character string. Note that the <see langword="NumberOfValues" />
    ///  data member of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object indicates the length of the character string including the NULL terminator.</summary>
    ValueTypeAscii = 2;
    ///<summary>Specifies that each value in the array is a 16-bit, unsigned integer.</summary>
    ValueTypeShort = 3;
    ///<summary>Specifies that each value in the array is a 32-bit unsigned integer.</summary>
    ValueTypeLong = 4;
    ///<summary>Specifies that each value in the array is a pair of 32-bit unsigned integers. Each pair represents a fraction, the first integer being the numerator and the second integer being the denominator.</summary>
    ValueTypeRational = 5;
    ///<summary>Specifies that each value in the array is a pair of 32-bit unsigned integers. Each pair represents a range of numbers.</summary>
    ValueTypeLongRange = 6;
    ///<summary>Specifies that the array of values is an array of bytes that has no data type defined.</summary>
    ValueTypeUndefined = 7;
    ///<summary>Specifies that each value in the array is a set of four, 32-bit unsigned integers. The first two integers represent one fraction, and the second two integers represent a second fraction. The two fractions represent a range of rational numbers. The first fraction is the smallest rational number in the range, and the second fraction is the largest rational number in the range.</summary>
    ValueTypeRationalRange = 8;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Used to specify the parameter value passed to a JPEG or TIFF image encoder when using the <see cref="M:System.Drawing.Image.Save(System.String,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters)" />
  ///  or <see cref="M:System.Drawing.Image.SaveAdd(System.Drawing.Imaging.EncoderParameters)" />
  ///  methods.</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderValue')]
  DNEncoderValue = type Integer;
  DNEncoderValueHelper = record helper for DNEncoderValue
  public const
    ///<summary>Not used in GDI+ version 1.0.</summary>
    ColorTypeCMYK = 0;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    ColorTypeYCCK = 1;
    ///<summary>Specifies the LZW compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the Compression category.</summary>
    CompressionLZW = 2;
    ///<summary>Specifies the CCITT3 compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</summary>
    CompressionCCITT3 = 3;
    ///<summary>Specifies the CCITT4 compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</summary>
    CompressionCCITT4 = 4;
    ///<summary>Specifies the RLE compression scheme. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</summary>
    CompressionRle = 5;
    ///<summary>Specifies no compression. Can be passed to the TIFF encoder as a parameter that belongs to the compression category.</summary>
    CompressionNone = 6;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    ScanMethodInterlaced = 7;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    ScanMethodNonInterlaced = 8;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    VersionGif87 = 9;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    VersionGif89 = 10;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    RenderProgressive = 11;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    RenderNonProgressive = 12;
    ///<summary>Specifies that the image is to be rotated clockwise 90 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</summary>
    TransformRotate90 = 13;
    ///<summary>Specifies that the image is to be rotated 180 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</summary>
    TransformRotate180 = 14;
    ///<summary>Specifies that the image is to be rotated clockwise 270 degrees about its center. Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</summary>
    TransformRotate270 = 15;
    ///<summary>Specifies that the image is to be flipped horizontally (about the vertical axis). Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</summary>
    TransformFlipHorizontal = 16;
    ///<summary>Specifies that the image is to be flipped vertically (about the horizontal axis). Can be passed to the JPEG encoder as a parameter that belongs to the transformation category.</summary>
    TransformFlipVertical = 17;
    ///<summary>Specifies that the image has more than one frame (page). Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</summary>
    MultiFrame = 18;
    ///<summary>Specifies the last frame in a multiple-frame image. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</summary>
    LastFrame = 19;
    ///<summary>Specifies that a multiple-frame file or stream should be closed. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</summary>
    Flush = 20;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    FrameDimensionTime = 21;
    ///<summary>Not used in GDI+ version 1.0.</summary>
    FrameDimensionResolution = 22;
    ///<summary>Specifies that a frame is to be added to the page dimension of an image. Can be passed to the TIFF encoder as a parameter that belongs to the save flag category.</summary>
    FrameDimensionPage = 23;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Provides attributes of an image encoder/decoder (codec).</summary>
  [DNTypeName('System.Drawing.Imaging.ImageCodecFlags')]
  DNImageCodecFlags = type Integer;
  DNImageCodecFlagsHelper = record helper for DNImageCodecFlags
  public const
    ///<summary>The codec supports encoding (saving).</summary>
    Encoder = 1;
    ///<summary>The codec supports decoding (reading).</summary>
    Decoder = 2;
    ///<summary>The codec supports raster images (bitmaps).</summary>
    SupportBitmap = 4;
    ///<summary>The codec supports vector images (metafiles).</summary>
    SupportVector = 8;
    ///<summary>The encoder requires a seekable output stream.</summary>
    SeekableEncode = 16;
    ///<summary>The decoder has blocking behavior during the decoding process.</summary>
    BlockingDecode = 32;
    ///<summary>The codec is built into GDI+.</summary>
    Builtin = 65536;
    ///<summary>Not used.</summary>
    System = 131072;
    ///<summary>Not used.</summary>
    User = 262144;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the attributes of the pixel data contained in an <see cref="T:System.Drawing.Image" />
  ///  object. The <see cref="P:System.Drawing.Image.Flags" />
  ///  property returns a member of this enumeration.</summary>
  [DNTypeName('System.Drawing.Imaging.ImageFlags')]
  DNImageFlags = type Integer;
  DNImageFlagsHelper = record helper for DNImageFlags
  public const
    ///<summary>There is no format information.</summary>
    None = 0;
    ///<summary>The pixel data is scalable.</summary>
    Scalable = 1;
    ///<summary>The pixel data contains alpha information.</summary>
    HasAlpha = 2;
    ///<summary>Specifies that the pixel data has alpha values other than 0 (transparent) and 255 (opaque).</summary>
    HasTranslucent = 4;
    ///<summary>The pixel data is partially scalable, but there are some limitations.</summary>
    PartiallyScalable = 8;
    ///<summary>The pixel data uses an RGB color space.</summary>
    ColorSpaceRgb = 16;
    ///<summary>The pixel data uses a CMYK color space.</summary>
    ColorSpaceCmyk = 32;
    ///<summary>The pixel data is grayscale.</summary>
    ColorSpaceGray = 64;
    ///<summary>Specifies that the image is stored using a YCBCR color space.</summary>
    ColorSpaceYcbcr = 128;
    ///<summary>Specifies that the image is stored using a YCCK color space.</summary>
    ColorSpaceYcck = 256;
    ///<summary>Specifies that dots per inch information is stored in the image.</summary>
    HasRealDpi = 4096;
    ///<summary>Specifies that the pixel size is stored in the image.</summary>
    HasRealPixelSize = 8192;
    ///<summary>The pixel data is read-only.</summary>
    ReadOnly = 65536;
    ///<summary>The pixel data can be cached for faster access.</summary>
    Caching = 131072;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies flags that are passed to the flags parameter of the <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  method. The <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  method locks a portion of an image so that you can read or write the pixel data.</summary>
  [DNTypeName('System.Drawing.Imaging.ImageLockMode')]
  DNImageLockMode = type Integer;
  DNImageLockModeHelper = record helper for DNImageLockMode
  public const
    ///<summary>Specifies that a portion of the image is locked for reading.</summary>
    ReadOnly = 1;
    ///<summary>Specifies that a portion of the image is locked for writing.</summary>
    WriteOnly_ = 2;
    ///<summary>Specifies that a portion of the image is locked for reading or writing.</summary>
    ReadWrite = 3;
    ///<summary>Specifies that the buffer used for reading or writing pixel data is allocated by the user. If this flag is set, the <paramref name="flags" />
    ///  parameter of the <see cref="Overload:System.Drawing.Bitmap.LockBits" />
    ///  method serves as an input parameter (and possibly as an output parameter). If this flag is cleared, then the <paramref name="flags" />
    ///  parameter serves only as an output parameter.</summary>
    UserInputBuffer = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the unit of measurement for the rectangle used to size and position a metafile. This is specified during the creation of the <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileFrameUnit')]
  DNMetafileFrameUnit = type Integer;
  DNMetafileFrameUnitHelper = record helper for DNMetafileFrameUnit
  public const
    ///<summary>The unit of measurement is 1 pixel.</summary>
    Pixel = 2;
    ///<summary>The unit of measurement is 1 printer's point.</summary>
    Point = 3;
    ///<summary>The unit of measurement is 1 inch.</summary>
    Inch = 4;
    ///<summary>The unit of measurement is 1/300 of an inch.</summary>
    Document = 5;
    ///<summary>The unit of measurement is 1 millimeter.</summary>
    Millimeter = 6;
    ///<summary>The unit of measurement is 0.01 millimeter. Provided for compatibility with GDI.</summary>
    GdiCompatible = 7;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies types of metafiles. The <see cref="P:System.Drawing.Imaging.MetafileHeader.Type" />
  ///  property returns a member of this enumeration.</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileType')]
  DNMetafileType = type Integer;
  DNMetafileTypeHelper = record helper for DNMetafileType
  public const
    ///<summary>Specifies a metafile format that is not recognized in GDI+.</summary>
    Invalid = 0;
    ///<summary>Specifies a WMF (Windows Metafile) file. Such a file contains only GDI records.</summary>
    Wmf = 1;
    ///<summary>Specifies a WMF (Windows Metafile) file that has a placeable metafile header in front of it.</summary>
    WmfPlaceable = 2;
    ///<summary>Specifies an Enhanced Metafile (EMF) file. Such a file contains only GDI records.</summary>
    Emf = 3;
    ///<summary>Specifies an EMF+ file. Such a file contains only GDI+ records and must be displayed by using GDI+. Displaying the records using GDI may cause unpredictable results.</summary>
    EmfPlusOnly = 4;
    ///<summary>Specifies an EMF+ Dual file. Such a file contains GDI+ records along with alternative GDI records and can be displayed by using either GDI or GDI+. Displaying the records using GDI may cause some quality degradation.</summary>
    EmfPlusDual = 5;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the type of color data in the system palette. The data can be color data with alpha, grayscale data only, or halftone data.</summary>
  [DNTypeName('System.Drawing.Imaging.PaletteFlags')]
  DNPaletteFlags = type Integer;
  DNPaletteFlagsHelper = record helper for DNPaletteFlags
  public const
    ///<summary>Alpha data.</summary>
    HasAlpha = 1;
    ///<summary>Grayscale data.</summary>
    GrayScale = 2;
    ///<summary>Halftone data.</summary>
    Halftone = 4;
  end;


  //-------------namespace: System.Drawing.Imaging----------------
  ///<summary>Specifies the format of the color data for each pixel in the image.</summary>
  [DNTypeName('System.Drawing.Imaging.PixelFormat')]
  DNPixelFormat = type Integer;
  DNPixelFormatHelper = record helper for DNPixelFormat
  public const
    ///<summary>No pixel format is specified.</summary>
    DontCare = 0;
    ///<summary>The pixel format is undefined.</summary>
    Undefined = 0;
    ///<summary>The maximum value for this enumeration.</summary>
    Max = 15;
    ///<summary>The pixel data contains color-indexed values, which means the values are an index to colors in the system color table, as opposed to individual color values.</summary>
    Indexed = 65536;
    ///<summary>The pixel data contains GDI colors.</summary>
    Gdi = 131072;
    ///<summary>Specifies that the format is 16 bits per pixel; 5 bits each are used for the red, green, and blue components. The remaining bit is not used.</summary>
    Format16bppRgb555 = 135173;
    ///<summary>Specifies that the format is 16 bits per pixel; 5 bits are used for the red component, 6 bits are used for the green component, and 5 bits are used for the blue component.</summary>
    Format16bppRgb565 = 135174;
    ///<summary>Specifies that the format is 24 bits per pixel; 8 bits each are used for the red, green, and blue components.</summary>
    Format24bppRgb = 137224;
    ///<summary>Specifies that the format is 32 bits per pixel; 8 bits each are used for the red, green, and blue components. The remaining 8 bits are not used.</summary>
    Format32bppRgb = 139273;
    ///<summary>Specifies that the pixel format is 1 bit per pixel and that it uses indexed color. The color table therefore has two colors in it.</summary>
    Format1bppIndexed = 196865;
    ///<summary>Specifies that the format is 4 bits per pixel, indexed.</summary>
    Format4bppIndexed = 197634;
    ///<summary>Specifies that the format is 8 bits per pixel, indexed. The color table therefore has 256 colors in it.</summary>
    Format8bppIndexed = 198659;
    ///<summary>The pixel data contains alpha values that are not premultiplied.</summary>
    Alpha = 262144;
    ///<summary>The pixel format is 16 bits per pixel. The color information specifies 32,768 shades of color, of which 5 bits are red, 5 bits are green, 5 bits are blue, and 1 bit is alpha.</summary>
    Format16bppArgb1555 = 397319;
    ///<summary>The pixel format contains premultiplied alpha values.</summary>
    PAlpha = 524288;
    ///<summary>Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied, according to the alpha component.</summary>
    Format32bppPArgb = 925707;
    ///<summary>Reserved.</summary>
    Extended = 1048576;
    ///<summary>The pixel format is 16 bits per pixel. The color information specifies 65536 shades of gray.</summary>
    Format16bppGrayScale = 1052676;
    ///<summary>Specifies that the format is 48 bits per pixel; 16 bits each are used for the red, green, and blue components.</summary>
    Format48bppRgb = 1060876;
    ///<summary>Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied according to the alpha component.</summary>
    Format64bppPArgb = 1851406;
    ///<summary>The default pixel format of 32 bits per pixel. The format specifies 24-bit color depth and an 8-bit alpha channel.</summary>
    Canonical = 2097152;
    ///<summary>Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components.</summary>
    Format32bppArgb = 2498570;
    ///<summary>Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components.</summary>
    Format64bppArgb = 3424269;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies the known system colors.</summary>
  [DNTypeName('System.Drawing.KnownColor')]
  DNKnownColor = type Integer;
  DNKnownColorHelper = record helper for DNKnownColor
  public const
    ///<summary>The system-defined color of the active window's border.</summary>
    ActiveBorder = 1;
    ///<summary>The system-defined color of the background of the active window's title bar.</summary>
    ActiveCaption = 2;
    ///<summary>The system-defined color of the text in the active window's title bar.</summary>
    ActiveCaptionText = 3;
    ///<summary>The system-defined color of the application workspace. The application workspace is the area in a multiple-document view that is not being occupied by documents.</summary>
    AppWorkspace = 4;
    ///<summary>The system-defined face color of a 3-D element.</summary>
    Control = 5;
    ///<summary>The system-defined shadow color of a 3-D element. The shadow color is applied to parts of a 3-D element that face away from the light source.</summary>
    ControlDark = 6;
    ///<summary>The system-defined color that is the dark shadow color of a 3-D element. The dark shadow color is applied to the parts of a 3-D element that are the darkest color.</summary>
    ControlDarkDark = 7;
    ///<summary>The system-defined color that is the light color of a 3-D element. The light color is applied to parts of a 3-D element that face the light source.</summary>
    ControlLight = 8;
    ///<summary>The system-defined highlight color of a 3-D element. The highlight color is applied to the parts of a 3-D element that are the lightest color.</summary>
    ControlLightLight = 9;
    ///<summary>The system-defined color of text in a 3-D element.</summary>
    ControlText = 10;
    ///<summary>The system-defined color of the desktop.</summary>
    Desktop = 11;
    ///<summary>The system-defined color of dimmed text. Items in a list that are disabled are displayed in dimmed text.</summary>
    GrayText = 12;
    ///<summary>The system-defined color of the background of selected items. This includes selected menu items as well as selected text. </summary>
    Highlight = 13;
    ///<summary>The system-defined color of the text of selected items.</summary>
    HighlightText = 14;
    ///<summary>The system-defined color used to designate a hot-tracked item. Single-clicking a hot-tracked item executes the item.</summary>
    HotTrack = 15;
    ///<summary>The system-defined color of an inactive window's border.</summary>
    InactiveBorder = 16;
    ///<summary>The system-defined color of the background of an inactive window's title bar.</summary>
    InactiveCaption = 17;
    ///<summary>The system-defined color of the text in an inactive window's title bar.</summary>
    InactiveCaptionText = 18;
    ///<summary>The system-defined color of the background of a ToolTip.</summary>
    Info = 19;
    ///<summary>The system-defined color of the text of a ToolTip.</summary>
    InfoText = 20;
    ///<summary>The system-defined color of a menu's background.</summary>
    Menu = 21;
    ///<summary>The system-defined color of a menu's text.</summary>
    MenuText = 22;
    ///<summary>The system-defined color of the background of a scroll bar.</summary>
    ScrollBar = 23;
    ///<summary>The system-defined color of the background in the client area of a window.</summary>
    Window = 24;
    ///<summary>The system-defined color of a window frame.</summary>
    WindowFrame = 25;
    ///<summary>The system-defined color of the text in the client area of a window.</summary>
    WindowText = 26;
    ///<summary>A system-defined color.</summary>
    Transparent = 27;
    ///<summary>A system-defined color.</summary>
    AliceBlue = 28;
    ///<summary>A system-defined color.</summary>
    AntiqueWhite = 29;
    ///<summary>A system-defined color.</summary>
    Aqua = 30;
    ///<summary>A system-defined color.</summary>
    Aquamarine = 31;
    ///<summary>A system-defined color.</summary>
    Azure = 32;
    ///<summary>A system-defined color.</summary>
    Beige = 33;
    ///<summary>A system-defined color.</summary>
    Bisque = 34;
    ///<summary>A system-defined color.</summary>
    Black = 35;
    ///<summary>A system-defined color.</summary>
    BlanchedAlmond = 36;
    ///<summary>A system-defined color.</summary>
    Blue = 37;
    ///<summary>A system-defined color.</summary>
    BlueViolet = 38;
    ///<summary>A system-defined color.</summary>
    Brown = 39;
    ///<summary>A system-defined color.</summary>
    BurlyWood = 40;
    ///<summary>A system-defined color.</summary>
    CadetBlue = 41;
    ///<summary>A system-defined color.</summary>
    Chartreuse = 42;
    ///<summary>A system-defined color.</summary>
    Chocolate = 43;
    ///<summary>A system-defined color.</summary>
    Coral = 44;
    ///<summary>A system-defined color.</summary>
    CornflowerBlue = 45;
    ///<summary>A system-defined color.</summary>
    Cornsilk = 46;
    ///<summary>A system-defined color.</summary>
    Crimson = 47;
    ///<summary>A system-defined color.</summary>
    Cyan = 48;
    ///<summary>A system-defined color.</summary>
    DarkBlue = 49;
    ///<summary>A system-defined color.</summary>
    DarkCyan = 50;
    ///<summary>A system-defined color.</summary>
    DarkGoldenrod = 51;
    ///<summary>A system-defined color.</summary>
    DarkGray = 52;
    ///<summary>A system-defined color.</summary>
    DarkGreen = 53;
    ///<summary>A system-defined color.</summary>
    DarkKhaki = 54;
    ///<summary>A system-defined color.</summary>
    DarkMagenta = 55;
    ///<summary>A system-defined color.</summary>
    DarkOliveGreen = 56;
    ///<summary>A system-defined color.</summary>
    DarkOrange = 57;
    ///<summary>A system-defined color.</summary>
    DarkOrchid = 58;
    ///<summary>A system-defined color.</summary>
    DarkRed = 59;
    ///<summary>A system-defined color.</summary>
    DarkSalmon = 60;
    ///<summary>A system-defined color.</summary>
    DarkSeaGreen = 61;
    ///<summary>A system-defined color.</summary>
    DarkSlateBlue = 62;
    ///<summary>A system-defined color.</summary>
    DarkSlateGray = 63;
    ///<summary>A system-defined color.</summary>
    DarkTurquoise = 64;
    ///<summary>A system-defined color.</summary>
    DarkViolet = 65;
    ///<summary>A system-defined color.</summary>
    DeepPink = 66;
    ///<summary>A system-defined color.</summary>
    DeepSkyBlue = 67;
    ///<summary>A system-defined color.</summary>
    DimGray = 68;
    ///<summary>A system-defined color.</summary>
    DodgerBlue = 69;
    ///<summary>A system-defined color.</summary>
    Firebrick = 70;
    ///<summary>A system-defined color.</summary>
    FloralWhite = 71;
    ///<summary>A system-defined color.</summary>
    ForestGreen = 72;
    ///<summary>A system-defined color.</summary>
    Fuchsia = 73;
    ///<summary>A system-defined color.</summary>
    Gainsboro = 74;
    ///<summary>A system-defined color.</summary>
    GhostWhite = 75;
    ///<summary>A system-defined color.</summary>
    Gold = 76;
    ///<summary>A system-defined color.</summary>
    Goldenrod = 77;
    ///<summary>A system-defined color.</summary>
    Gray = 78;
    ///<summary>A system-defined color.</summary>
    Green = 79;
    ///<summary>A system-defined color.</summary>
    GreenYellow = 80;
    ///<summary>A system-defined color.</summary>
    Honeydew = 81;
    ///<summary>A system-defined color.</summary>
    HotPink = 82;
    ///<summary>A system-defined color.</summary>
    IndianRed = 83;
    ///<summary>A system-defined color.</summary>
    Indigo = 84;
    ///<summary>A system-defined color.</summary>
    Ivory = 85;
    ///<summary>A system-defined color.</summary>
    Khaki = 86;
    ///<summary>A system-defined color.</summary>
    Lavender = 87;
    ///<summary>A system-defined color.</summary>
    LavenderBlush = 88;
    ///<summary>A system-defined color.</summary>
    LawnGreen = 89;
    ///<summary>A system-defined color.</summary>
    LemonChiffon = 90;
    ///<summary>A system-defined color.</summary>
    LightBlue = 91;
    ///<summary>A system-defined color.</summary>
    LightCoral = 92;
    ///<summary>A system-defined color.</summary>
    LightCyan = 93;
    ///<summary>A system-defined color.</summary>
    LightGoldenrodYellow = 94;
    ///<summary>A system-defined color.</summary>
    LightGray = 95;
    ///<summary>A system-defined color.</summary>
    LightGreen = 96;
    ///<summary>A system-defined color.</summary>
    LightPink = 97;
    ///<summary>A system-defined color.</summary>
    LightSalmon = 98;
    ///<summary>A system-defined color.</summary>
    LightSeaGreen = 99;
    ///<summary>A system-defined color.</summary>
    LightSkyBlue = 100;
    ///<summary>A system-defined color.</summary>
    LightSlateGray = 101;
    ///<summary>A system-defined color.</summary>
    LightSteelBlue = 102;
    ///<summary>A system-defined color.</summary>
    LightYellow = 103;
    ///<summary>A system-defined color.</summary>
    Lime = 104;
    ///<summary>A system-defined color.</summary>
    LimeGreen = 105;
    ///<summary>A system-defined color.</summary>
    Linen = 106;
    ///<summary>A system-defined color.</summary>
    Magenta = 107;
    ///<summary>A system-defined color.</summary>
    Maroon = 108;
    ///<summary>A system-defined color.</summary>
    MediumAquamarine = 109;
    ///<summary>A system-defined color.</summary>
    MediumBlue = 110;
    ///<summary>A system-defined color.</summary>
    MediumOrchid = 111;
    ///<summary>A system-defined color.</summary>
    MediumPurple = 112;
    ///<summary>A system-defined color.</summary>
    MediumSeaGreen = 113;
    ///<summary>A system-defined color.</summary>
    MediumSlateBlue = 114;
    ///<summary>A system-defined color.</summary>
    MediumSpringGreen = 115;
    ///<summary>A system-defined color.</summary>
    MediumTurquoise = 116;
    ///<summary>A system-defined color.</summary>
    MediumVioletRed = 117;
    ///<summary>A system-defined color.</summary>
    MidnightBlue = 118;
    ///<summary>A system-defined color.</summary>
    MintCream = 119;
    ///<summary>A system-defined color.</summary>
    MistyRose = 120;
    ///<summary>A system-defined color.</summary>
    Moccasin = 121;
    ///<summary>A system-defined color.</summary>
    NavajoWhite = 122;
    ///<summary>A system-defined color.</summary>
    Navy = 123;
    ///<summary>A system-defined color.</summary>
    OldLace = 124;
    ///<summary>A system-defined color.</summary>
    Olive = 125;
    ///<summary>A system-defined color.</summary>
    OliveDrab = 126;
    ///<summary>A system-defined color.</summary>
    Orange = 127;
    ///<summary>A system-defined color.</summary>
    OrangeRed = 128;
    ///<summary>A system-defined color.</summary>
    Orchid = 129;
    ///<summary>A system-defined color.</summary>
    PaleGoldenrod = 130;
    ///<summary>A system-defined color.</summary>
    PaleGreen = 131;
    ///<summary>A system-defined color.</summary>
    PaleTurquoise = 132;
    ///<summary>A system-defined color.</summary>
    PaleVioletRed = 133;
    ///<summary>A system-defined color.</summary>
    PapayaWhip = 134;
    ///<summary>A system-defined color.</summary>
    PeachPuff = 135;
    ///<summary>A system-defined color.</summary>
    Peru = 136;
    ///<summary>A system-defined color.</summary>
    Pink = 137;
    ///<summary>A system-defined color.</summary>
    Plum = 138;
    ///<summary>A system-defined color.</summary>
    PowderBlue = 139;
    ///<summary>A system-defined color.</summary>
    Purple = 140;
    ///<summary>A system-defined color.</summary>
    Red = 141;
    ///<summary>A system-defined color.</summary>
    RosyBrown = 142;
    ///<summary>A system-defined color.</summary>
    RoyalBlue = 143;
    ///<summary>A system-defined color.</summary>
    SaddleBrown = 144;
    ///<summary>A system-defined color.</summary>
    Salmon = 145;
    ///<summary>A system-defined color.</summary>
    SandyBrown = 146;
    ///<summary>A system-defined color.</summary>
    SeaGreen = 147;
    ///<summary>A system-defined color.</summary>
    SeaShell = 148;
    ///<summary>A system-defined color.</summary>
    Sienna = 149;
    ///<summary>A system-defined color.</summary>
    Silver = 150;
    ///<summary>A system-defined color.</summary>
    SkyBlue = 151;
    ///<summary>A system-defined color.</summary>
    SlateBlue = 152;
    ///<summary>A system-defined color.</summary>
    SlateGray = 153;
    ///<summary>A system-defined color.</summary>
    Snow = 154;
    ///<summary>A system-defined color.</summary>
    SpringGreen = 155;
    ///<summary>A system-defined color.</summary>
    SteelBlue = 156;
    ///<summary>A system-defined color.</summary>
    Tan = 157;
    ///<summary>A system-defined color.</summary>
    Teal = 158;
    ///<summary>A system-defined color.</summary>
    Thistle = 159;
    ///<summary>A system-defined color.</summary>
    Tomato = 160;
    ///<summary>A system-defined color.</summary>
    Turquoise = 161;
    ///<summary>A system-defined color.</summary>
    Violet = 162;
    ///<summary>A system-defined color.</summary>
    Wheat = 163;
    ///<summary>A system-defined color.</summary>
    White = 164;
    ///<summary>A system-defined color.</summary>
    WhiteSmoke = 165;
    ///<summary>A system-defined color.</summary>
    Yellow = 166;
    ///<summary>A system-defined color.</summary>
    YellowGreen = 167;
    ///<summary>The system-defined face color of a 3-D element.</summary>
    ButtonFace = 168;
    ///<summary>The system-defined color that is the highlight color of a 3-D element. This color is applied to parts of a 3-D element that face the light source.</summary>
    ButtonHighlight = 169;
    ///<summary>The system-defined color that is the shadow color of a 3-D element. This color is applied to parts of a 3-D element that face away from the light source.</summary>
    ButtonShadow = 170;
    ///<summary>The system-defined color of the lightest color in the color gradient of an active window's title bar.</summary>
    GradientActiveCaption = 171;
    ///<summary>The system-defined color of the lightest color in the color gradient of an inactive window's title bar. </summary>
    GradientInactiveCaption = 172;
    ///<summary>The system-defined color of the background of a menu bar.</summary>
    MenuBar = 173;
    ///<summary>The system-defined color used to highlight menu items when the menu appears as a flat menu.</summary>
    MenuHighlight = 174;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies the printer's duplex setting.</summary>
  [DNTypeName('System.Drawing.Printing.Duplex')]
  DNDuplex = type Integer;
  DNDuplexHelper = record helper for DNDuplex
  public const
    ///<summary>Single-sided printing.</summary>
    Simplex = 1;
    ///<summary>Double-sided, vertical printing.</summary>
    Vertical = 2;
    ///<summary>Double-sided, horizontal printing.</summary>
    Horizontal = 3;
    ///<summary>The printer's default duplex setting.</summary>
    Default_ = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies the standard paper sizes.</summary>
  [DNTypeName('System.Drawing.Printing.PaperKind')]
  DNPaperKind = type Integer;
  DNPaperKindHelper = record helper for DNPaperKind
  public const
    ///<summary>The paper size is defined by the user.</summary>
    Custom = 0;
    ///<summary>Letter paper (8.5 in. by 11 in.).</summary>
    Letter = 1;
    ///<summary>Letter small paper (8.5 in. by 11 in.).</summary>
    LetterSmall = 2;
    ///<summary>Tabloid paper (11 in. by 17 in.).</summary>
    Tabloid = 3;
    ///<summary>Ledger paper (17 in. by 11 in.).</summary>
    Ledger = 4;
    ///<summary>Legal paper (8.5 in. by 14 in.).</summary>
    Legal = 5;
    ///<summary>Statement paper (5.5 in. by 8.5 in.).</summary>
    Statement = 6;
    ///<summary>Executive paper (7.25 in. by 10.5 in.).</summary>
    Executive = 7;
    ///<summary>A3 paper (297 mm by 420 mm).</summary>
    A3 = 8;
    ///<summary>A4 paper (210 mm by 297 mm).</summary>
    A4 = 9;
    ///<summary>A4 small paper (210 mm by 297 mm).</summary>
    A4Small = 10;
    ///<summary>A5 paper (148 mm by 210 mm).</summary>
    A5 = 11;
    ///<summary>B4 paper (250 mm by 353 mm).</summary>
    B4 = 12;
    ///<summary>B5 paper (176 mm by 250 mm).</summary>
    B5 = 13;
    ///<summary>Folio paper (8.5 in. by 13 in.).</summary>
    Folio = 14;
    ///<summary>Quarto paper (215 mm by 275 mm).</summary>
    Quarto = 15;
    ///<summary>Standard paper (10 in. by 14 in.).</summary>
    Standard10x14 = 16;
    ///<summary>Standard paper (11 in. by 17 in.).</summary>
    Standard11x17 = 17;
    ///<summary>Note paper (8.5 in. by 11 in.).</summary>
    Note = 18;
    ///<summary>#9 envelope (3.875 in. by 8.875 in.).</summary>
    Number9Envelope = 19;
    ///<summary>#10 envelope (4.125 in. by 9.5 in.).</summary>
    Number10Envelope = 20;
    ///<summary>#11 envelope (4.5 in. by 10.375 in.).</summary>
    Number11Envelope = 21;
    ///<summary>#12 envelope (4.75 in. by 11 in.).</summary>
    Number12Envelope = 22;
    ///<summary>#14 envelope (5 in. by 11.5 in.).</summary>
    Number14Envelope = 23;
    ///<summary>C paper (17 in. by 22 in.).</summary>
    CSheet = 24;
    ///<summary>D paper (22 in. by 34 in.).</summary>
    DSheet = 25;
    ///<summary>E paper (34 in. by 44 in.).</summary>
    ESheet = 26;
    ///<summary>DL envelope (110 mm by 220 mm).</summary>
    DLEnvelope = 27;
    ///<summary>C5 envelope (162 mm by 229 mm).</summary>
    C5Envelope = 28;
    ///<summary>C3 envelope (324 mm by 458 mm).</summary>
    C3Envelope = 29;
    ///<summary>C4 envelope (229 mm by 324 mm).</summary>
    C4Envelope = 30;
    ///<summary>C6 envelope (114 mm by 162 mm).</summary>
    C6Envelope = 31;
    ///<summary>C65 envelope (114 mm by 229 mm).</summary>
    C65Envelope = 32;
    ///<summary>B4 envelope (250 mm by 353 mm).</summary>
    B4Envelope = 33;
    ///<summary>B5 envelope (176 mm by 250 mm).</summary>
    B5Envelope = 34;
    ///<summary>B6 envelope (176 mm by 125 mm).</summary>
    B6Envelope = 35;
    ///<summary>Italy envelope (110 mm by 230 mm).</summary>
    ItalyEnvelope = 36;
    ///<summary>Monarch envelope (3.875 in. by 7.5 in.).</summary>
    MonarchEnvelope = 37;
    ///<summary>6 3/4 envelope (3.625 in. by 6.5 in.).</summary>
    PersonalEnvelope = 38;
    ///<summary>US standard fanfold (14.875 in. by 11 in.).</summary>
    USStandardFanfold = 39;
    ///<summary>German standard fanfold (8.5 in. by 12 in.).</summary>
    GermanStandardFanfold = 40;
    ///<summary>German legal fanfold (8.5 in. by 13 in.).</summary>
    GermanLegalFanfold = 41;
    ///<summary>ISO B4 (250 mm by 353 mm).</summary>
    IsoB4 = 42;
    ///<summary>Japanese postcard (100 mm by 148 mm).</summary>
    JapanesePostcard = 43;
    ///<summary>Standard paper (9 in. by 11 in.).</summary>
    Standard9x11 = 44;
    ///<summary>Standard paper (10 in. by 11 in.).</summary>
    Standard10x11 = 45;
    ///<summary>Standard paper (15 in. by 11 in.).</summary>
    Standard15x11 = 46;
    ///<summary>Invitation envelope (220 mm by 220 mm).</summary>
    InviteEnvelope = 47;
    ///<summary>Letter extra paper (9.275 in. by 12 in.). This value is specific to the PostScript driver and is used only by Linotronic printers in order to conserve paper.</summary>
    LetterExtra = 50;
    ///<summary>Legal extra paper (9.275 in. by 15 in.). This value is specific to the PostScript driver and is used only by Linotronic printers in order to conserve paper.</summary>
    LegalExtra = 51;
    ///<summary>Tabloid extra paper (11.69 in. by 18 in.). This value is specific to the PostScript driver and is used only by Linotronic printers in order to conserve paper.</summary>
    TabloidExtra = 52;
    ///<summary>A4 extra paper (236 mm by 322 mm). This value is specific to the PostScript driver and is used only by Linotronic printers to help save paper.</summary>
    A4Extra = 53;
    ///<summary>Letter transverse paper (8.275 in. by 11 in.).</summary>
    LetterTransverse = 54;
    ///<summary>A4 transverse paper (210 mm by 297 mm).</summary>
    A4Transverse = 55;
    ///<summary>Letter extra transverse paper (9.275 in. by 12 in.).</summary>
    LetterExtraTransverse = 56;
    ///<summary>SuperA/SuperA/A4 paper (227 mm by 356 mm).</summary>
    APlus = 57;
    ///<summary>SuperB/SuperB/A3 paper (305 mm by 487 mm).</summary>
    BPlus = 58;
    ///<summary>Letter plus paper (8.5 in. by 12.69 in.).</summary>
    LetterPlus = 59;
    ///<summary>A4 plus paper (210 mm by 330 mm).</summary>
    A4Plus = 60;
    ///<summary>A5 transverse paper (148 mm by 210 mm).</summary>
    A5Transverse = 61;
    ///<summary>JIS B5 transverse paper (182 mm by 257 mm).</summary>
    B5Transverse = 62;
    ///<summary>A3 extra paper (322 mm by 445 mm).</summary>
    A3Extra = 63;
    ///<summary>A5 extra paper (174 mm by 235 mm).</summary>
    A5Extra = 64;
    ///<summary>ISO B5 extra paper (201 mm by 276 mm).</summary>
    B5Extra = 65;
    ///<summary>A2 paper (420 mm by 594 mm).</summary>
    A2 = 66;
    ///<summary>A3 transverse paper (297 mm by 420 mm).</summary>
    A3Transverse = 67;
    ///<summary>A3 extra transverse paper (322 mm by 445 mm).</summary>
    A3ExtraTransverse = 68;
    ///<summary>Japanese double postcard (200 mm by 148 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseDoublePostcard = 69;
    ///<summary>A6 paper (105 mm by 148 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    A6 = 70;
    ///<summary>Japanese Kaku #2 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeKakuNumber2 = 71;
    ///<summary>Japanese Kaku #3 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeKakuNumber3 = 72;
    ///<summary>Japanese Chou #3 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeChouNumber3 = 73;
    ///<summary>Japanese Chou #4 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeChouNumber4 = 74;
    ///<summary>Letter rotated paper (11 in. by 8.5 in.).</summary>
    LetterRotated = 75;
    ///<summary>A3 rotated paper (420 mm by 297 mm).</summary>
    A3Rotated = 76;
    ///<summary>A4 rotated paper (297 mm by 210 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    A4Rotated = 77;
    ///<summary>A5 rotated paper (210 mm by 148 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    A5Rotated = 78;
    ///<summary>JIS B4 rotated paper (364 mm by 257 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    B4JisRotated = 79;
    ///<summary>JIS B5 rotated paper (257 mm by 182 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    B5JisRotated = 80;
    ///<summary>Japanese rotated postcard (148 mm by 100 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapanesePostcardRotated = 81;
    ///<summary>Japanese rotated double postcard (148 mm by 200 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseDoublePostcardRotated = 82;
    ///<summary>A6 rotated paper (148 mm by 105 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    A6Rotated = 83;
    ///<summary>Japanese rotated Kaku #2 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeKakuNumber2Rotated = 84;
    ///<summary>Japanese rotated Kaku #3 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeKakuNumber3Rotated = 85;
    ///<summary>Japanese rotated Chou #3 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeChouNumber3Rotated = 86;
    ///<summary>Japanese rotated Chou #4 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeChouNumber4Rotated = 87;
    ///<summary>JIS B6 paper (128 mm by 182 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    B6Jis = 88;
    ///<summary>JIS B6 rotated paper (182 mm by 128 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    B6JisRotated = 89;
    ///<summary>Standard paper (12 in. by 11 in.). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Standard12x11 = 90;
    ///<summary>Japanese You #4 envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeYouNumber4 = 91;
    ///<summary>Japanese You #4 rotated envelope. Requires Windows 98, Windows NT 4.0, or later.</summary>
    JapaneseEnvelopeYouNumber4Rotated = 92;
    ///<summary> 16K paper (146 mm by 215 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc16K = 93;
    ///<summary> 32K paper (97 mm by 151 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc32K = 94;
    ///<summary> 32K big paper (97 mm by 151 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc32KBig = 95;
    ///<summary> #1 envelope (102 mm by 165 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber1 = 96;
    ///<summary> #2 envelope (102 mm by 176 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber2 = 97;
    ///<summary> #3 envelope (125 mm by 176 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber3 = 98;
    ///<summary> #4 envelope (110 mm by 208 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber4 = 99;
    ///<summary> #5 envelope (110 mm by 220 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber5 = 100;
    ///<summary> #6 envelope (120 mm by 230 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber6 = 101;
    ///<summary> #7 envelope (160 mm by 230 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber7 = 102;
    ///<summary> #8 envelope (120 mm by 309 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber8 = 103;
    ///<summary> #9 envelope (229 mm by 324 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber9 = 104;
    ///<summary> #10 envelope (324 mm by 458 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber10 = 105;
    ///<summary> 16K rotated paper (146 mm by 215 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc16KRotated = 106;
    ///<summary> 32K rotated paper (97 mm by 151 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc32KRotated = 107;
    ///<summary> 32K big rotated paper (97 mm by 151 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    Prc32KBigRotated = 108;
    ///<summary> #1 rotated envelope (165 mm by 102 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber1Rotated = 109;
    ///<summary> #2 rotated envelope (176 mm by 102 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber2Rotated = 110;
    ///<summary> #3 rotated envelope (176 mm by 125 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber3Rotated = 111;
    ///<summary> #4 rotated envelope (208 mm by 110 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber4Rotated = 112;
    ///<summary> Envelope #5 rotated envelope (220 mm by 110 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber5Rotated = 113;
    ///<summary> #6 rotated envelope (230 mm by 120 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber6Rotated = 114;
    ///<summary> #7 rotated envelope (230 mm by 160 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber7Rotated = 115;
    ///<summary> #8 rotated envelope (309 mm by 120 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber8Rotated = 116;
    ///<summary> #9 rotated envelope (324 mm by 229 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber9Rotated = 117;
    ///<summary> #10 rotated envelope (458 mm by 324 mm). Requires Windows 98, Windows NT 4.0, or later.</summary>
    PrcEnvelopeNumber10Rotated = 118;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Standard paper sources.</summary>
  [DNTypeName('System.Drawing.Printing.PaperSourceKind')]
  DNPaperSourceKind = type Integer;
  DNPaperSourceKindHelper = record helper for DNPaperSourceKind
  public const
    ///<summary>The upper bin of a printer (or the default bin, if the printer only has one bin).</summary>
    Upper = 1;
    ///<summary>The lower bin of a printer.</summary>
    Lower = 2;
    ///<summary>The middle bin of a printer.</summary>
    Middle = 3;
    ///<summary>Manually fed paper.</summary>
    Manual = 4;
    ///<summary>An envelope.</summary>
    Envelope = 5;
    ///<summary>Manually fed envelope.</summary>
    ManualFeed = 6;
    ///<summary>Automatically fed paper.</summary>
    AutomaticFeed = 7;
    ///<summary>A tractor feed.</summary>
    TractorFeed = 8;
    ///<summary>Small-format paper.</summary>
    SmallFormat = 9;
    ///<summary>Large-format paper.</summary>
    LargeFormat = 10;
    ///<summary>The printer's large-capacity bin.</summary>
    LargeCapacity = 11;
    ///<summary>A paper cassette.</summary>
    Cassette = 14;
    ///<summary>The printer's default input bin.</summary>
    FormSource = 15;
    ///<summary>A printer-specific paper source.</summary>
    Custom = 257;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies the type of print operation occurring.</summary>
  [DNTypeName('System.Drawing.Printing.PrintAction')]
  DNPrintAction = type Integer;
  DNPrintActionHelper = record helper for DNPrintAction
  public const
    ///<summary>The print operation is printing to a file.</summary>
    PrintToFile = 0;
    ///<summary>The print operation is a print preview.</summary>
    PrintToPreview = 1;
    ///<summary>The print operation is printing to a printer.</summary>
    PrintToPrinter = 2;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies a printer resolution.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterResolutionKind')]
  DNPrinterResolutionKind = type Integer;
  DNPrinterResolutionKindHelper = record helper for DNPrinterResolutionKind
  public const
    ///<summary>Custom resolution.</summary>
    Custom = 0;
    ///<summary>High resolution.</summary>
    High = -4;
    ///<summary>Medium resolution.</summary>
    Medium = -3;
    ///<summary>Low resolution.</summary>
    Low = -2;
    ///<summary>Draft-quality resolution.</summary>
    Draft = -1;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies several of the units of measure used for printing.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterUnit')]
  DNPrinterUnit = type Integer;
  DNPrinterUnitHelper = record helper for DNPrinterUnit
  public const
    ///<summary>The default unit (0.01 in.).</summary>
    Display = 0;
    ///<summary>One-thousandth of an inch (0.001 in.).</summary>
    ThousandthsOfAnInch = 1;
    ///<summary>One-hundredth of a millimeter (0.01 mm).</summary>
    HundredthsOfAMillimeter = 2;
    ///<summary>One-tenth of a millimeter (0.1 mm).</summary>
    TenthsOfAMillimeter = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies the type of printing that code is allowed to do.</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermissionLevel')]
  DNPrintingPermissionLevel = type Integer;
  DNPrintingPermissionLevelHelper = record helper for DNPrintingPermissionLevel
  public const
    ///<summary>Prevents access to printers. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting" />
    ///  is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" />
    ///  .</summary>
    NoPrinting = 0;
    ///<summary>Provides printing only from a restricted dialog box. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" />
    ///  is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" />
    ///  .</summary>
    SafePrinting = 1;
    ///<summary>Provides printing programmatically to the default printer, along with safe printing through semirestricted dialog box. <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" />
    ///  is a subset of <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" />
    ///  .</summary>
    DefaultPrinting = 2;
    ///<summary>Provides full access to all printers.</summary>
    AllPrinting = 3;
  end;


  //-------------namespace: System.Drawing.Printing----------------
  ///<summary>Specifies the part of the document to print.</summary>
  [DNTypeName('System.Drawing.Printing.PrintRange')]
  DNPrintRange = type Integer;
  DNPrintRangeHelper = record helper for DNPrintRange
  public const
    ///<summary>All pages are printed.</summary>
    AllPages = 0;
    ///<summary>The selected pages are printed.</summary>
    Selection = 1;
    ///<summary>The pages between <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  and <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  are printed.</summary>
    SomePages = 2;
    ///<summary>The currently displayed page is printed</summary>
    CurrentPage = 4194304;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies how much an image is rotated and the axis used to flip the image.</summary>
  [DNTypeName('System.Drawing.RotateFlipType')]
  DNRotateFlipType = type Integer;
  DNRotateFlipTypeHelper = record helper for DNRotateFlipType
  public const
    ///<summary>Specifies a 180-degree clockwise rotation followed by a horizontal and vertical flip.</summary>
    Rotate180FlipXY = 0;
    ///<summary>Specifies no clockwise rotation and no flipping.</summary>
    RotateNoneFlipNone = 0;
    ///<summary>Specifies a 90-degree clockwise rotation without flipping.</summary>
    Rotate90FlipNone = 1;
    ///<summary>Specifies a 270-degree clockwise rotation followed by a horizontal and vertical flip.</summary>
    Rotate270FlipXY = 1;
    ///<summary>Specifies a 180-degree clockwise rotation without flipping.</summary>
    Rotate180FlipNone = 2;
    ///<summary>Specifies no clockwise rotation followed by a horizontal and vertical flip.</summary>
    RotateNoneFlipXY = 2;
    ///<summary>Specifies a 270-degree clockwise rotation without flipping.</summary>
    Rotate270FlipNone = 3;
    ///<summary>Specifies a 90-degree clockwise rotation followed by a horizontal and vertical flip.</summary>
    Rotate90FlipXY = 3;
    ///<summary>Specifies no clockwise rotation followed by a horizontal flip.</summary>
    RotateNoneFlipX = 4;
    ///<summary>Specifies a 180-degree clockwise rotation followed by a vertical flip.</summary>
    Rotate180FlipY = 4;
    ///<summary>Specifies a 90-degree clockwise rotation followed by a horizontal flip.</summary>
    Rotate90FlipX = 5;
    ///<summary>Specifies a 270-degree clockwise rotation followed by a vertical flip.</summary>
    Rotate270FlipY = 5;
    ///<summary>Specifies a 180-degree clockwise rotation followed by a horizontal flip.</summary>
    Rotate180FlipX = 6;
    ///<summary>Specifies no clockwise rotation followed by a vertical flip.</summary>
    RotateNoneFlipY = 6;
    ///<summary>Specifies a 270-degree clockwise rotation followed by a horizontal flip.</summary>
    Rotate270FlipX = 7;
    ///<summary>Specifies a 90-degree clockwise rotation followed by a vertical flip.</summary>
    Rotate90FlipY = 7;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies the alignment of a text string relative to its layout rectangle.</summary>
  [DNTypeName('System.Drawing.StringAlignment')]
  DNStringAlignment = type Integer;
  DNStringAlignmentHelper = record helper for DNStringAlignment
  public const
    ///<summary>Specifies the text be aligned near the layout. In a left-to-right layout, the near position is left. In a right-to-left layout, the near position is right.</summary>
    Near_ = 0;
    ///<summary>Specifies that text is aligned in the center of the layout rectangle.</summary>
    Center = 1;
    ///<summary>Specifies that text is aligned far from the origin position of the layout rectangle. In a left-to-right layout, the far position is right. In a right-to-left layout, the far position is left.</summary>
    Far_ = 2;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>The <see cref="T:System.Drawing.StringDigitSubstitute" />
  ///  enumeration specifies how to substitute digits in a string according to a user's locale or language.</summary>
  [DNTypeName('System.Drawing.StringDigitSubstitute')]
  DNStringDigitSubstitute = type Integer;
  DNStringDigitSubstituteHelper = record helper for DNStringDigitSubstitute
  public const
    ///<summary>Specifies a user-defined substitution scheme.</summary>
    User = 0;
    ///<summary>Specifies to disable substitutions.</summary>
    None = 1;
    ///<summary>Specifies substitution digits that correspond with the official national language of the user's locale.</summary>
    National = 2;
    ///<summary>Specifies substitution digits that correspond with the user's native script or language, which may be different from the official national language of the user's locale.</summary>
    Traditional = 3;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies the display and layout information for text strings.</summary>
  [DNTypeName('System.Drawing.StringFormatFlags')]
  DNStringFormatFlags = type Integer;
  DNStringFormatFlagsHelper = record helper for DNStringFormatFlags
  public const
    ///<summary>Text is displayed from right to left.</summary>
    DirectionRightToLeft = 1;
    ///<summary>Text is vertically aligned.</summary>
    DirectionVertical = 2;
    ///<summary>Parts of characters are allowed to overhang the string's layout rectangle. By default, characters are repositioned to avoid any overhang.</summary>
    FitBlackBox = 4;
    ///<summary>Control characters such as the left-to-right mark are shown in the output with a representative glyph.</summary>
    DisplayFormatControl = 32;
    ///<summary>Fallback to alternate fonts for characters not supported in the requested font is disabled. Any missing characters are displayed with the fonts missing glyph, usually an open square.</summary>
    NoFontFallback = 1024;
    ///<summary>Includes the trailing space at the end of each line. By default the boundary rectangle returned by the <see cref="Overload:System.Drawing.Graphics.MeasureString" />
    ///  method excludes the space at the end of each line. Set this flag to include that space in measurement.</summary>
    MeasureTrailingSpaces = 2048;
    ///<summary>Text wrapping between lines when formatting within a rectangle is disabled. This flag is implied when a point is passed instead of a rectangle, or when the specified rectangle has a zero line length.</summary>
    NoWrap = 4096;
    ///<summary>Only entire lines are laid out in the formatting rectangle. By default layout continues until the end of the text, or until no more lines are visible as a result of clipping, whichever comes first. Note that the default settings allow the last line to be partially obscured by a formatting rectangle that is not a whole multiple of the line height. To ensure that only whole lines are seen, specify this value and be careful to provide a formatting rectangle at least as tall as the height of one line.</summary>
    LineLimit = 8192;
    ///<summary>Overhanging parts of glyphs, and unwrapped text reaching outside the formatting rectangle are allowed to show. By default all text and glyph parts reaching outside the formatting rectangle are clipped.</summary>
    NoClip = 16384;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies how to trim characters from a string that does not completely fit into a layout shape.</summary>
  [DNTypeName('System.Drawing.StringTrimming')]
  DNStringTrimming = type Integer;
  DNStringTrimmingHelper = record helper for DNStringTrimming
  public const
    ///<summary>Specifies no trimming.</summary>
    None = 0;
    ///<summary>Specifies that the text is trimmed to the nearest character.</summary>
    Character = 1;
    ///<summary>Specifies that text is trimmed to the nearest word.</summary>
    Word = 2;
    ///<summary>Specifies that the text is trimmed to the nearest character, and an ellipsis is inserted at the end of a trimmed line.</summary>
    EllipsisCharacter = 3;
    ///<summary>Specifies that text is trimmed to the nearest word, and an ellipsis is inserted at the end of a trimmed line.</summary>
    EllipsisWord = 4;
    ///<summary>The center is removed from trimmed lines and replaced by an ellipsis. The algorithm keeps as much of the last slash-delimited segment of the line as possible.</summary>
    EllipsisPath = 5;
  end;


  //-------------namespace: System.Drawing----------------
  ///<summary>Specifies the units of measure for a text string.</summary>
  [DNTypeName('System.Drawing.StringUnit')]
  DNStringUnit = type Integer;
  DNStringUnitHelper = record helper for DNStringUnit
  public const
    ///<summary>Specifies world units as the unit of measure.</summary>
    World = 0;
    ///<summary>Specifies the device unit as the unit of measure.</summary>
    Display = 1;
    ///<summary>Specifies a pixel as the unit of measure.</summary>
    Pixel = 2;
    ///<summary>Specifies a printer's point (1/72 inch) as the unit of measure.</summary>
    Point = 3;
    ///<summary>Specifies an inch as the unit of measure.</summary>
    Inch = 4;
    ///<summary>Specifies 1/300 of an inch as the unit of measure.</summary>
    Document = 5;
    ///<summary>Specifies a millimeter as the unit of measure </summary>
    Millimeter = 6;
    ///<summary>Specifies a printer's em size of 32 as the unit of measure.</summary>
    Em = 32;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>Specifies a generic <see cref="T:System.Drawing.FontFamily" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.Text.GenericFontFamilies')]
  DNGenericFontFamilies = type Integer;
  DNGenericFontFamiliesHelper = record helper for DNGenericFontFamilies
  public const
    ///<summary>A generic Serif <see cref="T:System.Drawing.FontFamily" />
    ///  object.</summary>
    Serif = 0;
    ///<summary>A generic Sans Serif <see cref="T:System.Drawing.FontFamily" />
    ///  object.</summary>
    SansSerif = 1;
    ///<summary>A generic Monospace <see cref="T:System.Drawing.FontFamily" />
    ///  object.</summary>
    Monospace = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>Specifies the type of display for hot-key prefixes that relate to text.</summary>
  [DNTypeName('System.Drawing.Text.HotkeyPrefix')]
  DNHotkeyPrefix = type Integer;
  DNHotkeyPrefixHelper = record helper for DNHotkeyPrefix
  public const
    ///<summary>No hot-key prefix.</summary>
    None = 0;
    ///<summary>Display the hot-key prefix.</summary>
    Show = 1;
    ///<summary>Do not display the hot-key prefix.</summary>
    Hide = 2;
  end;


  //-------------namespace: System.Drawing.Text----------------
  ///<summary>Specifies the quality of text rendering.</summary>
  [DNTypeName('System.Drawing.Text.TextRenderingHint')]
  DNTextRenderingHint = type Integer;
  DNTextRenderingHintHelper = record helper for DNTextRenderingHint
  public const
    ///<summary>Each character is drawn using its glyph bitmap, with the system default rendering hint. The text will be drawn using whatever font-smoothing settings the user has selected for the system.</summary>
    SystemDefault = 0;
    ///<summary>Each character is drawn using its glyph bitmap. Hinting is used to improve character appearance on stems and curvature.</summary>
    SingleBitPerPixelGridFit = 1;
    ///<summary>Each character is drawn using its glyph bitmap. Hinting is not used.</summary>
    SingleBitPerPixel = 2;
    ///<summary>Each character is drawn using its antialiased glyph bitmap with hinting. Much better quality due to antialiasing, but at a higher performance cost.</summary>
    AntiAliasGridFit = 3;
    ///<summary>Each character is drawn using its antialiased glyph bitmap without hinting. Better quality due to antialiasing. Stem width differences may be noticeable because hinting is turned off.</summary>
    AntiAlias = 4;
    ///<summary>Each character is drawn using its glyph ClearType bitmap with hinting. The highest quality setting. Used to take advantage of ClearType font features.</summary>
    ClearTypeGridFit = 5;
  end;




type


{ declares }

  DNIPropertyValueUIService = interface; // type: System.Drawing.Design.IPropertyValueUIService, namespace: System.Drawing.Design
  DNIToolboxItemProvider = interface; // type: System.Drawing.Design.IToolboxItemProvider, namespace: System.Drawing.Design
  DNIToolboxService = interface; // type: System.Drawing.Design.IToolboxService, namespace: System.Drawing.Design
  DNIToolboxUser = interface; // type: System.Drawing.Design.IToolboxUser, namespace: System.Drawing.Design
  DNIDeviceContext = interface; // type: System.Drawing.IDeviceContext, namespace: System.Drawing
  DNBitmapSuffixInSameAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSameAssemblyAttribute, namespace: System.Drawing
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface; // type: System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute, namespace: System.Drawing
  DNToolboxBitmapAttribute = interface; // type: System.Drawing.ToolboxBitmapAttribute, namespace: System.Drawing
  DNPrintingPermissionAttribute = interface; // type: System.Drawing.Printing.PrintingPermissionAttribute, namespace: System.Drawing.Printing
  DNCategoryNameCollection = interface; // type: System.Drawing.Design.CategoryNameCollection, namespace: System.Drawing.Design
  DNToolboxItemCollection = interface; // type: System.Drawing.Design.ToolboxItemCollection, namespace: System.Drawing.Design
  DNFontConverter_FontUnitConverter = interface; // type: System.Drawing.FontConverter+FontUnitConverter, namespace: System.Drawing
  DNIconConverter = interface; // type: System.Drawing.IconConverter, namespace: System.Drawing
  DNMarginsConverter = interface; // type: System.Drawing.Printing.MarginsConverter, namespace: System.Drawing.Printing
  DNColorConverter = interface; // type: System.Drawing.ColorConverter, namespace: System.Drawing
  DNFontConverter = interface; // type: System.Drawing.FontConverter, namespace: System.Drawing
  DNFontConverter_FontNameConverter = interface; // type: System.Drawing.FontConverter+FontNameConverter, namespace: System.Drawing
  DNImageConverter = interface; // type: System.Drawing.ImageConverter, namespace: System.Drawing
  DNImageFormatConverter = interface; // type: System.Drawing.ImageFormatConverter, namespace: System.Drawing
  DNPointConverter = interface; // type: System.Drawing.PointConverter, namespace: System.Drawing
  DNRectangleConverter = interface; // type: System.Drawing.RectangleConverter, namespace: System.Drawing
  DNSizeConverter = interface; // type: System.Drawing.SizeConverter, namespace: System.Drawing
  DNSizeFConverter = interface; // type: System.Drawing.SizeFConverter, namespace: System.Drawing
  DNSystemDrawingSection = interface; // type: System.Drawing.Configuration.SystemDrawingSection, namespace: System.Drawing.Configuration
  DNBrushes = interface; // type: System.Drawing.Brushes, namespace: System.Drawing
  DNBufferedGraphics = interface; // type: System.Drawing.BufferedGraphics, namespace: System.Drawing
  DNBufferedGraphicsContext = interface; // type: System.Drawing.BufferedGraphicsContext, namespace: System.Drawing
  DNBufferedGraphicsManager = interface; // type: System.Drawing.BufferedGraphicsManager, namespace: System.Drawing
  DNColorTranslator = interface; // type: System.Drawing.ColorTranslator, namespace: System.Drawing
  DNPropertyValueUIItem = interface; // type: System.Drawing.Design.PropertyValueUIItem, namespace: System.Drawing.Design
  DNToolboxItem = interface; // type: System.Drawing.Design.ToolboxItem, namespace: System.Drawing.Design
  DNUITypeEditor = interface; // type: System.Drawing.Design.UITypeEditor, namespace: System.Drawing.Design
  DNBlend = interface; // type: System.Drawing.Drawing2D.Blend, namespace: System.Drawing.Drawing2D
  DNColorBlend = interface; // type: System.Drawing.Drawing2D.ColorBlend, namespace: System.Drawing.Drawing2D
  DNPathData = interface; // type: System.Drawing.Drawing2D.PathData, namespace: System.Drawing.Drawing2D
  DNRegionData = interface; // type: System.Drawing.Drawing2D.RegionData, namespace: System.Drawing.Drawing2D
  DNImageAnimator = interface; // type: System.Drawing.ImageAnimator, namespace: System.Drawing
  DNBitmapData = interface; // type: System.Drawing.Imaging.BitmapData, namespace: System.Drawing.Imaging
  DNColorMap = interface; // type: System.Drawing.Imaging.ColorMap, namespace: System.Drawing.Imaging
  DNColorMatrix = interface; // type: System.Drawing.Imaging.ColorMatrix, namespace: System.Drawing.Imaging
  DNColorPalette = interface; // type: System.Drawing.Imaging.ColorPalette, namespace: System.Drawing.Imaging
  DNEncoder = interface; // type: System.Drawing.Imaging.Encoder, namespace: System.Drawing.Imaging
  DNEncoderParameter = interface; // type: System.Drawing.Imaging.EncoderParameter, namespace: System.Drawing.Imaging
  DNEncoderParameters = interface; // type: System.Drawing.Imaging.EncoderParameters, namespace: System.Drawing.Imaging
  DNFrameDimension = interface; // type: System.Drawing.Imaging.FrameDimension, namespace: System.Drawing.Imaging
  DNImageAttributes = interface; // type: System.Drawing.Imaging.ImageAttributes, namespace: System.Drawing.Imaging
  DNImageCodecInfo = interface; // type: System.Drawing.Imaging.ImageCodecInfo, namespace: System.Drawing.Imaging
  DNImageFormat = interface; // type: System.Drawing.Imaging.ImageFormat, namespace: System.Drawing.Imaging
  DNMetafileHeader = interface; // type: System.Drawing.Imaging.MetafileHeader, namespace: System.Drawing.Imaging
  DNMetaHeader = interface; // type: System.Drawing.Imaging.MetaHeader, namespace: System.Drawing.Imaging
  DNPropertyItem = interface; // type: System.Drawing.Imaging.PropertyItem, namespace: System.Drawing.Imaging
  DNWmfPlaceableFileHeader = interface; // type: System.Drawing.Imaging.WmfPlaceableFileHeader, namespace: System.Drawing.Imaging
  DNPens = interface; // type: System.Drawing.Pens, namespace: System.Drawing
  DNMargins = interface; // type: System.Drawing.Printing.Margins, namespace: System.Drawing.Printing
  DNPageSettings = interface; // type: System.Drawing.Printing.PageSettings, namespace: System.Drawing.Printing
  DNPaperSize = interface; // type: System.Drawing.Printing.PaperSize, namespace: System.Drawing.Printing
  DNPaperSource = interface; // type: System.Drawing.Printing.PaperSource, namespace: System.Drawing.Printing
  DNPreviewPageInfo = interface; // type: System.Drawing.Printing.PreviewPageInfo, namespace: System.Drawing.Printing
  DNPrintController = interface; // type: System.Drawing.Printing.PrintController, namespace: System.Drawing.Printing
  DNPreviewPrintController = interface; // type: System.Drawing.Printing.PreviewPrintController, namespace: System.Drawing.Printing
  DNStandardPrintController = interface; // type: System.Drawing.Printing.StandardPrintController, namespace: System.Drawing.Printing
  DNPrinterResolution = interface; // type: System.Drawing.Printing.PrinterResolution, namespace: System.Drawing.Printing
  DNPrinterSettings = interface; // type: System.Drawing.Printing.PrinterSettings, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSizeCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSizeCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PaperSourceCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PaperSourceCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_PrinterResolutionCollection = interface; // type: System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection, namespace: System.Drawing.Printing
  DNPrinterSettings_StringCollection = interface; // type: System.Drawing.Printing.PrinterSettings+StringCollection, namespace: System.Drawing.Printing
  DNPrinterUnitConvert = interface; // type: System.Drawing.Printing.PrinterUnitConvert, namespace: System.Drawing.Printing
  DNSystemBrushes = interface; // type: System.Drawing.SystemBrushes, namespace: System.Drawing
  DNSystemColors = interface; // type: System.Drawing.SystemColors, namespace: System.Drawing
  DNSystemFonts = interface; // type: System.Drawing.SystemFonts, namespace: System.Drawing
  DNSystemIcons = interface; // type: System.Drawing.SystemIcons, namespace: System.Drawing
  DNSystemPens = interface; // type: System.Drawing.SystemPens, namespace: System.Drawing
  DNFontCollection = interface; // type: System.Drawing.Text.FontCollection, namespace: System.Drawing.Text
  DNInstalledFontCollection = interface; // type: System.Drawing.Text.InstalledFontCollection, namespace: System.Drawing.Text
  DNPrivateFontCollection = interface; // type: System.Drawing.Text.PrivateFontCollection, namespace: System.Drawing.Text
  DNPrintEventArgs = interface; // type: System.Drawing.Printing.PrintEventArgs, namespace: System.Drawing.Printing
  DNQueryPageSettingsEventArgs = interface; // type: System.Drawing.Printing.QueryPageSettingsEventArgs, namespace: System.Drawing.Printing
  DNPaintValueEventArgs = interface; // type: System.Drawing.Design.PaintValueEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatedEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatedEventArgs, namespace: System.Drawing.Design
  DNToolboxComponentsCreatingEventArgs = interface; // type: System.Drawing.Design.ToolboxComponentsCreatingEventArgs, namespace: System.Drawing.Design
  DNPrintPageEventArgs = interface; // type: System.Drawing.Printing.PrintPageEventArgs, namespace: System.Drawing.Printing
  DNInvalidPrinterException = interface; // type: System.Drawing.Printing.InvalidPrinterException, namespace: System.Drawing.Printing
  DNPrintDocument = interface; // type: System.Drawing.Printing.PrintDocument, namespace: System.Drawing.Printing
  DNBrush = interface; // type: System.Drawing.Brush, namespace: System.Drawing
  DNHatchBrush = interface; // type: System.Drawing.Drawing2D.HatchBrush, namespace: System.Drawing.Drawing2D
  DNLinearGradientBrush = interface; // type: System.Drawing.Drawing2D.LinearGradientBrush, namespace: System.Drawing.Drawing2D
  DNPathGradientBrush = interface; // type: System.Drawing.Drawing2D.PathGradientBrush, namespace: System.Drawing.Drawing2D
  DNSolidBrush = interface; // type: System.Drawing.SolidBrush, namespace: System.Drawing
  DNTextureBrush = interface; // type: System.Drawing.TextureBrush, namespace: System.Drawing
  DNCustomLineCap = interface; // type: System.Drawing.Drawing2D.CustomLineCap, namespace: System.Drawing.Drawing2D
  DNAdjustableArrowCap = interface; // type: System.Drawing.Drawing2D.AdjustableArrowCap, namespace: System.Drawing.Drawing2D
  DNGraphicsContainer = interface; // type: System.Drawing.Drawing2D.GraphicsContainer, namespace: System.Drawing.Drawing2D
  DNGraphicsPath = interface; // type: System.Drawing.Drawing2D.GraphicsPath, namespace: System.Drawing.Drawing2D
  DNGraphicsPathIterator = interface; // type: System.Drawing.Drawing2D.GraphicsPathIterator, namespace: System.Drawing.Drawing2D
  DNGraphicsState = interface; // type: System.Drawing.Drawing2D.GraphicsState, namespace: System.Drawing.Drawing2D
  DNMatrix = interface; // type: System.Drawing.Drawing2D.Matrix, namespace: System.Drawing.Drawing2D
  DNFont = interface; // type: System.Drawing.Font, namespace: System.Drawing
  DNFontFamily = interface; // type: System.Drawing.FontFamily, namespace: System.Drawing
  DNGraphics = interface; // type: System.Drawing.Graphics, namespace: System.Drawing
  DNIcon = interface; // type: System.Drawing.Icon, namespace: System.Drawing
  DNImage = interface; // type: System.Drawing.Image, namespace: System.Drawing
  DNBitmap = interface; // type: System.Drawing.Bitmap, namespace: System.Drawing
  DNMetafile = interface; // type: System.Drawing.Imaging.Metafile, namespace: System.Drawing.Imaging
  DNPen = interface; // type: System.Drawing.Pen, namespace: System.Drawing
  DNRegion = interface; // type: System.Drawing.Region, namespace: System.Drawing
  DNStringFormat = interface; // type: System.Drawing.StringFormat, namespace: System.Drawing
  DNPrintingPermission = interface; // type: System.Drawing.Printing.PrintingPermission, namespace: System.Drawing.Printing
  DNCharacterRange = interface; // type: System.Drawing.CharacterRange, namespace: System.Drawing
  DNColor = interface; // type: System.Drawing.Color, namespace: System.Drawing
  DNPoint = interface; // type: System.Drawing.Point, namespace: System.Drawing
  DNPointF = interface; // type: System.Drawing.PointF, namespace: System.Drawing
  DNRectangle = interface; // type: System.Drawing.Rectangle, namespace: System.Drawing
  DNRectangleF = interface; // type: System.Drawing.RectangleF, namespace: System.Drawing
  DNSize = interface; // type: System.Drawing.Size, namespace: System.Drawing
  DNSizeF = interface; // type: System.Drawing.SizeF, namespace: System.Drawing

{ delegates }

  ///<summary>Represents the method that adds a delegate to an implementation of <see cref="T:System.Drawing.Design.IPropertyValueUIService" />
  ///  .</summary>
  ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
  ///  that can be used to obtain context information. </param>
  ///  <param name="propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" />
  ///  that represents the property being queried. </param>
  ///  <param name="valueUIItemList">An <see cref="T:System.Collections.ArrayList" />
  ///  of <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  objects containing the UI items associated with the property. </param>
  [DNTypeName('System.Drawing.Design.PropertyValueUIHandler')]
  DNPropertyValueUIHandler = procedure(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor; valueUIItemList: DDN.mscorlib.DNArrayList) of object;

  ///<summary>Represents the method that will handle the <see cref="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler" />
  ///  event of a <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  .</summary>
  ///  <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
  ///  for the property associated with the icon that was double-clicked. </param>
  ///  <param name="descriptor">The property associated with the icon that was double-clicked. </param>
  ///  <param name="invokedItem">The <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
  ///  associated with the icon that was double-clicked. </param>
  [DNTypeName('System.Drawing.Design.PropertyValueUIItemInvokeHandler')]
  DNPropertyValueUIItemInvokeHandler = procedure(context: DDN.System.DNITypeDescriptorContext; descriptor: DDN.System.DNPropertyDescriptor; invokedItem: DNPropertyValueUIItem) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">A <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />
  ///  that provides data for the event. </param>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventHandler')]
  DNToolboxComponentsCreatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatedEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">A <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />
  ///  that provides data for the event. </param>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventHandler')]
  DNToolboxComponentsCreatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNToolboxComponentsCreatingEventArgs) of object;

  ///<summary>Provides a callback mechanism that can create a <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  .</summary>
  ///  <param name="serializedObject">The object which contains the data to create a <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  for. </param>
  ///  <param name="format">The name of the clipboard data format to create a <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  for. </param>
  ///<returns>The deserialized <see cref="T:System.Drawing.Design.ToolboxItem" />
  ///  object specified by <paramref name="serializedObject" />
  ///  .</returns>
  [DNTypeName('System.Drawing.Design.ToolboxItemCreatorCallback')]
  DNToolboxItemCreatorCallback = function(serializedObject: DDN.mscorlib.DNObject; format: string): DNToolboxItem of object;

  ///<summary>Provides a callback method for deciding when the <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  method should prematurely cancel execution and stop drawing an image.</summary>
  ///  <param name="callbackdata">Internal pointer that specifies data for the callback method. This parameter is not passed by all <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  overloads. You can test for its absence by checking for the value <see cref="F:System.IntPtr.Zero" />
  ///  . </param>
  ///<returns>This method returns <see langword="true" />
  ///  if it decides that the <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  method should prematurely stop execution. Otherwise it returns <see langword="false" />
  ///  to indicate that the <see cref="Overload:System.Drawing.Graphics.DrawImage" />
  ///  method should continue execution.</returns>
  [DNTypeName('System.Drawing.Graphics+DrawImageAbort')]
  DNGraphics_DrawImageAbort = function(callbackdata: IntPtr): Boolean of object;

  ///<summary>This delegate is not used. For an example of enumerating the records of a metafile, see <see cref="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
  ///  .</summary>
  ///  <param name="recordType">Not used. </param>
  ///  <param name="flags">Not used. </param>
  ///  <param name="dataSize">Not used. </param>
  ///  <param name="recordData">Not used. </param>
  [DNTypeName('System.Drawing.Imaging.PlayRecordCallback')]
  DNPlayRecordCallback = procedure(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; recordData: IntPtr) of object;

  ///<summary>Provides a callback method for the <see cref="Overload:System.Drawing.Graphics.EnumerateMetafile" />
  ///  method.</summary>
  ///  <param name="recordType">Member of the <see cref="T:System.Drawing.Imaging.EmfPlusRecordType" />
  ///  enumeration that specifies the type of metafile record. </param>
  ///  <param name="flags">Set of flags that specify attributes of the record. </param>
  ///  <param name="dataSize">Number of bytes in the record data. </param>
  ///  <param name="data">Pointer to a buffer that contains the record data. </param>
  ///  <param name="callbackData">Not used. </param>
  ///<returns>Return <see langword="true" />
  ///  if you want to continue enumerating records; otherwise, <see langword="false" />
  ///  .</returns>
  [DNTypeName('System.Drawing.Graphics+EnumerateMetafileProc')]
  DNGraphics_EnumerateMetafileProc = function(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: IntPtr; callbackData: DNPlayRecordCallback): Boolean of object;

  ///<summary>Provides a callback method for determining when the <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  method should prematurely cancel execution.</summary>
  ///<returns>This method returns <see langword="true" />
  ///  if it decides that the <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" />
  ///  method should prematurely stop execution; otherwise, it returns <see langword="false" />
  ///  .</returns>
  [DNTypeName('System.Drawing.Image+GetThumbnailImageAbort')]
  DNImage_GetThumbnailImageAbort = function: Boolean of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  or <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  event of a <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  .</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
  ///  that contains the event data. </param>
  [DNTypeName('System.Drawing.Printing.PrintEventHandler')]
  DNPrintEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintEventArgs) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  event of a <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  .</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
  ///  that contains the event data. </param>
  [DNTypeName('System.Drawing.Printing.PrintPageEventHandler')]
  DNPrintPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPrintPageEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  event of a <see cref="T:System.Drawing.Printing.PrintDocument" />
  ///  .</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="e">A <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
  ///  that contains the event data. </param>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventHandler')]
  DNQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryPageSettingsEventArgs) of object;




{ objects }

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>Provides an interface to manage the images, ToolTips, and event handlers for the properties of a component displayed in a property browser.</summary>
  [DNTypeName('System.Drawing.Design.IPropertyValueUIService')]
  DNIPropertyValueUIService = interface(DDN.mscorlib.DNObject)
  ['{F040B2E4-FA29-3542-9D43-C6B81C6A55DC}']
  { events } 

    procedure add_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PropertyUIValueItemsChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Adds the specified <see cref="T:System.Drawing.Design.PropertyValueUIHandler" />
    ///  to this service.</summary>
    ///  <param name="newHandler">The property value UI handler to add. </param>
    procedure AddPropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);
    ///<summary>Gets the <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  objects that match the specified context and property descriptor characteristics.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to gain additional context information. </param>
    ///  <param name="propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  that indicates the property to match with the properties to return. </param>
    ///<returns>An array of <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  objects that match the specified parameters.</returns>
    function GetPropertyUIValueItems(context: DDN.System.DNITypeDescriptorContext; propDesc: DDN.System.DNPropertyDescriptor): TArray<DNPropertyValueUIItem>;
    ///<summary>Notifies the <see cref="T:System.Drawing.Design.IPropertyValueUIService" />
    ///  implementation that the global list of <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  objects has been modified.</summary>
    procedure NotifyPropertyValueUIItemsChanged;
    ///<summary>Removes the specified <see cref="T:System.Drawing.Design.PropertyValueUIHandler" />
    ///  from the property value UI service.</summary>
    ///  <param name="newHandler">The handler to remove. </param>
    procedure RemovePropertyValueUIHandler(newHandler: DNPropertyValueUIHandler);

  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>Exposes a collection of toolbox items.</summary>
  [DNTypeName('System.Drawing.Design.IToolboxItemProvider')]
  DNIToolboxItemProvider = interface(DDN.mscorlib.DNObject)
  ['{7F949FDD-E8FA-3F3A-B2FA-BA70C779B8E9}']
  { getters & setters } 

    function get_Items: DNToolboxItemCollection;

  { propertys } 

    ///<summary>Gets a collection of <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  objects.</summary>
    ///<returns>A collection of <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  objects.</returns>
    property Items: DNToolboxItemCollection read get_Items;
  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>Provides methods and properties to manage and query the toolbox in the development environment.</summary>
  [DNTypeName('System.Drawing.Design.IToolboxService')]
  DNIToolboxService = interface(DDN.mscorlib.DNObject)
  ['{4BACD258-DE64-4048-BC4E-FEDBEF9ACB76}']
  { getters & setters } 

    function get_CategoryNames: DNCategoryNameCollection;
    function get_SelectedCategory: string;
    procedure set_SelectedCategory(value: string);

  { methods } 

    ///<summary>Adds a new toolbox item creator for a specified data format.</summary>
    ///  <param name="creator">A <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />
    ///  that can create a component when the toolbox item is invoked. </param>
    ///  <param name="format">The data format that the creator handles. </param>
    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string); overload;
    ///<summary>Adds a new toolbox item creator for a specified data format and designer host.</summary>
    ///  <param name="creator">A <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />
    ///  that can create a component when the toolbox item is invoked. </param>
    ///  <param name="format">The data format that the creator handles. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that represents the designer host to associate with the creator. </param>
    procedure AddCreator(creator: DNToolboxItemCreatorCallback; format: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>Adds the specified project-linked toolbox item to the toolbox.</summary>
    ///  <param name="toolboxItem">The linked <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to add to the toolbox. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  for the current design document. </param>
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>Adds the specified project-linked toolbox item to the toolbox in the specified category.</summary>
    ///  <param name="toolboxItem">The linked <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to add to the toolbox. </param>
    ///  <param name="category">The toolbox item category to add the toolbox item to. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  for the current design document. </param>
    procedure AddLinkedToolboxItem(toolboxItem: DNToolboxItem; category: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>Adds the specified toolbox item to the toolbox.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to add to the toolbox. </param>
    procedure AddToolboxItem(toolboxItem: DNToolboxItem); overload;
    ///<summary>Adds the specified toolbox item to the toolbox in the specified category.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to add to the toolbox. </param>
    ///  <param name="category">The toolbox item category to add the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to. </param>
    procedure AddToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    ///<summary>Gets a toolbox item from the specified object that represents a toolbox item in serialized form.</summary>
    ///  <param name="serializedObject">The object that contains the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to retrieve. </param>
    ///<returns>The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  created from the serialized object.</returns>
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject): DNToolboxItem; overload;
    ///<summary>Gets a toolbox item from the specified object that represents a toolbox item in serialized form, using the specified designer host.</summary>
    ///  <param name="serializedObject">The object that contains the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to retrieve. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  to associate with this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  created from deserialization.</returns>
    function DeserializeToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    ///<summary>Gets the currently selected toolbox item.</summary>
    ///<returns>The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  that is currently selected, or <see langword="null" />
    ///  if no toolbox item has been selected.</returns>
    function GetSelectedToolboxItem: DNToolboxItem; overload;
    ///<summary>Gets the currently selected toolbox item if it is available to all designers, or if it supports the specified designer.</summary>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that the selected tool must be associated with for it to be returned. </param>
    ///<returns>The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  that is currently selected, or <see langword="null" />
    ///  if no toolbox item is currently selected.</returns>
    function GetSelectedToolboxItem(host: DDN.System.DNIDesignerHost): DNToolboxItem; overload;
    ///<summary>Gets the entire collection of toolbox items from the toolbox.</summary>
    ///<returns>A <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  that contains the current toolbox items.</returns>
    function GetToolboxItems: DNToolboxItemCollection; overload;
    ///<summary>Gets the collection of toolbox items that are associated with the specified designer host from the toolbox.</summary>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that is associated with the toolbox items to retrieve. </param>
    ///<returns>A <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  that contains the current toolbox items that are associated with the specified designer host.</returns>
    function GetToolboxItems(host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    ///<summary>Gets a collection of toolbox items from the toolbox that match the specified category.</summary>
    ///  <param name="category">The toolbox item category to retrieve all the toolbox items from. </param>
    ///<returns>A <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  that contains the current toolbox items that are associated with the specified category.</returns>
    function GetToolboxItems(category: string): DNToolboxItemCollection; overload;
    ///<summary>Gets the collection of toolbox items that are associated with the specified designer host and category from the toolbox.</summary>
    ///  <param name="category">The toolbox item category to retrieve the toolbox items from. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that is associated with the toolbox items to retrieve. </param>
    ///<returns>A <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  that contains the current toolbox items that are associated with the specified category and designer host.</returns>
    function GetToolboxItems(category: string; host: DDN.System.DNIDesignerHost): DNToolboxItemCollection; overload;
    ///<summary>Gets a value indicating whether the specified object which represents a serialized toolbox item can be used by the specified designer host.</summary>
    ///  <param name="serializedObject">The object that contains the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to retrieve. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  to test for support for the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the specified object is compatible with the specified designer host; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    ///<summary>Gets a value indicating whether the specified object which represents a serialized toolbox item matches the specified attributes.</summary>
    ///  <param name="serializedObject">The object that contains the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to retrieve. </param>
    ///  <param name="filterAttributes">An <see cref="T:System.Collections.ICollection" />
    ///  that contains the attributes to test the serialized object for. </param>
    ///<returns><see langword="true" />
    ///  if the object matches the specified attributes; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSupported(serializedObject: DDN.mscorlib.DNObject; filterAttributes: DDN.mscorlib.DNICollection): Boolean; overload;
    ///<summary>Gets a value indicating whether the specified object is a serialized toolbox item.</summary>
    ///  <param name="serializedObject">The object to inspect. </param>
    ///<returns><see langword="true" />
    ///  if the object contains a toolbox item object; otherwise, <see langword="false" />
    ///  .</returns>
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Gets a value indicating whether the specified object is a serialized toolbox item, using the specified designer host.</summary>
    ///  <param name="serializedObject">The object to inspect. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that is making this request. </param>
    ///<returns><see langword="true" />
    ///  if the object contains a toolbox item object; otherwise, <see langword="false" />
    ///  .</returns>
    function IsToolboxItem(serializedObject: DDN.mscorlib.DNObject; host: DDN.System.DNIDesignerHost): Boolean; overload;
    ///<summary>Refreshes the state of the toolbox items.</summary>
    procedure Refresh;
    ///<summary>Removes a previously added toolbox item creator of the specified data format.</summary>
    ///  <param name="format">The data format of the creator to remove. </param>
    procedure RemoveCreator(format: string); overload;
    ///<summary>Removes a previously added toolbox creator that is associated with the specified data format and the specified designer host.</summary>
    ///  <param name="format">The data format of the creator to remove. </param>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that is associated with the creator to remove. </param>
    procedure RemoveCreator(format: string; host: DDN.System.DNIDesignerHost); overload;
    ///<summary>Removes the specified toolbox item from the toolbox.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to remove from the toolbox. </param>
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem); overload;
    ///<summary>Removes the specified toolbox item from the toolbox.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to remove from the toolbox. </param>
    ///  <param name="category">The toolbox item category to remove the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  from. </param>
    procedure RemoveToolboxItem(toolboxItem: DNToolboxItem; category: string); overload;
    ///<summary>Notifies the toolbox service that the selected tool has been used.</summary>
    procedure SelectedToolboxItemUsed;
    ///<summary>Gets a serializable object that represents the specified toolbox item.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to serialize. </param>
    ///<returns>An object that represents the specified <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    function SerializeToolboxItem(toolboxItem: DNToolboxItem): DDN.mscorlib.DNObject;
    ///<summary>Sets the current application's cursor to a cursor that represents the currently selected tool.</summary>
    ///<returns><see langword="true" />
    ///  if the cursor is set by the currently selected tool, <see langword="false" />
    ///  if there is no tool selected and the cursor is set to the standard windows cursor.</returns>
    function SetCursor: Boolean;
    ///<summary>Selects the specified toolbox item.</summary>
    ///  <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to select. </param>
    procedure SetSelectedToolboxItem(toolboxItem: DNToolboxItem);

  { propertys } 

    ///<summary>Gets the names of all the tool categories currently on the toolbox.</summary>
    ///<returns>A <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  containing the tool categories.</returns>
    property CategoryNames: DNCategoryNameCollection read get_CategoryNames;
    ///<summary>Gets or sets the name of the currently selected tool category from the toolbox.</summary>
    ///<returns>The name of the currently selected category.</returns>
    property SelectedCategory: string read get_SelectedCategory write set_SelectedCategory;
  end;

  //-------------namespace: System.Drawing.Design----------------
  ///<summary>Defines an interface for setting the currently selected toolbox item and indicating whether a designer supports a particular toolbox item.</summary>
  [DNTypeName('System.Drawing.Design.IToolboxUser')]
  DNIToolboxUser = interface(DDN.mscorlib.DNObject)
  ['{024519CA-FA87-3CEF-A9FD-B3045C8BF453}']
  { methods } 

    ///<summary>Gets a value indicating whether the specified tool is supported by the current designer.</summary>
    ///  <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to be tested for toolbox support. </param>
    ///<returns><see langword="true" />
    ///  if the tool is supported by the toolbox and can be enabled; <see langword="false" />
    ///  if the document designer does not know how to use the tool.</returns>
    function GetToolSupported(tool: DNToolboxItem): Boolean;
    ///<summary>Selects the specified tool.</summary>
    ///  <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to select. </param>
    procedure ToolPicked(tool: DNToolboxItem);

  end;

  //-------------namespace: System.Drawing----------------
  ///<summary>Defines methods for obtaining and releasing an existing handle to a Windows device context.</summary>
  [DNTypeName('System.Drawing.IDeviceContext')]
  DNIDeviceContext = interface(DDN.mscorlib.DNIDisposable)
  ['{3B0820CC-0BAB-3225-A135-975CF1F66BA5}']
  { methods } 

    ///<summary>Returns the handle to a Windows device context.</summary>
    ///<returns>An <see cref="T:System.IntPtr" />
    ///  representing the handle of a device context.</returns>
    function GetHdc: IntPtr;
    ///<summary>Releases the handle of a Windows device context.</summary>
    procedure ReleaseHdc;

  end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSameAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C24982A4-D71E-5366-8253-A7F32372902F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.BitmapSuffixInSameAssemblyAttribute" />
    ///  class.</summary>
    {class} function init: DNBitmapSuffixInSameAssemblyAttribute;

  end;

  ///<summary>Specifies that, when interpreting <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
  ///  declarations, the assembly should look for the indicated resources in the same assembly, but with the <see cref="P:System.Drawing.Configuration.SystemDrawingSection.BitmapSuffix" />
  ///  configuration value appended to the declared file name.</summary>
  [DNTypeName('System.Drawing.BitmapSuffixInSameAssemblyAttribute')]
  DNBitmapSuffixInSameAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9449CA8F-3B8D-3EA9-B6DB-2E03AB8D5600}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSameAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSameAssemblyAttributeClass, DNBitmapSuffixInSameAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapSuffixInSatelliteAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8AD5958-1F97-5AEA-8C8D-D89675889BC3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute" />
    ///  class.</summary>
    {class} function init: DNBitmapSuffixInSatelliteAssemblyAttribute;

  end;

  ///<summary>Specifies that, when interpreting <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
  ///  declarations, the assembly should look for the indicated resources in a satellite assembly, but with the <see cref="P:System.Drawing.Configuration.SystemDrawingSection.BitmapSuffix" />
  ///  configuration value appended to the declared file name.</summary>
  [DNTypeName('System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute')]
  DNBitmapSuffixInSatelliteAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E91912D3-D8A5-3DED-8DD7-5A140B63BF6D}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBitmapSuffixInSatelliteAssemblyAttribute = class(TDNGenericImport<DNBitmapSuffixInSatelliteAssemblyAttributeClass, DNBitmapSuffixInSatelliteAssemblyAttribute>) end;

  //-------------namespace: System.Drawing----------------
  DNToolboxBitmapAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F18CF918-B3C3-59F4-999F-59B337ED1173}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object with an image from a specified file.</summary>
    ///  <param name="imageFile">The name of a file that contains a 16 by 16 bitmap. </param>
    {class} function init(imageFile: string): DNToolboxBitmapAttribute; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object based on a 16 x 16 bitmap that is embedded as a resource in a specified assembly.</summary>
    ///  <param name="t">A <see cref="T:System.Type" />
    ///  whose defining assembly is searched for the bitmap resource. </param>
    {class} function init(t: DDN.mscorlib.DNType): DNToolboxBitmapAttribute; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object based on a 16 by 16 bitmap that is embedded as a resource in a specified assembly.</summary>
    ///  <param name="t">A <see cref="T:System.Type" />
    ///  whose defining assembly is searched for the bitmap resource. </param>
    ///  <param name="name">The name of the embedded bitmap resource. </param>
    {class} function init(t: DDN.mscorlib.DNType; name: string): DNToolboxBitmapAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxBitmapAttribute;

  { static fields } 

    ///<summary>A <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object that has its small image and its large image set to <see langword="null" />
    ///  .</summary>
    {class} property &Default: DNToolboxBitmapAttribute read __fakeFieldGet_Default;

  { static methods } 

    ///<summary>Returns an <see cref="T:System.Drawing.Image" />
    ///  object based on a bitmap resource that is embedded in an assembly.</summary>
    ///  <param name="t">This method searches for an embedded bitmap resource in the assembly that defines the type specified by the t parameter. For example, if you pass typeof(ControlA) to the t parameter, then this method searches the assembly that defines ControlA. </param>
    ///  <param name="imageName">The name of the embedded bitmap resource. </param>
    ///  <param name="large">Specifies whether this method returns a large image (true)or a small image (false). The small image is 16 by 16, and the large image is 32 x 32. </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  object based on the retrieved bitmap.</returns>
    {class} function GetImageFromResource(t: DDN.mscorlib.DNType; imageName: string; large: Boolean): DNImage;

  end;

  ///<summary>Allows you to specify an icon to represent a control in a container, such as the Microsoft Visual Studio Form Designer.</summary>
  [DNTypeName('System.Drawing.ToolboxBitmapAttribute')]
  DNToolboxBitmapAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{958611BF-572A-3521-8649-F0196B634BBC}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Indicates whether the specified object is a <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object and is identical to this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="value" />
    ///  is both a <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object and is identical to this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///<returns>The hash code for this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetHashCode: Int32;
    ///<summary>Gets the small <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="component">If this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type of the object specified by the component parameter. For example, if you pass an object of type ControlA to the component parameter, then this method searches the assembly that defines ControlA. </param>
    ///<returns>The small <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetImage(component: DDN.mscorlib.DNObject): DNImage; overload;
    ///<summary>Gets the small or large <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="component">If this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type of the object specified by the component parameter. For example, if you pass an object of type ControlA to the component parameter, then this method searches the assembly that defines ControlA. </param>
    ///  <param name="large">Specifies whether this method returns a large image (<see langword="true" />
    ///  ) or a small image (<see langword="false" />
    ///  ). The small image is 16 by 16, and the large image is 32 by 32. </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  object associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetImage(component: DDN.mscorlib.DNObject; large: Boolean): DNImage; overload;
    ///<summary>Gets the small <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="type">If this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type specified by the type parameter. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA. </param>
    ///<returns>The small <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetImage(&type: DDN.mscorlib.DNType): DNImage; overload;
    ///<summary>Gets the small or large <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="type">If this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object does not already have a small image, this method searches for a bitmap resource in the assembly that defines the type specified by the component type. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA. </param>
    ///  <param name="large">Specifies whether this method returns a large image (<see langword="true" />
    ///  ) or a small image (<see langword="false" />
    ///  ). The small image is 16 by 16, and the large image is 32 by 32. </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetImage(&type: DDN.mscorlib.DNType; large: Boolean): DNImage; overload;
    ///<summary>Gets the small or large <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</summary>
    ///  <param name="type">If this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object does not already have a small image, this method searches for an embedded bitmap resource in the assembly that defines the type specified by the component type. For example, if you pass typeof(ControlA) to the type parameter, then this method searches the assembly that defines ControlA. </param>
    ///  <param name="imgName">The name of the embedded bitmap resource. </param>
    ///  <param name="large">Specifies whether this method returns a large image (<see langword="true" />
    ///  ) or a small image (<see langword="false" />
    ///  ). The small image is 16 by 16, and the large image is 32 by 32. </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  associated with this <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  object.</returns>
    function GetImage(&type: DDN.mscorlib.DNType; imgName: string; large: Boolean): DNImage; overload;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxBitmapAttribute = class(TDNGenericImport<DNToolboxBitmapAttributeClass, DNToolboxBitmapAttribute>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{27880435-7C49-5C6E-B24D-01933E2BFDEC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermissionAttribute" />
    ///  class.</summary>
    ///  <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  values. </param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNPrintingPermissionAttribute;

  end;

  ///<summary>Allows declarative printing permission checks.</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermissionAttribute')]
  DNPrintingPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{D1C669D1-CD77-385B-B501-843601DA7831}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates the permission based on the requested access levels, which are set through the <see cref="P:System.Drawing.Printing.PrintingPermissionAttribute.Level" />
    ///  property on the attribute.</summary>
    ///<returns>An <see cref="T:System.Security.IPermission" />
    ///  that represents the created permission.</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type of printing allowed.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  values.</returns>
    ///<exception cref="T:System.ArgumentException">The value is not one of the <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  values. </exception>
    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrintingPermissionAttribute = class(TDNGenericImport<DNPrintingPermissionAttributeClass, DNPrintingPermissionAttribute>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNCategoryNameCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{ABF49256-3068-5ADC-AF1F-B840D0C0E415}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  class using the specified collection.</summary>
    ///  <param name="value">A <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  that contains the names to initialize the collection values to. </param>
    {class} function init(value: DNCategoryNameCollection): DNCategoryNameCollection; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.CategoryNameCollection" />
    ///  class using the specified array of names.</summary>
    ///  <param name="value">An array of strings that contains the names of the categories to initialize the collection values to. </param>
    {class} function init(value: TArray<string>): DNCategoryNameCollection; overload;

  end;

  ///<summary>Represents a collection of category name strings.</summary>
  [DNTypeName('System.Drawing.Design.CategoryNameCollection')]
  DNCategoryNameCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{90EDDA3E-F955-3197-82E3-15B2AC28BD27}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    function get_Count: Int32;

  { methods } 

    ///<summary>Indicates whether the specified category is contained in the collection.</summary>
    ///  <param name="value">The string to check for in the collection. </param>
    ///<returns><see langword="true" />
    ///  if the specified category is contained in the collection; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(value: string): Boolean;
    ///<summary>Copies the collection elements to the specified array at the specified index.</summary>
    ///  <param name="array">The array to copy to. </param>
    ///  <param name="index">The index of the destination array at which to begin copying. </param>
    procedure CopyTo(&array: TArray<string>; index: Int32);
    ///<summary>Gets the index of the specified value.</summary>
    ///  <param name="value">The category name to retrieve the index of in the collection. </param>
    ///<returns>The index in the collection, or <see langword="null" />
    ///  if the string does not exist in the collection.</returns>
    function IndexOf(value: string): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCategoryNameCollection = class(TDNGenericImport<DNCategoryNameCollectionClass, DNCategoryNameCollection>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{45954401-EFBA-5D96-9174-419CE609A37B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  class using the specified collection.</summary>
    ///  <param name="value">A <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  to fill the new collection with. </param>
    {class} function init(value: DNToolboxItemCollection): DNToolboxItemCollection; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItemCollection" />
    ///  class using the specified array of toolbox items.</summary>
    ///  <param name="value">An array of type <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  containing the toolbox items to fill the collection with. </param>
    {class} function init(value: TArray<DNToolboxItem>): DNToolboxItemCollection; overload;

  end;

  ///<summary>Represents a collection of toolbox items.</summary>
  [DNTypeName('System.Drawing.Design.ToolboxItemCollection')]
  DNToolboxItemCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{58541023-7DF4-3273-AA27-E4C0362FE493}']
  { getters & setters } 

    function get_Item(index: Int32): DNToolboxItem;
    function get_Count: Int32;

  { methods } 

    ///<summary>Indicates whether the collection contains the specified <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///  <param name="value">A <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to search the collection for. </param>
    ///<returns><see langword="true" />
    ///  if the collection contains the specified object; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(value: DNToolboxItem): Boolean;
    ///<summary>Copies the collection to the specified array beginning with the specified destination index.</summary>
    ///  <param name="array">The array to copy to. </param>
    ///  <param name="index">The index to begin copying to. </param>
    procedure CopyTo(&array: TArray<DNToolboxItem>; index: Int32);
    ///<summary>Gets the index of the specified <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  , if it exists in the collection.</summary>
    ///  <param name="value">A <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to get the index of in the collection. </param>
    ///<returns>The index of the specified <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    function IndexOf(value: DNToolboxItem): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNToolboxItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNToolboxItemCollection = class(TDNGenericImport<DNToolboxItemCollectionClass, DNToolboxItemCollection>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontUnitConverterClass = interface(DNObjectClass)
  ['{E52EC7AA-2FBD-5159-8F8E-64117BB8B2B9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.FontConverter.FontUnitConverter" />
    ///  class.</summary>
    {class} function init: DNFontConverter_FontUnitConverter;

  end;

  ///<summary>Converts font units to and from other unit types.</summary>
  [DNTypeName('System.Drawing.FontConverter+FontUnitConverter')]
  DNFontConverter_FontUnitConverter = interface(DNObject)
  ['{6A1AEA9B-ED2B-355F-86C4-00BFB8F91FD2}']
  { methods } 

    ///<summary>Returns a collection of standard values valid for the <see cref="T:System.Drawing.Font" />
    ///  type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context.</param>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontUnitConverter = class(TDNGenericImport<DNFontConverter_FontUnitConverterClass, DNFontConverter_FontUnitConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNIconConverterClass = interface(DNObjectClass)
  ['{80FD3AC4-64BA-5D2F-BBA5-37556D2CF30D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.IconConverter" />
    ///  class.</summary>
    {class} function init: DNIconConverter;

  end;

  ///<summary>Converts an <see cref="T:System.Drawing.Icon" />
  ///  object from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.IconConverter')]
  DNIconConverter = interface(DNObject)
  ['{9B244C3F-C2B0-3BD6-83AB-96CADE65010F}']
  { methods } 

    ///<summary>Determines whether this <see cref="T:System.Drawing.IconConverter" />
    ///  can convert an instance of a specified type to an <see cref="T:System.Drawing.Icon" />
    ///  , using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  that specifies the type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this <see cref="T:System.Drawing.IconConverter" />
    ///  can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether this <see cref="T:System.Drawing.IconConverter" />
    ///  can convert an <see cref="T:System.Drawing.Icon" />
    ///  to an instance of a specified type, using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that specifies the type you want to convert to. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this <see cref="T:System.Drawing.IconConverter" />
    ///  can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts a specified object to an <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that holds information about a specific culture. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to be converted. </param>
    ///<returns>If this method succeeds, it returns the <see cref="T:System.Drawing.Icon" />
    ///  that it created by converting the specified object. Otherwise, it throws an exception.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts an <see cref="T:System.Drawing.Icon" />
    ///  (or an object that can be cast to an <see cref="T:System.Drawing.Icon" />
    ///  ) to a specified type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  object that specifies formatting conventions used by a particular culture. </param>
    ///  <param name="value">The object to convert. This object should be of type icon or some type that can be cast to <see cref="T:System.Drawing.Icon" />
    ///  . </param>
    ///  <param name="destinationType">The type to convert the icon to. </param>
    ///<returns>This method returns the converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIconConverter = class(TDNGenericImport<DNIconConverterClass, DNIconConverter>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsConverterClass = interface(DNObjectClass)
  ['{D8F6CE72-3903-5F84-917D-8167CD235FEA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.MarginsConverter" />
    ///  class. </summary>
    {class} function init: DNMarginsConverter;

  end;

  ///<summary>Provides a <see cref="T:System.Drawing.Printing.MarginsConverter" />
  ///  for <see cref="T:System.Drawing.Printing.Margins" />
  ///  .</summary>
  [DNTypeName('System.Drawing.Printing.MarginsConverter')]
  DNMarginsConverter = interface(DNObject)
  ['{F95545A7-1A52-3CB5-92D0-6BA9F2145F85}']
  { methods } 

    ///<summary>Returns whether this converter can convert an object of the specified source type to the native type of the converter using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  that represents the type from which you want to convert. </param>
    ///<returns><see langword="true" />
    ///  if an object can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type to which you want to convert. </param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  method to create a new value, using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///<returns><see langword="true" />
    ///  if changing a property on this object requires a call to <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  to create a new value; otherwise, <see langword="false" />
    ///  . This method always returns <see langword="true" />
    ///  .</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the specified object to the converter's native type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that provides the language to convert to. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to convert. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that represents the converted value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  does not contain values for all four margins. For example, "100,100,100,100" specifies 1 inch for the left, right, top, and bottom margins. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the given value object to the specified destination type using the specified context and arguments.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that provides the language to convert to. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to convert. </param>
    ///  <param name="destinationType">The <see cref="T:System.Type" />
    ///  to which to convert the value. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that represents the converted value.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an <see cref="T:System.Object" />
    ///  given a set of property values for the object.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="propertyValues">An <see cref="T:System.Collections.IDictionary" />
    ///  of new property values. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the specified <see cref="T:System.Collections.IDictionary" />
    ///  , or <see langword="null" />
    ///  if the object cannot be created.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyValues" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarginsConverter = class(TDNGenericImport<DNMarginsConverterClass, DNMarginsConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNColorConverterClass = interface(DNObjectClass)
  ['{F6A5D361-A51E-504E-B922-B7DFF92D8343}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.ColorConverter" />
    ///  class.</summary>
    {class} function init: DNColorConverter;

  end;

  ///<summary>Converts colors from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  .</summary>
  [DNTypeName('System.Drawing.ColorConverter')]
  DNColorConverter = interface(DNObject)
  ['{0DCDEF42-0CC9-36F4-8F69-4F9D5805DEC3}']
  { methods } 

    ///<summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked. </param>
    ///  <param name="sourceType">The type from which you want to convert. </param>
    ///<returns><see langword="true" />
    ///  if this object can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type to which you want to convert. </param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the operation; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return <see langword="null" />
    ///  if the data type does not support a standard set of values.</summary>
    ///  <param name="context">A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is <see langword="null" />
    ///  . Also, properties on the context object may return <see langword="null" />
    ///  . </param>
    ///<returns>A collection containing <see langword="null" />
    ///  or a standard set of valid values. The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    ///<summary>Determines if this object supports a standard set of values that can be chosen from a list.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///<returns><see langword="true" />
    ///  if <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" />
    ///  must be called to find a common set of values the object supports; otherwise, <see langword="false" />
    ///  .</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the given object to the converter's native type.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that specifies the culture to represent the color. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the converted value.</returns>
    ///<exception cref="T:System.ArgumentException">The conversion cannot be performed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to another type. </summary>
    ///  <param name="context">A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is <see langword="null" />
    ///  . Also, properties on the context object may return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that specifies the culture to represent the color. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The type to convert the object to. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the converted value.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationtype" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorConverter = class(TDNGenericImport<DNColorConverterClass, DNColorConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverterClass = interface(DNObjectClass)
  ['{CC812D60-ABA3-5B71-9E16-EC78F4F8F9DD}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.FontConverter" />
    ///  object.</summary>
    {class} function init: DNFontConverter;

  end;

  ///<summary>Converts <see cref="T:System.Drawing.Font" />
  ///  objects from one data type to another. </summary>
  [DNTypeName('System.Drawing.FontConverter')]
  DNFontConverter = interface(DNObject)
  ['{EF60651F-9566-36AA-8388-C90CDC3DB73B}']
  { methods } 

    ///<summary>Determines whether this converter can convert an object in the specified source type to the native type of the converter.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="sourceType">The type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this object can perform the conversion.</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">An <see langword="ITypeDescriptorContext" />
    ///  object that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  object that represents the type you want to convert to. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether changing a value on this object should require a call to the <see cref="Overload:System.Drawing.FontConverter.CreateInstance" />
    ///  method to create a new value.</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the <see langword="CreateInstance" />
    ///  object should be called when a change is made to one or more properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines whether this object supports properties. The default is <see langword="false" />
    ///  .</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the <see cref="M:System.Drawing.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" />
    ///  method should be called to find the properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the specified object to the native type of the converter.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see langword="CultureInfo" />
    ///  object that specifies the culture used to represent the font. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion could not be performed. </exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to another type. </summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  object that specifies the culture used to represent the object. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The data type to convert the object to. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion was not successful.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an object of this type by using a specified set of property values for the object. </summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///  <param name="propertyValues">A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the <see cref="Overload:System.Drawing.FontConverter.GetProperties" />
    ///  method. </param>
    ///<returns>The newly created object, or <see langword="null" />
    ///  if the object could not be created. The default implementation returns <see langword="null" />
    ///  .
    ///<see cref="M:System.Drawing.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  useful for creating non-changeable objects that have changeable properties.</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>Retrieves the set of properties for this type. By default, a type does not have any properties to return. </summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///  <param name="value">The value of the object to get the properties for. </param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties.</param>
    ///<returns>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .An easy implementation of this method can call the <see cref="Overload:System.ComponentModel.TypeConverter.GetProperties" />
    ///  method for the correct data type.</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter = class(TDNGenericImport<DNFontConverterClass, DNFontConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNFontConverter_FontNameConverterClass = interface(DNObjectClass)
  ['{9F84072F-A21E-57B7-BCDA-6F4A572C257C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.FontConverter.FontNameConverter" />
    ///  class. </summary>
    {class} function init: DNFontConverter_FontNameConverter;

  end;

  ///<summary><see cref="T:System.Drawing.FontConverter.FontNameConverter" />
  ///  is a type converter that is used to convert a font name to and from various other representations.</summary>
  [DNTypeName('System.Drawing.FontConverter+FontNameConverter')]
  DNFontConverter_FontNameConverter = interface(DNObject)
  ['{F4E660EE-5F2C-3FD1-9F3C-B4DECB492462}']
  { methods } 

    ///<summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to extract additional information about the environment this converter is being invoked from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may return <see langword="null" />
    ///  .</param>
    ///  <param name="sourceType">The type you wish to convert from. </param>
    ///<returns><see langword="true" />
    ///  if the converter can perform the conversion; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts the given object to the converter's native type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to extract additional information about the environment this converter is being invoked from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  to use to perform the conversion </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines if the list of standard values returned from the <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  method is an exclusive list. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to extract additional information about the environment this converter is being invoked from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may return <see langword="null" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the collection returned from <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  is an exclusive list of possible values; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines if this object supports a standard set of values that can be picked from a list.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to extract additional information about the environment this converter is being invoked from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may return <see langword="null" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" />
    ///  should be called to find a common set of values the object supports; otherwise, <see langword="false" />
    ///  .</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Retrieves a collection containing a set of standard values for the data type this converter is designed for. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to extract additional information about the environment this converter is being invoked from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may return <see langword="null" />
    ///  .</param>
    ///<returns>A collection containing a standard set of valid values, or <see langword="null" />
    ///  . The default is <see langword="null" />
    ///  .</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConverter_FontNameConverter = class(TDNGenericImport<DNFontConverter_FontNameConverterClass, DNFontConverter_FontNameConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageConverterClass = interface(DNObjectClass)
  ['{4A2CE72A-BAE7-5C80-B713-4D7435711BF7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.ImageConverter" />
    ///  class.</summary>
    {class} function init: DNImageConverter;

  end;

  ///<summary><see cref="T:System.Drawing.ImageConverter" />
  ///  is a class that can be used to convert <see cref="T:System.Drawing.Image" />
  ///  objects from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.ImageConverter')]
  DNImageConverter = interface(DNObject)
  ['{D0A407DC-F920-3AAA-AE30-85A1F49D7160}']
  { methods } 

    ///<summary>Gets the set of properties for this type.</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///  <param name="value">The value of the object to get the properties for. </param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties.</param>
    ///<returns>The set of properties that should be exposed for this data type. If no properties should be exposed, this can return <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>Indicates whether this object supports properties. By default, this is <see langword="false" />
    ///  .</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the <see cref="Overload:System.Drawing.ImageConverter.GetProperties" />
    ///  method should be called to find the properties of this object.</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines whether this <see cref="T:System.Drawing.ImageConverter" />
    ///  can convert an instance of a specified type to an <see cref="T:System.Drawing.Image" />
    ///  , using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  that specifies the type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this <see cref="T:System.Drawing.ImageConverter" />
    ///  can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether this <see cref="T:System.Drawing.ImageConverter" />
    ///  can convert an <see cref="T:System.Drawing.Image" />
    ///  to an instance of a specified type, using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that specifies the type you want to convert to. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this <see cref="T:System.Drawing.ImageConverter" />
    ///  can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts a specified object to an <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  that holds information about a specific culture. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to be converted. </param>
    ///<returns>If this method succeeds, it returns the <see cref="T:System.Drawing.Image" />
    ///  that it created by converting the specified object. Otherwise, it throws an exception.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts an <see cref="T:System.Drawing.Image" />
    ///  (or an object that can be cast to an <see cref="T:System.Drawing.Image" />
    ///  ) to the specified type.</summary>
    ///  <param name="context">A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  object that specifies formatting conventions used by a particular culture. </param>
    ///  <param name="value">The <see cref="T:System.Drawing.Image" />
    ///  to convert. </param>
    ///  <param name="destinationType">The <see cref="T:System.Type" />
    ///  to convert the <see cref="T:System.Drawing.Image" />
    ///  to. </param>
    ///<returns>This method returns the converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageConverter = class(TDNGenericImport<DNImageConverterClass, DNImageConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNImageFormatConverterClass = interface(DNObjectClass)
  ['{9B9898F3-5F4C-5876-B5F5-BB43A0AEA1DE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.ImageFormatConverter" />
    ///  class.</summary>
    {class} function init: DNImageFormatConverter;

  end;

  ///<summary><see cref="T:System.Drawing.ImageFormatConverter" />
  ///  is a class that can be used to convert <see cref="T:System.Drawing.Imaging.ImageFormat" />
  ///  objects from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.ImageFormatConverter')]
  DNImageFormatConverter = interface(DNObject)
  ['{813DEBD4-AFA2-3311-AB49-2241417CC926}']
  { methods } 

    ///<summary>Indicates whether this converter can convert an object in the specified source type to the native type of the converter.</summary>
    ///  <param name="context">A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="sourceType">The type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this object can perform the conversion.</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Gets a value indicating whether this converter can convert an object to the specified destination type using the context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that specifies the context for this type conversion. </param>
    ///  <param name="destinationType">The <see cref="T:System.Type" />
    ///  that represents the type to which you want to convert this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this object can perform the conversion.</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts the specified object to an <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object.</summary>
    ///  <param name="context">A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  object that specifies formatting conventions for a particular culture. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to the specified type.</summary>
    ///  <param name="context">A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  object that specifies formatting conventions for a particular culture. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The type to convert the object to. </param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  is <see langword="null." />
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Gets a collection that contains a set of standard values for the data type this validator is designed for. Returns <see langword="null" />
    ///  if the data type does not support a standard set of values.</summary>
    ///  <param name="context">A formatter context. This object can be used to get more information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///<returns>A collection that contains a standard set of valid values, or <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    ///<summary>Indicates whether this object supports a standard set of values that can be picked from a list.</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the <see cref="Overload:System.Drawing.ImageFormatConverter.GetStandardValues" />
    ///  method should be called to find a common set of values the object supports.</returns>
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageFormatConverter = class(TDNGenericImport<DNImageFormatConverterClass, DNImageFormatConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNPointConverterClass = interface(DNObjectClass)
  ['{443635B0-AF21-5209-AA72-172902CF83D1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.PointConverter" />
    ///  class.</summary>
    {class} function init: DNPointConverter;

  end;

  ///<summary>Converts a <see cref="T:System.Drawing.Point" />
  ///  object from one data type to another. </summary>
  [DNTypeName('System.Drawing.PointConverter')]
  DNPointConverter = interface(DNObject)
  ['{1B140E71-044F-3B84-9559-E223FEB29F6F}']
  { methods } 

    ///<summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="sourceType">The type you want to convert from. </param>
    ///<returns><see langword="true" />
    ///  if this object can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  object that represents the type you want to convert to. </param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines if changing a value on this object should require a call to <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  to create a new value.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  method should be called when a change is made to one or more properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines if this object supports properties. By default, this is <see langword="false" />
    ///  .</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///<returns><see langword="true" />
    ///  if <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  should be called to find the properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the specified object to a <see cref="T:System.Drawing.Point" />
    ///  object.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to the specified type.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The type to convert the object to. </param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an instance of this type given a set of property values for the object.</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///  <param name="propertyValues">A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  . </param>
    ///<returns>The newly created object, or <see langword="null" />
    ///  if the object could not be created. The default implementation returns <see langword="null" />
    ///  .</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>Retrieves the set of properties for this type. By default, a type does not return any properties. </summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///  <param name="value">The value of the object to get the properties for. </param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties. </param>
    ///<returns>The set of properties that are exposed for this data type. If no properties are exposed, this method might return <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleConverterClass = interface(DNObjectClass)
  ['{367FB9EA-845B-536D-BF02-545CC1341507}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.RectangleConverter" />
    ///  class.</summary>
    {class} function init: DNRectangleConverter;

  end;

  ///<summary>Converts rectangles from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  .</summary>
  [DNTypeName('System.Drawing.RectangleConverter')]
  DNRectangleConverter = interface(DNObject)
  ['{51E83AD8-34A3-3815-99DF-4BEEB6701484}']
  { methods } 

    ///<summary>Determines if this converter can convert an object in the given source type to the native type of the converter.</summary>
    ///  <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="sourceType">The type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this object can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object that provides a format context. This can be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object can also return <see langword="null" />
    ///  .</param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  object that represents the type you want to convert to. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines if changing a value on this object should require a call to <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  to create a new value.</summary>
    ///  <param name="context">A type descriptor through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  should be called when a change is made to one or more properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines if this object supports properties. By default, this is <see langword="false" />
    ///  .</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be provided. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  should be called to find the properties of this object; otherwise, <see langword="false" />
    ///  .</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the given object to a <see cref="T:System.Drawing.Rectangle" />
    ///  object.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An <see cref="T:System.Globalization.CultureInfo" />
    ///  that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to the specified type.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An <see cref="T:System.Globalization.CultureInfo" />
    ///  that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The type to convert the object to. </param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be provided. </param>
    ///  <param name="propertyValues">A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  method. </param>
    ///<returns>The newly created object, or <see langword="null" />
    ///  if the object could not be created. The default implementation returns <see langword="null" />
    ///  .</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>Retrieves the set of properties for this type. By default, a type does not return any properties. </summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be provided. </param>
    ///  <param name="value">The value of the object to get the properties for. </param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties. </param>
    ///<returns>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectangleConverter = class(TDNGenericImport<DNRectangleConverterClass, DNRectangleConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeConverterClass = interface(DNObjectClass)
  ['{49BE830D-5D51-560C-852B-2BF0871657C5}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.SizeConverter" />
    ///  object.</summary>
    {class} function init: DNSizeConverter;

  end;

  ///<summary>The <see cref="T:System.Drawing.SizeConverter" />
  ///  class is used to convert from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeDescriptor" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.SizeConverter')]
  DNSizeConverter = interface(DNObject)
  ['{0149E1CD-362B-368D-8F5E-257A59ACEED2}']
  { methods } 

    ///<summary>Determines whether this converter can convert an object in the specified source type to the native type of the converter.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="sourceType">The type you want to convert from. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this object can perform the conversion.</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This can be <see langword="null" />
    ///  , so always check. Also, properties on the context object can return <see langword="null" />
    ///  .</param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type you want to convert to. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether changing a value on this object should require a call to the <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  method to create a new value.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
    ///  object should be called when a change is made to one or more properties of this object.</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Determines whether this object supports properties. By default, this is <see langword="false" />
    ///  .</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///<returns><see langword="true" />
    ///  if the <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  method should be called to find the properties of this object.</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the specified object to the converter's native type.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An <see cref="T:System.Globalization.CultureInfo" />
    ///  object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///<returns>The converted object. </returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the specified object to the specified type.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to get additional information about the environment this converter is being called from. This may be <see langword="null" />
    ///  , so you should always check. Also, properties on the context object may also return <see langword="null" />
    ///  . </param>
    ///  <param name="culture">An <see cref="T:System.Globalization.CultureInfo" />
    ///  object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard. </param>
    ///  <param name="value">The object to convert. </param>
    ///  <param name="destinationType">The type to convert the object to. </param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException">The conversion cannot be completed.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.</summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///  <param name="propertyValues">A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
    ///  method. </param>
    ///<returns>The newly created object, or <see langword="null" />
    ///  if the object could not be created. The default implementation returns <see langword="null" />
    ///  .</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>Retrieves the set of properties for this type. By default, a type does not have any properties to return. </summary>
    ///  <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor" />
    ///  through which additional context can be provided. </param>
    ///  <param name="value">The value of the object to get the properties for. </param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties. </param>
    ///<returns>The set of properties that should be exposed for this data type. If no properties should be exposed, this may return <see langword="null" />
    ///  . The default implementation always returns <see langword="null" />
    ///  .</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFConverterClass = interface(DNObjectClass)
  ['{A5C40D56-7FF1-5EBE-8B7E-C76DD640AFB0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.SizeFConverter" />
    ///  class.</summary>
    {class} function init: DNSizeFConverter;

  end;

  ///<summary>Converts <see cref="T:System.Drawing.SizeF" />
  ///  objects from one type to another.</summary>
  [DNTypeName('System.Drawing.SizeFConverter')]
  DNSizeFConverter = interface(DNObject)
  ['{EEF07B80-8E1B-3AF5-BACF-FFEE3B7A57EF}']
  { methods } 

    ///<summary>Returns a value indicating whether the converter can convert from the type specified to the <see cref="T:System.Drawing.SizeF" />
    ///  type, using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be supplied.</param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  the represents the type you wish to convert from.</param>
    ///<returns><see langword="true" />
    ///  to indicate the conversion can be performed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value indicating whether the <see cref="T:System.Drawing.SizeFConverter" />
    ///  can convert a <see cref="T:System.Drawing.SizeF" />
    ///  to the specified type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be supplied.</param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type you want to convert from.</param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the conversion otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value indicating whether changing a value on this object requires a call to the <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" />
    ///  method to create a new value.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. This may be <see langword="null" />
    ///  .</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Returns whether the <see cref="T:System.Drawing.SizeF" />
    ///  type supports properties.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be supplied.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to use as the current culture. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to convert. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that represents the converted value.</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />
    ///  . If null is passed, the current culture is assumed. </param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to convert. </param>
    ///  <param name="destinationType">The <see cref="T:System.Type" />
    ///  to convert the value parameter to. </param>
    ///<returns>An <see cref="T:System.Object" />
    ///  that represents the converted value.</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates an instance of a <see cref="T:System.Drawing.SizeF" />
    ///  with the specified property values using the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be supplied.</param>
    ///  <param name="propertyValues">An <see cref="T:System.Collections.IDictionary" />
    ///  containing property names and values.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the new <see cref="T:System.Drawing.SizeF" />
    ///  , or <see langword="null" />
    ///  if the object cannot be created.</returns>
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    ///<summary>Retrieves a set of properties for the <see cref="T:System.Drawing.SizeF" />
    ///  type using the specified context and attributes.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  through which additional context can be supplied.</param>
    ///  <param name="value">The <see cref="T:System.Object" />
    ///  to return properties for.</param>
    ///  <param name="attributes">An array of <see cref="T:System.Attribute" />
    ///  objects that describe the properties.</param>
    ///<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  containing the properties.</returns>
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeFConverter = class(TDNGenericImport<DNSizeFConverterClass, DNSizeFConverter>) end;

  //-------------namespace: System.Drawing.Configuration----------------
  DNSystemDrawingSectionClass = interface(DNObjectClass)
  ['{AE5FA05C-C43D-5E9F-BD9A-79C3816F312B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Configuration.SystemDrawingSection" />
    ///  class.</summary>
    {class} function init: DNSystemDrawingSection;

  end;

  ///<summary>Represents the configuration section used by classes in the <see cref="N:System.Drawing" />
  ///  namespace.</summary>
  [DNTypeName('System.Drawing.Configuration.SystemDrawingSection')]
  DNSystemDrawingSection = interface(DNObject)
  ['{289B240A-8971-3582-9549-E64B875A76C1}']
  { getters & setters } 

    function get_BitmapSuffix: string;
    procedure set_BitmapSuffix(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the suffix to append to a file name indicated by a <see cref="T:System.Drawing.ToolboxBitmapAttribute" />
    ///  when an assembly is declared with a <see cref="T:System.Drawing.BitmapSuffixInSameAssemblyAttribute" />
    ///  or a <see cref="T:System.Drawing.BitmapSuffixInSatelliteAssemblyAttribute" />
    ///  .</summary>
    ///<returns>The bitmap suffix.</returns>
    property BitmapSuffix: string read get_BitmapSuffix write set_BitmapSuffix;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSystemDrawingSection = class(TDNGenericImport<DNSystemDrawingSectionClass, DNSystemDrawingSection>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{168C1B92-8815-550A-8D88-A455269AF7F6}']
  { static getter & setter } 

    {class} function get_Transparent: DNBrush;
    {class} function get_AliceBlue: DNBrush;
    {class} function get_AntiqueWhite: DNBrush;
    {class} function get_Aqua: DNBrush;
    {class} function get_Aquamarine: DNBrush;
    {class} function get_Azure: DNBrush;
    {class} function get_Beige: DNBrush;
    {class} function get_Bisque: DNBrush;
    {class} function get_Black: DNBrush;
    {class} function get_BlanchedAlmond: DNBrush;
    {class} function get_Blue: DNBrush;
    {class} function get_BlueViolet: DNBrush;
    {class} function get_Brown: DNBrush;
    {class} function get_BurlyWood: DNBrush;
    {class} function get_CadetBlue: DNBrush;
    {class} function get_Chartreuse: DNBrush;
    {class} function get_Chocolate: DNBrush;
    {class} function get_Coral: DNBrush;
    {class} function get_CornflowerBlue: DNBrush;
    {class} function get_Cornsilk: DNBrush;
    {class} function get_Crimson: DNBrush;
    {class} function get_Cyan: DNBrush;
    {class} function get_DarkBlue: DNBrush;
    {class} function get_DarkCyan: DNBrush;
    {class} function get_DarkGoldenrod: DNBrush;
    {class} function get_DarkGray: DNBrush;
    {class} function get_DarkGreen: DNBrush;
    {class} function get_DarkKhaki: DNBrush;
    {class} function get_DarkMagenta: DNBrush;
    {class} function get_DarkOliveGreen: DNBrush;
    {class} function get_DarkOrange: DNBrush;
    {class} function get_DarkOrchid: DNBrush;
    {class} function get_DarkRed: DNBrush;
    {class} function get_DarkSalmon: DNBrush;
    {class} function get_DarkSeaGreen: DNBrush;
    {class} function get_DarkSlateBlue: DNBrush;
    {class} function get_DarkSlateGray: DNBrush;
    {class} function get_DarkTurquoise: DNBrush;
    {class} function get_DarkViolet: DNBrush;
    {class} function get_DeepPink: DNBrush;
    {class} function get_DeepSkyBlue: DNBrush;
    {class} function get_DimGray: DNBrush;
    {class} function get_DodgerBlue: DNBrush;
    {class} function get_Firebrick: DNBrush;
    {class} function get_FloralWhite: DNBrush;
    {class} function get_ForestGreen: DNBrush;
    {class} function get_Fuchsia: DNBrush;
    {class} function get_Gainsboro: DNBrush;
    {class} function get_GhostWhite: DNBrush;
    {class} function get_Gold: DNBrush;
    {class} function get_Goldenrod: DNBrush;
    {class} function get_Gray: DNBrush;
    {class} function get_Green: DNBrush;
    {class} function get_GreenYellow: DNBrush;
    {class} function get_Honeydew: DNBrush;
    {class} function get_HotPink: DNBrush;
    {class} function get_IndianRed: DNBrush;
    {class} function get_Indigo: DNBrush;
    {class} function get_Ivory: DNBrush;
    {class} function get_Khaki: DNBrush;
    {class} function get_Lavender: DNBrush;
    {class} function get_LavenderBlush: DNBrush;
    {class} function get_LawnGreen: DNBrush;
    {class} function get_LemonChiffon: DNBrush;
    {class} function get_LightBlue: DNBrush;
    {class} function get_LightCoral: DNBrush;
    {class} function get_LightCyan: DNBrush;
    {class} function get_LightGoldenrodYellow: DNBrush;
    {class} function get_LightGreen: DNBrush;
    {class} function get_LightGray: DNBrush;
    {class} function get_LightPink: DNBrush;
    {class} function get_LightSalmon: DNBrush;
    {class} function get_LightSeaGreen: DNBrush;
    {class} function get_LightSkyBlue: DNBrush;
    {class} function get_LightSlateGray: DNBrush;
    {class} function get_LightSteelBlue: DNBrush;
    {class} function get_LightYellow: DNBrush;
    {class} function get_Lime: DNBrush;
    {class} function get_LimeGreen: DNBrush;
    {class} function get_Linen: DNBrush;
    {class} function get_Magenta: DNBrush;
    {class} function get_Maroon: DNBrush;
    {class} function get_MediumAquamarine: DNBrush;
    {class} function get_MediumBlue: DNBrush;
    {class} function get_MediumOrchid: DNBrush;
    {class} function get_MediumPurple: DNBrush;
    {class} function get_MediumSeaGreen: DNBrush;
    {class} function get_MediumSlateBlue: DNBrush;
    {class} function get_MediumSpringGreen: DNBrush;
    {class} function get_MediumTurquoise: DNBrush;
    {class} function get_MediumVioletRed: DNBrush;
    {class} function get_MidnightBlue: DNBrush;
    {class} function get_MintCream: DNBrush;
    {class} function get_MistyRose: DNBrush;
    {class} function get_Moccasin: DNBrush;
    {class} function get_NavajoWhite: DNBrush;
    {class} function get_Navy: DNBrush;
    {class} function get_OldLace: DNBrush;
    {class} function get_Olive: DNBrush;
    {class} function get_OliveDrab: DNBrush;
    {class} function get_Orange: DNBrush;
    {class} function get_OrangeRed: DNBrush;
    {class} function get_Orchid: DNBrush;
    {class} function get_PaleGoldenrod: DNBrush;
    {class} function get_PaleGreen: DNBrush;
    {class} function get_PaleTurquoise: DNBrush;
    {class} function get_PaleVioletRed: DNBrush;
    {class} function get_PapayaWhip: DNBrush;
    {class} function get_PeachPuff: DNBrush;
    {class} function get_Peru: DNBrush;
    {class} function get_Pink: DNBrush;
    {class} function get_Plum: DNBrush;
    {class} function get_PowderBlue: DNBrush;
    {class} function get_Purple: DNBrush;
    {class} function get_Red: DNBrush;
    {class} function get_RosyBrown: DNBrush;
    {class} function get_RoyalBlue: DNBrush;
    {class} function get_SaddleBrown: DNBrush;
    {class} function get_Salmon: DNBrush;
    {class} function get_SandyBrown: DNBrush;
    {class} function get_SeaGreen: DNBrush;
    {class} function get_SeaShell: DNBrush;
    {class} function get_Sienna: DNBrush;
    {class} function get_Silver: DNBrush;
    {class} function get_SkyBlue: DNBrush;
    {class} function get_SlateBlue: DNBrush;
    {class} function get_SlateGray: DNBrush;
    {class} function get_Snow: DNBrush;
    {class} function get_SpringGreen: DNBrush;
    {class} function get_SteelBlue: DNBrush;
    {class} function get_Tan: DNBrush;
    {class} function get_Teal: DNBrush;
    {class} function get_Thistle: DNBrush;
    {class} function get_Tomato: DNBrush;
    {class} function get_Turquoise: DNBrush;
    {class} function get_Violet: DNBrush;
    {class} function get_Wheat: DNBrush;
    {class} function get_White: DNBrush;
    {class} function get_WhiteSmoke: DNBrush;
    {class} function get_Yellow: DNBrush;
    {class} function get_YellowGreen: DNBrush;

  { static propertys } 

    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Transparent: DNBrush read get_Transparent;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property AliceBlue: DNBrush read get_AliceBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property AntiqueWhite: DNBrush read get_AntiqueWhite;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Aqua: DNBrush read get_Aqua;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Aquamarine: DNBrush read get_Aquamarine;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Azure: DNBrush read get_Azure;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Beige: DNBrush read get_Beige;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Bisque: DNBrush read get_Bisque;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Black: DNBrush read get_Black;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property BlanchedAlmond: DNBrush read get_BlanchedAlmond;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Blue: DNBrush read get_Blue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property BlueViolet: DNBrush read get_BlueViolet;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Brown: DNBrush read get_Brown;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property BurlyWood: DNBrush read get_BurlyWood;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property CadetBlue: DNBrush read get_CadetBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Chartreuse: DNBrush read get_Chartreuse;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Chocolate: DNBrush read get_Chocolate;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Coral: DNBrush read get_Coral;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property CornflowerBlue: DNBrush read get_CornflowerBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Cornsilk: DNBrush read get_Cornsilk;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Crimson: DNBrush read get_Crimson;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Cyan: DNBrush read get_Cyan;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkBlue: DNBrush read get_DarkBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkCyan: DNBrush read get_DarkCyan;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGoldenrod: DNBrush read get_DarkGoldenrod;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGray: DNBrush read get_DarkGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGreen: DNBrush read get_DarkGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkKhaki: DNBrush read get_DarkKhaki;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkMagenta: DNBrush read get_DarkMagenta;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOliveGreen: DNBrush read get_DarkOliveGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOrange: DNBrush read get_DarkOrange;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOrchid: DNBrush read get_DarkOrchid;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkRed: DNBrush read get_DarkRed;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSalmon: DNBrush read get_DarkSalmon;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSeaGreen: DNBrush read get_DarkSeaGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSlateBlue: DNBrush read get_DarkSlateBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSlateGray: DNBrush read get_DarkSlateGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkTurquoise: DNBrush read get_DarkTurquoise;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkViolet: DNBrush read get_DarkViolet;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DeepPink: DNBrush read get_DeepPink;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DeepSkyBlue: DNBrush read get_DeepSkyBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DimGray: DNBrush read get_DimGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property DodgerBlue: DNBrush read get_DodgerBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Firebrick: DNBrush read get_Firebrick;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property FloralWhite: DNBrush read get_FloralWhite;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property ForestGreen: DNBrush read get_ForestGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Fuchsia: DNBrush read get_Fuchsia;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Gainsboro: DNBrush read get_Gainsboro;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property GhostWhite: DNBrush read get_GhostWhite;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Gold: DNBrush read get_Gold;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Goldenrod: DNBrush read get_Goldenrod;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Gray: DNBrush read get_Gray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Green: DNBrush read get_Green;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property GreenYellow: DNBrush read get_GreenYellow;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Honeydew: DNBrush read get_Honeydew;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property HotPink: DNBrush read get_HotPink;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property IndianRed: DNBrush read get_IndianRed;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Indigo: DNBrush read get_Indigo;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Ivory: DNBrush read get_Ivory;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Khaki: DNBrush read get_Khaki;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Lavender: DNBrush read get_Lavender;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LavenderBlush: DNBrush read get_LavenderBlush;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LawnGreen: DNBrush read get_LawnGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LemonChiffon: DNBrush read get_LemonChiffon;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightBlue: DNBrush read get_LightBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightCoral: DNBrush read get_LightCoral;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightCyan: DNBrush read get_LightCyan;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGoldenrodYellow: DNBrush read get_LightGoldenrodYellow;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGreen: DNBrush read get_LightGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGray: DNBrush read get_LightGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightPink: DNBrush read get_LightPink;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSalmon: DNBrush read get_LightSalmon;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSeaGreen: DNBrush read get_LightSeaGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSkyBlue: DNBrush read get_LightSkyBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSlateGray: DNBrush read get_LightSlateGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSteelBlue: DNBrush read get_LightSteelBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LightYellow: DNBrush read get_LightYellow;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Lime: DNBrush read get_Lime;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property LimeGreen: DNBrush read get_LimeGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Linen: DNBrush read get_Linen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Magenta: DNBrush read get_Magenta;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Maroon: DNBrush read get_Maroon;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumAquamarine: DNBrush read get_MediumAquamarine;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumBlue: DNBrush read get_MediumBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumOrchid: DNBrush read get_MediumOrchid;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumPurple: DNBrush read get_MediumPurple;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSeaGreen: DNBrush read get_MediumSeaGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSlateBlue: DNBrush read get_MediumSlateBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSpringGreen: DNBrush read get_MediumSpringGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumTurquoise: DNBrush read get_MediumTurquoise;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumVioletRed: DNBrush read get_MediumVioletRed;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MidnightBlue: DNBrush read get_MidnightBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MintCream: DNBrush read get_MintCream;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property MistyRose: DNBrush read get_MistyRose;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Moccasin: DNBrush read get_Moccasin;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property NavajoWhite: DNBrush read get_NavajoWhite;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Navy: DNBrush read get_Navy;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property OldLace: DNBrush read get_OldLace;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Olive: DNBrush read get_Olive;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property OliveDrab: DNBrush read get_OliveDrab;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Orange: DNBrush read get_Orange;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property OrangeRed: DNBrush read get_OrangeRed;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Orchid: DNBrush read get_Orchid;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleGoldenrod: DNBrush read get_PaleGoldenrod;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleGreen: DNBrush read get_PaleGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleTurquoise: DNBrush read get_PaleTurquoise;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleVioletRed: DNBrush read get_PaleVioletRed;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PapayaWhip: DNBrush read get_PapayaWhip;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PeachPuff: DNBrush read get_PeachPuff;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Peru: DNBrush read get_Peru;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Pink: DNBrush read get_Pink;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Plum: DNBrush read get_Plum;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property PowderBlue: DNBrush read get_PowderBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Purple: DNBrush read get_Purple;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Red: DNBrush read get_Red;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property RosyBrown: DNBrush read get_RosyBrown;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property RoyalBlue: DNBrush read get_RoyalBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SaddleBrown: DNBrush read get_SaddleBrown;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Salmon: DNBrush read get_Salmon;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SandyBrown: DNBrush read get_SandyBrown;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SeaGreen: DNBrush read get_SeaGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SeaShell: DNBrush read get_SeaShell;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Sienna: DNBrush read get_Sienna;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Silver: DNBrush read get_Silver;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SkyBlue: DNBrush read get_SkyBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SlateBlue: DNBrush read get_SlateBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SlateGray: DNBrush read get_SlateGray;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Snow: DNBrush read get_Snow;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SpringGreen: DNBrush read get_SpringGreen;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property SteelBlue: DNBrush read get_SteelBlue;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Tan: DNBrush read get_Tan;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Teal: DNBrush read get_Teal;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Thistle: DNBrush read get_Thistle;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Tomato: DNBrush read get_Tomato;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Turquoise: DNBrush read get_Turquoise;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Violet: DNBrush read get_Violet;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Wheat: DNBrush read get_Wheat;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property White: DNBrush read get_White;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property WhiteSmoke: DNBrush read get_WhiteSmoke;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property Yellow: DNBrush read get_Yellow;
    ///<summary>Gets a system-defined <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  object set to a system-defined color.</returns>
    {class} property YellowGreen: DNBrush read get_YellowGreen;
  end;

  ///<summary>Brushes for all the standard colors. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Brushes')]
  DNBrushes = interface(DDN.mscorlib.DNObject)
  ['{C63C38E2-2655-356B-9A1A-0117499AEC35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushes = class(TDNGenericImport<DNBrushesClass, DNBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsClass = interface(DNObjectClass)
  ['{A7CA480C-8C3B-58A8-BBDB-9FE64246B5C8}']
  end;

  ///<summary>Provides a graphics buffer for double buffering.</summary>
  [DNTypeName('System.Drawing.BufferedGraphics')]
  DNBufferedGraphics = interface(DDN.mscorlib.DNIDisposable)
  ['{330A3DBD-B0A9-3C31-AB87-C7E25DD86B21}']
  { getters & setters } 

    function get_Graphics: DNGraphics;

  { methods } 

    ///<summary>Writes the contents of the graphics buffer to the default device.</summary>
    procedure Render; overload;
    ///<summary>Releases all resources used by the <see cref="T:System.Drawing.BufferedGraphics" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>Writes the contents of the graphics buffer to the device context associated with the specified <see cref="T:System.IntPtr" />
    ///  handle.</summary>
    ///  <param name="targetDC">An <see cref="T:System.IntPtr" />
    ///  that points to the device context to which to write the contents of the graphics buffer. </param>
    procedure Render(targetDC: IntPtr); overload;
    ///<summary>Writes the contents of the graphics buffer to the specified <see cref="T:System.Drawing.Graphics" />
    ///  object.</summary>
    ///  <param name="target">A <see cref="T:System.Drawing.Graphics" />
    ///  object to which to write the contents of the graphics buffer. </param>
    procedure Render(target: DNGraphics); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Drawing.Graphics" />
    ///  object that outputs to the graphics buffer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  object that outputs to the graphics buffer.</returns>
    property Graphics: DNGraphics read get_Graphics;
  end;

  TDNBufferedGraphics = class(TDNGenericImport<DNBufferedGraphicsClass, DNBufferedGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsContextClass = interface(DNObjectClass)
  ['{BAC41E8C-E712-5FD5-9455-C8CDA1EAF623}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  class.</summary>
    {class} function init: DNBufferedGraphicsContext;

  end;

  ///<summary>Provides methods for creating graphics buffers that can be used for double buffering.</summary>
  [DNTypeName('System.Drawing.BufferedGraphicsContext')]
  DNBufferedGraphicsContext = interface(DDN.mscorlib.DNIDisposable)
  ['{E35AA1CB-98A1-3C1B-8B01-CD59A9CB2791}']
  { getters & setters } 

    function get_MaximumBuffer: DNSize;
    procedure set_MaximumBuffer(value: DNSize);

  { methods } 

    ///<summary>Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="targetGraphics">The <see cref="T:System.Drawing.Graphics" />
    ///  to match the pixel format for the new buffer to. </param>
    ///  <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" />
    ///  indicating the size of the buffer to create. </param>
    ///<returns>A <see cref="T:System.Drawing.BufferedGraphics" />
    ///  that can be used to draw to a buffer of the specified dimensions.</returns>
    function Allocate(targetGraphics: DNGraphics; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    ///<summary>Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="targetDC">An <see cref="T:System.IntPtr" />
    ///  to a device context to match the pixel format of the new buffer to. </param>
    ///  <param name="targetRectangle">A <see cref="T:System.Drawing.Rectangle" />
    ///  indicating the size of the buffer to create. </param>
    ///<returns>A <see cref="T:System.Drawing.BufferedGraphics" />
    ///  that can be used to draw to a buffer of the specified dimensions.</returns>
    function Allocate(targetDC: IntPtr; targetRectangle: DNRectangle): DNBufferedGraphics; overload;
    ///<summary>Releases all resources used by the <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Disposes of the current graphics buffer, if a buffer has been allocated and has not yet been disposed.</summary>
    procedure Invalidate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the maximum size of the buffer to use.</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  indicating the maximum size of the buffer dimensions.</returns>
    ///<exception cref="T:System.ArgumentException">The height or width of the size is less than or equal to zero. </exception>
    property MaximumBuffer: DNSize read get_MaximumBuffer write set_MaximumBuffer;
  end;

  TDNBufferedGraphicsContext = class(TDNGenericImport<DNBufferedGraphicsContextClass, DNBufferedGraphicsContext>) end;

  //-------------namespace: System.Drawing----------------
  DNBufferedGraphicsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DB77C3A-2632-539B-B93B-1D2640EF8267}']
  { static getter & setter } 

    {class} function get_Current: DNBufferedGraphicsContext;

  { static propertys } 

    ///<summary>Gets the <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  for the current application domain.</summary>
    ///<returns>The <see cref="T:System.Drawing.BufferedGraphicsContext" />
    ///  for the current application domain.</returns>
    {class} property Current: DNBufferedGraphicsContext read get_Current;
  end;

  ///<summary>Provides access to the main buffered graphics context object for the application domain.</summary>
  [DNTypeName('System.Drawing.BufferedGraphicsManager')]
  DNBufferedGraphicsManager = interface(DDN.mscorlib.DNObject)
  ['{52C2C884-4CCF-3F14-AB9E-090103E4157B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBufferedGraphicsManager = class(TDNGenericImport<DNBufferedGraphicsManagerClass, DNBufferedGraphicsManager>) end;

  //-------------namespace: System.Drawing----------------
  DNColorTranslatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4122E647-1518-5D38-99A8-8DC28AD4D278}']
  { static methods } 

    ///<summary>Translates the specified <see cref="T:System.Drawing.Color" />
    ///  structure to a Windows color.</summary>
    ///  <param name="c">The <see cref="T:System.Drawing.Color" />
    ///  structure to translate. </param>
    ///<returns>The Windows color value.</returns>
    {class} function ToWin32(c: DNColor): Int32;
    ///<summary>Translates the specified <see cref="T:System.Drawing.Color" />
    ///  structure to an OLE color.</summary>
    ///  <param name="c">The <see cref="T:System.Drawing.Color" />
    ///  structure to translate. </param>
    ///<returns>The OLE color value.</returns>
    {class} function ToOle(c: DNColor): Int32;
    ///<summary>Translates an OLE color value to a GDI+ <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="oleColor">The OLE color to translate. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the translated OLE color.</returns>
    {class} function FromOle(oleColor: Int32): DNColor;
    ///<summary>Translates a Windows color value to a GDI+ <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="win32Color">The Windows color to translate. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the translated Windows color.</returns>
    {class} function FromWin32(win32Color: Int32): DNColor;
    ///<summary>Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="htmlColor">The string representation of the Html color to translate. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the translated HTML color or <see cref="F:System.Drawing.Color.Empty" />
    ///  if <paramref name="htmlColor" />
    ///  is <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.Exception"><paramref name="htmlColor" />
    ///  is not a valid HTML color name.</exception>
    {class} function FromHtml(htmlColor: string): DNColor;
    ///<summary>Translates the specified <see cref="T:System.Drawing.Color" />
    ///  structure to an HTML string color representation.</summary>
    ///  <param name="c">The <see cref="T:System.Drawing.Color" />
    ///  structure to translate. </param>
    ///<returns>The string that represents the HTML color.</returns>
    {class} function ToHtml(c: DNColor): string;

  end;

  ///<summary>Translates colors to and from GDI+ <see cref="T:System.Drawing.Color" />
  ///  structures. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.ColorTranslator')]
  DNColorTranslator = interface(DDN.mscorlib.DNObject)
  ['{564300EB-EE73-38E4-AE22-C0DB8F4979D4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorTranslator = class(TDNGenericImport<DNColorTranslatorClass, DNColorTranslator>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPropertyValueUIItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6965276E-8BB8-5FDC-BAEE-CD1F4E975D40}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  class.</summary>
    ///  <param name="uiItemImage">The icon to display. The image must be 8 x 8 pixels. </param>
    ///  <param name="handler">The handler to invoke when the image is double-clicked. </param>
    ///  <param name="tooltip">The <see cref="P:System.Drawing.Design.PropertyValueUIItem.ToolTip" />
    ///  to display for the property that this <see cref="T:System.Drawing.Design.PropertyValueUIItem" />
    ///  is associated with. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uiItemImage" />
    ///  or <paramref name="handler" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(uiItemImage: DNImage; handler: DNPropertyValueUIItemInvokeHandler; tooltip: string): DNPropertyValueUIItem;

  end;

  ///<summary>Provides information about a property displayed in the Properties window, including the associated event handler, pop-up information string, and the icon to display for the property.</summary>
  [DNTypeName('System.Drawing.Design.PropertyValueUIItem')]
  DNPropertyValueUIItem = interface(DDN.mscorlib.DNObject)
  ['{C2D34DDC-4DEF-3B22-B852-2334D3D9E33C}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_InvokeHandler: DNPropertyValueUIItemInvokeHandler;
    function get_ToolTip: string;

  { methods } 

    ///<summary>Resets the user interface (UI) item.</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the 8 x 8 pixel image that will be drawn in the Properties window.</summary>
    ///<returns>The image to use for the property icon.</returns>
    property Image: DNImage read get_Image;
    ///<summary>Gets the handler that is raised when a user double-clicks this item.</summary>
    ///<returns>A <see cref="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler" />
    ///  indicating the event handler for this user interface (UI) item.</returns>
    property InvokeHandler: DNPropertyValueUIItemInvokeHandler read get_InvokeHandler;
    ///<summary>Gets or sets the information string to display for this item.</summary>
    ///<returns>A string containing the information string to display for this item.</returns>
    property ToolTip: string read get_ToolTip;
  end;

  TDNPropertyValueUIItem = class(TDNGenericImport<DNPropertyValueUIItemClass, DNPropertyValueUIItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxItemClass = interface(DNObjectClass)
  ['{93226D67-BDB9-5256-B65F-33A067F2F32F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  class.</summary>
    {class} function init: DNToolboxItem; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  class that creates the specified type of component.</summary>
    ///  <param name="toolType">The type of <see cref="T:System.ComponentModel.IComponent" />
    ///  that the toolbox item creates. </param>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  was locked. </exception>
    {class} function init(toolType: DDN.mscorlib.DNType): DNToolboxItem; overload;

  end;

  ///<summary>Provides a base implementation of a toolbox item.</summary>
  [DNTypeName('System.Drawing.Design.ToolboxItem')]
  DNToolboxItem = interface(DDN.mscorlib.DNISerializable)
  ['{DC283D53-B4AF-30F8-80E9-F6FBBF5CCCD2}']
  { getters & setters } 

    function get_AssemblyName: DDN.mscorlib.DNAssemblyName;
    procedure set_AssemblyName(value: DDN.mscorlib.DNAssemblyName);
    function get_DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName>;
    procedure set_DependentAssemblies(value: TArray<DDN.mscorlib.DNAssemblyName>);
    function get_Bitmap: DNBitmap;
    procedure set_Bitmap(value: DNBitmap);
    function get_OriginalBitmap: DNBitmap;
    procedure set_OriginalBitmap(value: DNBitmap);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_ComponentType: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_Filter: DDN.mscorlib.DNICollection;
    procedure set_Filter(value: DDN.mscorlib.DNICollection);
    function get_IsTransient: Boolean;
    procedure set_IsTransient(value: Boolean);
    function get_Locked: Boolean;
    function get_Properties: DDN.mscorlib.DNIDictionary;
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Version: string;

  { events } 

    procedure add_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure remove_ComponentsCreated(value: DNToolboxComponentsCreatedEventHandler);
    procedure add_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);
    procedure remove_ComponentsCreating(value: DNToolboxComponentsCreatingEventHandler);

  { methods } 

    ///<summary>Creates the components that the toolbox item is configured to create.</summary>
    ///<returns>An array of created <see cref="T:System.ComponentModel.IComponent" />
    ///  objects.</returns>
    function CreateComponents: TArray<DDN.System.DNIComponent>; overload;
    ///<summary>Creates the components that the toolbox item is configured to create, using the specified designer host.</summary>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  to use when creating the components. </param>
    ///<returns>An array of created <see cref="T:System.ComponentModel.IComponent" />
    ///  objects.</returns>
    function CreateComponents(host: DDN.System.DNIDesignerHost): TArray<DDN.System.DNIComponent>; overload;
    ///<summary>Creates the components that the toolbox item is configured to create, using the specified designer host and default values.</summary>
    ///  <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  to use when creating the components.</param>
    ///  <param name="defaultValues">A dictionary of property name/value pairs of default values with which to initialize the component.</param>
    ///<returns>An array of created <see cref="T:System.ComponentModel.IComponent" />
    ///  objects.</returns>
    function CreateComponents(host: DDN.System.DNIDesignerHost; defaultValues: DDN.mscorlib.DNIDictionary): TArray<DDN.System.DNIComponent>; overload;
    ///<summary>Determines whether two <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  instances are equal.</summary>
    ///  <param name="obj">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  to compare with the current <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  is equal to the current <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A hash code for the current <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Enables access to the type associated with the toolbox item.</summary>
    ///  <param name="host">The designer host to query for <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />
    ///  .</param>
    ///<returns>The type associated with the toolbox item.</returns>
    function GetType(host: DDN.System.DNIDesignerHost): DDN.mscorlib.DNType; overload;
    ///<summary>Locks the toolbox item and prevents changes to its properties.</summary>
    procedure Lock;
    ///<summary>Returns a <see cref="T:System.String" />
    ///  that represents the current <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the current <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Initializes the current toolbox item with the specified type to create.</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  that the toolbox item creates. </param>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  was locked. </exception>
    procedure Initialize(&type: DDN.mscorlib.DNType);
    function GetType: DDN.mscorlib.DNType; overload;

  { propertys } 

    ///<summary>Gets or sets the name of the assembly that contains the type or types that the toolbox item creates.</summary>
    ///<returns>An <see cref="T:System.Reflection.AssemblyName" />
    ///  that indicates the assembly containing the type or types to create.</returns>
    property AssemblyName: DDN.mscorlib.DNAssemblyName read get_AssemblyName write set_AssemblyName;
    ///<summary>Gets or sets the <see cref="T:System.Reflection.AssemblyName" />
    ///  for the toolbox item.</summary>
    ///<returns>An array of <see cref="T:System.Reflection.AssemblyName" />
    ///  objects.</returns>
    property DependentAssemblies: TArray<DDN.mscorlib.DNAssemblyName> read get_DependentAssemblies write set_DependentAssemblies;
    ///<summary>Gets or sets a bitmap to represent the toolbox item in the toolbox.</summary>
    ///<returns>A <see cref="T:System.Drawing.Bitmap" />
    ///  that represents the toolbox item in the toolbox.</returns>
    property Bitmap: DNBitmap read get_Bitmap write set_Bitmap;
    ///<summary>Gets or sets the original bitmap that will be used in the toolbox for this item.</summary>
    ///<returns>A <see cref="T:System.Drawing.Bitmap" />
    ///  that represents the toolbox item in the toolbox.</returns>
    property OriginalBitmap: DNBitmap read get_OriginalBitmap write set_OriginalBitmap;
    ///<summary>Gets or sets the company name for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the company for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    property Company: string read get_Company write set_Company;
    ///<summary>Gets the component type for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the component type for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    property ComponentType: string read get_ComponentType;
    ///<summary>Gets or sets the description for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the description for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>Gets or sets the display name for the toolbox item.</summary>
    ///<returns>The display name for the toolbox item.</returns>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>Gets or sets the filter that determines whether the toolbox item can be used on a destination component.</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  of <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />
    ///  objects.</returns>
    property Filter: DDN.mscorlib.DNICollection read get_Filter write set_Filter;
    ///<summary>Gets a value indicating whether the toolbox item is transient.</summary>
    ///<returns><see langword="true" />
    ///  , if this toolbox item should not be stored in any toolbox database when an application that is providing a toolbox closes; otherwise, <see langword="false" />
    ///  .</returns>
    property IsTransient: Boolean read get_IsTransient write set_IsTransient;
    ///<summary>Gets a value indicating whether the <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  is currently locked.</summary>
    ///<returns><see langword="true" />
    ///  if the toolbox item is locked; otherwise, <see langword="false" />
    ///  .</returns>
    property Locked: Boolean read get_Locked;
    ///<summary>Gets a dictionary of properties.</summary>
    ///<returns>A dictionary of name/value pairs (the names are property names and the values are property values).</returns>
    property Properties: DDN.mscorlib.DNIDictionary read get_Properties;
    ///<summary>Gets or sets the fully qualified name of the type of <see cref="T:System.ComponentModel.IComponent" />
    ///  that the toolbox item creates when invoked.</summary>
    ///<returns>The fully qualified type name of the type of component that this toolbox item creates.</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>Gets the version for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the version for this <see cref="T:System.Drawing.Design.ToolboxItem" />
    ///  .</returns>
    property Version: string read get_Version;
  end;

  TDNToolboxItem = class(TDNGenericImport<DNToolboxItemClass, DNToolboxItem>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNUITypeEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5800513C-779B-5AFD-B482-18908D1F5A3C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  class.</summary>
    {class} function init: DNUITypeEditor;

  end;

  ///<summary>Provides a base class that can be used to design value editors that can provide a user interface (UI) for representing and editing the values of objects of the supported data types.</summary>
  [DNTypeName('System.Drawing.Design.UITypeEditor')]
  DNUITypeEditor = interface(DDN.mscorlib.DNObject)
  ['{99538F93-7A3F-3E3D-84D3-38275B52C7A5}']
  { getters & setters } 

    function get_IsDropDownResizable: Boolean;

  { methods } 

    ///<summary>Edits the value of the specified object using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  method.</summary>
    ///  <param name="provider">An <see cref="T:System.IServiceProvider" />
    ///  that this editor can use to obtain services. </param>
    ///  <param name="value">The object to edit. </param>
    ///<returns>The new value of the object.</returns>
    function EditValue(provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  method.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to gain additional context information. </param>
    ///  <param name="provider">An <see cref="T:System.IServiceProvider" />
    ///  that this editor can use to obtain services. </param>
    ///  <param name="value">The object to edit. </param>
    ///<returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
    function EditValue(context: DDN.System.DNITypeDescriptorContext; provider: DDN.mscorlib.DNIServiceProvider; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  method.</summary>
    ///<returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />
    ///  enumeration value that indicates the style of editor used by the current <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  . By default, this method will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />
    ///  .</returns>
    function GetEditStyle: DNUITypeEditorEditStyle; overload;
    ///<summary>Indicates whether this editor supports painting a representation of an object's value.</summary>
    ///<returns><see langword="true" />
    ///  if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
    ///  is implemented; otherwise, <see langword="false" />
    ///  .</returns>
    function GetPaintValueSupported: Boolean; overload;
    ///<summary>Indicates whether the specified context supports painting a representation of an object's value within the specified context.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to gain additional context information. </param>
    ///<returns><see langword="true" />
    ///  if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
    ///  is implemented; otherwise, <see langword="false" />
    ///  .</returns>
    function GetPaintValueSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    ///<summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  method.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that can be used to gain additional context information. </param>
    ///<returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />
    ///  value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" />
    ///  method. If the <see cref="T:System.Drawing.Design.UITypeEditor" />
    ///  does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" />
    ///  will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />
    ///  .</returns>
    function GetEditStyle(context: DDN.System.DNITypeDescriptorContext): DNUITypeEditorEditStyle; overload;
    ///<summary>Paints a representation of the value of the specified object to the specified canvas.</summary>
    ///  <param name="value">The object whose value this type editor will display. </param>
    ///  <param name="canvas">A drawing canvas on which to paint the representation of the object's value. </param>
    ///  <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" />
    ///  within whose boundaries to paint the value. </param>
    procedure PaintValue(value: DDN.mscorlib.DNObject; canvas: DNGraphics; rectangle: DNRectangle); overload;
    ///<summary>Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  .</summary>
    ///  <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  that indicates what to paint and where to paint it. </param>
    procedure PaintValue(e: DNPaintValueEventArgs); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether drop-down editors should be resizable by the user.</summary>
    ///<returns><see langword="true" />
    ///  if drop-down editors are resizable; otherwise, <see langword="false" />
    ///  . </returns>
    property IsDropDownResizable: Boolean read get_IsDropDownResizable;
  end;

  TDNUITypeEditor = class(TDNGenericImport<DNUITypeEditorClass, DNUITypeEditor>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7F7B8D2-F73D-5EF8-99CE-C8C85DC7CC57}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  class.</summary>
    {class} function init: DNBlend; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  class with the specified number of factors and positions.</summary>
    ///  <param name="count">The number of elements in the <see cref="P:System.Drawing.Drawing2D.Blend.Factors" />
    ///  and <see cref="P:System.Drawing.Drawing2D.Blend.Positions" />
    ///  arrays. </param>
    {class} function init(count: Int32): DNBlend; overload;

  end;

  ///<summary>Defines a blend pattern for a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.Blend')]
  DNBlend = interface(DDN.mscorlib.DNObject)
  ['{6B74E20B-F4FF-3273-9FA8-CBD66D5D00B2}']
  { getters & setters } 

    function get_Factors: TArray<Single>;
    procedure set_Factors(value: TArray<Single>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array of blend factors for the gradient.</summary>
    ///<returns>An array of blend factors that specify the percentages of the starting color and the ending color to be used at the corresponding position.</returns>
    property Factors: TArray<Single> read get_Factors write set_Factors;
    ///<summary>Gets or sets an array of blend positions for the gradient.</summary>
    ///<returns>An array of blend positions that specify the percentages of distance along the gradient line.</returns>
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNBlend = class(TDNGenericImport<DNBlendClass, DNBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNColorBlendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C640630-04BF-5E8C-9C8D-1C535E8716E8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  class.</summary>
    {class} function init: DNColorBlend; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  class with the specified number of colors and positions.</summary>
    ///  <param name="count">The number of colors and positions in this <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  . </param>
    {class} function init(count: Int32): DNColorBlend; overload;

  end;

  ///<summary>Defines arrays of colors and positions used for interpolating color blending in a multicolor gradient. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.ColorBlend')]
  DNColorBlend = interface(DDN.mscorlib.DNObject)
  ['{E64D2B60-BEB1-3554-BCD3-2481BBE334A6}']
  { getters & setters } 

    function get_Colors: TArray<DNColor>;
    procedure set_Colors(value: TArray<DNColor>);
    function get_Positions: TArray<Single>;
    procedure set_Positions(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array of colors that represents the colors to use at corresponding positions along a gradient.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Color" />
    ///  structures that represents the colors to use at corresponding positions along a gradient.</returns>
    property Colors: TArray<DNColor> read get_Colors write set_Colors;
    ///<summary>Gets or sets the positions along a gradient line.</summary>
    ///<returns>An array of values that specify percentages of distance along the gradient line.</returns>
    property Positions: TArray<Single> read get_Positions write set_Positions;
  end;

  TDNColorBlend = class(TDNGenericImport<DNColorBlendClass, DNColorBlend>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B48935A-E731-53B0-8E8A-566DDE8D810C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  class.</summary>
    {class} function init: DNPathData;

  end;

  ///<summary>Contains the graphical data that makes up a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathData')]
  DNPathData = interface(DDN.mscorlib.DNObject)
  ['{556E6DFC-86A0-333E-B6CC-B80DBDF05065}']
  { getters & setters } 

    function get_Points: TArray<DNPointF>;
    procedure set_Points(value: TArray<DNPointF>);
    function get_Types: TArray<Byte>;
    procedure set_Types(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points through which the path is constructed.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.PointF" />
    ///  objects that represents the points through which the path is constructed.</returns>
    property Points: TArray<DNPointF> read get_Points write set_Points;
    ///<summary>Gets or sets the types of the corresponding points in the path.</summary>
    ///<returns>An array of bytes that specify the types of the corresponding points in the path.</returns>
    property Types: TArray<Byte> read get_Types write set_Types;
  end;

  TDNPathData = class(TDNGenericImport<DNPathDataClass, DNPathData>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNRegionDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{702718D6-9F2B-53F3-8F47-63AA1DF7DFD7}']
  end;

  ///<summary>Encapsulates the data that makes up a <see cref="T:System.Drawing.Region" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.RegionData')]
  DNRegionData = interface(DDN.mscorlib.DNObject)
  ['{AFF2E189-33BC-3173-98F4-F6125CAB3B08}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array of bytes that specify the <see cref="T:System.Drawing.Region" />
    ///  object.</summary>
    ///<returns>An array of bytes that specify the <see cref="T:System.Drawing.Region" />
    ///  object.</returns>
    property Data: TArray<Byte> read get_Data write set_Data;
  end;

  TDNRegionData = class(TDNGenericImport<DNRegionDataClass, DNRegionData>) end;

  //-------------namespace: System.Drawing----------------
  DNImageAnimatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{849A1BD4-4F51-5757-A37E-BF6219C4A424}']
  { static methods } 

    ///<summary>Advances the frame in the specified image. The new frame is drawn the next time the image is rendered. This method applies only to images with time-based frames.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object for which to update frames. </param>
    {class} procedure UpdateFrames(image: DNImage); overload;
    ///<summary>Returns a Boolean value indicating whether the specified image contains time-based frames.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified image contains time-based frames; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function CanAnimate(image: DNImage): Boolean;
    ///<summary>Terminates a running animation.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object to stop animating. </param>
    ///  <param name="onFrameChangedHandler">An <see langword="EventHandler" />
    ///  object that specifies the method that is called when the animation frame changes. </param>
    {class} procedure StopAnimate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    ///<summary>Displays a multiple-frame image as an animation.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object to animate. </param>
    ///  <param name="onFrameChangedHandler">An <see langword="EventHandler" />
    ///  object that specifies the method that is called when the animation frame changes. </param>
    {class} procedure Animate(image: DNImage; onFrameChangedHandler: DDN.mscorlib.DNEventHandler);
    ///<summary>Advances the frame in all images currently being animated. The new frame is drawn the next time the image is rendered.</summary>
    {class} procedure UpdateFrames; overload;

  end;

  ///<summary>Animates an image that has time-based frames.</summary>
  [DNTypeName('System.Drawing.ImageAnimator')]
  DNImageAnimator = interface(DDN.mscorlib.DNObject)
  ['{79D045E9-9A50-34E4-A668-72E48DC7DB90}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAnimator = class(TDNGenericImport<DNImageAnimatorClass, DNImageAnimator>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNBitmapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE65B648-C66F-50C6-BAF2-C9A54865BD12}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  class.</summary>
    {class} function init: DNBitmapData;

  end;

  ///<summary>Specifies the attributes of a bitmap image. The <see cref="T:System.Drawing.Imaging.BitmapData" />
  ///  class is used by the <see cref="Overload:System.Drawing.Bitmap.LockBits" />
  ///  and <see cref="M:System.Drawing.Bitmap.UnlockBits(System.Drawing.Imaging.BitmapData)" />
  ///  methods of the <see cref="T:System.Drawing.Bitmap" />
  ///  class. Not inheritable. </summary>
  [DNTypeName('System.Drawing.Imaging.BitmapData')]
  DNBitmapData = interface(DDN.mscorlib.DNObject)
  ['{3E7E92A8-C78F-3FB2-A197-5AF12F6DBA38}']
  { getters & setters } 

    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Stride: Int32;
    procedure set_Stride(value: Int32);
    function get_PixelFormat: DNPixelFormat;
    procedure set_PixelFormat(value: DNPixelFormat);
    function get_Scan0: IntPtr;
    procedure set_Scan0(value: IntPtr);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the pixel width of the <see cref="T:System.Drawing.Bitmap" />
    ///  object. This can also be thought of as the number of pixels in one scan line.</summary>
    ///<returns>The pixel width of the <see cref="T:System.Drawing.Bitmap" />
    ///  object.</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>Gets or sets the pixel height of the <see cref="T:System.Drawing.Bitmap" />
    ///  object. Also sometimes referred to as the number of scan lines.</summary>
    ///<returns>The pixel height of the <see cref="T:System.Drawing.Bitmap" />
    ///  object.</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>Gets or sets the stride width (also called scan width) of the <see cref="T:System.Drawing.Bitmap" />
    ///  object.</summary>
    ///<returns>The stride width, in bytes, of the <see cref="T:System.Drawing.Bitmap" />
    ///  object.</returns>
    property Stride: Int32 read get_Stride write set_Stride;
    ///<summary>Gets or sets the format of the pixel information in the <see cref="T:System.Drawing.Bitmap" />
    ///  object that returned this <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  that specifies the format of the pixel information in the associated <see cref="T:System.Drawing.Bitmap" />
    ///  object.</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>Gets or sets the address of the first pixel data in the bitmap. This can also be thought of as the first scan line in the bitmap.</summary>
    ///<returns>The address of the first pixel data in the bitmap.</returns>
    property Scan0: IntPtr read get_Scan0 write set_Scan0;
    ///<summary>Reserved. Do not use.</summary>
    ///<returns>Reserved. Do not use.</returns>
    property Reserved: Int32 read get_Reserved write set_Reserved;
  end;

  TDNBitmapData = class(TDNGenericImport<DNBitmapDataClass, DNBitmapData>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FB1C5DF-C902-585D-8D71-A2C1FDB00778}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  class.</summary>
    {class} function init: DNColorMap;

  end;

  ///<summary>Defines a map for converting colors. Several methods of the <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  class adjust image colors by using a color-remap table, which is an array of <see cref="T:System.Drawing.Imaging.ColorMap" />
  ///  structures. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMap')]
  DNColorMap = interface(DDN.mscorlib.DNObject)
  ['{D0BEF867-AEA4-37FE-B61A-D3AA050E1B32}']
  { getters & setters } 

    function get_OldColor: DNColor;
    procedure set_OldColor(value: DNColor);
    function get_NewColor: DNColor;
    procedure set_NewColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the existing <see cref="T:System.Drawing.Color" />
    ///  structure to be converted.</summary>
    ///<returns>The existing <see cref="T:System.Drawing.Color" />
    ///  structure to be converted.</returns>
    property OldColor: DNColor read get_OldColor write set_OldColor;
    ///<summary>Gets or sets the new <see cref="T:System.Drawing.Color" />
    ///  structure to which to convert.</summary>
    ///<returns>The new <see cref="T:System.Drawing.Color" />
    ///  structure to which to convert.</returns>
    property NewColor: DNColor read get_NewColor write set_NewColor;
  end;

  TDNColorMap = class(TDNGenericImport<DNColorMapClass, DNColorMap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorMatrixClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6515D929-3D5B-517B-B804-07A917853004}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  class.</summary>
    {class} function init: DNColorMatrix; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  class using the elements in the specified matrix <paramref name="newColorMatrix" />
    ///  .</summary>
    ///  <param name="newColorMatrix">The values of the elements for the new <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  . </param>
    {class} function init(newColorMatrix: TArray<TArray<Single>>): DNColorMatrix; overload;

  end;

  ///<summary>Defines a 5 x 5 matrix that contains the coordinates for the RGBAW space. Several methods of the <see cref="T:System.Drawing.Imaging.ImageAttributes" />
  ///  class adjust image colors by using a color matrix. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorMatrix')]
  DNColorMatrix = interface(DDN.mscorlib.DNObject)
  ['{149DE87C-0360-3126-8E4E-16844F0C316A}']
  { getters & setters } 

    function get_Matrix00: Single;
    procedure set_Matrix00(value: Single);
    function get_Matrix01: Single;
    procedure set_Matrix01(value: Single);
    function get_Matrix02: Single;
    procedure set_Matrix02(value: Single);
    function get_Matrix03: Single;
    procedure set_Matrix03(value: Single);
    function get_Matrix04: Single;
    procedure set_Matrix04(value: Single);
    function get_Matrix10: Single;
    procedure set_Matrix10(value: Single);
    function get_Matrix11: Single;
    procedure set_Matrix11(value: Single);
    function get_Matrix12: Single;
    procedure set_Matrix12(value: Single);
    function get_Matrix13: Single;
    procedure set_Matrix13(value: Single);
    function get_Matrix14: Single;
    procedure set_Matrix14(value: Single);
    function get_Matrix20: Single;
    procedure set_Matrix20(value: Single);
    function get_Matrix21: Single;
    procedure set_Matrix21(value: Single);
    function get_Matrix22: Single;
    procedure set_Matrix22(value: Single);
    function get_Matrix23: Single;
    procedure set_Matrix23(value: Single);
    function get_Matrix24: Single;
    procedure set_Matrix24(value: Single);
    function get_Matrix30: Single;
    procedure set_Matrix30(value: Single);
    function get_Matrix31: Single;
    procedure set_Matrix31(value: Single);
    function get_Matrix32: Single;
    procedure set_Matrix32(value: Single);
    function get_Matrix33: Single;
    procedure set_Matrix33(value: Single);
    function get_Matrix34: Single;
    procedure set_Matrix34(value: Single);
    function get_Matrix40: Single;
    procedure set_Matrix40(value: Single);
    function get_Matrix41: Single;
    procedure set_Matrix41(value: Single);
    function get_Matrix42: Single;
    procedure set_Matrix42(value: Single);
    function get_Matrix43: Single;
    procedure set_Matrix43(value: Single);
    function get_Matrix44: Single;
    procedure set_Matrix44(value: Single);
    function get_Item(row: Int32; column: Int32): Single;
    procedure set_Item(row: Int32; column: Int32; value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the element at the 0 (zero) row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the 0 row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix00: Single read get_Matrix00 write set_Matrix00;
    ///<summary>Gets or sets the element at the 0 (zero) row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the 0 row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix01: Single read get_Matrix01 write set_Matrix01;
    ///<summary>Gets or sets the element at the 0 (zero) row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the 0 row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix02: Single read get_Matrix02 write set_Matrix02;
    ///<summary>Gets or sets the element at the 0 (zero) row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  . Represents the alpha component.</summary>
    ///<returns>The element at the 0 row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix03: Single read get_Matrix03 write set_Matrix03;
    ///<summary>Gets or sets the element at the 0 (zero) row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the 0 row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix04: Single read get_Matrix04 write set_Matrix04;
    ///<summary>Gets or sets the element at the first row and 0 (zero) column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the first row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix10: Single read get_Matrix10 write set_Matrix10;
    ///<summary>Gets or sets the element at the first row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the first row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix11: Single read get_Matrix11 write set_Matrix11;
    ///<summary>Gets or sets the element at the first row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the first row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix12: Single read get_Matrix12 write set_Matrix12;
    ///<summary>Gets or sets the element at the first row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  . Represents the alpha component.</summary>
    ///<returns>The element at the first row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix13: Single read get_Matrix13 write set_Matrix13;
    ///<summary>Gets or sets the element at the first row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the first row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix14: Single read get_Matrix14 write set_Matrix14;
    ///<summary>Gets or sets the element at the second row and 0 (zero) column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the second row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix20: Single read get_Matrix20 write set_Matrix20;
    ///<summary>Gets or sets the element at the second row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the second row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix21: Single read get_Matrix21 write set_Matrix21;
    ///<summary>Gets or sets the element at the second row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the second row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix22: Single read get_Matrix22 write set_Matrix22;
    ///<summary>Gets or sets the element at the second row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the second row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix23: Single read get_Matrix23 write set_Matrix23;
    ///<summary>Gets or sets the element at the second row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the second row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix24: Single read get_Matrix24 write set_Matrix24;
    ///<summary>Gets or sets the element at the third row and 0 (zero) column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the third row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix30: Single read get_Matrix30 write set_Matrix30;
    ///<summary>Gets or sets the element at the third row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the third row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix31: Single read get_Matrix31 write set_Matrix31;
    ///<summary>Gets or sets the element at the third row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the third row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix32: Single read get_Matrix32 write set_Matrix32;
    ///<summary>Gets or sets the element at the third row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  . Represents the alpha component.</summary>
    ///<returns>The element at the third row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix33: Single read get_Matrix33 write set_Matrix33;
    ///<summary>Gets or sets the element at the third row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the third row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix34: Single read get_Matrix34 write set_Matrix34;
    ///<summary>Gets or sets the element at the fourth row and 0 (zero) column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the fourth row and 0 column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix40: Single read get_Matrix40 write set_Matrix40;
    ///<summary>Gets or sets the element at the fourth row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the fourth row and first column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix41: Single read get_Matrix41 write set_Matrix41;
    ///<summary>Gets or sets the element at the fourth row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the fourth row and second column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix42: Single read get_Matrix42 write set_Matrix42;
    ///<summary>Gets or sets the element at the fourth row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  . Represents the alpha component.</summary>
    ///<returns>The element at the fourth row and third column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix43: Single read get_Matrix43 write set_Matrix43;
    ///<summary>Gets or sets the element at the fourth row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</summary>
    ///<returns>The element at the fourth row and fourth column of this <see cref="T:System.Drawing.Imaging.ColorMatrix" />
    ///  .</returns>
    property Matrix44: Single read get_Matrix44 write set_Matrix44;
    property Item[row: Int32; column: Int32]: Single read get_Item write set_Item; default;
  end;

  TDNColorMatrix = class(TDNGenericImport<DNColorMatrixClass, DNColorMatrix>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNColorPaletteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D5700A5-F93A-528A-AAEA-8A5C32FB3939}']
  end;

  ///<summary>Defines an array of colors that make up a color palette. The colors are 32-bit ARGB colors. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.ColorPalette')]
  DNColorPalette = interface(DDN.mscorlib.DNObject)
  ['{0CF09C28-25D5-32B7-A65A-CB9710DCD5DB}']
  { getters & setters } 

    function get_Flags: Int32;
    function get_Entries: TArray<DNColor>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that specifies how to interpret the color information in the array of colors.</summary>
    ///<returns>The following flag values are valid: 0x00000001The color values in the array contain alpha information. 0x00000002The colors in the array are grayscale values. 0x00000004The colors in the array are halftone values. </returns>
    property Flags: Int32 read get_Flags;
    ///<summary>Gets an array of <see cref="T:System.Drawing.Color" />
    ///  structures.</summary>
    ///<returns>The array of <see cref="T:System.Drawing.Color" />
    ///  structure that make up this <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  .</returns>
    property Entries: TArray<DNColor> read get_Entries;
  end;

  TDNColorPalette = class(TDNGenericImport<DNColorPaletteClass, DNColorPalette>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24E9A650-C428-5F5F-88CD-C510A480FCBA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  class from the specified globally unique identifier (GUID). The GUID specifies an image encoder parameter category.</summary>
    ///  <param name="guid">A globally unique identifier that identifies an image encoder parameter category. </param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNEncoder;

  { static fields getter & setter } 

   function __fakeFieldGet_Compression: DNEncoder;
   function __fakeFieldGet_ColorDepth: DNEncoder;
   function __fakeFieldGet_ScanMethod: DNEncoder;
   function __fakeFieldGet_Version: DNEncoder;
   function __fakeFieldGet_RenderMethod: DNEncoder;
   function __fakeFieldGet_Quality: DNEncoder;
   function __fakeFieldGet_Transformation: DNEncoder;
   function __fakeFieldGet_LuminanceTable: DNEncoder;
   function __fakeFieldGet_ChrominanceTable: DNEncoder;
   function __fakeFieldGet_SaveFlag: DNEncoder;

  { static fields } 

    ///<summary>An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the compression parameter category.</summary>
    {class} property Compression: DNEncoder read __fakeFieldGet_Compression;
    ///<summary>An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the color depth parameter category.</summary>
    {class} property ColorDepth: DNEncoder read __fakeFieldGet_ColorDepth;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the scan method parameter category.</summary>
    {class} property ScanMethod: DNEncoder read __fakeFieldGet_ScanMethod;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the version parameter category.</summary>
    {class} property Version: DNEncoder read __fakeFieldGet_Version;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the render method parameter category.</summary>
    {class} property RenderMethod: DNEncoder read __fakeFieldGet_RenderMethod;
    ///<summary>Gets an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the quality parameter category.</summary>
    {class} property Quality: DNEncoder read __fakeFieldGet_Quality;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the transformation parameter category.</summary>
    {class} property Transformation: DNEncoder read __fakeFieldGet_Transformation;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the luminance table parameter category.</summary>
    {class} property LuminanceTable: DNEncoder read __fakeFieldGet_LuminanceTable;
    ///<summary>An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the chrominance table parameter category.</summary>
    {class} property ChrominanceTable: DNEncoder read __fakeFieldGet_ChrominanceTable;
    ///<summary>Represents an <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that is initialized with the globally unique identifier for the save flag parameter category.</summary>
    {class} property SaveFlag: DNEncoder read __fakeFieldGet_SaveFlag;

  end;

  ///<summary>An <see cref="T:System.Drawing.Imaging.Encoder" />
  ///  object encapsulates a globally unique identifier (GUID) that identifies the category of an image encoder parameter.</summary>
  [DNTypeName('System.Drawing.Imaging.Encoder')]
  DNEncoder = interface(DDN.mscorlib.DNObject)
  ['{673667DC-F729-31F3-8A8C-824C297FFEBB}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a globally unique identifier (GUID) that identifies an image encoder parameter category.</summary>
    ///<returns>The GUID that identifies an image encoder parameter category.</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParameterClass = interface(DNObjectClass)
  ['{47EFB640-614B-569F-A64B-546A1D6032F7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and one unsigned 8-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">An 8-bit unsigned integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; value: Byte): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and one 8-bit value. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  or <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">A byte that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    ///  <param name="undefined">If <see langword="true" />
    ///  , the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property is set to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; otherwise, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property is set to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  . </param>
    {class} function init(encoder: DNEncoder; value: Byte; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and one, 16-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">A 16-bit integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. Must be nonnegative. </param>
    {class} function init(encoder: DNEncoder; value: Int16): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and one 64-bit integer. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  (32 bits), and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">A 64-bit integer that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; value: Int64): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and a pair of 32-bit integers. The pair of integers represents a fraction, the first integer being the numerator, and the second integer being the denominator. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="numerator">A 32-bit integer that represents the numerator of a fraction. Must be nonnegative. </param>
    ///  <param name="denominator">A 32-bit integer that represents the denominator of a fraction. Must be nonnegative. </param>
    {class} function init(encoder: DNEncoder; numerator: Int32; denominator: Int32): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and a pair of 64-bit integers. The pair of integers represents a range of integers, the first integer being the smallest number in the range, and the second integer being the largest number in the range. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="rangebegin">A 64-bit integer that represents the smallest number in a range of integers. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    ///  <param name="rangeend">A 64-bit integer that represents the largest number in a range of integers. Must be nonnegative. This parameter is converted to a 32-bit integer before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; rangebegin: Int64; rangeend: Int64): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and four, 32-bit integers. The four integers represent a range of fractions. The first two integers represent the smallest fraction in the range, and the remaining two integers represent the largest fraction in the range. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to 1.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="numerator1">A 32-bit integer that represents the numerator of the smallest fraction in the range. Must be nonnegative. </param>
    ///  <param name="demoninator1">A 32-bit integer that represents the denominator of the smallest fraction in the range. Must be nonnegative. </param>
    ///  <param name="numerator2">A 32-bit integer that represents the denominator of the smallest fraction in the range. Must be nonnegative. </param>
    ///  <param name="demoninator2">A 32-bit integer that represents the numerator of the largest fraction in the range. Must be nonnegative. </param>
    {class} function init(encoder: DNEncoder; numerator1: Int32; demoninator1: Int32; numerator2: Int32; demoninator2: Int32): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and a character string. The string is converted to a null-terminated ASCII string before it is stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeAscii" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the length of the ASCII string including the NULL terminator.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">A <see cref="T:System.String" />
    ///  that specifies the value stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; value: string): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and an array of unsigned 8-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">An array of 8-bit unsigned integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and an array of bytes. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  or <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">An array of bytes that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    ///  <param name="undefined">If <see langword="true" />
    ///  , the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property is set to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeUndefined" />
    ///  ; otherwise, the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property is set to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeByte" />
    ///  . </param>
    {class} function init(encoder: DNEncoder; value: TArray<Byte>; undefined: Boolean): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and an array of 16-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeShort" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">An array of 16-bit integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The integers in the array must be nonnegative. </param>
    {class} function init(encoder: DNEncoder; value: TArray<Int16>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and an array of 64-bit integers. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLong" />
    ///  (32-bit), and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="value">An array of 64-bit integers that specifies the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    {class} function init(encoder: DNEncoder; value: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and two arrays of 32-bit integers. The two arrays represent an array of fractions. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRational" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the <paramref name="numerator" />
    ///  array, which must be the same as the number of elements in the <paramref name="denominator" />
    ///  array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="numerator">An array of 32-bit integers that specifies the numerators of the fractions. The integers in the array must be nonnegative. </param>
    ///  <param name="denominator">An array of 32-bit integers that specifies the denominators of the fractions. The integers in the array must be nonnegative. A denominator of a given index is paired with the numerator of the same index. </param>
    {class} function init(encoder: DNEncoder; numerator: TArray<Int32>; denominator: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and two arrays of 64-bit integers. The two arrays represent an array integer ranges. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeLongRange" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the <paramref name="rangebegin" />
    ///  array, which must be the same as the number of elements in the <paramref name="rangeend" />
    ///  array.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="rangebegin">An array of 64-bit integers that specifies the minimum values for the integer ranges. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. </param>
    ///  <param name="rangeend">An array of 64-bit integers that specifies the maximum values for the integer ranges. The integers in the array must be nonnegative. The 64-bit integers are converted to 32-bit integers before they are stored in the <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  object. A maximum value of a given index is paired with the minimum value of the same index. </param>
    {class} function init(encoder: DNEncoder; rangebegin: TArray<Int64>; rangeend: TArray<Int64>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and four arrays of 32-bit integers. The four arrays represent an array rational ranges. A rational range is the set of all fractions from a minimum fractional value through a maximum fractional value. Sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  property to <see cref="F:System.Drawing.Imaging.EncoderParameterValueType.ValueTypeRationalRange" />
    ///  , and sets the <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property to the number of elements in the <paramref name="numerator1" />
    ///  array, which must be the same as the number of elements in the other three arrays.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="numerator1">An array of 32-bit integers that specifies the numerators of the minimum values for the ranges. The integers in the array must be nonnegative. </param>
    ///  <param name="denominator1">An array of 32-bit integers that specifies the denominators of the minimum values for the ranges. The integers in the array must be nonnegative. </param>
    ///  <param name="numerator2">An array of 32-bit integers that specifies the numerators of the maximum values for the ranges. The integers in the array must be nonnegative. </param>
    ///  <param name="denominator2">An array of 32-bit integers that specifies the denominators of the maximum values for the ranges. The integers in the array must be nonnegative. </param>
    {class} function init(encoder: DNEncoder; numerator1: TArray<Int32>; denominator1: TArray<Int32>; numerator2: TArray<Int32>; denominator2: TArray<Int32>): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object and three integers that specify the number of values, the data type of the values, and a pointer to the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="NumberOfValues">An integer that specifies the number of values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property is set to this value. </param>
    ///  <param name="Type">A member of the <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  enumeration that specifies the data type of the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The <see cref="T:System.Type" />
    ///  and <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  properties are set to this value. </param>
    ///  <param name="Value">A pointer to an array of values of the type specified by the <paramref name="Type" />
    ///  parameter.</param>
    ///<exception cref="T:System.InvalidOperationException">Type is not a valid <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  .</exception>
    {class} function init(encoder: DNEncoder; NumberOfValues: Int32; &Type: Int32; Value: Int32): DNEncoderParameter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  class with the specified <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object, number of values, data type of the values, and a pointer to the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///  <param name="encoder">An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the globally unique identifier of the parameter category. </param>
    ///  <param name="numberValues">An integer that specifies the number of values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The <see cref="P:System.Drawing.Imaging.EncoderParameter.NumberOfValues" />
    ///  property is set to this value. </param>
    ///  <param name="type">A member of the <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  enumeration that specifies the data type of the values stored in the <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The <see cref="T:System.Type" />
    ///  and <see cref="P:System.Drawing.Imaging.EncoderParameter.ValueType" />
    ///  properties are set to this value. </param>
    ///  <param name="value">A pointer to an array of values of the type specified by the <paramref name="Type" />
    ///  parameter.</param>
    {class} function init(encoder: DNEncoder; numberValues: Int32; &type: DNEncoderParameterValueType; value: IntPtr): DNEncoderParameter; overload;

  end;

  ///<summary>Used to pass a value, or an array of values, to an image encoder. </summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameter')]
  DNEncoderParameter = interface(DDN.mscorlib.DNIDisposable)
  ['{81498B35-5C97-31F7-B6AA-9737D41547EB}']
  { getters & setters } 

    function get_Encoder: DNEncoder;
    procedure set_Encoder(value: DNEncoder);
    function get_Type: DNEncoderParameterValueType;
    function get_ValueType: DNEncoderParameterValueType;
    function get_NumberOfValues: Int32;

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object associated with this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object. The <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object encapsulates the globally unique identifier (GUID) that specifies the category (for example <see cref="F:System.Drawing.Imaging.Encoder.Quality" />
    ///  , <see cref="F:System.Drawing.Imaging.Encoder.ColorDepth" />
    ///  , or <see cref="F:System.Drawing.Imaging.Encoder.Compression" />
    ///  ) of the parameter stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.Encoder" />
    ///  object that encapsulates the GUID that specifies the category of the parameter stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</returns>
    property Encoder: DNEncoder read get_Encoder write set_Encoder;
    ///<summary>Gets the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///<returns>A member of the <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  enumeration that indicates the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</returns>
    property &Type: DNEncoderParameterValueType read get_Type;
    ///<summary>Gets the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///<returns>A member of the <see cref="T:System.Drawing.Imaging.EncoderParameterValueType" />
    ///  enumeration that indicates the data type of the values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</returns>
    property ValueType: DNEncoderParameterValueType read get_ValueType;
    ///<summary>Gets the number of elements in the array of values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    ///<returns>An integer that indicates the number of elements in the array of values stored in this <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</returns>
    property NumberOfValues: Int32 read get_NumberOfValues;
  end;

  TDNEncoderParameter = class(TDNGenericImport<DNEncoderParameterClass, DNEncoderParameter>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNEncoderParametersClass = interface(DNObjectClass)
  ['{AB2EF01F-00D9-5693-B2FA-09F4A916F9E6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  class that can contain the specified number of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects.</summary>
    ///  <param name="count">An integer that specifies the number of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects that the <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  object can contain. </param>
    {class} function init(count: Int32): DNEncoderParameters; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  class that can contain one <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  object.</summary>
    {class} function init: DNEncoderParameters; overload;

  end;

  ///<summary>Encapsulates an array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Imaging.EncoderParameters')]
  DNEncoderParameters = interface(DDN.mscorlib.DNIDisposable)
  ['{809106FA-A250-36F7-BEB3-4B323D20606C}']
  { getters & setters } 

    function get_Param: TArray<DNEncoderParameter>;
    procedure set_Param(value: TArray<DNEncoderParameter>);

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  object.</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects.</summary>
    ///<returns>The array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects.</returns>
    property Param: TArray<DNEncoderParameter> read get_Param write set_Param;
  end;

  TDNEncoderParameters = class(TDNGenericImport<DNEncoderParametersClass, DNEncoderParameters>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNFrameDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C5EB92-BC52-5E9B-9698-1CFAFBCDCA03}']
  { static getter & setter } 

    {class} function get_Time: DNFrameDimension;
    {class} function get_Resolution: DNFrameDimension;
    {class} function get_Page: DNFrameDimension;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  class using the specified <see langword="Guid" />
    ///  structure.</summary>
    ///  <param name="guid">A <see langword="Guid" />
    ///  structure that contains a GUID for this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object. </param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNFrameDimension;

  { static propertys } 

    ///<summary>Gets the time dimension.</summary>
    ///<returns>The time dimension.</returns>
    {class} property Time: DNFrameDimension read get_Time;
    ///<summary>Gets the resolution dimension.</summary>
    ///<returns>The resolution dimension.</returns>
    {class} property Resolution: DNFrameDimension read get_Resolution;
    ///<summary>Gets the page dimension.</summary>
    ///<returns>The page dimension.</returns>
    {class} property Page: DNFrameDimension read get_Page;
  end;

  ///<summary>Provides properties that get the frame dimensions of an image. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.FrameDimension')]
  DNFrameDimension = interface(DDN.mscorlib.DNObject)
  ['{46DCD9AD-47E5-3ACD-95F1-1D9D21950994}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>Returns a value that indicates whether the specified object is a <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  equivalent to this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</summary>
    ///  <param name="o">The object to test. </param>
    ///<returns>Returns <see langword="true" />
    ///  if <paramref name="o" />
    ///  is a <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  equivalent to this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</summary>
    ///<returns>Returns an <see langword="int" />
    ///  value that is the hash code of this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</returns>
    function GetHashCode: Int32;
    ///<summary>Converts this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object to a human-readable string.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a globally unique identifier (GUID) that represents this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</summary>
    ///<returns>A <see langword="Guid" />
    ///  structure that contains a GUID that represents this <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  object.</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNFrameDimension = class(TDNGenericImport<DNFrameDimensionClass, DNFrameDimension>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageAttributesClass = interface(DNObjectClass)
  ['{64FD85C9-5B18-5481-8629-5F2381840509}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  class.</summary>
    {class} function init: DNImageAttributes;

  end;

  ///<summary>Contains information about how bitmap and metafile colors are manipulated during rendering. </summary>
  [DNTypeName('System.Drawing.Imaging.ImageAttributes')]
  DNImageAttributes = interface(DDN.mscorlib.DNICloneable)
  ['{F8730A05-D36D-3ED8-97B3-A0C36EC3A959}']
  { methods } 

    ///<summary>Sets the color-adjustment matrix for a specified category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    ///  <param name="mode">An element of <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  that specifies the type of image and color that will be affected by the color-adjustment matrix. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color-adjustment matrix is set. </param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    ///<summary>Clears the color key (transparency range) for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color key is cleared. </param>
    procedure ClearColorKey(&type: DNColorAdjustType); overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object this class creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Sets the color-adjustment matrix for the default category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix); overload;
    ///<summary>Sets the color-adjustment matrix for the default category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    ///  <param name="flags">An element of <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  that specifies the type of image and color that will be affected by the color-adjustment matrix. </param>
    procedure SetColorMatrix(newColorMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    ///<summary>Clears the color-adjustment matrix for the default category.</summary>
    procedure ClearColorMatrix; overload;
    ///<summary>Clears the color-adjustment matrix for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color-adjustment matrix is cleared. </param>
    procedure ClearColorMatrix(&type: DNColorAdjustType); overload;
    ///<summary>Sets the color-adjustment matrix and the grayscale-adjustment matrix for the default category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    ///  <param name="grayMatrix">The grayscale-adjustment matrix. </param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix); overload;
    ///<summary>Sets the color-adjustment matrix and the grayscale-adjustment matrix for the default category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    ///  <param name="grayMatrix">The grayscale-adjustment matrix. </param>
    ///  <param name="flags">An element of <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  that specifies the type of image and color that will be affected by the color-adjustment and grayscale-adjustment matrices. </param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; flags: DNColorMatrixFlag); overload;
    ///<summary>Sets the color-adjustment matrix and the grayscale-adjustment matrix for a specified category.</summary>
    ///  <param name="newColorMatrix">The color-adjustment matrix. </param>
    ///  <param name="grayMatrix">The grayscale-adjustment matrix. </param>
    ///  <param name="mode">An element of <see cref="T:System.Drawing.Imaging.ColorMatrixFlag" />
    ///  that specifies the type of image and color that will be affected by the color-adjustment and grayscale-adjustment matrices. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color-adjustment and grayscale-adjustment matrices are set. </param>
    procedure SetColorMatrices(newColorMatrix: DNColorMatrix; grayMatrix: DNColorMatrix; mode: DNColorMatrixFlag; &type: DNColorAdjustType); overload;
    ///<summary>Sets the threshold (transparency range) for the default category.</summary>
    ///  <param name="threshold">A real number that specifies the threshold value. </param>
    procedure SetThreshold(threshold: Single); overload;
    ///<summary>Sets the threshold (transparency range) for a specified category.</summary>
    ///  <param name="threshold">A threshold value from 0.0 to 1.0 that is used as a breakpoint to sort colors that will be mapped to either a maximum or a minimum value. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color threshold is set. </param>
    procedure SetThreshold(threshold: Single; &type: DNColorAdjustType); overload;
    ///<summary>Clears the threshold value for the default category.</summary>
    procedure ClearThreshold; overload;
    ///<summary>Clears the threshold value for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the threshold is cleared. </param>
    procedure ClearThreshold(&type: DNColorAdjustType); overload;
    ///<summary>Sets the gamma value for the default category.</summary>
    ///  <param name="gamma">The gamma correction value. </param>
    procedure SetGamma(gamma: Single); overload;
    ///<summary>Sets the gamma value for a specified category.</summary>
    ///  <param name="gamma">The gamma correction value. </param>
    ///  <param name="type">An element of the <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  enumeration that specifies the category for which the gamma value is set. </param>
    procedure SetGamma(gamma: Single; &type: DNColorAdjustType); overload;
    ///<summary>Disables gamma correction for the default category.</summary>
    procedure ClearGamma; overload;
    ///<summary>Disables gamma correction for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which gamma correction is disabled. </param>
    procedure ClearGamma(&type: DNColorAdjustType); overload;
    ///<summary>Turns off color adjustment for the default category. You can call the <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
    ///  method to reinstate the color-adjustment settings that were in place before the call to the <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
    ///  method.</summary>
    procedure SetNoOp; overload;
    ///<summary>Turns off color adjustment for a specified category. You can call the <see cref="Overload:System.Drawing.Imaging.ImageAttributes.ClearNoOp" />
    ///  method to reinstate the color-adjustment settings that were in place before the call to the <see cref="Overload:System.Drawing.Imaging.ImageAttributes.SetNoOp" />
    ///  method.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which color correction is turned off. </param>
    procedure SetNoOp(&type: DNColorAdjustType); overload;
    ///<summary>Clears the <see langword="NoOp" />
    ///  setting for the default category.</summary>
    procedure ClearNoOp; overload;
    ///<summary>Clears the <see langword="NoOp" />
    ///  setting for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the <see langword="NoOp" />
    ///  setting is cleared. </param>
    procedure ClearNoOp(&type: DNColorAdjustType); overload;
    ///<summary>Sets the color key for the default category.</summary>
    ///  <param name="colorLow">The low color-key value. </param>
    ///  <param name="colorHigh">The high color-key value. </param>
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor); overload;
    ///<summary>Sets the color key (transparency range) for a specified category.</summary>
    ///  <param name="colorLow">The low color-key value. </param>
    ///  <param name="colorHigh">The high color-key value. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color key is set. </param>
    procedure SetColorKey(colorLow: DNColor; colorHigh: DNColor; &type: DNColorAdjustType); overload;
    ///<summary>Clears the color key (transparency range) for the default category.</summary>
    procedure ClearColorKey; overload;
    ///<summary>Sets the CMYK (cyan-magenta-yellow-black) output channel for the default category.</summary>
    ///  <param name="flags">An element of <see cref="T:System.Drawing.Imaging.ColorChannelFlag" />
    ///  that specifies the output channel. </param>
    procedure SetOutputChannel(flags: DNColorChannelFlag); overload;
    ///<summary>Sets the CMYK (cyan-magenta-yellow-black) output channel for a specified category.</summary>
    ///  <param name="flags">An element of <see cref="T:System.Drawing.Imaging.ColorChannelFlag" />
    ///  that specifies the output channel. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the output channel is set. </param>
    procedure SetOutputChannel(flags: DNColorChannelFlag; &type: DNColorAdjustType); overload;
    ///<summary>Clears the CMYK (cyan-magenta-yellow-black) output channel setting for the default category.</summary>
    procedure ClearOutputChannel; overload;
    ///<summary>Clears the (cyan-magenta-yellow-black) output channel setting for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the output channel setting is cleared. </param>
    procedure ClearOutputChannel(&type: DNColorAdjustType); overload;
    ///<summary>Sets the output channel color-profile file for the default category.</summary>
    ///  <param name="colorProfileFilename">The path name of a color-profile file. If the color-profile file is in the %SystemRoot%\System32\Spool\Drivers\Color directory, this parameter can be the file name. Otherwise, this parameter must be the fully qualified path name. </param>
    procedure SetOutputChannelColorProfile(colorProfileFilename: string); overload;
    ///<summary>Sets the output channel color-profile file for a specified category.</summary>
    ///  <param name="colorProfileFilename">The path name of a color-profile file. If the color-profile file is in the %SystemRoot%\System32\Spool\Drivers\Color directory, this parameter can be the file name. Otherwise, this parameter must be the fully qualified path name. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the output channel color-profile file is set. </param>
    procedure SetOutputChannelColorProfile(colorProfileFilename: string; &type: DNColorAdjustType); overload;
    ///<summary>Clears the output channel color profile setting for the default category.</summary>
    procedure ClearOutputChannelColorProfile; overload;
    ///<summary>Clears the output channel color profile setting for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the output channel profile setting is cleared. </param>
    procedure ClearOutputChannelColorProfile(&type: DNColorAdjustType); overload;
    ///<summary>Sets the color-remap table for the default category.</summary>
    ///  <param name="map">An array of color pairs of type <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  . Each color pair contains an existing color (the first value) and the color that it will be mapped to (the second value). </param>
    procedure SetRemapTable(map: TArray<DNColorMap>); overload;
    ///<summary>Sets the color-remap table for a specified category.</summary>
    ///  <param name="map">An array of color pairs of type <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  . Each color pair contains an existing color (the first value) and the color that it will be mapped to (the second value). </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the color-remap table is set. </param>
    procedure SetRemapTable(map: TArray<DNColorMap>; &type: DNColorAdjustType); overload;
    ///<summary>Clears the color-remap table for the default category.</summary>
    procedure ClearRemapTable; overload;
    ///<summary>Clears the color-remap table for a specified category.</summary>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category for which the remap table is cleared. </param>
    procedure ClearRemapTable(&type: DNColorAdjustType); overload;
    ///<summary>Sets the color-remap table for the brush category.</summary>
    ///  <param name="map">An array of <see cref="T:System.Drawing.Imaging.ColorMap" />
    ///  objects. </param>
    procedure SetBrushRemapTable(map: TArray<DNColorMap>);
    ///<summary>Clears the brush color-remap table of this <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object.</summary>
    procedure ClearBrushRemapTable;
    ///<summary>Sets the wrap mode that is used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling.</summary>
    ///  <param name="mode">An element of <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how repeated copies of an image are used to tile an area. </param>
    procedure SetWrapMode(mode: DNWrapMode); overload;
    ///<summary>Sets the wrap mode and color used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling.</summary>
    ///  <param name="mode">An element of <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how repeated copies of an image are used to tile an area. </param>
    ///  <param name="color">An <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object that specifies the color of pixels outside of a rendered image. This color is visible if the mode parameter is set to <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />
    ///  and the source rectangle passed to <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  is larger than the image itself. </param>
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor); overload;
    ///<summary>Sets the wrap mode and color used to decide how to tile a texture across a shape, or at shape boundaries. A texture is tiled across a shape to fill it in when the texture is smaller than the shape it is filling.</summary>
    ///  <param name="mode">An element of <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how repeated copies of an image are used to tile an area. </param>
    ///  <param name="color">A color object that specifies the color of pixels outside of a rendered image. This color is visible if the mode parameter is set to <see cref="F:System.Drawing.Drawing2D.WrapMode.Clamp" />
    ///  and the source rectangle passed to <see cref="Overload:System.Drawing.Graphics.DrawImage" />
    ///  is larger than the image itself. </param>
    ///  <param name="clamp">This parameter has no effect. Set it to <see langword="false" />
    ///  . </param>
    procedure SetWrapMode(mode: DNWrapMode; color: DNColor; clamp: Boolean); overload;
    ///<summary>Adjusts the colors in a palette according to the adjustment settings of a specified category.</summary>
    ///  <param name="palette">A <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  that on input contains the palette to be adjusted, and on output contains the adjusted palette. </param>
    ///  <param name="type">An element of <see cref="T:System.Drawing.Imaging.ColorAdjustType" />
    ///  that specifies the category whose adjustment settings will be applied to the palette. </param>
    procedure GetAdjustedPalette(palette: DNColorPalette; &type: DNColorAdjustType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageAttributes = class(TDNGenericImport<DNImageAttributesClass, DNImageAttributes>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageCodecInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8865BE7-D8A2-5329-820A-E3B1F73D98DD}']
  { static methods } 

    ///<summary>Returns an array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  objects that contain information about the image decoders built into GDI+.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  objects. Each <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  object in the array contains information about one of the built-in image decoders.</returns>
    {class} function GetImageDecoders: TArray<DNImageCodecInfo>;
    ///<summary>Returns an array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  objects that contain information about the image encoders built into GDI+.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  objects. Each <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  object in the array contains information about one of the built-in image encoders.</returns>
    {class} function GetImageEncoders: TArray<DNImageCodecInfo>;

  end;

  ///<summary>The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
  ///  class provides the necessary storage members and methods to retrieve all pertinent information about the installed image encoders and decoders (called codecs). Not inheritable. </summary>
  [DNTypeName('System.Drawing.Imaging.ImageCodecInfo')]
  DNImageCodecInfo = interface(DDN.mscorlib.DNObject)
  ['{537B3612-FB61-3670-ADA4-71FFA9B084A4}']
  { getters & setters } 

    function get_Clsid: DDN.mscorlib.DNGuid;
    procedure set_Clsid(value: DDN.mscorlib.DNGuid);
    function get_FormatID: DDN.mscorlib.DNGuid;
    procedure set_FormatID(value: DDN.mscorlib.DNGuid);
    function get_CodecName: string;
    procedure set_CodecName(value: string);
    function get_DllName: string;
    procedure set_DllName(value: string);
    function get_FormatDescription: string;
    procedure set_FormatDescription(value: string);
    function get_FilenameExtension: string;
    procedure set_FilenameExtension(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Flags: DNImageCodecFlags;
    procedure set_Flags(value: DNImageCodecFlags);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_SignaturePatterns: TArray<TArray<Byte>>;
    procedure set_SignaturePatterns(value: TArray<TArray<Byte>>);
    function get_SignatureMasks: TArray<TArray<Byte>>;
    procedure set_SignatureMasks(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a <see cref="T:System.Guid" />
    ///  structure that contains a GUID that identifies a specific codec.</summary>
    ///<returns>A <see cref="T:System.Guid" />
    ///  structure that contains a GUID that identifies a specific codec.</returns>
    property Clsid: DDN.mscorlib.DNGuid read get_Clsid write set_Clsid;
    ///<summary>Gets or sets a <see cref="T:System.Guid" />
    ///  structure that contains a GUID that identifies the codec's format.</summary>
    ///<returns>A <see cref="T:System.Guid" />
    ///  structure that contains a GUID that identifies the codec's format.</returns>
    property FormatID: DDN.mscorlib.DNGuid read get_FormatID write set_FormatID;
    ///<summary>Gets or sets a string that contains the name of the codec.</summary>
    ///<returns>A string that contains the name of the codec.</returns>
    property CodecName: string read get_CodecName write set_CodecName;
    ///<summary>Gets or sets string that contains the path name of the DLL that holds the codec. If the codec is not in a DLL, this pointer is <see langword="null" />
    ///  .</summary>
    ///<returns>A string that contains the path name of the DLL that holds the codec.</returns>
    property DllName: string read get_DllName write set_DllName;
    ///<summary>Gets or sets a string that describes the codec's file format.</summary>
    ///<returns>A string that describes the codec's file format.</returns>
    property FormatDescription: string read get_FormatDescription write set_FormatDescription;
    ///<summary>Gets or sets string that contains the file name extension(s) used in the codec. The extensions are separated by semicolons.</summary>
    ///<returns>A string that contains the file name extension(s) used in the codec.</returns>
    property FilenameExtension: string read get_FilenameExtension write set_FilenameExtension;
    ///<summary>Gets or sets a string that contains the codec's Multipurpose Internet Mail Extensions (MIME) type.</summary>
    ///<returns>A string that contains the codec's Multipurpose Internet Mail Extensions (MIME) type.</returns>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>Gets or sets 32-bit value used to store additional information about the codec. This property returns a combination of flags from the <see cref="T:System.Drawing.Imaging.ImageCodecFlags" />
    ///  enumeration.</summary>
    ///<returns>A 32-bit value used to store additional information about the codec.</returns>
    property Flags: DNImageCodecFlags read get_Flags write set_Flags;
    ///<summary>Gets or sets the version number of the codec.</summary>
    ///<returns>The version number of the codec.</returns>
    property Version: Int32 read get_Version write set_Version;
    ///<summary>Gets or sets a two dimensional array of bytes that represents the signature of the codec.</summary>
    ///<returns>A two dimensional array of bytes that represents the signature of the codec.</returns>
    property SignaturePatterns: TArray<TArray<Byte>> read get_SignaturePatterns write set_SignaturePatterns;
    ///<summary>Gets or sets a two dimensional array of bytes that can be used as a filter.</summary>
    ///<returns>A two dimensional array of bytes that can be used as a filter.</returns>
    property SignatureMasks: TArray<TArray<Byte>> read get_SignatureMasks write set_SignatureMasks;
  end;

  TDNImageCodecInfo = class(TDNGenericImport<DNImageCodecInfoClass, DNImageCodecInfo>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNImageFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25FC6ED2-3943-578C-9A01-211CB8B0A6F6}']
  { static getter & setter } 

    {class} function get_MemoryBmp: DNImageFormat;
    {class} function get_Bmp: DNImageFormat;
    {class} function get_Emf: DNImageFormat;
    {class} function get_Wmf: DNImageFormat;
    {class} function get_Gif: DNImageFormat;
    {class} function get_Jpeg: DNImageFormat;
    {class} function get_Png: DNImageFormat;
    {class} function get_Tiff: DNImageFormat;
    {class} function get_Exif: DNImageFormat;
    {class} function get_Icon: DNImageFormat;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  class by using the specified <see cref="T:System.Guid" />
    ///  structure.</summary>
    ///  <param name="guid">The <see cref="T:System.Guid" />
    ///  structure that specifies a particular image format. </param>
    {class} function init(guid: DDN.mscorlib.DNGuid): DNImageFormat;

  { static propertys } 

    ///<summary>Gets the format of a bitmap in memory.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the format of a bitmap in memory.</returns>
    {class} property MemoryBmp: DNImageFormat read get_MemoryBmp;
    ///<summary>Gets the bitmap (BMP) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the bitmap image format.</returns>
    {class} property Bmp: DNImageFormat read get_Bmp;
    ///<summary>Gets the enhanced metafile (EMF) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the enhanced metafile image format.</returns>
    {class} property Emf: DNImageFormat read get_Emf;
    ///<summary>Gets the Windows metafile (WMF) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the Windows metafile image format.</returns>
    {class} property Wmf: DNImageFormat read get_Wmf;
    ///<summary>Gets the Graphics Interchange Format (GIF) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the GIF image format.</returns>
    {class} property Gif: DNImageFormat read get_Gif;
    ///<summary>Gets the Joint Photographic Experts Group (JPEG) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the JPEG image format.</returns>
    {class} property Jpeg: DNImageFormat read get_Jpeg;
    ///<summary>Gets the W3C Portable Network Graphics (PNG) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the PNG image format.</returns>
    {class} property Png: DNImageFormat read get_Png;
    ///<summary>Gets the Tagged Image File Format (TIFF) image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the TIFF image format.</returns>
    {class} property Tiff: DNImageFormat read get_Tiff;
    ///<summary>Gets the Exchangeable Image File (Exif) format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the Exif format.</returns>
    {class} property Exif: DNImageFormat read get_Exif;
    ///<summary>Gets the Windows icon image format.</summary>
    ///<returns>An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that indicates the Windows icon image format.</returns>
    {class} property Icon: DNImageFormat read get_Icon;
  end;

  ///<summary>Specifies the file format of the image. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.ImageFormat')]
  DNImageFormat = interface(DDN.mscorlib.DNObject)
  ['{EBB52948-9B23-3FA2-A8D3-F339D076BDA1}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    ///<summary>Returns a value that indicates whether the specified object is an <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that is equivalent to this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object.</summary>
    ///  <param name="o">The object to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="o" />
    ///  is an <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object that is equivalent to this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code value that represents this object.</summary>
    ///<returns>A hash code that represents this object.</returns>
    function GetHashCode: Int32;
    ///<summary>Converts this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object to a human-readable string.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object.</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Guid" />
    ///  structure that represents this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Guid" />
    ///  structure that represents this <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  object.</returns>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNImageFormat = class(TDNGenericImport<DNImageFormatClass, DNImageFormat>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D930988B-9641-52BA-BDC2-94C1D02C11B8}']
  end;

  ///<summary>Contains attributes of an associated <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  . Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.MetafileHeader')]
  DNMetafileHeader = interface(DDN.mscorlib.DNObject)
  ['{F749C549-2F5E-3D94-970D-D1C8FF510A13}']
  { getters & setters } 

    function get_Type: DNMetafileType;
    function get_MetafileSize: Int32;
    function get_Version: Int32;
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Bounds: DNRectangle;
    function get_WmfHeader: DNMetaHeader;
    function get_EmfPlusHeaderSize: Int32;
    function get_LogicalDpiX: Int32;
    function get_LogicalDpiY: Int32;

  { methods } 

    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows metafile format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows metafile format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsWmf: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows placeable metafile format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows placeable metafile format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsWmfPlaceable: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsEmf: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile format or the Windows enhanced metafile plus format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile format or the Windows enhanced metafile plus format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsEmfOrEmfPlus: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile plus format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Windows enhanced metafile plus format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsEmfPlus: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Dual enhanced metafile format. This format supports both the enhanced and the enhanced plus format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is in the Dual enhanced metafile format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsEmfPlusDual: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  supports only the Windows enhanced metafile plus format.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  supports only the Windows enhanced metafile plus format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsEmfPlusOnly: Boolean;
    ///<summary>Returns a value that indicates whether the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is device dependent.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is device dependent; otherwise, <see langword="false" />
    ///  .</returns>
    function IsDisplay: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.MetafileType" />
    ///  enumeration that represents the type of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property &Type: DNMetafileType read get_Type;
    ///<summary>Gets the size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property MetafileSize: Int32 read get_MetafileSize;
    ///<summary>Gets the version number of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The version number of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property Version: Int32 read get_Version;
    ///<summary>Gets the horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property DpiX: Single read get_DpiX;
    ///<summary>Gets the vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property DpiY: Single read get_DpiY;
    ///<summary>Gets a <see cref="T:System.Drawing.Rectangle" />
    ///  that bounds the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Rectangle" />
    ///  that bounds the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>Gets the Windows metafile (WMF) header file for the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.MetaHeader" />
    ///  that contains the WMF header file for the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property WmfHeader: DNMetaHeader read get_WmfHeader;
    ///<summary>Gets the size, in bytes, of the enhanced metafile plus header file.</summary>
    ///<returns>The size, in bytes, of the enhanced metafile plus header file.</returns>
    property EmfPlusHeaderSize: Int32 read get_EmfPlusHeaderSize;
    ///<summary>Gets the logical horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The logical horizontal resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property LogicalDpiX: Int32 read get_LogicalDpiX;
    ///<summary>Gets the logical vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The logical vertical resolution, in dots per inch, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    property LogicalDpiY: Int32 read get_LogicalDpiY;
  end;

  TDNMetafileHeader = class(TDNGenericImport<DNMetafileHeaderClass, DNMetafileHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetaHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6928A08A-60A0-5685-9949-5EDCD878DA0F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see langword="MetaHeader" />
    ///  class.</summary>
    {class} function init: DNMetaHeader;

  end;

  ///<summary>Contains information about a windows-format (WMF) metafile.</summary>
  [DNTypeName('System.Drawing.Imaging.MetaHeader')]
  DNMetaHeader = interface(DDN.mscorlib.DNObject)
  ['{238A9696-BFF3-30AB-81F2-AA745499233B}']
  { getters & setters } 

    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_HeaderSize: Int16;
    procedure set_HeaderSize(value: Int16);
    function get_Version: Int16;
    procedure set_Version(value: Int16);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_NoObjects: Int16;
    procedure set_NoObjects(value: Int16);
    function get_MaxRecord: Int32;
    procedure set_MaxRecord(value: Int32);
    function get_NoParameters: Int16;
    procedure set_NoParameters(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</summary>
    ///<returns>The type of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</returns>
    property &Type: Int16 read get_Type write set_Type;
    ///<summary>Gets or sets the size, in bytes, of the header file.</summary>
    ///<returns>The size, in bytes, of the header file.</returns>
    property HeaderSize: Int16 read get_HeaderSize write set_HeaderSize;
    ///<summary>Gets or sets the version number of the header format.</summary>
    ///<returns>The version number of the header format.</returns>
    property Version: Int16 read get_Version write set_Version;
    ///<summary>Gets or sets the size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</summary>
    ///<returns>The size, in bytes, of the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</returns>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>Gets or sets the maximum number of objects that exist in the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object at the same time.</summary>
    ///<returns>The maximum number of objects that exist in the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object at the same time.</returns>
    property NoObjects: Int16 read get_NoObjects write set_NoObjects;
    ///<summary>Gets or sets the size, in bytes, of the largest record in the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</summary>
    ///<returns>The size, in bytes, of the largest record in the associated <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  object.</returns>
    property MaxRecord: Int32 read get_MaxRecord write set_MaxRecord;
    ///<summary>Not used. Always returns 0.</summary>
    ///<returns>Always 0.</returns>
    property NoParameters: Int16 read get_NoParameters write set_NoParameters;
  end;

  TDNMetaHeader = class(TDNGenericImport<DNMetaHeaderClass, DNMetaHeader>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNPropertyItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47C1C0A9-9953-5D4C-A0AD-BD082331D0C9}']
  end;

  ///<summary>Encapsulates a metadata property to be included in an image file. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.PropertyItem')]
  DNPropertyItem = interface(DDN.mscorlib.DNObject)
  ['{8167BE6A-869C-366B-9369-37CA48FFC88C}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_Len: Int32;
    procedure set_Len(value: Int32);
    function get_Type: Int16;
    procedure set_Type(value: Int16);
    function get_Value: TArray<Byte>;
    procedure set_Value(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the ID of the property.</summary>
    ///<returns>The integer that represents the ID of the property.</returns>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>Gets or sets the length (in bytes) of the <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  property.</summary>
    ///<returns>An integer that represents the length (in bytes) of the <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  byte array.</returns>
    property Len: Int32 read get_Len write set_Len;
    ///<summary>Gets or sets an integer that defines the type of data contained in the <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  property.</summary>
    ///<returns>An integer that defines the type of data contained in <see cref="P:System.Drawing.Imaging.PropertyItem.Value" />
    ///  .</returns>
    property &Type: Int16 read get_Type write set_Type;
    ///<summary>Gets or sets the value of the property item.</summary>
    ///<returns>A byte array that represents the value of the property item.</returns>
    property Value: TArray<Byte> read get_Value write set_Value;
  end;

  TDNPropertyItem = class(TDNGenericImport<DNPropertyItemClass, DNPropertyItem>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNWmfPlaceableFileHeaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF04ADAF-7FD3-5524-854F-F9D8D3EE7A41}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see langword="WmfPlaceableFileHeader" />
    ///  class.</summary>
    {class} function init: DNWmfPlaceableFileHeader;

  end;

  ///<summary>Defines a placeable metafile. Not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.WmfPlaceableFileHeader')]
  DNWmfPlaceableFileHeader = interface(DDN.mscorlib.DNObject)
  ['{4EC535F9-C5FC-3378-B06A-011F02BA919D}']
  { getters & setters } 

    function get_Key: Int32;
    procedure set_Key(value: Int32);
    function get_Hmf: Int16;
    procedure set_Hmf(value: Int16);
    function get_BboxLeft: Int16;
    procedure set_BboxLeft(value: Int16);
    function get_BboxTop: Int16;
    procedure set_BboxTop(value: Int16);
    function get_BboxRight: Int16;
    procedure set_BboxRight(value: Int16);
    function get_BboxBottom: Int16;
    procedure set_BboxBottom(value: Int16);
    function get_Inch: Int16;
    procedure set_Inch(value: Int16);
    function get_Reserved: Int32;
    procedure set_Reserved(value: Int32);
    function get_Checksum: Int16;
    procedure set_Checksum(value: Int16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating the presence of a placeable metafile header.</summary>
    ///<returns>A value indicating presence of a placeable metafile header.</returns>
    property Key: Int32 read get_Key write set_Key;
    ///<summary>Gets or sets the handle of the metafile in memory.</summary>
    ///<returns>The handle of the metafile in memory.</returns>
    property Hmf: Int16 read get_Hmf write set_Hmf;
    ///<summary>Gets or sets the x-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</summary>
    ///<returns>The x-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</returns>
    property BboxLeft: Int16 read get_BboxLeft write set_BboxLeft;
    ///<summary>Gets or sets the y-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</summary>
    ///<returns>The y-coordinate of the upper-left corner of the bounding rectangle of the metafile image on the output device.</returns>
    property BboxTop: Int16 read get_BboxTop write set_BboxTop;
    ///<summary>Gets or sets the x-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</summary>
    ///<returns>The x-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</returns>
    property BboxRight: Int16 read get_BboxRight write set_BboxRight;
    ///<summary>Gets or sets the y-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</summary>
    ///<returns>The y-coordinate of the lower-right corner of the bounding rectangle of the metafile image on the output device.</returns>
    property BboxBottom: Int16 read get_BboxBottom write set_BboxBottom;
    ///<summary>Gets or sets the number of twips per inch.</summary>
    ///<returns>The number of twips per inch.</returns>
    property Inch: Int16 read get_Inch write set_Inch;
    ///<summary>Reserved. Do not use.</summary>
    ///<returns>Reserved. Do not use.</returns>
    property Reserved: Int32 read get_Reserved write set_Reserved;
    ///<summary>Gets or sets the checksum value for the previous ten <see langword="WORD" />
    ///  s in the header.</summary>
    ///<returns>The checksum value for the previous ten <see langword="WORD" />
    ///  s in the header.</returns>
    property Checksum: Int16 read get_Checksum write set_Checksum;
  end;

  TDNWmfPlaceableFileHeader = class(TDNGenericImport<DNWmfPlaceableFileHeaderClass, DNWmfPlaceableFileHeader>) end;

  //-------------namespace: System.Drawing----------------
  DNPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6072B564-E9D4-544C-8D0A-CD686B6C4D0E}']
  { static getter & setter } 

    {class} function get_Transparent: DNPen;
    {class} function get_AliceBlue: DNPen;
    {class} function get_AntiqueWhite: DNPen;
    {class} function get_Aqua: DNPen;
    {class} function get_Aquamarine: DNPen;
    {class} function get_Azure: DNPen;
    {class} function get_Beige: DNPen;
    {class} function get_Bisque: DNPen;
    {class} function get_Black: DNPen;
    {class} function get_BlanchedAlmond: DNPen;
    {class} function get_Blue: DNPen;
    {class} function get_BlueViolet: DNPen;
    {class} function get_Brown: DNPen;
    {class} function get_BurlyWood: DNPen;
    {class} function get_CadetBlue: DNPen;
    {class} function get_Chartreuse: DNPen;
    {class} function get_Chocolate: DNPen;
    {class} function get_Coral: DNPen;
    {class} function get_CornflowerBlue: DNPen;
    {class} function get_Cornsilk: DNPen;
    {class} function get_Crimson: DNPen;
    {class} function get_Cyan: DNPen;
    {class} function get_DarkBlue: DNPen;
    {class} function get_DarkCyan: DNPen;
    {class} function get_DarkGoldenrod: DNPen;
    {class} function get_DarkGray: DNPen;
    {class} function get_DarkGreen: DNPen;
    {class} function get_DarkKhaki: DNPen;
    {class} function get_DarkMagenta: DNPen;
    {class} function get_DarkOliveGreen: DNPen;
    {class} function get_DarkOrange: DNPen;
    {class} function get_DarkOrchid: DNPen;
    {class} function get_DarkRed: DNPen;
    {class} function get_DarkSalmon: DNPen;
    {class} function get_DarkSeaGreen: DNPen;
    {class} function get_DarkSlateBlue: DNPen;
    {class} function get_DarkSlateGray: DNPen;
    {class} function get_DarkTurquoise: DNPen;
    {class} function get_DarkViolet: DNPen;
    {class} function get_DeepPink: DNPen;
    {class} function get_DeepSkyBlue: DNPen;
    {class} function get_DimGray: DNPen;
    {class} function get_DodgerBlue: DNPen;
    {class} function get_Firebrick: DNPen;
    {class} function get_FloralWhite: DNPen;
    {class} function get_ForestGreen: DNPen;
    {class} function get_Fuchsia: DNPen;
    {class} function get_Gainsboro: DNPen;
    {class} function get_GhostWhite: DNPen;
    {class} function get_Gold: DNPen;
    {class} function get_Goldenrod: DNPen;
    {class} function get_Gray: DNPen;
    {class} function get_Green: DNPen;
    {class} function get_GreenYellow: DNPen;
    {class} function get_Honeydew: DNPen;
    {class} function get_HotPink: DNPen;
    {class} function get_IndianRed: DNPen;
    {class} function get_Indigo: DNPen;
    {class} function get_Ivory: DNPen;
    {class} function get_Khaki: DNPen;
    {class} function get_Lavender: DNPen;
    {class} function get_LavenderBlush: DNPen;
    {class} function get_LawnGreen: DNPen;
    {class} function get_LemonChiffon: DNPen;
    {class} function get_LightBlue: DNPen;
    {class} function get_LightCoral: DNPen;
    {class} function get_LightCyan: DNPen;
    {class} function get_LightGoldenrodYellow: DNPen;
    {class} function get_LightGreen: DNPen;
    {class} function get_LightGray: DNPen;
    {class} function get_LightPink: DNPen;
    {class} function get_LightSalmon: DNPen;
    {class} function get_LightSeaGreen: DNPen;
    {class} function get_LightSkyBlue: DNPen;
    {class} function get_LightSlateGray: DNPen;
    {class} function get_LightSteelBlue: DNPen;
    {class} function get_LightYellow: DNPen;
    {class} function get_Lime: DNPen;
    {class} function get_LimeGreen: DNPen;
    {class} function get_Linen: DNPen;
    {class} function get_Magenta: DNPen;
    {class} function get_Maroon: DNPen;
    {class} function get_MediumAquamarine: DNPen;
    {class} function get_MediumBlue: DNPen;
    {class} function get_MediumOrchid: DNPen;
    {class} function get_MediumPurple: DNPen;
    {class} function get_MediumSeaGreen: DNPen;
    {class} function get_MediumSlateBlue: DNPen;
    {class} function get_MediumSpringGreen: DNPen;
    {class} function get_MediumTurquoise: DNPen;
    {class} function get_MediumVioletRed: DNPen;
    {class} function get_MidnightBlue: DNPen;
    {class} function get_MintCream: DNPen;
    {class} function get_MistyRose: DNPen;
    {class} function get_Moccasin: DNPen;
    {class} function get_NavajoWhite: DNPen;
    {class} function get_Navy: DNPen;
    {class} function get_OldLace: DNPen;
    {class} function get_Olive: DNPen;
    {class} function get_OliveDrab: DNPen;
    {class} function get_Orange: DNPen;
    {class} function get_OrangeRed: DNPen;
    {class} function get_Orchid: DNPen;
    {class} function get_PaleGoldenrod: DNPen;
    {class} function get_PaleGreen: DNPen;
    {class} function get_PaleTurquoise: DNPen;
    {class} function get_PaleVioletRed: DNPen;
    {class} function get_PapayaWhip: DNPen;
    {class} function get_PeachPuff: DNPen;
    {class} function get_Peru: DNPen;
    {class} function get_Pink: DNPen;
    {class} function get_Plum: DNPen;
    {class} function get_PowderBlue: DNPen;
    {class} function get_Purple: DNPen;
    {class} function get_Red: DNPen;
    {class} function get_RosyBrown: DNPen;
    {class} function get_RoyalBlue: DNPen;
    {class} function get_SaddleBrown: DNPen;
    {class} function get_Salmon: DNPen;
    {class} function get_SandyBrown: DNPen;
    {class} function get_SeaGreen: DNPen;
    {class} function get_SeaShell: DNPen;
    {class} function get_Sienna: DNPen;
    {class} function get_Silver: DNPen;
    {class} function get_SkyBlue: DNPen;
    {class} function get_SlateBlue: DNPen;
    {class} function get_SlateGray: DNPen;
    {class} function get_Snow: DNPen;
    {class} function get_SpringGreen: DNPen;
    {class} function get_SteelBlue: DNPen;
    {class} function get_Tan: DNPen;
    {class} function get_Teal: DNPen;
    {class} function get_Thistle: DNPen;
    {class} function get_Tomato: DNPen;
    {class} function get_Turquoise: DNPen;
    {class} function get_Violet: DNPen;
    {class} function get_Wheat: DNPen;
    {class} function get_White: DNPen;
    {class} function get_WhiteSmoke: DNPen;
    {class} function get_Yellow: DNPen;
    {class} function get_YellowGreen: DNPen;

  { static propertys } 

    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Transparent: DNPen read get_Transparent;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property AliceBlue: DNPen read get_AliceBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property AntiqueWhite: DNPen read get_AntiqueWhite;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Aqua: DNPen read get_Aqua;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Aquamarine: DNPen read get_Aquamarine;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Azure: DNPen read get_Azure;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Beige: DNPen read get_Beige;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Bisque: DNPen read get_Bisque;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Black: DNPen read get_Black;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property BlanchedAlmond: DNPen read get_BlanchedAlmond;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Blue: DNPen read get_Blue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property BlueViolet: DNPen read get_BlueViolet;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Brown: DNPen read get_Brown;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property BurlyWood: DNPen read get_BurlyWood;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property CadetBlue: DNPen read get_CadetBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Chartreuse: DNPen read get_Chartreuse;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Chocolate: DNPen read get_Chocolate;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Coral: DNPen read get_Coral;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property CornflowerBlue: DNPen read get_CornflowerBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Cornsilk: DNPen read get_Cornsilk;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Crimson: DNPen read get_Crimson;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Cyan: DNPen read get_Cyan;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkBlue: DNPen read get_DarkBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkCyan: DNPen read get_DarkCyan;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGoldenrod: DNPen read get_DarkGoldenrod;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGray: DNPen read get_DarkGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkGreen: DNPen read get_DarkGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkKhaki: DNPen read get_DarkKhaki;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkMagenta: DNPen read get_DarkMagenta;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOliveGreen: DNPen read get_DarkOliveGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOrange: DNPen read get_DarkOrange;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkOrchid: DNPen read get_DarkOrchid;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkRed: DNPen read get_DarkRed;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSalmon: DNPen read get_DarkSalmon;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSeaGreen: DNPen read get_DarkSeaGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSlateBlue: DNPen read get_DarkSlateBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkSlateGray: DNPen read get_DarkSlateGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkTurquoise: DNPen read get_DarkTurquoise;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DarkViolet: DNPen read get_DarkViolet;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DeepPink: DNPen read get_DeepPink;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DeepSkyBlue: DNPen read get_DeepSkyBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DimGray: DNPen read get_DimGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property DodgerBlue: DNPen read get_DodgerBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Firebrick: DNPen read get_Firebrick;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property FloralWhite: DNPen read get_FloralWhite;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property ForestGreen: DNPen read get_ForestGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Fuchsia: DNPen read get_Fuchsia;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Gainsboro: DNPen read get_Gainsboro;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property GhostWhite: DNPen read get_GhostWhite;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Gold: DNPen read get_Gold;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Goldenrod: DNPen read get_Goldenrod;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Gray: DNPen read get_Gray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Green: DNPen read get_Green;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property GreenYellow: DNPen read get_GreenYellow;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Honeydew: DNPen read get_Honeydew;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property HotPink: DNPen read get_HotPink;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property IndianRed: DNPen read get_IndianRed;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Indigo: DNPen read get_Indigo;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Ivory: DNPen read get_Ivory;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Khaki: DNPen read get_Khaki;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Lavender: DNPen read get_Lavender;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LavenderBlush: DNPen read get_LavenderBlush;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LawnGreen: DNPen read get_LawnGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LemonChiffon: DNPen read get_LemonChiffon;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightBlue: DNPen read get_LightBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightCoral: DNPen read get_LightCoral;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightCyan: DNPen read get_LightCyan;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGoldenrodYellow: DNPen read get_LightGoldenrodYellow;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGreen: DNPen read get_LightGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightGray: DNPen read get_LightGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightPink: DNPen read get_LightPink;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSalmon: DNPen read get_LightSalmon;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSeaGreen: DNPen read get_LightSeaGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSkyBlue: DNPen read get_LightSkyBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSlateGray: DNPen read get_LightSlateGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightSteelBlue: DNPen read get_LightSteelBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LightYellow: DNPen read get_LightYellow;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Lime: DNPen read get_Lime;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property LimeGreen: DNPen read get_LimeGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Linen: DNPen read get_Linen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Magenta: DNPen read get_Magenta;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Maroon: DNPen read get_Maroon;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumAquamarine: DNPen read get_MediumAquamarine;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumBlue: DNPen read get_MediumBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumOrchid: DNPen read get_MediumOrchid;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumPurple: DNPen read get_MediumPurple;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSeaGreen: DNPen read get_MediumSeaGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSlateBlue: DNPen read get_MediumSlateBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumSpringGreen: DNPen read get_MediumSpringGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumTurquoise: DNPen read get_MediumTurquoise;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MediumVioletRed: DNPen read get_MediumVioletRed;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MidnightBlue: DNPen read get_MidnightBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MintCream: DNPen read get_MintCream;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property MistyRose: DNPen read get_MistyRose;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Moccasin: DNPen read get_Moccasin;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property NavajoWhite: DNPen read get_NavajoWhite;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Navy: DNPen read get_Navy;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property OldLace: DNPen read get_OldLace;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Olive: DNPen read get_Olive;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property OliveDrab: DNPen read get_OliveDrab;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Orange: DNPen read get_Orange;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property OrangeRed: DNPen read get_OrangeRed;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Orchid: DNPen read get_Orchid;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleGoldenrod: DNPen read get_PaleGoldenrod;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleGreen: DNPen read get_PaleGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleTurquoise: DNPen read get_PaleTurquoise;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PaleVioletRed: DNPen read get_PaleVioletRed;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PapayaWhip: DNPen read get_PapayaWhip;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PeachPuff: DNPen read get_PeachPuff;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Peru: DNPen read get_Peru;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Pink: DNPen read get_Pink;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Plum: DNPen read get_Plum;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property PowderBlue: DNPen read get_PowderBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Purple: DNPen read get_Purple;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Red: DNPen read get_Red;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property RosyBrown: DNPen read get_RosyBrown;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property RoyalBlue: DNPen read get_RoyalBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SaddleBrown: DNPen read get_SaddleBrown;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Salmon: DNPen read get_Salmon;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SandyBrown: DNPen read get_SandyBrown;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SeaGreen: DNPen read get_SeaGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SeaShell: DNPen read get_SeaShell;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Sienna: DNPen read get_Sienna;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Silver: DNPen read get_Silver;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SkyBlue: DNPen read get_SkyBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SlateBlue: DNPen read get_SlateBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SlateGray: DNPen read get_SlateGray;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Snow: DNPen read get_Snow;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SpringGreen: DNPen read get_SpringGreen;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property SteelBlue: DNPen read get_SteelBlue;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Tan: DNPen read get_Tan;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Teal: DNPen read get_Teal;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Thistle: DNPen read get_Thistle;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Tomato: DNPen read get_Tomato;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Turquoise: DNPen read get_Turquoise;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Violet: DNPen read get_Violet;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Wheat: DNPen read get_Wheat;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property White: DNPen read get_White;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property WhiteSmoke: DNPen read get_WhiteSmoke;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property Yellow: DNPen read get_Yellow;
    ///<summary>A system-defined <see cref="T:System.Drawing.Pen" />
    ///  object with a width of 1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  object set to a system-defined color.</returns>
    {class} property YellowGreen: DNPen read get_YellowGreen;
  end;

  ///<summary>Pens for all the standard colors. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Pens')]
  DNPens = interface(DDN.mscorlib.DNObject)
  ['{DDE10CFF-4319-33E5-B17E-2D7F271CFE8E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPens = class(TDNGenericImport<DNPensClass, DNPens>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNMarginsClass = interface(DNObjectClass)
  ['{9C3CF37A-1B86-5A2C-AD1B-1833E79D2D04}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.Margins" />
    ///  class with 1-inch wide margins.</summary>
    {class} function init: DNMargins; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.Margins" />
    ///  class with the specified left, right, top, and bottom margins.</summary>
    ///  <param name="left">The left margin, in hundredths of an inch. </param>
    ///  <param name="right">The right margin, in hundredths of an inch. </param>
    ///  <param name="top">The top margin, in hundredths of an inch. </param>
    ///  <param name="bottom">The bottom margin, in hundredths of an inch. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="left" />
    ///  parameter value is less than 0.-or- The <paramref name="right" />
    ///  parameter value is less than 0.-or- The <paramref name="top" />
    ///  parameter value is less than 0.-or- The <paramref name="bottom" />
    ///  parameter value is less than 0. </exception>
    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;

  end;

  ///<summary>Specifies the dimensions of the margins of a printed page.</summary>
  [DNTypeName('System.Drawing.Printing.Margins')]
  DNMargins = interface(DDN.mscorlib.DNICloneable)
  ['{E3900763-C225-303C-9673-70085B3ACEEB}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    ///<summary>Retrieves a duplicate of this object, member by member.</summary>
    ///<returns>A duplicate of this object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Compares this <see cref="T:System.Drawing.Printing.Margins" />
    ///  to the specified <see cref="T:System.Object" />
    ///  to determine whether they have the same dimensions.</summary>
    ///  <param name="obj">The object to which to compare this <see cref="T:System.Drawing.Printing.Margins" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the specified object is a <see cref="T:System.Drawing.Printing.Margins" />
    ///  and has the same <see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  , <see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  , <see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  and <see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  values as this <see cref="T:System.Drawing.Printing.Margins" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Calculates and retrieves a hash code based on the width of the left, right, top, and bottom margins.</summary>
    ///<returns>A hash code based on the left, right, top, and bottom margins.</returns>
    function GetHashCode: Int32;
    ///<summary>Converts the <see cref="T:System.Drawing.Printing.Margins" />
    ///  to a string.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representation of the <see cref="T:System.Drawing.Printing.Margins" />
    ///  . </returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the left margin width, in hundredths of an inch.</summary>
    ///<returns>The left margin width, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.Margins.Left" />
    ///  property is set to a value that is less than 0. </exception>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>Gets or sets the right margin width, in hundredths of an inch.</summary>
    ///<returns>The right margin width, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.Margins.Right" />
    ///  property is set to a value that is less than 0. </exception>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>Gets or sets the top margin width, in hundredths of an inch.</summary>
    ///<returns>The top margin width, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.Margins.Top" />
    ///  property is set to a value that is less than 0. </exception>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>Gets or sets the bottom margin, in hundredths of an inch.</summary>
    ///<returns>The bottom margin, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.Margins.Bottom" />
    ///  property is set to a value that is less than 0. </exception>
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPageSettingsClass = interface(DNObjectClass)
  ['{1A742101-AB39-5A46-8351-A82BA2415C14}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  class using the default printer.</summary>
    {class} function init: DNPageSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  class using a specified printer.</summary>
    ///  <param name="printerSettings">The <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  that describes the printer to use. </param>
    {class} function init(printerSettings: DNPrinterSettings): DNPageSettings; overload;

  end;

  ///<summary>Specifies settings that apply to a single, printed page.</summary>
  [DNTypeName('System.Drawing.Printing.PageSettings')]
  DNPageSettings = interface(DDN.mscorlib.DNICloneable)
  ['{AD0BA20F-317B-3261-86E9-488F717D1BA7}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Color: Boolean;
    procedure set_Color(value: Boolean);
    function get_HardMarginX: Single;
    function get_HardMarginY: Single;
    function get_Landscape: Boolean;
    procedure set_Landscape(value: Boolean);
    function get_Margins: DNMargins;
    procedure set_Margins(value: DNMargins);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_PaperSource: DNPaperSource;
    procedure set_PaperSource(value: DNPaperSource);
    function get_PrintableArea: DNRectangleF;
    function get_PrinterResolution: DNPrinterResolution;
    procedure set_PrinterResolution(value: DNPrinterResolution);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);

  { methods } 

    ///<summary>Creates a copy of this <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</summary>
    ///<returns>A copy of this object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Copies the relevant information from the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  to the specified <see langword="DEVMODE " />
    ///  structure.</summary>
    ///  <param name="hdevmode">The handle to a Win32 <see langword="DEVMODE" />
    ///  structure. </param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist or there is no default printer installed. </exception>
    procedure CopyToHdevmode(hdevmode: IntPtr);
    ///<summary>Copies relevant information to the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  from the specified <see langword="DEVMODE" />
    ///  structure.</summary>
    ///  <param name="hdevmode">The handle to a Win32 <see langword="DEVMODE" />
    ///  structure. </param>
    ///<exception cref="T:System.ArgumentException">The printer handle is not valid. </exception><exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist or there is no default printer installed. </exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>Converts the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  to string form.</summary>
    ///<returns>A string showing the various property settings for the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the size of the page, taking into account the page orientation specified by the <see cref="P:System.Drawing.Printing.PageSettings.Landscape" />
    ///  property.</summary>
    ///<returns>A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the length and width, in hundredths of an inch, of the page.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>Gets or sets a value indicating whether the page should be printed in color.</summary>
    ///<returns><see langword="true" />
    ///  if the page should be printed in color; otherwise, <see langword="false" />
    ///  . The default is determined by the printer.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    property Color: Boolean read get_Color write set_Color;
    ///<summary>Gets the x-coordinate, in hundredths of an inch, of the hard margin at the left of the page.</summary>
    ///<returns>The x-coordinate, in hundredths of an inch, of the left-hand hard margin.</returns>
    property HardMarginX: Single read get_HardMarginX;
    ///<summary>Gets the y-coordinate, in hundredths of an inch, of the hard margin at the top of the page.</summary>
    ///<returns>The y-coordinate, in hundredths of an inch, of the hard margin at the top of the page.</returns>
    property HardMarginY: Single read get_HardMarginY;
    ///<summary>Gets or sets a value indicating whether the page is printed in landscape or portrait orientation.</summary>
    ///<returns><see langword="true" />
    ///  if the page should be printed in landscape orientation; otherwise, <see langword="false" />
    ///  . The default is determined by the printer.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    property Landscape: Boolean read get_Landscape write set_Landscape;
    ///<summary>Gets or sets the margins for this page.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.Margins" />
    ///  that represents the margins, in hundredths of an inch, for the page. The default is 1-inch margins on all sides.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    property Margins: DNMargins read get_Margins write set_Margins;
    ///<summary>Gets or sets the paper size for the page.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  that represents the size of the paper. The default is the printer's default paper size.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist or there is no default printer installed. </exception>
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    ///<summary>Gets or sets the page's paper source; for example, the printer's upper tray.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  that specifies the source of the paper. The default is the printer's default paper source.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist or there is no default printer installed. </exception>
    property PaperSource: DNPaperSource read get_PaperSource write set_PaperSource;
    ///<summary>Gets the bounds of the printable area of the page for the printer.</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  representing the length and width, in hundredths of an inch, of the area the printer is capable of printing in.</returns>
    property PrintableArea: DNRectangleF read get_PrintableArea;
    ///<summary>Gets or sets the printer resolution for the page.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  that specifies the printer resolution for the page. The default is the printer's default resolution.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist or there is no default printer installed. </exception>
    property PrinterResolution: DNPrinterResolution read get_PrinterResolution write set_PrinterResolution;
    ///<summary>Gets or sets the printer settings associated with the page.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  that represents the printer settings associated with the page.</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
  end;

  TDNPageSettings = class(TDNGenericImport<DNPageSettingsClass, DNPageSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EDA3B12-D5E3-5F25-B87F-D32097D3FB96}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  class.</summary>
    {class} function init: DNPaperSize; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  class.</summary>
    ///  <param name="name">The name of the paper. </param>
    ///  <param name="width">The width of the paper, in hundredths of an inch. </param>
    ///  <param name="height">The height of the paper, in hundredths of an inch. </param>
    {class} function init(name: string; width: Int32; height: Int32): DNPaperSize; overload;

  end;

  ///<summary>Specifies the size of a piece of paper.</summary>
  [DNTypeName('System.Drawing.Printing.PaperSize')]
  DNPaperSize = interface(DDN.mscorlib.DNObject)
  ['{19C1F738-FF0A-34D5-8CA1-0FE5B08906EB}']
  { getters & setters } 

    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Kind: DNPaperKind;
    function get_PaperName: string;
    procedure set_PaperName(value: string);
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);

  { methods } 

    ///<summary>Provides information about the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  in string form.</summary>
    ///<returns>A string.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the height of the paper, in hundredths of an inch.</summary>
    ///<returns>The height of the paper, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  property is not set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  . </exception>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>Gets the type of paper.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PaperKind" />
    ///  values.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  property is not set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  . </exception>
    property Kind: DNPaperKind read get_Kind;
    ///<summary>Gets or sets the name of the type of paper.</summary>
    ///<returns>The name of the type of paper.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  property is not set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  . </exception>
    property PaperName: string read get_PaperName write set_PaperName;
    ///<summary>Gets or sets an integer representing one of the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  values or a custom value.</summary>
    ///<returns>An integer representing one of the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  values, or a custom value.</returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>Gets or sets the width of the paper, in hundredths of an inch.</summary>
    ///<returns>The width of the paper, in hundredths of an inch.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.PaperSize.Kind" />
    ///  property is not set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" />
    ///  . </exception>
    property Width: Int32 read get_Width write set_Width;
  end;

  TDNPaperSize = class(TDNGenericImport<DNPaperSizeClass, DNPaperSize>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPaperSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E071617-CB4D-5AA8-97E5-B16FCDD4823E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  class. </summary>
    {class} function init: DNPaperSource;

  end;

  ///<summary>Specifies the paper tray from which the printer gets paper.</summary>
  [DNTypeName('System.Drawing.Printing.PaperSource')]
  DNPaperSource = interface(DDN.mscorlib.DNObject)
  ['{42181C14-259D-307A-8D1A-B2B952F93DC7}']
  { getters & setters } 

    function get_Kind: DNPaperSourceKind;
    function get_RawKind: Int32;
    procedure set_RawKind(value: Int32);
    function get_SourceName: string;
    procedure set_SourceName(value: string);

  { methods } 

    ///<summary>Provides information about the <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  in string form.</summary>
    ///<returns>A string.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the paper source.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  values.</returns>
    property Kind: DNPaperSourceKind read get_Kind;
    ///<summary>Gets or sets the integer representing one of the <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  values or a custom value.</summary>
    ///<returns>The integer value representing one of the <see cref="T:System.Drawing.Printing.PaperSourceKind" />
    ///  values or a custom value. </returns>
    property RawKind: Int32 read get_RawKind write set_RawKind;
    ///<summary>Gets or sets the name of the paper source.</summary>
    ///<returns>The name of the paper source.</returns>
    property SourceName: string read get_SourceName write set_SourceName;
  end;

  TDNPaperSource = class(TDNGenericImport<DNPaperSourceClass, DNPaperSource>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CBEA6CF-3B47-58B2-9628-0F2551A46969}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PreviewPageInfo" />
    ///  class.</summary>
    ///  <param name="image">The image of the printed page. </param>
    ///  <param name="physicalSize">The size of the printed page, in hundredths of an inch. </param>
    {class} function init(image: DNImage; physicalSize: DNSize): DNPreviewPageInfo;

  end;

  ///<summary>Specifies print preview information for a single page. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Printing.PreviewPageInfo')]
  DNPreviewPageInfo = interface(DDN.mscorlib.DNObject)
  ['{E9C17F39-040C-36F1-8B60-2A04D0382492}']
  { getters & setters } 

    function get_Image: DNImage;
    function get_PhysicalSize: DNSize;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the image of the printed page.</summary>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  representing the printed page.</returns>
    property Image: DNImage read get_Image;
    ///<summary>Gets the size of the printed page, in hundredths of an inch.</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  that specifies the size of the printed page, in hundredths of an inch.</returns>
    property PhysicalSize: DNSize read get_PhysicalSize;
  end;

  TDNPreviewPageInfo = class(TDNGenericImport<DNPreviewPageInfoClass, DNPreviewPageInfo>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF429C9D-CD57-5F4C-96F8-DEE2A5F0DFFD}']
  end;

  ///<summary>Controls how a document is printed, when printing from a Windows Forms application.</summary>
  [DNTypeName('System.Drawing.Printing.PrintController')]
  DNPrintController = interface(DDN.mscorlib.DNObject)
  ['{1FF59139-A803-31C5-B176-6D24D5A3BF55}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    ///<summary>When overridden in a derived class, begins the control sequence that determines when and how to print a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document currently being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains the event data. </param>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>When overridden in a derived class, begins the control sequence that determines when and how to print a page of a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document currently being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains the event data. </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a page from a <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  .</returns>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>When overridden in a derived class, completes the control sequence that determines when and how to print a page of a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document currently being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains the event data. </param>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>When overridden in a derived class, completes the control sequence that determines when and how to print a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document currently being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains the event data. </param>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Drawing.Printing.PrintController" />
    ///  is used for print preview.</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPreviewPrintControllerClass = interface(DNPrintControllerClass)
  ['{A1CBA942-4144-5A5D-A199-208D7EE91934}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PreviewPrintController" />
    ///  class.</summary>
    {class} function init: DNPreviewPrintController;

  end;

  ///<summary>Specifies a print controller that displays a document on a screen as a series of images.</summary>
  [DNTypeName('System.Drawing.Printing.PreviewPrintController')]
  DNPreviewPrintController = interface(DNPrintController)
  ['{8C7C352B-4A85-3963-BFBE-0834E68A7EF4}']
  { getters & setters } 

    function get_IsPreview: Boolean;
    function get_UseAntiAlias: Boolean;
    procedure set_UseAntiAlias(value: Boolean);

  { methods } 

    ///<summary>Begins the control sequence that determines when and how to preview a print document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being previewed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains data about how to print the document. </param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>Begins the control sequence that determines when and how to preview a page in a print document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being previewed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains data about how to preview a page in the print document. Initially, the <see cref="P:System.Drawing.Printing.PrintPageEventArgs.Graphics" />
    ///  property of this parameter will be <see langword="null" />
    ///  . The value returned from this method will be used to set this property. </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a page from a <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  .</returns>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>Completes the control sequence that determines when and how to preview a page in a print document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being previewed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains data about how to preview a page in the print document. </param>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>Completes the control sequence that determines when and how to preview a print document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being previewed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains data about how to preview the print document. </param>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>Captures the pages of a document as a series of images.</summary>
    ///<returns>An array of type <see cref="T:System.Drawing.Printing.PreviewPageInfo" />
    ///  that contains the pages of a <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  as a series of images.</returns>
    function GetPreviewPageInfo: TArray<DNPreviewPageInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether this controller is used for print preview. </summary>
    ///<returns><see langword="true" />
    ///  in all cases.</returns>
    property IsPreview: Boolean read get_IsPreview;
    ///<summary>Gets or sets a value indicating whether to use anti-aliasing when displaying the print preview.</summary>
    ///<returns><see langword="true" />
    ///  if the print preview uses anti-aliasing; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property UseAntiAlias: Boolean read get_UseAntiAlias write set_UseAntiAlias;
  end;

  TDNPreviewPrintController = class(TDNGenericImport<DNPreviewPrintControllerClass, DNPreviewPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNStandardPrintControllerClass = interface(DNPrintControllerClass)
  ['{6EA475BD-4348-56D2-B652-03893FB9EB5E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.StandardPrintController" />
    ///  class. </summary>
    {class} function init: DNStandardPrintController;

  end;

  ///<summary>Specifies a print controller that sends information to a printer.</summary>
  [DNTypeName('System.Drawing.Printing.StandardPrintController')]
  DNStandardPrintController = interface(DNPrintController)
  ['{69D833C9-4486-3127-9A18-EDC3EEBAD194}']
  { getters & setters } 

    function get_IsPreview: Boolean;

  { methods } 

    ///<summary>Begins the control sequence that determines when and how to print a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains data about how to print the document. </param>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer settings are not valid. </exception><exception cref="T:System.ComponentModel.Win32Exception">The native Win32 Application Programming Interface (API) could not start a print job. </exception>
    procedure OnStartPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    ///<summary>Begins the control sequence that determines when and how to print a page in a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains data about how to print a page in the document. Initially, the <see cref="P:System.Drawing.Printing.PrintPageEventArgs.Graphics" />
    ///  property of this parameter will be <see langword="null" />
    ///  . The value returned from the <see cref="M:System.Drawing.Printing.StandardPrintController.OnStartPage(System.Drawing.Printing.PrintDocument,System.Drawing.Printing.PrintPageEventArgs)" />
    ///  method will be used to set this property. </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  object that represents a page from a <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The native Win32 Application Programming Interface (API) could not prepare the printer driver to accept data.-or- The native Win32 API could not update the specified printer or plotter device context (DC) using the specified information. </exception>
    function OnStartPage(document: DNPrintDocument; e: DNPrintPageEventArgs): DNGraphics;
    ///<summary>Completes the control sequence that determines when and how to print a page of a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  that contains data about how to print a page in the document. </param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The native Win32 Application Programming Interface (API) could not finish writing to a page. </exception>
    procedure OnEndPage(document: DNPrintDocument; e: DNPrintPageEventArgs);
    ///<summary>Completes the control sequence that determines when and how to print a document.</summary>
    ///  <param name="document">A <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  that represents the document being printed. </param>
    ///  <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  that contains data about how to print the document. </param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The native Win32 Application Programming Interface (API) could not complete the print job.-or- The native Win32 API could not delete the specified device context (DC). </exception>
    procedure OnEndPrint(document: DNPrintDocument; e: DNPrintEventArgs);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Drawing.Printing.PrintController" />
    ///  is used for print preview.</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNStandardPrintController = class(TDNGenericImport<DNStandardPrintControllerClass, DNStandardPrintController>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BE7C6948-F399-5E8D-ABFF-7A901642495B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  class. </summary>
    {class} function init: DNPrinterResolution;

  end;

  ///<summary>Represents the resolution supported by a printer.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterResolution')]
  DNPrinterResolution = interface(DDN.mscorlib.DNObject)
  ['{75B45367-ECCC-30F8-86CD-7748B9CC6B7F}']
  { getters & setters } 

    function get_Kind: DNPrinterResolutionKind;
    procedure set_Kind(value: DNPrinterResolutionKind);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>This member overrides the <see cref="M:System.Object.ToString" />
    ///  method.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains information about the <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  .</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the printer resolution.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PrinterResolutionKind" />
    ///  values.</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not a member of the <see cref="T:System.Drawing.Printing.PrinterResolutionKind" />
    ///  enumeration.</exception>
    property Kind: DNPrinterResolutionKind read get_Kind write set_Kind;
    ///<summary>Gets the horizontal printer resolution, in dots per inch.</summary>
    ///<returns>The horizontal printer resolution, in dots per inch, if <see cref="P:System.Drawing.Printing.PrinterResolution.Kind" />
    ///  is set to <see cref="F:System.Drawing.Printing.PrinterResolutionKind.Custom" />
    ///  ; otherwise, a <see langword="dmPrintQuality" />
    ///  value.</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>Gets the vertical printer resolution, in dots per inch.</summary>
    ///<returns>The vertical printer resolution, in dots per inch.</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPrinterResolution = class(TDNGenericImport<DNPrinterResolutionClass, DNPrinterResolution>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettingsClass = interface(DNObjectClass)
  ['{7676BB00-8FB4-5924-B413-C4DEDEA38DE2}']
  { static getter & setter } 

    {class} function get_InstalledPrinters: DNPrinterSettings_StringCollection;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  class.</summary>
    {class} function init: DNPrinterSettings;

  { static propertys } 

    ///<summary>Gets the names of all printers installed on the computer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  that represents the names of all printers installed on the computer.</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The available printers could not be enumerated. </exception>
    {class} property InstalledPrinters: DNPrinterSettings_StringCollection read get_InstalledPrinters;
  end;

  ///<summary>Specifies information about how a document is printed, including the printer that prints it, when printing from a Windows Forms application.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings')]
  DNPrinterSettings = interface(DDN.mscorlib.DNICloneable)
  ['{5C0D0EE8-9D2A-3308-A024-607A2B3101D6}']
  { getters & setters } 

    function get_CanDuplex: Boolean;
    function get_Copies: Int16;
    procedure set_Copies(value: Int16);
    function get_Collate: Boolean;
    procedure set_Collate(value: Boolean);
    function get_DefaultPageSettings: DNPageSettings;
    function get_Duplex: DNDuplex;
    procedure set_Duplex(value: DNDuplex);
    function get_FromPage: Int32;
    procedure set_FromPage(value: Int32);
    function get_IsDefaultPrinter: Boolean;
    function get_IsPlotter: Boolean;
    function get_IsValid: Boolean;
    function get_LandscapeAngle: Int32;
    function get_MaximumCopies: Int32;
    function get_MaximumPage: Int32;
    procedure set_MaximumPage(value: Int32);
    function get_MinimumPage: Int32;
    procedure set_MinimumPage(value: Int32);
    function get_PrintFileName: string;
    procedure set_PrintFileName(value: string);
    function get_PaperSizes: DNPrinterSettings_PaperSizeCollection;
    function get_PaperSources: DNPrinterSettings_PaperSourceCollection;
    function get_PrintRange: DNPrintRange;
    procedure set_PrintRange(value: DNPrintRange);
    function get_PrintToFile: Boolean;
    procedure set_PrintToFile(value: Boolean);
    function get_PrinterName: string;
    procedure set_PrinterName(value: string);
    function get_PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection;
    function get_SupportsColor: Boolean;
    function get_ToPage: Int32;
    procedure set_ToPage(value: Int32);

  { methods } 

    ///<summary>Creates a copy of this <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  .</summary>
    ///<returns>A copy of this object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Returns a <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information that is useful when creating a <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that contains information from a printer.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    function CreateMeasurementGraphics: DNGraphics; overload;
    ///<summary>Returns a <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information, optionally specifying the origin at the margins.</summary>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  to indicate the origin at the margins; otherwise, <see langword="false" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information from the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</returns>
    function CreateMeasurementGraphics(honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>Returns a <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information associated with the specified <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</summary>
    ///  <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  to retrieve a graphics object for.</param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information from the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings): DNGraphics; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Graphics" />
    ///  associated with the specified page settings and optionally specifying the origin at the margins.</summary>
    ///  <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  to retrieve a <see cref="T:System.Drawing.Graphics" />
    ///  object for.</param>
    ///  <param name="honorOriginAtMargins"><see langword="true" />
    ///  to specify the origin at the margins; otherwise, <see langword="false" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  that contains printer information from the <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  .</returns>
    function CreateMeasurementGraphics(pageSettings: DNPageSettings; honorOriginAtMargins: Boolean): DNGraphics; overload;
    ///<summary>Creates a handle to a <see langword="DEVMODE" />
    ///  structure that corresponds to the printer settings.</summary>
    ///<returns>A handle to a <see langword="DEVMODE" />
    ///  structure.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception><exception cref="T:System.ComponentModel.Win32Exception">The printer's initialization information could not be retrieved. </exception>
    function GetHdevmode: IntPtr; overload;
    ///<summary>Creates a handle to a <see langword="DEVMODE" />
    ///  structure that corresponds to the printer and the page settings specified through the <paramref name="pageSettings" />
    ///  parameter.</summary>
    ///  <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  object that the <see langword="DEVMODE" />
    ///  structure's handle corresponds to. </param>
    ///<returns>A handle to a <see langword="DEVMODE" />
    ///  structure.</returns>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception><exception cref="T:System.ComponentModel.Win32Exception">The printer's initialization information could not be retrieved. </exception>
    function GetHdevmode(pageSettings: DNPageSettings): IntPtr; overload;
    ///<summary>Creates a handle to a <see langword="DEVNAMES" />
    ///  structure that corresponds to the printer settings.</summary>
    ///<returns>A handle to a <see langword="DEVNAMES" />
    ///  structure.</returns>
    function GetHdevnames: IntPtr;
    ///<summary>Returns a value indicating whether the printer supports printing the specified image format.</summary>
    ///  <param name="imageFormat">An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  to print.</param>
    ///<returns><see langword="true" />
    ///  if the printer supports printing the specified image format; otherwise, <see langword="false" />
    ///  .</returns>
    function IsDirectPrintingSupported(imageFormat: DNImageFormat): Boolean; overload;
    ///<summary>Gets a value indicating whether the printer supports printing the specified image file.</summary>
    ///  <param name="image">The image to print.</param>
    ///<returns><see langword="true" />
    ///  if the printer supports printing the specified image; otherwise, <see langword="false" />
    ///  .</returns>
    function IsDirectPrintingSupported(image: DNImage): Boolean; overload;
    ///<summary>Copies the relevant information out of the given handle and into the <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  .</summary>
    ///  <param name="hdevmode">The handle to a Win32 <see langword="DEVMODE" />
    ///  structure. </param>
    ///<exception cref="T:System.ArgumentException">The printer handle is not valid. </exception>
    procedure SetHdevmode(hdevmode: IntPtr);
    ///<summary>Copies the relevant information out of the given handle and into the <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  .</summary>
    ///  <param name="hdevnames">The handle to a Win32 <see langword="DEVNAMES" />
    ///  structure. </param>
    ///<exception cref="T:System.ArgumentException">The printer handle is invalid. </exception>
    procedure SetHdevnames(hdevnames: IntPtr);
    ///<summary>Provides information about the <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  in string form.</summary>
    ///<returns>A string.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value indicating whether the printer supports double-sided printing.</summary>
    ///<returns><see langword="true" />
    ///  if the printer supports double-sided printing; otherwise, <see langword="false" />
    ///  .</returns>
    property CanDuplex: Boolean read get_CanDuplex;
    ///<summary>Gets or sets the number of copies of the document to print.</summary>
    ///<returns>The number of copies to print. The default is 1.</returns>
    ///<exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.Copies" />
    ///  property is less than zero. </exception>
    property Copies: Int16 read get_Copies write set_Copies;
    ///<summary>Gets or sets a value indicating whether the printed document is collated.</summary>
    ///<returns><see langword="true" />
    ///  if the printed document is collated; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Collate: Boolean read get_Collate write set_Collate;
    ///<summary>Gets the default page settings for this printer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  that represents the default page settings for this printer.</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings;
    ///<summary>Gets or sets the printer setting for double-sided printing.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.Duplex" />
    ///  values. The default is determined by the printer.</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.Duplex" />
    ///  property is not one of the <see cref="T:System.Drawing.Printing.Duplex" />
    ///  values. </exception>
    property Duplex: DNDuplex read get_Duplex write set_Duplex;
    ///<summary>Gets or sets the page number of the first page to print.</summary>
    ///<returns>The page number of the first page to print.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  property's value is less than zero. </exception>
    property FromPage: Int32 read get_FromPage write set_FromPage;
    ///<summary>Gets a value indicating whether the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property designates the default printer, except when the user explicitly sets <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  designates the default printer; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDefaultPrinter: Boolean read get_IsDefaultPrinter;
    ///<summary>Gets a value indicating whether the printer is a plotter.</summary>
    ///<returns><see langword="true" />
    ///  if the printer is a plotter; <see langword="false" />
    ///  if the printer is a raster.</returns>
    property IsPlotter: Boolean read get_IsPlotter;
    ///<summary>Gets a value indicating whether the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property designates a valid printer.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property designates a valid printer; otherwise, <see langword="false" />
    ///  .</returns>
    property IsValid: Boolean read get_IsValid;
    ///<summary>Gets the angle, in degrees, that the portrait orientation is rotated to produce the landscape orientation.</summary>
    ///<returns>The angle, in degrees, that the portrait orientation is rotated to produce the landscape orientation.</returns>
    property LandscapeAngle: Int32 read get_LandscapeAngle;
    ///<summary>Gets the maximum number of copies that the printer enables the user to print at a time.</summary>
    ///<returns>The maximum number of copies that the printer enables the user to print at a time.</returns>
    property MaximumCopies: Int32 read get_MaximumCopies;
    ///<summary>Gets or sets the maximum <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  or <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  that can be selected in a <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  .</summary>
    ///<returns>The maximum <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  or <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  that can be selected in a <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.MaximumPage" />
    ///  property is less than zero. </exception>
    property MaximumPage: Int32 read get_MaximumPage write set_MaximumPage;
    ///<summary>Gets or sets the minimum <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  or <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  that can be selected in a <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  .</summary>
    ///<returns>The minimum <see cref="P:System.Drawing.Printing.PrinterSettings.FromPage" />
    ///  or <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  that can be selected in a <see cref="T:System.Windows.Forms.PrintDialog" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.MinimumPage" />
    ///  property is less than zero. </exception>
    property MinimumPage: Int32 read get_MinimumPage write set_MinimumPage;
    ///<summary>Gets or sets the file name, when printing to a file.</summary>
    ///<returns>The file name, when printing to a file.</returns>
    property PrintFileName: string read get_PrintFileName write set_PrintFileName;
    ///<summary>Gets the paper sizes that are supported by this printer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  that represents the paper sizes that are supported by this printer.</returns>
    property PaperSizes: DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    ///<summary>Gets the paper source trays that are available on the printer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  that represents the paper source trays that are available on this printer.</returns>
    property PaperSources: DNPrinterSettings_PaperSourceCollection read get_PaperSources;
    ///<summary>Gets or sets the page numbers that the user has specified to be printed.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PrintRange" />
    ///  values.</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.PrintRange" />
    ///  property is not one of the <see cref="T:System.Drawing.Printing.PrintRange" />
    ///  values. </exception>
    property PrintRange: DNPrintRange read get_PrintRange write set_PrintRange;
    ///<summary>Gets or sets a value indicating whether the printing output is sent to a file instead of a port.</summary>
    ///<returns><see langword="true" />
    ///  if the printing output is sent to a file; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property PrintToFile: Boolean read get_PrintToFile write set_PrintToFile;
    ///<summary>Gets or sets the name of the printer to use.</summary>
    ///<returns>The name of the printer to use.</returns>
    property PrinterName: string read get_PrinterName write set_PrinterName;
    ///<summary>Gets all the resolutions that are supported by this printer.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  that represents the resolutions that are supported by this printer.</returns>
    property PrinterResolutions: DNPrinterSettings_PrinterResolutionCollection read get_PrinterResolutions;
    ///<summary>Gets a value indicating whether this printer supports color printing.</summary>
    ///<returns><see langword="true" />
    ///  if this printer supports color; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsColor: Boolean read get_SupportsColor;
    ///<summary>Gets or sets the number of the last page to print.</summary>
    ///<returns>The number of the last page to print.</returns>
    ///<exception cref="T:System.ArgumentException">The value of the <see cref="P:System.Drawing.Printing.PrinterSettings.ToPage" />
    ///  property is less than zero. </exception>
    property ToPage: Int32 read get_ToPage write set_ToPage;
  end;

  TDNPrinterSettings = class(TDNGenericImport<DNPrinterSettingsClass, DNPrinterSettings>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSizeCollectionClass = interface(DNObjectClass)
  ['{D314BDB6-5CFF-5342-9670-44AAC3799605}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  class.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  . </param>
    {class} function init(&array: TArray<DNPaperSize>): DNPrinterSettings_PaperSizeCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Drawing.Printing.PaperSize" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSizeCollection')]
  DNPrinterSettings_PaperSizeCollection = interface(DDN.mscorlib.DNICollection)
  ['{F2DC6D91-B2ED-36E4-B5A2-706A808045D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSize;

  { methods } 

    ///<summary>Returns an enumerator that can iterate through the collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  for the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Copies the contents of the current <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  to the specified array, starting at the specified index.</summary>
    ///  <param name="paperSizes">A zero-based array that receives the items copied from the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection" />
    ///  .</param>
    ///  <param name="index">The index at which to start copying items.</param>
    procedure CopyTo(paperSizes: TArray<DNPaperSize>; index: Int32);
    ///<summary>Adds a <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  to the end of the collection.</summary>
    ///  <param name="paperSize">The <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  to add to the collection.</param>
    ///<returns>The zero-based index of the newly added item.</returns>
    function Add(paperSize: DNPaperSize): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of different paper sizes in the collection.</summary>
    ///<returns>The number of different paper sizes in the collection.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSize read get_Item; default;
  end;

  TDNPrinterSettings_PaperSizeCollection = class(TDNGenericImport<DNPrinterSettings_PaperSizeCollectionClass, DNPrinterSettings_PaperSizeCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PaperSourceCollectionClass = interface(DNObjectClass)
  ['{5100E56B-B5DC-5249-B8D7-B0F2B861D340}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  class.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  . </param>
    {class} function init(&array: TArray<DNPaperSource>): DNPrinterSettings_PaperSourceCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Drawing.Printing.PaperSource" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PaperSourceCollection')]
  DNPrinterSettings_PaperSourceCollection = interface(DDN.mscorlib.DNICollection)
  ['{0CB10CF3-79E3-3D88-93A5-DD986AFAF5BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPaperSource;

  { methods } 

    ///<summary>Returns an enumerator that can iterate through the collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  for the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Copies the contents of the current <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  to the specified array, starting at the specified index.</summary>
    ///  <param name="paperSources">A zero-based array that receives the items copied from the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  .</param>
    ///  <param name="index">The index at which to start copying items.</param>
    procedure CopyTo(paperSources: TArray<DNPaperSource>; index: Int32);
    ///<summary>Adds the specified <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  to end of the <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection" />
    ///  .</summary>
    ///  <param name="paperSource">The <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  to add to the collection.</param>
    ///<returns>The zero-based index where the <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  was added.</returns>
    function Add(paperSource: DNPaperSource): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of different paper sources in the collection.</summary>
    ///<returns>The number of different paper sources in the collection.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPaperSource read get_Item; default;
  end;

  TDNPrinterSettings_PaperSourceCollection = class(TDNGenericImport<DNPrinterSettings_PaperSourceCollectionClass, DNPrinterSettings_PaperSourceCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_PrinterResolutionCollectionClass = interface(DNObjectClass)
  ['{668BC649-4DAA-5E00-AB27-8A362631F6B7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  class.</summary>
    ///  <param name="array">An array of type <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  . </param>
    {class} function init(&array: TArray<DNPrinterResolution>): DNPrinterSettings_PrinterResolutionCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Drawing.Printing.PrinterResolution" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+PrinterResolutionCollection')]
  DNPrinterSettings_PrinterResolutionCollection = interface(DDN.mscorlib.DNICollection)
  ['{185EA4C4-A9C2-35B6-9219-E54A78482F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPrinterResolution;

  { methods } 

    ///<summary>Returns an enumerator that can iterate through the collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  for the <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Copies the contents of the current <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  to the specified array, starting at the specified index.</summary>
    ///  <param name="printerResolutions">A zero-based array that receives the items copied from the <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  .</param>
    ///  <param name="index">The index at which to start copying items.</param>
    procedure CopyTo(printerResolutions: TArray<DNPrinterResolution>; index: Int32);
    ///<summary>Adds a <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  to the end of the collection.</summary>
    ///  <param name="printerResolution">The <see cref="T:System.Drawing.Printing.PrinterResolution" />
    ///  to add to the collection.</param>
    ///<returns>The zero-based index of the newly added item.</returns>
    function Add(printerResolution: DNPrinterResolution): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of available printer resolutions in the collection.</summary>
    ///<returns>The number of available printer resolutions in the collection.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPrinterResolution read get_Item; default;
  end;

  TDNPrinterSettings_PrinterResolutionCollection = class(TDNGenericImport<DNPrinterSettings_PrinterResolutionCollectionClass, DNPrinterSettings_PrinterResolutionCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterSettings_StringCollectionClass = interface(DNObjectClass)
  ['{77A66E73-7EC6-5C1E-B999-E119E23B82DD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  class.</summary>
    ///  <param name="array">An array of type <see cref="T:System.String" />
    ///  . </param>
    {class} function init(&array: TArray<string>): DNPrinterSettings_StringCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.String" />
  ///  objects.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterSettings+StringCollection')]
  DNPrinterSettings_StringCollection = interface(DDN.mscorlib.DNICollection)
  ['{797C1ACD-B7D5-3449-A800-F41050E30EEC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    ///<summary>Returns an enumerator that can iterate through the collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  for the <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Copies the contents of the current <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection" />
    ///  to the specified array, starting at the specified index</summary>
    ///  <param name="strings">A zero-based array that receives the items copied from the <see cref="T:System.Drawing.Printing.PrinterSettings.StringCollection" />
    ///  .</param>
    ///  <param name="index">The index at which to start copying items.</param>
    procedure CopyTo(strings: TArray<string>; index: Int32);
    ///<summary>Adds a string to the end of the collection.</summary>
    ///  <param name="value">The string to add to the collection.</param>
    ///<returns>The zero-based index of the newly added item.</returns>
    function Add(value: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of strings in the collection.</summary>
    ///<returns>The number of strings in the collection.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNPrinterSettings_StringCollection = class(TDNGenericImport<DNPrinterSettings_StringCollectionClass, DNPrinterSettings_StringCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrinterUnitConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8024AF2E-A700-524C-9FAB-758EE5FC4922}']
  { static methods } 

    ///<summary>Converts a double-precision floating-point number from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.Point" />
    ///  being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A double-precision floating-point number that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: Double; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Double; overload;
    ///<summary>Converts a 32-bit signed integer from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The value being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A 32-bit signed integer that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: Int32; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): Int32; overload;
    ///<summary>Converts a <see cref="T:System.Drawing.Point" />
    ///  from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.Point" />
    ///  being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A <see cref="T:System.Drawing.Point" />
    ///  that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: DNPoint; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNPoint; overload;
    ///<summary>Converts a <see cref="T:System.Drawing.Size" />
    ///  from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.Size" />
    ///  being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: DNSize; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNSize; overload;
    ///<summary>Converts a <see cref="T:System.Drawing.Rectangle" />
    ///  from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.Rectangle" />
    ///  being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: DNRectangle; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNRectangle; overload;
    ///<summary>Converts a <see cref="T:System.Drawing.Printing.Margins" />
    ///  from one <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type to another <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  type.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.Printing.Margins" />
    ///  being converted. </param>
    ///  <param name="fromUnit">The unit to convert from. </param>
    ///  <param name="toUnit">The unit to convert to. </param>
    ///<returns>A <see cref="T:System.Drawing.Printing.Margins" />
    ///  that represents the converted <see cref="T:System.Drawing.Printing.PrinterUnit" />
    ///  .</returns>
    {class} function Convert(value: DNMargins; fromUnit: DNPrinterUnit; toUnit: DNPrinterUnit): DNMargins; overload;

  end;

  ///<summary>Specifies a series of conversion methods that are useful when interoperating with the Win32 printing API. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Printing.PrinterUnitConvert')]
  DNPrinterUnitConvert = interface(DDN.mscorlib.DNObject)
  ['{7566FB87-BC85-3EF3-B1BD-FF61ECA936A2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrinterUnitConvert = class(TDNGenericImport<DNPrinterUnitConvertClass, DNPrinterUnitConvert>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{33838080-5025-5B34-B824-039B9A202B58}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNBrush;
    {class} function get_ActiveCaption: DNBrush;
    {class} function get_ActiveCaptionText: DNBrush;
    {class} function get_AppWorkspace: DNBrush;
    {class} function get_ButtonFace: DNBrush;
    {class} function get_ButtonHighlight: DNBrush;
    {class} function get_ButtonShadow: DNBrush;
    {class} function get_Control: DNBrush;
    {class} function get_ControlLightLight: DNBrush;
    {class} function get_ControlLight: DNBrush;
    {class} function get_ControlDark: DNBrush;
    {class} function get_ControlDarkDark: DNBrush;
    {class} function get_ControlText: DNBrush;
    {class} function get_Desktop: DNBrush;
    {class} function get_GradientActiveCaption: DNBrush;
    {class} function get_GradientInactiveCaption: DNBrush;
    {class} function get_GrayText: DNBrush;
    {class} function get_Highlight: DNBrush;
    {class} function get_HighlightText: DNBrush;
    {class} function get_HotTrack: DNBrush;
    {class} function get_InactiveCaption: DNBrush;
    {class} function get_InactiveBorder: DNBrush;
    {class} function get_InactiveCaptionText: DNBrush;
    {class} function get_Info: DNBrush;
    {class} function get_InfoText: DNBrush;
    {class} function get_Menu: DNBrush;
    {class} function get_MenuBar: DNBrush;
    {class} function get_MenuHighlight: DNBrush;
    {class} function get_MenuText: DNBrush;
    {class} function get_ScrollBar: DNBrush;
    {class} function get_Window: DNBrush;
    {class} function get_WindowFrame: DNBrush;
    {class} function get_WindowText: DNBrush;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Brush" />
    ///  from the specified <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="c">The <see cref="T:System.Drawing.Color" />
    ///  structure from which to create the <see cref="T:System.Drawing.Brush" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Brush" />
    ///  this method creates.</returns>
    {class} function FromSystemColor(c: DNColor): DNBrush;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the active window's border.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the active window's border.</returns>
    {class} property ActiveBorder: DNBrush read get_ActiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of the active window's title bar.</returns>
    {class} property ActiveCaption: DNBrush read get_ActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text in the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of the active window's title bar.</returns>
    {class} property ActiveCaptionText: DNBrush read get_ActiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the application workspace. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the application workspace.</returns>
    {class} property AppWorkspace: DNBrush read get_AppWorkspace;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property ButtonFace: DNBrush read get_ButtonFace;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ButtonHighlight: DNBrush read get_ButtonHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ButtonShadow: DNBrush read get_ButtonShadow;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property Control: DNBrush read get_Control;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ControlLightLight: DNBrush read get_ControlLightLight;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the light color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the light color of a 3-D element.</returns>
    {class} property ControlLight: DNBrush read get_ControlLight;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ControlDark: DNBrush read get_ControlDark;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the dark shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the dark shadow color of a 3-D element.</returns>
    {class} property ControlDarkDark: DNBrush read get_ControlDarkDark;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of text in a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of text in a 3-D element.</returns>
    {class} property ControlText: DNBrush read get_ControlText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the desktop.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the desktop.</returns>
    {class} property Desktop: DNBrush read get_Desktop;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the lightest color in the color gradient of an active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the lightest color in the color gradient of an active window's title bar.</returns>
    {class} property GradientActiveCaption: DNBrush read get_GradientActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the lightest color in the color gradient of an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the lightest color in the color gradient of an inactive window's title bar.</returns>
    {class} property GradientInactiveCaption: DNBrush read get_GradientInactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of dimmed text.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of dimmed text.</returns>
    {class} property GrayText: DNBrush read get_GrayText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of selected items. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of selected items.</returns>
    {class} property Highlight: DNBrush read get_Highlight;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text of selected items. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text of selected items.</returns>
    {class} property HighlightText: DNBrush read get_HighlightText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color used to designate a hot-tracked item. </summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color used to designate a hot-tracked item.</returns>
    {class} property HotTrack: DNBrush read get_HotTrack;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of an inactive window's title bar.</returns>
    {class} property InactiveCaption: DNBrush read get_InactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of an inactive window's border.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of an inactive window's border.</returns>
    {class} property InactiveBorder: DNBrush read get_InactiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text in an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text in an inactive window's title bar.</returns>
    {class} property InactiveCaptionText: DNBrush read get_InactiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a ToolTip.</returns>
    {class} property Info: DNBrush read get_Info;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  is the color of the text of a ToolTip.</returns>
    {class} property InfoText: DNBrush read get_InfoText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a menu's background.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a menu's background.</returns>
    {class} property Menu: DNBrush read get_Menu;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a menu bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a menu bar.</returns>
    {class} property MenuBar: DNBrush read get_MenuBar;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color used to highlight menu items when the menu appears as a flat menu.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color used to highlight menu items when the menu appears as a flat menu.</returns>
    {class} property MenuHighlight: DNBrush read get_MenuHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a menu's text.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a menu's text.</returns>
    {class} property MenuText: DNBrush read get_MenuText;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a scroll bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background of a scroll bar.</returns>
    {class} property ScrollBar: DNBrush read get_ScrollBar;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the background in the client area of a window.</returns>
    {class} property Window: DNBrush read get_Window;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a window frame.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of a window frame.</returns>
    {class} property WindowFrame: DNBrush read get_WindowFrame;
    ///<summary>Gets a <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.SolidBrush" />
    ///  that is the color of the text in the client area of a window.</returns>
    {class} property WindowText: DNBrush read get_WindowText;
  end;

  ///<summary>Each property of the <see cref="T:System.Drawing.SystemBrushes" />
  ///  class is a <see cref="T:System.Drawing.SolidBrush" />
  ///  that is the color of a Windows display element.</summary>
  [DNTypeName('System.Drawing.SystemBrushes')]
  DNSystemBrushes = interface(DDN.mscorlib.DNObject)
  ['{8F04EEF1-EFAB-3D0A-A3C1-8B5578A1FD52}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemBrushes = class(TDNGenericImport<DNSystemBrushesClass, DNSystemBrushes>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8743384-ED03-57E1-90C8-BCA0D1AE1516}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNColor;
    {class} function get_ActiveCaption: DNColor;
    {class} function get_ActiveCaptionText: DNColor;
    {class} function get_AppWorkspace: DNColor;
    {class} function get_ButtonFace: DNColor;
    {class} function get_ButtonHighlight: DNColor;
    {class} function get_ButtonShadow: DNColor;
    {class} function get_Control: DNColor;
    {class} function get_ControlDark: DNColor;
    {class} function get_ControlDarkDark: DNColor;
    {class} function get_ControlLight: DNColor;
    {class} function get_ControlLightLight: DNColor;
    {class} function get_ControlText: DNColor;
    {class} function get_Desktop: DNColor;
    {class} function get_GradientActiveCaption: DNColor;
    {class} function get_GradientInactiveCaption: DNColor;
    {class} function get_GrayText: DNColor;
    {class} function get_Highlight: DNColor;
    {class} function get_HighlightText: DNColor;
    {class} function get_HotTrack: DNColor;
    {class} function get_InactiveBorder: DNColor;
    {class} function get_InactiveCaption: DNColor;
    {class} function get_InactiveCaptionText: DNColor;
    {class} function get_Info: DNColor;
    {class} function get_InfoText: DNColor;
    {class} function get_Menu: DNColor;
    {class} function get_MenuBar: DNColor;
    {class} function get_MenuHighlight: DNColor;
    {class} function get_MenuText: DNColor;
    {class} function get_ScrollBar: DNColor;
    {class} function get_Window: DNColor;
    {class} function get_WindowFrame: DNColor;
    {class} function get_WindowText: DNColor;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the active window's border.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the active window's border.</returns>
    {class} property ActiveBorder: DNColor read get_ActiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the active window's title bar.</returns>
    {class} property ActiveCaption: DNColor read get_ActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the text in the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the text in the active window's title bar.</returns>
    {class} property ActiveCaptionText: DNColor read get_ActiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the application workspace. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the application workspace.</returns>
    {class} property AppWorkspace: DNColor read get_AppWorkspace;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property ButtonFace: DNColor read get_ButtonFace;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ButtonHighlight: DNColor read get_ButtonHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ButtonShadow: DNColor read get_ButtonShadow;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property Control: DNColor read get_Control;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ControlDark: DNColor read get_ControlDark;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the dark shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the dark shadow color of a 3-D element.</returns>
    {class} property ControlDarkDark: DNColor read get_ControlDarkDark;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the light color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the light color of a 3-D element.</returns>
    {class} property ControlLight: DNColor read get_ControlLight;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ControlLightLight: DNColor read get_ControlLightLight;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of text in a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of text in a 3-D element.</returns>
    {class} property ControlText: DNColor read get_ControlText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the desktop.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the desktop.</returns>
    {class} property Desktop: DNColor read get_Desktop;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the lightest color in the color gradient of an active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the lightest color in the color gradient of an active window's title bar.</returns>
    {class} property GradientActiveCaption: DNColor read get_GradientActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the lightest color in the color gradient of an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the lightest color in the color gradient of an inactive window's title bar.</returns>
    {class} property GradientInactiveCaption: DNColor read get_GradientInactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of dimmed text. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of dimmed text.</returns>
    {class} property GrayText: DNColor read get_GrayText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of selected items.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background of selected items.</returns>
    {class} property Highlight: DNColor read get_Highlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the text of selected items.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the text of selected items.</returns>
    {class} property HighlightText: DNColor read get_HighlightText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color used to designate a hot-tracked item. </summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color used to designate a hot-tracked item.</returns>
    {class} property HotTrack: DNColor read get_HotTrack;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of an inactive window's border.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of an inactive window's border.</returns>
    {class} property InactiveBorder: DNColor read get_InactiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background of an inactive window's title bar.</returns>
    {class} property InactiveCaption: DNColor read get_InactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the text in an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the text in an inactive window's title bar.</returns>
    {class} property InactiveCaptionText: DNColor read get_InactiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background of a ToolTip.</returns>
    {class} property Info: DNColor read get_Info;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the text of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the text of a ToolTip.</returns>
    {class} property InfoText: DNColor read get_InfoText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of a menu's background.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of a menu's background.</returns>
    {class} property Menu: DNColor read get_Menu;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of a menu bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background of a menu bar.</returns>
    {class} property MenuBar: DNColor read get_MenuBar;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color used to highlight menu items when the menu appears as a flat menu.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color used to highlight menu items when the menu appears as a flat menu.</returns>
    {class} property MenuHighlight: DNColor read get_MenuHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of a menu's text.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of a menu's text.</returns>
    {class} property MenuText: DNColor read get_MenuText;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background of a scroll bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background of a scroll bar.</returns>
    {class} property ScrollBar: DNColor read get_ScrollBar;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the background in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the background in the client area of a window.</returns>
    {class} property Window: DNColor read get_Window;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of a window frame.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of a window frame.</returns>
    {class} property WindowFrame: DNColor read get_WindowFrame;
    ///<summary>Gets a <see cref="T:System.Drawing.Color" />
    ///  structure that is the color of the text in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that is the color of the text in the client area of a window.</returns>
    {class} property WindowText: DNColor read get_WindowText;
  end;

  ///<summary>Each property of the <see cref="T:System.Drawing.SystemColors" />
  ///  class is a <see cref="T:System.Drawing.Color" />
  ///  structure that is the color of a Windows display element.</summary>
  [DNTypeName('System.Drawing.SystemColors')]
  DNSystemColors = interface(DDN.mscorlib.DNObject)
  ['{10A38EB3-7AF4-3F68-A063-A3D0F88166E3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemColors = class(TDNGenericImport<DNSystemColorsClass, DNSystemColors>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D1FF717-A482-579A-A5CE-D672A646DB0E}']
  { static getter & setter } 

    {class} function get_CaptionFont: DNFont;
    {class} function get_SmallCaptionFont: DNFont;
    {class} function get_MenuFont: DNFont;
    {class} function get_StatusFont: DNFont;
    {class} function get_MessageBoxFont: DNFont;
    {class} function get_IconTitleFont: DNFont;
    {class} function get_DefaultFont: DNFont;
    {class} function get_DialogFont: DNFont;

  { static methods } 

    ///<summary>Returns a font object that corresponds to the specified system font name.</summary>
    ///  <param name="systemFontName">The name of the system font you need a font object for.</param>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  if the specified name matches a value in <see cref="T:System.Drawing.SystemFonts" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    {class} function GetFontByName(systemFontName: string): DNFont;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the title bars of windows.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the title bars of windows.</returns>
    {class} property CaptionFont: DNFont read get_CaptionFont;
    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the title bars of small windows, such as tool windows.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the title bars of small windows, such as tool windows.</returns>
    {class} property SmallCaptionFont: DNFont read get_SmallCaptionFont;
    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used for menus.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used for menus.</returns>
    {class} property MenuFont: DNFont read get_MenuFont;
    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the status bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used to display text in the status bar.</returns>
    {class} property StatusFont: DNFont read get_StatusFont;
    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used for message boxes.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used for message boxes</returns>
    {class} property MessageBoxFont: DNFont read get_MessageBoxFont;
    ///<summary>Gets a <see cref="T:System.Drawing.Font" />
    ///  that is used for icon titles.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that is used for icon titles.</returns>
    {class} property IconTitleFont: DNFont read get_IconTitleFont;
    ///<summary>Gets the default font that applications can use for dialog boxes and forms.</summary>
    ///<returns>The default <see cref="T:System.Drawing.Font" />
    ///  of the system. The value returned will vary depending on the user's operating system and the local culture setting of their system.</returns>
    {class} property DefaultFont: DNFont read get_DefaultFont;
    ///<summary>Gets a font that applications can use for dialog boxes and forms.</summary>
    ///<returns>A <see cref="T:System.Drawing.Font" />
    ///  that can be used for dialog boxes and forms, depending on the operating system and local culture setting of the system.</returns>
    {class} property DialogFont: DNFont read get_DialogFont;
  end;

  ///<summary>Specifies the fonts used to display text in Windows display elements.</summary>
  [DNTypeName('System.Drawing.SystemFonts')]
  DNSystemFonts = interface(DDN.mscorlib.DNObject)
  ['{0BDC7CB2-BF00-36B8-AC47-38EADBACD892}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemFonts = class(TDNGenericImport<DNSystemFontsClass, DNSystemFonts>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemIconsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0811C24B-7B5F-59A7-BE4A-B867BE5327EA}']
  { static getter & setter } 

    {class} function get_Application: DNIcon;
    {class} function get_Asterisk: DNIcon;
    {class} function get_Error: DNIcon;
    {class} function get_Exclamation: DNIcon;
    {class} function get_Hand: DNIcon;
    {class} function get_Information: DNIcon;
    {class} function get_Question: DNIcon;
    {class} function get_Warning: DNIcon;
    {class} function get_WinLogo: DNIcon;
    {class} function get_Shield: DNIcon;

  { static propertys } 

    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the default application icon (WIN32: IDI_APPLICATION).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the default application icon.</returns>
    {class} property Application: DNIcon read get_Application;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system asterisk icon (WIN32: IDI_ASTERISK).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system asterisk icon.</returns>
    {class} property Asterisk: DNIcon read get_Asterisk;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system error icon (WIN32: IDI_ERROR).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system error icon.</returns>
    {class} property Error: DNIcon read get_Error;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system exclamation icon (WIN32: IDI_EXCLAMATION).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system exclamation icon.</returns>
    {class} property Exclamation: DNIcon read get_Exclamation;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system hand icon (WIN32: IDI_HAND).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system hand icon.</returns>
    {class} property Hand: DNIcon read get_Hand;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system information icon (WIN32: IDI_INFORMATION).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system information icon.</returns>
    {class} property Information: DNIcon read get_Information;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system question icon (WIN32: IDI_QUESTION).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system question icon.</returns>
    {class} property Question: DNIcon read get_Question;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system warning icon (WIN32: IDI_WARNING).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the system warning icon.</returns>
    {class} property Warning: DNIcon read get_Warning;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the Windows logo icon (WIN32: IDI_WINLOGO).</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the Windows logo icon.</returns>
    {class} property WinLogo: DNIcon read get_WinLogo;
    ///<summary>Gets an <see cref="T:System.Drawing.Icon" />
    ///  object that contains the shield icon.</summary>
    ///<returns>An <see cref="T:System.Drawing.Icon" />
    ///  object that contains the shield icon.</returns>
    {class} property Shield: DNIcon read get_Shield;
  end;

  ///<summary>Each property of the <see cref="T:System.Drawing.SystemIcons" />
  ///  class is an <see cref="T:System.Drawing.Icon" />
  ///  object for Windows system-wide icons. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.SystemIcons')]
  DNSystemIcons = interface(DDN.mscorlib.DNObject)
  ['{5A42D3FD-8519-31FF-8531-51F2442A97AE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemIcons = class(TDNGenericImport<DNSystemIconsClass, DNSystemIcons>) end;

  //-------------namespace: System.Drawing----------------
  DNSystemPensClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC8172BB-7789-50A9-893B-C26AA54154C5}']
  { static getter & setter } 

    {class} function get_ActiveBorder: DNPen;
    {class} function get_ActiveCaption: DNPen;
    {class} function get_ActiveCaptionText: DNPen;
    {class} function get_AppWorkspace: DNPen;
    {class} function get_ButtonFace: DNPen;
    {class} function get_ButtonHighlight: DNPen;
    {class} function get_ButtonShadow: DNPen;
    {class} function get_Control: DNPen;
    {class} function get_ControlText: DNPen;
    {class} function get_ControlDark: DNPen;
    {class} function get_ControlDarkDark: DNPen;
    {class} function get_ControlLight: DNPen;
    {class} function get_ControlLightLight: DNPen;
    {class} function get_Desktop: DNPen;
    {class} function get_GradientActiveCaption: DNPen;
    {class} function get_GradientInactiveCaption: DNPen;
    {class} function get_GrayText: DNPen;
    {class} function get_Highlight: DNPen;
    {class} function get_HighlightText: DNPen;
    {class} function get_HotTrack: DNPen;
    {class} function get_InactiveBorder: DNPen;
    {class} function get_InactiveCaption: DNPen;
    {class} function get_InactiveCaptionText: DNPen;
    {class} function get_Info: DNPen;
    {class} function get_InfoText: DNPen;
    {class} function get_Menu: DNPen;
    {class} function get_MenuBar: DNPen;
    {class} function get_MenuHighlight: DNPen;
    {class} function get_MenuText: DNPen;
    {class} function get_ScrollBar: DNPen;
    {class} function get_Window: DNPen;
    {class} function get_WindowFrame: DNPen;
    {class} function get_WindowText: DNPen;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Pen" />
    ///  from the specified <see cref="T:System.Drawing.Color" />
    ///  .</summary>
    ///  <param name="c">The <see cref="T:System.Drawing.Color" />
    ///  for the new <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Pen" />
    ///  this method creates.</returns>
    {class} function FromSystemColor(c: DNColor): DNPen;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the active window's border.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the active window's border.</returns>
    {class} property ActiveBorder: DNPen read get_ActiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of the active window's title bar.</returns>
    {class} property ActiveCaption: DNPen read get_ActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in the active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in the active window's title bar.</returns>
    {class} property ActiveCaptionText: DNPen read get_ActiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the application workspace.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the application workspace.</returns>
    {class} property AppWorkspace: DNPen read get_AppWorkspace;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property ButtonFace: DNPen read get_ButtonFace;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ButtonHighlight: DNPen read get_ButtonHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ButtonShadow: DNPen read get_ButtonShadow;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the face color of a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the face color of a 3-D element.</returns>
    {class} property Control: DNPen read get_Control;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of text in a 3-D element.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of text in a 3-D element.</returns>
    {class} property ControlText: DNPen read get_ControlText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the shadow color of a 3-D element.</returns>
    {class} property ControlDark: DNPen read get_ControlDark;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the dark shadow color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the dark shadow color of a 3-D element.</returns>
    {class} property ControlDarkDark: DNPen read get_ControlDarkDark;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the light color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the light color of a 3-D element.</returns>
    {class} property ControlLight: DNPen read get_ControlLight;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the highlight color of a 3-D element. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the highlight color of a 3-D element.</returns>
    {class} property ControlLightLight: DNPen read get_ControlLightLight;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the Windows desktop.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the Windows desktop.</returns>
    {class} property Desktop: DNPen read get_Desktop;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the lightest color in the color gradient of an active window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the lightest color in the color gradient of an active window's title bar.</returns>
    {class} property GradientActiveCaption: DNPen read get_GradientActiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the lightest color in the color gradient of an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the lightest color in the color gradient of an inactive window's title bar.</returns>
    {class} property GradientInactiveCaption: DNPen read get_GradientInactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of dimmed text. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of dimmed text.</returns>
    {class} property GrayText: DNPen read get_GrayText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of selected items. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of selected items.</returns>
    {class} property Highlight: DNPen read get_Highlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text of selected items. </summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text of selected items.</returns>
    {class} property HighlightText: DNPen read get_HighlightText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color used to designate a hot-tracked item.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color used to designate a hot-tracked item.</returns>
    {class} property HotTrack: DNPen read get_HotTrack;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  is the color of the border of an inactive window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the border of an inactive window.</returns>
    {class} property InactiveBorder: DNPen read get_InactiveBorder;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the title bar caption of an inactive window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the title bar caption of an inactive window.</returns>
    {class} property InactiveCaption: DNPen read get_InactiveCaption;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in an inactive window's title bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in an inactive window's title bar.</returns>
    {class} property InactiveCaptionText: DNPen read get_InactiveCaptionText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a ToolTip.</returns>
    {class} property Info: DNPen read get_Info;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text of a ToolTip.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text of a ToolTip.</returns>
    {class} property InfoText: DNPen read get_InfoText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a menu's background.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a menu's background.</returns>
    {class} property Menu: DNPen read get_Menu;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a menu bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a menu bar.</returns>
    {class} property MenuBar: DNPen read get_MenuBar;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color used to highlight menu items when the menu appears as a flat menu.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color used to highlight menu items when the menu appears as a flat menu.</returns>
    {class} property MenuHighlight: DNPen read get_MenuHighlight;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a menu's text.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a menu's text.</returns>
    {class} property MenuText: DNPen read get_MenuText;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a scroll bar.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background of a scroll bar.</returns>
    {class} property ScrollBar: DNPen read get_ScrollBar;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the background in the client area of a window.</returns>
    {class} property Window: DNPen read get_Window;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a window frame.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of a window frame.</returns>
    {class} property WindowFrame: DNPen read get_WindowFrame;
    ///<summary>Gets a <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in the client area of a window.</summary>
    ///<returns>A <see cref="T:System.Drawing.Pen" />
    ///  that is the color of the text in the client area of a window.</returns>
    {class} property WindowText: DNPen read get_WindowText;
  end;

  ///<summary>Each property of the <see cref="T:System.Drawing.SystemPens" />
  ///  class is a <see cref="T:System.Drawing.Pen" />
  ///  that is the color of a Windows display element and that has a width of 1 pixel.</summary>
  [DNTypeName('System.Drawing.SystemPens')]
  DNSystemPens = interface(DDN.mscorlib.DNObject)
  ['{0193DFF9-1BC0-3C1F-A57C-B0588F275126}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemPens = class(TDNGenericImport<DNSystemPensClass, DNSystemPens>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNFontCollectionClass = interface(DNObjectClass)
  ['{658FAB24-84C8-575B-AEF2-6C87356F9CD5}']
  end;

  ///<summary>Provides a base class for installed and private font collections. </summary>
  [DNTypeName('System.Drawing.Text.FontCollection')]
  DNFontCollection = interface(DDN.mscorlib.DNIDisposable)
  ['{1E49A6A1-22AE-3BA9-ADA8-DE8A9D090BDE}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects associated with this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  . </summary>
    ///<returns>An array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects.</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNFontCollection = class(TDNGenericImport<DNFontCollectionClass, DNFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNInstalledFontCollectionClass = interface(DNFontCollectionClass)
  ['{1A9D8C9E-5A4D-5333-8C03-23685FE64160}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Text.InstalledFontCollection" />
    ///  class. </summary>
    {class} function init: DNInstalledFontCollection;

  end;

  ///<summary>Represents the fonts installed on the system. This class cannot be inherited. </summary>
  [DNTypeName('System.Drawing.Text.InstalledFontCollection')]
  DNInstalledFontCollection = interface(DNFontCollection)
  ['{18BAC7AC-7EC1-3E37-A600-CA3CC56B849F}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects associated with this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  . </summary>
    ///<returns>An array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects.</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNInstalledFontCollection = class(TDNGenericImport<DNInstalledFontCollectionClass, DNInstalledFontCollection>) end;

  //-------------namespace: System.Drawing.Text----------------
  DNPrivateFontCollectionClass = interface(DNFontCollectionClass)
  ['{D9E6F7A7-DA39-552D-8F60-71C2E5F257FE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  class. </summary>
    {class} function init: DNPrivateFontCollection;

  end;

  ///<summary>Provides a collection of font families built from font files that are provided by the client application.</summary>
  [DNTypeName('System.Drawing.Text.PrivateFontCollection')]
  DNPrivateFontCollection = interface(DNFontCollection)
  ['{397F6523-8278-3AFB-97E5-5444365E9A72}']
  { getters & setters } 

    function get_Families: TArray<DNFontFamily>;

  { methods } 

    ///<summary>Adds a font from the specified file to this <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  . </summary>
    ///  <param name="filename">A <see cref="T:System.String" />
    ///  that contains the file name of the font to add. </param>
    ///<exception cref="T:System.IO.FileNotFoundException">The specified font is not supported or the font file cannot be found.</exception>
    procedure AddFontFile(filename: string);
    ///<summary>Adds a font contained in system memory to this <see cref="T:System.Drawing.Text.PrivateFontCollection" />
    ///  .</summary>
    ///  <param name="memory">The memory address of the font to add. </param>
    ///  <param name="length">The memory length of the font to add. </param>
    procedure AddMemoryFont(memory: IntPtr; length: Int32);
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects associated with this <see cref="T:System.Drawing.Text.FontCollection" />
    ///  . </summary>
    ///<returns>An array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects.</returns>
    property Families: TArray<DNFontFamily> read get_Families;
  end;

  TDNPrivateFontCollection = class(TDNGenericImport<DNPrivateFontCollectionClass, DNPrivateFontCollection>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintEventArgsClass = interface(DNObjectClass)
  ['{DD88D947-6F22-569B-9601-6073DB817CC1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintEventArgs" />
    ///  class.</summary>
    {class} function init: DNPrintEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" />
  ///  and <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" />
  ///  events.</summary>
  [DNTypeName('System.Drawing.Printing.PrintEventArgs')]
  DNPrintEventArgs = interface(DNObject)
  ['{740149A2-C310-3A38-90EC-D84638581A00}']
  { getters & setters } 

    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Returns <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  in all cases.</summary>
    ///<returns><see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  in all cases.</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNPrintEventArgs = class(TDNGenericImport<DNPrintEventArgsClass, DNPrintEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNQueryPageSettingsEventArgsClass = interface(DNPrintEventArgsClass)
  ['{40D2D17D-329D-5469-85F9-313B929E506A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />
    ///  class.</summary>
    ///  <param name="pageSettings">The page settings for the page to be printed. </param>
    {class} function init(pageSettings: DNPageSettings): DNQueryPageSettingsEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />
  ///  event.</summary>
  [DNTypeName('System.Drawing.Printing.QueryPageSettingsEventArgs')]
  DNQueryPageSettingsEventArgs = interface(DNPrintEventArgs)
  ['{89C40DE8-7377-3FD3-B574-143C6A9E7BB0}']
  { getters & setters } 

    function get_PageSettings: DNPageSettings;
    procedure set_PageSettings(value: DNPageSettings);
    function get_PrintAction: DNPrintAction;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the page settings for the page to be printed.</summary>
    ///<returns>The page settings for the page to be printed.</returns>
    property PageSettings: DNPageSettings read get_PageSettings write set_PageSettings;
    ///<summary>Returns <see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  in all cases.</summary>
    ///<returns><see cref="F:System.Drawing.Printing.PrintAction.PrintToFile" />
    ///  in all cases.</returns>
    property PrintAction: DNPrintAction read get_PrintAction;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNQueryPageSettingsEventArgs = class(TDNGenericImport<DNQueryPageSettingsEventArgsClass, DNQueryPageSettingsEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNPaintValueEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E07A33BE-AA54-50C0-8DCF-2233AEC4103E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.PaintValueEventArgs" />
    ///  class using the specified values.</summary>
    ///  <param name="context">The context in which the value appears. </param>
    ///  <param name="value">The value to paint. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  object with which drawing is to be done. </param>
    ///  <param name="bounds">The <see cref="T:System.Drawing.Rectangle" />
    ///  in which drawing is to be done. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; graphics: DNGraphics; bounds: DNRectangle): DNPaintValueEventArgs;

  end;

  ///<summary>Provides data for the <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" />
  ///  method.</summary>
  [DNTypeName('System.Drawing.Design.PaintValueEventArgs')]
  DNPaintValueEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{930E4EF8-64A3-3225-9E76-6A89F790EF1E}']
  { getters & setters } 

    function get_Bounds: DNRectangle;
    function get_Context: DDN.System.DNITypeDescriptorContext;
    function get_Graphics: DNGraphics;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the rectangle that indicates the area in which the painting should be done.</summary>
    ///<returns>The rectangle that indicates the area in which the painting should be done.</returns>
    property Bounds: DNRectangle read get_Bounds;
    ///<summary>Gets the <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  interface to be used to gain additional information about the context this value appears in.</summary>
    ///<returns>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that indicates the context of the event.</returns>
    property Context: DDN.System.DNITypeDescriptorContext read get_Context;
    ///<summary>Gets the <see cref="T:System.Drawing.Graphics" />
    ///  object with which painting should be done.</summary>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  object to use for painting.</returns>
    property Graphics: DNGraphics read get_Graphics;
    ///<summary>Gets the value to paint.</summary>
    ///<returns>An object indicating what to paint.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNPaintValueEventArgs = class(TDNGenericImport<DNPaintValueEventArgsClass, DNPaintValueEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{957F3B55-1AA3-5DCA-8C10-13F6A0BF1883}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />
    ///  class.</summary>
    ///  <param name="components">The components to include in the toolbox. </param>
    {class} function init(components: TArray<DDN.System.DNIComponent>): DNToolboxComponentsCreatedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />
  ///  event that occurs when components are added to the toolbox.</summary>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatedEventArgs')]
  DNToolboxComponentsCreatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D9C9B38B-6C71-3629-9227-22C80CF66162}']
  { getters & setters } 

    function get_Components: TArray<DDN.System.DNIComponent>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an array containing the components to add to the toolbox.</summary>
    ///<returns>An array of type <see cref="T:System.ComponentModel.IComponent" />
    ///  indicating the components to add to the toolbox.</returns>
    property Components: TArray<DDN.System.DNIComponent> read get_Components;
  end;

  TDNToolboxComponentsCreatedEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatedEventArgsClass, DNToolboxComponentsCreatedEventArgs>) end;

  //-------------namespace: System.Drawing.Design----------------
  DNToolboxComponentsCreatingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6CEBDD0-D42F-5AF7-A8EC-04D931626653}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />
    ///  class.</summary>
    ///  <param name="host">The designer host that is making the request. </param>
    {class} function init(host: DDN.System.DNIDesignerHost): DNToolboxComponentsCreatingEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />
  ///  event that occurs when components are added to the toolbox.</summary>
  [DNTypeName('System.Drawing.Design.ToolboxComponentsCreatingEventArgs')]
  DNToolboxComponentsCreatingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B7F90306-D408-3A12-9B2C-CD1F3CE5A5AE}']
  { getters & setters } 

    function get_DesignerHost: DDN.System.DNIDesignerHost;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an instance of the <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that made the request to create toolbox components.</summary>
    ///<returns>The <see cref="T:System.ComponentModel.Design.IDesignerHost" />
    ///  that made the request to create toolbox components, or <see langword="null" />
    ///  if no designer host was provided to the toolbox item.</returns>
    property DesignerHost: DDN.System.DNIDesignerHost read get_DesignerHost;
  end;

  TDNToolboxComponentsCreatingEventArgs = class(TDNGenericImport<DNToolboxComponentsCreatingEventArgsClass, DNToolboxComponentsCreatingEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintPageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FAEE24EA-1B7E-5DA1-AE8A-791352369941}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />
    ///  class.</summary>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  used to paint the item. </param>
    ///  <param name="marginBounds">The area between the margins. </param>
    ///  <param name="pageBounds">The total area of the paper. </param>
    ///  <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  for the page. </param>
    {class} function init(graphics: DNGraphics; marginBounds: DNRectangle; pageBounds: DNRectangle; pageSettings: DNPageSettings): DNPrintPageEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />
  ///  event.</summary>
  [DNTypeName('System.Drawing.Printing.PrintPageEventArgs')]
  DNPrintPageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2A5D8F32-812E-3C94-9263-51BCC040C47C}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_Graphics: DNGraphics;
    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_MarginBounds: DNRectangle;
    function get_PageBounds: DNRectangle;
    function get_PageSettings: DNPageSettings;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the print job should be canceled.</summary>
    ///<returns><see langword="true" />
    ///  if the print job should be canceled; otherwise, <see langword="false" />
    ///  .</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    ///<summary>Gets the <see cref="T:System.Drawing.Graphics" />
    ///  used to paint the page.</summary>
    ///<returns>The <see cref="T:System.Drawing.Graphics" />
    ///  used to paint the page.</returns>
    property Graphics: DNGraphics read get_Graphics;
    ///<summary>Gets or sets a value indicating whether an additional page should be printed.</summary>
    ///<returns><see langword="true" />
    ///  if an additional page should be printed; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    ///<summary>Gets the rectangular area that represents the portion of the page inside the margins.</summary>
    ///<returns>The rectangular area, measured in hundredths of an inch, that represents the portion of the page inside the margins. </returns>
    property MarginBounds: DNRectangle read get_MarginBounds;
    ///<summary>Gets the rectangular area that represents the total area of the page.</summary>
    ///<returns>The rectangular area that represents the total area of the page.</returns>
    property PageBounds: DNRectangle read get_PageBounds;
    ///<summary>Gets the page settings for the current page.</summary>
    ///<returns>The page settings for the current page.</returns>
    property PageSettings: DNPageSettings read get_PageSettings;
  end;

  TDNPrintPageEventArgs = class(TDNGenericImport<DNPrintPageEventArgsClass, DNPrintPageEventArgs>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNInvalidPrinterExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{61B60F22-03DD-5D86-8926-7775864970BB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.InvalidPrinterException" />
    ///  class.</summary>
    ///  <param name="settings">A <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  that specifies the settings for a printer. </param>
    {class} function init(settings: DNPrinterSettings): DNInvalidPrinterException;

  end;

  ///<summary>Represents the exception that is thrown when you try to access a printer using printer settings that are not valid.</summary>
  [DNTypeName('System.Drawing.Printing.InvalidPrinterException')]
  DNInvalidPrinterException = interface(DDN.mscorlib.DNSystemException)
  ['{6D01472A-14A8-36E6-8E93-3577E1A8A4B5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Overridden. Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  with information about the exception.</summary>
    ///  <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  that holds the serialized object data about the exception being thrown. </param>
    ///  <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  that contains contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  . </exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPrinterException = class(TDNGenericImport<DNInvalidPrinterExceptionClass, DNInvalidPrinterException>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintDocumentClass = interface(DNObjectClass)
  ['{34BD3BB6-F9F1-504E-B7D3-3DB900132744}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintDocument" />
    ///  class.</summary>
    {class} function init: DNPrintDocument;

  end;

  ///<summary>Defines a reusable object that sends output to a printer, when printing from a Windows Forms application.</summary>
  [DNTypeName('System.Drawing.Printing.PrintDocument')]
  DNPrintDocument = interface(DNObject)
  ['{9501869F-5E2A-35B6-8588-737438CB7BC8}']
  { getters & setters } 

    function get_DefaultPageSettings: DNPageSettings;
    procedure set_DefaultPageSettings(value: DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DNPrintController;
    procedure set_PrintController(value: DNPrintController);
    function get_PrinterSettings: DNPrinterSettings;
    procedure set_PrinterSettings(value: DNPrinterSettings);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DNPrintEventHandler);
    procedure remove_BeginPrint(value: DNPrintEventHandler);
    procedure add_EndPrint(value: DNPrintEventHandler);
    procedure remove_EndPrint(value: DNPrintEventHandler);
    procedure add_PrintPage(value: DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Starts the document's printing process.</summary>
    ///<exception cref="T:System.Drawing.Printing.InvalidPrinterException">The printer named in the <see cref="P:System.Drawing.Printing.PrinterSettings.PrinterName" />
    ///  property does not exist. </exception>
    procedure Print;
    ///<summary>Provides information about the print document, in string form.</summary>
    ///<returns>A string.</returns>
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets page settings that are used as defaults for all pages to be printed.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PageSettings" />
    ///  that specifies the default page settings for the document.</returns>
    property DefaultPageSettings: DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    ///<summary>Gets or sets the document name to display (for example, in a print status dialog box or printer queue) while printing the document.</summary>
    ///<returns>The document name to display while printing the document. The default is "document".</returns>
    property DocumentName: string read get_DocumentName write set_DocumentName;
    ///<summary>Gets or sets a value indicating whether the position of a graphics object associated with a page is located just inside the user-specified margins or at the top-left corner of the printable area of the page.</summary>
    ///<returns><see langword="true" />
    ///  if the graphics origin starts at the page margins; <see langword="false" />
    ///  if the graphics origin is at the top-left corner of the printable page. The default is <see langword="false" />
    ///  .</returns>
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    ///<summary>Gets or sets the print controller that guides the printing process.</summary>
    ///<returns>The <see cref="T:System.Drawing.Printing.PrintController" />
    ///  that guides the printing process. The default is a new instance of the <see cref="T:System.Windows.Forms.PrintControllerWithStatusDialog" />
    ///  class.</returns>
    property PrintController: DNPrintController read get_PrintController write set_PrintController;
    ///<summary>Gets or sets the printer that prints the document.</summary>
    ///<returns>A <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  that specifies where and how the document is printed. The default is a <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  with its properties set to their default values.</returns>
    property PrinterSettings: DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNPrintDocument = class(TDNGenericImport<DNPrintDocumentClass, DNPrintDocument>) end;

  //-------------namespace: System.Drawing----------------
  DNBrushClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{629CBCB4-595B-51D5-8891-446B38F904D4}']
  end;

  ///<summary>Defines objects used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.</summary>
  [DNTypeName('System.Drawing.Brush')]
  DNBrush = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{60C4596A-1199-3E69-B581-7E1C9CDE9B1A}']
  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>When overridden in a derived class, creates an exact copy of this <see cref="T:System.Drawing.Brush" />
    ///  .</summary>
    ///<returns>The new <see cref="T:System.Drawing.Brush" />
    ///  that this method creates.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNHatchBrushClass = interface(DNBrushClass)
  ['{2463DC27-A67E-5974-965B-A398DFD6DA3E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  enumeration and foreground color.</summary>
    ///  <param name="hatchstyle">One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  values that represents the pattern drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  . </param>
    ///  <param name="foreColor">The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  . </param>
    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor): DNHatchBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  enumeration, foreground color, and background color.</summary>
    ///  <param name="hatchstyle">One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  values that represents the pattern drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  . </param>
    ///  <param name="foreColor">The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  . </param>
    ///  <param name="backColor">The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of spaces between the lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  . </param>
    {class} function init(hatchstyle: DNHatchStyle; foreColor: DNColor; backColor: DNColor): DNHatchBrush; overload;

  end;

  ///<summary>Defines a rectangular brush with a hatch style, a foreground color, and a background color. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.HatchBrush')]
  DNHatchBrush = interface(DNBrush)
  ['{77A4D49D-2D7A-373D-88B0-CA6E954C3537}']
  { getters & setters } 

    function get_HatchStyle: DNHatchStyle;
    function get_ForegroundColor: DNColor;
    function get_BackgroundColor: DNColor;

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the hatch style of this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  object.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle" />
    ///  values that represents the pattern of this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  .</returns>
    property HatchStyle: DNHatchStyle read get_HatchStyle;
    ///<summary>Gets the color of hatch lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the foreground color for this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  .</returns>
    property ForegroundColor: DNColor read get_ForegroundColor;
    ///<summary>Gets the color of spaces between the hatch lines drawn by this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the background color for this <see cref="T:System.Drawing.Drawing2D.HatchBrush" />
    ///  .</returns>
    property BackgroundColor: DNColor read get_BackgroundColor;
  end;

  TDNHatchBrush = class(TDNGenericImport<DNHatchBrushClass, DNHatchBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNLinearGradientBrushClass = interface(DNBrushClass)
  ['{469B1A6B-7DF1-528C-A017-CA7DE0537B7A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class with the specified points and colors.</summary>
    ///  <param name="point1">A <see cref="T:System.Drawing.PointF" />
    ///  structure that represents the starting point of the linear gradient. </param>
    ///  <param name="point2">A <see cref="T:System.Drawing.PointF" />
    ///  structure that represents the endpoint of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color of the linear gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color of the linear gradient. </param>
    {class} function init(point1: DNPointF; point2: DNPointF; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class with the specified points and colors.</summary>
    ///  <param name="point1">A <see cref="T:System.Drawing.Point" />
    ///  structure that represents the starting point of the linear gradient. </param>
    ///  <param name="point2">A <see cref="T:System.Drawing.Point" />
    ///  structure that represents the endpoint of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color of the linear gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color of the linear gradient. </param>
    {class} function init(point1: DNPoint; point2: DNPoint; color1: DNColor; color2: DNColor): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  based on a rectangle, starting and ending colors, and an orientation mode.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="linearGradientMode">A <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" />
    ///  enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, <see langword="LinearGradientMode.ForwardDiagonal" />
    ///  specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle. </param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class based on a rectangle, starting and ending colors, and orientation.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="linearGradientMode">A <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" />
    ///  enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, <see langword="LinearGradientMode.ForwardDiagonal" />
    ///  specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle. </param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; linearGradientMode: DNLinearGradientMode): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class based on a rectangle, starting and ending colors, and an orientation angle.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line. </param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class based on a rectangle, starting and ending colors, and an orientation angle.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line. </param>
    ///  <param name="isAngleScaleable">Set to <see langword="true" />
    ///  to specify that the angle is affected by the transform associated with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(rect: DNRectangleF; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class based on a rectangle, starting and ending colors, and an orientation angle.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line. </param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single): DNLinearGradientBrush; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  class based on a rectangle, starting and ending colors, and an orientation angle.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the bounds of the linear gradient. </param>
    ///  <param name="color1">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the starting color for the gradient. </param>
    ///  <param name="color2">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the ending color for the gradient. </param>
    ///  <param name="angle">The angle, measured in degrees clockwise from the x-axis, of the gradient's orientation line. </param>
    ///  <param name="isAngleScaleable">Set to <see langword="true" />
    ///  to specify that the angle is affected by the transform associated with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(rect: DNRectangle; color1: DNColor; color2: DNColor; angle: Single; isAngleScaleable: Boolean): DNLinearGradientBrush; overload;

  end;

  ///<summary>Encapsulates a <see cref="T:System.Drawing.Brush" />
  ///  with a linear gradient. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.LinearGradientBrush')]
  DNLinearGradientBrush = interface(DNBrush)
  ['{5AE2600B-BBD2-3404-8FE9-C6553DE9329B}']
  { getters & setters } 

    function get_LinearColors: TArray<DNColor>;
    procedure set_LinearColors(value: TArray<DNColor>);
    function get_Rectangle: DNRectangleF;
    function get_GammaCorrection: Boolean;
    procedure set_GammaCorrection(value: Boolean);
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);

  { methods } 

    ///<summary>Translates the local geometric transform by the specified dimensions. This method prepends the translation to the transform.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Creates a gradient falloff based on a bell-shaped curve.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies the center of the gradient (the point where the starting color and ending color are blended equally). </param>
    procedure SetSigmaBellShape(focus: Single); overload;
    ///<summary>Creates a gradient falloff based on a bell-shaped curve.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color). </param>
    ///  <param name="scale">A value from 0 through 1 that specifies how fast the colors falloff from the <paramref name="focus" />
    ///  . </param>
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    ///<summary>Creates a linear gradient with a center color and a linear falloff to a single color on both ends.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color). </param>
    procedure SetBlendTriangularShape(focus: Single); overload;
    ///<summary>Creates a linear gradient with a center color and a linear falloff to a single color on both ends.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies the center of the gradient (the point where the gradient is composed of only the ending color). </param>
    ///  <param name="scale">A value from 0 through1 that specifies how fast the colors falloff from the starting color to <paramref name="focus" />
    ///  (ending color) </param>
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    ///<summary>Resets the <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
    ///  property to identity.</summary>
    procedure ResetTransform;
    ///<summary>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to multiply the geometric transform. </param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents the local geometric transform of this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to multiply the geometric transform. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies in which order to multiply the two matrices. </param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Translates the local geometric transform by the specified dimensions in the specified order.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    ///  <param name="order">The order (prepend or append) in which to apply the translation. </param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.</summary>
    ///  <param name="sx">The amount by which to scale the transform in the x-axis direction. </param>
    ///  <param name="sy">The amount by which to scale the transform in the y-axis direction. </param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>Scales the local geometric transform by the specified amounts in the specified order.</summary>
    ///  <param name="sx">The amount by which to scale the transform in the x-axis direction. </param>
    ///  <param name="sy">The amount by which to scale the transform in the y-axis direction. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the scaling matrix. </param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>Rotates the local geometric transform by the specified amount in the specified order.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the rotation matrix. </param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the starting and ending colors of the gradient.</summary>
    ///<returns>An array of two <see cref="T:System.Drawing.Color" />
    ///  structures that represents the starting and ending colors of the gradient.</returns>
    property LinearColors: TArray<DNColor> read get_LinearColors write set_LinearColors;
    ///<summary>Gets a rectangular region that defines the starting and ending points of the gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the starting and ending points of the gradient.</returns>
    property Rectangle: DNRectangleF read get_Rectangle;
    ///<summary>Gets or sets a value indicating whether gamma correction is enabled for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  .</summary>
    ///<returns>The value is <see langword="true" />
    ///  if gamma correction is enabled for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    property GammaCorrection: Boolean read get_GammaCorrection write set_GammaCorrection;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  that specifies positions and factors that define a custom falloff for the gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  that represents a custom falloff for the gradient.</returns>
    property Blend: DNBlend read get_Blend write set_Blend;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  that defines a multicolor linear gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  that defines a multicolor linear gradient.</returns>
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that indicates the wrap mode for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  are tiled.</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>Gets or sets a copy <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that defines a local geometric transform for this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  .</summary>
    ///<returns>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that defines a geometric transform that applies only to fills drawn with this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  .</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
  end;

  TDNLinearGradientBrush = class(TDNGenericImport<DNLinearGradientBrushClass, DNLinearGradientBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNPathGradientBrushClass = interface(DNBrushClass)
  ['{E741BBA6-B534-5F44-8D3F-42CE30184DD3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  class with the specified points.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that make up the vertices of the path. </param>
    {class} function init(points: TArray<DNPointF>): DNPathGradientBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  class with the specified points and wrap mode.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that make up the vertices of the path. </param>
    ///  <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  are tiled. </param>
    {class} function init(points: TArray<DNPointF>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  class with the specified points.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that make up the vertices of the path. </param>
    {class} function init(points: TArray<DNPoint>): DNPathGradientBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  class with the specified points and wrap mode.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that make up the vertices of the path. </param>
    ///  <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  are tiled. </param>
    {class} function init(points: TArray<DNPoint>; wrapMode: DNWrapMode): DNPathGradientBrush; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  class with the specified path.</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  that defines the area filled by this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  . </param>
    {class} function init(path: DNGraphicsPath): DNPathGradientBrush; overload;

  end;

  ///<summary>Encapsulates a <see cref="T:System.Drawing.Brush" />
  ///  object that fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  object with a gradient. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.PathGradientBrush')]
  DNPathGradientBrush = interface(DNBrush)
  ['{E5B2B033-F0E6-3A04-A0D0-8CF89EBF335A}']
  { getters & setters } 

    function get_CenterColor: DNColor;
    procedure set_CenterColor(value: DNColor);
    function get_SurroundColors: TArray<DNColor>;
    procedure set_SurroundColors(value: TArray<DNColor>);
    function get_CenterPoint: DNPointF;
    procedure set_CenterPoint(value: DNPointF);
    function get_Rectangle: DNRectangleF;
    function get_Blend: DNBlend;
    procedure set_Blend(value: DNBlend);
    function get_InterpolationColors: DNColorBlend;
    procedure set_InterpolationColors(value: DNColorBlend);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_FocusScales: DNPointF;
    procedure set_FocusScales(value: DNPointF);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Creates a gradient brush that changes color starting from the center of the path outward to the path's boundary. The transition from one color to another is based on a bell-shaped curve.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies where, along any radial from the center of the path to the path's boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path. </param>
    procedure SetSigmaBellShape(focus: Single); overload;
    ///<summary>Creates a gradient brush that changes color starting from the center of the path outward to the path's boundary. The transition from one color to another is based on a bell-shaped curve.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies where, along any radial from the center of the path to the path's boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path. </param>
    ///  <param name="scale">A value from 0 through 1 that specifies the maximum intensity of the center color that gets blended with the boundary color. A value of 1 causes the highest possible intensity of the center color, and it is the default value. </param>
    procedure SetSigmaBellShape(focus: Single; scale: Single); overload;
    ///<summary>Creates a gradient with a center color and a linear falloff to one surrounding color.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies where, along any radial from the center of the path to the path's boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path. </param>
    procedure SetBlendTriangularShape(focus: Single); overload;
    ///<summary>Creates a gradient with a center color and a linear falloff to each surrounding color.</summary>
    ///  <param name="focus">A value from 0 through 1 that specifies where, along any radial from the center of the path to the path's boundary, the center color will be at its highest intensity. A value of 1 (the default) places the highest intensity at the center of the path. </param>
    ///  <param name="scale">A value from 0 through 1 that specifies the maximum intensity of the center color that gets blended with the boundary color. A value of 1 causes the highest possible intensity of the center color, and it is the default value. </param>
    procedure SetBlendTriangularShape(focus: Single; scale: Single); overload;
    ///<summary>Resets the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.Transform" />
    ///  property to identity.</summary>
    procedure ResetTransform;
    ///<summary>Updates the brush's transformation matrix with the product of brush's transformation matrix multiplied by another matrix.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that will be multiplied by the brush's current transformation matrix. </param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>Updates the brush's transformation matrix with the product of the brush's transformation matrix multiplied by another matrix.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that will be multiplied by the brush's current transformation matrix. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies in which order to multiply the two matrices. </param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified translation to the local geometric transform. This method prepends the translation to the transform.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>Applies the specified translation to the local geometric transform in the specified order.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    ///  <param name="order">The order (prepend or append) in which to apply the translation. </param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>Scales the local geometric transform by the specified amounts. This method prepends the scaling matrix to the transform.</summary>
    ///  <param name="sx">The transform scale factor in the x-axis direction. </param>
    ///  <param name="sy">The transform scale factor in the y-axis direction. </param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>Scales the local geometric transform by the specified amounts in the specified order.</summary>
    ///  <param name="sx">The transform scale factor in the x-axis direction. </param>
    ///  <param name="sy">The transform scale factor in the y-axis direction. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the scaling matrix. </param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>Rotates the local geometric transform by the specified amount. This method prepends the rotation to the transform.</summary>
    ///  <param name="angle">The angle (extent) of rotation. </param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>Rotates the local geometric transform by the specified amount in the specified order.</summary>
    ///  <param name="angle">The angle (extent) of rotation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the rotation matrix. </param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the color at the center of the path gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  that represents the color at the center of the path gradient.</returns>
    property CenterColor: DNColor read get_CenterColor write set_CenterColor;
    ///<summary>Gets or sets an array of colors that correspond to the points in the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  fills.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Color" />
    ///  structures that represents the colors associated with each point in the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  fills.</returns>
    property SurroundColors: TArray<DNColor> read get_SurroundColors write set_SurroundColors;
    ///<summary>Gets or sets the center point of the path gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.PointF" />
    ///  that represents the center point of the path gradient.</returns>
    property CenterPoint: DNPointF read get_CenterPoint write set_CenterPoint;
    ///<summary>Gets a bounding rectangle for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents a rectangular region that bounds the path this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  fills.</returns>
    property Rectangle: DNRectangleF read get_Rectangle;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  that specifies positions and factors that define a custom falloff for the gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.Blend" />
    ///  that represents a custom falloff for the gradient.</returns>
    property Blend: DNBlend read get_Blend write set_Blend;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  that defines a multicolor linear gradient.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
    ///  that defines a multicolor linear gradient.</returns>
    property InterpolationColors: DNColorBlend read get_InterpolationColors write set_InterpolationColors;
    ///<summary>Gets or sets a copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that defines a local geometric transform for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  .</summary>
    ///<returns>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that defines a geometric transform that applies only to fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  .</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>Gets or sets the focus point for the gradient falloff.</summary>
    ///<returns>A <see cref="T:System.Drawing.PointF" />
    ///  that represents the focus point for the gradient falloff.</returns>
    property FocusScales: DNPointF read get_FocusScales write set_FocusScales;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that indicates the wrap mode for this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  that specifies how fills drawn with this <see cref="T:System.Drawing.Drawing2D.PathGradientBrush" />
    ///  are tiled.</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
  end;

  TDNPathGradientBrush = class(TDNGenericImport<DNPathGradientBrushClass, DNPathGradientBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNSolidBrushClass = interface(DNBrushClass)
  ['{D7F20627-0C7C-58D3-997D-61EA3F7FF064}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.SolidBrush" />
    ///  object of the specified color.</summary>
    ///  <param name="color">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of this brush. </param>
    {class} function init(color: DNColor): DNSolidBrush;

  end;

  ///<summary>Defines a brush of a single color. Brushes are used to fill graphics shapes, such as rectangles, ellipses, pies, polygons, and paths. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.SolidBrush')]
  DNSolidBrush = interface(DNBrush)
  ['{F91083B8-1E45-3C38-9B63-5362D63049B4}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.SolidBrush" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.SolidBrush" />
    ///  object that this method creates.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the color of this <see cref="T:System.Drawing.SolidBrush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of this brush.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.SolidBrush.Color" />
    ///  property is set on an immutable <see cref="T:System.Drawing.SolidBrush" />
    ///  .</exception>
    property Color: DNColor read get_Color write set_Color;
  end;

  TDNSolidBrush = class(TDNGenericImport<DNSolidBrushClass, DNSolidBrush>) end;

  //-------------namespace: System.Drawing----------------
  DNTextureBrushClass = interface(DNBrushClass)
  ['{FFC9F2B2-99D2-5913-AC6F-7D4D3E0F07B3}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image.</summary>
    ///  <param name="bitmap">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    {class} function init(bitmap: DNImage): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image and wrap mode.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush" />
    ///  object is tiled. </param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image, wrap mode, and bounding rectangle.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush" />
    ///  object is tiled. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangleF): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image, wrap mode, and bounding rectangle.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that specifies how this <see cref="T:System.Drawing.TextureBrush" />
    ///  object is tiled. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; wrapMode: DNWrapMode; dstRect: DNRectangle): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image and bounding rectangle.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; dstRect: DNRectangleF): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image, bounding rectangle, and image attributes.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    ///  <param name="imageAttr">An <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object that contains additional information about the image used by this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; dstRect: DNRectangleF; imageAttr: DNImageAttributes): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image and bounding rectangle.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; dstRect: DNRectangle): DNTextureBrush; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.TextureBrush" />
    ///  object that uses the specified image, bounding rectangle, and image attributes.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  object with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills interiors. </param>
    ///  <param name="dstRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    ///  <param name="imageAttr">An <see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  object that contains additional information about the image used by this <see cref="T:System.Drawing.TextureBrush" />
    ///  object. </param>
    {class} function init(image: DNImage; dstRect: DNRectangle; imageAttr: DNImageAttributes): DNTextureBrush; overload;

  end;

  ///<summary>Each property of the <see cref="T:System.Drawing.TextureBrush" />
  ///  class is a <see cref="T:System.Drawing.Brush" />
  ///  object that uses an image to fill the interior of a shape. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.TextureBrush')]
  DNTextureBrush = interface(DNBrush)
  ['{794DFFD4-9CAD-3DB9-A95A-EAD7CB72AD6C}']
  { getters & setters } 

    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_WrapMode: DNWrapMode;
    procedure set_WrapMode(value: DNWrapMode);
    function get_Image: DNImage;

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.TextureBrush" />
    ///  object this method creates, cast as an <see cref="T:System.Object" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Resets the <see langword="Transform" />
    ///  property of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object to identity.</summary>
    procedure ResetTransform;
    ///<summary>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object that represents the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object by which to multiply the geometric transformation. </param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>Multiplies the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object that represents the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object in the specified order.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object by which to multiply the geometric transformation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies the order in which to multiply the two matrices. </param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Translates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified dimensions. This method prepends the translation to the transformation.</summary>
    ///  <param name="dx">The dimension by which to translate the transformation in the x direction. </param>
    ///  <param name="dy">The dimension by which to translate the transformation in the y direction. </param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>Translates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified dimensions in the specified order.</summary>
    ///  <param name="dx">The dimension by which to translate the transformation in the x direction. </param>
    ///  <param name="dy">The dimension by which to translate the transformation in the y direction. </param>
    ///  <param name="order">The order (prepend or append) in which to apply the translation. </param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>Scales the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified amounts. This method prepends the scaling matrix to the transformation.</summary>
    ///  <param name="sx">The amount by which to scale the transformation in the x direction. </param>
    ///  <param name="sy">The amount by which to scale the transformation in the y direction. </param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>Scales the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified amounts in the specified order.</summary>
    ///  <param name="sx">The amount by which to scale the transformation in the x direction. </param>
    ///  <param name="sy">The amount by which to scale the transformation in the y direction. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies whether to append or prepend the scaling matrix. </param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>Rotates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified amount. This method prepends the rotation to the transformation.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>Rotates the local geometric transformation of this <see cref="T:System.Drawing.TextureBrush" />
    ///  object by the specified amount in the specified order.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies whether to append or prepend the rotation matrix. </param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Brush" />
    ///  object.</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object that defines a local geometric transformation for the image associated with this <see cref="T:System.Drawing.TextureBrush" />
    ///  object.</summary>
    ///<returns>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object that defines a geometric transformation that applies only to fills drawn by using this <see cref="T:System.Drawing.TextureBrush" />
    ///  object.</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that indicates the wrap mode for this <see cref="T:System.Drawing.TextureBrush" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.WrapMode" />
    ///  enumeration that specifies how fills drawn by using this <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />
    ///  object are tiled.</returns>
    property WrapMode: DNWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>Gets the <see cref="T:System.Drawing.Image" />
    ///  object associated with this <see cref="T:System.Drawing.TextureBrush" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  object that represents the image with which this <see cref="T:System.Drawing.TextureBrush" />
    ///  object fills shapes.</returns>
    property Image: DNImage read get_Image;
  end;

  TDNTextureBrush = class(TDNGenericImport<DNTextureBrushClass, DNTextureBrush>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNCustomLineCapClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{09507B6C-0C81-5A60-969B-023BAE664F05}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  class with the specified outline and fill.</summary>
    ///  <param name="fillPath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the fill for the custom cap. </param>
    ///  <param name="strokePath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the outline of the custom cap. </param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath): DNCustomLineCap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  class from the specified existing <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration with the specified outline and fill.</summary>
    ///  <param name="fillPath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the fill for the custom cap. </param>
    ///  <param name="strokePath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the outline of the custom cap. </param>
    ///  <param name="baseCap">The line cap from which to create the custom cap. </param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap): DNCustomLineCap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  class from the specified existing <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration with the specified outline, fill, and inset.</summary>
    ///  <param name="fillPath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the fill for the custom cap. </param>
    ///  <param name="strokePath">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object that defines the outline of the custom cap. </param>
    ///  <param name="baseCap">The line cap from which to create the custom cap. </param>
    ///  <param name="baseInset">The distance between the cap and the line. </param>
    {class} function init(fillPath: DNGraphicsPath; strokePath: DNGraphicsPath; baseCap: DNLineCap; baseInset: Single): DNCustomLineCap; overload;

  end;

  ///<summary>Encapsulates a custom user-defined line cap.</summary>
  [DNTypeName('System.Drawing.Drawing2D.CustomLineCap')]
  DNCustomLineCap = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{6450327A-3128-3AF9-B7DD-84092A06D609}']
  { getters & setters } 

    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Sets the caps used to start and end lines that make up this custom cap.</summary>
    ///  <param name="startCap">The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration used at the beginning of a line within this cap. </param>
    ///  <param name="endCap">The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration used at the end of a line within this cap. </param>
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  enumeration that determines how lines that compose this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object are joined.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  enumeration this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object uses to join lines.</returns>
    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  is based.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  is based.</returns>
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    ///<summary>Gets or sets the distance between the cap and the line.</summary>
    ///<returns>The distance between the beginning of the cap and the end of the line.</returns>
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    ///<summary>Gets or sets the amount by which to scale this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  Class object with respect to the width of the <see cref="T:System.Drawing.Pen" />
    ///  object.</summary>
    ///<returns>The amount by which to scale the cap.</returns>
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNCustomLineCap = class(TDNGenericImport<DNCustomLineCapClass, DNCustomLineCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNAdjustableArrowCapClass = interface(DNCustomLineCapClass)
  ['{8CFD6120-22B3-5398-82D0-784AAF7B9677}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap" />
    ///  class with the specified width and height. The arrow end caps created with this constructor are always filled.</summary>
    ///  <param name="width">The width of the arrow. </param>
    ///  <param name="height">The height of the arrow. </param>
    {class} function init(width: Single; height: Single): DNAdjustableArrowCap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap" />
    ///  class with the specified width, height, and fill property. Whether an arrow end cap is filled depends on the argument passed to the <paramref name="isFilled" />
    ///  parameter.</summary>
    ///  <param name="width">The width of the arrow. </param>
    ///  <param name="height">The height of the arrow. </param>
    ///  <param name="isFilled"><see langword="true" />
    ///  to fill the arrow cap; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(width: Single; height: Single; isFilled: Boolean): DNAdjustableArrowCap; overload;

  end;

  ///<summary>Represents an adjustable arrow-shaped line cap. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.AdjustableArrowCap')]
  DNAdjustableArrowCap = interface(DNCustomLineCap)
  ['{072BBE91-D5FA-39A0-8FA7-04AEF7702C58}']
  { getters & setters } 

    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_MiddleInset: Single;
    procedure set_MiddleInset(value: Single);
    function get_Filled: Boolean;
    procedure set_Filled(value: Boolean);
    function get_StrokeJoin: DNLineJoin;
    procedure set_StrokeJoin(value: DNLineJoin);
    function get_BaseCap: DNLineCap;
    procedure set_BaseCap(value: DNLineCap);
    function get_BaseInset: Single;
    procedure set_BaseInset(value: Single);
    function get_WidthScale: Single;
    procedure set_WidthScale(value: Single);

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Sets the caps used to start and end lines that make up this custom cap.</summary>
    ///  <param name="startCap">The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration used at the beginning of a line within this cap. </param>
    ///  <param name="endCap">The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration used at the end of a line within this cap. </param>
    procedure SetStrokeCaps(startCap: DNLineCap; endCap: DNLineCap);
    procedure GetStrokeCaps(out startCap: DNLineCap; out endCap: DNLineCap);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the height of the arrow cap.</summary>
    ///<returns>The height of the arrow cap.</returns>
    property Height: Single read get_Height write set_Height;
    ///<summary>Gets or sets the width of the arrow cap.</summary>
    ///<returns>The width, in units, of the arrow cap.</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>Gets or sets the number of units between the outline of the arrow cap and the fill.</summary>
    ///<returns>The number of units between the outline of the arrow cap and the fill of the arrow cap.</returns>
    property MiddleInset: Single read get_MiddleInset write set_MiddleInset;
    ///<summary>Gets or sets whether the arrow cap is filled.</summary>
    ///<returns>This property is <see langword="true" />
    ///  if the arrow cap is filled; otherwise, <see langword="false" />
    ///  .</returns>
    property Filled: Boolean read get_Filled write set_Filled;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  enumeration that determines how lines that compose this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object are joined.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  enumeration this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  object uses to join lines.</returns>
    property StrokeJoin: DNLineJoin read get_StrokeJoin write set_StrokeJoin;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  is based.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  enumeration on which this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  is based.</returns>
    property BaseCap: DNLineCap read get_BaseCap write set_BaseCap;
    ///<summary>Gets or sets the distance between the cap and the line.</summary>
    ///<returns>The distance between the beginning of the cap and the end of the line.</returns>
    property BaseInset: Single read get_BaseInset write set_BaseInset;
    ///<summary>Gets or sets the amount by which to scale this <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  Class object with respect to the width of the <see cref="T:System.Drawing.Pen" />
    ///  object.</summary>
    ///<returns>The amount by which to scale the cap.</returns>
    property WidthScale: Single read get_WidthScale write set_WidthScale;
  end;

  TDNAdjustableArrowCap = class(TDNGenericImport<DNAdjustableArrowCapClass, DNAdjustableArrowCap>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsContainerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{98368B9B-4EED-5BC8-971A-17292A7F5E67}']
  end;

  ///<summary>Represents the internal data of a graphics container. This class is used when saving the state of a <see cref="T:System.Drawing.Graphics" />
  ///  object using the <see cref="M:System.Drawing.Graphics.BeginContainer" />
  ///  and <see cref="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
  ///  methods. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsContainer')]
  DNGraphicsContainer = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{59F0647C-2277-3516-9AF1-9B27E963FAC5}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsContainer = class(TDNGenericImport<DNGraphicsContainerClass, DNGraphicsContainer>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{14B290CE-ECCD-59E2-A69C-E477F26C5DA5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  class with a <see cref="P:System.Drawing.Drawing2D.GraphicsPath.FillMode" />
    ///  value of <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  .</summary>
    {class} function init: DNGraphicsPath; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration.</summary>
    ///  <param name="fillMode">The <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the interior of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  is filled. </param>
    {class} function init(fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  and <see cref="T:System.Drawing.PointF" />
    ///  arrays.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  . </param>
    ///  <param name="types">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  enumeration elements that specifies the type of each corresponding point in the <paramref name="pts" />
    ///  array. </param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  array with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  and <see cref="T:System.Drawing.PointF" />
    ///  arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration element.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  . </param>
    ///  <param name="types">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  enumeration elements that specifies the type of each corresponding point in the <paramref name="pts" />
    ///  array. </param>
    ///  <param name="fillMode">A <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  are filled. </param>
    {class} function init(pts: TArray<DNPointF>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  and <see cref="T:System.Drawing.Point" />
    ///  arrays.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  . </param>
    ///  <param name="types">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  enumeration elements that specifies the type of each corresponding point in the <paramref name="pts" />
    ///  array. </param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>): DNGraphicsPath; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  and <see cref="T:System.Drawing.Point" />
    ///  arrays and with the specified <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration element.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that defines the coordinates of the points that make up this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  . </param>
    ///  <param name="types">An array of <see cref="T:System.Drawing.Drawing2D.PathPointType" />
    ///  enumeration elements that specifies the type of each corresponding point in the <paramref name="pts" />
    ///  array. </param>
    ///  <param name="fillMode">A <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  are filled. </param>
    {class} function init(pts: TArray<DNPoint>; types: TArray<Byte>; fillMode: DNFillMode): DNGraphicsPath; overload;

  end;

  ///<summary>Represents a series of connected lines and curves. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsPath')]
  DNGraphicsPath = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{5C410D7F-42A1-329D-83AE-05AA8D2623B4}']
  { getters & setters } 

    function get_FillMode: DNFillMode;
    procedure set_FillMode(value: DNFillMode);
    function get_PathData: DNPathData;
    function get_PointCount: Int32;
    function get_PathTypes: TArray<Byte>;
    function get_PathPoints: TArray<DNPointF>;

  { methods } 

    ///<summary>Adds a rectangle to this path.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle to add. </param>
    procedure AddRectangle(rect: DNRectangle); overload;
    ///<summary>Creates an exact copy of this path.</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Empties the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  and <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  arrays and sets the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  to <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate" />
    ///  .</summary>
    procedure Reset;
    ///<summary>Starts a new figure without closing the current figure. All subsequent points added to the path are added to this new figure.</summary>
    procedure StartFigure;
    ///<summary>Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.</summary>
    procedure CloseFigure;
    ///<summary>Closes all open figures in this path and starts a new figure. It closes each open figure by connecting a line from its endpoint to its starting point.</summary>
    procedure CloseAllFigures;
    ///<summary>Sets a marker on this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    procedure SetMarkers;
    ///<summary>Clears all markers from this path.</summary>
    procedure ClearMarkers;
    ///<summary>Reverses the order of points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    procedure Reverse;
    ///<summary>Gets the last point in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  array of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.PointF" />
    ///  that represents the last point in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</returns>
    function GetLastPoint: DNPointF;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="point">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  in the visible clip region of the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pt">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the point to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(pt: DNPointF; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="point">A <see cref="T:System.Drawing.Point" />
    ///  that represents the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  , using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pt">A <see cref="T:System.Drawing.Point" />
    ///  that represents the point to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(pt: DNPoint; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="point">A <see cref="T:System.Drawing.PointF" />
    ///  that specifies the location to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(point: DNPointF; pen: DNPen): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  and using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  as drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(x: Single; y: Single; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  and using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="pt">A <see cref="T:System.Drawing.PointF" />
    ///  that specifies the location to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  as drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(pt: DNPointF; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="point">A <see cref="T:System.Drawing.Point" />
    ///  that specifies the location to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(point: DNPoint; pen: DNPen): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  and using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  as drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(x: Int32; y: Int32; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>Indicates whether the specified point is contained within (under) the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  and using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="pt">A <see cref="T:System.Drawing.Point" />
    ///  that specifies the location to test. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  to test. </param>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  for which to test visibility. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the specified point is contained within the outline of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  as drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsOutlineVisible(pt: DNPoint; pen: DNPen; graphics: DNGraphics): Boolean; overload;
    ///<summary>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pt1">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the starting point of the line. </param>
    ///  <param name="pt2">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the endpoint of the line. </param>
    procedure AddLine(pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="x1">The x-coordinate of the starting point of the line. </param>
    ///  <param name="y1">The y-coordinate of the starting point of the line. </param>
    ///  <param name="x2">The x-coordinate of the endpoint of the line. </param>
    ///  <param name="y2">The y-coordinate of the endpoint of the line. </param>
    procedure AddLine(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the line segments to add. </param>
    procedure AddLines(points: TArray<DNPointF>); overload;
    ///<summary>Appends a line segment to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pt1">A <see cref="T:System.Drawing.Point" />
    ///  that represents the starting point of the line. </param>
    ///  <param name="pt2">A <see cref="T:System.Drawing.Point" />
    ///  that represents the endpoint of the line. </param>
    procedure AddLine(pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>Appends a line segment to the current figure.</summary>
    ///  <param name="x1">The x-coordinate of the starting point of the line. </param>
    ///  <param name="y1">The y-coordinate of the starting point of the line. </param>
    ///  <param name="x2">The x-coordinate of the endpoint of the line. </param>
    ///  <param name="y2">The y-coordinate of the endpoint of the line. </param>
    procedure AddLine(x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>Appends a series of connected line segments to the end of this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the line segments to add. </param>
    procedure AddLines(points: TArray<DNPoint>); overload;
    ///<summary>Appends an elliptical arc to the current figure.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangular bounds of the ellipse from which the arc is taken. </param>
    ///  <param name="startAngle">The starting angle of the arc, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the arc. </param>
    procedure AddArc(rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Appends an elliptical arc to the current figure.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="width">The width of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="height">The height of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="startAngle">The starting angle of the arc, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the arc. </param>
    procedure AddArc(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Appends an elliptical arc to the current figure.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangular bounds of the ellipse from which the arc is taken. </param>
    ///  <param name="startAngle">The starting angle of the arc, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the arc. </param>
    procedure AddArc(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Appends an elliptical arc to the current figure.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="width">The width of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="height">The height of the rectangular region that defines the ellipse from which the arc is drawn. </param>
    ///  <param name="startAngle">The starting angle of the arc, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the arc. </param>
    procedure AddArc(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Adds a cubic BÃ©zier curve to the current figure.</summary>
    ///  <param name="pt1">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the starting point of the curve. </param>
    ///  <param name="pt2">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the first control point for the curve. </param>
    ///  <param name="pt3">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the second control point for the curve. </param>
    ///  <param name="pt4">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the endpoint of the curve. </param>
    procedure AddBezier(pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>Adds a cubic BÃ©zier curve to the current figure.</summary>
    ///  <param name="x1">The x-coordinate of the starting point of the curve. </param>
    ///  <param name="y1">The y-coordinate of the starting point of the curve. </param>
    ///  <param name="x2">The x-coordinate of the first control point for the curve. </param>
    ///  <param name="y2">The y-coordinate of the first control point for the curve. </param>
    ///  <param name="x3">The x-coordinate of the second control point for the curve. </param>
    ///  <param name="y3">The y-coordinate of the second control point for the curve. </param>
    ///  <param name="x4">The x-coordinate of the endpoint of the curve. </param>
    ///  <param name="y4">The y-coordinate of the endpoint of the curve. </param>
    procedure AddBezier(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>Adds a sequence of connected cubic BÃ©zier curves to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curves. </param>
    procedure AddBeziers(points: TArray<DNPointF>); overload;
    ///<summary>Adds a cubic BÃ©zier curve to the current figure.</summary>
    ///  <param name="pt1">A <see cref="T:System.Drawing.Point" />
    ///  that represents the starting point of the curve. </param>
    ///  <param name="pt2">A <see cref="T:System.Drawing.Point" />
    ///  that represents the first control point for the curve. </param>
    ///  <param name="pt3">A <see cref="T:System.Drawing.Point" />
    ///  that represents the second control point for the curve. </param>
    ///  <param name="pt4">A <see cref="T:System.Drawing.Point" />
    ///  that represents the endpoint of the curve. </param>
    procedure AddBezier(pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>Adds a cubic BÃ©zier curve to the current figure.</summary>
    ///  <param name="x1">The x-coordinate of the starting point of the curve. </param>
    ///  <param name="y1">The y-coordinate of the starting point of the curve. </param>
    ///  <param name="x2">The x-coordinate of the first control point for the curve. </param>
    ///  <param name="y2">The y-coordinate of the first control point for the curve. </param>
    ///  <param name="x3">The x-coordinate of the second control point for the curve. </param>
    ///  <param name="y3">The y-coordinate of the second control point for the curve. </param>
    ///  <param name="x4">The x-coordinate of the endpoint of the curve. </param>
    ///  <param name="y4">The y-coordinate of the endpoint of the curve. </param>
    procedure AddBezier(x1: Int32; y1: Int32; x2: Int32; y2: Int32; x3: Int32; y3: Int32; x4: Int32; y4: Int32); overload;
    ///<summary>Adds a sequence of connected cubic BÃ©zier curves to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curves. </param>
    procedure AddBeziers(points: TArray<DNPoint>); overload;
    ///<summary>Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curve. </param>
    procedure AddCurve(points: TArray<DNPointF>); overload;
    ///<summary>Adds a spline curve to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results. </param>
    procedure AddCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>Adds a spline curve to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="offset">The index of the element in the <paramref name="points" />
    ///  array that is used as the first point in the curve. </param>
    ///  <param name="numberOfSegments">The number of segments used to draw the curve. A segment can be thought of as a line connecting two points. </param>
    ///  <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results. </param>
    procedure AddCurve(points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>Adds a spline curve to the current figure. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curve. </param>
    procedure AddCurve(points: TArray<DNPoint>); overload;
    ///<summary>Adds a spline curve to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results. </param>
    procedure AddCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>Adds a spline curve to the current figure.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="offset">The index of the element in the <paramref name="points" />
    ///  array that is used as the first point in the curve. </param>
    ///  <param name="numberOfSegments">A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results. </param>
    ///  <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater than 1 produce unpredictable results. </param>
    procedure AddCurve(points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curve. </param>
    procedure AddClosedCurve(points: TArray<DNPointF>); overload;
    ///<summary>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="tension">A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve. </param>
    procedure AddClosedCurve(points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curve. </param>
    procedure AddClosedCurve(points: TArray<DNPoint>); overload;
    ///<summary>Adds a closed curve to this path. A cardinal spline curve is used because the curve travels through each of the points in the array.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points that define the curve. </param>
    ///  <param name="tension">A value between from 0 through 1 that specifies the amount that the curve bends between points, with 0 being the smallest curve (sharpest corner) and 1 being the smoothest curve. </param>
    procedure AddClosedCurve(points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>Adds a rectangle to this path.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle to add. </param>
    procedure AddRectangle(rect: DNRectangleF); overload;
    ///<summary>Adds a series of rectangles to this path.</summary>
    ///  <param name="rects">An array of <see cref="T:System.Drawing.RectangleF" />
    ///  structures that represents the rectangles to add. </param>
    procedure AddRectangles(rects: TArray<DNRectangleF>); overload;
    ///<summary>Adds a series of rectangles to this path.</summary>
    ///  <param name="rects">An array of <see cref="T:System.Drawing.Rectangle" />
    ///  structures that represents the rectangles to add. </param>
    procedure AddRectangles(rects: TArray<DNRectangle>); overload;
    ///<summary>Adds an ellipse to the current path.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the bounding rectangle that defines the ellipse. </param>
    procedure AddEllipse(rect: DNRectangleF); overload;
    ///<summary>Adds an ellipse to the current path.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">The width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">The height of the bounding rectangle that defines the ellipse. </param>
    procedure AddEllipse(x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Adds an ellipse to the current path.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the bounding rectangle that defines the ellipse. </param>
    procedure AddEllipse(rect: DNRectangle); overload;
    ///<summary>Adds an ellipse to the current path.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">The width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">The height of the bounding rectangle that defines the ellipse. </param>
    procedure AddEllipse(x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Adds the outline of a pie shape to this path.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="startAngle">The starting angle for the pie section, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle" />
    ///  . </param>
    procedure AddPie(rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Adds the outline of a pie shape to this path.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="width">The width of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="height">The height of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="startAngle">The starting angle for the pie section, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle" />
    ///  . </param>
    procedure AddPie(x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Adds the outline of a pie shape to this path.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="width">The width of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="height">The height of the bounding rectangle that defines the ellipse from which the pie is drawn. </param>
    ///  <param name="startAngle">The starting angle for the pie section, measured in degrees clockwise from the x-axis. </param>
    ///  <param name="sweepAngle">The angle between <paramref name="startAngle" />
    ///  and the end of the pie section, measured in degrees clockwise from <paramref name="startAngle" />
    ///  . </param>
    procedure AddPie(x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Adds a polygon to this path.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that defines the polygon to add. </param>
    procedure AddPolygon(points: TArray<DNPointF>); overload;
    ///<summary>Adds a polygon to this path.</summary>
    ///  <param name="points">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that defines the polygon to add. </param>
    procedure AddPolygon(points: TArray<DNPoint>); overload;
    ///<summary>Appends the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to this path.</summary>
    ///  <param name="addingPath">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to add. </param>
    ///  <param name="connect">A Boolean value that specifies whether the first figure in the added path is part of the last figure in this path. A value of <see langword="true" />
    ///  specifies that (if possible) the first figure in the added path is part of the last figure in this path. A value of <see langword="false" />
    ///  specifies that the first figure in the added path is separate from the last figure in this path. </param>
    procedure AddPath(addingPath: DNGraphicsPath; connect: Boolean);
    ///<summary>Adds a text string to this path.</summary>
    ///  <param name="s">The <see cref="T:System.String" />
    ///  to add. </param>
    ///  <param name="family">A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents the name of the font with which the test is drawn. </param>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section). </param>
    ///  <param name="emSize">The height of the em square box that bounds the character. </param>
    ///  <param name="origin">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the point where the text starts. </param>
    ///  <param name="format">A <see cref="T:System.Drawing.StringFormat" />
    ///  that specifies text formatting information, such as line spacing and alignment. </param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPointF; format: DNStringFormat); overload;
    ///<summary>Adds a text string to this path.</summary>
    ///  <param name="s">The <see cref="T:System.String" />
    ///  to add. </param>
    ///  <param name="family">A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents the name of the font with which the test is drawn. </param>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section). </param>
    ///  <param name="emSize">The height of the em square box that bounds the character. </param>
    ///  <param name="origin">A <see cref="T:System.Drawing.Point" />
    ///  that represents the point where the text starts. </param>
    ///  <param name="format">A <see cref="T:System.Drawing.StringFormat" />
    ///  that specifies text formatting information, such as line spacing and alignment. </param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; origin: DNPoint; format: DNStringFormat); overload;
    ///<summary>Adds a text string to this path.</summary>
    ///  <param name="s">The <see cref="T:System.String" />
    ///  to add. </param>
    ///  <param name="family">A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents the name of the font with which the test is drawn. </param>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section). </param>
    ///  <param name="emSize">The height of the em square box that bounds the character. </param>
    ///  <param name="layoutRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the text. </param>
    ///  <param name="format">A <see cref="T:System.Drawing.StringFormat" />
    ///  that specifies text formatting information, such as line spacing and alignment. </param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>Adds a text string to this path.</summary>
    ///  <param name="s">The <see cref="T:System.String" />
    ///  to add. </param>
    ///  <param name="family">A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents the name of the font with which the test is drawn. </param>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration that represents style information about the text (bold, italic, and so on). This must be cast as an integer (see the example code later in this section). </param>
    ///  <param name="emSize">The height of the em square box that bounds the character. </param>
    ///  <param name="layoutRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the text. </param>
    ///  <param name="format">A <see cref="T:System.Drawing.StringFormat" />
    ///  that specifies text formatting information, such as line spacing and alignment. </param>
    procedure AddString(s: string; family: DNFontFamily; style: Int32; emSize: Single; layoutRect: DNRectangle; format: DNStringFormat); overload;
    ///<summary>Applies a transform matrix to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents the transformation to apply. </param>
    procedure Transform(matrix: DNMatrix);
    ///<summary>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</returns>
    function GetBounds: DNRectangleF; overload;
    ///<summary>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when this path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle. </param>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</returns>
    function GetBounds(matrix: DNMatrix): DNRectangleF; overload;
    ///<summary>Returns a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  when the current path is transformed by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  and drawn with the specified <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a transformation to be applied to this path before the bounding rectangle is calculated. This path is not permanently transformed; the transformation is used only during the process of calculating the bounding rectangle. </param>
    ///  <param name="pen">The <see cref="T:System.Drawing.Pen" />
    ///  with which to draw the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents a rectangle that bounds this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</returns>
    function GetBounds(matrix: DNMatrix; pen: DNPen): DNRectangleF; overload;
    ///<summary>Converts each curve in this path into a sequence of connected line segments.</summary>
    procedure Flatten; overload;
    ///<summary>Applies the specified transform and then converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  into a sequence of connected line segments.</summary>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  before flattening. </param>
    procedure Flatten(matrix: DNMatrix); overload;
    ///<summary>Converts each curve in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  into a sequence of connected line segments.</summary>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to transform this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  before flattening. </param>
    ///  <param name="flatness">Specifies the maximum permitted error between the curve and its flattened approximation. A value of 0.25 is the default. Reducing the flatness value will increase the number of line segments in the approximation. </param>
    procedure Flatten(matrix: DNMatrix; flatness: Single); overload;
    ///<summary>Adds an additional outline to the path.</summary>
    ///  <param name="pen">A <see cref="T:System.Drawing.Pen" />
    ///  that specifies the width between the original outline of the path and the new outline this method creates. </param>
    procedure Widen(pen: DNPen); overload;
    ///<summary>Adds an additional outline to the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pen">A <see cref="T:System.Drawing.Pen" />
    ///  that specifies the width between the original outline of the path and the new outline this method creates. </param>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a transform to apply to the path before widening. </param>
    procedure Widen(pen: DNPen; matrix: DNMatrix); overload;
    ///<summary>Replaces this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  with curves that enclose the area that is filled when this path is drawn by the specified pen.</summary>
    ///  <param name="pen">A <see cref="T:System.Drawing.Pen" />
    ///  that specifies the width between the original outline of the path and the new outline this method creates. </param>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a transform to apply to the path before widening. </param>
    ///  <param name="flatness">A value that specifies the flatness for curves. </param>
    procedure Widen(pen: DNPen; matrix: DNMatrix; flatness: Single); overload;
    ///<summary>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="destPoints">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect" />
    ///  is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points. </param>
    ///  <param name="srcRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints" />
    ///  . </param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF); overload;
    ///<summary>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="destPoints">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect" />
    ///  is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points. </param>
    ///  <param name="srcRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints" />
    ///  . </param>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a geometric transform to apply to the path. </param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix); overload;
    ///<summary>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="destPoints">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that defines a parallelogram to which the rectangle defined by <paramref name="srcRect" />
    ///  is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points. </param>
    ///  <param name="srcRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints" />
    ///  . </param>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a geometric transform to apply to the path. </param>
    ///  <param name="warpMode">A <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  enumeration that specifies whether this warp operation uses perspective or bilinear mode. </param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode); overload;
    ///<summary>Applies a warp transform, defined by a rectangle and a parallelogram, to this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="destPoints">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram to which the rectangle defined by <paramref name="srcRect" />
    ///  is transformed. The array can contain either three or four elements. If the array contains three elements, the lower-right corner of the parallelogram is implied by the first three points. </param>
    ///  <param name="srcRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that is transformed to the parallelogram defined by <paramref name="destPoints" />
    ///  . </param>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that specifies a geometric transform to apply to the path. </param>
    ///  <param name="warpMode">A <see cref="T:System.Drawing.Drawing2D.WarpMode" />
    ///  enumeration that specifies whether this warp operation uses perspective or bilinear mode. </param>
    ///  <param name="flatness">A value from 0 through 1 that specifies how flat the resulting path is. For more information, see the <see cref="M:System.Drawing.Drawing2D.GraphicsPath.Flatten" />
    ///  methods. </param>
    procedure Warp(destPoints: TArray<DNPointF>; srcRect: DNRectangleF; matrix: DNMatrix; warpMode: DNWarpMode; flatness: Single); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  are filled.</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that specifies how the interiors of shapes in this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  are filled.</returns>
    property FillMode: DNFillMode read get_FillMode write set_FillMode;
    ///<summary>Gets a <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  that encapsulates arrays of points (<paramref name="points" />
    ///  ) and types (<paramref name="types" />
    ///  ) for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.PathData" />
    ///  that encapsulates arrays for both the points and types for this <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</returns>
    property PathData: DNPathData read get_PathData;
    ///<summary>Gets the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  array.</summary>
    ///<returns>An integer that specifies the number of elements in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  or the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />
    ///  array.</returns>
    property PointCount: Int32 read get_PointCount;
    ///<summary>Gets the types of the corresponding points in the <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />
    ///  array.</summary>
    ///<returns>An array of bytes that specifies the types of the corresponding points in the path.</returns>
    property PathTypes: TArray<Byte> read get_PathTypes;
    ///<summary>Gets the points in the path.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.PointF" />
    ///  objects that represent the path.</returns>
    property PathPoints: TArray<DNPointF> read get_PathPoints;
  end;

  TDNGraphicsPath = class(TDNGenericImport<DNGraphicsPathClass, DNGraphicsPath>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsPathIteratorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{66A5F06A-337C-5F68-A324-5E71717B8321}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  class with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object.</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object for which this helper class is to be initialized. </param>
    {class} function init(path: DNGraphicsPath): DNGraphicsPathIterator;

  end;

  ///<summary>Provides the ability to iterate through subpaths in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
  ///  and test the types of shapes contained in each subpath. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsPathIterator')]
  DNGraphicsPathIterator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{55968918-F8EA-33EB-97AA-66016B21FB1A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SubpathCount: Int32;

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  object.</summary>
    procedure Dispose;
    function NextSubpath(out startIndex: Int32; out endIndex: Int32; out isClosed: Boolean): Int32; overload;
    function NextSubpath(path: DNGraphicsPath; out isClosed: Boolean): Int32; overload;
    function NextPathType(out pathType: Byte; out startIndex: Int32; out endIndex: Int32): Int32;
    function NextMarker(out startIndex: Int32; out endIndex: Int32): Int32; overload;
    ///<summary>This <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  object has a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object associated with it. The <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  method increments the associated <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to the next marker in its path and copies all the points contained between the current marker and the next marker (or end of path) to a second <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object passed in to the parameter.</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  object to which the points will be copied. </param>
    ///<returns>The number of points between this marker and the next.</returns>
    function NextMarker(path: DNGraphicsPath): Int32; overload;
    ///<summary>Indicates whether the path associated with this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  contains a curve.</summary>
    ///<returns>This method returns <see langword="true" />
    ///  if the current subpath contains a curve; otherwise, <see langword="false" />
    ///  .</returns>
    function HasCurve: Boolean;
    ///<summary>Rewinds this <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
    ///  to the beginning of its associated path.</summary>
    procedure Rewind;
    function Enumerate(out points: TArray<DNPointF>; out types: TArray<Byte>): Int32;
    function CopyData(out points: TArray<DNPointF>; out types: TArray<Byte>; startIndex: Int32; endIndex: Int32): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of points in the path.</summary>
    ///<returns>The number of points in the path.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets the number of subpaths in the path.</summary>
    ///<returns>The number of subpaths in the path.</returns>
    property SubpathCount: Int32 read get_SubpathCount;
  end;

  TDNGraphicsPathIterator = class(TDNGenericImport<DNGraphicsPathIteratorClass, DNGraphicsPathIterator>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNGraphicsStateClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E333BB85-84A5-5579-B326-3FCA6BB060EC}']
  end;

  ///<summary>Represents the state of a <see cref="T:System.Drawing.Graphics" />
  ///  object. This object is returned by a call to the <see cref="M:System.Drawing.Graphics.Save" />
  ///  methods. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.GraphicsState')]
  DNGraphicsState = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8A98BC4E-E202-3891-AF68-E1F545AC82CE}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGraphicsState = class(TDNGenericImport<DNGraphicsStateClass, DNGraphicsState>) end;

  //-------------namespace: System.Drawing.Drawing2D----------------
  DNMatrixClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F48E5EE0-BFA5-5ED3-A983-09F1FEE84FB5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  class as the identity matrix.</summary>
    {class} function init: DNMatrix; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  class with the specified elements.</summary>
    ///  <param name="m11">The value in the first row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="m12">The value in the first row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="m21">The value in the second row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="m22">The value in the second row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="dx">The value in the third row and first column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="dy">The value in the third row and second column of the new <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    {class} function init(m11: Single; m12: Single; m21: Single; m22: Single; dx: Single; dy: Single): DNMatrix; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  class to the geometric transform defined by the specified rectangle and array of points.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle to be transformed. </param>
    ///  <param name="plgpts">An array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners. </param>
    {class} function init(rect: DNRectangleF; plgpts: TArray<DNPointF>): DNMatrix; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  class to the geometric transform defined by the specified rectangle and array of points.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle to be transformed. </param>
    ///  <param name="plgpts">An array of three <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points of a parallelogram to which the upper-left, upper-right, and lower-left corners of the rectangle is to be transformed. The lower-right corner of the parallelogram is implied by the first three corners. </param>
    {class} function init(rect: DNRectangle; plgpts: TArray<DNPoint>): DNMatrix; overload;

  end;

  ///<summary>Encapsulates a 3-by-3 affine matrix that represents a geometric transform. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Drawing2D.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8DE19850-6042-39C0-AA35-BE31D935886B}']
  { getters & setters } 

    function get_Elements: TArray<Single>;
    function get_OffsetX: Single;
    function get_OffsetY: Single;
    function get_IsInvertible: Boolean;
    function get_IsIdentity: Boolean;

  { methods } 

    ///<summary>Resets this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  to have the elements of the identity matrix.</summary>
    procedure Reset;
    ///<summary>Applies the geometric transform represented by this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  to a specified array of points.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represents the points to transform. </param>
    procedure TransformPoints(pts: TArray<DNPointF>); overload;
    ///<summary>Applies the geometric transform represented by this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  to a specified array of points.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points to transform. </param>
    procedure TransformPoints(pts: TArray<DNPoint>); overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Tests whether the specified object is a <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  and is identical to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="obj">The object to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="obj" />
    ///  is the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  identical to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code.</summary>
    ///<returns>The hash code for this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that this method creates.</returns>
    function Clone: DNMatrix;
    ///<summary>Multiplies this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by the matrix specified in the <paramref name="matrix" />
    ///  parameter, by prepending the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is to be multiplied. </param>
    procedure Multiply(matrix: DNMatrix); overload;
    ///<summary>Multiplies this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by the matrix specified in the <paramref name="matrix" />
    ///  parameter, and in the order specified in the <paramref name="order" />
    ///  parameter.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is to be multiplied. </param>
    ///  <param name="order">The <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that represents the order of the multiplication. </param>
    procedure Multiply(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified translation vector (<paramref name="offsetX" />
    ///  and <paramref name="offsetY" />
    ///  ) to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by prepending the translation vector.</summary>
    ///  <param name="offsetX">The x value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="offsetY">The y value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    procedure Translate(offsetX: Single; offsetY: Single); overload;
    ///<summary>Applies the specified translation vector to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="offsetX">The x value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="offsetY">The y value by which to translate this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies the order (append or prepend) in which the translation is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    procedure Translate(offsetX: Single; offsetY: Single; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified scale vector to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by prepending the scale vector.</summary>
    ///  <param name="scaleX">The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the x-axis direction. </param>
    ///  <param name="scaleY">The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the y-axis direction. </param>
    procedure Scale(scaleX: Single; scaleY: Single); overload;
    ///<summary>Applies the specified scale vector (<paramref name="scaleX" />
    ///  and <paramref name="scaleY" />
    ///  ) to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  using the specified order.</summary>
    ///  <param name="scaleX">The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the x-axis direction. </param>
    ///  <param name="scaleY">The value by which to scale this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the y-axis direction. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies the order (append or prepend) in which the scale vector is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    procedure Scale(scaleX: Single; scaleY: Single; order: DNMatrixOrder); overload;
    ///<summary>Prepend to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  a clockwise rotation, around the origin and by the specified angle.</summary>
    ///  <param name="angle">The angle of the rotation, in degrees. </param>
    procedure Rotate(angle: Single); overload;
    ///<summary>Applies a clockwise rotation of an amount specified in the <paramref name="angle" />
    ///  parameter, around the origin (zero x and y coordinates) for this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="angle">The angle (extent) of the rotation, in degrees. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies the order (append or prepend) in which the rotation is applied to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  . </param>
    procedure Rotate(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>Applies a clockwise rotation to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  around the point specified in the <paramref name="point" />
    ///  parameter, and by prepending the rotation.</summary>
    ///  <param name="angle">The angle (extent) of the rotation, in degrees. </param>
    ///  <param name="point">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the center of the rotation. </param>
    procedure RotateAt(angle: Single; point: DNPointF); overload;
    ///<summary>Applies a clockwise rotation about the specified point to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="angle">The angle of the rotation, in degrees. </param>
    ///  <param name="point">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the center of the rotation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies the order (append or prepend) in which the rotation is applied. </param>
    procedure RotateAt(angle: Single; point: DNPointF; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified shear vector to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by prepending the shear transformation.</summary>
    ///  <param name="shearX">The horizontal shear factor. </param>
    ///  <param name="shearY">The vertical shear factor. </param>
    procedure Shear(shearX: Single; shearY: Single); overload;
    ///<summary>Applies the specified shear vector to this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="shearX">The horizontal shear factor. </param>
    ///  <param name="shearY">The vertical shear factor. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies the order (append or prepend) in which the shear is applied. </param>
    procedure Shear(shearX: Single; shearY: Single; order: DNMatrixOrder); overload;
    ///<summary>Inverts this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  , if it is invertible.</summary>
    procedure Invert;
    ///<summary>Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points to transform. </param>
    procedure TransformVectors(pts: TArray<DNPointF>); overload;
    ///<summary>Multiplies each vector in an array by the matrix. The translation elements of this matrix (third row) are ignored.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points to transform.</param>
    procedure VectorTransformPoints(pts: TArray<DNPoint>);
    ///<summary>Applies only the scale and rotate components of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  to the specified array of points.</summary>
    ///  <param name="pts">An array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points to transform. </param>
    procedure TransformVectors(pts: TArray<DNPoint>); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an array of floating-point values that represents the elements of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///<returns>An array of floating-point values that represents the elements of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</returns>
    property Elements: TArray<Single> read get_Elements;
    ///<summary>Gets the x translation value (the dx value, or the element in the third row and first column) of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///<returns>The x translation value of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</returns>
    property OffsetX: Single read get_OffsetX;
    ///<summary>Gets the y translation value (the dy value, or the element in the third row and second column) of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///<returns>The y translation value of this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</returns>
    property OffsetY: Single read get_OffsetY;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is invertible.</summary>
    ///<returns>This property is <see langword="true" />
    ///  if this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is invertible; otherwise, <see langword="false" />
    ///  .</returns>
    property IsInvertible: Boolean read get_IsInvertible;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is the identity matrix.</summary>
    ///<returns>This property is <see langword="true" />
    ///  if this <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  is identity; otherwise, <see langword="false" />
    ///  .</returns>
    property IsIdentity: Boolean read get_IsIdentity;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Drawing----------------
  DNFontClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F89AC109-B6DF-5073-9E9F-EBB7614B5634}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  that uses the specified existing <see cref="T:System.Drawing.Font" />
    ///  and <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration.</summary>
    ///  <param name="prototype">The existing <see cref="T:System.Drawing.Font" />
    ///  from which to create the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="newStyle">The <see cref="T:System.Drawing.FontStyle" />
    ///  to apply to the new <see cref="T:System.Drawing.Font" />
    ///  . Multiple values of the <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration can be combined with the <see langword="OR" />
    ///  operator. </param>
    {class} function init(prototype: DNFont; newStyle: DNFontStyle): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size, style, and unit.</summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size, style, unit, and character set.</summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///  <param name="gdiCharSet">A <see cref="T:System.Byte" />
    ///  that specifies a
    ///  GDI character set to use for the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size, style, unit, and character set.</summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///  <param name="gdiCharSet">A <see cref="T:System.Byte" />
    ///  that specifies a
    ///  GDI character set to use for this font. </param>
    ///  <param name="gdiVerticalFont">A Boolean value indicating whether the new font is derived from a GDI vertical font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  is <see langword="null " />
    ///</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size, style, unit, and character set.</summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///  <param name="gdiCharSet">A <see cref="T:System.Byte" />
    ///  that specifies a GDI character set to use for this font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using the specified size, style, unit, and character set.</summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///  <param name="gdiCharSet">A <see cref="T:System.Byte" />
    ///  that specifies a GDI character set to use for this font. </param>
    ///  <param name="gdiVerticalFont">A Boolean value indicating whether the new <see cref="T:System.Drawing.Font" />
    ///  is derived from a GDI vertical font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit; gdiCharSet: Byte; gdiVerticalFont: Boolean): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size and style. </summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size, in points, of the new font. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception><exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(family: DNFontFamily; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size and unit. Sets the style to <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  .</summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="family" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(family: DNFontFamily; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size. </summary>
    ///  <param name="family">The <see cref="T:System.Drawing.FontFamily" />
    ///  of the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size, in points, of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(family: DNFontFamily; emSize: Single): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size, style, and unit.</summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size and style. </summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size, in points, of the new font. </param>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single; style: DNFontStyle): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size and unit. The style is set to <see cref="F:System.Drawing.FontStyle.Regular" />
    ///  .</summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size of the new font in the units specified by the <paramref name="unit" />
    ///  parameter. </param>
    ///  <param name="unit">The <see cref="T:System.Drawing.GraphicsUnit" />
    ///  of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity, or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single; &unit: DNGraphicsUnit): DNFont; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Font" />
    ///  using a specified size. </summary>
    ///  <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" />
    ///  for the new <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="emSize">The em-size, in points, of the new font. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="emSize" />
    ///  is less than or equal to 0, evaluates to infinity or is not a valid number. </exception>
    {class} function init(familyName: string; emSize: Single): DNFont; overload;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Font" />
    ///  from the specified Windows handle.</summary>
    ///  <param name="hfont">A Windows handle to a GDI font. </param>
    ///<returns>The <see cref="T:System.Drawing.Font" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="hfont" />
    ///  points to an object that is not a TrueType font.</exception>
    {class} function FromHfont(hfont: IntPtr): DNFont;
    ///<summary>Creates a <see cref="T:System.Drawing.Font" />
    ///  from the specified GDI logical font (LOGFONT) structure.</summary>
    ///  <param name="lf">An <see cref="T:System.Object" />
    ///  that represents the GDIÂ <see langword="LOGFONT" />
    ///  structure from which to create the <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///  <param name="hdc">A handle to a device context that contains additional information about the <paramref name="lf" />
    ///  structure. </param>
    ///<returns>The <see cref="T:System.Drawing.Font" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The font is not a TrueType font.</exception>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject; hdc: IntPtr): DNFont; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Font" />
    ///  from the specified GDI logical font (LOGFONT) structure.</summary>
    ///  <param name="lf">An <see cref="T:System.Object" />
    ///  that represents the GDIÂ <see langword="LOGFONT" />
    ///  structure from which to create the <see cref="T:System.Drawing.Font" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Font" />
    ///  that this method creates.</returns>
    {class} function FromLogFont(lf: DDN.mscorlib.DNObject): DNFont; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Font" />
    ///  from the specified Windows handle to a device context.</summary>
    ///  <param name="hdc">A handle to a device context. </param>
    ///<returns>The <see cref="T:System.Drawing.Font" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The font for the specified device context is not a TrueType font.</exception>
    {class} function FromHdc(hdc: IntPtr): DNFont;

  end;

  ///<summary>Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Font')]
  DNFont = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{091B628B-3473-38BF-9A98-4F9DB4FB61F8}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Bold: Boolean;
    function get_GdiCharSet: Byte;
    function get_GdiVerticalFont: Boolean;
    function get_Italic: Boolean;
    function get_Name: string;
    function get_OriginalFontName: string;
    function get_Strikeout: Boolean;
    function get_Underline: Boolean;
    function get_Style: DNFontStyle;
    function get_Size: Single;
    function get_SizeInPoints: Single;
    function get_Unit: DNGraphicsUnit;
    function get_Height: Int32;
    function get_IsSystemFont: Boolean;
    function get_SystemFontName: string;

  { methods } 

    ///<summary>Creates a GDI logical font (LOGFONT) structure from this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///  <param name="logFont">An <see cref="T:System.Object" />
    ///  to represent the <see langword="LOGFONT" />
    ///  structure that this method creates. </param>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject); overload;
    ///<summary>Creates a GDI logical font (LOGFONT) structure from this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///  <param name="logFont">An <see cref="T:System.Object" />
    ///  to represent the <see langword="LOGFONT" />
    ///  structure that this method creates. </param>
    ///  <param name="graphics">A <see cref="T:System.Drawing.Graphics" />
    ///  that provides additional information for the <see langword="LOGFONT" />
    ///  structure. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure ToLogFont(logFont: DDN.mscorlib.DNObject; graphics: DNGraphics); overload;
    ///<summary>Returns a handle to this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>A Windows handle to this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The operation was unsuccessful.</exception>
    function ToHfont: IntPtr;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Font" />
    ///  this method creates, cast as an <see cref="T:System.Object" />
    ///  .</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Gets the hash code for this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>The hash code for this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Indicates whether the specified object is a <see cref="T:System.Drawing.Font" />
    ///  and has the same <see cref="P:System.Drawing.Font.FontFamily" />
    ///  , <see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  , <see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  , <see cref="P:System.Drawing.Font.Style" />
    ///  , <see cref="P:System.Drawing.Font.Size" />
    ///  , and <see cref="P:System.Drawing.Font.Unit" />
    ///  property values as this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///  <param name="obj">The object to test. </param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="obj" />
    ///  parameter is a <see cref="T:System.Drawing.Font" />
    ///  and has the same <see cref="P:System.Drawing.Font.FontFamily" />
    ///  , <see cref="P:System.Drawing.Font.GdiVerticalFont" />
    ///  , <see cref="P:System.Drawing.Font.GdiCharSet" />
    ///  , <see cref="P:System.Drawing.Font.Style" />
    ///  , <see cref="P:System.Drawing.Font.Size" />
    ///  , and <see cref="P:System.Drawing.Font.Unit" />
    ///  property values as this <see cref="T:System.Drawing.Font" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a human-readable string representation of this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Returns the line spacing, in the current unit of a specified <see cref="T:System.Drawing.Graphics" />
    ///  , of this font. </summary>
    ///  <param name="graphics">A <see cref="T:System.Drawing.Graphics" />
    ///  that holds the vertical resolution, in dots per inch, of the display device as well as settings for page unit and page scale. </param>
    ///<returns>The line spacing, in pixels, of this font.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetHeight(graphics: DNGraphics): Single; overload;
    ///<summary>Returns the line spacing, in pixels, of this font. </summary>
    ///<returns>The line spacing, in pixels, of this font.</returns>
    function GetHeight: Single; overload;
    ///<summary>Returns the height, in pixels, of this <see cref="T:System.Drawing.Font" />
    ///  when drawn to a device with the specified vertical resolution.</summary>
    ///  <param name="dpi">The vertical resolution, in dots per inch, used to calculate the height of the font. </param>
    ///<returns>The height, in pixels, of this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    function GetHeight(dpi: Single): Single; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Drawing.FontFamily" />
    ///  associated with this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.FontFamily" />
    ///  associated with this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property FontFamily: DNFontFamily read get_FontFamily;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" />
    ///  is bold.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Font" />
    ///  is bold; otherwise, <see langword="false" />
    ///  .</returns>
    property Bold: Boolean read get_Bold;
    ///<summary>Gets a byte value that specifies the GDI character set that this <see cref="T:System.Drawing.Font" />
    ///  uses.</summary>
    ///<returns>A byte value that specifies the GDI character set that this <see cref="T:System.Drawing.Font" />
    ///  uses. The default is 1.</returns>
    property GdiCharSet: Byte read get_GdiCharSet;
    ///<summary>Gets a Boolean value that indicates whether this <see cref="T:System.Drawing.Font" />
    ///  is derived from a GDI vertical font.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Font" />
    ///  is derived from a GDI vertical font; otherwise, <see langword="false" />
    ///  .</returns>
    property GdiVerticalFont: Boolean read get_GdiVerticalFont;
    ///<summary>Gets a value that indicates whether this font has the italic style applied.</summary>
    ///<returns><see langword="true" />
    ///  to indicate this font has the italic style applied; otherwise, <see langword="false" />
    ///  .</returns>
    property Italic: Boolean read get_Italic;
    ///<summary>Gets the face name of this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>A string representation of the face name of this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets the name of the font originally specified.</summary>
    ///<returns>The string representing the name of the font originally specified.</returns>
    property OriginalFontName: string read get_OriginalFontName;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" />
    ///  specifies a horizontal line through the font.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Font" />
    ///  has a horizontal line through it; otherwise, <see langword="false" />
    ///  .</returns>
    property Strikeout: Boolean read get_Strikeout;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Font" />
    ///  is underlined.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Font" />
    ///  is underlined; otherwise, <see langword="false" />
    ///  .</returns>
    property Underline: Boolean read get_Underline;
    ///<summary>Gets style information for this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration that contains style information for this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property Style: DNFontStyle read get_Style;
    ///<summary>Gets the em-size of this <see cref="T:System.Drawing.Font" />
    ///  measured in the units specified by the <see cref="P:System.Drawing.Font.Unit" />
    ///  property.</summary>
    ///<returns>The em-size of this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property Size: Single read get_Size;
    ///<summary>Gets the em-size, in points, of this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>The em-size, in points, of this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property SizeInPoints: Single read get_SizeInPoints;
    ///<summary>Gets the unit of measure for this <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.GraphicsUnit" />
    ///  that represents the unit of measure for this <see cref="T:System.Drawing.Font" />
    ///  .</returns>
    property &Unit: DNGraphicsUnit read get_Unit;
    ///<summary>Gets the line spacing of this font.</summary>
    ///<returns>The line spacing, in pixels, of this font. </returns>
    property Height: Int32 read get_Height;
    ///<summary>Gets a value indicating whether the font is a member of <see cref="T:System.Drawing.SystemFonts" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if the font is a member of <see cref="T:System.Drawing.SystemFonts" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsSystemFont: Boolean read get_IsSystemFont;
    ///<summary>Gets the name of the system font if the <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  property returns <see langword="true" />
    ///  .</summary>
    ///<returns>The name of the system font, if <see cref="P:System.Drawing.Font.IsSystemFont" />
    ///  returns <see langword="true" />
    ///  ; otherwise, an empty string ("").</returns>
    property SystemFontName: string read get_SystemFontName;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: System.Drawing----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8ACB9960-8FA2-5EB0-98A5-806C8FF6BA78}']
  { static getter & setter } 

    {class} function get_Families: TArray<DNFontFamily>;
    {class} function get_GenericSansSerif: DNFontFamily;
    {class} function get_GenericSerif: DNFontFamily;
    {class} function get_GenericMonospace: DNFontFamily;

  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.FontFamily" />
    ///  with the specified name.</summary>
    ///  <param name="name">The name of the new <see cref="T:System.Drawing.FontFamily" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  is an empty string ("").-or-
    ///  <paramref name="name" />
    ///  specifies a font that is not installed on the computer running the application.-or-
    ///  <paramref name="name" />
    ///  specifies a font that is not a TrueType font.</exception>
    {class} function init(name: string): DNFontFamily; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.FontFamily" />
    ///  in the specified <see cref="T:System.Drawing.Text.FontCollection" />
    ///  with the specified name.</summary>
    ///  <param name="name">A <see cref="T:System.String" />
    ///  that represents the name of the new <see cref="T:System.Drawing.FontFamily" />
    ///  . </param>
    ///  <param name="fontCollection">The <see cref="T:System.Drawing.Text.FontCollection" />
    ///  that contains this <see cref="T:System.Drawing.FontFamily" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  is an empty string ("").-or-
    ///  <paramref name="name" />
    ///  specifies a font that is not installed on the computer running the application.-or-
    ///  <paramref name="name" />
    ///  specifies a font that is not a TrueType font.</exception>
    {class} function init(name: string; fontCollection: DNFontCollection): DNFontFamily; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.FontFamily" />
    ///  from the specified generic font family.</summary>
    ///  <param name="genericFamily">The <see cref="T:System.Drawing.Text.GenericFontFamilies" />
    ///  from which to create the new <see cref="T:System.Drawing.FontFamily" />
    ///  . </param>
    {class} function init(genericFamily: DNGenericFontFamilies): DNFontFamily; overload;

  { static methods } 

    ///<summary>Returns an array that contains all the <see cref="T:System.Drawing.FontFamily" />
    ///  objects available for the specified graphics context.</summary>
    ///  <param name="graphics">The <see cref="T:System.Drawing.Graphics" />
    ///  object from which to return <see cref="T:System.Drawing.FontFamily" />
    ///  objects. </param>
    ///<returns>An array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects available for the specified <see cref="T:System.Drawing.Graphics" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="graphics " />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetFamilies(graphics: DNGraphics): TArray<DNFontFamily>;

  { static propertys } 

    ///<summary>Returns an array that contains all the <see cref="T:System.Drawing.FontFamily" />
    ///  objects associated with the current graphics context.</summary>
    ///<returns>An array of <see cref="T:System.Drawing.FontFamily" />
    ///  objects associated with the current graphics context.</returns>
    {class} property Families: TArray<DNFontFamily> read get_Families;
    ///<summary>Gets a generic sans serif <see cref="T:System.Drawing.FontFamily" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.FontFamily" />
    ///  object that represents a generic sans serif font.</returns>
    {class} property GenericSansSerif: DNFontFamily read get_GenericSansSerif;
    ///<summary>Gets a generic serif <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents a generic serif font.</returns>
    {class} property GenericSerif: DNFontFamily read get_GenericSerif;
    ///<summary>Gets a generic monospace <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.FontFamily" />
    ///  that represents a generic monospace font.</returns>
    {class} property GenericMonospace: DNFontFamily read get_GenericMonospace;
  end;

  ///<summary>Defines a group of type faces having a similar basic design and certain variations in styles. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{FE31F082-2955-34AC-8BA8-9BC7BF319D78}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>Indicates whether the specified <see cref="T:System.Drawing.FontStyle" />
    ///  enumeration is available.</summary>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  to test. </param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Drawing.FontStyle" />
    ///  is available; otherwise, <see langword="false" />
    ///  .</returns>
    function IsStyleAvailable(style: DNFontStyle): Boolean;
    ///<summary>Gets the height, in font design units, of the em square for the specified style.</summary>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  for which to get the em height. </param>
    ///<returns>The height of the em square.</returns>
    function GetEmHeight(style: DNFontStyle): Int32;
    ///<summary>Returns the line spacing, in design units, of the <see cref="T:System.Drawing.FontFamily" />
    ///  of the specified style. The line spacing is the vertical distance between the base lines of two consecutive lines of text. </summary>
    ///  <param name="style">The <see cref="T:System.Drawing.FontStyle" />
    ///  to apply. </param>
    ///<returns>The distance between two consecutive lines of text.</returns>
    function GetLineSpacing(style: DNFontStyle): Int32;
    ///<summary>Indicates whether the specified object is a <see cref="T:System.Drawing.FontFamily" />
    ///  and is identical to this <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///  <param name="obj">The object to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.FontFamily" />
    ///  and is identical to this <see cref="T:System.Drawing.FontFamily" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///<returns>The hash code for this <see cref="T:System.Drawing.FontFamily" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Converts this <see cref="T:System.Drawing.FontFamily" />
    ///  to a human-readable string representation.</summary>
    ///<returns>The string that represents this <see cref="T:System.Drawing.FontFamily" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Returns the name, in the specified language, of this <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///  <param name="language">The language in which the name is returned. </param>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name, in the specified language, of this <see cref="T:System.Drawing.FontFamily" />
    ///  . </returns>
    function GetName(language: Int32): string;
    ///<summary>Returns the cell ascent, in design units, of the <see cref="T:System.Drawing.FontFamily" />
    ///  of the specified style.</summary>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  that contains style information for the font. </param>
    ///<returns>The cell ascent for this <see cref="T:System.Drawing.FontFamily" />
    ///  that uses the specified <see cref="T:System.Drawing.FontStyle" />
    ///  .</returns>
    function GetCellAscent(style: DNFontStyle): Int32;
    ///<summary>Returns the cell descent, in design units, of the <see cref="T:System.Drawing.FontFamily" />
    ///  of the specified style. </summary>
    ///  <param name="style">A <see cref="T:System.Drawing.FontStyle" />
    ///  that contains style information for the font. </param>
    ///<returns>The cell descent metric for this <see cref="T:System.Drawing.FontFamily" />
    ///  that uses the specified <see cref="T:System.Drawing.FontStyle" />
    ///  .</returns>
    function GetCellDescent(style: DNFontStyle): Int32;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of this <see cref="T:System.Drawing.FontFamily" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the name of this <see cref="T:System.Drawing.FontFamily" />
    ///  .</returns>
    property Name: string read get_Name;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Drawing----------------
  DNGraphicsClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8B64F2D6-2CA6-5EB8-AAD8-B244F4CE7A55}']
  { static methods } 

    ///<summary>Creates a new <see cref="T:System.Drawing.Graphics" />
    ///  from the specified handle to a device context.</summary>
    ///  <param name="hdc">Handle to a device context. </param>
    ///<returns>This method returns a new <see cref="T:System.Drawing.Graphics" />
    ///  for the specified device context.</returns>
    {class} function FromHdc(hdc: IntPtr): DNGraphics; overload;
    ///<summary>Returns a <see cref="T:System.Drawing.Graphics" />
    ///  for the specified device context.</summary>
    ///  <param name="hdc">Handle to a device context. </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  for the specified device context.</returns>
    {class} function FromHdcInternal(hdc: IntPtr): DNGraphics;
    ///<summary>Creates a new <see cref="T:System.Drawing.Graphics" />
    ///  for the specified windows handle.</summary>
    ///  <param name="hwnd">Handle to a window. </param>
    ///<returns>A <see cref="T:System.Drawing.Graphics" />
    ///  for the specified window handle.</returns>
    {class} function FromHwndInternal(hwnd: IntPtr): DNGraphics;
    ///<summary>Creates a new <see cref="T:System.Drawing.Graphics" />
    ///  from the specified <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  from which to create the new <see cref="T:System.Drawing.Graphics" />
    ///  . </param>
    ///<returns>This method returns a new <see cref="T:System.Drawing.Graphics" />
    ///  for the specified <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Exception"><paramref name="image" />
    ///  has an indexed pixel format or its format is undefined.</exception>
    {class} function FromImage(image: DNImage): DNGraphics;
    ///<summary>Gets a handle to the current Windows halftone palette.</summary>
    ///<returns>Internal pointer that specifies the handle to the palette.</returns>
    {class} function GetHalftonePalette: IntPtr;
    ///<summary>Creates a new <see cref="T:System.Drawing.Graphics" />
    ///  from the specified handle to a device context and handle to a device.</summary>
    ///  <param name="hdc">Handle to a device context. </param>
    ///  <param name="hdevice">Handle to a device. </param>
    ///<returns>This method returns a new <see cref="T:System.Drawing.Graphics" />
    ///  for the specified device context and device.</returns>
    {class} function FromHdc(hdc: IntPtr; hdevice: IntPtr): DNGraphics; overload;
    ///<summary>Creates a new <see cref="T:System.Drawing.Graphics" />
    ///  from the specified handle to a window.</summary>
    ///  <param name="hwnd">Handle to a window. </param>
    ///<returns>This method returns a new <see cref="T:System.Drawing.Graphics" />
    ///  for the specified window handle.</returns>
    {class} function FromHwnd(hwnd: IntPtr): DNGraphics;

  end;

  ///<summary>Encapsulates a GDI+ drawing surface. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Graphics')]
  DNGraphics = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{3EAFE9D3-C1B1-3755-AB28-DA7CAFBF37FC}']
  { getters & setters } 

    function get_CompositingMode: DNCompositingMode;
    procedure set_CompositingMode(value: DNCompositingMode);
    function get_RenderingOrigin: DNPoint;
    procedure set_RenderingOrigin(value: DNPoint);
    function get_CompositingQuality: DNCompositingQuality;
    procedure set_CompositingQuality(value: DNCompositingQuality);
    function get_TextRenderingHint: DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DNTextRenderingHint);
    function get_TextContrast: Int32;
    procedure set_TextContrast(value: Int32);
    function get_SmoothingMode: DNSmoothingMode;
    procedure set_SmoothingMode(value: DNSmoothingMode);
    function get_PixelOffsetMode: DNPixelOffsetMode;
    procedure set_PixelOffsetMode(value: DNPixelOffsetMode);
    function get_InterpolationMode: DNInterpolationMode;
    procedure set_InterpolationMode(value: DNInterpolationMode);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PageUnit: DNGraphicsUnit;
    procedure set_PageUnit(value: DNGraphicsUnit);
    function get_PageScale: Single;
    procedure set_PageScale(value: Single);
    function get_DpiX: Single;
    function get_DpiY: Single;
    function get_Clip: DNRegion;
    procedure set_Clip(value: DNRegion);
    function get_ClipBounds: DNRectangleF;
    function get_IsClipEmpty: Boolean;
    function get_VisibleClipBounds: DNRectangleF;
    function get_IsVisibleClipEmpty: Boolean;

  { methods } 

    ///<summary>Releases a device context handle obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  method of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="hdc">Handle to a device context obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  method of this <see cref="T:System.Drawing.Graphics" />
    ///  . </param>
    procedure ReleaseHdc(hdc: IntPtr); overload;
    ///<summary>Releases a handle to a device context.</summary>
    ///  <param name="hdc">Handle to a device context. </param>
    procedure ReleaseHdcInternal(hdc: IntPtr);
    ///<summary>Changes the origin of the coordinate system by prepending the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="dx">The x-coordinate of the translation. </param>
    ///  <param name="dy">The y-coordinate of the translation. </param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>Changes the origin of the coordinate system by applying the specified translation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  in the specified order.</summary>
    ///  <param name="dx">The x-coordinate of the translation. </param>
    ///  <param name="dy">The y-coordinate of the translation. </param>
    ///  <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies whether the translation is prepended or appended to the transformation matrix. </param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>Gets the nearest color to the specified <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  structure for which to find a match. </param>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the nearest color to the one specified with the <paramref name="color" />
    ///  parameter.</returns>
    function GetNearestColor(color: DNColor): DNColor;
    ///<summary>Draws a line connecting the two points specified by the coordinate pairs.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line. </param>
    ///  <param name="x1">The x-coordinate of the first point. </param>
    ///  <param name="y1">The y-coordinate of the first point. </param>
    ///  <param name="x2">The x-coordinate of the second point. </param>
    ///  <param name="y2">The y-coordinate of the second point. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLine(pen: DNPen; x1: Int32; y1: Int32; x2: Int32; y2: Int32); overload;
    ///<summary>Draws a rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="pen">A <see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the rectangle. </param>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawRectangle(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>Draws a rectangle specified by a coordinate pair, a width, and a height.</summary>
    ///  <param name="pen">A <see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the rectangle. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw. </param>
    ///  <param name="width">The width of the rectangle to draw. </param>
    ///  <param name="height">The height of the rectangle to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawRectangle(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Draws a rectangle specified by a coordinate pair, a width, and a height.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the rectangle. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw. </param>
    ///  <param name="width">Width of the rectangle to draw. </param>
    ///  <param name="height">Height of the rectangle to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawRectangle(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Draws an ellipse defined by a bounding <see cref="T:System.Drawing.RectangleF" />
    ///  .</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the ellipse. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that defines the boundaries of the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangleF); overload;
    ///<summary>Clears the entire drawing surface and fills it with the specified background color.</summary>
    ///  <param name="color"><see cref="T:System.Drawing.Color" />
    ///  structure that represents the background color of the drawing surface. </param>
    procedure Clear(color: DNColor);
    ///<summary>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to fill. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to fill. </param>
    ///  <param name="width">Width of the rectangle to fill. </param>
    ///  <param name="height">Height of the rectangle to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillRectangle(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to fill. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to fill. </param>
    ///  <param name="width">Width of the rectangle to fill. </param>
    ///  <param name="height">Height of the rectangle to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillRectangle(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rects">Array of <see cref="T:System.Drawing.Rectangle" />
    ///  structures that represent the rectangles to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="rects" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  is a zero-length array.</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangle>); overload;
    ///<summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represent the vertices of the polygon to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillEllipse(brush: DNBrush; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Fills the interior of a <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  that represents the area to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillRegion(brush: DNBrush; region: DNRegion);
    ///<summary>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects.</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn text. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single); overload;
    ///<summary>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects.</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location of the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF); overload;
    ///<summary>Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="layoutRectangle"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location of the drawn text. </param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; layoutRectangle: DNRectangleF; format: DNStringFormat); overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  and formatted with the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  defines the text format of the string. </param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  structure that specifies the maximum layout area for the text. </param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  that represents formatting information, such as line spacing, for the string. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified in the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter and the <paramref name="stringFormat" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified by the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont): DNSizeF; overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  and formatted with the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="width">Maximum width of the string. </param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  that represents formatting information, such as line spacing, for the string. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified in the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter and the <paramref name="stringFormat" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont; width: Int32; format: DNStringFormat): DNSizeF; overload;
    ///<summary>Draws the specified image, using its original physical size, at the location specified by a coordinate pair.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangle); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="width">Width of the drawn image. </param>
    ///  <param name="height">Height of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  method according to application-determined criteria. </param>
    ///  <param name="callbackData">Value specifying additional data for the <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate to use when checking whether to stop execution of the <see langword="DrawImage" />
    ///  method. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the new clip region. </param>
    procedure SetClip(rect: DNRectangle); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  to combine. </param>
    ///  <param name="combineMode">Member from the <see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  enumeration that specifies the combining operation to use. </param>
    procedure SetClip(region: DNRegion; combineMode: DNCombineMode); overload;
    ///<summary>Updates the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to exclude the area specified by a <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  that specifies the region to exclude from the clip region. </param>
    procedure ExcludeClip(region: DNRegion); overload;
    ///<summary>Translates the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  by specified amounts in the horizontal and vertical directions.</summary>
    ///  <param name="dx">The x-coordinate of the translation. </param>
    ///  <param name="dy">The y-coordinate of the translation. </param>
    procedure TranslateClip(dx: Int32; dy: Int32); overload;
    ///<summary>Gets the cumulative graphics context.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the cumulative graphics context.</returns>
    function GetContextInfo: DDN.mscorlib.DNObject;
    ///<summary>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the rectangle specified by the <paramref name="rect" />
    ///  parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>Saves the current state of this <see cref="T:System.Drawing.Graphics" />
    ///  and identifies the saved state with a <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  .</summary>
    ///<returns>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  that represents the saved state of this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    function Save: DNGraphicsState;
    ///<summary>Restores the state of this <see cref="T:System.Drawing.Graphics" />
    ///  to the state represented by a <see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  .</summary>
    ///  <param name="gstate"><see cref="T:System.Drawing.Drawing2D.GraphicsState" />
    ///  that represents the state to which to restore this <see cref="T:System.Drawing.Graphics" />
    ///  . </param>
    procedure Restore(gstate: DNGraphicsState);
    ///<summary>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" />
    ///  and opens and uses a new graphics container.</summary>
    ///<returns>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  that represents the state of this <see cref="T:System.Drawing.Graphics" />
    ///  at the time of the method call.</returns>
    function BeginContainer: DNGraphicsContainer; overload;
    ///<summary>Closes the current graphics container and restores the state of this <see cref="T:System.Drawing.Graphics" />
    ///  to the state saved by a call to the <see cref="M:System.Drawing.Graphics.BeginContainer" />
    ///  method.</summary>
    ///  <param name="container"><see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  that represents the container this method restores. </param>
    procedure EndContainer(container: DNGraphicsContainer);
    ///<summary>Gets the handle to the device context associated with this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>Handle to the device context associated with this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    function GetHdc: IntPtr;
    ///<summary>Releases a device context handle obtained by a previous call to the <see cref="M:System.Drawing.Graphics.GetHdc" />
    ///  method of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    procedure ReleaseHdc; overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Forces execution of all pending graphics operations and returns immediately without waiting for the operations to finish.</summary>
    procedure Flush; overload;
    ///<summary>Forces execution of all pending graphics operations with the method waiting or not waiting, as specified, to return before the operations finish.</summary>
    ///  <param name="intention">Member of the <see cref="T:System.Drawing.Drawing2D.FlushIntention" />
    ///  enumeration that specifies whether the method returns immediately or waits for any existing operations to finish. </param>
    procedure Flush(intention: DNFlushIntention); overload;
    ///<summary>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="upperLeftSource">The point at the upper-left corner of the source rectangle.</param>
    ///  <param name="upperLeftDestination">The point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="blockRegionSize">The size of the area to be transferred.</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The operation failed.</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize); overload;
    ///<summary>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="sourceX">The x-coordinate of the point at the upper-left corner of the source rectangle.</param>
    ///  <param name="sourceY">The y-coordinate of the point at the upper-left corner of the source rectangle.</param>
    ///  <param name="destinationX">The x-coordinate of the point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="destinationY">The y-coordinate of the point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="blockRegionSize">The size of the area to be transferred.</param>
    ///<exception cref="T:System.ComponentModel.Win32Exception">The operation failed.</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize); overload;
    ///<summary>Performs a bit-block transfer of color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="upperLeftSource">The point at the upper-left corner of the source rectangle.</param>
    ///  <param name="upperLeftDestination">The point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="blockRegionSize">The size of the area to be transferred.</param>
    ///  <param name="copyPixelOperation">One of the <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  values.</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  is not a member of <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  .</exception><exception cref="T:System.ComponentModel.Win32Exception">The operation failed.</exception>
    procedure CopyFromScreen(upperLeftSource: DNPoint; upperLeftDestination: DNPoint; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>Performs a bit-block transfer of the color data, corresponding to a rectangle of pixels, from the screen to the drawing surface of the <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="sourceX">The x-coordinate of the point at the upper-left corner of the source rectangle.</param>
    ///  <param name="sourceY">The y-coordinate of the point at the upper-left corner of the source rectangle</param>
    ///  <param name="destinationX">The x-coordinate of the point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="destinationY">The y-coordinate of the point at the upper-left corner of the destination rectangle.</param>
    ///  <param name="blockRegionSize">The size of the area to be transferred.</param>
    ///  <param name="copyPixelOperation">One of the <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  values.</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />
    ///  is not a member of <see cref="T:System.Drawing.CopyPixelOperation" />
    ///  .</exception><exception cref="T:System.ComponentModel.Win32Exception">The operation failed.</exception>
    procedure CopyFromScreen(sourceX: Int32; sourceY: Int32; destinationX: Int32; destinationY: Int32; blockRegionSize: DNSize; copyPixelOperation: DNCopyPixelOperation); overload;
    ///<summary>Resets the world transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  to the identity matrix.</summary>
    procedure ResetTransform;
    ///<summary>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics" />
    ///  and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that multiplies the world transformation. </param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>Multiplies the world transformation of this <see cref="T:System.Drawing.Graphics" />
    ///  and specified the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="matrix">4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that multiplies the world transformation. </param>
    ///  <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that determines the order of the multiplication. </param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  by prepending it to the object's transformation matrix.</summary>
    ///  <param name="sx">Scale factor in the x direction. </param>
    ///  <param name="sy">Scale factor in the y direction. </param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>Applies the specified scaling operation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  in the specified order.</summary>
    ///  <param name="sx">Scale factor in the x direction. </param>
    ///  <param name="sy">Scale factor in the y direction. </param>
    ///  <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies whether the scaling operation is prepended or appended to the transformation matrix. </param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="angle">Angle of rotation in degrees. </param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>Applies the specified rotation to the transformation matrix of this <see cref="T:System.Drawing.Graphics" />
    ///  in the specified order.</summary>
    ///  <param name="angle">Angle of rotation in degrees. </param>
    ///  <param name="order">Member of the <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  enumeration that specifies whether the rotation is appended or prepended to the matrix transformation. </param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    ///<summary>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="destSpace">Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  enumeration that specifies the destination coordinate space. </param>
    ///  <param name="srcSpace">Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  enumeration that specifies the source coordinate space. </param>
    ///  <param name="pts">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the points to transform. </param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPointF>); overload;
    ///<summary>Transforms an array of points from one coordinate space to another using the current world and page transformations of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="destSpace">Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  enumeration that specifies the destination coordinate space. </param>
    ///  <param name="srcSpace">Member of the <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />
    ///  enumeration that specifies the source coordinate space. </param>
    ///  <param name="pts">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represents the points to transformation. </param>
    procedure TransformPoints(destSpace: DNCoordinateSpace; srcSpace: DNCoordinateSpace; pts: TArray<DNPoint>); overload;
    ///<summary>Draws a line connecting the two points specified by the coordinate pairs.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line. </param>
    ///  <param name="x1">The x-coordinate of the first point. </param>
    ///  <param name="y1">The y-coordinate of the first point. </param>
    ///  <param name="x2">The x-coordinate of the second point. </param>
    ///  <param name="y2">The y-coordinate of the second point. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLine(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>Draws a line connecting two <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line. </param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the first point to connect. </param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the second point to connect. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPointF; pt2: DNPointF); overload;
    ///<summary>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line segments. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the points to connect. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>Draws a line connecting two <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line. </param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the first point to connect. </param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the second point to connect. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLine(pen: DNPen; pt1: DNPoint; pt2: DNPoint); overload;
    ///<summary>Draws a series of line segments that connect an array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the line segments. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represent the points to connect. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawLines(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the arc. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the rectangle that defines the ellipse. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to ending point of the arc. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawArc(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the arc. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that defines the boundaries of the ellipse. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to ending point of the arc. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws an arc representing a portion of an ellipse specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the arc. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the rectangle that defines the ellipse. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to ending point of the arc. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="rects" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentNullException"><paramref name="rects" />
    ///  is a zero-length array.</exception>
    procedure DrawArc(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>Draws an arc representing a portion of an ellipse specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the arc. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that defines the boundaries of the ellipse. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to ending point of the arc. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawArc(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws a BÃ©zier spline defined by four ordered pairs of coordinates that represent points.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="x1">The x-coordinate of the starting point of the curve. </param>
    ///  <param name="y1">The y-coordinate of the starting point of the curve. </param>
    ///  <param name="x2">The x-coordinate of the first control point of the curve. </param>
    ///  <param name="y2">The y-coordinate of the first control point of the curve. </param>
    ///  <param name="x3">The x-coordinate of the second control point of the curve. </param>
    ///  <param name="y3">The y-coordinate of the second control point of the curve. </param>
    ///  <param name="x4">The x-coordinate of the ending point of the curve. </param>
    ///  <param name="y4">The y-coordinate of the ending point of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawBezier(pen: DNPen; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; x4: Single; y4: Single); overload;
    ///<summary>Draws a BÃ©zier spline defined by four <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="pt1"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the starting point of the curve. </param>
    ///  <param name="pt2"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the first control point for the curve. </param>
    ///  <param name="pt3"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the second control point for the curve. </param>
    ///  <param name="pt4"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the ending point of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPointF; pt2: DNPointF; pt3: DNPointF; pt4: DNPointF); overload;
    ///<summary>Draws a series of BÃ©zier splines from an array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>Draws a BÃ©zier spline defined by four <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  structure that determines the color, width, and style of the curve. </param>
    ///  <param name="pt1"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the starting point of the curve. </param>
    ///  <param name="pt2"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the first control point for the curve. </param>
    ///  <param name="pt3"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the second control point for the curve. </param>
    ///  <param name="pt4"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the ending point of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawBezier(pen: DNPen; pt1: DNPoint; pt2: DNPoint; pt3: DNPoint; pt4: DNPoint); overload;
    ///<summary>Draws a series of BÃ©zier splines from an array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represent the points that determine the curve. The number of points in the array should be a multiple of 3 plus 1, such as 4, 7, or 10.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawBeziers(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>Draws a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the outlines of the rectangles. </param>
    ///  <param name="rects">Array of <see cref="T:System.Drawing.RectangleF" />
    ///  structures that represent the rectangles to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="rects" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  is a zero-length array.</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangleF>); overload;
    ///<summary>Draws a series of rectangles specified by <see cref="T:System.Drawing.Rectangle" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the outlines of the rectangles. </param>
    ///  <param name="rects">Array of <see cref="T:System.Drawing.Rectangle" />
    ///  structures that represent the rectangles to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="rects" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="rects" />
    ///  is a zero-length array.</exception>
    procedure DrawRectangles(pen: DNPen; rects: TArray<DNRectangle>); overload;
    ///<summary>Draws an ellipse defined by a bounding rectangle specified by a pair of coordinates, a height, and a width.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the ellipse. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawEllipse(pen: DNPen; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Draws an ellipse specified by a bounding <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the ellipse. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that defines the boundaries of the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawEllipse(pen: DNPen; rect: DNRectangle); overload;
    ///<summary>Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of the rectangle, a height, and a width.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the ellipse. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawEllipse(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure and two radial lines.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the pie shape. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
    ///  <param name="sweepAngle">Angle measured in degrees clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie shape. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangleF; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the pie shape. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
    ///  <param name="sweepAngle">Angle measured in degrees clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie shape. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPie(pen: DNPen; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure and two radial lines.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the pie shape. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
    ///  <param name="sweepAngle">Angle measured in degrees clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie shape. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPie(pen: DNPen; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Draws a pie shape defined by an ellipse specified by a coordinate pair, a width, a height, and two radial lines.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the pie shape. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie shape comes. </param>
    ///  <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. </param>
    ///  <param name="sweepAngle">Angle measured in degrees clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie shape. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPie(pen: DNPen; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the polygon. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the vertices of the polygon. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>Draws a polygon defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the polygon. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represent the vertices of the polygon. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPolygon(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>Draws a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the path. </param>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to draw. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawPath(pen: DNPen; path: DNGraphicsPath);
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" />
    ///  structures using a specified tension.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the points that define the curve. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" />
    ///  structures. The drawing begins offset from the beginning of the array.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///  <param name="offset">Offset from the first element in the array of the <paramref name="points" />
    ///  parameter to the starting point in the curve. </param>
    ///  <param name="numberOfSegments">Number of segments after the starting point to include in the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.PointF" />
    ///  structures using a specified tension. The drawing begins offset from the beginning of the array.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///  <param name="offset">Offset from the first element in the array of the <paramref name="points" />
    ///  parameter to the starting point in the curve. </param>
    ///  <param name="numberOfSegments">Number of segments after the starting point to include in the curve. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPointF>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and height of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" />
    ///  structures using a specified tension.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single); overload;
    ///<summary>Draws a cardinal spline through a specified array of <see cref="T:System.Drawing.Point" />
    ///  structures using a specified tension.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and style of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///  <param name="offset">Offset from the first element in the array of the <paramref name="points" />
    ///  parameter to the starting point in the curve. </param>
    ///  <param name="numberOfSegments">Number of segments after the starting point to include in the curve. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawCurve(pen: DNPen; points: TArray<DNPoint>; offset: Int32; numberOfSegments: Int32; tension: Single); overload;
    ///<summary>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and height of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>); overload;
    ///<summary>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures using a specified tension.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and height of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled. This parameter is required but is ignored. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPointF>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and height of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>); overload;
    ///<summary>Draws a closed cardinal spline defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures using a specified tension.</summary>
    ///  <param name="pen"><see cref="T:System.Drawing.Pen" />
    ///  that determines the color, width, and height of the curve. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled. This parameter is required but ignored. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pen" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawClosedCurve(pen: DNPen; points: TArray<DNPoint>; tension: Single; fillmode: DNFillMode); overload;
    ///<summary>Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillRectangle(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>Fills the interiors of a series of rectangles specified by <see cref="T:System.Drawing.RectangleF" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rects">Array of <see cref="T:System.Drawing.RectangleF" />
    ///  structures that represent the rectangles to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="rects" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="Rects" />
    ///  is a zero-length array.</exception>
    procedure FillRectangles(brush: DNBrush; rects: TArray<DNRectangleF>); overload;
    ///<summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the vertices of the polygon to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.PointF" />
    ///  structures using the specified fill mode.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that represent the vertices of the polygon to fill. </param>
    ///  <param name="fillMode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines the style of the fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPointF>; fillMode: DNFillMode); overload;
    ///<summary>Fills the interior of a polygon defined by an array of points specified by <see cref="T:System.Drawing.Point" />
    ///  structures using the specified fill mode.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that represent the vertices of the polygon to fill. </param>
    ///  <param name="fillMode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines the style of the fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPolygon(brush: DNBrush; points: TArray<DNPoint>; fillMode: DNFillMode); overload;
    ///<summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangleF); overload;
    ///<summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillEllipse(brush: DNBrush; rect: DNRectangle); overload;
    ///<summary>Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillEllipse(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Fills the interior of a pie section defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure and two radial lines.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie section. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPie(brush: DNBrush; rect: DNRectangle; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie section. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPie(brush: DNBrush; x: Single; y: Single; width: Single; height: Single; startAngle: Single; sweepAngle: Single); overload;
    ///<summary>Fills the interior of a pie section defined by an ellipse specified by a pair of coordinates, a width, a height, and two radial lines.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="width">Width of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="height">Height of the bounding rectangle that defines the ellipse from which the pie section comes. </param>
    ///  <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the first side of the pie section. </param>
    ///  <param name="sweepAngle">Angle in degrees measured clockwise from the <paramref name="startAngle" />
    ///  parameter to the second side of the pie section. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPie(brush: DNBrush; x: Int32; y: Int32; width: Int32; height: Int32; startAngle: Int32; sweepAngle: Int32); overload;
    ///<summary>Fills the interior of a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  that represents the path to fill. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillPath(brush: DNBrush; path: DNGraphicsPath);
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>); overload;
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures using the specified fill mode.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode); overload;
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.PointF" />
    ///  structures using the specified fill mode and tension.</summary>
    ///  <param name="brush">A <see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.PointF" />
    ///  structures that define the spline. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPointF>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>); overload;
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures using the specified fill mode.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode); overload;
    ///<summary>Fills the interior of a closed cardinal spline curve defined by an array of <see cref="T:System.Drawing.Point" />
    ///  structures using the specified fill mode and tension.</summary>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of the fill. </param>
    ///  <param name="points">Array of <see cref="T:System.Drawing.Point" />
    ///  structures that define the spline. </param>
    ///  <param name="fillmode">Member of the <see cref="T:System.Drawing.Drawing2D.FillMode" />
    ///  enumeration that determines how the curve is filled. </param>
    ///  <param name="tension">Value greater than or equal to 0.0F that specifies the tension of the curve. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="points" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure FillClosedCurve(brush: DNBrush; points: TArray<DNPoint>; fillmode: DNFillMode; tension: Single); overload;
    ///<summary>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects.</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the upper-left corner of the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF); overload;
    ///<summary>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn text. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn text. </param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; x: Single; y: Single; format: DNStringFormat); overload;
    ///<summary>Draws the specified text string at the specified location with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="T:System.Drawing.Font" />
    ///  objects using the formatting attributes of the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="s">String to draw. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="brush"><see cref="T:System.Drawing.Brush" />
    ///  that determines the color and texture of the drawn text. </param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the upper-left corner of the drawn text. </param>
    ///  <param name="format"><see cref="T:System.Drawing.StringFormat" />
    ///  that specifies formatting attributes, such as line spacing and alignment, that are applied to the drawn text. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="s" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawString(s: string; font: DNFont; brush: DNBrush; point: DNPointF; format: DNStringFormat); overload;
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF; stringFormat: DNStringFormat; out charactersFitted: Int32; out linesFilled: Int32): DNSizeF; overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  and formatted with the specified <see cref="T:System.Drawing.StringFormat" />
    ///  .</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  defines the text format of the string. </param>
    ///  <param name="origin"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the upper-left corner of the string. </param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  that represents formatting information, such as line spacing, for the string. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified by the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter and the <paramref name="stringFormat" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont; origin: DNPointF; stringFormat: DNStringFormat): DNSizeF; overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  within the specified layout area.</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  defines the text format of the string. </param>
    ///  <param name="layoutArea"><see cref="T:System.Drawing.SizeF" />
    ///  structure that specifies the maximum layout area for the text. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified by the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont; layoutArea: DNSizeF): DNSizeF; overload;
    ///<summary>Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font" />
    ///  .</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the format of the string. </param>
    ///  <param name="width">Maximum width of the string in pixels. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the size, in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property, of the string specified in the <paramref name="text" />
    ///  parameter as drawn with the <paramref name="font" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="font" />
    ///  is <see langword="null" />
    ///  .</exception>
    function MeasureString(text: string; font: DNFont; width: Int32): DNSizeF; overload;
    ///<summary>Gets an array of <see cref="T:System.Drawing.Region" />
    ///  objects, each of which bounds a range of character positions within the specified string.</summary>
    ///  <param name="text">String to measure. </param>
    ///  <param name="font"><see cref="T:System.Drawing.Font" />
    ///  that defines the text format of the string. </param>
    ///  <param name="layoutRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the layout rectangle for the string. </param>
    ///  <param name="stringFormat"><see cref="T:System.Drawing.StringFormat" />
    ///  that represents formatting information, such as line spacing, for the string. </param>
    ///<returns>This method returns an array of <see cref="T:System.Drawing.Region" />
    ///  objects, each of which bounds a range of character positions within the specified string.</returns>
    function MeasureCharacterRanges(text: string; font: DNFont; layoutRect: DNRectangleF; stringFormat: DNStringFormat): TArray<DNRegion>;
    ///<summary>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" />
    ///  at the specified coordinates.</summary>
    ///  <param name="icon"><see cref="T:System.Drawing.Icon" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawIcon(icon: DNIcon; x: Int32; y: Int32); overload;
    ///<summary>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" />
    ///  within the area specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="icon"><see cref="T:System.Drawing.Icon" />
    ///  to draw. </param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the resulting image on the display surface. The image contained in the <paramref name="icon" />
    ///  parameter is scaled to the dimensions of this rectangular area. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawIcon(icon: DNIcon; targetRect: DNRectangle); overload;
    ///<summary>Draws the image represented by the specified <see cref="T:System.Drawing.Icon" />
    ///  without scaling the image.</summary>
    ///  <param name="icon"><see cref="T:System.Drawing.Icon" />
    ///  to draw. </param>
    ///  <param name="targetRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the resulting image. The image is not scaled to fit this rectangle, but retains its original size. If the image is larger than the rectangle, it is clipped to fit inside it. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="icon" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawIconUnstretched(icon: DNIcon; targetRect: DNRectangle);
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  , using its original physical size, at the specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  structure that represents the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; point: DNPointF); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  , using its original physical size, at the specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; rect: DNRectangleF); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="width">Width of the drawn image. </param>
    ///  <param name="height">Height of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  , using its original physical size, at the specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  structure that represents the location of the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; point: DNPoint); overload;
    ///<summary>Draws a specified image using its original physical size at a specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImageUnscaled(image: DNImage; point: DNPoint); overload;
    ///<summary>Draws the specified image using its original physical size at the location specified by a coordinate pair.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32); overload;
    ///<summary>Draws a specified image using its original physical size at a specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  that specifies the upper-left corner of the drawn image. The X and Y properties of the rectangle specify the upper-left corner. The Width and Height properties are ignored. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImageUnscaled(image: DNImage; rect: DNRectangle); overload;
    ///<summary>Draws a specified image using its original physical size at a specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="width">Not used. </param>
    ///  <param name="height">Not used. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImageUnscaled(image: DNImage; x: Int32; y: Int32; width: Int32; height: Int32); overload;
    ///<summary>Draws the specified image without scaling and clips it, if necessary, to fit in the specified rectangle.</summary>
    ///  <param name="image">The <see cref="T:System.Drawing.Image" />
    ///  to draw.</param>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  in which to draw the image.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImageUnscaledAndClipped(image: DNImage; rect: DNRectangle);
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified shape and size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>); overload;
    ///<summary>Draws the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified shape and size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>); overload;
    ///<summary>Draws a portion of an image at a specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Single; y: Single; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws a portion of an image at a specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="x">The x-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the drawn image. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; x: Int32; y: Int32; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  method according to application-determined criteria. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  method according to application-determined criteria. </param>
    ///  <param name="callbackData">Value specifying additional data for the <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate to use when checking whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  method. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  method according to application-determined criteria. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <paramref name="image" />
    ///  object to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used by the <paramref name="srcRect" />
    ///  parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  method according to application-determined criteria. </param>
    ///  <param name="callbackData">Value specifying additional data for the <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate to use when checking whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
    ///  method. </param>
    procedure DrawImage(image: DNImage; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: Int32); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  method according to application-determined criteria. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttrs"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for the <paramref name="image" />
    ///  object. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
    ///  method according to application-determined criteria. </param>
    ///  <param name="callbackData">Value specifying additional data for the <see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate to use when checking whether to stop execution of the <see langword="DrawImage" />
    ///  method. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Single; srcY: Single; srcWidth: Single; srcHeight: Single; srcUnit: DNGraphicsUnit; imageAttrs: DNImageAttributes; callback: DNGraphics_DrawImageAbort; callbackData: IntPtr); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit); overload;
    ///<summary>Draws the specified portion of the specified <see cref="T:System.Drawing.Image" />
    ///  at the specified location and with the specified size.</summary>
    ///  <param name="image"><see cref="T:System.Drawing.Image" />
    ///  to draw. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn image. The image is scaled to fit the rectangle. </param>
    ///  <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw. </param>
    ///  <param name="srcWidth">Width of the portion of the source image to draw. </param>
    ///  <param name="srcHeight">Height of the portion of the source image to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the units of measure used to determine the source rectangle. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies recoloring and gamma information for <paramref name="image" />
    ///  . </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.DrawImageAbort" />
    ///  delegate that specifies a method to call during the drawing of the image. This method is called frequently to check whether to stop execution of the <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
    ///  method according to application-determined criteria. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure DrawImage(image: DNImage; destRect: DNRectangle; srcX: Int32; srcY: Int32; srcWidth: Int32; srcHeight: Int32; srcUnit: DNGraphicsUnit; imageAttr: DNImageAttributes; callback: DNGraphics_DrawImageAbort); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records of the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.PointF" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPointF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display at a specified point using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoint"><see cref="T:System.Drawing.Point" />
    ///  structure that specifies the location of the upper-left corner of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoint: DNPoint; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangleF; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records of a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified rectangle using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the location and size of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destRect: DNRectangle; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structures that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.PointF" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPointF>; srcRect: DNRectangleF; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="srcUnit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; srcUnit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr); overload;
    ///<summary>Sends the records in a selected rectangle from a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , one at a time, to a callback method for display in a specified parallelogram using specified image attributes.</summary>
    ///  <param name="metafile"><see cref="T:System.Drawing.Imaging.Metafile" />
    ///  to enumerate. </param>
    ///  <param name="destPoints">Array of three <see cref="T:System.Drawing.Point" />
    ///  structures that define a parallelogram that determines the size and location of the drawn metafile. </param>
    ///  <param name="srcRect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the metafile, relative to its upper-left corner, to draw. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure used to determine the portion of the metafile that the rectangle specified by the <paramref name="srcRect" />
    ///  parameter contains. </param>
    ///  <param name="callback"><see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />
    ///  delegate that specifies the method to which the metafile records are sent. </param>
    ///  <param name="callbackData">Internal pointer that is required, but ignored. You can pass <see cref="F:System.IntPtr.Zero" />
    ///  for this parameter. </param>
    ///  <param name="imageAttr"><see cref="T:System.Drawing.Imaging.ImageAttributes" />
    ///  that specifies image attribute information for the drawn image. </param>
    procedure EnumerateMetafile(metafile: DNMetafile; destPoints: TArray<DNPoint>; srcRect: DNRectangle; &unit: DNGraphicsUnit; callback: DNGraphics_EnumerateMetafileProc; callbackData: IntPtr; imageAttr: DNImageAttributes); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the <see langword="Clip" />
    ///  property of the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  from which to take the new clip region. </param>
    procedure SetClip(g: DNGraphics); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the result of the specified combining operation of the current clip region and the <see cref="P:System.Drawing.Graphics.Clip" />
    ///  property of the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="g"><see cref="T:System.Drawing.Graphics" />
    ///  that specifies the clip region to combine. </param>
    ///  <param name="combineMode">Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  enumeration that specifies the combining operation to use. </param>
    procedure SetClip(g: DNGraphics; combineMode: DNCombineMode); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure to combine. </param>
    ///  <param name="combineMode">Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  enumeration that specifies the combining operation to use. </param>
    procedure SetClip(rect: DNRectangle; combineMode: DNCombineMode); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the new clip region. </param>
    procedure SetClip(rect: DNRectangleF); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the result of the specified operation combining the current clip region and the rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure to combine. </param>
    ///  <param name="combineMode">Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  enumeration that specifies the combining operation to use. </param>
    procedure SetClip(rect: DNRectangleF; combineMode: DNCombineMode); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  that represents the new clip region. </param>
    procedure SetClip(path: DNGraphicsPath); overload;
    ///<summary>Sets the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the result of the specified operation combining the current clip region and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to combine. </param>
    ///  <param name="combineMode">Member of the <see cref="T:System.Drawing.Drawing2D.CombineMode" />
    ///  enumeration that specifies the combining operation to use. </param>
    procedure SetClip(path: DNGraphicsPath; combineMode: DNCombineMode); overload;
    ///<summary>Updates the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure to intersect with the current clip region. </param>
    procedure IntersectClip(rect: DNRectangle); overload;
    ///<summary>Updates the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the intersection of the current clip region and the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure to intersect with the current clip region. </param>
    procedure IntersectClip(rect: DNRectangleF); overload;
    ///<summary>Updates the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to the intersection of the current clip region and the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region"><see cref="T:System.Drawing.Region" />
    ///  to intersect with the current region. </param>
    procedure IntersectClip(region: DNRegion); overload;
    ///<summary>Updates the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to exclude the area specified by a <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the rectangle to exclude from the clip region. </param>
    procedure ExcludeClip(rect: DNRectangle); overload;
    ///<summary>Resets the clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  to an infinite region.</summary>
    procedure ResetClip;
    ///<summary>Translates the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  by specified amounts in the horizontal and vertical directions.</summary>
    ///  <param name="dx">The x-coordinate of the translation. </param>
    ///  <param name="dy">The y-coordinate of the translation. </param>
    procedure TranslateClip(dx: Single; dy: Single); overload;
    ///<summary>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test for visibility. </param>
    ///  <param name="y">The y-coordinate of the point to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the point defined by the <paramref name="x" />
    ///  and <paramref name="y" />
    ///  parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32): Boolean; overload;
    ///<summary>Indicates whether the specified <see cref="T:System.Drawing.Point" />
    ///  structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="point"><see cref="T:System.Drawing.Point" />
    ///  structure to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the point specified by the <paramref name="point" />
    ///  parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>Indicates whether the point specified by a pair of coordinates is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test for visibility. </param>
    ///  <param name="y">The y-coordinate of the point to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the point defined by the <paramref name="x" />
    ///  and <paramref name="y" />
    ///  parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>Indicates whether the specified <see cref="T:System.Drawing.PointF" />
    ///  structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="point"><see cref="T:System.Drawing.PointF" />
    ///  structure to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the point specified by the <paramref name="point" />
    ///  parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test for visibility.</param>
    ///  <param name="width">Width of the rectangle to test for visibility. </param>
    ///  <param name="height">Height of the rectangle to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the rectangle defined by the <paramref name="x" />
    ///  , <paramref name="y" />
    ///  , <paramref name="width" />
    ///  , and <paramref name="height" />
    ///  parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>Indicates whether the rectangle specified by a pair of coordinates, a width, and a height is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test for visibility. </param>
    ///  <param name="width">Width of the rectangle to test for visibility. </param>
    ///  <param name="height">Height of the rectangle to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the rectangle defined by the <paramref name="x" />
    ///  , <paramref name="y" />
    ///  , <paramref name="width" />
    ///  , and <paramref name="height" />
    ///  parameters is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>Indicates whether the rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
    ///  structure is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="rect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure to test for visibility. </param>
    ///<returns><see langword="true" />
    ///  if the rectangle specified by the <paramref name="rect" />
    ///  parameter is contained within the visible clip region of this <see cref="T:System.Drawing.Graphics" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" />
    ///  and opens and uses a new graphics container with the specified scale transformation.</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that, together with the <paramref name="srcrect" />
    ///  parameter, specifies a scale transformation for the new graphics container. </param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.RectangleF" />
    ///  structure that, together with the <paramref name="dstrect" />
    ///  parameter, specifies a scale transformation for the new graphics container. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure for the container. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  that represents the state of this <see cref="T:System.Drawing.Graphics" />
    ///  at the time of the method call.</returns>
    function BeginContainer(dstrect: DNRectangleF; srcrect: DNRectangleF; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>Saves a graphics container with the current state of this <see cref="T:System.Drawing.Graphics" />
    ///  and opens and uses a new graphics container with the specified scale transformation.</summary>
    ///  <param name="dstrect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that, together with the <paramref name="srcrect" />
    ///  parameter, specifies a scale transformation for the container. </param>
    ///  <param name="srcrect"><see cref="T:System.Drawing.Rectangle" />
    ///  structure that, together with the <paramref name="dstrect" />
    ///  parameter, specifies a scale transformation for the container. </param>
    ///  <param name="unit">Member of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  enumeration that specifies the unit of measure for the container. </param>
    ///<returns>This method returns a <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />
    ///  that represents the state of this <see cref="T:System.Drawing.Graphics" />
    ///  at the time of the method call.</returns>
    function BeginContainer(dstrect: DNRectangle; srcrect: DNRectangle; &unit: DNGraphicsUnit): DNGraphicsContainer; overload;
    ///<summary>Adds a comment to the current <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="data">Array of bytes that contains the comment. </param>
    procedure AddMetafileComment(data: TArray<Byte>);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that specifies how composited images are drawn to this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.CompositingMode" />
    ///  enumeration. The default is <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />
    ///  .</returns>
    property CompositingMode: DNCompositingMode read get_CompositingMode write set_CompositingMode;
    ///<summary>Gets or sets the rendering origin of this <see cref="T:System.Drawing.Graphics" />
    ///  for dithering and for hatch brushes.</summary>
    ///<returns>A <see cref="T:System.Drawing.Point" />
    ///  structure that represents the dither origin for 8-bits-per-pixel and 16-bits-per-pixel dithering and is also used to set the origin for hatch brushes.</returns>
    property RenderingOrigin: DNPoint read get_RenderingOrigin write set_RenderingOrigin;
    ///<summary>Gets or sets the rendering quality of composited images drawn to this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />
    ///  enumeration. The default is <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />
    ///  .</returns>
    property CompositingQuality: DNCompositingQuality read get_CompositingQuality write set_CompositingQuality;
    ///<summary>Gets or sets the rendering mode for text associated with this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Text.TextRenderingHint" />
    ///  values.</returns>
    property TextRenderingHint: DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    ///<summary>Gets or sets the gamma correction value for rendering text.</summary>
    ///<returns>The gamma correction value used for rendering antialiased and ClearType text.</returns>
    property TextContrast: Int32 read get_TextContrast write set_TextContrast;
    ///<summary>Gets or sets the rendering quality for this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.SmoothingMode" />
    ///  values.</returns>
    property SmoothingMode: DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    ///<summary>Gets or set a value specifying how pixels are offset during rendering of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>This property specifies a member of the <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />
    ///  enumeration </returns>
    property PixelOffsetMode: DNPixelOffsetMode read get_PixelOffsetMode write set_PixelOffsetMode;
    ///<summary>Gets or sets the interpolation mode associated with this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />
    ///  values.</returns>
    property InterpolationMode: DNInterpolationMode read get_InterpolationMode write set_InterpolationMode;
    ///<summary>Gets or sets a copy of the geometric world transformation for this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents the geometric world transformation for this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>Gets or sets the unit of measure used for page coordinates in this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.GraphicsUnit" />
    ///  values other than <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  is set to <see cref="F:System.Drawing.GraphicsUnit.World" />
    ///  , which is not a physical unit. </exception>
    property PageUnit: DNGraphicsUnit read get_PageUnit write set_PageUnit;
    ///<summary>Gets or sets the scaling between world units and page units for this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>This property specifies a value for the scaling between world units and page units for this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property PageScale: Single read get_PageScale write set_PageScale;
    ///<summary>Gets the horizontal resolution of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>The value, in dots per inch, for the horizontal resolution supported by this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property DpiX: Single read get_DpiX;
    ///<summary>Gets the vertical resolution of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>The value, in dots per inch, for the vertical resolution supported by this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property DpiY: Single read get_DpiY;
    ///<summary>Gets or sets a <see cref="T:System.Drawing.Region" />
    ///  that limits the drawing region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Region" />
    ///  that limits the portion of this <see cref="T:System.Drawing.Graphics" />
    ///  that is currently available for drawing.</returns>
    property Clip: DNRegion read get_Clip write set_Clip;
    ///<summary>Gets a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that bounds the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents a bounding rectangle for the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property ClipBounds: DNRectangleF read get_ClipBounds;
    ///<summary>Gets a value indicating whether the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  is empty.</summary>
    ///<returns><see langword="true" />
    ///  if the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  is empty; otherwise, <see langword="false" />
    ///  .</returns>
    property IsClipEmpty: Boolean read get_IsClipEmpty;
    ///<summary>Gets the bounding rectangle of the visible clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents a bounding rectangle for the visible clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  .</returns>
    property VisibleClipBounds: DNRectangleF read get_VisibleClipBounds;
    ///<summary>Gets a value indicating whether the visible clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  is empty.</summary>
    ///<returns><see langword="true" />
    ///  if the visible portion of the clipping region of this <see cref="T:System.Drawing.Graphics" />
    ///  is empty; otherwise, <see langword="false" />
    ///  .</returns>
    property IsVisibleClipEmpty: Boolean read get_IsVisibleClipEmpty;
  end;

  TDNGraphics = class(TDNGenericImport<DNGraphicsClass, DNGraphics>) end;

  //-------------namespace: System.Drawing----------------
  DNIconClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{3D203B12-B3FE-5D34-A578-F82BA634BF10}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class from the specified file name.</summary>
    ///  <param name="fileName">The file to load the <see cref="T:System.Drawing.Icon" />
    ///  from. </param>
    {class} function init(fileName: string): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class of the specified size from the specified file.</summary>
    ///  <param name="fileName">The name and path to the file that contains the icon data.</param>
    ///  <param name="size">The desired size of the icon.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="string" />
    ///  is <see langword="null" />
    ///  or does not contain image data.</exception>
    {class} function init(fileName: string; size: DNSize): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class with the specified width and height from the specified file.</summary>
    ///  <param name="fileName">The name and path to the file that contains the <see cref="T:System.Drawing.Icon" />
    ///  data.</param>
    ///  <param name="width">The desired width of the <see cref="T:System.Drawing.Icon" />
    ///  .</param>
    ///  <param name="height">The desired height of the <see cref="T:System.Drawing.Icon" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="string" />
    ///  is <see langword="null" />
    ///  or does not contain image data.</exception>
    {class} function init(fileName: string; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class and attempts to find a version of the icon that matches the requested size.</summary>
    ///  <param name="original">The <see cref="T:System.Drawing.Icon" />
    ///  from which to load the newly sized icon. </param>
    ///  <param name="size">A <see cref="T:System.Drawing.Size" />
    ///  structure that specifies the height and width of the new <see cref="T:System.Drawing.Icon" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="original" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(original: DNIcon; size: DNSize): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class and attempts to find a version of the icon that matches the requested size.</summary>
    ///  <param name="original">The icon to load the different size from. </param>
    ///  <param name="width">The width of the new icon. </param>
    ///  <param name="height">The height of the new icon. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="original" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(original: DNIcon; width: Int32; height: Int32): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class from a resource in the specified assembly.</summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  that specifies the assembly in which to look for the resource. </param>
    ///  <param name="resource">The resource name to load. </param>
    ///<exception cref="T:System.ArgumentException">An icon specified by <paramref name="resource" />
    ///  cannot be found in the assembly that contains the specified <paramref name="type" />
    ///  .</exception>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class from the specified data stream.</summary>
    ///  <param name="stream">The data stream from which to load the <see cref="T:System.Drawing.Icon" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="stream" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class of the specified size from the specified stream.</summary>
    ///  <param name="stream">The stream that contains the icon data.</param>
    ///  <param name="size">The desired size of the icon.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="stream" />
    ///  is <see langword="null" />
    ///  or does not contain image data.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; size: DNSize): DNIcon; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Icon" />
    ///  class from the specified data stream and with the specified width and height.</summary>
    ///  <param name="stream">The data stream from which to load the icon. </param>
    ///  <param name="width">The width, in pixels, of the icon. </param>
    ///  <param name="height">The height, in pixels, of the icon. </param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="stream" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; width: Int32; height: Int32): DNIcon; overload;

  { static methods } 

    ///<summary>Returns an icon representation of an image that is contained in the specified file.</summary>
    ///  <param name="filePath">The path to the file that contains an image.</param>
    ///<returns>The <see cref="T:System.Drawing.Icon" />
    ///  representation of the image that is contained in the specified file.</returns>
    ///<exception cref="T:System.ArgumentException">The <paramref name="filePath" />
    ///  does not indicate a valid file.-or-The <paramref name="filePath" />
    ///  indicates a Universal Naming Convention (UNC) path.</exception>
    {class} function ExtractAssociatedIcon(filePath: string): DNIcon;
    ///<summary>Creates a GDI+ <see cref="T:System.Drawing.Icon" />
    ///  from the specified Windows handle to an icon (<see langword="HICON" />
    ///  ).</summary>
    ///  <param name="handle">A Windows handle to an icon. </param>
    ///<returns>The <see cref="T:System.Drawing.Icon" />
    ///  this method creates.</returns>
    {class} function FromHandle(handle: IntPtr): DNIcon;

  end;

  ///<summary>Represents a Windows icon, which is a small bitmap image that is used to represent an object. Icons can be thought of as transparent bitmaps, although their size is determined by the system.</summary>
  [DNTypeName('System.Drawing.Icon')]
  DNIcon = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F874226E-D299-3CEF-A532-1EA4153B91FC}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_Height: Int32;
    function get_Size: DNSize;
    function get_Width: Int32;

  { methods } 

    ///<summary>Clones the <see cref="T:System.Drawing.Icon" />
    ///  , creating a duplicate image.</summary>
    ///<returns>An object that can be cast to an <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Saves this <see cref="T:System.Drawing.Icon" />
    ///  to the specified output <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="outputStream">The <see cref="T:System.IO.Stream" />
    ///  to save to. </param>
    procedure Save(outputStream: DDN.mscorlib.DNStream);
    ///<summary>Converts this <see cref="T:System.Drawing.Icon" />
    ///  to a GDI+ <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Bitmap" />
    ///  that represents the converted <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    function ToBitmap: DNBitmap;
    ///<summary>Gets a human-readable string that describes the <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    ///<returns>A string that describes the <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the Windows handle for this <see cref="T:System.Drawing.Icon" />
    ///  . This is not a copy of the handle; do not free it.</summary>
    ///<returns>The Windows handle for the icon.</returns>
    property Handle: IntPtr read get_Handle;
    ///<summary>Gets the height of this <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    ///<returns>The height of this <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    property Height: Int32 read get_Height;
    ///<summary>Gets the size of this <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that specifies the width and height of this <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    property Size: DNSize read get_Size;
    ///<summary>Gets the width of this <see cref="T:System.Drawing.Icon" />
    ///  .</summary>
    ///<returns>The width of this <see cref="T:System.Drawing.Icon" />
    ///  .</returns>
    property Width: Int32 read get_Width;
  end;

  TDNIcon = class(TDNGenericImport<DNIconClass, DNIcon>) end;

  //-------------namespace: System.Drawing----------------
  DNImageClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{79A48C86-C565-56AC-8B0C-7D93CF731D7E}']
  { static methods } 

    ///<summary>Creates an <see cref="T:System.Drawing.Image" />
    ///  from the specified file.</summary>
    ///  <param name="filename">A string that contains the name of the file from which to create the <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.OutOfMemoryException">The file does not have a valid image format.-or-
    ///  GDI+ does not support the pixel format of the file.</exception><exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  is a <see cref="T:System.Uri" />
    ///  .</exception>
    {class} function FromFile(filename: string): DNImage; overload;
    ///<summary>Creates an <see cref="T:System.Drawing.Image" />
    ///  from the specified file using embedded color management information in that file.</summary>
    ///  <param name="filename">A string that contains the name of the file from which to create the <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="useEmbeddedColorManagement">Set to <see langword="true" />
    ///  to use color management information embedded in the image file; otherwise, <see langword="false" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.OutOfMemoryException">The file does not have a valid image format.-or-
    ///  GDI+ does not support the pixel format of the file.</exception><exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  is a <see cref="T:System.Uri" />
    ///  .</exception>
    {class} function FromFile(filename: string; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>Creates an <see cref="T:System.Drawing.Image" />
    ///  from the specified data stream.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The stream does not have a valid image format-or-
    ///  <paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream): DNImage; overload;
    ///<summary>Creates an <see cref="T:System.Drawing.Image" />
    ///  from the specified data stream, optionally using embedded color management information in that stream.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  to use color management information embedded in the data stream; otherwise, <see langword="false" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The stream does not have a valid image format -or-
    ///  <paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean): DNImage; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Bitmap" />
    ///  from a handle to a GDI bitmap.</summary>
    ///  <param name="hbitmap">The GDI bitmap handle from which to create the <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Bitmap" />
    ///  this method creates.</returns>
    {class} function FromHbitmap(hbitmap: IntPtr): DNBitmap; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Bitmap" />
    ///  from a handle to a GDI bitmap and a handle to a GDI palette.</summary>
    ///  <param name="hbitmap">The GDI bitmap handle from which to create the <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="hpalette">A handle to a GDI palette used to define the bitmap colors if the bitmap specified in the <paramref name="hBitmap" />
    ///  parameter is not a device-independent bitmap (DIB). </param>
    ///<returns>The <see cref="T:System.Drawing.Bitmap" />
    ///  this method creates.</returns>
    {class} function FromHbitmap(hbitmap: IntPtr; hpalette: IntPtr): DNBitmap; overload;
    ///<summary>Returns the color depth, in number of bits per pixel, of the specified pixel format.</summary>
    ///  <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  member that specifies the format for which to find the size. </param>
    ///<returns>The color depth of the specified pixel format.</returns>
    {class} function GetPixelFormatSize(pixfmt: DNPixelFormat): Int32;
    ///<summary>Returns a value that indicates whether the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  contains alpha information.</summary>
    ///  <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="pixfmt" />
    ///  contains alpha information; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsAlphaPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>Returns a value that indicates whether the pixel format is 64 bits per pixel.</summary>
    ///  <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  enumeration to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="pixfmt" />
    ///  is extended; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsExtendedPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>Returns a value that indicates whether the pixel format is 32 bits per pixel.</summary>
    ///  <param name="pixfmt">The <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="pixfmt" />
    ///  is canonical; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsCanonicalPixelFormat(pixfmt: DNPixelFormat): Boolean;
    ///<summary>Creates an <see cref="T:System.Drawing.Image" />
    ///  from the specified data stream, optionally using embedded color management information and validating the image data.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="useEmbeddedColorManagement"><see langword="true" />
    ///  to use color management information embedded in the data stream; otherwise, <see langword="false" />
    ///  . </param>
    ///  <param name="validateImageData"><see langword="true" />
    ///  to validate the image data; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The stream does not have a valid image format.</exception>
    {class} function FromStream(stream: DDN.mscorlib.DNStream; useEmbeddedColorManagement: Boolean; validateImageData: Boolean): DNImage; overload;

  end;

  ///<summary>An abstract base class that provides functionality for the <see cref="T:System.Drawing.Bitmap" />
  ///  and <see cref="T:System.Drawing.Imaging.Metafile" />
  ///  descended classes.</summary>
  [DNTypeName('System.Drawing.Image')]
  DNImage = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{451DBF16-B46B-3B4F-993C-EFD8B01553A0}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Returns information about the parameters supported by the specified image encoder.</summary>
    ///  <param name="encoder">A GUID that specifies the image encoder. </param>
    ///<returns>An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that contains an array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects. Each <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  contains information about one of the parameters supported by the specified image encoder.</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file or stream.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file in the specified format.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="format" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file, with the specified encoder and image-encoder parameters.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  to use for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="encoder" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Saves this image to the specified stream in the specified format.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that specifies the format of the saved image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="format" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>Saves this image to the specified stream, with the specified encoder and image encoder parameters.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that specifies parameters used by the image encoder. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method. Use this method to save selected frames from a multiple-frame image to another multiple-frame image.</summary>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method.</summary>
    ///  <param name="image">An <see cref="T:System.Drawing.Image" />
    ///  that contains the frame to add. </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>Returns a thumbnail for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="thumbWidth">The width, in pixels, of the requested thumbnail image. </param>
    ///  <param name="thumbHeight">The height, in pixels, of the requested thumbnail image. </param>
    ///  <param name="callback">A <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  delegate.
    ///  NoteÂ Â Â You must create a delegate and pass a reference to the delegate as the <paramref name="callback" />
    ///  parameter, but the delegate is not used.</param>
    ///  <param name="callbackData">Must be <see cref="F:System.IntPtr.Zero" />
    ///  . </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  that represents the thumbnail.</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>Returns the number of frames of the specified dimension.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///<returns>The number of frames in the specified dimension.</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>Selects the frame specified by the dimension and index.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///  <param name="frameIndex">The index of the active frame. </param>
    ///<returns>Always returns 0.</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>Rotates, flips, or rotates and flips the <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="rotateFlipType">A <see cref="T:System.Drawing.RotateFlipType" />
    ///  member that specifies the type of rotation and flip to apply to the image. </param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>Gets the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to get. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  this method gets.</returns>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>Removes the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to remove. </param>
    ///<exception cref="T:System.ArgumentException">The image does not contain the requested property item.-or-The image format for this image does not support property items.</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>Stores a property item (piece of metadata) in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propitem">The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  to be stored. </param>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an object that provides additional data about the image.</summary>
    ///<returns>The <see cref="T:System.Object" />
    ///  that provides additional data about the image.</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>Gets the width and height of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the width and height of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>Gets the width and height, in pixels, of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that represents the width and height, in pixels, of this image.</returns>
    property Size: DNSize read get_Size;
    ///<summary>Gets the width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Width: Int32 read get_Width;
    ///<summary>Gets the height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Height: Int32 read get_Height;
    ///<summary>Gets the horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>Gets the vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>Gets attribute flags for the pixel data of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The integer representing a bitwise combination of <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>Gets the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that represents the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>Gets the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  that represents the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>Gets or sets the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  that represents the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>Gets an array of GUIDs that represent the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of GUIDs that specify the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  from most significant to least significant.</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>Gets IDs of the property items stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of the property IDs, one for each property item stored in this image.</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>Gets all the property items (pieces of metadata) stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  objects, one for each property item stored in the image.</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: System.Drawing----------------
  DNBitmapClass = interface(DNImageClass)
  ['{94ACAB77-01F8-5022-B397-D27F8602028F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified file.</summary>
    ///  <param name="filename">The bitmap file name and path. </param>
    ///<exception cref="T:System.IO.FileNotFoundException">The specified file is not found.</exception>
    {class} function init(filename: string): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified file.</summary>
    ///  <param name="filename">The name of the bitmap file. </param>
    ///  <param name="useIcm"><see langword="true" />
    ///  to use color correction for this <see cref="T:System.Drawing.Bitmap" />
    ///  ; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(filename: string; useIcm: Boolean): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from a specified resource.</summary>
    ///  <param name="type">The class used to extract the resource. </param>
    ///  <param name="resource">The name of the resource. </param>
    {class} function init(&type: DDN.mscorlib.DNType; resource: string): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified data stream.</summary>
    ///  <param name="stream">The data stream used to load the image. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  does not contain image data or is <see langword="null" />
    ///  .-or-
    ///  <paramref name="stream" />
    ///  contains a PNG image file with a single dimension greater than 65,535 pixels.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified data stream.</summary>
    ///  <param name="stream">The data stream used to load the image. </param>
    ///  <param name="useIcm"><see langword="true" />
    ///  to use color correction for this <see cref="T:System.Drawing.Bitmap" />
    ///  ; otherwise, <see langword="false" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  does not contain image data or is <see langword="null" />
    ///  .-or-
    ///  <paramref name="stream" />
    ///  contains a PNG image file with a single dimension greater than 65,535 pixels.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; useIcm: Boolean): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class with the specified size, pixel format, and pixel data.</summary>
    ///  <param name="width">The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="height">The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="stride">Integer that specifies the byte offset between the beginning of one scan line and the next. This is usually (but not necessarily) the number of bytes in the pixel format (for example, 2 for 16 bits per pixel) multiplied by the width of the bitmap. The value passed to this parameter must be a multiple of four.. </param>
    ///  <param name="format">The pixel format for the new <see cref="T:System.Drawing.Bitmap" />
    ///  . This must specify a value that begins with <paramref name="Format" />
    ///  .</param>
    ///  <param name="scan0">Pointer to an array of bytes that contains the pixel data.</param>
    ///<exception cref="T:System.ArgumentException">A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  value is specified whose name does not start with Format. For example, specifying <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  will cause an <see cref="T:System.ArgumentException" />
    ///  , but <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  will not.</exception>
    {class} function init(width: Int32; height: Int32; stride: Int32; format: DNPixelFormat; scan0: IntPtr): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class with the specified size and format.</summary>
    ///  <param name="width">The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="height">The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="format">The pixel format for the new <see cref="T:System.Drawing.Bitmap" />
    ///  . This must specify a value that begins with <paramref name="Format" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException">A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  value is specified whose name does not start with Format. For example, specifying <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  will cause an <see cref="T:System.ArgumentException" />
    ///  , but <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  will not.</exception>
    {class} function init(width: Int32; height: Int32; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class with the specified size.</summary>
    ///  <param name="width">The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="height">The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    {class} function init(width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class with the specified size and with the resolution of the specified <see cref="T:System.Drawing.Graphics" />
    ///  object.</summary>
    ///  <param name="width">The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="height">The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="g">The <see cref="T:System.Drawing.Graphics" />
    ///  object that specifies the resolution for the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(width: Int32; height: Int32; g: DNGraphics): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified existing image.</summary>
    ///  <param name="original">The <see cref="T:System.Drawing.Image" />
    ///  from which to create the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    {class} function init(original: DNImage): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified existing image, scaled to the specified size.</summary>
    ///  <param name="original">The <see cref="T:System.Drawing.Image" />
    ///  from which to create the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="width">The width, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="height">The height, in pixels, of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    {class} function init(original: DNImage; width: Int32; height: Int32): DNBitmap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Bitmap" />
    ///  class from the specified existing image, scaled to the specified size.</summary>
    ///  <param name="original">The <see cref="T:System.Drawing.Image" />
    ///  from which to create the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="newSize">The <see cref="T:System.Drawing.Size" />
    ///  structure that represent the size of the new <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    {class} function init(original: DNImage; newSize: DNSize): DNBitmap; overload;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Bitmap" />
    ///  from a Windows handle to an icon.</summary>
    ///  <param name="hicon">A handle to an icon. </param>
    ///<returns>The <see cref="T:System.Drawing.Bitmap" />
    ///  that this method creates.</returns>
    {class} function FromHicon(hicon: IntPtr): DNBitmap;
    ///<summary>Creates a <see cref="T:System.Drawing.Bitmap" />
    ///  from the specified Windows resource.</summary>
    ///  <param name="hinstance">A handle to an instance of the executable file that contains the resource. </param>
    ///  <param name="bitmapName">A string that contains the name of the resource bitmap. </param>
    ///<returns>The <see cref="T:System.Drawing.Bitmap" />
    ///  that this method creates.</returns>
    {class} function FromResource(hinstance: IntPtr; bitmapName: string): DNBitmap;

  end;

  ///<summary>Encapsulates a GDI+ bitmap, which consists of the pixel data for a graphics image and its attributes. A <see cref="T:System.Drawing.Bitmap" />
  ///  is an object used to work with images defined by pixel data.</summary>
  [DNTypeName('System.Drawing.Bitmap')]
  DNBitmap = interface(DNImage)
  ['{6549E875-8857-35A3-94A2-C3D574DDEB1D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>Creates a GDI bitmap object from this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///<returns>A handle to the GDI bitmap object that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The height or width of the bitmap is greater than <see cref="F:System.Int16.MaxValue" />
    ///  .</exception><exception cref="T:System.Exception">The operation failed.</exception>
    function GetHbitmap: IntPtr; overload;
    ///<summary>Creates a GDI bitmap object from this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///  <param name="background">A <see cref="T:System.Drawing.Color" />
    ///  structure that specifies the background color. This parameter is ignored if the bitmap is totally opaque. </param>
    ///<returns>A handle to the GDI bitmap object that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException">The height or width of the bitmap is greater than <see cref="F:System.Int16.MaxValue" />
    ///  .</exception><exception cref="T:System.Exception">The operation failed.</exception>
    function GetHbitmap(background: DNColor): IntPtr; overload;
    ///<summary>Returns the handle to an icon.</summary>
    ///<returns>A Windows handle to an icon with the same image as the <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    function GetHicon: IntPtr;
    ///<summary>Creates a copy of the section of this <see cref="T:System.Drawing.Bitmap" />
    ///  defined by <see cref="T:System.Drawing.Rectangle" />
    ///  structure and with a specified <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  enumeration.</summary>
    ///  <param name="rect">Defines the portion of this <see cref="T:System.Drawing.Bitmap" />
    ///  to copy. Coordinates are relative to this <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="format">The pixel format for the new <see cref="T:System.Drawing.Bitmap" />
    ///  . This must specify a value that begins with <paramref name="Format" />
    ///  .</param>
    ///<returns>The new <see cref="T:System.Drawing.Bitmap" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  is outside of the source bitmap bounds.</exception><exception cref="T:System.ArgumentException">The height or width of <paramref name="rect" />
    ///  is 0. -or-A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  value is specified whose name does not start with Format. For example, specifying <see cref="F:System.Drawing.Imaging.PixelFormat.Gdi" />
    ///  will cause an <see cref="T:System.ArgumentException" />
    ///  , but <see cref="F:System.Drawing.Imaging.PixelFormat.Format48bppRgb" />
    ///  will not.</exception>
    function Clone(rect: DNRectangle; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>Creates a copy of the section of this <see cref="T:System.Drawing.Bitmap" />
    ///  defined with a specified <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  enumeration.</summary>
    ///  <param name="rect">Defines the portion of this <see cref="T:System.Drawing.Bitmap" />
    ///  to copy. </param>
    ///  <param name="format">Specifies the <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  enumeration for the destination <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Bitmap" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.OutOfMemoryException"><paramref name="rect" />
    ///  is outside of the source bitmap bounds.</exception><exception cref="T:System.ArgumentException">The height or width of <paramref name="rect" />
    ///  is 0. </exception>
    function Clone(rect: DNRectangleF; format: DNPixelFormat): DNBitmap; overload;
    ///<summary>Makes the default transparent color transparent for this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">The image format of the <see cref="T:System.Drawing.Bitmap" />
    ///  is an icon format.</exception><exception cref="T:System.Exception">The operation failed.</exception>
    procedure MakeTransparent; overload;
    ///<summary>Makes the specified color transparent for this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///  <param name="transparentColor">The <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color to make transparent. </param>
    ///<exception cref="T:System.InvalidOperationException">The image format of the <see cref="T:System.Drawing.Bitmap" />
    ///  is an icon format.</exception><exception cref="T:System.Exception">The operation failed.</exception>
    procedure MakeTransparent(transparentColor: DNColor); overload;
    ///<summary>Locks a <see cref="T:System.Drawing.Bitmap" />
    ///  into system memory.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that specifies the portion of the <see cref="T:System.Drawing.Bitmap" />
    ///  to lock. </param>
    ///  <param name="flags">An <see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  enumeration that specifies the access level (read/write) for the <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="format">A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  enumeration that specifies the data format of this <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<returns>A <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  that contains information about this lock operation.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  is not a specific bits-per-pixel value.-or-The incorrect <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  is passed in for a bitmap.</exception><exception cref="T:System.Exception">The operation failed.</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat): DNBitmapData; overload;
    ///<summary>Locks a <see cref="T:System.Drawing.Bitmap" />
    ///  into system memory </summary>
    ///  <param name="rect">A rectangle structure that specifies the portion of the <see cref="T:System.Drawing.Bitmap" />
    ///  to lock.</param>
    ///  <param name="flags">One of the <see cref="T:System.Drawing.Imaging.ImageLockMode" />
    ///  values that specifies the access level (read/write) for the <see cref="T:System.Drawing.Bitmap" />
    ///  .</param>
    ///  <param name="format">One of the <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  values that specifies the data format of the <see cref="T:System.Drawing.Bitmap" />
    ///  .</param>
    ///  <param name="bitmapData">A <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  that contains information about the lock operation.</param>
    ///<returns>A <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  that contains information about the lock operation.</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  value is not a specific bits-per-pixel value.-or-The incorrect <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  is passed in for a bitmap.</exception><exception cref="T:System.Exception">The operation failed.</exception>
    function LockBits(rect: DNRectangle; flags: DNImageLockMode; format: DNPixelFormat; bitmapData: DNBitmapData): DNBitmapData; overload;
    ///<summary>Unlocks this <see cref="T:System.Drawing.Bitmap" />
    ///  from system memory.</summary>
    ///  <param name="bitmapdata">A <see cref="T:System.Drawing.Imaging.BitmapData" />
    ///  that specifies information about the lock operation. </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    procedure UnlockBits(bitmapdata: DNBitmapData);
    ///<summary>Gets the color of the specified pixel in this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the pixel to retrieve. </param>
    ///  <param name="y">The y-coordinate of the pixel to retrieve. </param>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of the specified pixel.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x" />
    ///  is less than 0, or greater than or equal to <see cref="P:System.Drawing.Image.Width" />
    ///  . -or-
    ///  <paramref name="y" />
    ///  is less than 0, or greater than or equal to <see cref="P:System.Drawing.Image.Height" />
    ///  .</exception><exception cref="T:System.Exception">The operation failed.</exception>
    function GetPixel(x: Int32; y: Int32): DNColor;
    ///<summary>Sets the color of the specified pixel in this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the pixel to set. </param>
    ///  <param name="y">The y-coordinate of the pixel to set. </param>
    ///  <param name="color">A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color to assign to the specified pixel. </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    procedure SetPixel(x: Int32; y: Int32; color: DNColor);
    ///<summary>Sets the resolution for this <see cref="T:System.Drawing.Bitmap" />
    ///  .</summary>
    ///  <param name="xDpi">The horizontal resolution, in dots per inch, of the <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///  <param name="yDpi">The vertical resolution, in dots per inch, of the <see cref="T:System.Drawing.Bitmap" />
    ///  . </param>
    ///<exception cref="T:System.Exception">The operation failed.</exception>
    procedure SetResolution(xDpi: Single; yDpi: Single);
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject; overload;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Returns information about the parameters supported by the specified image encoder.</summary>
    ///  <param name="encoder">A GUID that specifies the image encoder. </param>
    ///<returns>An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that contains an array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects. Each <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  contains information about one of the parameters supported by the specified image encoder.</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file or stream.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file in the specified format.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="format" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file, with the specified encoder and image-encoder parameters.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  to use for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="encoder" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Saves this image to the specified stream in the specified format.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that specifies the format of the saved image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="format" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>Saves this image to the specified stream, with the specified encoder and image encoder parameters.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that specifies parameters used by the image encoder. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method. Use this method to save selected frames from a multiple-frame image to another multiple-frame image.</summary>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method.</summary>
    ///  <param name="image">An <see cref="T:System.Drawing.Image" />
    ///  that contains the frame to add. </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>Returns a thumbnail for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="thumbWidth">The width, in pixels, of the requested thumbnail image. </param>
    ///  <param name="thumbHeight">The height, in pixels, of the requested thumbnail image. </param>
    ///  <param name="callback">A <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  delegate.
    ///  NoteÂ Â Â You must create a delegate and pass a reference to the delegate as the <paramref name="callback" />
    ///  parameter, but the delegate is not used.</param>
    ///  <param name="callbackData">Must be <see cref="F:System.IntPtr.Zero" />
    ///  . </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  that represents the thumbnail.</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>Returns the number of frames of the specified dimension.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///<returns>The number of frames in the specified dimension.</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>Selects the frame specified by the dimension and index.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///  <param name="frameIndex">The index of the active frame. </param>
    ///<returns>Always returns 0.</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>Rotates, flips, or rotates and flips the <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="rotateFlipType">A <see cref="T:System.Drawing.RotateFlipType" />
    ///  member that specifies the type of rotation and flip to apply to the image. </param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>Gets the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to get. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  this method gets.</returns>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>Removes the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to remove. </param>
    ///<exception cref="T:System.ArgumentException">The image does not contain the requested property item.-or-The image format for this image does not support property items.</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>Stores a property item (piece of metadata) in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propitem">The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  to be stored. </param>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an object that provides additional data about the image.</summary>
    ///<returns>The <see cref="T:System.Object" />
    ///  that provides additional data about the image.</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>Gets the width and height of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the width and height of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>Gets the width and height, in pixels, of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that represents the width and height, in pixels, of this image.</returns>
    property Size: DNSize read get_Size;
    ///<summary>Gets the width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Width: Int32 read get_Width;
    ///<summary>Gets the height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Height: Int32 read get_Height;
    ///<summary>Gets the horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>Gets the vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>Gets attribute flags for the pixel data of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The integer representing a bitwise combination of <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>Gets the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that represents the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>Gets the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  that represents the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>Gets or sets the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  that represents the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>Gets an array of GUIDs that represent the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of GUIDs that specify the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  from most significant to least significant.</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>Gets IDs of the property items stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of the property IDs, one for each property item stored in this image.</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>Gets all the property items (pieces of metadata) stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  objects, one for each property item stored in the image.</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNBitmap = class(TDNGenericImport<DNBitmapClass, DNBitmap>) end;

  //-------------namespace: System.Drawing.Imaging----------------
  DNMetafileClass = interface(DNImageClass)
  ['{42D491F2-DEA3-52BA-AE62-751A64D411AB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified handle and a <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  .</summary>
    ///  <param name="hmetafile">A windows handle to a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="wmfHeader">A <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  . </param>
    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified handle and a <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  . Also, the <paramref name="deleteWmf" />
    ///  parameter can be used to delete the handle when the metafile is deleted.</summary>
    ///  <param name="hmetafile">A windows handle to a <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="wmfHeader">A <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  . </param>
    ///  <param name="deleteWmf"><see langword="true" />
    ///  to delete the handle to the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  when the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is deleted; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader; deleteWmf: Boolean): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified handle.</summary>
    ///  <param name="henhmetafile">A handle to an enhanced metafile. </param>
    ///  <param name="deleteEmf"><see langword="true" />
    ///  to delete the enhanced metafile handle when the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  is deleted; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(henhmetafile: IntPtr; deleteEmf: Boolean): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified file name.</summary>
    ///  <param name="filename">A <see cref="T:System.String" />
    ///  that represents the file name from which to create the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(filename: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  from which to create the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified handle to a device context and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="emfType">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified handle to a device context and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A string can be supplied to name the file.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="emfType">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; emfType: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A string can be provided to name the file.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified device context, bounded by the specified rectangle that uses the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A string can be provided to name the file.</summary>
    ///  <param name="referenceHdc">The handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="desc">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; desc: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    {class} function init(fileName: string; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A descriptive string can be added, as well.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, and a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure. A descriptive string can also be added.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="desc">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; desc: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A descriptive string can also be added.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, and a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure. A descriptive string can also be added.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class with the specified file name, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A descriptive string can also be added.</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  that represents the file name of the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(fileName: string; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . Also, a string that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  can be added.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A string that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  can be added.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.RectangleF" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangleF; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, and a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , and the supplied unit of measure.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType): DNMetafile; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  class from the specified data stream, a Windows handle to a device context, a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  , the supplied unit of measure, and an <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  enumeration that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . A string that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  can be added.</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  that contains the data for this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="referenceHdc">A Windows handle to a device context. </param>
    ///  <param name="frameRect">A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the rectangle that bounds the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="frameUnit">A <see cref="T:System.Drawing.Imaging.MetafileFrameUnit" />
    ///  that specifies the unit of measure for <paramref name="frameRect" />
    ///  . </param>
    ///  <param name="type">An <see cref="T:System.Drawing.Imaging.EmfType" />
    ///  that specifies the format of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  that contains a descriptive name for the new <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  . </param>
    {class} function init(stream: DDN.mscorlib.DNStream; referenceHdc: IntPtr; frameRect: DNRectangle; frameUnit: DNMetafileFrameUnit; &type: DNEmfType; description: string): DNMetafile; overload;

  { static methods } 

    ///<summary>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="hmetafile">The handle to the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  for which to return a header. </param>
    ///  <param name="wmfHeader">A <see cref="T:System.Drawing.Imaging.WmfPlaceableFileHeader" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    {class} function GetMetafileHeader(hmetafile: IntPtr; wmfHeader: DNWmfPlaceableFileHeader): DNMetafileHeader; overload;
    ///<summary>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="henhmetafile">The handle to the enhanced <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  for which a header is returned. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    {class} function GetMetafileHeader(henhmetafile: IntPtr): DNMetafileHeader; overload;
    ///<summary>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="fileName">A <see cref="T:System.String" />
    ///  containing the name of the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  for which a header is retrieved. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    {class} function GetMetafileHeader(fileName: string): DNMetafileHeader; overload;
    ///<summary>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///  <param name="stream">A <see cref="T:System.IO.Stream" />
    ///  containing the <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  for which a header is retrieved. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with the specified <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    {class} function GetMetafileHeader(stream: DDN.mscorlib.DNStream): DNMetafileHeader; overload;

  end;

  ///<summary>Defines a graphic metafile. A metafile contains records that describe a sequence of graphics operations that can be recorded (constructed) and played back (displayed). This class is not inheritable.</summary>
  [DNTypeName('System.Drawing.Imaging.Metafile')]
  DNMetafile = interface(DNImage)
  ['{0039BEED-721E-35E8-A37D-1DBBB36A5A0D}']
  { getters & setters } 

    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_PhysicalDimension: DNSizeF;
    function get_Size: DNSize;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_HorizontalResolution: Single;
    function get_VerticalResolution: Single;
    function get_Flags: Int32;
    function get_RawFormat: DNImageFormat;
    function get_PixelFormat: DNPixelFormat;
    function get_Palette: DNColorPalette;
    procedure set_Palette(value: DNColorPalette);
    function get_FrameDimensionsList: TArray<DDN.mscorlib.DNGuid>;
    function get_PropertyIdList: TArray<Int32>;
    function get_PropertyItems: TArray<DNPropertyItem>;

  { methods } 

    ///<summary>Returns the <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Imaging.MetafileHeader" />
    ///  associated with this <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    function GetMetafileHeader: DNMetafileHeader; overload;
    ///<summary>Returns a Windows handle to an enhanced <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</summary>
    ///<returns>A Windows handle to this enhanced <see cref="T:System.Drawing.Imaging.Metafile" />
    ///  .</returns>
    function GetHenhmetafile: IntPtr;
    ///<summary>Plays an individual metafile record.</summary>
    ///  <param name="recordType">Element of the <see cref="T:System.Drawing.Imaging.EmfPlusRecordType" />
    ///  that specifies the type of metafile record being played. </param>
    ///  <param name="flags">A set of flags that specify attributes of the record. </param>
    ///  <param name="dataSize">The number of bytes in the record data. </param>
    ///  <param name="data">An array of bytes that contains the record data. </param>
    procedure PlayRecord(recordType: DNEmfPlusRecordType; flags: Int32; dataSize: Int32; data: TArray<Byte>);
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Image" />
    ///  this method creates, cast as an object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Returns information about the parameters supported by the specified image encoder.</summary>
    ///  <param name="encoder">A GUID that specifies the image encoder. </param>
    ///<returns>An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that contains an array of <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  objects. Each <see cref="T:System.Drawing.Imaging.EncoderParameter" />
    ///  contains information about one of the parameters supported by the specified image encoder.</returns>
    function GetEncoderParameterList(encoder: DDN.mscorlib.DNGuid): DNEncoderParameters;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file or stream.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file in the specified format.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="format" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; format: DNImageFormat); overload;
    ///<summary>Saves this <see cref="T:System.Drawing.Image" />
    ///  to the specified file, with the specified encoder and image-encoder parameters.</summary>
    ///  <param name="filename">A string that contains the name of the file to which to save this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  to use for this <see cref="T:System.Drawing.Image" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  or <paramref name="encoder" />
    ///  is <see langword="null." />
    ///</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.-or- The image was saved to the same file it was created from.</exception>
    procedure Save(filename: string; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Saves this image to the specified stream in the specified format.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that specifies the format of the saved image. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="format" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNImageFormat); overload;
    ///<summary>Saves this image to the specified stream, with the specified encoder and image encoder parameters.</summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  where the image will be saved. </param>
    ///  <param name="encoder">The <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that specifies parameters used by the image encoder. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Runtime.InteropServices.ExternalException">The image was saved with the wrong image format.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; encoder: DNImageCodecInfo; encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method. Use this method to save selected frames from a multiple-frame image to another multiple-frame image.</summary>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    procedure SaveAdd(encoderParams: DNEncoderParameters); overload;
    ///<summary>Adds a frame to the file or stream specified in a previous call to the <see cref="Overload:System.Drawing.Image.Save" />
    ///  method.</summary>
    ///  <param name="image">An <see cref="T:System.Drawing.Image" />
    ///  that contains the frame to add. </param>
    ///  <param name="encoderParams">An <see cref="T:System.Drawing.Imaging.EncoderParameters" />
    ///  that holds parameters required by the image encoder that is used by the save-add operation. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="image" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure SaveAdd(image: DNImage; encoderParams: DNEncoderParameters); overload;
    function GetBounds(out pageUnit: DNGraphicsUnit): DNRectangleF;
    ///<summary>Returns a thumbnail for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="thumbWidth">The width, in pixels, of the requested thumbnail image. </param>
    ///  <param name="thumbHeight">The height, in pixels, of the requested thumbnail image. </param>
    ///  <param name="callback">A <see cref="T:System.Drawing.Image.GetThumbnailImageAbort" />
    ///  delegate.
    ///  NoteÂ Â Â You must create a delegate and pass a reference to the delegate as the <paramref name="callback" />
    ///  parameter, but the delegate is not used.</param>
    ///  <param name="callbackData">Must be <see cref="F:System.IntPtr.Zero" />
    ///  . </param>
    ///<returns>An <see cref="T:System.Drawing.Image" />
    ///  that represents the thumbnail.</returns>
    function GetThumbnailImage(thumbWidth: Int32; thumbHeight: Int32; callback: DNImage_GetThumbnailImageAbort; callbackData: IntPtr): DNImage;
    ///<summary>Returns the number of frames of the specified dimension.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///<returns>The number of frames in the specified dimension.</returns>
    function GetFrameCount(dimension: DNFrameDimension): Int32;
    ///<summary>Selects the frame specified by the dimension and index.</summary>
    ///  <param name="dimension">A <see cref="T:System.Drawing.Imaging.FrameDimension" />
    ///  that specifies the identity of the dimension type. </param>
    ///  <param name="frameIndex">The index of the active frame. </param>
    ///<returns>Always returns 0.</returns>
    function SelectActiveFrame(dimension: DNFrameDimension; frameIndex: Int32): Int32;
    ///<summary>Rotates, flips, or rotates and flips the <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="rotateFlipType">A <see cref="T:System.Drawing.RotateFlipType" />
    ///  member that specifies the type of rotation and flip to apply to the image. </param>
    procedure RotateFlip(rotateFlipType: DNRotateFlipType);
    ///<summary>Gets the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to get. </param>
    ///<returns>The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  this method gets.</returns>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    function GetPropertyItem(propid: Int32): DNPropertyItem;
    ///<summary>Removes the specified property item from this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propid">The ID of the property item to remove. </param>
    ///<exception cref="T:System.ArgumentException">The image does not contain the requested property item.-or-The image format for this image does not support property items.</exception>
    procedure RemovePropertyItem(propid: Int32);
    ///<summary>Stores a property item (piece of metadata) in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///  <param name="propitem">The <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  to be stored. </param>
    ///<exception cref="T:System.ArgumentException">The image format of this image does not support property items.</exception>
    procedure SetPropertyItem(propitem: DNPropertyItem);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets an object that provides additional data about the image.</summary>
    ///<returns>The <see cref="T:System.Object" />
    ///  that provides additional data about the image.</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    ///<summary>Gets the width and height of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that represents the width and height of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PhysicalDimension: DNSizeF read get_PhysicalDimension;
    ///<summary>Gets the width and height, in pixels, of this image.</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that represents the width and height, in pixels, of this image.</returns>
    property Size: DNSize read get_Size;
    ///<summary>Gets the width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The width, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Width: Int32 read get_Width;
    ///<summary>Gets the height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The height, in pixels, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Height: Int32 read get_Height;
    ///<summary>Gets the horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property HorizontalResolution: Single read get_HorizontalResolution;
    ///<summary>Gets the vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property VerticalResolution: Single read get_VerticalResolution;
    ///<summary>Gets attribute flags for the pixel data of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The integer representing a bitwise combination of <see cref="T:System.Drawing.Imaging.ImageFlags" />
    ///  for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Flags: Int32 read get_Flags;
    ///<summary>Gets the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///  that represents the file format of this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property RawFormat: DNImageFormat read get_RawFormat;
    ///<summary>Gets the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.PixelFormat" />
    ///  that represents the pixel format for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property PixelFormat: DNPixelFormat read get_PixelFormat;
    ///<summary>Gets or sets the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Imaging.ColorPalette" />
    ///  that represents the color palette used for this <see cref="T:System.Drawing.Image" />
    ///  .</returns>
    property Palette: DNColorPalette read get_Palette write set_Palette;
    ///<summary>Gets an array of GUIDs that represent the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of GUIDs that specify the dimensions of frames within this <see cref="T:System.Drawing.Image" />
    ///  from most significant to least significant.</returns>
    property FrameDimensionsList: TArray<DDN.mscorlib.DNGuid> read get_FrameDimensionsList;
    ///<summary>Gets IDs of the property items stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of the property IDs, one for each property item stored in this image.</returns>
    property PropertyIdList: TArray<Int32> read get_PropertyIdList;
    ///<summary>Gets all the property items (pieces of metadata) stored in this <see cref="T:System.Drawing.Image" />
    ///  .</summary>
    ///<returns>An array of <see cref="T:System.Drawing.Imaging.PropertyItem" />
    ///  objects, one for each property item stored in the image.</returns>
    property PropertyItems: TArray<DNPropertyItem> read get_PropertyItems;
  end;

  TDNMetafile = class(TDNGenericImport<DNMetafileClass, DNMetafile>) end;

  //-------------namespace: System.Drawing----------------
  DNPenClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C1364DE7-F49E-5C06-941C-C2AD2E6AB4B2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" />
    ///  class with the specified color.</summary>
    ///  <param name="color">A <see cref="T:System.Drawing.Color" />
    ///  structure that indicates the color of this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    {class} function init(color: DNColor): DNPen; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" />
    ///  class with the specified <see cref="T:System.Drawing.Color" />
    ///  and <see cref="P:System.Drawing.Pen.Width" />
    ///  properties.</summary>
    ///  <param name="color">A <see cref="T:System.Drawing.Color" />
    ///  structure that indicates the color of this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///  <param name="width">A value indicating the width of this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    {class} function init(color: DNColor; width: Single): DNPen; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" />
    ///  class with the specified <see cref="T:System.Drawing.Brush" />
    ///  .</summary>
    ///  <param name="brush">A <see cref="T:System.Drawing.Brush" />
    ///  that determines the fill properties of this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(brush: DNBrush): DNPen; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Pen" />
    ///  class with the specified <see cref="T:System.Drawing.Brush" />
    ///  and <see cref="P:System.Drawing.Pen.Width" />
    ///  .</summary>
    ///  <param name="brush">A <see cref="T:System.Drawing.Brush" />
    ///  that determines the characteristics of this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///  <param name="width">The width of the new <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="brush" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(brush: DNBrush; width: Single): DNPen; overload;

  end;

  ///<summary>Defines an object used to draw lines and curves. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Pen')]
  DNPen = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CDC550AB-7CA0-3E7F-AB2B-7A88B65D0ECD}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_StartCap: DNLineCap;
    procedure set_StartCap(value: DNLineCap);
    function get_EndCap: DNLineCap;
    procedure set_EndCap(value: DNLineCap);
    function get_DashCap: DNDashCap;
    procedure set_DashCap(value: DNDashCap);
    function get_LineJoin: DNLineJoin;
    procedure set_LineJoin(value: DNLineJoin);
    function get_CustomStartCap: DNCustomLineCap;
    procedure set_CustomStartCap(value: DNCustomLineCap);
    function get_CustomEndCap: DNCustomLineCap;
    procedure set_CustomEndCap(value: DNCustomLineCap);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_Alignment: DNPenAlignment;
    procedure set_Alignment(value: DNPenAlignment);
    function get_Transform: DNMatrix;
    procedure set_Transform(value: DNMatrix);
    function get_PenType: DNPenType;
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_DashOffset: Single;
    procedure set_DashOffset(value: Single);
    function get_DashPattern: TArray<Single>;
    procedure set_DashPattern(value: TArray<Single>);
    function get_CompoundArray: TArray<Single>;
    procedure set_CompoundArray(value: TArray<Single>);

  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to a <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Sets the values that determine the style of cap used to end lines drawn by this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///  <param name="startCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  that represents the cap style to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///  <param name="endCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  that represents the cap style to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    ///  <param name="dashCap">A <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  that represents the cap style to use at the beginning or end of dashed lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  . </param>
    procedure SetLineCap(startCap: DNLineCap; endCap: DNLineCap; dashCap: DNDashCap);
    ///<summary>Resets the geometric transformation matrix for this <see cref="T:System.Drawing.Pen" />
    ///  to identity.</summary>
    procedure ResetTransform;
    ///<summary>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen" />
    ///  by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  object by which to multiply the transformation matrix. </param>
    procedure MultiplyTransform(matrix: DNMatrix); overload;
    ///<summary>Multiplies the transformation matrix for this <see cref="T:System.Drawing.Pen" />
    ///  by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  in the specified order.</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to multiply the transformation matrix. </param>
    ///  <param name="order">The order in which to perform the multiplication operation. </param>
    procedure MultiplyTransform(matrix: DNMatrix; order: DNMatrixOrder); overload;
    ///<summary>Translates the local geometric transformation by the specified dimensions. This method prepends the translation to the transformation.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    procedure TranslateTransform(dx: Single; dy: Single); overload;
    ///<summary>Translates the local geometric transformation by the specified dimensions in the specified order.</summary>
    ///  <param name="dx">The value of the translation in x. </param>
    ///  <param name="dy">The value of the translation in y. </param>
    ///  <param name="order">The order (prepend or append) in which to apply the translation. </param>
    procedure TranslateTransform(dx: Single; dy: Single; order: DNMatrixOrder); overload;
    ///<summary>Scales the local geometric transformation by the specified factors. This method prepends the scaling matrix to the transformation.</summary>
    ///  <param name="sx">The factor by which to scale the transformation in the x-axis direction. </param>
    ///  <param name="sy">The factor by which to scale the transformation in the y-axis direction. </param>
    procedure ScaleTransform(sx: Single; sy: Single); overload;
    ///<summary>Scales the local geometric transformation by the specified factors in the specified order.</summary>
    ///  <param name="sx">The factor by which to scale the transformation in the x-axis direction. </param>
    ///  <param name="sy">The factor by which to scale the transformation in the y-axis direction. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the scaling matrix. </param>
    procedure ScaleTransform(sx: Single; sy: Single; order: DNMatrixOrder); overload;
    ///<summary>Rotates the local geometric transformation by the specified angle. This method prepends the rotation to the transformation.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    procedure RotateTransform(angle: Single); overload;
    ///<summary>Rotates the local geometric transformation by the specified angle in the specified order.</summary>
    ///  <param name="angle">The angle of rotation. </param>
    ///  <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />
    ///  that specifies whether to append or prepend the rotation matrix. </param>
    procedure RotateTransform(angle: Single; order: DNMatrixOrder); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the width of this <see cref="T:System.Drawing.Pen" />
    ///  , in units of the <see cref="T:System.Drawing.Graphics" />
    ///  object used for drawing.</summary>
    ///<returns>The width of this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.Width" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property Width: Single read get_Width write set_Width;
    ///<summary>Gets or sets the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  values that represents the cap style used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.StartCap" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property StartCap: DNLineCap read get_StartCap write set_StartCap;
    ///<summary>Gets or sets the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  values that represents the cap style used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.LineCap" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.EndCap" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property EndCap: DNLineCap read get_EndCap write set_EndCap;
    ///<summary>Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Drawing2D.DashCap" />
    ///  values that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.DashCap" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.DashCap" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property DashCap: DNDashCap read get_DashCap write set_DashCap;
    ///<summary>Gets or sets the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.LineJoin" />
    ///  that represents the join style for the ends of two consecutive lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.LineJoin" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property LineJoin: DNLineJoin read get_LineJoin write set_LineJoin;
    ///<summary>Gets or sets a custom cap to use at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  that represents the cap used at the beginning of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.CustomStartCap" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property CustomStartCap: DNCustomLineCap read get_CustomStartCap write set_CustomStartCap;
    ///<summary>Gets or sets a custom cap to use at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.CustomLineCap" />
    ///  that represents the cap used at the end of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.CustomEndCap" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property CustomEndCap: DNCustomLineCap read get_CustomEndCap write set_CustomEndCap;
    ///<summary>Gets or sets the limit of the thickness of the join on a mitered corner.</summary>
    ///<returns>The limit of the thickness of the join on a mitered corner.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.MiterLimit" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    ///<summary>Gets or sets the alignment for this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.PenAlignment" />
    ///  that represents the alignment for this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value is not a member of <see cref="T:System.Drawing.Drawing2D.PenAlignment" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.Alignment" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property Alignment: DNPenAlignment read get_Alignment write set_Alignment;
    ///<summary>Gets or sets a copy of the geometric transformation for this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents the geometric transformation for this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.Transform" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property Transform: DNMatrix read get_Transform write set_Transform;
    ///<summary>Gets the style of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.PenType" />
    ///  enumeration that specifies the style of lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    property PenType: DNPenType read get_PenType;
    ///<summary>Gets or sets the color of this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  structure that represents the color of this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.Color" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.Brush" />
    ///  that determines attributes of this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Brush" />
    ///  that determines attributes of this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.Brush" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property Brush: DNBrush read get_Brush write set_Brush;
    ///<summary>Gets or sets the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.DashStyle" />
    ///  that represents the style used for dashed lines drawn with this <see cref="T:System.Drawing.Pen" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.DashStyle" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>Gets or sets the distance from the start of a line to the beginning of a dash pattern.</summary>
    ///<returns>The distance from the start of a line to the beginning of a dash pattern.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.DashOffset" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property DashOffset: Single read get_DashOffset write set_DashOffset;
    ///<summary>Gets or sets an array of custom dashes and spaces.</summary>
    ///<returns>An array of real numbers that specifies the lengths of alternating dashes and spaces in dashed lines.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.DashPattern" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property DashPattern: TArray<Single> read get_DashPattern write set_DashPattern;
    ///<summary>Gets or sets an array of values that specifies a compound pen. A compound pen draws a compound line made up of parallel lines and spaces.</summary>
    ///<returns>An array of real numbers that specifies the compound array. The elements in the array must be in increasing order, not less than 0, and not greater than 1.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="P:System.Drawing.Pen.CompoundArray" />
    ///  property is set on an immutable <see cref="T:System.Drawing.Pen" />
    ///  , such as those returned by the <see cref="T:System.Drawing.Pens" />
    ///  class.</exception>
    property CompoundArray: TArray<Single> read get_CompoundArray write set_CompoundArray;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Drawing----------------
  DNRegionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B5420B2-257B-550F-892E-A967F1CA8C5D}']
  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    {class} function init: DNRegion; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  from the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that defines the interior of the new <see cref="T:System.Drawing.Region" />
    ///  . </param>
    {class} function init(rect: DNRectangleF): DNRegion; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  from the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that defines the interior of the new <see cref="T:System.Drawing.Region" />
    ///  . </param>
    {class} function init(rect: DNRectangle): DNRegion; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  that defines the new <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(path: DNGraphicsPath): DNRegion; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  from the specified data.</summary>
    ///  <param name="rgnData">A <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  that defines the interior of the new <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="rgnData" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(rgnData: DNRegionData): DNRegion; overload;

  { static methods } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.Region" />
    ///  from a handle to the specified existing GDI region.</summary>
    ///  <param name="hrgn">A handle to an existing <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<returns>The new <see cref="T:System.Drawing.Region" />
    ///  .</returns>
    {class} function FromHrgn(hrgn: IntPtr): DNRegion;

  end;

  ///<summary>Describes the interior of a graphics shape composed of rectangles and paths. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Region')]
  DNRegion = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{ECA0B9D1-F8EA-3069-9AF8-DD9A08876F74}']
  { methods } 

    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Drawing.Region" />
    ///  that this method creates.</returns>
    function Clone: DNRegion;
    ///<summary>Initializes this <see cref="T:System.Drawing.Region" />
    ///  object to an infinite interior.</summary>
    procedure MakeInfinite;
    ///<summary>Initializes this <see cref="T:System.Drawing.Region" />
    ///  to an empty interior.</summary>
    procedure MakeEmpty;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the intersection of itself with the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  to intersect with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Intersect(region: DNRegion); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union of itself and the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to unite with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Union(rect: DNRectangle); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to exclude from this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Exclude(rect: DNRectangle); overload;
    ///<summary>Returns a Windows handle to this <see cref="T:System.Drawing.Region" />
    ///  in the specified graphics context.</summary>
    ///  <param name="g">The <see cref="T:System.Drawing.Graphics" />
    ///  on which this <see cref="T:System.Drawing.Region" />
    ///  is drawn. </param>
    ///<returns>A Windows handle to this <see cref="T:System.Drawing.Region" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetHrgn(g: DNGraphics): IntPtr;
    ///<summary>Tests whether this <see cref="T:System.Drawing.Region" />
    ///  has an infinite interior on the specified drawing surface.</summary>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a drawing surface. </param>
    ///<returns><see langword="true" />
    ///  if the interior of this <see cref="T:System.Drawing.Region" />
    ///  is infinite when the transformation associated with <paramref name="g" />
    ///  is applied; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  is <see langword="null" />
    ///  .</exception>
    function IsInfinite(g: DNGraphics): Boolean;
    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    procedure Dispose;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the intersection of itself with the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to intersect with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the intersection of itself with the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to intersect with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the intersection of itself with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to intersect with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Intersect(path: DNGraphicsPath); overload;
    ///<summary>Releases the handle of the <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="regionHandle">The handle to the <see cref="T:System.Drawing.Region" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="regionHandle" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure ReleaseHrgn(regionHandle: IntPtr);
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union of itself and the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to unite with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Union(rect: DNRectangleF); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union of itself and the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to unite with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Union(path: DNGraphicsPath); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union of itself and the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  to unite with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Union(region: DNRegion); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to <see cref="M:System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure &Xor(rect: DNRectangleF); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to <see cref="Overload:System.Drawing.Region.Xor" />
    ///  with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure &Xor(rect: DNRectangle); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to <see cref="Overload:System.Drawing.Region.Xor" />
    ///  with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure &Xor(path: DNGraphicsPath); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to the union minus the intersection of itself with the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  to <see cref="Overload:System.Drawing.Region.Xor" />
    ///  with this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure &Xor(region: DNRegion); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to exclude from this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Exclude(rect: DNRectangleF); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to exclude from this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Exclude(path: DNGraphicsPath); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain only the portion of its interior that does not intersect with the specified <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  to exclude from this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Exclude(region: DNRegion); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain the portion of the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure that does not intersect with this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to complement this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Complement(rect: DNRectangleF); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain the portion of the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure that does not intersect with this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to complement this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    procedure Complement(rect: DNRectangle); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain the portion of the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  that does not intersect with this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to complement this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Complement(path: DNGraphicsPath); overload;
    ///<summary>Updates this <see cref="T:System.Drawing.Region" />
    ///  to contain the portion of the specified <see cref="T:System.Drawing.Region" />
    ///  that does not intersect with this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  object to complement this <see cref="T:System.Drawing.Region" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Complement(region: DNRegion); overload;
    ///<summary>Offsets the coordinates of this <see cref="T:System.Drawing.Region" />
    ///  by the specified amount.</summary>
    ///  <param name="dx">The amount to offset this <see cref="T:System.Drawing.Region" />
    ///  horizontally. </param>
    ///  <param name="dy">The amount to offset this <see cref="T:System.Drawing.Region" />
    ///  vertically. </param>
    procedure Translate(dx: Single; dy: Single); overload;
    ///<summary>Offsets the coordinates of this <see cref="T:System.Drawing.Region" />
    ///  by the specified amount.</summary>
    ///  <param name="dx">The amount to offset this <see cref="T:System.Drawing.Region" />
    ///  horizontally. </param>
    ///  <param name="dy">The amount to offset this <see cref="T:System.Drawing.Region" />
    ///  vertically. </param>
    procedure Translate(dx: Int32; dy: Int32); overload;
    ///<summary>Transforms this <see cref="T:System.Drawing.Region" />
    ///  by the specified <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  .</summary>
    ///  <param name="matrix">The <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  by which to transform this <see cref="T:System.Drawing.Region" />
    ///  . </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Transform(matrix: DNMatrix);
    ///<summary>Gets a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents a rectangle that bounds this <see cref="T:System.Drawing.Region" />
    ///  on the drawing surface of a <see cref="T:System.Drawing.Graphics" />
    ///  object.</summary>
    ///  <param name="g">The <see cref="T:System.Drawing.Graphics" />
    ///  on which this <see cref="T:System.Drawing.Region" />
    ///  is drawn. </param>
    ///<returns>A <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the bounding rectangle for this <see cref="T:System.Drawing.Region" />
    ///  on the specified drawing surface.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetBounds(g: DNGraphics): DNRectangleF;
    ///<summary>Tests whether this <see cref="T:System.Drawing.Region" />
    ///  has an empty interior on the specified drawing surface.</summary>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a drawing surface. </param>
    ///<returns><see langword="true" />
    ///  if the interior of this <see cref="T:System.Drawing.Region" />
    ///  is empty when the transformation associated with <paramref name="g" />
    ///  is applied; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  is <see langword="null" />
    ///  .</exception>
    function IsEmpty(g: DNGraphics): Boolean;
    ///<summary>Tests whether the specified <see cref="T:System.Drawing.Region" />
    ///  is identical to this <see cref="T:System.Drawing.Region" />
    ///  on the specified drawing surface.</summary>
    ///  <param name="region">The <see cref="T:System.Drawing.Region" />
    ///  to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a drawing surface. </param>
    ///<returns><see langword="true" />
    ///  if the interior of region is identical to the interior of this region when the transformation associated with the <paramref name="g" />
    ///  parameter is applied; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="g" />
    ///  or <paramref name="region" />
    ///  is <see langword="null" />
    ///  .</exception>
    function Equals(region: DNRegion; g: DNGraphics): Boolean; overload;
    ///<summary>Returns a <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  that represents the information that describes this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Drawing2D.RegionData" />
    ///  that represents the information that describes this <see cref="T:System.Drawing.Region" />
    ///  .</returns>
    function GetRegionData: DNRegionData;
    ///<summary>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///<returns><see langword="true" />
    ///  when the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single): Boolean; overload;
    ///<summary>Tests whether the specified <see cref="T:System.Drawing.PointF" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="point">The <see cref="T:System.Drawing.PointF" />
    ///  structure to test. </param>
    ///<returns><see langword="true" />
    ///  when <paramref name="point" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPointF): Boolean; overload;
    ///<summary>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether the specified <see cref="T:System.Drawing.PointF" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="point">The <see cref="T:System.Drawing.PointF" />
    ///  structure to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when <paramref name="point" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPointF; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="width">The width of the rectangle to test. </param>
    ///  <param name="height">The height of the rectangle to test. </param>
    ///<returns><see langword="true" />
    ///  when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single): Boolean; overload;
    ///<summary>Tests whether any portion of the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to test. </param>
    ///<returns><see langword="true" />
    ///  when any portion of <paramref name="rect" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangleF): Boolean; overload;
    ///<summary>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="width">The width of the rectangle to test. </param>
    ///  <param name="height">The height of the rectangle to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Single; y: Single; width: Single; height: Single; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether any portion of the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when <paramref name="rect" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangleF; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  object when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  object.</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when the specified point is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether the specified <see cref="T:System.Drawing.Point" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="point">The <see cref="T:System.Drawing.Point" />
    ///  structure to test. </param>
    ///<returns><see langword="true" />
    ///  when <paramref name="point" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPoint): Boolean; overload;
    ///<summary>Tests whether the specified <see cref="T:System.Drawing.Point" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="point">The <see cref="T:System.Drawing.Point" />
    ///  structure to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when <paramref name="point" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(point: DNPoint; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="width">The width of the rectangle to test. </param>
    ///  <param name="height">The height of the rectangle to test. </param>
    ///<returns><see langword="true" />
    ///  when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32): Boolean; overload;
    ///<summary>Tests whether any portion of the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  when any portion of <paramref name="rect" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangle): Boolean; overload;
    ///<summary>Tests whether any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle to test. </param>
    ///  <param name="width">The width of the rectangle to test. </param>
    ///  <param name="height">The height of the rectangle to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when any portion of the specified rectangle is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(x: Int32; y: Int32; width: Int32; height: Int32; g: DNGraphics): Boolean; overload;
    ///<summary>Tests whether any portion of the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure is contained within this <see cref="T:System.Drawing.Region" />
    ///  when drawn using the specified <see cref="T:System.Drawing.Graphics" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  structure to test. </param>
    ///  <param name="g">A <see cref="T:System.Drawing.Graphics" />
    ///  that represents a graphics context. </param>
    ///<returns><see langword="true" />
    ///  when any portion of the <paramref name="rect" />
    ///  is contained within this <see cref="T:System.Drawing.Region" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsVisible(rect: DNRectangle; g: DNGraphics): Boolean; overload;
    ///<summary>Returns an array of <see cref="T:System.Drawing.RectangleF" />
    ///  structures that approximate this <see cref="T:System.Drawing.Region" />
    ///  after the specified matrix transformation is applied.</summary>
    ///  <param name="matrix">A <see cref="T:System.Drawing.Drawing2D.Matrix" />
    ///  that represents a geometric transformation to apply to the region. </param>
    ///<returns>An array of <see cref="T:System.Drawing.RectangleF" />
    ///  structures that approximate this <see cref="T:System.Drawing.Region" />
    ///  after the specified matrix transformation is applied.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="matrix" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetRegionScans(matrix: DNMatrix): TArray<DNRectangleF>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegion = class(TDNGenericImport<DNRegionClass, DNRegion>) end;

  //-------------namespace: System.Drawing----------------
  DNStringFormatClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{56C8F5D2-5C03-54B7-9939-1F548CEBD429}']
  { static getter & setter } 

    {class} function get_GenericDefault: DNStringFormat;
    {class} function get_GenericTypographic: DNStringFormat;

  { constructors } 

    ///<summary>Initializes a new <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    {class} function init: DNStringFormat; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.StringFormat" />
    ///  object with the specified <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration.</summary>
    ///  <param name="options">The <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration for the new <see cref="T:System.Drawing.StringFormat" />
    ///  object. </param>
    {class} function init(options: DNStringFormatFlags): DNStringFormat; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.StringFormat" />
    ///  object with the specified <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration and language.</summary>
    ///  <param name="options">The <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration for the new <see cref="T:System.Drawing.StringFormat" />
    ///  object. </param>
    ///  <param name="language">A value that indicates the language of the text. </param>
    {class} function init(options: DNStringFormatFlags; language: Int32): DNStringFormat; overload;
    ///<summary>Initializes a new <see cref="T:System.Drawing.StringFormat" />
    ///  object from the specified existing <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///  <param name="format">The <see cref="T:System.Drawing.StringFormat" />
    ///  object from which to initialize the new <see cref="T:System.Drawing.StringFormat" />
    ///  object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="format" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(format: DNStringFormat): DNStringFormat; overload;

  { static propertys } 

    ///<summary>Gets a generic default <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///<returns>The generic default <see cref="T:System.Drawing.StringFormat" />
    ///  object.</returns>
    {class} property GenericDefault: DNStringFormat read get_GenericDefault;
    ///<summary>Gets a generic typographic <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///<returns>A generic typographic <see cref="T:System.Drawing.StringFormat" />
    ///  object.</returns>
    {class} property GenericTypographic: DNStringFormat read get_GenericTypographic;
  end;

  ///<summary>Encapsulates text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.StringFormat')]
  DNStringFormat = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{977C6406-2374-3D2B-ADE1-F9C93DB908CA}']
  { getters & setters } 

    function get_FormatFlags: DNStringFormatFlags;
    procedure set_FormatFlags(value: DNStringFormatFlags);
    function get_Alignment: DNStringAlignment;
    procedure set_Alignment(value: DNStringAlignment);
    function get_LineAlignment: DNStringAlignment;
    procedure set_LineAlignment(value: DNStringAlignment);
    function get_HotkeyPrefix: DNHotkeyPrefix;
    procedure set_HotkeyPrefix(value: DNHotkeyPrefix);
    function get_Trimming: DNStringTrimming;
    procedure set_Trimming(value: DNStringTrimming);
    function get_DigitSubstitutionMethod: DNStringDigitSubstitute;
    function get_DigitSubstitutionLanguage: Int32;

  { methods } 

    ///<summary>Releases all resources used by this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    procedure Dispose;
    ///<summary>Creates an exact copy of this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.StringFormat" />
    ///  object this method creates.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Specifies an array of <see cref="T:System.Drawing.CharacterRange" />
    ///  structures that represent the ranges of characters measured by a call to the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  method.</summary>
    ///  <param name="ranges">An array of <see cref="T:System.Drawing.CharacterRange" />
    ///  structures that specifies the ranges of characters measured by a call to the <see cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
    ///  method. </param>
    ///<exception cref="T:System.OverflowException">More than 32 character ranges are set.</exception>
    procedure SetMeasurableCharacterRanges(ranges: TArray<DNCharacterRange>);
    ///<summary>Sets tab stops for this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///  <param name="firstTabOffset">The number of spaces between the beginning of a line of text and the first tab stop. </param>
    ///  <param name="tabStops">An array of distances between tab stops in the units specified by the <see cref="P:System.Drawing.Graphics.PageUnit" />
    ///  property. </param>
    procedure SetTabStops(firstTabOffset: Single; tabStops: TArray<Single>);
    function GetTabStops(out firstTabOffset: Single): TArray<Single>;
    ///<summary>Specifies the language and method to be used when local digits are substituted for western digits.</summary>
    ///  <param name="language">A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  property of a <see cref="T:System.Globalization.CultureInfo" />
    ///  object as the NLS language identifier. For example, suppose you create a <see cref="T:System.Globalization.CultureInfo" />
    ///  object by passing the string "ar-EG" to a <see cref="T:System.Globalization.CultureInfo" />
    ///  constructor. If you pass the <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  property of that <see cref="T:System.Globalization.CultureInfo" />
    ///  object along with <see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  to the <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  method, then Arabic-Indic digits will be substituted for western digits at display time. </param>
    ///  <param name="substitute">An element of the <see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  enumeration that specifies how digits are displayed. </param>
    procedure SetDigitSubstitution(language: Int32; substitute: DNStringDigitSubstitute);
    ///<summary>Converts this <see cref="T:System.Drawing.StringFormat" />
    ///  object to a human-readable string.</summary>
    ///<returns>A string representation of this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</returns>
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets a <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration that contains formatting information.</summary>
    ///<returns>A <see cref="T:System.Drawing.StringFormatFlags" />
    ///  enumeration that contains formatting information.</returns>
    property FormatFlags: DNStringFormatFlags read get_FormatFlags write set_FormatFlags;
    ///<summary>Gets or sets horizontal alignment of the string.</summary>
    ///<returns>A <see cref="T:System.Drawing.StringAlignment" />
    ///  enumeration that specifies the horizontal  alignment of the string.</returns>
    property Alignment: DNStringAlignment read get_Alignment write set_Alignment;
    ///<summary>Gets or sets the vertical alignment of the string.</summary>
    ///<returns>A <see cref="T:System.Drawing.StringAlignment" />
    ///  enumeration that represents the vertical line alignment.</returns>
    property LineAlignment: DNStringAlignment read get_LineAlignment write set_LineAlignment;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  object for this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Drawing.Text.HotkeyPrefix" />
    ///  object for this <see cref="T:System.Drawing.StringFormat" />
    ///  object, the default is <see cref="F:System.Drawing.Text.HotkeyPrefix.None" />
    ///  .</returns>
    property HotkeyPrefix: DNHotkeyPrefix read get_HotkeyPrefix write set_HotkeyPrefix;
    ///<summary>Gets or sets the <see cref="T:System.Drawing.StringTrimming" />
    ///  enumeration for this <see cref="T:System.Drawing.StringFormat" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Drawing.StringTrimming" />
    ///  enumeration that indicates how text drawn with this <see cref="T:System.Drawing.StringFormat" />
    ///  object is trimmed when it exceeds the edges of the layout rectangle.</returns>
    property Trimming: DNStringTrimming read get_Trimming write set_Trimming;
    ///<summary>Gets the method to be used for digit substitution.</summary>
    ///<returns>A <see cref="T:System.Drawing.StringDigitSubstitute" />
    ///  enumeration value that specifies how to substitute characters in a string that cannot be displayed because they are not supported by the current font.</returns>
    property DigitSubstitutionMethod: DNStringDigitSubstitute read get_DigitSubstitutionMethod;
    ///<summary>Gets the language that is used when local digits are substituted for western digits.</summary>
    ///<returns>A National Language Support (NLS) language identifier that identifies the language that will be used when local digits are substituted for western digits. You can pass the <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  property of a <see cref="T:System.Globalization.CultureInfo" />
    ///  object as the NLS language identifier. For example, suppose you create a <see cref="T:System.Globalization.CultureInfo" />
    ///  object by passing the string "ar-EG" to a <see cref="T:System.Globalization.CultureInfo" />
    ///  constructor. If you pass the <see cref="P:System.Globalization.CultureInfo.LCID" />
    ///  property of that <see cref="T:System.Globalization.CultureInfo" />
    ///  object along with.<see cref="F:System.Drawing.StringDigitSubstitute.Traditional" />
    ///  to the <see cref="M:System.Drawing.StringFormat.SetDigitSubstitution(System.Int32,System.Drawing.StringDigitSubstitute)" />
    ///  method, then Arabic-Indic digits will be substituted for western digits at display time.</returns>
    property DigitSubstitutionLanguage: Int32 read get_DigitSubstitutionLanguage;
  end;

  TDNStringFormat = class(TDNGenericImport<DNStringFormatClass, DNStringFormat>) end;

  //-------------namespace: System.Drawing.Printing----------------
  DNPrintingPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1AFC8C9-0BA1-5D62-A388-9EFEA4850FEF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermission" />
    ///  class with either fully restricted or unrestricted access, as specified.</summary>
    ///  <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />
    ///  values. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="state" />
    ///  is not a valid <see cref="T:System.Security.Permissions.PermissionState" />
    ///  . </exception>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNPrintingPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Printing.PrintingPermission" />
    ///  class with the level of printing access specified.</summary>
    ///  <param name="printingLevel">One of the <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  values. </param>
    {class} function init(printingLevel: DNPrintingPermissionLevel): DNPrintingPermission; overload;

  end;

  ///<summary>Controls access to printers. This class cannot be inherited.</summary>
  [DNTypeName('System.Drawing.Printing.PrintingPermission')]
  DNPrintingPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{0C882D6F-8421-398D-A24E-BBA452CC6928}']
  { getters & setters } 

    function get_Level: DNPrintingPermissionLevel;
    procedure set_Level(value: DNPrintingPermissionLevel);

  { methods } 

    ///<summary>Gets a value indicating whether the permission is unrestricted.</summary>
    ///<returns><see langword="true" />
    ///  if permission is unrestricted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Determines whether the current permission object is a subset of the specified permission.</summary>
    ///  <param name="target">A permission object that is to be tested for the subset relationship. This object must be of the same type as the current permission object. </param>
    ///<returns><see langword="true" />
    ///  if the current permission object is a subset of <paramref name="target" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is an object that is not of the same type as the current permission object. </exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates and returns a permission that is the intersection of the current permission object and a target permission object.</summary>
    ///  <param name="target">A permission object of the same type as the current permission object. </param>
    ///<returns>A new permission object that represents the intersection of the current object and the specified target. This object is <see langword="null" />
    ///  if the intersection is empty.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is an object that is not of the same type as the current permission object. </exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates a permission that combines the permission object and the target permission object.</summary>
    ///  <param name="target">A permission object of the same type as the current permission object. </param>
    ///<returns>A new permission object that represents the union of the current permission object and the specified permission object.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is an object that is not of the same type as the current permission object. </exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates and returns an identical copy of the current permission object.</summary>
    ///<returns>A copy of the current permission object.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Creates an XML encoding of the security object and its current state.</summary>
    ///<returns>An XML encoding of the security object, including any state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
    ///  <param name="esd">The XML encoding to use to reconstruct the security object. </param>
    procedure FromXml(esd: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the code's level of printing access.</summary>
    ///<returns>One of the <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" />
    ///  values.</returns>
    property Level: DNPrintingPermissionLevel read get_Level write set_Level;
  end;

  TDNPrintingPermission = class(TDNGenericImport<DNPrintingPermissionClass, DNPrintingPermission>) end;

  //-------------namespace: System.Drawing----------------
  DNCharacterRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A0A5CEDC-68FB-58AB-8D49-C44FE49BC34B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.CharacterRange" />
    ///  structure, specifying a range of character positions within a string.</summary>
    ///  <param name="First">The position of the first character in the range. For example, if <paramref name="First" />
    ///  is set to 0, the first position of the range is position 0 in the string. </param>
    ///  <param name="Length">The number of positions in the range. </param>
    {class} function init(First: Int32; Length: Int32): DNCharacterRange;

  end;

  ///<summary>Specifies a range of character positions within a string.</summary>
  [DNTypeName('System.Drawing.CharacterRange')]
  DNCharacterRange = interface(DDN.mscorlib.DNValueType)
  ['{D26938C9-752E-36A5-8A7F-544485A0DBCA}']
  { getters & setters } 

    function get_First: Int32;
    procedure set_First(value: Int32);
    function get_Length: Int32;
    procedure set_Length(value: Int32);

  { methods } 

    ///<summary>Gets a value indicating whether this object is equivalent to the specified object.</summary>
    ///  <param name="obj">The object to compare to for equality.</param>
    ///<returns><see langword="true" />
    ///  to indicate the specified object is an instance with the same <see cref="P:System.Drawing.CharacterRange.First" />
    ///  and <see cref="P:System.Drawing.CharacterRange.Length" />
    ///  value as this instance; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this instance.</summary>
    ///<returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the position in the string of the first character of this <see cref="T:System.Drawing.CharacterRange" />
    ///  .</summary>
    ///<returns>The first position of this <see cref="T:System.Drawing.CharacterRange" />
    ///  .</returns>
    property First: Int32 read get_First write set_First;
    ///<summary>Gets or sets the number of positions in this <see cref="T:System.Drawing.CharacterRange" />
    ///  .</summary>
    ///<returns>The number of positions in this <see cref="T:System.Drawing.CharacterRange" />
    ///  .</returns>
    property Length: Int32 read get_Length write set_Length;
  end;

  TDNCharacterRange = class(TDNGenericImport<DNCharacterRangeClass, DNCharacterRange>) end;

  //-------------namespace: System.Drawing----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F54C08F6-E6CF-5D2A-8BBC-E1387E7CC027}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    ///<summary>Represents a color that is <see langword="null" />
    ///  .</summary>
    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from a 32-bit ARGB value.</summary>
    ///  <param name="argb">A value specifying the 32-bit ARGB value. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  structure that this method creates.</returns>
    {class} function FromArgb(argb: Int32): DNColor; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits.</summary>
    ///  <param name="red">The red component value for the new <see cref="T:System.Drawing.Color" />
    ///  . Valid values are 0 through 255. </param>
    ///  <param name="green">The green component value for the new <see cref="T:System.Drawing.Color" />
    ///  . Valid values are 0 through 255. </param>
    ///  <param name="blue">The blue component value for the new <see cref="T:System.Drawing.Color" />
    ///  . Valid values are 0 through 255. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="red" />
    ///  , <paramref name="green" />
    ///  , or <paramref name="blue" />
    ///  is less than 0 or greater than 255.</exception>
    {class} function FromArgb(red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from the specified predefined color.</summary>
    ///  <param name="color">An element of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  that this method creates.</returns>
    {class} function FromKnownColor(color: DNKnownColor): DNColor;
    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from the specified name of a predefined color.</summary>
    ///  <param name="name">A string that is the name of a predefined color. Valid names are the same as the names of the elements of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  that this method creates.</returns>
    {class} function FromName(name: string): DNColor;
    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from the four ARGB component (alpha, red, green, and blue) values. Although this method allows a 32-bit value to be passed for each component, the value of each component is limited to 8 bits.</summary>
    ///  <param name="alpha">The alpha component. Valid values are 0 through 255. </param>
    ///  <param name="red">The red component. Valid values are 0 through 255. </param>
    ///  <param name="green">The green component. Valid values are 0 through 255. </param>
    ///  <param name="blue">The blue component. Valid values are 0 through 255. </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  , <paramref name="red" />
    ///  , <paramref name="green" />
    ///  , or <paramref name="blue" />
    ///  is less than 0 or greater than 255.</exception>
    {class} function FromArgb(alpha: Int32; red: Int32; green: Int32; blue: Int32): DNColor; overload;
    ///<summary>Creates a <see cref="T:System.Drawing.Color" />
    ///  structure from the specified <see cref="T:System.Drawing.Color" />
    ///  structure, but with the new specified alpha value. Although this method allows a 32-bit value to be passed for the alpha value, the value is limited to 8 bits.</summary>
    ///  <param name="alpha">The alpha value for the new <see cref="T:System.Drawing.Color" />
    ///  . Valid values are 0 through 255. </param>
    ///  <param name="baseColor">The <see cref="T:System.Drawing.Color" />
    ///  from which to create the new <see cref="T:System.Drawing.Color" />
    ///  . </param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  that this method creates.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="alpha" />
    ///  is less than 0 or greater than 255.</exception>
    {class} function FromArgb(alpha: Int32; baseColor: DNColor): DNColor; overload;

  { static propertys } 

    ///<summary>Gets a system-defined color.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Transparent: DNColor read get_Transparent;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF0F8FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property AliceBlue: DNColor read get_AliceBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFAEBD7.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00FFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Aqua: DNColor read get_Aqua;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF7FFFD4.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Aquamarine: DNColor read get_Aquamarine;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF0FFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Azure: DNColor read get_Azure;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF5F5DC.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Beige: DNColor read get_Beige;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFE4C4.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Bisque: DNColor read get_Bisque;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF000000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Black: DNColor read get_Black;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFEBCD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF0000FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Blue: DNColor read get_Blue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF8A2BE2.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property BlueViolet: DNColor read get_BlueViolet;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFA52A2A.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Brown: DNColor read get_Brown;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDEB887.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property BurlyWood: DNColor read get_BurlyWood;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF5F9EA0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property CadetBlue: DNColor read get_CadetBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF7FFF00.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Chartreuse: DNColor read get_Chartreuse;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFD2691E.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Chocolate: DNColor read get_Chocolate;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF7F50.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Coral: DNColor read get_Coral;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF6495ED.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFF8DC.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Cornsilk: DNColor read get_Cornsilk;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDC143C.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Crimson: DNColor read get_Crimson;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00FFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Cyan: DNColor read get_Cyan;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00008B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkBlue: DNColor read get_DarkBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF008B8B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkCyan: DNColor read get_DarkCyan;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFB8860B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFA9A9A9.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkGray: DNColor read get_DarkGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF006400.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkGreen: DNColor read get_DarkGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFBDB76B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF8B008B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF556B2F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF8C00.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkOrange: DNColor read get_DarkOrange;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF9932CC.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF8B0000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkRed: DNColor read get_DarkRed;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFE9967A.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF8FBC8F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF483D8B.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF2F4F4F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00CED1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF9400D3.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DarkViolet: DNColor read get_DarkViolet;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF1493.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DeepPink: DNColor read get_DeepPink;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00BFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF696969.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DimGray: DNColor read get_DimGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF1E90FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFB22222.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Firebrick: DNColor read get_Firebrick;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFAF0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property FloralWhite: DNColor read get_FloralWhite;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF228B22.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property ForestGreen: DNColor read get_ForestGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF00FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Fuchsia: DNColor read get_Fuchsia;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDCDCDC.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Gainsboro: DNColor read get_Gainsboro;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF8F8FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property GhostWhite: DNColor read get_GhostWhite;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFD700.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Gold: DNColor read get_Gold;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDAA520.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Goldenrod: DNColor read get_Goldenrod;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF808080.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  strcture representing a system-defined color.</returns>
    {class} property Gray: DNColor read get_Gray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF008000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Green: DNColor read get_Green;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFADFF2F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property GreenYellow: DNColor read get_GreenYellow;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF0FFF0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Honeydew: DNColor read get_Honeydew;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF69B4.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property HotPink: DNColor read get_HotPink;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFCD5C5C.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property IndianRed: DNColor read get_IndianRed;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF4B0082.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Indigo: DNColor read get_Indigo;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFFF0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Ivory: DNColor read get_Ivory;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF0E68C.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Khaki: DNColor read get_Khaki;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFE6E6FA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Lavender: DNColor read get_Lavender;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFF0F5.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF7CFC00.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LawnGreen: DNColor read get_LawnGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFACD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFADD8E6.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightBlue: DNColor read get_LightBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF08080.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightCoral: DNColor read get_LightCoral;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFE0FFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightCyan: DNColor read get_LightCyan;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFAFAD2.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF90EE90.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightGreen: DNColor read get_LightGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFD3D3D3.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightGray: DNColor read get_LightGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFB6C1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightPink: DNColor read get_LightPink;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFA07A.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightSalmon: DNColor read get_LightSalmon;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF20B2AA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF87CEFA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF778899.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFB0C4DE.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFFE0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LightYellow: DNColor read get_LightYellow;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00FF00.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Lime: DNColor read get_Lime;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF32CD32.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property LimeGreen: DNColor read get_LimeGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFAF0E6.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Linen: DNColor read get_Linen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF00FF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Magenta: DNColor read get_Magenta;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF800000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Maroon: DNColor read get_Maroon;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF66CDAA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF0000CD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumBlue: DNColor read get_MediumBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFBA55D3.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF9370DB.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumPurple: DNColor read get_MediumPurple;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF3CB371.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF7B68EE.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00FA9A.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF48D1CC.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFC71585.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF191970.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF5FFFA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MintCream: DNColor read get_MintCream;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFE4E1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property MistyRose: DNColor read get_MistyRose;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFE4B5.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Moccasin: DNColor read get_Moccasin;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFDEAD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF000080.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Navy: DNColor read get_Navy;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFDF5E6.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property OldLace: DNColor read get_OldLace;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF808000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Olive: DNColor read get_Olive;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF6B8E23.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property OliveDrab: DNColor read get_OliveDrab;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFA500.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Orange: DNColor read get_Orange;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF4500.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property OrangeRed: DNColor read get_OrangeRed;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDA70D6.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Orchid: DNColor read get_Orchid;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFEEE8AA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF98FB98.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PaleGreen: DNColor read get_PaleGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFAFEEEE.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDB7093.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFEFD5.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFDAB9.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PeachPuff: DNColor read get_PeachPuff;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFCD853F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Peru: DNColor read get_Peru;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFC0CB.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Pink: DNColor read get_Pink;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFDDA0DD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Plum: DNColor read get_Plum;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFB0E0E6.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property PowderBlue: DNColor read get_PowderBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF800080.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Purple: DNColor read get_Purple;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF0000.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Red: DNColor read get_Red;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFBC8F8F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property RosyBrown: DNColor read get_RosyBrown;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF4169E1.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF8B4513.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFA8072.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Salmon: DNColor read get_Salmon;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF4A460.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SandyBrown: DNColor read get_SandyBrown;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF2E8B57.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SeaGreen: DNColor read get_SeaGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFF5EE.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SeaShell: DNColor read get_SeaShell;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFA0522D.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Sienna: DNColor read get_Sienna;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFC0C0C0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Silver: DNColor read get_Silver;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF87CEEB.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SkyBlue: DNColor read get_SkyBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF6A5ACD.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SlateBlue: DNColor read get_SlateBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF708090.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SlateGray: DNColor read get_SlateGray;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFAFA.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Snow: DNColor read get_Snow;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF00FF7F.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SpringGreen: DNColor read get_SpringGreen;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF4682B4.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property SteelBlue: DNColor read get_SteelBlue;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFD2B48C.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Tan: DNColor read get_Tan;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF008080.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Teal: DNColor read get_Teal;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFD8BFD8.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Thistle: DNColor read get_Thistle;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFF6347.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Tomato: DNColor read get_Tomato;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF40E0D0.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Turquoise: DNColor read get_Turquoise;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFEE82EE.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Violet: DNColor read get_Violet;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF5DEB3.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Wheat: DNColor read get_Wheat;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFFFF.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property White: DNColor read get_White;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFF5F5F5.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    ///<summary>Gets a system-defined color that has an ARGB value of #FFFFFF00.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property Yellow: DNColor read get_Yellow;
    ///<summary>Gets a system-defined color that has an ARGB value of #FF9ACD32.</summary>
    ///<returns>A <see cref="T:System.Drawing.Color" />
    ///  representing a system-defined color.</returns>
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  ///<summary>Represents an ARGB (alpha, red, green, blue) color.</summary>
  [DNTypeName('System.Drawing.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{173627B3-3CAB-3FF6-8CAB-93E849D6A8A5}']
  { getters & setters } 

    function get_R: Byte;
    function get_G: Byte;
    function get_B: Byte;
    function get_A: Byte;
    function get_IsKnownColor: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsNamedColor: Boolean;
    function get_IsSystemColor: Boolean;
    function get_Name: string;

  { methods } 

    ///<summary>Gets the hue-saturation-brightness (HSB) brightness value for this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The brightness of this <see cref="T:System.Drawing.Color" />
    ///  . The brightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white.</returns>
    function GetBrightness: Single;
    ///<summary>Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The hue, in degrees, of this <see cref="T:System.Drawing.Color" />
    ///  . The hue is measured in degrees, ranging from 0.0 through 360.0, in HSB color space.</returns>
    function GetHue: Single;
    ///<summary>Gets the hue-saturation-brightness (HSB) saturation value for this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The saturation of this <see cref="T:System.Drawing.Color" />
    ///  . The saturation ranges from 0.0 through 1.0, where 0.0 is grayscale and 1.0 is the most saturated.</returns>
    function GetSaturation: Single;
    ///<summary>Gets the 32-bit ARGB value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The 32-bit ARGB value of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    function ToArgb: Int32;
    ///<summary>Gets the <see cref="T:System.Drawing.KnownColor" />
    ///  value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>An element of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration, if the <see cref="T:System.Drawing.Color" />
    ///  is created from a predefined color by using either the <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  method or the <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  method; otherwise, 0.</returns>
    function ToKnownColor: DNKnownColor;
    ///<summary>Tests whether the specified object is a <see cref="T:System.Drawing.Color" />
    ///  structure and is equivalent to this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///  <param name="obj">The object to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.Color" />
    ///  structure equivalent to this <see cref="T:System.Drawing.Color" />
    ///  structure; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>An integer value that specifies the hash code for this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Converts this <see cref="T:System.Drawing.Color" />
    ///  structure to a human-readable string.</summary>
    ///<returns>A string that is the name of this <see cref="T:System.Drawing.Color" />
    ///  , if the <see cref="T:System.Drawing.Color" />
    ///  is created from a predefined color by using either the <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  method or the <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  method; otherwise, a string that consists of the ARGB component names and their values.</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the red component value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The red component value of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    property R: Byte read get_R;
    ///<summary>Gets the green component value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The green component value of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    property G: Byte read get_G;
    ///<summary>Gets the blue component value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The blue component value of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    property B: Byte read get_B;
    ///<summary>Gets the alpha component value of this <see cref="T:System.Drawing.Color" />
    ///  structure.</summary>
    ///<returns>The alpha component value of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    property A: Byte read get_A;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Color" />
    ///  structure is a predefined color. Predefined colors are represented by the elements of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Color" />
    ///  was created from a predefined color by using either the <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  method or the <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  method; otherwise, <see langword="false" />
    ///  .</returns>
    property IsKnownColor: Boolean read get_IsKnownColor;
    ///<summary>Specifies whether this <see cref="T:System.Drawing.Color" />
    ///  structure is uninitialized.</summary>
    ///<returns>This property returns <see langword="true" />
    ///  if this color is uninitialized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Color" />
    ///  structure is a named color or a member of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Color" />
    ///  was created by using either the <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  method or the <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  method; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNamedColor: Boolean read get_IsNamedColor;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Color" />
    ///  structure is a system color. A system color is a color that is used in a Windows display element. System colors are represented by elements of the <see cref="T:System.Drawing.KnownColor" />
    ///  enumeration.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Drawing.Color" />
    ///  was created from a system color by using either the <see cref="M:System.Drawing.Color.FromName(System.String)" />
    ///  method or the <see cref="M:System.Drawing.Color.FromKnownColor(System.Drawing.KnownColor)" />
    ///  method; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSystemColor: Boolean read get_IsSystemColor;
    ///<summary>Gets the name of this <see cref="T:System.Drawing.Color" />
    ///  .</summary>
    ///<returns>The name of this <see cref="T:System.Drawing.Color" />
    ///  .</returns>
    property Name: string read get_Name;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Drawing----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B23E3AA6-C68F-573E-8FD5-A8150E5D4997}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" />
    ///  class with the specified coordinates.</summary>
    ///  <param name="x">The horizontal position of the point. </param>
    ///  <param name="y">The vertical position of the point. </param>
    {class} function init(x: Int32; y: Int32): DNPoint; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" />
    ///  class from a <see cref="T:System.Drawing.Size" />
    ///  .</summary>
    ///  <param name="sz">A <see cref="T:System.Drawing.Size" />
    ///  that specifies the coordinates for the new <see cref="T:System.Drawing.Point" />
    ///  . </param>
    {class} function init(sz: DNSize): DNPoint; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Point" />
    ///  class using coordinates specified by an integer value.</summary>
    ///  <param name="dw">A 32-bit integer that specifies the coordinates for the new <see cref="T:System.Drawing.Point" />
    ///  . </param>
    {class} function init(dw: Int32): DNPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPoint;

  { static fields } 

    ///<summary>Represents a <see cref="T:System.Drawing.Point" />
    ///  that has <see cref="P:System.Drawing.Point.X" />
    ///  and <see cref="P:System.Drawing.Point.Y" />
    ///  values set to zero. </summary>
    {class} property Empty: DNPoint read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Adds the specified <see cref="T:System.Drawing.Size" />
    ///  to the specified <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.Point" />
    ///  to add.</param>
    ///  <param name="sz">The <see cref="T:System.Drawing.Size" />
    ///  to add</param>
    ///<returns>The <see cref="T:System.Drawing.Point" />
    ///  that is the result of the addition operation.</returns>
    {class} function Add(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>Returns the result of subtracting specified <see cref="T:System.Drawing.Size" />
    ///  from the specified <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.Point" />
    ///  to be subtracted from. </param>
    ///  <param name="sz">The <see cref="T:System.Drawing.Size" />
    ///  to subtract from the <see cref="T:System.Drawing.Point" />
    ///  .</param>
    ///<returns>The <see cref="T:System.Drawing.Point" />
    ///  that is the result of the subtraction operation.</returns>
    {class} function Subtract(pt: DNPoint; sz: DNSize): DNPoint;
    ///<summary>Converts the specified <see cref="T:System.Drawing.PointF" />
    ///  to a <see cref="T:System.Drawing.Point" />
    ///  by rounding the values of the <see cref="T:System.Drawing.PointF" />
    ///  to the next higher integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.PointF" />
    ///  to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Point" />
    ///  this method converts to.</returns>
    {class} function Ceiling(value: DNPointF): DNPoint;
    ///<summary>Converts the specified <see cref="T:System.Drawing.PointF" />
    ///  to a <see cref="T:System.Drawing.Point" />
    ///  by truncating the values of the <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.PointF" />
    ///  to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Point" />
    ///  this method converts to.</returns>
    {class} function Truncate(value: DNPointF): DNPoint;
    ///<summary>Converts the specified <see cref="T:System.Drawing.PointF" />
    ///  to a <see cref="T:System.Drawing.Point" />
    ///  object by rounding the <see cref="T:System.Drawing.Point" />
    ///  values to the nearest integer.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.PointF" />
    ///  to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Point" />
    ///  this method converts to.</returns>
    {class} function Round(value: DNPointF): DNPoint;

  end;

  ///<summary>Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
  [DNTypeName('System.Drawing.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{CD6CB0A8-D6EF-33E8-888E-FE8C78CA568F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    ///<summary>Specifies whether this <see cref="T:System.Drawing.Point" />
    ///  contains the same coordinates as the specified <see cref="T:System.Object" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.Point" />
    ///  and has the same coordinates as this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///<returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Translates this <see cref="T:System.Drawing.Point" />
    ///  by the specified amount.</summary>
    ///  <param name="dx">The amount to offset the x-coordinate. </param>
    ///  <param name="dy">The amount to offset the y-coordinate. </param>
    procedure Offset(dx: Int32; dy: Int32); overload;
    ///<summary>Translates this <see cref="T:System.Drawing.Point" />
    ///  by the specified <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///  <param name="p">The <see cref="T:System.Drawing.Point" />
    ///  used offset this <see cref="T:System.Drawing.Point" />
    ///  .</param>
    procedure Offset(p: DNPoint); overload;
    ///<summary>Converts this <see cref="T:System.Drawing.Point" />
    ///  to a human-readable string.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.Point" />
    ///  is empty.</summary>
    ///<returns><see langword="true" />
    ///  if both <see cref="P:System.Drawing.Point.X" />
    ///  and <see cref="P:System.Drawing.Point.Y" />
    ///  are 0; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the x-coordinate of this <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///<returns>The x-coordinate of this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>Gets or sets the y-coordinate of this <see cref="T:System.Drawing.Point" />
    ///  .</summary>
    ///<returns>The y-coordinate of this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Drawing----------------
  DNPointFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68F24B46-D3A6-59B7-BF29-00901DF2B211}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.PointF" />
    ///  class with the specified coordinates.</summary>
    ///  <param name="x">The horizontal position of the point. </param>
    ///  <param name="y">The vertical position of the point. </param>
    {class} function init(x: Single; y: Single): DNPointF;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPointF;

  { static fields } 

    ///<summary>Represents a new instance of the <see cref="T:System.Drawing.PointF" />
    ///  class with member data left uninitialized.</summary>
    {class} property Empty: DNPointF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Translates a given <see cref="T:System.Drawing.PointF" />
    ///  by the specified <see cref="T:System.Drawing.Size" />
    ///  .</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  to translate.</param>
    ///  <param name="sz">The <see cref="T:System.Drawing.Size" />
    ///  that specifies the numbers to add to the coordinates of <paramref name="pt" />
    ///  .</param>
    ///<returns>The translated <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    {class} function Add(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>Translates a <see cref="T:System.Drawing.PointF" />
    ///  by the negative of a specified size.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  to translate.</param>
    ///  <param name="sz">The <see cref="T:System.Drawing.Size" />
    ///  that specifies the numbers to subtract from the coordinates of <paramref name="pt" />
    ///  .</param>
    ///<returns>The translated <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSize): DNPointF; overload;
    ///<summary>Translates a given <see cref="T:System.Drawing.PointF" />
    ///  by a specified <see cref="T:System.Drawing.SizeF" />
    ///  .</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  to translate.</param>
    ///  <param name="sz">The <see cref="T:System.Drawing.SizeF" />
    ///  that specifies the numbers to add to the coordinates of <paramref name="pt" />
    ///  .</param>
    ///<returns>The translated <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    {class} function Add(pt: DNPointF; sz: DNSizeF): DNPointF; overload;
    ///<summary>Translates a <see cref="T:System.Drawing.PointF" />
    ///  by the negative of a specified size.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  to translate.</param>
    ///  <param name="sz">The <see cref="T:System.Drawing.SizeF" />
    ///  that specifies the numbers to subtract from the coordinates of <paramref name="pt" />
    ///  .</param>
    ///<returns>The translated <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    {class} function Subtract(pt: DNPointF; sz: DNSizeF): DNPointF; overload;

  end;

  ///<summary>Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
  [DNTypeName('System.Drawing.PointF')]
  DNPointF = interface(DDN.mscorlib.DNValueType)
  ['{A521101D-A776-3125-B530-67030F2E0A21}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);

  { methods } 

    ///<summary>Specifies whether this <see cref="T:System.Drawing.PointF" />
    ///  contains the same coordinates as the specified <see cref="T:System.Object" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.PointF" />
    ///  and has the same coordinates as this <see cref="T:System.Drawing.Point" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.PointF" />
    ///  structure.</summary>
    ///<returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.PointF" />
    ///  structure.</returns>
    function GetHashCode: Int32;
    ///<summary>Converts this <see cref="T:System.Drawing.PointF" />
    ///  to a human readable string.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value indicating whether this <see cref="T:System.Drawing.PointF" />
    ///  is empty.</summary>
    ///<returns><see langword="true" />
    ///  if both <see cref="P:System.Drawing.PointF.X" />
    ///  and <see cref="P:System.Drawing.PointF.Y" />
    ///  are 0; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the x-coordinate of this <see cref="T:System.Drawing.PointF" />
    ///  .</summary>
    ///<returns>The x-coordinate of this <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    property X: Single read get_X write set_X;
    ///<summary>Gets or sets the y-coordinate of this <see cref="T:System.Drawing.PointF" />
    ///  .</summary>
    ///<returns>The y-coordinate of this <see cref="T:System.Drawing.PointF" />
    ///  .</returns>
    property Y: Single read get_Y write set_Y;
  end;

  TDNPointF = class(TDNGenericImport<DNPointFClass, DNPointF>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{24950A89-FDF4-51EA-80AD-37BF2A502082}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Rectangle" />
    ///  class with the specified location and size.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle. </param>
    ///  <param name="width">The width of the rectangle. </param>
    ///  <param name="height">The height of the rectangle. </param>
    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNRectangle; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Rectangle" />
    ///  class with the specified location and size.</summary>
    ///  <param name="location">A <see cref="T:System.Drawing.Point" />
    ///  that represents the upper-left corner of the rectangular region. </param>
    ///  <param name="size">A <see cref="T:System.Drawing.Size" />
    ///  that represents the width and height of the rectangular region. </param>
    {class} function init(location: DNPoint; size: DNSize): DNRectangle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    ///<summary>Represents a <see cref="T:System.Drawing.Rectangle" />
    ///  structure with its properties left uninitialized.</summary>
    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Creates a <see cref="T:System.Drawing.Rectangle" />
    ///  structure with the specified edge locations.</summary>
    ///  <param name="left">The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. </param>
    ///  <param name="top">The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. </param>
    ///  <param name="right">The x-coordinate of the lower-right corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. </param>
    ///  <param name="bottom">The y-coordinate of the lower-right corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. </param>
    ///<returns>The new <see cref="T:System.Drawing.Rectangle" />
    ///  that this method creates.</returns>
    {class} function FromLTRB(left: Int32; top: Int32; right: Int32; bottom: Int32): DNRectangle;
    ///<summary>Converts the specified <see cref="T:System.Drawing.RectangleF" />
    ///  to a <see cref="T:System.Drawing.Rectangle" />
    ///  by truncating the <see cref="T:System.Drawing.RectangleF" />
    ///  values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.RectangleF" />
    ///  to be converted. </param>
    ///<returns>The truncated value of the  <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    {class} function Truncate(value: DNRectangleF): DNRectangle;
    ///<summary>Returns a third <see cref="T:System.Drawing.Rectangle" />
    ///  structure that represents the intersection of two other <see cref="T:System.Drawing.Rectangle" />
    ///  structures. If there is no intersection, an empty <see cref="T:System.Drawing.Rectangle" />
    ///  is returned.</summary>
    ///  <param name="a">A rectangle to intersect. </param>
    ///  <param name="b">A rectangle to intersect. </param>
    ///<returns>A <see cref="T:System.Drawing.Rectangle" />
    ///  that represents the intersection of <paramref name="a" />
    ///  and <paramref name="b" />
    ///  .</returns>
    {class} function Intersect(a: DNRectangle; b: DNRectangle): DNRectangle; overload;
    ///<summary>Gets a <see cref="T:System.Drawing.Rectangle" />
    ///  structure that contains the union of two <see cref="T:System.Drawing.Rectangle" />
    ///  structures.</summary>
    ///  <param name="a">A rectangle to union. </param>
    ///  <param name="b">A rectangle to union. </param>
    ///<returns>A <see cref="T:System.Drawing.Rectangle" />
    ///  structure that bounds the union of the two <see cref="T:System.Drawing.Rectangle" />
    ///  structures.</returns>
    {class} function Union(a: DNRectangle; b: DNRectangle): DNRectangle;
    ///<summary>Converts the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure to a <see cref="T:System.Drawing.Rectangle" />
    ///  structure by rounding the <see cref="T:System.Drawing.RectangleF" />
    ///  values to the next higher integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.RectangleF" />
    ///  structure to be converted. </param>
    ///<returns>Returns a <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    {class} function Ceiling(value: DNRectangleF): DNRectangle;
    ///<summary>Converts the specified <see cref="T:System.Drawing.RectangleF" />
    ///  to a <see cref="T:System.Drawing.Rectangle" />
    ///  by rounding the <see cref="T:System.Drawing.RectangleF" />
    ///  values to the nearest integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.RectangleF" />
    ///  to be converted. </param>
    ///<returns>The rounded interger value of the <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    {class} function Round(value: DNRectangleF): DNRectangle;
    ///<summary>Creates and returns an enlarged copy of the specified <see cref="T:System.Drawing.Rectangle" />
    ///  structure. The copy is enlarged by the specified amount. The original <see cref="T:System.Drawing.Rectangle" />
    ///  structure remains unmodified.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  with which to start. This rectangle is not modified. </param>
    ///  <param name="x">The amount to inflate this <see cref="T:System.Drawing.Rectangle" />
    ///  horizontally. </param>
    ///  <param name="y">The amount to inflate this <see cref="T:System.Drawing.Rectangle" />
    ///  vertically. </param>
    ///<returns>The enlarged <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    {class} function Inflate(rect: DNRectangle; x: Int32; y: Int32): DNRectangle; overload;

  end;

  ///<summary>Stores a set of four integers that represent the location and size of a rectangle</summary>
  [DNTypeName('System.Drawing.Rectangle')]
  DNRectangle = interface(DDN.mscorlib.DNValueType)
  ['{548BBB02-5F3C-35FB-A75F-1FBD3D0D3584}']
  { getters & setters } 

    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Left: Int32;
    function get_Top: Int32;
    function get_Right: Int32;
    function get_Bottom: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>Determines if the specified point is contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the point defined by <paramref name="x" />
    ///  and <paramref name="y" />
    ///  is contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(x: Int32; y: Int32): Boolean; overload;
    ///<summary>Determines if the specified point is contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.Point" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the point represented by <paramref name="pt" />
    ///  is contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(pt: DNPoint): Boolean; overload;
    ///<summary>Determines if the rectangular region represented by <paramref name="rect" />
    ///  is entirely contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the rectangular region represented by <paramref name="rect" />
    ///  is entirely contained within this <see cref="T:System.Drawing.Rectangle" />
    ///  structure; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(rect: DNRectangle): Boolean; overload;
    ///<summary>Enlarges this <see cref="T:System.Drawing.Rectangle" />
    ///  by the specified amount.</summary>
    ///  <param name="width">The amount to inflate this <see cref="T:System.Drawing.Rectangle" />
    ///  horizontally. </param>
    ///  <param name="height">The amount to inflate this <see cref="T:System.Drawing.Rectangle" />
    ///  vertically. </param>
    procedure Inflate(width: Int32; height: Int32); overload;
    ///<summary>Replaces this <see cref="T:System.Drawing.Rectangle" />
    ///  with the intersection of itself and the specified <see cref="T:System.Drawing.Rectangle" />
    ///  .</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.Rectangle" />
    ///  with which to intersect. </param>
    procedure Intersect(rect: DNRectangle); overload;
    ///<summary>Determines if this rectangle intersects with <paramref name="rect" />
    ///  .</summary>
    ///  <param name="rect">The rectangle to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if there is any intersection, otherwise <see langword="false" />
    ///  .</returns>
    function IntersectsWith(rect: DNRectangle): Boolean;
    ///<summary>Tests whether <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.Rectangle" />
    ///  structure with the same location and size of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.Rectangle" />
    ///  structure and its <see cref="P:System.Drawing.Rectangle.X" />
    ///  , <see cref="P:System.Drawing.Rectangle.Y" />
    ///  , <see cref="P:System.Drawing.Rectangle.Width" />
    ///  , and <see cref="P:System.Drawing.Rectangle.Height" />
    ///  properties are equal to the corresponding properties of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. For information about the use of hash codes, see <see cref="M:System.Object.GetHashCode" />
    ///  .</summary>
    ///<returns>An integer that represents the hash code for this rectangle.</returns>
    function GetHashCode: Int32;
    ///<summary>Enlarges this <see cref="T:System.Drawing.Rectangle" />
    ///  by the specified amount.</summary>
    ///  <param name="size">The amount to inflate this rectangle. </param>
    procedure Inflate(size: DNSize); overload;
    ///<summary>Adjusts the location of this rectangle by the specified amount.</summary>
    ///  <param name="pos">Amount to offset the location. </param>
    procedure Offset(pos: DNPoint); overload;
    ///<summary>Adjusts the location of this rectangle by the specified amount.</summary>
    ///  <param name="x">The horizontal offset. </param>
    ///  <param name="y">The vertical offset. </param>
    procedure Offset(x: Int32; y: Int32); overload;
    ///<summary>Converts the attributes of this <see cref="T:System.Drawing.Rectangle" />
    ///  to a human-readable string.</summary>
    ///<returns>A string that contains the position, width, and height of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure Â¾ for example, {X=20, Y=20, Width=100, Height=50} </returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the coordinates of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>A <see cref="T:System.Drawing.Point" />
    ///  that represents the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</returns>
    property Location: DNPoint read get_Location write set_Location;
    ///<summary>Gets or sets the size of this <see cref="T:System.Drawing.Rectangle" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  that represents the width and height of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</returns>
    property Size: DNSize read get_Size write set_Size;
    ///<summary>Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. The default is 0.</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. The default is 0.</returns>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>Gets or sets the width of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The width of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. The default is 0.</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>Gets or sets the height of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The height of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure. The default is 0.</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>Gets the x-coordinate of the left edge of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The x-coordinate of the left edge of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</returns>
    property Left: Int32 read get_Left;
    ///<summary>Gets the y-coordinate of the top edge of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The y-coordinate of the top edge of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</returns>
    property Top: Int32 read get_Top;
    ///<summary>Gets the x-coordinate that is the sum of <see cref="P:System.Drawing.Rectangle.X" />
    ///  and <see cref="P:System.Drawing.Rectangle.Width" />
    ///  property values of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The x-coordinate that is the sum of <see cref="P:System.Drawing.Rectangle.X" />
    ///  and <see cref="P:System.Drawing.Rectangle.Width" />
    ///  of this <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    property Right: Int32 read get_Right;
    ///<summary>Gets the y-coordinate that is the sum of the <see cref="P:System.Drawing.Rectangle.Y" />
    ///  and <see cref="P:System.Drawing.Rectangle.Height" />
    ///  property values of this <see cref="T:System.Drawing.Rectangle" />
    ///  structure.</summary>
    ///<returns>The y-coordinate that is the sum of <see cref="P:System.Drawing.Rectangle.Y" />
    ///  and <see cref="P:System.Drawing.Rectangle.Height" />
    ///  of this <see cref="T:System.Drawing.Rectangle" />
    ///  .</returns>
    property Bottom: Int32 read get_Bottom;
    ///<summary>Tests whether all numeric properties of this <see cref="T:System.Drawing.Rectangle" />
    ///  have values of zero.</summary>
    ///<returns>This property returns <see langword="true" />
    ///  if the <see cref="P:System.Drawing.Rectangle.Width" />
    ///  , <see cref="P:System.Drawing.Rectangle.Height" />
    ///  , <see cref="P:System.Drawing.Rectangle.X" />
    ///  , and <see cref="P:System.Drawing.Rectangle.Y" />
    ///  properties of this <see cref="T:System.Drawing.Rectangle" />
    ///  all have values of zero; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{93812BD6-FBF9-555C-B730-A20DE51F8701}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.RectangleF" />
    ///  class with the specified location and size.</summary>
    ///  <param name="x">The x-coordinate of the upper-left corner of the rectangle. </param>
    ///  <param name="y">The y-coordinate of the upper-left corner of the rectangle. </param>
    ///  <param name="width">The width of the rectangle. </param>
    ///  <param name="height">The height of the rectangle. </param>
    {class} function init(x: Single; y: Single; width: Single; height: Single): DNRectangleF; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.RectangleF" />
    ///  class with the specified location and size.</summary>
    ///  <param name="location">A <see cref="T:System.Drawing.PointF" />
    ///  that represents the upper-left corner of the rectangular region. </param>
    ///  <param name="size">A <see cref="T:System.Drawing.SizeF" />
    ///  that represents the width and height of the rectangular region. </param>
    {class} function init(location: DNPointF; size: DNSizeF): DNRectangleF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangleF;

  { static fields } 

    ///<summary>Represents an instance of the <see cref="T:System.Drawing.RectangleF" />
    ///  class with its members uninitialized.</summary>
    {class} property Empty: DNRectangleF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.</summary>
    ///  <param name="a">A rectangle to union. </param>
    ///  <param name="b">A rectangle to union. </param>
    ///<returns>A third <see cref="T:System.Drawing.RectangleF" />
    ///  structure that contains both of the two rectangles that form the union.</returns>
    {class} function Union(a: DNRectangleF; b: DNRectangleF): DNRectangleF;
    ///<summary>Creates a <see cref="T:System.Drawing.RectangleF" />
    ///  structure with upper-left corner and lower-right corner at the specified locations.</summary>
    ///  <param name="left">The x-coordinate of the upper-left corner of the rectangular region. </param>
    ///  <param name="top">The y-coordinate of the upper-left corner of the rectangular region. </param>
    ///  <param name="right">The x-coordinate of the lower-right corner of the rectangular region. </param>
    ///  <param name="bottom">The y-coordinate of the lower-right corner of the rectangular region. </param>
    ///<returns>The new <see cref="T:System.Drawing.RectangleF" />
    ///  that this method creates.</returns>
    {class} function FromLTRB(left: Single; top: Single; right: Single; bottom: Single): DNRectangleF;
    ///<summary>Creates and returns an enlarged copy of the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure. The copy is enlarged by the specified amount and the original rectangle remains unmodified.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  to be copied. This rectangle is not modified. </param>
    ///  <param name="x">The amount to enlarge the copy of the rectangle horizontally. </param>
    ///  <param name="y">The amount to enlarge the copy of the rectangle vertically. </param>
    ///<returns>The enlarged <see cref="T:System.Drawing.RectangleF" />
    ///  .</returns>
    {class} function Inflate(rect: DNRectangleF; x: Single; y: Single): DNRectangleF; overload;
    ///<summary>Returns a <see cref="T:System.Drawing.RectangleF" />
    ///  structure that represents the intersection of two rectangles. If there is no intersection, and empty <see cref="T:System.Drawing.RectangleF" />
    ///  is returned.</summary>
    ///  <param name="a">A rectangle to intersect. </param>
    ///  <param name="b">A rectangle to intersect. </param>
    ///<returns>A third <see cref="T:System.Drawing.RectangleF" />
    ///  structure the size of which represents the overlapped area of the two specified rectangles.</returns>
    {class} function Intersect(a: DNRectangleF; b: DNRectangleF): DNRectangleF; overload;

  end;

  ///<summary>Stores a set of four floating-point numbers that represent the location and size of a rectangle. For more advanced region functions, use a <see cref="T:System.Drawing.Region" />
  ///  object.</summary>
  [DNTypeName('System.Drawing.RectangleF')]
  DNRectangleF = interface(DDN.mscorlib.DNValueType)
  ['{A5567232-D740-3F7B-BBC9-D2F5B3EB90CB}']
  { getters & setters } 

    function get_Location: DNPointF;
    procedure set_Location(value: DNPointF);
    function get_Size: DNSizeF;
    procedure set_Size(value: DNSizeF);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Left: Single;
    function get_Top: Single;
    function get_Right: Single;
    function get_Bottom: Single;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>Enlarges this <see cref="T:System.Drawing.RectangleF" />
    ///  structure by the specified amount.</summary>
    ///  <param name="x">The amount to inflate this <see cref="T:System.Drawing.RectangleF" />
    ///  structure horizontally. </param>
    ///  <param name="y">The amount to inflate this <see cref="T:System.Drawing.RectangleF" />
    ///  structure vertically. </param>
    procedure Inflate(x: Single; y: Single); overload;
    ///<summary>Tests whether <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.RectangleF" />
    ///  with the same location and size of this <see cref="T:System.Drawing.RectangleF" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.RectangleF" />
    ///  and its <see langword="X" />
    ///  , <see langword="Y" />
    ///  , <see langword="Width" />
    ///  , and <see langword="Height" />
    ///  properties are equal to the corresponding properties of this <see cref="T:System.Drawing.RectangleF" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Determines if the specified point is contained within this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="x">The x-coordinate of the point to test. </param>
    ///  <param name="y">The y-coordinate of the point to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the point defined by <paramref name="x" />
    ///  and <paramref name="y" />
    ///  is contained within this <see cref="T:System.Drawing.RectangleF" />
    ///  structure; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(x: Single; y: Single): Boolean; overload;
    ///<summary>Determines if the specified point is contained within this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the point represented by the <paramref name="pt" />
    ///  parameter is contained within this <see cref="T:System.Drawing.RectangleF" />
    ///  structure; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(pt: DNPointF): Boolean; overload;
    ///<summary>Determines if the rectangular region represented by <paramref name="rect" />
    ///  is entirely contained within this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The <see cref="T:System.Drawing.RectangleF" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if the rectangular region represented by <paramref name="rect" />
    ///  is entirely contained within the rectangular region represented by this <see cref="T:System.Drawing.RectangleF" />
    ///  ; otherwise <see langword="false" />
    ///  .</returns>
    function &Contains(rect: DNRectangleF): Boolean; overload;
    ///<summary>Gets the hash code for this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. For information about the use of hash codes, see <see langword="Object.GetHashCode" />
    ///  .</summary>
    ///<returns>The hash code for this <see cref="T:System.Drawing.RectangleF" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Enlarges this <see cref="T:System.Drawing.RectangleF" />
    ///  by the specified amount.</summary>
    ///  <param name="size">The amount to inflate this rectangle. </param>
    procedure Inflate(size: DNSizeF); overload;
    ///<summary>Replaces this <see cref="T:System.Drawing.RectangleF" />
    ///  structure with the intersection of itself and the specified <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///  <param name="rect">The rectangle to intersect. </param>
    procedure Intersect(rect: DNRectangleF); overload;
    ///<summary>Determines if this rectangle intersects with <paramref name="rect" />
    ///  .</summary>
    ///  <param name="rect">The rectangle to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if there is any intersection.</returns>
    function IntersectsWith(rect: DNRectangleF): Boolean;
    ///<summary>Adjusts the location of this rectangle by the specified amount.</summary>
    ///  <param name="pos">The amount to offset the location. </param>
    procedure Offset(pos: DNPointF); overload;
    ///<summary>Adjusts the location of this rectangle by the specified amount.</summary>
    ///  <param name="x">The amount to offset the location horizontally. </param>
    ///  <param name="y">The amount to offset the location vertically. </param>
    procedure Offset(x: Single; y: Single); overload;
    ///<summary>Converts the <see langword="Location" />
    ///  and <see cref="T:System.Drawing.Size" />
    ///  of this <see cref="T:System.Drawing.RectangleF" />
    ///  to a human-readable string.</summary>
    ///<returns>A string that contains the position, width, and height of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. For example, "{X=20, Y=20, Width=100, Height=50}".</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the coordinates of the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>A <see cref="T:System.Drawing.PointF" />
    ///  that represents the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</returns>
    property Location: DNPointF read get_Location write set_Location;
    ///<summary>Gets or sets the size of this <see cref="T:System.Drawing.RectangleF" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  that represents the width and height of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</returns>
    property Size: DNSizeF read get_Size write set_Size;
    ///<summary>Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The x-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. The default is 0.</returns>
    property X: Single read get_X write set_X;
    ///<summary>Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The y-coordinate of the upper-left corner of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. The default is 0.</returns>
    property Y: Single read get_Y write set_Y;
    ///<summary>Gets or sets the width of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The width of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. The default is 0.</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>Gets or sets the height of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The height of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. The default is 0.</returns>
    property Height: Single read get_Height write set_Height;
    ///<summary>Gets the x-coordinate of the left edge of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The x-coordinate of the left edge of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. </returns>
    property Left: Single read get_Left;
    ///<summary>Gets the y-coordinate of the top edge of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The y-coordinate of the top edge of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</returns>
    property Top: Single read get_Top;
    ///<summary>Gets the x-coordinate that is the sum of <see cref="P:System.Drawing.RectangleF.X" />
    ///  and <see cref="P:System.Drawing.RectangleF.Width" />
    ///  of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The x-coordinate that is the sum of <see cref="P:System.Drawing.RectangleF.X" />
    ///  and <see cref="P:System.Drawing.RectangleF.Width" />
    ///  of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure. </returns>
    property Right: Single read get_Right;
    ///<summary>Gets the y-coordinate that is the sum of <see cref="P:System.Drawing.RectangleF.Y" />
    ///  and <see cref="P:System.Drawing.RectangleF.Height" />
    ///  of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</summary>
    ///<returns>The y-coordinate that is the sum of <see cref="P:System.Drawing.RectangleF.Y" />
    ///  and <see cref="P:System.Drawing.RectangleF.Height" />
    ///  of this <see cref="T:System.Drawing.RectangleF" />
    ///  structure.</returns>
    property Bottom: Single read get_Bottom;
    ///<summary>Tests whether the <see cref="P:System.Drawing.RectangleF.Width" />
    ///  or <see cref="P:System.Drawing.RectangleF.Height" />
    ///  property of this <see cref="T:System.Drawing.RectangleF" />
    ///  has a value of zero.</summary>
    ///<returns>This property returns <see langword="true" />
    ///  if the <see cref="P:System.Drawing.RectangleF.Width" />
    ///  or <see cref="P:System.Drawing.RectangleF.Height" />
    ///  property of this <see cref="T:System.Drawing.RectangleF" />
    ///  has a value of zero; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNRectangleF = class(TDNGenericImport<DNRectangleFClass, DNRectangleF>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{156B7BC2-8B4A-54A9-9F29-1BBCFEFCB428}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Size" />
    ///  structure from the specified <see cref="T:System.Drawing.Point" />
    ///  structure.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.Point" />
    ///  structure from which to initialize this <see cref="T:System.Drawing.Size" />
    ///  structure. </param>
    {class} function init(pt: DNPoint): DNSize; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.Size" />
    ///  structure from the specified dimensions.</summary>
    ///  <param name="width">The width component of the new <see cref="T:System.Drawing.Size" />
    ///  . </param>
    ///  <param name="height">The height component of the new <see cref="T:System.Drawing.Size" />
    ///  . </param>
    {class} function init(width: Int32; height: Int32): DNSize; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSize;

  { static fields } 

    ///<summary>Gets a <see cref="T:System.Drawing.Size" />
    ///  structure that has a <see cref="P:System.Drawing.Size.Height" />
    ///  and <see cref="P:System.Drawing.Size.Width" />
    ///  value of 0. </summary>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  that has a <see cref="P:System.Drawing.Size.Height" />
    ///  and <see cref="P:System.Drawing.Size.Width" />
    ///  value of 0.</returns>
    {class} property Empty: DNSize read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Adds the width and height of one <see cref="T:System.Drawing.Size" />
    ///  structure to the width and height of another <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///  <param name="sz1">The first <see cref="T:System.Drawing.Size" />
    ///  structure to add.</param>
    ///  <param name="sz2">The second <see cref="T:System.Drawing.Size" />
    ///  structure to add.</param>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that is the result of the addition operation.</returns>
    {class} function Add(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>Converts the specified <see cref="T:System.Drawing.SizeF" />
    ///  structure to a <see cref="T:System.Drawing.Size" />
    ///  structure by rounding the values of the <see cref="T:System.Drawing.Size" />
    ///  structure to the next higher integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.SizeF" />
    ///  structure to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Size" />
    ///  structure this method converts to.</returns>
    {class} function Ceiling(value: DNSizeF): DNSize;
    ///<summary>Subtracts the width and height of one <see cref="T:System.Drawing.Size" />
    ///  structure from the width and height of another <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///  <param name="sz1">The <see cref="T:System.Drawing.Size" />
    ///  structure on the left side of the subtraction operator. </param>
    ///  <param name="sz2">The <see cref="T:System.Drawing.Size" />
    ///  structure on the right side of the subtraction operator. </param>
    ///<returns>A <see cref="T:System.Drawing.Size" />
    ///  structure that is a result of the subtraction operation.</returns>
    {class} function Subtract(sz1: DNSize; sz2: DNSize): DNSize;
    ///<summary>Converts the specified <see cref="T:System.Drawing.SizeF" />
    ///  structure to a <see cref="T:System.Drawing.Size" />
    ///  structure by truncating the values of the <see cref="T:System.Drawing.SizeF" />
    ///  structure to the next lower integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.SizeF" />
    ///  structure to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Size" />
    ///  structure this method converts to.</returns>
    {class} function Truncate(value: DNSizeF): DNSize;
    ///<summary>Converts the specified <see cref="T:System.Drawing.SizeF" />
    ///  structure to a <see cref="T:System.Drawing.Size" />
    ///  structure by rounding the values of the <see cref="T:System.Drawing.SizeF" />
    ///  structure to the nearest integer values.</summary>
    ///  <param name="value">The <see cref="T:System.Drawing.SizeF" />
    ///  structure to convert. </param>
    ///<returns>The <see cref="T:System.Drawing.Size" />
    ///  structure this method converts to.</returns>
    {class} function Round(value: DNSizeF): DNSize;

  end;

  ///<summary>Stores an ordered pair of integers, which specify a <see cref="P:System.Drawing.Size.Height" />
  ///  and <see cref="P:System.Drawing.Size.Width" />
  ///  .</summary>
  [DNTypeName('System.Drawing.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{ECD5EB7F-1CD0-3F82-9997-5E4C9AB9F326}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);

  { methods } 

    ///<summary>Tests to see whether the specified object is a <see cref="T:System.Drawing.Size" />
    ///  structure with the same dimensions as this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.Size" />
    ///  and has the same width and height as this <see cref="T:System.Drawing.Size" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Size" />
    ///  structure.</returns>
    function GetHashCode: Int32;
    ///<summary>Creates a human-readable string that represents this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.Size" />
    ///  .</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Tests whether this <see cref="T:System.Drawing.Size" />
    ///  structure has width and height of 0.</summary>
    ///<returns>This property returns <see langword="true" />
    ///  when this <see cref="T:System.Drawing.Size" />
    ///  structure has both a width and height of 0; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the horizontal component of this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>The horizontal component of this <see cref="T:System.Drawing.Size" />
    ///  structure, typically measured in pixels.</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>Gets or sets the vertical component of this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>The vertical component of this <see cref="T:System.Drawing.Size" />
    ///  structure, typically measured in pixels.</returns>
    property Height: Int32 read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{889E69F7-7C5F-5D31-9A96-7A897B044864}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.SizeF" />
    ///  structure from the specified existing <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///  <param name="size">The <see cref="T:System.Drawing.SizeF" />
    ///  structure from which to create the new <see cref="T:System.Drawing.SizeF" />
    ///  structure. </param>
    {class} function init(size: DNSizeF): DNSizeF; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.SizeF" />
    ///  structure from the specified <see cref="T:System.Drawing.PointF" />
    ///  structure.</summary>
    ///  <param name="pt">The <see cref="T:System.Drawing.PointF" />
    ///  structure from which to initialize this <see cref="T:System.Drawing.SizeF" />
    ///  structure. </param>
    {class} function init(pt: DNPointF): DNSizeF; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Drawing.SizeF" />
    ///  structure from the specified dimensions.</summary>
    ///  <param name="width">The width component of the new <see cref="T:System.Drawing.SizeF" />
    ///  structure. </param>
    ///  <param name="height">The height component of the new <see cref="T:System.Drawing.SizeF" />
    ///  structure. </param>
    {class} function init(width: Single; height: Single): DNSizeF; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSizeF;

  { static fields } 

    ///<summary>Gets a <see cref="T:System.Drawing.SizeF" />
    ///  structure that has a <see cref="P:System.Drawing.SizeF.Height" />
    ///  and <see cref="P:System.Drawing.SizeF.Width" />
    ///  value of 0. </summary>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that has a <see cref="P:System.Drawing.SizeF.Height" />
    ///  and <see cref="P:System.Drawing.SizeF.Width" />
    ///  value of 0.</returns>
    {class} property Empty: DNSizeF read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>Adds the width and height of one <see cref="T:System.Drawing.SizeF" />
    ///  structure to the width and height of another <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///  <param name="sz1">The first <see cref="T:System.Drawing.SizeF" />
    ///  structure to add.</param>
    ///  <param name="sz2">The second <see cref="T:System.Drawing.SizeF" />
    ///  structure to add.</param>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that is the result of the addition operation.</returns>
    {class} function Add(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;
    ///<summary>Subtracts the width and height of one <see cref="T:System.Drawing.SizeF" />
    ///  structure from the width and height of another <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///  <param name="sz1">The <see cref="T:System.Drawing.SizeF" />
    ///  structure on the left side of the subtraction operator. </param>
    ///  <param name="sz2">The <see cref="T:System.Drawing.SizeF" />
    ///  structure on the right side of the subtraction operator. </param>
    ///<returns>A <see cref="T:System.Drawing.SizeF" />
    ///  structure that is a result of the subtraction operation.</returns>
    {class} function Subtract(sz1: DNSizeF; sz2: DNSizeF): DNSizeF;

  end;

  ///<summary>Stores an ordered pair of floating-point numbers, typically the width and height of a rectangle.</summary>
  [DNTypeName('System.Drawing.SizeF')]
  DNSizeF = interface(DDN.mscorlib.DNValueType)
  ['{56ABB41C-4516-30F6-882E-57F234AB5028}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);

  { methods } 

    ///<summary>Tests to see whether the specified object is a <see cref="T:System.Drawing.SizeF" />
    ///  structure with the same dimensions as this <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///  <param name="obj">The <see cref="T:System.Object" />
    ///  to test. </param>
    ///<returns>This method returns <see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Drawing.SizeF" />
    ///  and has the same width and height as this <see cref="T:System.Drawing.SizeF" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a hash code for this <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>An integer value that specifies a hash value for this <see cref="T:System.Drawing.Size" />
    ///  structure.</returns>
    function GetHashCode: Int32;
    ///<summary>Converts a <see cref="T:System.Drawing.SizeF" />
    ///  structure to a <see cref="T:System.Drawing.PointF" />
    ///  structure.</summary>
    ///<returns>Returns a <see cref="T:System.Drawing.PointF" />
    ///  structure.</returns>
    function ToPointF: DNPointF;
    ///<summary>Converts a <see cref="T:System.Drawing.SizeF" />
    ///  structure to a <see cref="T:System.Drawing.Size" />
    ///  structure.</summary>
    ///<returns>Returns a <see cref="T:System.Drawing.Size" />
    ///  structure.</returns>
    function ToSize: DNSize;
    ///<summary>Creates a human-readable string that represents this <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///<returns>A string that represents this <see cref="T:System.Drawing.SizeF" />
    ///  structure.</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that indicates whether this <see cref="T:System.Drawing.SizeF" />
    ///  structure has zero width and height.</summary>
    ///<returns>This property returns <see langword="true" />
    ///  when this <see cref="T:System.Drawing.SizeF" />
    ///  structure has both a width and height of zero; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the horizontal component of this <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///<returns>The horizontal component of this <see cref="T:System.Drawing.SizeF" />
    ///  structure, typically measured in pixels.</returns>
    property Width: Single read get_Width write set_Width;
    ///<summary>Gets or sets the vertical component of this <see cref="T:System.Drawing.SizeF" />
    ///  structure.</summary>
    ///<returns>The vertical component of this <see cref="T:System.Drawing.SizeF" />
    ///  structure, typically measured in pixels.</returns>
    property Height: Single read get_Height write set_Height;
  end;

  TDNSizeF = class(TDNGenericImport<DNSizeFClass, DNSizeF>) end;


implementation


initialization
  LoadAssemblyModule('System.Drawing.dll', True);

finalization

end.
