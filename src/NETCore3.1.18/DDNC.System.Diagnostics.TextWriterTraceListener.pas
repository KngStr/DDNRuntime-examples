//----------------------------------------------------------------------------
//  System.Diagnostics.TextWriterTraceListener.dll: System.Diagnostics.TextWriterTraceListener, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Diagnostics.TextWriterTraceListener
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Diagnostics.TextWriterTraceListener;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Diagnostics.TraceSource,
  DDNC.System.Collections.Specialized;

type


{ declares }

  DNTextWriterTraceListener = interface; // type: System.Diagnostics.TextWriterTraceListener, namespace: System.Diagnostics
  DNConsoleTraceListener = interface; // type: System.Diagnostics.ConsoleTraceListener, namespace: System.Diagnostics
  DNDelimitedListTraceListener = interface; // type: System.Diagnostics.DelimitedListTraceListener, namespace: System.Diagnostics
  DNXmlWriterTraceListener = interface; // type: System.Diagnostics.XmlWriterTraceListener, namespace: System.Diagnostics


{ objects }

  //-------------namespace: System.Diagnostics----------------
  DNTextWriterTraceListenerClass = interface(DNObjectClass)
  ['{C4DA686E-D116-5FCD-AE1F-B1B310805EA2}']
  { constructors } 

    {class} function init: DNTextWriterTraceListener; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNTextWriterTraceListener; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; name: string): DNTextWriterTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter): DNTextWriterTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter; name: string): DNTextWriterTraceListener; overload;
    {class} function init(fileName: string): DNTextWriterTraceListener; overload;
    {class} function init(fileName: string; name: string): DNTextWriterTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.TextWriterTraceListener')]
  DNTextWriterTraceListener = interface(DNObject)
  ['{A9886C3E-B795-307A-8B1C-F2FBF9226066}']
  { getters & setters } 

    function get_Writer: DDNC.System.Private.CoreLib.DNTextWriter;
    procedure set_Writer(value: DDNC.System.Private.CoreLib.DNTextWriter);
    function get_Attributes: DDNC.System.Collections.Specialized.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter;
    procedure set_Filter(value: DDNC.System.Diagnostics.TraceSource.DNTraceFilter);
    function get_TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDNC.System.Diagnostics.TraceSource.DNTraceOptions);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure TraceTransfer(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDNC.System.Private.CoreLib.DNGuid);
    procedure Fail(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(message: string; category: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; format: string; args: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Writer: DDNC.System.Private.CoreLib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DDNC.System.Collections.Specialized.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNTextWriterTraceListener = class(TDNGenericImport<DNTextWriterTraceListenerClass, DNTextWriterTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConsoleTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{C165AC3C-ED04-52B6-A819-4DA5728C5298}']
  { constructors } 

    {class} function init: DNConsoleTraceListener; overload;
    {class} function init(useErrorStream: Boolean): DNConsoleTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.ConsoleTraceListener')]
  DNConsoleTraceListener = interface(DNTextWriterTraceListener)
  ['{7F22D758-CA91-3E5E-A9E6-EEB9CBC5A9FF}']
  { getters & setters } 

    function get_Writer: DDNC.System.Private.CoreLib.DNTextWriter;
    procedure set_Writer(value: DDNC.System.Private.CoreLib.DNTextWriter);
    function get_Attributes: DDNC.System.Collections.Specialized.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter;
    procedure set_Filter(value: DDNC.System.Diagnostics.TraceSource.DNTraceFilter);
    function get_TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDNC.System.Diagnostics.TraceSource.DNTraceOptions);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure TraceTransfer(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDNC.System.Private.CoreLib.DNGuid);
    procedure Fail(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(message: string; category: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; format: string; args: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Writer: DDNC.System.Private.CoreLib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DDNC.System.Collections.Specialized.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNConsoleTraceListener = class(TDNGenericImport<DNConsoleTraceListenerClass, DNConsoleTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDelimitedListTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{4BB98AA2-98B6-5BBE-82B9-54B91CE5A74F}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNDelimitedListTraceListener; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; name: string): DNDelimitedListTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter): DNDelimitedListTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter; name: string): DNDelimitedListTraceListener; overload;
    {class} function init(fileName: string): DNDelimitedListTraceListener; overload;
    {class} function init(fileName: string; name: string): DNDelimitedListTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.DelimitedListTraceListener')]
  DNDelimitedListTraceListener = interface(DNTextWriterTraceListener)
  ['{6B14A7D3-3E65-3994-B114-414EB6699F42}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);
    function get_Writer: DDNC.System.Private.CoreLib.DNTextWriter;
    procedure set_Writer(value: DDNC.System.Private.CoreLib.DNTextWriter);
    function get_Attributes: DDNC.System.Collections.Specialized.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter;
    procedure set_Filter(value: DDNC.System.Diagnostics.TraceSource.DNTraceFilter);
    function get_TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDNC.System.Diagnostics.TraceSource.DNTraceOptions);

  { methods } 

    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; format: string; args: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure TraceTransfer(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDNC.System.Private.CoreLib.DNGuid);
    procedure Fail(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(message: string; category: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32); overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Delimiter: string read get_Delimiter write set_Delimiter;
    property Writer: DDNC.System.Private.CoreLib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DDNC.System.Collections.Specialized.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNDelimitedListTraceListener = class(TDNGenericImport<DNDelimitedListTraceListenerClass, DNDelimitedListTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNXmlWriterTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{CBFAF2E6-5A23-556E-9C39-9E10F77311E3}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNXmlWriterTraceListener; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; name: string): DNXmlWriterTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter): DNXmlWriterTraceListener; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter; name: string): DNXmlWriterTraceListener; overload;
    {class} function init(filename: string): DNXmlWriterTraceListener; overload;
    {class} function init(filename: string; name: string): DNXmlWriterTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.XmlWriterTraceListener')]
  DNXmlWriterTraceListener = interface(DNTextWriterTraceListener)
  ['{010EC829-B87A-3800-A213-8F0253FF7D8F}']
  { getters & setters } 

    function get_Writer: DDNC.System.Private.CoreLib.DNTextWriter;
    procedure set_Writer(value: DDNC.System.Private.CoreLib.DNTextWriter);
    function get_Attributes: DDNC.System.Collections.Specialized.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter;
    procedure set_Filter(value: DDNC.System.Diagnostics.TraceSource.DNTraceFilter);
    function get_TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDNC.System.Diagnostics.TraceSource.DNTraceOptions);

  { methods } 

    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; format: string; args: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure TraceData(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32; data: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure Close;
    procedure TraceTransfer(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDNC.System.Private.CoreLib.DNGuid);
    procedure Flush;
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(message: string; category: string); overload;
    procedure Write(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure WriteLine(o: DDNC.System.Private.CoreLib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DDNC.System.Diagnostics.TraceSource.DNTraceEventCache; source: string; eventType: DDNC.System.Diagnostics.TraceSource.DNTraceEventType; id: Int32); overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Writer: DDNC.System.Private.CoreLib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DDNC.System.Collections.Specialized.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDNC.System.Diagnostics.TraceSource.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDNC.System.Diagnostics.TraceSource.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNXmlWriterTraceListener = class(TDNGenericImport<DNXmlWriterTraceListenerClass, DNXmlWriterTraceListener>) end;


implementation


initialization
  LoadAssemblyModule('System.Diagnostics.TextWriterTraceListener, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
