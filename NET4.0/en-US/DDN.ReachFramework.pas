//----------------------------------------------------------------------------
//  ReachFramework.dll: ReachFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.ReachFramework
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.ReachFramework;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether a printer collates output when it prints multiple copies of a multi-page print job. </summary>
  [DNTypeName('System.Printing.Collation')]
  DNCollation = type Integer;
  DNCollationHelper = record helper for DNCollation
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Collated output.</summary>
    Collated = 1;
    ///<summary>Uncollated output.</summary>
    Uncollated = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether any changes were made to a merged <see cref="T:System.Printing.PrintTicket" />
  ///  to ensure a viable <see cref="T:System.Printing.PrintTicket" />
  ///  .</summary>
  [DNTypeName('System.Printing.ConflictStatus')]
  DNConflictStatus = type Integer;
  DNConflictStatusHelper = record helper for DNConflictStatus
  public const
    ///<summary>No conflicts were found between the initial merged print ticket and the supported printer functions.</summary>
    NoConflict = 0;
    ///<summary>One or more conflicts were found and all conflicts were resolved.</summary>
    ConflictResolved = 1;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether device font substitution is enabled on a printer.</summary>
  [DNTypeName('System.Printing.DeviceFontSubstitution')]
  DNDeviceFontSubstitution = type Integer;
  DNDeviceFontSubstitutionHelper = record helper for DNDeviceFontSubstitution
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Device font substitution is disabled.</summary>
    Off = 1;
    ///<summary>Device font substitution is enabled.</summary>
    On_ = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether a printer uses one-sided printing or some type of two-sided (duplex) printing.</summary>
  [DNTypeName('System.Printing.Duplexing')]
  DNDuplexing = type Integer;
  DNDuplexingHelper = record helper for DNDuplexing
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Output prints on only one side of each sheet. </summary>
    OneSided = 1;
    ///<summary>Output prints on both sides of each sheet, which flips along the edge parallel to <see cref="P:System.Printing.PrintDocumentImageableArea.MediaSizeWidth" />
    ///  .</summary>
    TwoSidedShortEdge = 2;
    ///<summary>Output prints on both sides of each sheet, which flips along the edge parallel to the <see cref="P:System.Printing.PrintDocumentImageableArea.MediaSizeHeight" />
    ///  .</summary>
    TwoSidedLongEdge = 3;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the input bin that is used as the source of blank paper or other print media.</summary>
  [DNTypeName('System.Printing.InputBin')]
  DNInputBin = type Integer;
  DNInputBinHelper = record helper for DNInputBin
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema. </summary>
    Unknown = 0;
    ///<summary>The automatic selection of an input bin according to the page size and media output type.</summary>
    AutoSelect = 1;
    ///<summary>A removable paper bin is used.</summary>
    Cassette = 2;
    ///<summary>A tractor feed (also called a pin feed) of continuous-feed paper is used.</summary>
    Tractor = 3;
    ///<summary>The automatic sheet feeder is used.</summary>
    AutoSheetFeeder = 4;
    ///<summary>The manual input bin is used.</summary>
    Manual = 5;
  end;


  //-------------namespace: System.Printing.Interop----------------
  ///<summary>Specifies the type of default DEVMODE structure to use as the base DEVMODE for conversions of managed <see cref="T:System.Printing.PrintTicket" />
  ///  objects to unmanaged DEVMODE structures. </summary>
  [DNTypeName('System.Printing.Interop.BaseDevModeType')]
  DNBaseDevModeType = type Integer;
  DNBaseDevModeTypeHelper = record helper for DNBaseDevModeType
  public const
    ///<summary>The user's default DEVMODE structure. </summary>
    UserDefault = 0;
    ///<summary>The printer's default DEVMODE structure. </summary>
    PrinterDefault = 1;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies how to print content that contains color or shades of gray.</summary>
  [DNTypeName('System.Printing.OutputColor')]
  DNOutputColor = type Integer;
  DNOutputColorHelper = record helper for DNOutputColor
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Output that prints in color.</summary>
    Color = 1;
    ///<summary>Output that prints in a grayscale. </summary>
    Grayscale = 2;
    ///<summary>Output that prints in a single color and with the same degree of intensity.</summary>
    Monochrome = 3;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the types of output quality for a print device.</summary>
  [DNTypeName('System.Printing.OutputQuality')]
  DNOutputQuality = type Integer;
  DNOutputQualityHelper = record helper for DNOutputQuality
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Automatically selects a quality type that is based on the contents of a print job.</summary>
    Automatic = 1;
    ///<summary>Draft quality.</summary>
    Draft = 2;
    ///<summary>Fax quality.</summary>
    Fax = 3;
    ///<summary>Higher than normal quality.</summary>
    High = 4;
    ///<summary>Normal quality.</summary>
    Normal = 5;
    ///<summary>Photographic quality. For more information, see Notes on OutputQuality.Photographic in the Remarks section.</summary>
    Photographic = 6;
    ///<summary>Text quality.</summary>
    Text = 7;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether a print device prints to the edge of the media or provides an unprinted margin around the edge.</summary>
  [DNTypeName('System.Printing.PageBorderless')]
  DNPageBorderless = type Integer;
  DNPageBorderlessHelper = record helper for DNPageBorderless
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined.</summary>
    Unknown = 0;
    ///<summary>Borderless printing, that is, the device prints to the edge of the print media.</summary>
    Borderless = 1;
    ///<summary>Printing with a border, that is, the device provides an unprinted margin around the edge of the print media.</summary>
    None = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the page size or roll width of the paper or other print media.</summary>
  [DNTypeName('System.Printing.PageMediaSizeName')]
  DNPageMediaSizeName = type Integer;
  DNPageMediaSizeNameHelper = record helper for DNPageMediaSizeName
  public const
    ///<summary>Unknown paper size</summary>
    Unknown = 0;
    ///<summary>A0</summary>
    ISOA0 = 1;
    ///<summary>A1</summary>
    ISOA1 = 2;
    ///<summary>A10</summary>
    ISOA10 = 3;
    ///<summary>A2</summary>
    ISOA2 = 4;
    ///<summary>A3</summary>
    ISOA3 = 5;
    ///<summary>A3 Rotated</summary>
    ISOA3Rotated = 6;
    ///<summary>A3 Extra</summary>
    ISOA3Extra = 7;
    ///<summary>A4</summary>
    ISOA4 = 8;
    ///<summary>A4 Rotated</summary>
    ISOA4Rotated = 9;
    ///<summary>A4 Extra</summary>
    ISOA4Extra = 10;
    ///<summary>A5</summary>
    ISOA5 = 11;
    ///<summary>A5 Rotated</summary>
    ISOA5Rotated = 12;
    ///<summary>A5 Extra</summary>
    ISOA5Extra = 13;
    ///<summary>A6</summary>
    ISOA6 = 14;
    ///<summary>A6 Rotated</summary>
    ISOA6Rotated = 15;
    ///<summary>A7</summary>
    ISOA7 = 16;
    ///<summary>A8</summary>
    ISOA8 = 17;
    ///<summary>A9</summary>
    ISOA9 = 18;
    ///<summary>B0</summary>
    ISOB0 = 19;
    ///<summary>B1</summary>
    ISOB1 = 20;
    ///<summary>B10</summary>
    ISOB10 = 21;
    ///<summary>B2</summary>
    ISOB2 = 22;
    ///<summary>B3</summary>
    ISOB3 = 23;
    ///<summary>B4</summary>
    ISOB4 = 24;
    ///<summary>B4 Envelope</summary>
    ISOB4Envelope = 25;
    ///<summary>B5 Envelope</summary>
    ISOB5Envelope = 26;
    ///<summary>B5 Extra</summary>
    ISOB5Extra = 27;
    ///<summary>B7</summary>
    ISOB7 = 28;
    ///<summary>B8</summary>
    ISOB8 = 29;
    ///<summary>B9</summary>
    ISOB9 = 30;
    ///<summary>C0</summary>
    ISOC0 = 31;
    ///<summary>C1</summary>
    ISOC1 = 32;
    ///<summary>C10</summary>
    ISOC10 = 33;
    ///<summary>C2</summary>
    ISOC2 = 34;
    ///<summary>C3</summary>
    ISOC3 = 35;
    ///<summary>C3 Envelope</summary>
    ISOC3Envelope = 36;
    ///<summary>C4</summary>
    ISOC4 = 37;
    ///<summary>C4 Envelope</summary>
    ISOC4Envelope = 38;
    ///<summary>C5</summary>
    ISOC5 = 39;
    ///<summary>C5 Envelope</summary>
    ISOC5Envelope = 40;
    ///<summary>C6</summary>
    ISOC6 = 41;
    ///<summary>C6 Envelope</summary>
    ISOC6Envelope = 42;
    ///<summary>C6C5 Envelope</summary>
    ISOC6C5Envelope = 43;
    ///<summary>C7</summary>
    ISOC7 = 44;
    ///<summary>C8</summary>
    ISOC8 = 45;
    ///<summary>C9</summary>
    ISOC9 = 46;
    ///<summary>DL Envelope</summary>
    ISODLEnvelope = 47;
    ///<summary>DL Envelope Rotated</summary>
    ISODLEnvelopeRotated = 48;
    ///<summary>SRA 3</summary>
    ISOSRA3 = 49;
    ///<summary>Quadruple Hagaki Postcard</summary>
    JapanQuadrupleHagakiPostcard = 50;
    ///<summary>Japanese Industrial Standard B0</summary>
    JISB0 = 51;
    ///<summary>Japanese Industrial Standard B1</summary>
    JISB1 = 52;
    ///<summary>Japanese Industrial Standard B10</summary>
    JISB10 = 53;
    ///<summary>Japanese Industrial Standard B2</summary>
    JISB2 = 54;
    ///<summary>Japanese Industrial Standard B3</summary>
    JISB3 = 55;
    ///<summary>Japanese Industrial Standard B4</summary>
    JISB4 = 56;
    ///<summary>Japanese Industrial Standard B4 Rotated</summary>
    JISB4Rotated = 57;
    ///<summary>Japanese Industrial Standard B5</summary>
    JISB5 = 58;
    ///<summary>Japanese Industrial Standard B5 Rotated</summary>
    JISB5Rotated = 59;
    ///<summary>Japanese Industrial Standard B6</summary>
    JISB6 = 60;
    ///<summary>Japanese Industrial Standard B6 Rotated</summary>
    JISB6Rotated = 61;
    ///<summary>Japanese Industrial Standard B7</summary>
    JISB7 = 62;
    ///<summary>Japanese Industrial Standard B8</summary>
    JISB8 = 63;
    ///<summary>Japanese Industrial Standard B9</summary>
    JISB9 = 64;
    ///<summary>Chou 3 Envelope</summary>
    JapanChou3Envelope = 65;
    ///<summary>Chou 3 Envelope Rotated</summary>
    JapanChou3EnvelopeRotated = 66;
    ///<summary>Chou 4 Envelope</summary>
    JapanChou4Envelope = 67;
    ///<summary>Chou 4 Envelope Rotated</summary>
    JapanChou4EnvelopeRotated = 68;
    ///<summary>Hagaki Postcard</summary>
    JapanHagakiPostcard = 69;
    ///<summary>Hagaki Postcard Rotated</summary>
    JapanHagakiPostcardRotated = 70;
    ///<summary>Kaku 2 Envelope</summary>
    JapanKaku2Envelope = 71;
    ///<summary>Kaku 2 Envelope Rotated</summary>
    JapanKaku2EnvelopeRotated = 72;
    ///<summary>Kaku 3 Envelope</summary>
    JapanKaku3Envelope = 73;
    ///<summary>Kaku 3 Envelope Rotated</summary>
    JapanKaku3EnvelopeRotated = 74;
    ///<summary>You 4 Envelope</summary>
    JapanYou4Envelope = 75;
    ///<summary>10 x 11</summary>
    NorthAmerica10x11 = 76;
    ///<summary>10 x 14</summary>
    NorthAmerica10x14 = 77;
    ///<summary>11 x 17</summary>
    NorthAmerica11x17 = 78;
    ///<summary>9 x 11</summary>
    NorthAmerica9x11 = 79;
    ///<summary>Architecture A Sheet</summary>
    NorthAmericaArchitectureASheet = 80;
    ///<summary>Architecture B Sheet</summary>
    NorthAmericaArchitectureBSheet = 81;
    ///<summary>Architecture C Sheet</summary>
    NorthAmericaArchitectureCSheet = 82;
    ///<summary>Architecture D Sheet</summary>
    NorthAmericaArchitectureDSheet = 83;
    ///<summary>Architecture E Sheet</summary>
    NorthAmericaArchitectureESheet = 84;
    ///<summary>C Sheet</summary>
    NorthAmericaCSheet = 85;
    ///<summary>D Sheet</summary>
    NorthAmericaDSheet = 86;
    ///<summary>E Sheet</summary>
    NorthAmericaESheet = 87;
    ///<summary>Executive</summary>
    NorthAmericaExecutive = 88;
    ///<summary>German Legal Fanfold</summary>
    NorthAmericaGermanLegalFanfold = 89;
    ///<summary>German Standard Fanfold</summary>
    NorthAmericaGermanStandardFanfold = 90;
    ///<summary>Legal</summary>
    NorthAmericaLegal = 91;
    ///<summary>Legal Extra</summary>
    NorthAmericaLegalExtra = 92;
    ///<summary>Letter </summary>
    NorthAmericaLetter = 93;
    ///<summary>Letter Rotated</summary>
    NorthAmericaLetterRotated = 94;
    ///<summary>Letter Extra</summary>
    NorthAmericaLetterExtra = 95;
    ///<summary>Letter Plus</summary>
    NorthAmericaLetterPlus = 96;
    ///<summary>Monarch Envelope</summary>
    NorthAmericaMonarchEnvelope = 97;
    ///<summary>Note</summary>
    NorthAmericaNote = 98;
    ///<summary>#10 Envelope</summary>
    NorthAmericaNumber10Envelope = 99;
    ///<summary>#10 Envelope Rotated</summary>
    NorthAmericaNumber10EnvelopeRotated = 100;
    ///<summary>#9 Envelope</summary>
    NorthAmericaNumber9Envelope = 101;
    ///<summary>#11 Envelope</summary>
    NorthAmericaNumber11Envelope = 102;
    ///<summary>#12 Envelope</summary>
    NorthAmericaNumber12Envelope = 103;
    ///<summary>#14 Envelope</summary>
    NorthAmericaNumber14Envelope = 104;
    ///<summary>Personal Envelope</summary>
    NorthAmericaPersonalEnvelope = 105;
    ///<summary>Quarto</summary>
    NorthAmericaQuarto = 106;
    ///<summary>Statement</summary>
    NorthAmericaStatement = 107;
    ///<summary>Super A</summary>
    NorthAmericaSuperA = 108;
    ///<summary>Super B</summary>
    NorthAmericaSuperB = 109;
    ///<summary>Tabloid</summary>
    NorthAmericaTabloid = 110;
    ///<summary>Tabloid Extra</summary>
    NorthAmericaTabloidExtra = 111;
    ///<summary>A4 Plus</summary>
    OtherMetricA4Plus = 112;
    ///<summary>A3 Plus</summary>
    OtherMetricA3Plus = 113;
    ///<summary>Folio</summary>
    OtherMetricFolio = 114;
    ///<summary>Invite Envelope</summary>
    OtherMetricInviteEnvelope = 115;
    ///<summary>Italian Envelope</summary>
    OtherMetricItalianEnvelope = 116;
    ///<summary>People's Republic of China #1 Envelope</summary>
    PRC1Envelope = 117;
    ///<summary>People's Republic of China #1 Envelope Rotated</summary>
    PRC1EnvelopeRotated = 118;
    ///<summary>People's Republic of China #10 Envelope</summary>
    PRC10Envelope = 119;
    ///<summary>People's Republic of China #10 Envelope Rotated</summary>
    PRC10EnvelopeRotated = 120;
    ///<summary>People's Republic of China 16K</summary>
    PRC16K = 121;
    ///<summary>People's Republic of China 16K Rotated</summary>
    PRC16KRotated = 122;
    ///<summary>People's Republic of China #2 Envelope</summary>
    PRC2Envelope = 123;
    ///<summary>People's Republic of China #2 Envelope Rotated</summary>
    PRC2EnvelopeRotated = 124;
    ///<summary>People's Republic of China 32K</summary>
    PRC32K = 125;
    ///<summary>People's Republic of China 32K Rotated</summary>
    PRC32KRotated = 126;
    ///<summary>People's Republic of China 32K Big</summary>
    PRC32KBig = 127;
    ///<summary>People's Republic of China #3 Envelope</summary>
    PRC3Envelope = 128;
    ///<summary>People's Republic of China #3 Envelope Rotated</summary>
    PRC3EnvelopeRotated = 129;
    ///<summary>People's Republic of China #4 Envelope</summary>
    PRC4Envelope = 130;
    ///<summary>People's Republic of China #4 Envelope Rotated</summary>
    PRC4EnvelopeRotated = 131;
    ///<summary>People's Republic of China #5 Envelope</summary>
    PRC5Envelope = 132;
    ///<summary>People's Republic of China #5 Envelope Rotated</summary>
    PRC5EnvelopeRotated = 133;
    ///<summary>People's Republic of China #6 Envelope</summary>
    PRC6Envelope = 134;
    ///<summary>People's Republic of China #6 Envelope Rotated</summary>
    PRC6EnvelopeRotated = 135;
    ///<summary>People's Republic of China #7 Envelope</summary>
    PRC7Envelope = 136;
    ///<summary>People's Republic of China #7 Envelope Rotated</summary>
    PRC7EnvelopeRotated = 137;
    ///<summary>People's Republic of China #8 Envelope</summary>
    PRC8Envelope = 138;
    ///<summary>People's Republic of China #8 Envelope Rotated</summary>
    PRC8EnvelopeRotated = 139;
    ///<summary>People's Republic of China #9 Envelope</summary>
    PRC9Envelope = 140;
    ///<summary>People's Republic of China #9 Envelope Rotated</summary>
    PRC9EnvelopeRotated = 141;
    ///<summary>4-inch wide roll</summary>
    Roll04Inch = 142;
    ///<summary>6-inch wide roll</summary>
    Roll06Inch = 143;
    ///<summary>8-inch wide roll</summary>
    Roll08Inch = 144;
    ///<summary>12-inch wide roll</summary>
    Roll12Inch = 145;
    ///<summary>15-inch wide roll</summary>
    Roll15Inch = 146;
    ///<summary>18-inch wide roll</summary>
    Roll18Inch = 147;
    ///<summary>22-inch wide roll</summary>
    Roll22Inch = 148;
    ///<summary>24-inch wide roll</summary>
    Roll24Inch = 149;
    ///<summary>30-inch wide roll</summary>
    Roll30Inch = 150;
    ///<summary>36-inch wide roll</summary>
    Roll36Inch = 151;
    ///<summary>54-inch wide roll</summary>
    Roll54Inch = 152;
    ///<summary>Double Hagaki Postcard</summary>
    JapanDoubleHagakiPostcard = 153;
    ///<summary>Double Hagaki Postcard Rotated</summary>
    JapanDoubleHagakiPostcardRotated = 154;
    ///<summary>L Photo</summary>
    JapanLPhoto = 155;
    ///<summary>2L Photo</summary>
    Japan2LPhoto = 156;
    ///<summary>You 1 Envelope</summary>
    JapanYou1Envelope = 157;
    ///<summary>You 2 Envelope</summary>
    JapanYou2Envelope = 158;
    ///<summary>You 3 Envelope</summary>
    JapanYou3Envelope = 159;
    ///<summary>You 4 Envelope Rotated</summary>
    JapanYou4EnvelopeRotated = 160;
    ///<summary>You 6 Envelope</summary>
    JapanYou6Envelope = 161;
    ///<summary>You 6 Envelope Rotated</summary>
    JapanYou6EnvelopeRotated = 162;
    ///<summary>4 x 6</summary>
    NorthAmerica4x6 = 163;
    ///<summary>4 x 8</summary>
    NorthAmerica4x8 = 164;
    ///<summary>5 x 7</summary>
    NorthAmerica5x7 = 165;
    ///<summary>8 x 10</summary>
    NorthAmerica8x10 = 166;
    ///<summary>10 x 12</summary>
    NorthAmerica10x12 = 167;
    ///<summary>14 x 17</summary>
    NorthAmerica14x17 = 168;
    ///<summary>Business card</summary>
    BusinessCard = 169;
    ///<summary>Credit card</summary>
    CreditCard = 170;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies types of printing paper or other media.</summary>
  [DNTypeName('System.Printing.PageMediaType')]
  DNPageMediaType = type Integer;
  DNPageMediaTypeHelper = record helper for DNPageMediaType
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>The print device selects the media.</summary>
    AutoSelect = 1;
    ///<summary>Archive-quality media.</summary>
    Archival = 2;
    ///<summary>Specialty back-printing film.</summary>
    BackPrintFilm = 3;
    ///<summary>Standard bond media.</summary>
    Bond = 4;
    ///<summary>Standard card stock.</summary>
    CardStock = 5;
    ///<summary>Continuous-feed media.</summary>
    Continuous = 6;
    ///<summary>Standard envelope.</summary>
    EnvelopePlain = 7;
    ///<summary>Window envelope.</summary>
    EnvelopeWindow = 8;
    ///<summary>Fabric media.</summary>
    Fabric = 9;
    ///<summary>Specialty high-resolution media.</summary>
    HighResolution = 10;
    ///<summary>Label media.</summary>
    Label_ = 11;
    ///<summary>Attached multipart forms.</summary>
    MultiLayerForm = 12;
    ///<summary>Individual multipart forms.</summary>
    MultiPartForm = 13;
    ///<summary>Standard photographic media.</summary>
    Photographic = 14;
    ///<summary>Film photographic media.</summary>
    PhotographicFilm = 15;
    ///<summary>Glossy photographic media.</summary>
    PhotographicGlossy = 16;
    ///<summary>High-gloss photographic media.</summary>
    PhotographicHighGloss = 17;
    ///<summary>Matte photographic media.</summary>
    PhotographicMatte = 18;
    ///<summary>Satin photographic media.</summary>
    PhotographicSatin = 19;
    ///<summary>Semi-gloss photographic media.</summary>
    PhotographicSemiGloss = 20;
    ///<summary>Plain paper.</summary>
    Plain = 21;
    ///<summary>Output to a display in continuous form.</summary>
    Screen = 22;
    ///<summary>Output to a display in paged form.</summary>
    ScreenPaged = 23;
    ///<summary>Specialty stationary.</summary>
    Stationery = 24;
    ///<summary>Tab stock, not precut (single tabs).</summary>
    TabStockFull = 25;
    ///<summary>Tab stock, precut (multiple tabs).</summary>
    TabStockPreCut = 26;
    ///<summary>Transparent sheet.</summary>
    Transparency = 27;
    ///<summary>Media that is used to transfer an image to a T-shirt.</summary>
    TShirtTransfer = 28;
    ///<summary>Unknown or unlisted media.</summary>
    None = 29;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether a print device prints multi-page documents from front-to-back or back-to-front.</summary>
  [DNTypeName('System.Printing.PageOrder')]
  DNPageOrder = type Integer;
  DNPageOrderHelper = record helper for DNPageOrder
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Output prints in front-to-back order.</summary>
    Standard = 1;
    ///<summary>Output prints in back-to-front order.</summary>
    Reverse = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies how pages of content are oriented on print media.</summary>
  [DNTypeName('System.Printing.PageOrientation')]
  DNPageOrientation = type Integer;
  DNPageOrientationHelper = record helper for DNPageOrientation
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Content of the imageable area is rotated on the page 90Â degrees counterclockwise from standard (portrait) orientation.</summary>
    Landscape = 1;
    ///<summary>Standard orientation. </summary>
    Portrait = 2;
    ///<summary>Content of the imageable area is rotated on the page 90Â degrees clockwise from standard (portrait) orientation.</summary>
    ReverseLandscape = 3;
    ///<summary>Content of the imageable area is upside down relative to standard (portrait) orientation.</summary>
    ReversePortrait = 4;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the page resolution as a qualitative, non-numerical, value. </summary>
  [DNTypeName('System.Printing.PageQualitativeResolution')]
  DNPageQualitativeResolution = type Integer;
  DNPageQualitativeResolutionHelper = record helper for DNPageQualitativeResolution
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>The default qualitative resolution for the printer.</summary>
    Default_ = 1;
    ///<summary>Draft-level quality, which is 300Â dpi for most printers. </summary>
    Draft = 2;
    ///<summary>High quality, which is 1200Â dpi or greater for most printers.</summary>
    High = 3;
    ///<summary>Normal quality, which is 600Â dpi for most printers.</summary>
    Normal = 4;
    ///<summary>Other quality. </summary>
    Other = 5;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the arrangement of pages when more than one page of content appears on a single side of print media.</summary>
  [DNTypeName('System.Printing.PagesPerSheetDirection')]
  DNPagesPerSheetDirection = type Integer;
  DNPagesPerSheetDirectionHelper = record helper for DNPagesPerSheetDirection
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Pages appear in rows, from left to right and top to bottom relative to page orientation.</summary>
    RightBottom = 1;
    ///<summary>Pages appear in columns, from top to bottom and left to right relative to page orientation.</summary>
    BottomRight = 2;
    ///<summary>Pages appear in rows, from right to left and top to bottom relative to page orientation.</summary>
    LeftBottom = 3;
    ///<summary>Pages appear in columns, from top to bottom and right to left relative to page orientation.</summary>
    BottomLeft = 4;
    ///<summary>Pages appear in rows, from left to right and bottom to top relative to page orientation.</summary>
    RightTop = 5;
    ///<summary>Pages appear in columns, from bottom to top and left to right relative to page orientation.</summary>
    TopRight = 6;
    ///<summary>Pages appear in rows, from right to left and bottom to top relative to page orientation.</summary>
    LeftTop = 7;
    ///<summary>Pages appear in columns, from bottom to top and right to left relative to page orientation.</summary>
    TopLeft = 8;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies the quality of output when a photograph is printed. The printer driver translates the <see cref="T:System.Printing.PhotoPrintingIntent" />
  ///  into quantitative values for resolution and other quality factors.</summary>
  [DNTypeName('System.Printing.PhotoPrintingIntent')]
  DNPhotoPrintingIntent = type Integer;
  DNPhotoPrintingIntentHelper = record helper for DNPhotoPrintingIntent
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>No photo-printing intent. The user sets specific quantitative properties.</summary>
    None = 1;
    ///<summary>Best quality photo printing.</summary>
    PhotoBest = 2;
    ///<summary>Draft quality photo printing.</summary>
    PhotoDraft = 3;
    ///<summary>Standard quality photo printing.</summary>
    PhotoStandard = 4;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether a <see cref="T:System.Printing.PrintTicket" />
  ///  applies to an entire print job, one document within the print job, or just a page within the print job. </summary>
  [DNTypeName('System.Printing.PrintTicketScope')]
  DNPrintTicketScope = type Integer;
  DNPrintTicketScopeHelper = record helper for DNPrintTicketScope
  public const
    ///<summary>A single page.</summary>
    PageScope = 0;
    ///<summary>A single document.</summary>
    DocumentScope = 1;
    ///<summary>An entire print job.</summary>
    JobScope = 2;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies whether, and where, a printer staples a multi-page document.</summary>
  [DNTypeName('System.Printing.Stapling')]
  DNStapling = type Integer;
  DNStaplingHelper = record helper for DNStapling
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>Multiple staples along the fold line. Also called saddle-stitch stapling.</summary>
    SaddleStitch = 1;
    ///<summary>A single staple in the lower-left corner.</summary>
    StapleBottomLeft = 2;
    ///<summary>A single staple in the lower-right corner.</summary>
    StapleBottomRight = 3;
    ///<summary>Two staples along the left edge.</summary>
    StapleDualLeft = 4;
    ///<summary>Two staples along the right edge.</summary>
    StapleDualRight = 5;
    ///<summary>Two staples along the upper edge.</summary>
    StapleDualTop = 6;
    ///<summary>Two staples along the lower edge.</summary>
    StapleDualBottom = 7;
    ///<summary>A single staple in the upper-left corner.</summary>
    StapleTopLeft = 8;
    ///<summary>A single staple in the upper-right corner.</summary>
    StapleTopRight = 9;
    ///<summary>The document is not stapled.</summary>
    None = 10;
  end;


  //-------------namespace: System.Printing----------------
  ///<summary>Specifies how a printer handles text that is formatted with a TrueType font. </summary>
  [DNTypeName('System.Printing.TrueTypeFontMode')]
  DNTrueTypeFontMode = type Integer;
  DNTrueTypeFontModeHelper = record helper for DNTrueTypeFontMode
  public const
    ///<summary>The feature (whose options are represented by this enumeration) is set to an option not defined. in the Print Schema.</summary>
    Unknown = 0;
    ///<summary>The printer driver decides the best method for handling TrueType fonts.</summary>
    Automatic = 1;
    ///<summary>The printer driver downloads the TrueType font as an outline font.</summary>
    DownloadAsOutlineFont = 2;
    ///<summary>The printer driver creates a raster font for each size of the TrueType font that it needs and downloads them all.</summary>
    DownloadAsRasterFont = 3;
    ///<summary>The printer driver downloads the TrueType font.</summary>
    DownloadAsNativeTrueTypeFont = 4;
    ///<summary>The printer driver downloads each area of text as a graphic.</summary>
    RenderAsBitmap = 5;
  end;




type


{ declares }

  DNPrintSystemException = interface; // type: System.Printing.PrintSystemException, namespace: System.Printing
  DNPrintCommitAttributesException = interface; // type: System.Printing.PrintCommitAttributesException, namespace: System.Printing
  DNPrintingNotSupportedException = interface; // type: System.Printing.PrintingNotSupportedException, namespace: System.Printing
  DNPrintJobException = interface; // type: System.Printing.PrintJobException, namespace: System.Printing
  DNPrintingCanceledException = interface; // type: System.Printing.PrintingCanceledException, namespace: System.Printing
  DNPrintQueueException = interface; // type: System.Printing.PrintQueueException, namespace: System.Printing
  DNPrintServerException = interface; // type: System.Printing.PrintServerException, namespace: System.Printing
  DNXpsException = interface; // type: System.Windows.Xps.XpsException, namespace: System.Windows.Xps
  DNXpsPackagingException = interface; // type: System.Windows.Xps.XpsPackagingException, namespace: System.Windows.Xps
  DNXpsSerializationException = interface; // type: System.Windows.Xps.XpsSerializationException, namespace: System.Windows.Xps
  DNPrintTicketConverter = interface; // type: System.Printing.Interop.PrintTicketConverter, namespace: System.Printing.Interop
  DNPageImageableArea = interface; // type: System.Printing.PageImageableArea, namespace: System.Printing
  DNPageMediaSize = interface; // type: System.Printing.PageMediaSize, namespace: System.Printing
  DNPageResolution = interface; // type: System.Printing.PageResolution, namespace: System.Printing
  DNPageScalingFactorRange = interface; // type: System.Printing.PageScalingFactorRange, namespace: System.Printing
  DNPrintCapabilities = interface; // type: System.Printing.PrintCapabilities, namespace: System.Printing
  DNPrintTicket = interface; // type: System.Printing.PrintTicket, namespace: System.Printing
  DNValidationResult = interface; // type: System.Printing.ValidationResult, namespace: System.Printing
  DNReachCompatibilityPreferences = interface; // type: System.Windows.ReachCompatibilityPreferences, namespace: System.Windows


{ objects }

  //-------------namespace: System.Printing----------------
  DNPrintSystemExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{198D5876-7199-58BF-866A-2D282915FA78}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class. </summary>
    {class} function init: DNPrintSystemException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class that provides a specific error message. </summary>
    ///  <param name="message">A string that describes the error condition.</param>
    {class} function init(message: string): DNPrintSystemException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class that provides a specific error message, including the underlying cause of the exception. </summary>
    ///  <param name="message">A string that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintSystemException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class that provides a specific error code and error message. </summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A string that describes the error condition.</param>
    {class} function init(errorCode: Int32; message: string): DNPrintSystemException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class that provides a specific error code, error message, and printer message. </summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A string that describes the error condition.</param>
    ///  <param name="printerMessage">The exception message sent by the printer driver or unmanaged print system component that caused the exception.</param>
    {class} function init(errorCode: Int32; message: string; printerMessage: string): DNPrintSystemException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemException" />
    ///  class that provides a specific error code and error message, including the underlying cause of the exception. </summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A string that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the exception.</param>
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintSystemException; overload;

  end;

  ///<summary>The exception that occurs when an error condition prevents accessing or creating a <see cref="T:System.Printing.PrintSystemObject" />
  ///  . </summary>
  [DNTypeName('System.Printing.PrintSystemException')]
  DNPrintSystemException = interface(DDN.mscorlib.DNSystemException)
  ['{8453074A-5009-38CB-A255-14E6A4606CAE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets the data that is used to serialize the object and gets the context of the serialized stream. </summary>
    ///  <param name="info">The data that is required to serialize or deserialize an object.</param>
    ///  <param name="context">The context, including source and destination, of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintSystemException = class(TDNGenericImport<DNPrintSystemExceptionClass, DNPrintSystemException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintCommitAttributesExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{896B065F-B664-540F-B9D6-1FE7BC0FDF26}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" />
    ///  class.</summary>
    {class} function init: DNPrintCommitAttributesException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" />
    ///  class and provides it with the specified message.</summary>
    ///  <param name="message">A description of the error condition.</param>
    {class} function init(message: string): DNPrintCommitAttributesException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCommitAttributesException" />
    ///  class by using the specified message and the inner <see cref="T:System.Exception" />
    ///  .</summary>
    ///  <param name="message">A description of the error condition.</param>
    ///  <param name="innerException">The underlying condition that triggered the <see cref="T:System.Printing.PrintCommitAttributesException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintCommitAttributesException; overload;
    {class} function init(errorCode: Int32; attributesSuccessList: DDN.mscorlib.DNCollection<string>; attributesFailList: DDN.mscorlib.DNCollection<string>): DNPrintCommitAttributesException; overload;
    {class} function init(errorCode: Int32; message: string; attributesSuccessList: DDN.mscorlib.DNCollection<string>; attributesFailList: DDN.mscorlib.DNCollection<string>; objectName: string): DNPrintCommitAttributesException; overload;

  end;

  ///<summary>The exception that is thrown when an error condition prevents some attributes from being committed by a <see cref="T:System.Printing.PrintSystemObject" />
  ///  to the actual computer, printer, or device that the object represents.</summary>
  [DNTypeName('System.Printing.PrintCommitAttributesException')]
  DNPrintCommitAttributesException = interface(DNPrintSystemException)
  ['{E5811729-701F-3EED-A691-C4998ADC1837}']
  { getters & setters } 

    function get_PrintObjectName: string;
    function get_CommittedAttributesCollection: DDN.mscorlib.DNCollection<string>;
    function get_FailedAttributesCollection: DDN.mscorlib.DNCollection<string>;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets information about the serialization of the object and the context of the serialized stream.</summary>
    ///  <param name="info">Stores all the data that is used to serialize the object.</param>
    ///  <param name="context">Describes the context of the serialized stream, including the source and the destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of the object that threw the exception.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  reference to the <see cref="P:System.Printing.PrintSystemObject.Name" />
    ///  property of the <see cref="T:System.Printing.PrintSystemObject" />
    ///  that threw the exception.</returns>
    property PrintObjectName: string read get_PrintObjectName;
    ///<summary>Gets a <see cref="T:System.Collections.ObjectModel.Collection`1" />
    ///  of the names of the attributes that were successfully committed.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />
    ///  of strings that identify the <see cref="T:System.Printing.PrintSystemObject" />
    ///  attributes that were successfully committed.</returns>
    property CommittedAttributesCollection: DDN.mscorlib.DNCollection<string> read get_CommittedAttributesCollection;
    ///<summary>Gets a <see cref="T:System.Collections.ObjectModel.Collection`1" />
    ///  of the names of the attributes that were not committed.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" />
    ///  of strings that identify the <see cref="T:System.Printing.PrintSystemObject" />
    ///  attributes that your program was unable to commit.</returns>
    property FailedAttributesCollection: DDN.mscorlib.DNCollection<string> read get_FailedAttributesCollection;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintCommitAttributesException = class(TDNGenericImport<DNPrintCommitAttributesExceptionClass, DNPrintCommitAttributesException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintingNotSupportedExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{93A3C180-1C4A-594C-9C00-014605529371}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNPrintingNotSupportedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNPrintingNotSupportedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintingNotSupportedException; overload;

  end;

  ///<summary>The exception that is thrown when a printing operation is not supported.</summary>
  [DNTypeName('System.Printing.PrintingNotSupportedException')]
  DNPrintingNotSupportedException = interface(DNPrintSystemException)
  ['{1698733E-23D0-354A-B8C1-812F221D5C8B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingNotSupportedException" />
    ///  class with serialized data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintingNotSupportedException = class(TDNGenericImport<DNPrintingNotSupportedExceptionClass, DNPrintingNotSupportedException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{3CE7B15C-890D-5B2C-80E3-F7664A0BDD1F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class.</summary>
    {class} function init: DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific error condition.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific error condition, including the cause of the exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error that caused the <see cref="T:System.Printing.PrintJobException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific error code and error condition.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(errorCode: Int32; message: string): DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific error code, error condition, print queue name, job name, and job ID.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
    ///  <param name="jobName">The name of the print job that caused the exception. </param>
    ///  <param name="jobId">The ID number of the print job that caused the exception. </param>
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32): DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific message, error code, error condition, print queue name, job name, and job ID.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
    ///  <param name="jobName">The name of the print job that caused the exception. </param>
    ///  <param name="jobId">The ID number of the print job that caused the exception. </param>
    ///  <param name="innerException">The underlying cause of the exception.</param>
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobException" />
    ///  class that provides a specific error code and error condition, including the underlying cause of the exception.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error that caused the <see cref="T:System.Printing.PrintJobException" />
    ///  .</param>
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;

  end;

  ///<summary>The exception that occurs when the print job does not run correctly.</summary>
  [DNTypeName('System.Printing.PrintJobException')]
  DNPrintJobException = interface(DNPrintSystemException)
  ['{D7C2A0FC-D393-31E3-86B4-0B8415750DF3}']
  { getters & setters } 

    function get_JobId: Int32;
    function get_JobName: string;
    function get_PrintQueueName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
    ///  <param name="info">The data that is required to serialize or deserialize an object.</param>
    ///  <param name="context">The context, including source and destination, of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the ID number of the print job that caused the exception.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the print job.</returns>
    property JobId: Int32 read get_JobId;
    ///<summary>Gets the name of the print job that caused the exception.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that names the print job.</returns>
    property JobName: string read get_JobName;
    ///<summary>Gets the name of the <see cref="T:System.Printing.PrintQueue" />
    ///  that was hosting the print job when the exception was thrown.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the name of the <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    property PrintQueueName: string read get_PrintQueueName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintJobException = class(TDNGenericImport<DNPrintJobExceptionClass, DNPrintJobException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintingCanceledExceptionClass = interface(DNPrintJobExceptionClass)
  ['{3CAD5CBF-2915-5F65-A32D-3B9C6AC9768C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class. </summary>
    {class} function init: DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class that provides a specific error condition.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class that provides a specific error condition, including the underlying cause of the exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class that provides a specific error code and error condition.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(errorCode: Int32; message: string): DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class that provides a specific error code and error condition, including the underlying cause of the exception.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  .</param>
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class that provides a specific error code, error condition, print queue name, job name, and job ID.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
    ///  <param name="jobName">The name of the print job that caused the exception. </param>
    ///  <param name="jobId">The ID number of the print job that caused the exception. </param>
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32): DNPrintingCanceledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintingCanceledException" />
    ///  class with a specific error code, error condition, print queue name, job name, job ID, and underlying cause of the exception.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printQueueName">The name of the print queue hosting the print job that caused the exception.</param>
    ///  <param name="jobName">The name of the print job that caused the exception. </param>
    ///  <param name="jobId">The ID number of the print job that caused the exception. </param>
    ///  <param name="innerException">The underlying cause of the exception.</param>
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;

  end;

  ///<summary>The exception that occurs when code attempts to access a canceled print job.</summary>
  [DNTypeName('System.Printing.PrintingCanceledException')]
  DNPrintingCanceledException = interface(DNPrintJobException)
  ['{6955CB38-5149-35A0-82AD-2EF01ACB166C}']
  { getters & setters } 

    function get_JobId: Int32;
    function get_JobName: string;
    function get_PrintQueueName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
    ///  <param name="info">The data that is required to serialize or deserialize an object.</param>
    ///  <param name="context">The context, including source and destination, of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the ID number of the print job that caused the exception.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  that identifies the print job.</returns>
    property JobId: Int32 read get_JobId;
    ///<summary>Gets the name of the print job that caused the exception.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that names the print job.</returns>
    property JobName: string read get_JobName;
    ///<summary>Gets the name of the <see cref="T:System.Printing.PrintQueue" />
    ///  that was hosting the print job when the exception was thrown.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the name of the <see cref="T:System.Printing.PrintQueue" />
    ///  .</returns>
    property PrintQueueName: string read get_PrintQueueName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintingCanceledException = class(TDNGenericImport<DNPrintingCanceledExceptionClass, DNPrintingCanceledException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{3DA2691E-544E-5A08-9F73-63CA571A55C8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class.</summary>
    {class} function init: DNPrintQueueException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class that provides a specific error condition.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNPrintQueueException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class that provides a specific error condition, including the underlying cause of the exception.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintQueueException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintQueueException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class that provides a specific error code, error condition, and printer name.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
    {class} function init(errorCode: Int32; message: string; printerName: string): DNPrintQueueException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class that provides a specific error code, error condition, printer name, and printer message.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
    ///  <param name="printerMessage">The exception message that was sent by the printer driver or unmanaged print system component that triggered the exception.</param>
    {class} function init(errorCode: Int32; message: string; printerName: string; printerMessage: string): DNPrintQueueException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueException" />
    ///  class that provides a specific printer name, error code, and error condition, including the underlying cause of the exception.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="printerName">The name of the printer that was being accessed when the error occurred.</param>
    ///  <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintQueueException" />
    ///  .</param>
    {class} function init(errorCode: Int32; message: string; printerName: string; innerException: DDN.mscorlib.DNException): DNPrintQueueException; overload;

  end;

  ///<summary>The exception that is thrown when an error condition prevents the accessing or creation of a <see cref="T:System.Printing.PrintQueue" />
  ///  .</summary>
  [DNTypeName('System.Printing.PrintQueueException')]
  DNPrintQueueException = interface(DNPrintSystemException)
  ['{6563EAFD-B476-3D52-A447-CA424792895B}']
  { getters & setters } 

    function get_PrinterName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
    ///  <param name="info">The data that is required to serialize or deserialize an object.</param>
    ///  <param name="context">The context, including source and destination, of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of the printer that was being accessed when the exception was thrown.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that names the printer.</returns>
    property PrinterName: string read get_PrinterName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintQueueException = class(TDNGenericImport<DNPrintQueueExceptionClass, DNPrintQueueException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintServerExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{D8796903-65A6-5F87-A05F-22EDF5B30A1E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" />
    ///  class.</summary>
    {class} function init: DNPrintServerException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" />
    ///  class that provides a specific error condition.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNPrintServerException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" />
    ///  class that provides a specific error condition, including the underlying cause of the exception. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error condition that caused the <see cref="T:System.Printing.PrintServerException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintServerException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" />
    ///  class that provides a specific error code, error condition, and print server name.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="serverName">The name of the print server that was being accessed when the error condition occurred.</param>
    {class} function init(errorCode: Int32; message: string; serverName: string): DNPrintServerException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServerException" />
    ///  class that provides a specific print server name, error code, and error condition, including the underlying cause of the exception.</summary>
    ///  <param name="errorCode">An <see cref="T:System.Int32" />
    ///  that is interpreted as an HRESULT, a coded numerical value that is assigned to a specific exception.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="serverName">The name of the print server that was being accessed when the error condition occurred.</param>
    ///  <param name="innerException">The underlying condition that caused the <see cref="T:System.Printing.PrintServerException" />
    ///  .</param>
    {class} function init(errorCode: Int32; message: string; serverName: string; innerException: DDN.mscorlib.DNException): DNPrintServerException; overload;

  end;

  ///<summary>The exception that occurs when an error condition prevents the accessing or creation of a <see cref="T:System.Printing.PrintServer" />
  ///  .</summary>
  [DNTypeName('System.Printing.PrintServerException')]
  DNPrintServerException = interface(DNPrintSystemException)
  ['{62B5E961-A6A6-3B34-8089-97D8FDD7D7C9}']
  { getters & setters } 

    function get_ServerName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Gets the data that is used to serialize the object and gets the context of the serialized stream.</summary>
    ///  <param name="info">The data that is used to serialize the object.</param>
    ///  <param name="context">The context, including source and destination, of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of the print server that was being accessed when the exception was thrown.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that names the print server.</returns>
    property ServerName: string read get_ServerName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintServerException = class(TDNGenericImport<DNPrintServerExceptionClass, DNPrintServerException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{4CC57FE5-068A-5960-B17B-42683BC6894B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" />
    ///  class. </summary>
    {class} function init: DNXpsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" />
    ///  class that provides a specific error condition.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNXpsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsException" />
    ///  class that provides a specific error condition and includes the cause of the exception. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error that caused the <see cref="T:System.Windows.Xps.XpsException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsException; overload;

  end;

  ///<summary>Serves as the base class for exceptions that are thrown by the XML Paper Specification (XPS) packaging and serialization APIs.Â </summary>
  [DNTypeName('System.Windows.Xps.XpsException')]
  DNXpsException = interface(DDN.mscorlib.DNException)
  ['{4A8AC7ED-E64B-3F6A-B2E1-8B231F12C69E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsException = class(TDNGenericImport<DNXpsExceptionClass, DNXpsException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsPackagingExceptionClass = interface(DNXpsExceptionClass)
  ['{14754F8A-7875-59DA-89A8-441F62AFCFE0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" />
    ///  class. </summary>
    {class} function init: DNXpsPackagingException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" />
    ///  class that provides a specific error condition. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNXpsPackagingException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsPackagingException" />
    ///  class that provides a specific error condition and includes the cause of the exception. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error that caused the <see cref="T:System.Windows.Xps.XpsPackagingException" />
    ///  .</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsPackagingException; overload;

  end;

  ///<summary>The exception that is thrown when reading, writing to, registering, or accessing in some other way an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  ///  . </summary>
  [DNTypeName('System.Windows.Xps.XpsPackagingException')]
  DNXpsPackagingException = interface(DNXpsException)
  ['{852654C3-4593-30FB-8D50-D1BE25D4AF4F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsPackagingException = class(TDNGenericImport<DNXpsPackagingExceptionClass, DNXpsPackagingException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsSerializationExceptionClass = interface(DNXpsExceptionClass)
  ['{59061FCA-F36B-5886-BBFE-706B676A3A84}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" />
    ///  class. </summary>
    {class} function init: DNXpsSerializationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" />
    ///  class that provides a specific error condition. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    {class} function init(message: string): DNXpsSerializationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsSerializationException" />
    ///  class that provides a specific error condition and includes the cause of the exception. </summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  that describes the error condition.</param>
    ///  <param name="innerException">The underlying error that caused the exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsSerializationException; overload;

  end;

  ///<summary>The exception that is thrown for XML Paper Specification (XPS) document serialization errors.Â </summary>
  [DNTypeName('System.Windows.Xps.XpsSerializationException')]
  DNXpsSerializationException = interface(DNXpsException)
  ['{1EDA3182-CBEC-339E-81FE-10077002F7B7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsSerializationException = class(TDNGenericImport<DNXpsSerializationExceptionClass, DNXpsSerializationException>) end;

  //-------------namespace: System.Printing.Interop----------------
  DNPrintTicketConverterClass = interface(DNObjectClass)
  ['{0D60EE77-557F-5B4B-9BD1-B4A28595200E}']
  { static getter & setter } 

    {class} function get_MaxPrintSchemaVersion: Int32;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  class for the specified printer. </summary>
    ///  <param name="deviceName">The name of the printer that is bound to the new <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  instance.</param>
    ///  <param name="clientPrintSchemaVersion">The Print Schema version to use in the <see cref="T:System.Printing.PrintTicket" />
    ///  and DEVMODE conversion.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="deviceName" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="clientPrintSchemaVersion" />
    ///  is 0 or less.</exception><exception cref="T:System.Printing.PrintQueueException">The converter was unable to bind to <paramref name="deviceName" />
    ///  .</exception>
    {class} function init(deviceName: string; clientPrintSchemaVersion: Int32): DNPrintTicketConverter;

  { static propertys } 

    ///<summary>Gets the maximum Print Schema version that <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  can support. </summary>
    ///<returns>The maximum Print Schema version that <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  can support.</returns>
    {class} property MaxPrintSchemaVersion: Int32 read get_MaxPrintSchemaVersion;
  end;

  ///<summary>Converts managed <see cref="T:System.Printing.PrintTicket" />
  ///  objects to unmanaged Graphics Device Interface (GDI) DEVMODE structures, and vice versa. </summary>
  [DNTypeName('System.Printing.Interop.PrintTicketConverter')]
  DNPrintTicketConverter = interface(DDN.mscorlib.DNIDisposable)
  ['{E6E7BB18-534B-33AC-B8D1-462876C88582}']
  { methods } 

    ///<summary>Converts the specified DEVMODE structure to a managed code <see cref="T:System.Printing.PrintTicket" />
    ///  . </summary>
    ///  <param name="devMode">A <see cref="T:System.Byte" />
    ///  array that contains the DEVMODE structure.</param>
    ///<returns>The new managed <see cref="T:System.Printing.PrintTicket" />
    ///  .</returns>
    ///<exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  is already disposed.</exception><exception cref="T:System.ArgumentNullException">The value of <paramref name="devMode" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The content of <paramref name="devMode" />
    ///  is not well-formed.</exception><exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception>
    function ConvertDevModeToPrintTicket(devMode: TArray<Byte>): DNPrintTicket; overload;
    ///<summary>Converts the specified managed <see cref="T:System.Printing.PrintTicket" />
    ///  to an unmanaged DEVMODE structure that is based on the DEVMODE structure identified by the <see cref="T:System.Printing.Interop.BaseDevModeType" />
    ///  .</summary>
    ///  <param name="printTicket">The <see cref="T:System.Printing.PrintTicket" />
    ///  to convert.</param>
    ///  <param name="baseType">A value that identifies whether to use the user default or printer default DEVMODE as the base DEVMODE.</param>
    ///<returns>A <see cref="T:System.Byte" />
    ///  array that contains the new DEVMODE structure.</returns>
    ///<exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  is already disposed.</exception><exception cref="T:System.ArgumentNullException">The value of <paramref name="printTicket" />
    ///  is null (<see langword="Nothing" />
    ///  in Visual Basic).</exception><exception cref="T:System.ArgumentException">The content of <paramref name="printTicket" />
    ///  is not well-formed.</exception><exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseType" />
    ///  is not a valid <see cref="T:System.Printing.Interop.BaseDevModeType" />
    ///  value.</exception>
    function ConvertPrintTicketToDevMode(printTicket: DNPrintTicket; baseType: DNBaseDevModeType): TArray<Byte>; overload;
    ///<summary>Releases the resources used by the <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>Converts the specified DEVMODE structure to a managed code <see cref="T:System.Printing.PrintTicket" />
    ///  that has the specified scope.</summary>
    ///  <param name="devMode">A <see cref="T:System.Byte" />
    ///  buffer containing the DEVMODE structure to convert.</param>
    ///  <param name="scope">A <see cref="T:System.Printing.PrintTicketScope" />
    ///  value that specifies whether the new <see cref="T:System.Printing.PrintTicket" />
    ///  applies to a page, a document, or an entire print job.</param>
    ///<returns>The new <see cref="T:System.Printing.PrintTicket" />
    ///  .</returns>
    ///<exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  is already disposed.</exception><exception cref="T:System.ArgumentNullException">The value of <paramref name="devMode" />
    ///  is null (<see langword="Nothing" />
    ///  in Visual Basic).</exception><exception cref="T:System.ArgumentException">The content of <paramref name="devMode" />
    ///  is not well-formed.</exception><exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="scope" />
    ///  is not a valid <see cref="T:System.Printing.PrintTicketScope" />
    ///  value.</exception>
    function ConvertDevModeToPrintTicket(devMode: TArray<Byte>; scope: DNPrintTicketScope): DNPrintTicket; overload;
    ///<summary>Converts the specified managed code <see cref="T:System.Printing.PrintTicket" />
    ///  with the specified scope, into an unmanaged DEVMODE structure that is based on the DEVMODE structure identified by the <see cref="T:System.Printing.Interop.BaseDevModeType" />
    ///  .</summary>
    ///  <param name="printTicket">The <see cref="T:System.Printing.PrintTicket" />
    ///  to convert.</param>
    ///  <param name="baseType">A value that identifies whether to use the user default or printer default DEVMODE as the base DEVMODE.</param>
    ///  <param name="scope">A <see cref="T:System.Printing.PrintTicketScope" />
    ///  value that specifies whether the conversion of the <see cref="T:System.Printing.PrintTicket" />
    ///  should be done at the scope of a page, a document, or an entire print job.</param>
    ///<returns>A <see cref="T:System.Byte" />
    ///  buffer that represents the new DEVMODE structure.</returns>
    ///<exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Printing.Interop.PrintTicketConverter" />
    ///  is already disposed.</exception><exception cref="T:System.ArgumentNullException">The value of <paramref name="printTicket" />
    ///  is null (<see langword="Nothing" />
    ///  in Visual Basic).</exception><exception cref="T:System.ArgumentException">The content of <paramref name="printTicket" />
    ///  is not well-formed.</exception><exception cref="T:System.Printing.PrintQueueException">The conversion failed.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseType" />
    ///  is not a valid <see cref="T:System.Printing.Interop.BaseDevModeType" />
    ///  value.-or-The <paramref name="scope" />
    ///  is not a valid <see cref="T:System.Printing.PrintTicketScope" />
    ///  value.</exception>
    function ConvertPrintTicketToDevMode(printTicket: DNPrintTicket; baseType: DNBaseDevModeType; scope: DNPrintTicketScope): TArray<Byte>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintTicketConverter = class(TDNGenericImport<DNPrintTicketConverterClass, DNPrintTicketConverter>) end;

  //-------------namespace: System.Printing----------------
  DNPageImageableAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71C551C5-A6E3-52D4-B474-4AB29834B2BC}']
  end;

  ///<summary>Represents the area of a page that can be printed. </summary>
  [DNTypeName('System.Printing.PageImageableArea')]
  DNPageImageableArea = interface(DDN.mscorlib.DNObject)
  ['{96606B8B-7B5F-31C6-9540-F5FFA7D9EF68}']
  { getters & setters } 

    function get_OriginWidth: Double;
    function get_OriginHeight: Double;
    function get_ExtentWidth: Double;
    function get_ExtentHeight: Double;

  { methods } 

    ///<summary>Returns the <see cref="T:System.String" />
    ///  representation of <see cref="T:System.Printing.PageImageableArea" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the property values of the <see cref="T:System.Printing.PageImageableArea" />
    ///  .</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the origin width, which is the distance from the left edge of the page to the upper-left corner of the imageable area (also called the "origin" of the imageable area).</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the left edge of the page to the left edge of the imageable area in pixels (1/96 of an inch).</returns>
    property OriginWidth: Double read get_OriginWidth;
    ///<summary>Gets the origin height, which is the distance from the upper-left corner of the imageable area (also called the "origin" of the imageable area) to the nearest point on the top edge of the page.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the distance from the top edge of the page to the top of the imageable area in pixels (1/96 of an inch).</returns>
    property OriginHeight: Double read get_OriginHeight;
    ///<summary>Gets the width of the imageable area. </summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the width of the imageable area in pixels (1/96 of an inch). </returns>
    property ExtentWidth: Double read get_ExtentWidth;
    ///<summary>Gets the height of the imageable area. </summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the height of the imageable area in pixels (1/96 of an inch).</returns>
    property ExtentHeight: Double read get_ExtentHeight;
  end;

  TDNPageImageableArea = class(TDNGenericImport<DNPageImageableAreaClass, DNPageImageableArea>) end;

  //-------------namespace: System.Printing----------------
  DNPageMediaSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A31FF81B-F144-57E6-9EA0-3E9790854455}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PageMediaSize" />
    ///  class by using the specified <see cref="T:System.Printing.PageMediaSizeName" />
    ///  . </summary>
    ///  <param name="mediaSizeName">The name of the page size for paper (or other media), for example, <see cref="F:System.Printing.PageMediaSizeName.NorthAmericaLetter" />
    ///  or <see cref="F:System.Printing.PageMediaSizeName.ISOA4" />
    ///  . </param>
    {class} function init(mediaSizeName: DNPageMediaSizeName): DNPageMediaSize; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PageMediaSize" />
    ///  class by using the width and height.</summary>
    ///  <param name="width">The width, in pixels, which are 1/96 inch units.</param>
    ///  <param name="height">The height, in pixels, which are 1/96 inch units.</param>
    {class} function init(width: Double; height: Double): DNPageMediaSize; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PageMediaSize" />
    ///  class by using the specified <see cref="T:System.Printing.PageMediaSizeName" />
    ///  and the width and height.</summary>
    ///  <param name="mediaSizeName">The name of the page size for paper (or other media), for example, <see cref="F:System.Printing.PageMediaSizeName.NorthAmericaLetter" />
    ///  or <see cref="F:System.Printing.PageMediaSizeName.ISOA4" />
    ///  .</param>
    ///  <param name="width">The width, in pixels, which are 1/96 inch units.</param>
    ///  <param name="height">The height, in pixels, which are 1/96 inch units.</param>
    {class} function init(mediaSizeName: DNPageMediaSizeName; width: Double; height: Double): DNPageMediaSize; overload;

  end;

  ///<summary>Describes the page size for paper or other media.</summary>
  [DNTypeName('System.Printing.PageMediaSize')]
  DNPageMediaSize = interface(DDN.mscorlib.DNObject)
  ['{44070251-4A49-32FF-B9CD-D48D50B0B960}']
  { getters & setters } 

    function get_PageMediaSizeName: DDN.mscorlib.DNNullable<DNPageMediaSizeName>;
    function get_Width: DDN.mscorlib.DNNullable<Double>;
    function get_Height: DDN.mscorlib.DNNullable<Double>;

  { methods } 

    ///<summary>Displays the page size for paper or other media.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the page size for paper or other media.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of the page size for paper or other media.</summary>
    ///<returns>A <see cref="T:System.Printing.PageMediaSizeName" />
    ///  value that names the page size.</returns>
    property PageMediaSizeName: DDN.mscorlib.DNNullable<DNPageMediaSizeName> read get_PageMediaSizeName;
    ///<summary>Gets the page width.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the page width, in pixels, which are 1/96 inch units.</returns>
    property Width: DDN.mscorlib.DNNullable<Double> read get_Width;
    ///<summary>Gets the page height.</summary>
    ///<returns>A <see cref="T:System.Double" />
    ///  that represents the page height, in pixels, which are 1/96 inch units.</returns>
    property Height: DDN.mscorlib.DNNullable<Double> read get_Height;
  end;

  TDNPageMediaSize = class(TDNGenericImport<DNPageMediaSizeClass, DNPageMediaSize>) end;

  //-------------namespace: System.Printing----------------
  DNPageResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5B0FEA70-6812-5EE0-B72F-02DDDDAE913F}']
  { constructors } 

    ///<summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" />
    ///  class that has the specified vertical and horizontal dots per inch. </summary>
    ///  <param name="resolutionX">The horizontal resolution in dots per inch. </param>
    ///  <param name="resolutionY">The vertical resolution in dots per inch.</param>
    {class} function init(resolutionX: Int32; resolutionY: Int32): DNPageResolution; overload;
    ///<summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" />
    ///  class that has the specified <see cref="T:System.Printing.PageQualitativeResolution" />
    ///  . </summary>
    ///  <param name="qualitative">A value representing the resolution.</param>
    {class} function init(qualitative: DNPageQualitativeResolution): DNPageResolution; overload;
    ///<summary>Initiates a new instance of the <see cref="T:System.Printing.PageResolution" />
    ///  class that has the specified <see cref="T:System.Printing.PageQualitativeResolution" />
    ///  and the specified vertical and horizontal dots per inch.</summary>
    ///  <param name="resolutionX">The horizontal resolution in dots per inch. </param>
    ///  <param name="resolutionY">The vertical resolution in dots per inch.</param>
    ///  <param name="qualitative">A value representing the resolution.</param>
    {class} function init(resolutionX: Int32; resolutionY: Int32; qualitative: DNPageQualitativeResolution): DNPageResolution; overload;

  end;

  ///<summary>Defines the page resolution of printed output as either a qualitative value or as dots per inch, or both.</summary>
  [DNTypeName('System.Printing.PageResolution')]
  DNPageResolution = interface(DDN.mscorlib.DNObject)
  ['{CAF781C0-4A5B-3CC9-B99A-3495FC80A80A}']
  { getters & setters } 

    function get_X: DDN.mscorlib.DNNullable<Int32>;
    function get_Y: DDN.mscorlib.DNNullable<Int32>;
    function get_QualitativeResolution: DDN.mscorlib.DNNullable<DNPageQualitativeResolution>;

  { methods } 

    ///<summary>Returns the page resolution as a <see cref="T:System.String" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the property values of the <see cref="T:System.Printing.PageResolution" />
    ///  object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the dots-per-inch measure of the horizontal page resolution.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents a horizontal page resolution.</returns>
    property X: DDN.mscorlib.DNNullable<Int32> read get_X;
    ///<summary>Gets the dots-per-inch measure of the vertical page resolution.</summary>
    ///<returns>A nullable <see cref="T:System.Int32" />
    ///  value that represents a vertical page resolution.</returns>
    property Y: DDN.mscorlib.DNNullable<Int32> read get_Y;
    ///<summary>Gets the qualitative expression, if any, of the page resolution.</summary>
    ///<returns>A <see cref="T:System.Printing.PageQualitativeResolution" />
    ///  value that represents the level of page resolution.</returns>
    property QualitativeResolution: DDN.mscorlib.DNNullable<DNPageQualitativeResolution> read get_QualitativeResolution;
  end;

  TDNPageResolution = class(TDNGenericImport<DNPageResolutionClass, DNPageResolution>) end;

  //-------------namespace: System.Printing----------------
  DNPageScalingFactorRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1942A7D-8750-5CC9-82AF-B708B04225C4}']
  end;

  ///<summary>Specifies a range of percentages by which a printer can enlarge or reduce the print image on a page. </summary>
  [DNTypeName('System.Printing.PageScalingFactorRange')]
  DNPageScalingFactorRange = interface(DDN.mscorlib.DNObject)
  ['{360DE511-00C8-3ABC-8025-5C26D8E66A67}']
  { getters & setters } 

    function get_MinimumScale: Int32;
    function get_MaximumScale: Int32;

  { methods } 

    ///<summary>Returns the <see cref="T:System.String" />
    ///  representation of the range.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representation of the scaling range.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the minimum percentage of the range.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents a percentage.</returns>
    property MinimumScale: Int32 read get_MinimumScale;
    ///<summary>Gets the maximum percentage of the range.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents a percentage.</returns>
    property MaximumScale: Int32 read get_MaximumScale;
  end;

  TDNPageScalingFactorRange = class(TDNGenericImport<DNPageScalingFactorRangeClass, DNPageScalingFactorRange>) end;

  //-------------namespace: System.Printing----------------
  DNPrintCapabilitiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15F6C0A3-2DA4-5206-B974-D73E1A31CB2C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintCapabilities" />
    ///  class by using an XML stream (that contains a PrintCapabilities document) that specifies printer capabilities and complies with the XML Print Schema.</summary>
    ///  <param name="xmlStream">An XML <see cref="T:System.IO.Stream" />
    ///  that describes printer capabilities and conforms to the Print Schema.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlStream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.FormatException"><paramref name="xmlStream" />
    ///  is not valid XML.</exception>
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintCapabilities;

  end;

  ///<summary>Defines the capabilities of a printer.</summary>
  [DNTypeName('System.Printing.PrintCapabilities')]
  DNPrintCapabilities = interface(DDN.mscorlib.DNObject)
  ['{F2A06CEB-416F-35ED-BA26-4233248BDB42}']
  { getters & setters } 

    function get_CollationCapability: DDN.mscorlib.DNReadOnlyCollection<DNCollation>;
    function get_DeviceFontSubstitutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNDeviceFontSubstitution>;
    function get_DuplexingCapability: DDN.mscorlib.DNReadOnlyCollection<DNDuplexing>;
    function get_InputBinCapability: DDN.mscorlib.DNReadOnlyCollection<DNInputBin>;
    function get_MaxCopyCount: DDN.mscorlib.DNNullable<Int32>;
    function get_OrientedPageMediaWidth: DDN.mscorlib.DNNullable<Double>;
    function get_OrientedPageMediaHeight: DDN.mscorlib.DNNullable<Double>;
    function get_OutputColorCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputColor>;
    function get_OutputQualityCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputQuality>;
    function get_PageBorderlessCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageBorderless>;
    function get_PageImageableArea: DNPageImageableArea;
    function get_PageMediaSizeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaSize>;
    function get_PageMediaTypeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaType>;
    function get_PageOrderCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrder>;
    function get_PageOrientationCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrientation>;
    function get_PageResolutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageResolution>;
    function get_PageScalingFactorRange: DNPageScalingFactorRange;
    function get_PagesPerSheetCapability: DDN.mscorlib.DNReadOnlyCollection<Int32>;
    function get_PagesPerSheetDirectionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPagesPerSheetDirection>;
    function get_PhotoPrintingIntentCapability: DDN.mscorlib.DNReadOnlyCollection<DNPhotoPrintingIntent>;
    function get_StaplingCapability: DDN.mscorlib.DNReadOnlyCollection<DNStapling>;
    function get_TrueTypeFontModeCapability: DDN.mscorlib.DNReadOnlyCollection<DNTrueTypeFontMode>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of values that identify the collation capabilities of a printer.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.Collation" />
    ///  values. </returns>
    property CollationCapability: DDN.mscorlib.DNReadOnlyCollection<DNCollation> read get_CollationCapability;
    ///<summary>Gets a collection of values that identify whether and how a printer can substitute device-based fonts for computer-based fonts.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.DeviceFontSubstitution" />
    ///  values. </returns>
    property DeviceFontSubstitutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNDeviceFontSubstitution> read get_DeviceFontSubstitutionCapability;
    ///<summary>Gets a collection of values that identify whether and how a printer can perform two-sided printing.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.Duplexing" />
    ///  values. </returns>
    property DuplexingCapability: DDN.mscorlib.DNReadOnlyCollection<DNDuplexing> read get_DuplexingCapability;
    ///<summary>Gets a collection of values that indicate what input bin (paper tray) is used.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.InputBin" />
    ///  values. </returns>
    property InputBinCapability: DDN.mscorlib.DNReadOnlyCollection<DNInputBin> read get_InputBinCapability;
    ///<summary>Gets a value indicating the maximum number of copies that the device can print in a single print job.</summary>
    ///<returns>A nullable <see cref="T:System.Int32" />
    ///  value that specifies the maximum number of copies that a printer can print. Returns <see langword="null" />
    ///  if the device driver does not report a maximum.</returns>
    property MaxCopyCount: DDN.mscorlib.DNNullable<Int32> read get_MaxCopyCount;
    ///<summary>Gets a value indicating the width of the imageable area on a page, where width means the horizontal dimension relative to the page's orientation. </summary>
    ///<returns>A nullable <see cref="T:System.Double" />
    ///  value indicating the width, in pixels, which are 1/96 inch increments, of the area on a page that the printer is capable of printing.</returns>
    property OrientedPageMediaWidth: DDN.mscorlib.DNNullable<Double> read get_OrientedPageMediaWidth;
    ///<summary>Gets a value indicating the height of the imageable area on a page, where height means the vertical dimension relative to the page's orientation. </summary>
    ///<returns>A nullable <see cref="T:System.Double" />
    ///  value indicating the height, in pixels, which are 1/96 inch increments, of the area on a page that the printer is capable of printing.</returns>
    property OrientedPageMediaHeight: DDN.mscorlib.DNNullable<Double> read get_OrientedPageMediaHeight;
    ///<summary>Gets a collection of values that specify the ways in which a printer can print content with color and shades of gray.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.OutputColor" />
    ///  values. </returns>
    property OutputColorCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputColor> read get_OutputColorCapability;
    ///<summary>Gets a collection of values that indicate the types of output quality the printer supports. </summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.OutputQuality" />
    ///  values. </returns>
    property OutputQualityCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputQuality> read get_OutputQualityCapability;
    ///<summary>Gets a collection of values that indicate whether the printer can print up to the edge of the media.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageBorderless" />
    ///  values.</returns>
    property PageBorderlessCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageBorderless> read get_PageBorderlessCapability;
    ///<summary>Gets an object that represents the area of a page that the printer can use.</summary>
    ///<returns>A <see cref="T:System.Printing.PageImageableArea" />
    ///  object that specifies the distance, in pixels (units of 1/96 inch), of the upper-left corner of the imageable area. The vertical distance is measured from the top edge of the paper and the horizontal distance is measured from the left edge. The return value also specifies the width and height of the imageable area. If the printer driver does not report an imageable area, then this property is null. </returns>
    property PageImageableArea: DNPageImageableArea read get_PageImageableArea;
    ///<summary>Gets a collection of <see cref="T:System.Printing.PageMediaSize" />
    ///  objects that identify the paper and media sizes that a printer supports.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageMediaSize" />
    ///  objects.</returns>
    property PageMediaSizeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaSize> read get_PageMediaSizeCapability;
    ///<summary>Gets a collection of values that identify what types of paper and other media a printer supports. </summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageMediaType" />
    ///  values specifying the print media, such as card stock, label, plain, or photographic. </returns>
    property PageMediaTypeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaType> read get_PageMediaTypeCapability;
    ///<summary>Gets a collection of values that indicate whether a printer is capable of printing multiple-page documents from front-to-back, back-to-front, or both ways.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageOrder" />
    ///  values. </returns>
    property PageOrderCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrder> read get_PageOrderCapability;
    ///<summary>Gets a collection of values that identify what types of page orientation a printer supports.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageOrientation" />
    ///  values. </returns>
    property PageOrientationCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrientation> read get_PageOrientationCapability;
    ///<summary>Gets a collection of <see cref="T:System.Printing.PageResolution" />
    ///  objects that identify what levels of page resolution the printer supports.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PageResolution" />
    ///  objects. Each value represents a page resolution as a qualitative value, a dots-per-inch value, or both.</returns>
    property PageResolutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageResolution> read get_PageResolutionCapability;
    ///<summary>Gets the maximum and minimum percentages by which a printer can enlarge or reduce the print image on a page.</summary>
    ///<returns>A <see cref="T:System.Printing.PageScalingFactorRange" />
    ///  object with <see cref="P:System.Printing.PageScalingFactorRange.MaximumScale" />
    ///  and <see cref="P:System.Printing.PageScalingFactorRange.MinimumScale" />
    ///  properties holding <see cref="T:System.Int32" />
    ///  values that represent percentages. </returns>
    property PageScalingFactorRange: DNPageScalingFactorRange read get_PageScalingFactorRange;
    ///<summary>Gets a collection of integers, each identifying the number of pages that a user can choose to print on a single side of a sheet of paper. </summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Int32" />
    ///  values representing the options that a printer supports for printing more than one page per side. </returns>
    property PagesPerSheetCapability: DDN.mscorlib.DNReadOnlyCollection<Int32> read get_PagesPerSheetCapability;
    ///<summary>Gets a collection of values that identify what patterns a printer supports for presenting multiple pages on a single side of a sheet of paper.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PagesPerSheetDirection" />
    ///  values. </returns>
    property PagesPerSheetDirectionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPagesPerSheetDirection> read get_PagesPerSheetDirectionCapability;
    ///<summary>Gets a collection of values that identify the quality options the printer supports for printing photographs. </summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.PhotoPrintingIntent" />
    ///  values. </returns>
    property PhotoPrintingIntentCapability: DDN.mscorlib.DNReadOnlyCollection<DNPhotoPrintingIntent> read get_PhotoPrintingIntentCapability;
    ///<summary>Gets a collection of values that identify the types of automatic stapling that a printer supports.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.Stapling" />
    ///  values. </returns>
    property StaplingCapability: DDN.mscorlib.DNReadOnlyCollection<DNStapling> read get_StaplingCapability;
    ///<summary>Gets a collection of values that identify the methods that a printer supports for handling TrueType fonts.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of <see cref="T:System.Printing.TrueTypeFontMode" />
    ///  values. </returns>
    property TrueTypeFontModeCapability: DDN.mscorlib.DNReadOnlyCollection<DNTrueTypeFontMode> read get_TrueTypeFontModeCapability;
  end;

  TDNPrintCapabilities = class(TDNGenericImport<DNPrintCapabilitiesClass, DNPrintCapabilities>) end;

  //-------------namespace: System.Printing----------------
  DNPrintTicketClass = interface(DNObjectClass)
  ['{2AB5CE1F-B1D4-57DD-88FE-E491C6055CD2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintTicket" />
    ///  class.</summary>
    {class} function init: DNPrintTicket; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Printing.PrintTicket" />
    ///  class by using an XML stream (that contains a PrintTicket document) that complies with the XML Print Schema.</summary>
    ///  <param name="xmlStream">An XML stream that describes a print job and conforms to the Print Schema.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlStream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.FormatException"><paramref name="xmlStream" />
    ///  is not valid XML.</exception>
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintTicket; overload;

  end;

  ///<summary>Defines the settings of a print job.</summary>
  [DNTypeName('System.Printing.PrintTicket')]
  DNPrintTicket = interface(DDN.System.DNINotifyPropertyChanged)
  ['{5CBE7B4B-BDB5-300B-BC94-1614B6838AE7}']
  { getters & setters } 

    function get_Collation: DDN.mscorlib.DNNullable<DNCollation>;
    procedure set_Collation(value: DDN.mscorlib.DNNullable<DNCollation>);
    function get_CopyCount: DDN.mscorlib.DNNullable<Int32>;
    procedure set_CopyCount(value: DDN.mscorlib.DNNullable<Int32>);
    function get_DeviceFontSubstitution: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution>;
    procedure set_DeviceFontSubstitution(value: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution>);
    function get_Duplexing: DDN.mscorlib.DNNullable<DNDuplexing>;
    procedure set_Duplexing(value: DDN.mscorlib.DNNullable<DNDuplexing>);
    function get_InputBin: DDN.mscorlib.DNNullable<DNInputBin>;
    procedure set_InputBin(value: DDN.mscorlib.DNNullable<DNInputBin>);
    function get_OutputColor: DDN.mscorlib.DNNullable<DNOutputColor>;
    procedure set_OutputColor(value: DDN.mscorlib.DNNullable<DNOutputColor>);
    function get_OutputQuality: DDN.mscorlib.DNNullable<DNOutputQuality>;
    procedure set_OutputQuality(value: DDN.mscorlib.DNNullable<DNOutputQuality>);
    function get_PageBorderless: DDN.mscorlib.DNNullable<DNPageBorderless>;
    procedure set_PageBorderless(value: DDN.mscorlib.DNNullable<DNPageBorderless>);
    function get_PageMediaSize: DNPageMediaSize;
    procedure set_PageMediaSize(value: DNPageMediaSize);
    function get_PageMediaType: DDN.mscorlib.DNNullable<DNPageMediaType>;
    procedure set_PageMediaType(value: DDN.mscorlib.DNNullable<DNPageMediaType>);
    function get_PageOrder: DDN.mscorlib.DNNullable<DNPageOrder>;
    procedure set_PageOrder(value: DDN.mscorlib.DNNullable<DNPageOrder>);
    function get_PageOrientation: DDN.mscorlib.DNNullable<DNPageOrientation>;
    procedure set_PageOrientation(value: DDN.mscorlib.DNNullable<DNPageOrientation>);
    function get_PageResolution: DNPageResolution;
    procedure set_PageResolution(value: DNPageResolution);
    function get_PageScalingFactor: DDN.mscorlib.DNNullable<Int32>;
    procedure set_PageScalingFactor(value: DDN.mscorlib.DNNullable<Int32>);
    function get_PagesPerSheet: DDN.mscorlib.DNNullable<Int32>;
    procedure set_PagesPerSheet(value: DDN.mscorlib.DNNullable<Int32>);
    function get_PagesPerSheetDirection: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection>;
    procedure set_PagesPerSheetDirection(value: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection>);
    function get_PhotoPrintingIntent: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent>;
    procedure set_PhotoPrintingIntent(value: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent>);
    function get_Stapling: DDN.mscorlib.DNNullable<DNStapling>;
    procedure set_Stapling(value: DDN.mscorlib.DNNullable<DNStapling>);
    function get_TrueTypeFontMode: DDN.mscorlib.DNNullable<DNTrueTypeFontMode>;
    procedure set_TrueTypeFontMode(value: DDN.mscorlib.DNNullable<DNTrueTypeFontMode>);

  { events } 

    procedure add_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);

  { methods } 

    ///<summary>Creates a modifiable clone of this <see cref="T:System.Printing.PrintTicket" />
    ///  , making deep copies of this object's values. </summary>
    ///<returns>A modifiable clone of the current object. </returns>
    function Clone: DNPrintTicket;
    ///<summary>Returns a <see cref="T:System.IO.MemoryStream" />
    ///  object that represents the property values of a <see cref="T:System.Printing.PrintTicket" />
    ///  as an XML stream that conforms to the Print Schema.</summary>
    ///<returns>A <see cref="T:System.IO.MemoryStream" />
    ///  object that describes the print ticket with XML that conforms to the Print Schema.</returns>
    function GetXmlStream: DDN.mscorlib.DNMemoryStream;
    ///<summary>Saves the <see cref="T:System.Printing.PrintTicket" />
    ///  settings to a <see cref="T:System.IO.Stream" />
    ///  object by using an XML format that conforms to the Print Schema.</summary>
    ///  <param name="outStream">The <see cref="T:System.IO.Stream" />
    ///  that holds the saved <see cref="T:System.Printing.PrintTicket" />
    ///  . </param>
    procedure SaveTo(outStream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the printer collates its output.</summary>
    ///<returns>A <see cref="T:System.Printing.Collation" />
    ///  value indicating whether the printer collates its output.  </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Collation" />
    ///  enumeration.</exception>
    property Collation: DDN.mscorlib.DNNullable<DNCollation> read get_Collation write set_Collation;
    ///<summary>Gets or sets the number of copies for the print job.</summary>
    ///<returns>A nullable <see cref="T:System.Int32" />
    ///  value that specifies how many copies to print. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value less than 1.</exception>
    property CopyCount: DDN.mscorlib.DNNullable<Int32> read get_CopyCount write set_CopyCount;
    ///<summary>Gets or sets a value indicating whether the printer substitutes device-based fonts for computer-based fonts on the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.DeviceFontSubstitution" />
    ///  value indicating whether the device substitutes device-based fonts for computer-based fonts for the current print job. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.DeviceFontSubstitution" />
    ///  enumeration.</exception>
    property DeviceFontSubstitution: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution> read get_DeviceFontSubstitution write set_DeviceFontSubstitution;
    ///<summary>Gets or sets a value indicating what kind of two-sided printing, if any, the printer uses for the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.Duplexing" />
    ///  value indicating what sort of two-sided printing, if any, the printer uses for the print job. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Duplexing" />
    ///  enumeration.</exception>
    property Duplexing: DDN.mscorlib.DNNullable<DNDuplexing> read get_Duplexing write set_Duplexing;
    ///<summary>Gets or sets a value indicating what input bin (paper tray) to use.</summary>
    ///<returns>An <see cref="T:System.Printing.InputBin" />
    ///  value indicating what input tray is used and whether it is chosen manually or automatically. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.InputBin" />
    ///  enumeration.</exception>
    property InputBin: DDN.mscorlib.DNNullable<DNInputBin> read get_InputBin write set_InputBin;
    ///<summary>Gets or sets a value indicating how the printer handles content that has color or shades of gray.</summary>
    ///<returns>An <see cref="T:System.Printing.OutputColor" />
    ///  value indicating how the printer handles content that has color or shades of gray. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.OutputColor" />
    ///  enumeration.</exception>
    property OutputColor: DDN.mscorlib.DNNullable<DNOutputColor> read get_OutputColor write set_OutputColor;
    ///<summary>Gets or sets a value indicating the quality of output for the print job.</summary>
    ///<returns>An <see cref="T:System.Printing.OutputQuality" />
    ///  value that specifies the needed level of quality. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.OutputQuality" />
    ///  enumeration.</exception>
    property OutputQuality: DDN.mscorlib.DNNullable<DNOutputQuality> read get_OutputQuality write set_OutputQuality;
    ///<summary>Gets or sets a value indicating whether the device prints content to the edge of the media or leaves an unprinted margin around the edge.</summary>
    ///<returns>A <see cref="T:System.Printing.PageBorderless" />
    ///  value that specifies whether the printer uses borderless printing.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageBorderless" />
    ///  enumeration.</exception>
    property PageBorderless: DDN.mscorlib.DNNullable<DNPageBorderless> read get_PageBorderless write set_PageBorderless;
    ///<summary>Gets or sets the page size for the paper (or other media) that a printer uses for a print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PageMediaSize" />
    ///  object that represents the page size by using a name, dimensions, or both.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" />
    ///  object that has at least one <see langword="null" />
    ///  property. - or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" />
    ///  object whose <see cref="P:System.Printing.PageMediaSize.PageMediaSizeName" />
    ///  property is set to a value that is not in the <see cref="T:System.Printing.PageMediaSizeName" />
    ///  enumeration.- or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" />
    ///  object whose <see cref="P:System.Printing.PageMediaSize.Width" />
    ///  or <see cref="P:System.Printing.PageMediaSize.Height" />
    ///  property is set to a value less than 1.</exception>
    property PageMediaSize: DNPageMediaSize read get_PageMediaSize write set_PageMediaSize;
    ///<summary>Gets or sets a value indicating what sort of paper or media the printer uses for the print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PageMediaType" />
    ///  value specifying the print media, such as card stock, label, plain, or photographic. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageMediaType" />
    ///  enumeration.</exception>
    property PageMediaType: DDN.mscorlib.DNNullable<DNPageMediaType> read get_PageMediaType write set_PageMediaType;
    ///<summary>Gets or sets a value indicating whether the printer prints multiple pages back-to-front or front-to-back.</summary>
    ///<returns>A <see cref="T:System.Printing.PageOrder" />
    ///  value specifying last-page-first printing or first-page-first printing. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageOrder" />
    ///  enumeration.</exception>
    property PageOrder: DDN.mscorlib.DNNullable<DNPageOrder> read get_PageOrder write set_PageOrder;
    ///<summary>Gets or sets a value indicating how the page content is oriented for printing. </summary>
    ///<returns>A <see cref="T:System.Printing.PageOrientation" />
    ///  value specifying how page content is oriented, for example, <see cref="F:System.Printing.PageOrientation.Landscape" />
    ///  or <see cref="F:System.Printing.PageOrientation.ReversePortrait" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PageOrientation" />
    ///  enumeration.</exception>
    property PageOrientation: DDN.mscorlib.DNNullable<DNPageOrientation> read get_PageOrientation write set_PageOrientation;
    ///<summary>Gets or sets the level of page resolution that the printer uses for a print job.</summary>
    ///<returns>A <see cref="T:System.Printing.PageResolution" />
    ///  value that represents the resolution as a qualitative value, a dots-per-inch value, or both. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property with a <see cref="T:System.Printing.PageResolution" />
    ///  object that has at least one <see langword="null" />
    ///  property. - or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageMediaSize" />
    ///  object whose <see cref="P:System.Printing.PageResolution.QualitativeResolution" />
    ///  property is set to a value that is not in the <see cref="T:System.Printing.PageQualitativeResolution" />
    ///  enumeration.- or -Calling code has attempted to set the property with a <see cref="T:System.Printing.PageResolution" />
    ///  object whose <see cref="P:System.Printing.PageResolution.X" />
    ///  or <see cref="P:System.Printing.PageResolution.Y" />
    ///  property is set to a value less than 1.</exception>
    property PageResolution: DNPageResolution read get_PageResolution write set_PageResolution;
    ///<summary>Gets or sets the percentage by which the printer enlarges or reduces the print image on a page.</summary>
    ///<returns>An <see cref="T:System.Int32" />
    ///  value that represents a percentage. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is less than 1.</exception>
    property PageScalingFactor: DDN.mscorlib.DNNullable<Int32> read get_PageScalingFactor write set_PageScalingFactor;
    ///<summary>Gets or sets the number of pages that print on each printed side of a sheet of paper.</summary>
    ///<returns>A nullable <see cref="T:System.Int32" />
    ///  value that represents the number of pages that print on each printed side of a sheet of paper.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is less than 1.</exception>
    property PagesPerSheet: DDN.mscorlib.DNNullable<Int32> read get_PagesPerSheet write set_PagesPerSheet;
    ///<summary>Gets or sets a value indicating how a printer arranges multiple pages that print on each side of a sheet of paper. </summary>
    ///<returns>A <see cref="T:System.Printing.PagesPerSheetDirection" />
    ///  value indicating how a printer presents multiple pages per sheet. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PagesPerSheetDirection" />
    ///  enumeration.</exception>
    property PagesPerSheetDirection: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection> read get_PagesPerSheetDirection write set_PagesPerSheetDirection;
    ///<summary>Gets or sets a value indicating in qualitative terms the level of quality the printer uses to print a photograph. </summary>
    ///<returns>A <see cref="T:System.Printing.PhotoPrintingIntent" />
    ///  value indicating the level of photo quality.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.PhotoPrintingIntent" />
    ///  enumeration.</exception>
    property PhotoPrintingIntent: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent> read get_PhotoPrintingIntent write set_PhotoPrintingIntent;
    ///<summary>Gets or sets a value indicating whether, and where, a printer staples multiple pages. </summary>
    ///<returns>A <see cref="T:System.Printing.Stapling" />
    ///  value specifying how a printer staples the output. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.Stapling" />
    ///  enumeration.</exception>
    property Stapling: DDN.mscorlib.DNNullable<DNStapling> read get_Stapling write set_Stapling;
    ///<summary>Gets or sets a value indicating how the printer handles text that uses TrueType fonts.</summary>
    ///<returns>A <see cref="T:System.Printing.TrueTypeFontMode" />
    ///  value specifying how a printer handles TrueType fonts. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Calling code has attempted to set the property to a value that is not in the <see cref="T:System.Printing.TrueTypeFontMode" />
    ///  enumeration.</exception>
    property TrueTypeFontMode: DDN.mscorlib.DNNullable<DNTrueTypeFontMode> read get_TrueTypeFontMode write set_TrueTypeFontMode;
  end;

  TDNPrintTicket = class(TDNGenericImport<DNPrintTicketClass, DNPrintTicket>) end;

  //-------------namespace: System.Printing----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{348DAD8C-EA09-52BE-B188-39C6394FC1E5}']
  end;

  ///<summary>Represents a merged <see cref="T:System.Printing.PrintTicket" />
  ///  that is guaranteed to be viable, with a report of any settings that were changed to make it viable. </summary>
  [DNTypeName('System.Printing.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNValueType)
  ['{33DA9668-674F-3464-A9AC-D5A47647CD7E}']
  { getters & setters } 

    function get_ValidatedPrintTicket: DNPrintTicket;
    function get_ConflictStatus: DNConflictStatus;

  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.Printing.ValidationResult" />
    ///  is equal to the current <see cref="T:System.Printing.ValidationResult" />
    ///  .</summary>
    ///  <param name="o">The <see cref="T:System.Printing.ValidationResult" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Printing.ValidationResult" />
    ///  objects are equal; otherwise, <see langword="false" />
    ///  . <see langword="false" />
    ///  is also returned if the object passed is not a <see cref="T:System.Printing.ValidationResult" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets the hash code associated with the <see cref="T:System.Printing.ValidationResult" />
    ///  and its <see cref="T:System.Printing.PrintTicket" />
    ///  and print stream.</summary>
    ///<returns>A hash code for the current <see cref="T:System.Printing.ValidationResult" />
    ///  .</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Printing.PrintTicket" />
    ///  object that results from the merging of two <see cref="T:System.Printing.PrintTicket" />
    ///  objects, which might have been adjusted to ensure its viability.</summary>
    ///<returns>A valid and viable <see cref="T:System.Printing.PrintTicket" />
    ///  . The default is <see langword="null" />
    ///  . </returns>
    property ValidatedPrintTicket: DNPrintTicket read get_ValidatedPrintTicket;
    ///<summary>Gets a value indicating whether a conflict occurred between the functionality supported by the printer and the functionality requested in the initial merger of two source <see cref="T:System.Printing.PrintTicket" />
    ///  s.</summary>
    ///<returns>One of the <see cref="T:System.Printing.ConflictStatus" />
    ///  values that indicates either that no conflict occurred or that at least one conflict occurred but was resolved. The default is <see cref="F:System.Printing.ConflictStatus.NoConflict" />
    ///  . </returns>
    property ConflictStatus: DNConflictStatus read get_ConflictStatus;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.Windows----------------
  DNReachCompatibilityPreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFFFB6FB-658C-5274-A93F-75F6137A8B1B}']
  end;

  [DNTypeName('System.Windows.ReachCompatibilityPreferences')]
  DNReachCompatibilityPreferences = interface(DDN.mscorlib.DNObject)
  ['{C757F754-8F9E-30FC-9A6B-0D222AE940F4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNReachCompatibilityPreferences = class(TDNGenericImport<DNReachCompatibilityPreferencesClass, DNReachCompatibilityPreferences>) end;


implementation


initialization
  LoadAssemblyModule('WPF\ReachFramework.dll', True);

finalization

end.
