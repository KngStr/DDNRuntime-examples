//----------------------------------------------------------------------------
//  PresentationFramework.dll: PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Windows.Documents.Serialization
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Windows.Documents.Serialization;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.PresentationFramework,
  DDN.System,
  DDN.ReachFramework,
  DDN.PresentationCore,
  DDN.System.Windows.Xps.Serialization;

type

{ enums }

  //-------------namespace: System.Windows.Documents.Serialization----------------
  ///<summary>Specifies the scope of a <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingProgressChanged" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangeLevel')]
  DNWritingProgressChangeLevel = type Integer;
  DNWritingProgressChangeLevelHelper = record helper for DNWritingProgressChangeLevel
  public const
    ///<summary>The output progress is unspecified.</summary>
    None = 0;
    ///<summary>The output progress of a multiple document sequence.</summary>
    FixedDocumentSequenceWritingProgress = 1;
    ///<summary>The output progress of a single document.</summary>
    FixedDocumentWritingProgress = 2;
    ///<summary>The output progress of a single page.</summary>
    FixedPageWritingProgress = 3;
  end;




type


{ declares }

  DNISerializerFactory = interface; // type: System.Windows.Documents.Serialization.ISerializerFactory, namespace: System.Windows.Documents.Serialization
  DNWritingCompletedEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingCompletedEventArgs, namespace: System.Windows.Documents.Serialization
  DNWritingProgressChangedEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingProgressChangedEventArgs, namespace: System.Windows.Documents.Serialization
  DNWritingCancelledEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingCancelledEventArgs, namespace: System.Windows.Documents.Serialization
  DNWritingPrintTicketRequiredEventArgs = interface; // type: System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs, namespace: System.Windows.Documents.Serialization
  DNSerializerDescriptor = interface; // type: System.Windows.Documents.Serialization.SerializerDescriptor, namespace: System.Windows.Documents.Serialization
  DNSerializerProvider = interface; // type: System.Windows.Documents.Serialization.SerializerProvider, namespace: System.Windows.Documents.Serialization
  DNSerializerWriter = interface; // type: System.Windows.Documents.Serialization.SerializerWriter, namespace: System.Windows.Documents.Serialization
  DNSerializerWriterCollator = interface; // type: System.Windows.Documents.Serialization.SerializerWriterCollator, namespace: System.Windows.Documents.Serialization

{ delegates }

  ///<summary>Represents a method that will handle the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Documents.Serialization.WritingCancelledEventHandler')]
  DNWritingCancelledEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingCancelledEventArgs) of object;

  ///<summary>Represents a method that handles the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted" />
  ///  event of the <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
  ///  class.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Documents.Serialization.WritingCompletedEventHandler')]
  DNWritingCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingCompletedEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired" />
  ///  event of an <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
  ///  .</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventHandler')]
  DNWritingPrintTicketRequiredEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingPrintTicketRequiredEventArgs) of object;

  ///<summary>Represents a method that will handle the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged" />
  ///  event of an <see cref="T:System.Windows.Xps.XpsDocumentWriter" />
  ///  .</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangedEventHandler')]
  DNWritingProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWritingProgressChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows.Documents.Serialization----------------
  ///<summary>Provides a means for creating a software component that can serialize any part of a Windows Presentation Foundation (WPF) application's content to a manufacturer's proprietary format. </summary>
  [DNTypeName('System.Windows.Documents.Serialization.ISerializerFactory')]
  DNISerializerFactory = interface(DDN.mscorlib.DNObject)
  ['{07938333-3C70-3A12-8E75-B2DF4E938EB0}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_ManufacturerName: string;
    function get_ManufacturerWebsite: DDN.System.DNUri;
    function get_DefaultFileExtension: string;

  { methods } 

    ///<summary>Initializes an object derived from the abstract <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  class for the specified <see cref="T:System.IO.Stream" />
    ///  . </summary>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  to which the returned object writes.</param>
    ///<returns>An object of a class derived from <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  .</returns>
    function CreateSerializerWriter(stream: DDN.mscorlib.DNStream): DNSerializerWriter;

  { propertys } 

    ///<summary>Gets the public name of the manufacturer's serializing component. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representing the public name of the serializing component. </returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>Gets the name of the serializing component's manufacturer. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representing the manufacturer's name. </returns>
    property ManufacturerName: string read get_ManufacturerName;
    ///<summary>Gets the web address of the serializing component's manufacturer. </summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  representing the manufacturer's website.</returns>
    property ManufacturerWebsite: DDN.System.DNUri read get_ManufacturerWebsite;
    ///<summary>Gets the default extension for files of the manufacturer's proprietary format. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  representing the proprietary format's default file extension.</returns>
    property DefaultFileExtension: string read get_DefaultFileExtension;
  end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingCompletedEventArgsClass = interface(DNObjectClass)
  ['{9F19C0E8-EEF5-5B3B-9658-6CFEFA2086E9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Serialization.WritingCompletedEventArgs" />
    ///  class.</summary>
    ///  <param name="cancelled"><see langword="true" />
    ///  if canceled; otherwise, <see langword="false" />
    ///  if the write operation completed normally.</param>
    ///  <param name="state">The user-supplied state object that was passed to the <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriter.WriteAsync" />
    ///  method.</param>
    ///  <param name="exception">Error that occurred during the write operation or <see langword="null" />
    ///  if there is no error.</param>
    {class} function init(cancelled: Boolean; state: DDN.mscorlib.DNObject; exception: DDN.mscorlib.DNException): DNWritingCompletedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingCompleted" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.WritingCompletedEventArgs')]
  DNWritingCompletedEventArgs = interface(DNObject)
  ['{852F4278-0220-3656-AD67-6C1937A5ED15}']
  { getters & setters } 

    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNWritingCompletedEventArgs = class(TDNGenericImport<DNWritingCompletedEventArgsClass, DNWritingCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingProgressChangedEventArgsClass = interface(DNObjectClass)
  ['{FD6FDCEC-59A0-5E67-B4A2-9B8C7045BDD0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Serialization.WritingProgressChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="writingLevel">An enumeration value that specifies the scope of the progress changed event such as for an entire multiple document sequence, a single document, or a single page.</param>
    ///  <param name="number">Based on the scope defined by <paramref name="writingLevel" />
    ///  , the number of documents or the number of pages that have been written.</param>
    ///  <param name="progressPercentage">The percentage of data that has been written.</param>
    ///  <param name="state">The user-supplied object that identifies the write operation.</param>
    {class} function init(writingLevel: DNWritingProgressChangeLevel; number: Int32; progressPercentage: Int32; state: DDN.mscorlib.DNObject): DNWritingProgressChangedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.WritingProgressChangedEventArgs')]
  DNWritingProgressChangedEventArgs = interface(DNObject)
  ['{D0140974-7F7A-3DAA-BECE-B7E17B678581}']
  { getters & setters } 

    function get_Number: Int32;
    function get_WritingLevel: DNWritingProgressChangeLevel;
    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of documents or pages that have been written.</summary>
    ///<returns>The number of documents or pages that have been written at the time of the event.</returns>
    property Number: Int32 read get_Number;
    ///<summary>Gets a value that indicates the scope of the writing progress.</summary>
    ///<returns>An enumeration that indicates the scope of writing a multiple document sequence, a single document, or single page.</returns>
    property WritingLevel: DNWritingProgressChangeLevel read get_WritingLevel;
    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNWritingProgressChangedEventArgs = class(TDNGenericImport<DNWritingProgressChangedEventArgsClass, DNWritingProgressChangedEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingCancelledEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4103B60A-7BB9-569E-A981-19D50E509467}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Serialization.WritingCancelledEventArgs" />
    ///  class.</summary>
    ///  <param name="exception">The exception that canceled the write operation.</param>
    {class} function init(exception: DDN.mscorlib.DNException): DNWritingCancelledEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.WritingCancelledEventArgs')]
  DNWritingCancelledEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{DAD5EB8B-4F84-30C8-8DED-33CBA7788B46}']
  { getters & setters } 

    function get_Error: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the exception that canceled the write operation.</summary>
    ///<returns>The exception that canceled the write operation.</returns>
    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNWritingCancelledEventArgs = class(TDNGenericImport<DNWritingCancelledEventArgsClass, DNWritingCancelledEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNWritingPrintTicketRequiredEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{681A7D8F-5AC9-5DDE-A84B-D4E55DEB566F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs" />
    ///  class.</summary>
    ///  <param name="printTicketLevel">An enumeration value that specifies scope of the <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" />
    ///  as a page, document, or sequence of documents.</param>
    ///  <param name="sequence">Based on the scope of defined by <paramref name="printTicketLevel" />
    ///  , the number of pages or the number of documents associated with the <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" />
    ///  .</param>
    {class} function init(printTicketLevel: DDN.System.Windows.Documents.Serialization.DNPrintTicketLevel; sequence: Int32): DNWritingPrintTicketRequiredEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs')]
  DNWritingPrintTicketRequiredEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0AB9C9DB-9187-3880-A79E-ED6B4881C60C}']
  { getters & setters } 

    function get_CurrentPrintTicketLevel: DDN.System.Windows.Documents.Serialization.DNPrintTicketLevel;
    function get_Sequence: Int32;
    function get_CurrentPrintTicket: DDN.ReachFramework.DNPrintTicket;
    procedure set_CurrentPrintTicket(value: DDN.ReachFramework.DNPrintTicket);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates the scope of the <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" />
    ///  event.</summary>
    ///<returns>An enumeration that indicates the scope of the <see cref="E:System.Windows.Documents.Serialization.SerializerWriter.WritingPrintTicketRequired" />
    ///  event as for a sequence of documents, a single document, or a single page.</returns>
    property CurrentPrintTicketLevel: DDN.System.Windows.Documents.Serialization.DNPrintTicketLevel read get_CurrentPrintTicketLevel;
    ///<summary>Gets the number of documents or pages output with the <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" />
    ///  .</summary>
    ///<returns>The number of documents or pages output with the <see cref="P:System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs.CurrentPrintTicket" />
    ///  .</returns>
    property Sequence: Int32 read get_Sequence;
    ///<summary>Gets or sets the default printer settings to use when the document is printed.</summary>
    ///<returns>The default printer settings to use when the document is printed.</returns>
    property CurrentPrintTicket: DDN.ReachFramework.DNPrintTicket read get_CurrentPrintTicket write set_CurrentPrintTicket;
  end;

  TDNWritingPrintTicketRequiredEventArgs = class(TDNGenericImport<DNWritingPrintTicketRequiredEventArgsClass, DNWritingPrintTicketRequiredEventArgs>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNSerializerDescriptorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76279A96-84AA-538B-A229-533F41F9B360}']
  { static methods } 

    ///<summary>Creates a new <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  through a given <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" />
    ///  implementation. </summary>
    ///  <param name="factoryInstance">The source of data for the new <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  .</param>
    ///<returns>A new <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  with its properties initialized with values from the given <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" />
    ///  implementation. </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="factoryInstance" />
    ///  is null.</exception><exception cref="T:System.ArgumentException">One or more of the following properties of the <paramref name="factoryInstance" />
    ///  is null: <see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.DisplayName" />
    ///  , <see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerName" />
    ///  , <see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.ManufacturerWebsite" />
    ///  , and <see cref="P:System.Windows.Documents.Serialization.SerializerDescriptor.DefaultFileExtension" />
    ///</exception>
    {class} function CreateFromFactoryInstance(factoryInstance: DNISerializerFactory): DNSerializerDescriptor;

  end;

  ///<summary>Provides information about installed plug-in serializers. </summary>
  [DNTypeName('System.Windows.Documents.Serialization.SerializerDescriptor')]
  DNSerializerDescriptor = interface(DDN.mscorlib.DNObject)
  ['{0D25A491-84F5-31B7-A268-9C5E773AB52C}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_ManufacturerName: string;
    function get_ManufacturerWebsite: DDN.System.DNUri;
    function get_DefaultFileExtension: string;
    function get_AssemblyName: string;
    function get_AssemblyPath: string;
    function get_FactoryInterfaceName: string;
    function get_AssemblyVersion: DDN.mscorlib.DNVersion;
    function get_WinFXVersion: DDN.mscorlib.DNVersion;
    function get_IsLoadable: Boolean;

  { methods } 

    ///<summary>Tests two <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  objects for equality.</summary>
    ///  <param name="obj">The object to be compared with this <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if both are equal; otherwise, <see langword="false" />
    ///  . </returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets the unique hash code value of the serializer. </summary>
    ///<returns>The unique hash code value of the serializer. </returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the public display name of the serializer. </summary>
    ///<returns>The public display name of the serializer. </returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>Gets the name of the company that developed the serializer. </summary>
    ///<returns>The name of the company that developed the plug-in serializer. </returns>
    property ManufacturerName: string read get_ManufacturerName;
    ///<summary>Gets the web address of the company that developed the serializer. </summary>
    ///<returns>The web address of the company that developed the serializer. </returns>
    property ManufacturerWebsite: DDN.System.DNUri read get_ManufacturerWebsite;
    ///<summary>Gets the default extension associated with files that the serializer outputs. </summary>
    ///<returns>The default extension associated with files that the serializer outputs. </returns>
    property DefaultFileExtension: string read get_DefaultFileExtension;
    ///<summary>Gets the name of the assembly that contains the serializer. </summary>
    ///<returns>The name of the assembly (usually a DLL) that contains the plug-in serializer. </returns>
    property AssemblyName: string read get_AssemblyName;
    ///<summary>Gets the path to the assembly file that contains the serializer. </summary>
    ///<returns>The path to the assembly file that contains the plug-in serializer. </returns>
    property AssemblyPath: string read get_AssemblyPath;
    ///<summary>Gets the name of the <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" />
    ///  derived class that implements the serializer. </summary>
    ///<returns>The name of the <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" />
    ///  derived class that implements the serializer. </returns>
    property FactoryInterfaceName: string read get_FactoryInterfaceName;
    ///<summary>Gets the version of the assembly that contains the serializer. </summary>
    ///<returns>The version of the assembly that contains the plug-in serializer. </returns>
    property AssemblyVersion: DDN.mscorlib.DNVersion read get_AssemblyVersion;
    ///<summary>Gets the version of Microsoft .NET Framework required by the serializer.</summary>
    ///<returns>The version of Microsoft .NET Framework required by the plug-in serializer. </returns>
    property WinFXVersion: DDN.mscorlib.DNVersion read get_WinFXVersion;
    ///<summary>Gets a value indicating whether the serializer can be loaded with the currently installed version of Microsoft .NET Framework.</summary>
    ///<returns><see langword="true" />
    ///  if the serializer assembly can be loaded; otherwise, <see langword="false" />
    ///  .  The default is <see langword="false" />
    ///  .</returns>
    property IsLoadable: Boolean read get_IsLoadable;
  end;

  TDNSerializerDescriptor = class(TDNGenericImport<DNSerializerDescriptorClass, DNSerializerDescriptor>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNSerializerProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9A9A4090-88FA-510B-BAC0-B065E9D87D84}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Documents.Serialization.SerializerProvider" />
    ///  class. </summary>
    {class} function init: DNSerializerProvider;

  { static methods } 

    ///<summary>Registers a serializer plug-in. </summary>
    ///  <param name="serializerDescriptor">The <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  for the plug-in.</param>
    ///  <param name="overwrite"><see langword="true" />
    ///  to overwrite an existing registration for the same plug-in; otherwise, <see langword="false" />
    ///  . See Remarks.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="serializerDescriptor" />
    ///  is null.</exception><exception cref="T:System.ArgumentException"><paramref name="overwrite" />
    ///  is <see langword="false" />
    ///  and the plug-in is already registered.</exception>
    {class} procedure RegisterSerializer(serializerDescriptor: DNSerializerDescriptor; overwrite: Boolean);
    ///<summary>Deletes a serializer plug-in from the registry.</summary>
    ///  <param name="serializerDescriptor">The <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  for the plug-in.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="serializerDescriptor" />
    ///  is null.</exception><exception cref="T:System.ArgumentException">The plug-in is not registered. See Remarks.</exception>
    {class} procedure UnregisterSerializer(serializerDescriptor: DNSerializerDescriptor);

  end;

  ///<summary>Manages serialization plug-ins created, using <see cref="T:System.Windows.Documents.Serialization.ISerializerFactory" />
  ///  and <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
  ///  , by manufacturers who have their own proprietary serialization formats.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.SerializerProvider')]
  DNSerializerProvider = interface(DDN.mscorlib.DNObject)
  ['{F7384B1E-E4C2-3F0A-83FB-9C1781136C38}']
  { getters & setters } 

    function get_InstalledSerializers: DDN.mscorlib.DNReadOnlyCollection<DNSerializerDescriptor>;

  { methods } 

    ///<summary>Initializes an object derived from the abstract <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  class for the specified <see cref="T:System.IO.Stream" />
    ///  that will use the specified descriptor.</summary>
    ///  <param name="serializerDescriptor">A <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  that contains serialization information for the <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  .</param>
    ///  <param name="stream">The <see cref="T:System.IO.Stream" />
    ///  to which the returned object writes.</param>
    ///<returns>An object of a class derived from <see cref="T:System.Windows.Documents.Serialization.SerializerWriter" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">One of the parameters is null.</exception><exception cref="T:System.ArgumentException">The <paramref name="serializerDescriptor" />
    ///  is specifying the wrong version.-or-It is not registered.-or-The assembly file cannot be found.-or-The assembly cannot be loaded.</exception>
    function CreateSerializerWriter(serializerDescriptor: DNSerializerDescriptor; stream: DDN.mscorlib.DNStream): DNSerializerWriter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of the installed plug-in serializers.</summary>
    ///<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
    ///  of the <see cref="T:System.Windows.Documents.Serialization.SerializerDescriptor" />
    ///  objects already registered. </returns>
    property InstalledSerializers: DDN.mscorlib.DNReadOnlyCollection<DNSerializerDescriptor> read get_InstalledSerializers;
  end;

  TDNSerializerProvider = class(TDNGenericImport<DNSerializerProviderClass, DNSerializerProvider>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNSerializerWriterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA312EE0-DEF2-5134-9304-09C3338DAD51}']
  end;

  ///<summary>Defines the abstract methods and events that are required to implement a plug-in document output serializer. </summary>
  [DNTypeName('System.Windows.Documents.Serialization.SerializerWriter')]
  DNSerializerWriter = interface(DDN.mscorlib.DNObject)
  ['{125B777D-0764-3575-913C-EA1DCF3C9991}']
  { events } 

    procedure add_WritingPrintTicketRequired(value: DNWritingPrintTicketRequiredEventHandler);
    procedure remove_WritingPrintTicketRequired(value: DNWritingPrintTicketRequiredEventHandler);
    procedure add_WritingProgressChanged(value: DNWritingProgressChangedEventHandler);
    procedure remove_WritingProgressChanged(value: DNWritingProgressChangedEventHandler);
    procedure add_WritingCompleted(value: DNWritingCompletedEventHandler);
    procedure remove_WritingCompleted(value: DNWritingCompletedEventHandler);
    procedure add_WritingCancelled(value: DNWritingCancelledEventHandler);
    procedure remove_WritingCancelled(value: DNWritingCancelledEventHandler);

  { methods } 

    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(visual: DDN.PresentationCore.DNVisual); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="visual" />
    ///  element.</param>
    procedure Write(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="visual" />
    ///  element.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  and identifier to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="visual">The <see cref="T:System.Windows.Media.Visual" />
    ///  element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="visual" />
    ///  element.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, synchronously writes the content of a given <see cref="T:System.Windows.Documents.DocumentPaginator" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(documentPaginator: DDN.PresentationCore.DNDocumentPaginator); overload;
    ///<summary>When overridden in a derived class, synchronously writes paginated content together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="documentPaginator" />
    ///  content.</param>
    procedure Write(documentPaginator: DDN.PresentationCore.DNDocumentPaginator; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes the content of a given <see cref="T:System.Windows.Documents.DocumentPaginator" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(documentPaginator: DDN.PresentationCore.DNDocumentPaginator); overload;
    ///<summary>When overridden in a derived class, asynchronously writes the content of a given <see cref="T:System.Windows.Documents.DocumentPaginator" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="documentPaginator" />
    ///  content.</param>
    procedure WriteAsync(documentPaginator: DDN.PresentationCore.DNDocumentPaginator; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes the content of a given <see cref="T:System.Windows.Documents.DocumentPaginator" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(documentPaginator: DDN.PresentationCore.DNDocumentPaginator; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes paginated content together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="documentPaginator">The document paginator that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="documentPaginator" />
    ///  content.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(documentPaginator: DDN.PresentationCore.DNDocumentPaginator; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(fixedPage: DNFixedPage); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedPage" />
    ///  content.</param>
    procedure Write(fixedPage: DNFixedPage; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(fixedPage: DNFixedPage); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedPage" />
    ///  content.</param>
    procedure WriteAsync(fixedPage: DNFixedPage; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedPage: DNFixedPage; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedPage" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedPage">The page to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedPage" />
    ///  content.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedPage: DNFixedPage; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(fixedDocument: DNFixedDocument); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocument" />
    ///  content.</param>
    procedure Write(fixedDocument: DNFixedDocument; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(fixedDocument: DNFixedDocument); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocument" />
    ///  content.</param>
    procedure WriteAsync(fixedDocument: DNFixedDocument; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedDocument: DNFixedDocument; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocument">The document to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocument" />
    ///  content.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedDocument: DNFixedDocument; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(fixedDocumentSequence: DNFixedDocumentSequence); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocumentSequence" />
    ///  content.</param>
    procedure Write(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocumentSequence" />
    ///  content.</param>
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  together with an associated <see cref="T:System.Printing.PrintTicket" />
    ///  to the serialization <see cref="T:System.IO.Stream" />
    ///  .</summary>
    ///  <param name="fixedDocumentSequence">The document sequence that defines the content to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="fixedDocumentSequence" />
    ///  content.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(fixedDocumentSequence: DNFixedDocumentSequence; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, cancels an asynchronous write operation.</summary>
    procedure CancelAsync;
    ///<summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />
    ///  that writes collated <see cref="T:System.Windows.Media.Visual" />
    ///  elements.</summary>
    ///<returns>A <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />
    ///  that writes collated <see cref="T:System.Windows.Media.Visual" />
    ///  elements to the document output serialization <see cref="T:System.IO.Stream" />
    ///  . </returns>
    function CreateVisualsCollator: DNSerializerWriterCollator; overload;
    ///<summary>When overridden in a derived class, returns a <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />
    ///  that writes collated <see cref="T:System.Windows.Media.Visual" />
    ///  elements together with the given print tickets.</summary>
    ///  <param name="documentSequencePT">The default print preferences for <see cref="T:System.Windows.Documents.FixedDocumentSequence" />
    ///  content.</param>
    ///  <param name="documentPT">The default print preferences for <see cref="T:System.Windows.Documents.FixedDocument" />
    ///  content.</param>
    ///<returns>A <see cref="T:System.Windows.Documents.Serialization.SerializerWriterCollator" />
    ///  that writes collated <see cref="T:System.Windows.Media.Visual" />
    ///  elements to the document output serialization <see cref="T:System.IO.Stream" />
    ///  .</returns>
    function CreateVisualsCollator(documentSequencePT: DDN.ReachFramework.DNPrintTicket; documentPT: DDN.ReachFramework.DNPrintTicket): DNSerializerWriterCollator; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSerializerWriter = class(TDNGenericImport<DNSerializerWriterClass, DNSerializerWriter>) end;

  //-------------namespace: System.Windows.Documents.Serialization----------------
  DNSerializerWriterCollatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BF0A070-6D17-51DD-BFBD-659C71AA5A8A}']
  end;

  ///<summary>Defines the abstract methods required to implement a plug-in document serialization <see cref="T:System.Windows.Media.Visual" />
  ///  collator.</summary>
  [DNTypeName('System.Windows.Documents.Serialization.SerializerWriterCollator')]
  DNSerializerWriterCollator = interface(DDN.mscorlib.DNObject)
  ['{B1E0E9B4-5E6B-330A-BD73-436F8C248EF3}']
  { methods } 

    ///<summary>When overridden in a derived class, initiates the start of a batch write operation.</summary>
    procedure BeginBatchWrite;
    ///<summary>When overridden in a derived class, completes a batch write operation.</summary>
    procedure EndBatchWrite;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element to the serialization stream.</summary>
    ///  <param name="visual">The visual element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure Write(visual: DDN.PresentationCore.DNVisual); overload;
    ///<summary>When overridden in a derived class, synchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated print ticket to the serialization stream.</summary>
    ///  <param name="visual">A <see cref="T:System.Windows.Media.Visual" />
    ///  that is written to the stream.</param>
    ///  <param name="printTicket">An object specifying preferences for how the material should be printed.</param>
    procedure Write(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element to the serialization stream.</summary>
    ///  <param name="visual">The visual element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element with a specified event identifier to the serialization stream.</summary>
    ///  <param name="visual">The visual element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated print ticket to the serialization stream.</summary>
    ///  <param name="visual">The visual element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="visual" />
    ///  element.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket); overload;
    ///<summary>When overridden in a derived class, asynchronously writes a given <see cref="T:System.Windows.Media.Visual" />
    ///  element together with an associated print ticket and identifier to the serialization stream.</summary>
    ///  <param name="visual">The visual element to write to the serialization <see cref="T:System.IO.Stream" />
    ///  .</param>
    ///  <param name="printTicket">The default print preferences for the <paramref name="visual" />
    ///  element.</param>
    ///  <param name="userState">A caller-specified object to identify the asynchronous write operation.</param>
    procedure WriteAsync(visual: DDN.PresentationCore.DNVisual; printTicket: DDN.ReachFramework.DNPrintTicket; userState: DDN.mscorlib.DNObject); overload;
    ///<summary>When overridden in a derived class, cancels an asynchronous <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriterCollator.WriteAsync" />
    ///  operation. </summary>
    procedure CancelAsync;
    ///<summary>When overridden in a derived class, cancels a synchronous <see cref="Overload:System.Windows.Documents.Serialization.SerializerWriterCollator.Write" />
    ///  operation. </summary>
    procedure Cancel;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSerializerWriterCollator = class(TDNGenericImport<DNSerializerWriterCollatorClass, DNSerializerWriterCollator>) end;


implementation

end.
