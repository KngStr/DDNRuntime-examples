//----------------------------------------------------------------------------
//  System.Security.Principal.Windows.dll: System.Security.Principal.Windows, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Security.Principal.Windows
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMSECURITYPRINCIPALWINDOWS}
unit DDNC.System.Security.Principal.Windows;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Security.Claims;

type

{ enums }

  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.TokenAccessLevels')]
  DNTokenAccessLevels = type Integer;
  DNTokenAccessLevelsHelper = record helper for DNTokenAccessLevels
  public const
    AssignPrimary = 1;
    Duplicate = 2;
    Impersonate = 4;
    Query = 8;
    QuerySource = 16;
    AdjustPrivileges = 32;
    AdjustGroups = 64;
    AdjustDefault = 128;
    AdjustSessionId = 256;
    Read = 131080;
    Write = 131296;
    AllAccess = 983551;
    MaximumAllowed = 33554432;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WellKnownSidType')]
  DNWellKnownSidType = type Integer;
  DNWellKnownSidTypeHelper = record helper for DNWellKnownSidType
  public const
    NullSid = 0;
    WorldSid = 1;
    LocalSid = 2;
    CreatorOwnerSid = 3;
    CreatorGroupSid = 4;
    CreatorOwnerServerSid = 5;
    CreatorGroupServerSid = 6;
    NTAuthoritySid = 7;
    DialupSid = 8;
    NetworkSid = 9;
    BatchSid = 10;
    InteractiveSid = 11;
    ServiceSid = 12;
    AnonymousSid = 13;
    ProxySid = 14;
    EnterpriseControllersSid = 15;
    SelfSid = 16;
    AuthenticatedUserSid = 17;
    RestrictedCodeSid = 18;
    TerminalServerSid = 19;
    RemoteLogonIdSid = 20;
    LogonIdsSid = 21;
    LocalSystemSid = 22;
    LocalServiceSid = 23;
    NetworkServiceSid = 24;
    BuiltinDomainSid = 25;
    BuiltinAdministratorsSid = 26;
    BuiltinUsersSid = 27;
    BuiltinGuestsSid = 28;
    BuiltinPowerUsersSid = 29;
    BuiltinAccountOperatorsSid = 30;
    BuiltinSystemOperatorsSid = 31;
    BuiltinPrintOperatorsSid = 32;
    BuiltinBackupOperatorsSid = 33;
    BuiltinReplicatorSid = 34;
    BuiltinPreWindows2000CompatibleAccessSid = 35;
    BuiltinRemoteDesktopUsersSid = 36;
    BuiltinNetworkConfigurationOperatorsSid = 37;
    AccountAdministratorSid = 38;
    AccountGuestSid = 39;
    AccountKrbtgtSid = 40;
    AccountDomainAdminsSid = 41;
    AccountDomainUsersSid = 42;
    AccountDomainGuestsSid = 43;
    AccountComputersSid = 44;
    AccountControllersSid = 45;
    AccountCertAdminsSid = 46;
    AccountSchemaAdminsSid = 47;
    AccountEnterpriseAdminsSid = 48;
    AccountPolicyAdminsSid = 49;
    AccountRasAndIasServersSid = 50;
    NtlmAuthenticationSid = 51;
    DigestAuthenticationSid = 52;
    SChannelAuthenticationSid = 53;
    ThisOrganizationSid = 54;
    OtherOrganizationSid = 55;
    BuiltinIncomingForestTrustBuildersSid = 56;
    BuiltinPerformanceMonitoringUsersSid = 57;
    BuiltinPerformanceLoggingUsersSid = 58;
    BuiltinAuthorizationAccessSid = 59;
    WinBuiltinTerminalServerLicenseServersSid = 60;
    MaxDefined = 60;
    WinBuiltinDCOMUsersSid = 61;
    WinBuiltinIUsersSid = 62;
    WinIUserSid = 63;
    WinBuiltinCryptoOperatorsSid = 64;
    WinUntrustedLabelSid = 65;
    WinLowLabelSid = 66;
    WinMediumLabelSid = 67;
    WinHighLabelSid = 68;
    WinSystemLabelSid = 69;
    WinWriteRestrictedCodeSid = 70;
    WinCreatorOwnerRightsSid = 71;
    WinCacheablePrincipalsGroupSid = 72;
    WinNonCacheablePrincipalsGroupSid = 73;
    WinEnterpriseReadonlyControllersSid = 74;
    WinAccountReadonlyControllersSid = 75;
    WinBuiltinEventLogReadersGroup = 76;
    WinNewEnterpriseReadonlyControllersSid = 77;
    WinBuiltinCertSvcDComAccessGroup = 78;
    WinMediumPlusLabelSid = 79;
    WinLocalLogonSid = 80;
    WinConsoleLogonSid = 81;
    WinThisOrganizationCertificateSid = 82;
    WinApplicationPackageAuthoritySid = 83;
    WinBuiltinAnyPackageSid = 84;
    WinCapabilityInternetClientSid = 85;
    WinCapabilityInternetClientServerSid = 86;
    WinCapabilityPrivateNetworkClientServerSid = 87;
    WinCapabilityPicturesLibrarySid = 88;
    WinCapabilityVideosLibrarySid = 89;
    WinCapabilityMusicLibrarySid = 90;
    WinCapabilityDocumentsLibrarySid = 91;
    WinCapabilitySharedUserCertificatesSid = 92;
    WinCapabilityEnterpriseAuthenticationSid = 93;
    WinCapabilityRemovableStorageSid = 94;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WindowsAccountType')]
  DNWindowsAccountType = type Integer;
  DNWindowsAccountTypeHelper = record helper for DNWindowsAccountType
  public const
    Normal = 0;
    Guest = 1;
    System = 2;
    Anonymous = 3;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.WindowsBuiltInRole')]
  DNWindowsBuiltInRole = type Integer;
  DNWindowsBuiltInRoleHelper = record helper for DNWindowsBuiltInRole
  public const
    Administrator = 544;
    User = 545;
    Guest = 546;
    PowerUser = 547;
    AccountOperator = 548;
    SystemOperator = 549;
    PrintOperator = 550;
    BackupOperator = 551;
    Replicator = 552;
  end;




type


{ declares }

  DNIdentityNotMappedException = interface; // type: System.Security.Principal.IdentityNotMappedException, namespace: System.Security.Principal
  DNSafeAccessTokenHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, namespace: Microsoft.Win32.SafeHandles
  DNWindowsIdentity = interface; // type: System.Security.Principal.WindowsIdentity, namespace: System.Security.Principal
  DNWindowsPrincipal = interface; // type: System.Security.Principal.WindowsPrincipal, namespace: System.Security.Principal
  DNIdentityReference = interface; // type: System.Security.Principal.IdentityReference, namespace: System.Security.Principal
  DNNTAccount = interface; // type: System.Security.Principal.NTAccount, namespace: System.Security.Principal
  DNSecurityIdentifier = interface; // type: System.Security.Principal.SecurityIdentifier, namespace: System.Security.Principal
  DNIdentityReferenceCollection = interface; // type: System.Security.Principal.IdentityReferenceCollection, namespace: System.Security.Principal


{ objects }

  //-------------namespace: System.Security.Principal----------------
  DNIdentityNotMappedExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{C4202080-87AD-54A2-B62F-444B78BBAB85}']
  { constructors } 

    {class} function init: DNIdentityNotMappedException; overload;
    {class} function init(message: string): DNIdentityNotMappedException; overload;
    {class} function init(message: string; inner: DDNC.System.Private.CoreLib.DNException): DNIdentityNotMappedException; overload;

  end;

  [DNTypeName('System.Security.Principal.IdentityNotMappedException')]
  DNIdentityNotMappedException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{77C75E63-CA3B-3B83-BCDF-A6203EC5CB9F}']
  { getters & setters } 

    function get_UnmappedIdentities: DNIdentityReferenceCollection;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(serializationInfo: DDNC.System.Private.CoreLib.DNSerializationInfo; streamingContext: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnmappedIdentities: DNIdentityReferenceCollection read get_UnmappedIdentities;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNIdentityNotMappedException = class(TDNGenericImport<DNIdentityNotMappedExceptionClass, DNIdentityNotMappedException>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeAccessTokenHandleClass = interface(DDNC.System.Private.CoreLib.DNSafeHandleClass)
  ['{A099CD00-4310-5DB6-8CF7-6D278AF67604}']
  { static getter & setter } 

    {class} function get_InvalidHandle: DNSafeAccessTokenHandle;

  { constructors } 

    {class} function init(handle: IntPtr): DNSafeAccessTokenHandle;

  { static propertys } 

    {class} property InvalidHandle: DNSafeAccessTokenHandle read get_InvalidHandle;
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeAccessTokenHandle')]
  DNSafeAccessTokenHandle = interface(DDNC.System.Private.CoreLib.DNSafeHandle)
  ['{51AD1316-DF3E-3974-9880-3E90ED97130B}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeAccessTokenHandle = class(TDNGenericImport<DNSafeAccessTokenHandleClass, DNSafeAccessTokenHandle>) end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsIdentityClass = interface(DNObjectClass)
  ['{DDC4C4E2-E950-59B8-92E1-9A73070297EA}']
  { constructors } 

    {class} function init(userToken: IntPtr): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType): DNWindowsIdentity; overload;
    {class} function init(userToken: IntPtr; &type: string; acctType: DNWindowsAccountType; isAuthenticated: Boolean): DNWindowsIdentity; overload;
    {class} function init(sUserPrincipalName: string): DNWindowsIdentity; overload;
    {class} function init(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext): DNWindowsIdentity; overload;

  { static methods } 

    {class} function GetCurrent: DNWindowsIdentity; overload;
    {class} function GetCurrent(ifImpersonating: Boolean): DNWindowsIdentity; overload;
    {class} function GetCurrent(desiredAccess: DNTokenAccessLevels): DNWindowsIdentity; overload;
    {class} function GetAnonymous: DNWindowsIdentity;
    {class} procedure RunImpersonated(safeAccessTokenHandle: DNSafeAccessTokenHandle; action: DDNC.System.Private.CoreLib.DNAction); overload;
    {class} function RunImpersonatedAsync(safeAccessTokenHandle: DNSafeAccessTokenHandle; func: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNTask>): DDNC.System.Private.CoreLib.DNTask; overload;

  end;

  [DNTypeName('System.Security.Principal.WindowsIdentity')]
  DNWindowsIdentity = interface(DNObject)
  ['{7E338076-C8F5-34BA-84E3-69F81300F71F}']
  { getters & setters } 

    function get_AuthenticationType: string;
    function get_ImpersonationLevel: DDNC.System.Private.CoreLib.DNTokenImpersonationLevel;
    function get_IsAuthenticated: Boolean;
    function get_IsGuest: Boolean;
    function get_IsSystem: Boolean;
    function get_IsAnonymous: Boolean;
    function get_Name: string;
    function get_Owner: DNSecurityIdentifier;
    function get_User: DNSecurityIdentifier;
    function get_Groups: DNIdentityReferenceCollection;
    function get_AccessToken: DNSafeAccessTokenHandle;
    function get_Token: IntPtr;
    function get_UserClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_DeviceClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_Claims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_Actor: DDNC.System.Security.Claims.DNClaimsIdentity;
    procedure set_Actor(value: DDNC.System.Security.Claims.DNClaimsIdentity);
    function get_BootstrapContext: DDNC.System.Private.CoreLib.DNObject;
    procedure set_BootstrapContext(value: DDNC.System.Private.CoreLib.DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    procedure Dispose;
    function Clone: DDNC.System.Security.Claims.DNClaimsIdentity;
    procedure AddClaim(claim: DDNC.System.Security.Claims.DNClaim);
    procedure AddClaims(claims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>);
    function TryRemoveClaim(claim: DDNC.System.Security.Claims.DNClaim): Boolean;
    procedure RemoveClaim(claim: DDNC.System.Security.Claims.DNClaim);
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>; overload;
    function FindAll(&type: string): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>; overload;
    function FindFirst(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): DDNC.System.Security.Claims.DNClaim; overload;
    function FindFirst(&type: string): DDNC.System.Security.Claims.DNClaim; overload;
    function HasClaim(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DDNC.System.Private.CoreLib.DNBinaryWriter);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AuthenticationType: string read get_AuthenticationType;
    property ImpersonationLevel: DDNC.System.Private.CoreLib.DNTokenImpersonationLevel read get_ImpersonationLevel;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsGuest: Boolean read get_IsGuest;
    property IsSystem: Boolean read get_IsSystem;
    property IsAnonymous: Boolean read get_IsAnonymous;
    property Name: string read get_Name;
    property Owner: DNSecurityIdentifier read get_Owner;
    property User: DNSecurityIdentifier read get_User;
    property Groups: DNIdentityReferenceCollection read get_Groups;
    property AccessToken: DNSafeAccessTokenHandle read get_AccessToken;
    property Token: IntPtr read get_Token;
    property UserClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_UserClaims;
    property DeviceClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_DeviceClaims;
    property Claims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_Claims;
    property Actor: DDNC.System.Security.Claims.DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DDNC.System.Private.CoreLib.DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNWindowsIdentity = class(TDNGenericImport<DNWindowsIdentityClass, DNWindowsIdentity>)
  public const
   DefaultIssuer = 'AD AUTHORITY';
  end;

  //-------------namespace: System.Security.Principal----------------
  DNWindowsPrincipalClass = interface(DNObjectClass)
  ['{9A078576-C519-58FD-A21C-E8BF1EDCCAEC}']
  { constructors } 

    {class} function init(ntIdentity: DNWindowsIdentity): DNWindowsPrincipal;

  end;

  [DNTypeName('System.Security.Principal.WindowsPrincipal')]
  DNWindowsPrincipal = interface(DNObject)
  ['{3BC91175-6DB1-3A7E-8EB2-6E5BFCDA9B03}']
  { getters & setters } 

    function get_Identity: DDNC.System.Private.CoreLib.DNIIdentity;
    function get_UserClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_DeviceClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_Claims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>;
    function get_Identities: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaimsIdentity>;

  { methods } 

    function IsInRole(role: string): Boolean; overload;
    function IsInRole(role: DNWindowsBuiltInRole): Boolean; overload;
    function IsInRole(rid: Int32): Boolean; overload;
    function IsInRole(sid: DNSecurityIdentifier): Boolean; overload;
    procedure AddIdentity(identity: DDNC.System.Security.Claims.DNClaimsIdentity);
    procedure AddIdentities(identities: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaimsIdentity>);
    function Clone: DDNC.System.Security.Claims.DNClaimsPrincipal;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>; overload;
    function FindAll(&type: string): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim>; overload;
    function FindFirst(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): DDNC.System.Security.Claims.DNClaim; overload;
    function FindFirst(&type: string): DDNC.System.Security.Claims.DNClaim; overload;
    function HasClaim(match: DDNC.System.Private.CoreLib.DNPredicate<DDNC.System.Security.Claims.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DDNC.System.Private.CoreLib.DNBinaryWriter);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Identity: DDNC.System.Private.CoreLib.DNIIdentity read get_Identity;
    property UserClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_UserClaims;
    property DeviceClaims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_DeviceClaims;
    property Claims: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaim> read get_Claims;
    property Identities: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Security.Claims.DNClaimsIdentity> read get_Identities;
  end;

  TDNWindowsPrincipal = class(TDNGenericImport<DNWindowsPrincipalClass, DNWindowsPrincipal>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{26310360-09FA-5664-B361-02B7B852F319}']
  end;

  [DNTypeName('System.Security.Principal.IdentityReference')]
  DNIdentityReference = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C2FD0466-3E38-3C52-92D1-AD814977380B}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function IsValidTargetType(targetType: DDNC.System.Private.CoreLib.DNType): Boolean;
    function Translate(targetType: DDNC.System.Private.CoreLib.DNType): DNIdentityReference;
    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNIdentityReference = class(TDNGenericImport<DNIdentityReferenceClass, DNIdentityReference>) end;

  //-------------namespace: System.Security.Principal----------------
  DNNTAccountClass = interface(DNIdentityReferenceClass)
  ['{D518DCFC-8218-59CA-B555-6FA557680096}']
  { constructors } 

    {class} function init(domainName: string; accountName: string): DNNTAccount; overload;
    {class} function init(name: string): DNNTAccount; overload;

  end;

  [DNTypeName('System.Security.Principal.NTAccount')]
  DNNTAccount = interface(DNIdentityReference)
  ['{DD1018DA-B98F-3394-9B9A-67CCECC3B2EA}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function IsValidTargetType(targetType: DDNC.System.Private.CoreLib.DNType): Boolean;
    function Translate(targetType: DDNC.System.Private.CoreLib.DNType): DNIdentityReference;
    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNNTAccount = class(TDNGenericImport<DNNTAccountClass, DNNTAccount>) end;

  //-------------namespace: System.Security.Principal----------------
  DNSecurityIdentifierClass = interface(DNIdentityReferenceClass)
  ['{8AE9A45D-FEC7-55D8-B75D-C332B021AAAF}']
  { constructors } 

    {class} function init(sddlForm: string): DNSecurityIdentifier; overload;
    {class} function init(binaryForm: TArray<Byte>; offset: Int32): DNSecurityIdentifier; overload;
    {class} function init(binaryForm: IntPtr): DNSecurityIdentifier; overload;
    {class} function init(sidType: DNWellKnownSidType; domainSid: DNSecurityIdentifier): DNSecurityIdentifier; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinBinaryLength: Int32;
   function __fakeFieldGet_MaxBinaryLength: Int32;

  { static fields } 

    {class} property MinBinaryLength: Int32 read __fakeFieldGet_MinBinaryLength;
    {class} property MaxBinaryLength: Int32 read __fakeFieldGet_MaxBinaryLength;

  end;

  [DNTypeName('System.Security.Principal.SecurityIdentifier')]
  DNSecurityIdentifier = interface(DNIdentityReference)
  ['{A4E62D6A-8A08-31A9-81D9-5AE8E8261117}']
  { getters & setters } 

    function get_BinaryLength: Int32;
    function get_AccountDomainSid: DNSecurityIdentifier;
    function get_Value: string;

  { methods } 

    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(sid: DNSecurityIdentifier): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function IsValidTargetType(targetType: DDNC.System.Private.CoreLib.DNType): Boolean;
    function IsAccountSid: Boolean;
    function Translate(targetType: DDNC.System.Private.CoreLib.DNType): DNIdentityReference;
    function CompareTo(sid: DNSecurityIdentifier): Int32;
    function IsWellKnown(&type: DNWellKnownSidType): Boolean;
    procedure GetBinaryForm(binaryForm: TArray<Byte>; offset: Int32);
    function IsEqualDomainSid(sid: DNSecurityIdentifier): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property BinaryLength: Int32 read get_BinaryLength;
    property AccountDomainSid: DNSecurityIdentifier read get_AccountDomainSid;
    property Value: string read get_Value;
  end;

  TDNSecurityIdentifier = class(TDNGenericImport<DNSecurityIdentifierClass, DNSecurityIdentifier>) end;

  //-------------namespace: System.Security.Principal----------------
  DNIdentityReferenceCollectionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AECDF78A-3B27-5017-ADB9-4AF5C54BEB92}']
  { constructors } 

    {class} function init: DNIdentityReferenceCollection; overload;
    {class} function init(capacity: Int32): DNIdentityReferenceCollection; overload;

  end;

  [DNTypeName('System.Security.Principal.IdentityReferenceCollection')]
  DNIdentityReferenceCollection = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8A1665D0-AD8B-3148-A537-C9DB8847CA28}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIdentityReference;
    procedure set_Item(index: Int32; value: DNIdentityReference);

  { methods } 

    procedure CopyTo(&array: TArray<DNIdentityReference>; offset: Int32);
    function &Contains(identity: DNIdentityReference): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNIdentityReference>;
    function Translate(targetType: DDNC.System.Private.CoreLib.DNType): DNIdentityReferenceCollection; overload;
    function Translate(targetType: DDNC.System.Private.CoreLib.DNType; forceSuccess: Boolean): DNIdentityReferenceCollection; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIdentityReference read get_Item write set_Item; default;
  end;

  TDNIdentityReferenceCollection = class(TDNGenericImport<DNIdentityReferenceCollectionClass, DNIdentityReferenceCollection>) end;


implementation


initialization
  LoadAssemblyModule('System.Security.Principal.Windows.dll', True, 'System.Security.Principal.Windows, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
