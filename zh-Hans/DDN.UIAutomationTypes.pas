//----------------------------------------------------------------------------
//  UIAutomationTypes.dll: UIAutomationTypes, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.UIAutomationTypes
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.UIAutomationTypes;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib;

type

{ enums }

  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含一些值，它们指定要加载到内容元素中的内容的状态。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AsyncContentLoadedState')]
  DNAsyncContentLoadedState = type Integer;
  DNAsyncContentLoadedStateHelper = record helper for DNAsyncContentLoadedState
  public const
    ///<summary>
    ///  指定开始将内容异步加载到 UI 自动化 元素中。
    ///</summary>
    Beginning = 0;
    ///<summary>
    ///  指定正在将内容异步加载到 UI 自动化 元素中。
    ///  UI 自动化提供程序应指定完成百分比，以便客户端应用程序知道如何还剩余多少内容。
    ///</summary>
    Progress = 1;
    ///<summary>
    ///  指定已完成将内容异步加载到 UI 自动化 元素中。
    ///</summary>
    Completed = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定由 <see cref="T:System.Windows.Automation.DockPattern" />
  ///  表示的对象在停靠容器内的停靠位置的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.DockPosition')]
  DNDockPosition = type Integer;
  DNDockPositionHelper = record helper for DNDockPosition
  public const
    ///<summary>
    ///  指示将 UI 自动化元素沿停靠容器的顶部边缘停靠。
    ///</summary>
    Top = 0;
    ///<summary>
    ///  指示将 UI 自动化元素沿停靠容器的左边缘停靠。
    ///</summary>
    Left = 1;
    ///<summary>
    ///  指示将 UI 自动化元素沿停靠容器的底部边缘停靠。
    ///</summary>
    Bottom = 2;
    ///<summary>
    ///  指示将 UI 自动化元素沿停靠容器的右边缘停靠。
    ///</summary>
    Right = 3;
    ///<summary>
    ///  指示将 UI 自动化元素沿停靠容器的所有边缘停靠，并填充容器内的全部可用空间。
    ///</summary>
    Fill = 4;
    ///<summary>
    ///  指示 UI 自动化元素不沿停靠容器的任何边缘停靠。
    ///</summary>
    None = 5;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含用于指定 UI 自动化元素的 <see cref="T:System.Windows.Automation.ExpandCollapseState" />
  ///  的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ExpandCollapseState')]
  DNExpandCollapseState = type Integer;
  DNExpandCollapseStateHelper = record helper for DNExpandCollapseState
  public const
    ///<summary>
    ///  不显示 UI 自动化元素的子节点、控件或内容。
    ///</summary>
    Collapsed = 0;
    ///<summary>
    ///  显示 UI 自动化元素的所有子节点、控件或内容。
    ///</summary>
    Expanded = 1;
    ///<summary>
    ///  显示 UI 自动化元素的部分（而不是全部）子节点、控件或内容。
    ///</summary>
    PartiallyExpanded = 2;
    ///<summary>
    ///  UI 自动化元素没有要显示的子节点、控件或内容。
    ///</summary>
    LeafNode = 3;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定控件的方向的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.OrientationType')]
  DNOrientationType = type Integer;
  DNOrientationTypeHelper = record helper for DNOrientationType
  public const
    ///<summary>
    ///  指定控件具有没有方向。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定在控件有水平方向。
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  指定在控件有垂直方向。
    ///</summary>
    Vertical = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定是否应读取表中的数据，主要是按行或列的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.RowOrColumnMajor')]
  DNRowOrColumnMajor = type Integer;
  DNRowOrColumnMajorHelper = record helper for DNRowOrColumnMajor
  public const
    ///<summary>
    ///  指定按行应读取表中的数据。
    ///</summary>
    RowMajor = 0;
    ///<summary>
    ///  指定按列应读取表中的数据
    ///</summary>
    ColumnMajor = 1;
    ///<summary>
    ///  指定将数据呈现的最好办法是不确定。
    ///</summary>
    Indeterminate = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含所用值 <see cref="T:System.Windows.Automation.ScrollPattern" />
  ///  来指示的方向和要向下滚动距离。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ScrollAmount')]
  DNScrollAmount = type Integer;
  DNScrollAmountHelper = record helper for DNScrollAmount
  public const
    ///<summary>
    ///  指定按大的递减量，等效于完成滚动 向上翻页 或单击滚动条的空白部分。
    ///  如果 向上翻页 不是为该控件和/或任何滚动条相关量存在滚动条，该值表示与当前可见的窗口相等量。
    ///</summary>
    LargeDecrement = 0;
    ///<summary>
    ///  指定在小的递减量，等效于按箭头键或单击滚动条上的箭头按钮完成滚动。
    ///</summary>
    SmallDecrement = 1;
    ///<summary>
    ///  指定不应执行滚动。
    ///</summary>
    NoAmount = 2;
    ///<summary>
    ///  指定较大跨度，等效于完成滚动 下翻页 或单击滚动条组件正轨。
    ///  如果 下翻页 不是为该控件和/或任何滚动条相关量存在滚动条，该值表示与当前的可见区域相等量。
    ///</summary>
    LargeIncrement = 3;
    ///<summary>
    ///  指定以较小增量，等效于按箭头键或单击滚动条上的箭头按钮完成滚动。
    ///</summary>
    SmallIncrement = 4;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定 Microsoft UI 自动化 元素树结构中的更改的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.StructureChangeType')]
  DNStructureChangeType = type Integer;
  DNStructureChangeTypeHelper = record helper for DNStructureChangeType
  public const
    ///<summary>
    ///  已将一个子元素添加到 UI 自动化 元素树。
    ///</summary>
    ChildAdded = 0;
    ///<summary>
    ///  已从 UI 自动化 元素树中删除一个子元素。
    ///</summary>
    ChildRemoved = 1;
    ///<summary>
    ///  UI 自动化 元素树中的子元素已无效。
    ///  这可能意味着添加或删除了一个或多个子元素，具体取决于 UI 自动化提供程序的实现。
    ///</summary>
    ChildrenInvalidated = 2;
    ///<summary>
    ///  已将多个子元素添加到 UI 自动化 元素树。
    ///</summary>
    ChildrenBulkAdded = 3;
    ///<summary>
    ///  已从 UI 自动化 元素树中删除多个子元素。
    ///</summary>
    ChildrenBulkRemoved = 4;
    ///<summary>
    ///  UI 自动化 元素树中的子元素顺序已更改。
    ///</summary>
    ChildrenReordered = 5;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含的值用于指定是否文本提供程序支持选择，指定如果是这样，它是否支持单一、 连续的所选内容或多个不连续的选择。
  ///</summary>
  [DNTypeName('System.Windows.Automation.SupportedTextSelection')]
  DNSupportedTextSelection = type Integer;
  DNSupportedTextSelectionHelper = record helper for DNSupportedTextSelection
  public const
    ///<summary>
    ///  不支持文本选择。
    ///</summary>
    None = 0;
    ///<summary>
    ///  支持一个连续文本选择。
    ///</summary>
    Single = 1;
    ///<summary>
    ///  支持多个不连续文本选择。
    ///</summary>
    Multiple = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定的同步输入类型的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.SynchronizedInputType')]
  DNSynchronizedInputType = type Integer;
  DNSynchronizedInputTypeHelper = record helper for DNSynchronizedInputType
  public const
    ///<summary>
    ///  已释放某个键。
    ///</summary>
    KeyUp = 1;
    ///<summary>
    ///  按下某个键。
    ///</summary>
    KeyDown = 2;
    ///<summary>
    ///  已释放鼠标左键。
    ///</summary>
    MouseLeftButtonUp = 4;
    ///<summary>
    ///  已按下鼠标左键。
    ///</summary>
    MouseLeftButtonDown = 8;
    ///<summary>
    ///  已释放鼠标按钮。
    ///</summary>
    MouseRightButtonUp = 16;
    ///<summary>
    ///  已按下鼠标按钮。
    ///</summary>
    MouseRightButtonDown = 32;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  表示值的 <see cref="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.AnimationStyle')]
  DNAnimationStyle = type Integer;
  DNAnimationStyleHelper = record helper for DNAnimationStyle
  public const
    ///<summary>
    ///  指定不有任何动画样式。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定的绑定矩形显示交替不同颜色的图标的边框。
    ///</summary>
    LasVegasLights = 1;
    ///<summary>
    ///  指定的字体和背景指定的颜色和对比颜色之间交替。
    ///</summary>
    BlinkingBackground = 2;
    ///<summary>
    ///  指定在背景上显示闪烁，多彩色图标。
    ///</summary>
    SparkleText = 3;
    ///<summary>
    ///  指定的绑定矩形显示不断移动的黑色短划线。
    ///</summary>
    MarchingBlackAnts = 4;
    ///<summary>
    ///  指定的绑定矩形显示不断移动的红色虚线。
    ///</summary>
    MarchingRedAnts = 5;
    ///<summary>
    ///  指定字体稳定和经过模糊处理之间交替。
    ///</summary>
    Shimmer = 6;
    ///<summary>
    ///  指定动画样式是在没有显式列举 <see cref="T:System.Windows.Automation.Text.AnimationStyle" />
    ///  枚举。
    ///</summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  值为 <see cref="F:System.Windows.Automation.TextPattern.BulletStyleAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.BulletStyle')]
  DNBulletStyle = type Integer;
  DNBulletStyleHelper = record helper for DNBulletStyle
  public const
    ///<summary>
    ///  无项目符号样式。
    ///</summary>
    None = 0;
    ///<summary>
    ///  空心圆项目符号。
    ///</summary>
    HollowRoundBullet = 1;
    ///<summary>
    ///  实心圆形项目符号。
    ///</summary>
    FilledRoundBullet = 2;
    ///<summary>
    ///  空心方形项目符号。
    ///</summary>
    HollowSquareBullet = 3;
    ///<summary>
    ///  实心方形项目符号。
    ///</summary>
    FilledSquareBullet = 4;
    ///<summary>
    ///  短划线项目符号。
    ///</summary>
    DashBullet = 5;
    ///<summary>
    ///  中没有显式指定另一个项目符号样式 <see cref="T:System.Windows.Automation.Text.BulletStyle" />
    ///  枚举。
    ///</summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  表示值的 <see cref="F:System.Windows.Automation.TextPattern.CapStyleAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.CapStyle')]
  DNCapStyle = type Integer;
  DNCapStyleHelper = record helper for DNCapStyle
  public const
    ///<summary>
    ///  指示没有大写样式;大写和小写字母正常呈现。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指示的大小写样式为小型大写字母;小写字母将替换为大写字母字体的 x-height 相同的近似高度。
    ///</summary>
    SmallCap = 1;
    ///<summary>
    ///  指示的大小写样式为全部大写;全部以小写字母将替换为大写字母。
    ///</summary>
    AllCap = 2;
    ///<summary>
    ///  指示的大小写样式为全部小号大写字母;大写和小写字母将替换为大写字母略小于小型大写字母。
    ///</summary>
    AllPetiteCaps = 3;
    ///<summary>
    ///  指示的大小写样式为小号大写字母;小写字母将替换为大写字母略小于小型大写字母。
    ///</summary>
    PetiteCaps = 4;
    ///<summary>
    ///  指示的大小写样式为 unicase;大写和小写字母都呈现为由类型设计器的方式。
    ///  Unicase 字母表是指不指定其字母的大小写。
    ///</summary>
    Unicase = 5;
    ///<summary>
    ///  指示的大小写样式为标题大小写;大写和小写字母都呈现为与专为标题的字母。
    ///</summary>
    Titling = 6;
    ///<summary>
    ///  指示大写样式是一种样式中没有显式指定 <see cref="T:System.Windows.Automation.Text.CapStyle" />
    ///  枚举。
    ///</summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  值为 <see cref="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.FlowDirections')]
  DNFlowDirections = type Integer;
  DNFlowDirectionsHelper = record helper for DNFlowDirections
  public const
    ///<summary>
    ///  从上到下，从左到右，水平。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  从右到左。
    ///</summary>
    RightToLeft = 1;
    ///<summary>
    ///  从下到上。
    ///</summary>
    BottomToTop = 2;
    ///<summary>
    ///  垂直。
    ///</summary>
    Vertical = 4;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  值<see cref="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute" />
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.HorizontalTextAlignment')]
  DNHorizontalTextAlignment = type Integer;
  DNHorizontalTextAlignmentHelper = record helper for DNHorizontalTextAlignment
  public const
    ///<summary>
    ///  左对齐。
    ///</summary>
    Left = 0;
    ///<summary>
    ///  居中。
    ///</summary>
    Centered = 1;
    ///<summary>
    ///  右对齐。
    ///</summary>
    Right = 2;
    ///<summary>
    ///  两端对齐。
    ///</summary>
    Justified = 3;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  值为 <see cref="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.OutlineStyles')]
  DNOutlineStyles = type Integer;
  DNOutlineStylesHelper = record helper for DNOutlineStyles
  public const
    ///<summary>
    ///  无边框样式。
    ///</summary>
    None = 0;
    ///<summary>
    ///  简要介绍。
    ///</summary>
    Outline = 1;
    ///<summary>
    ///  带有阴影。
    ///</summary>
    Shadow = 2;
    ///<summary>
    ///  阴文。
    ///</summary>
    Engraved = 4;
    ///<summary>
    ///  具有阳文效果。
    ///</summary>
    Embossed = 8;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  值为 <see cref="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.TextDecorationLineStyle')]
  DNTextDecorationLineStyle = type Integer;
  DNTextDecorationLineStyleHelper = record helper for DNTextDecorationLineStyle
  public const
    ///<summary>
    ///  任何文本效果线样式。
    ///</summary>
    None = 0;
    ///<summary>
    ///  单个行。
    ///</summary>
    Single = 1;
    ///<summary>
    ///  仅限单词。
    ///</summary>
    WordsOnly = 2;
    ///<summary>
    ///  双线。
    ///</summary>
    Double = 3;
    ///<summary>
    ///  点线。
    ///</summary>
    Dot = 4;
    ///<summary>
    ///  虚线。
    ///</summary>
    Dash = 5;
    ///<summary>
    ///  变换的点划线。
    ///</summary>
    DashDot = 6;
    ///<summary>
    ///  交替短划线-点点行。
    ///</summary>
    DashDotDot = 7;
    ///<summary>
    ///  波浪线。
    ///</summary>
    Wavy = 8;
    ///<summary>
    ///  密集的单个行。
    ///</summary>
    ThickSingle = 9;
    ///<summary>
    ///  双波浪线。
    ///</summary>
    DoubleWavy = 11;
    ///<summary>
    ///  粗波浪线。
    ///</summary>
    ThickWavy = 12;
    ///<summary>
    ///  长时间虚线。
    ///</summary>
    LongDash = 13;
    ///<summary>
    ///  粗虚线。
    ///</summary>
    ThickDash = 14;
    ///<summary>
    ///  粗交替短划线-点线。
    ///</summary>
    ThickDashDot = 15;
    ///<summary>
    ///  粗交替短划线-点点线。
    ///</summary>
    ThickDashDotDot = 16;
    ///<summary>
    ///  粗点线。
    ///</summary>
    ThickDot = 17;
    ///<summary>
    ///  粗长破折号线。
    ///</summary>
    ThickLongDash = 18;
    ///<summary>
    ///  中没有显式指定的另一个文本修饰线样式 <see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  枚举。
    ///</summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  允许要调用的方法时标识的终结点 <see cref="T:System.Windows.Automation.Text.TextPatternRange" />
  ///  。
  ///  每个 <see cref="T:System.Windows.Automation.Text.TextPatternRange" />
  ///  有两个端点 (<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" />
  ///  和 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />
  ///  )。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.TextPatternRangeEndpoint')]
  DNTextPatternRangeEndpoint = type Integer;
  DNTextPatternRangeEndpointHelper = record helper for DNTextPatternRangeEndpoint
  public const
    ///<summary>
    ///  标识范围的起始点。
    ///</summary>
    Start = 0;
    ///<summary>
    ///  标识范围的结束点。
    ///</summary>
    End_ = 1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>
  ///  表示在文档中导航的目的为预定义文本的单位。
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.TextUnit')]
  DNTextUnit = type Integer;
  DNTextUnitHelper = record helper for DNTextUnit
  public const
    ///<summary>
    ///  指定的文本单位是一个字符的长度。
    ///</summary>
    Character = 0;
    ///<summary>
    ///  指定的文本单位是一种单一的常用格式规范，如粗体、 斜体或类似的长度。
    ///</summary>
    Format = 1;
    ///<summary>
    ///  指定的文本单位是一个单词的长度。
    ///</summary>
    Word = 2;
    ///<summary>
    ///  指定的文本单位是一个行的长度。
    ///</summary>
    Line = 3;
    ///<summary>
    ///  指定的文本单位的长度一段。
    ///</summary>
    Paragraph = 4;
    ///<summary>
    ///  指定的文本单位的长度的一个特定于文档的页面。
    ///</summary>
    Page = 5;
    ///<summary>
    ///  指定的文本单位是整个文档的长度。
    ///</summary>
    Document = 6;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含用于指定 UI 自动化元素的 <see cref="T:System.Windows.Automation.ToggleState" />
  ///  的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ToggleState')]
  DNToggleState = type Integer;
  DNToggleStateHelper = record helper for DNToggleState
  public const
    ///<summary>
    ///  不对 UI 自动化元素进行选定、勾选、标记或激活。
    ///</summary>
    Off = 0;
    ///<summary>
    ///  对 UI 自动化元素进行选择、勾选、标记或激活。
    ///</summary>
    On_ = 1;
    ///<summary>
    ///  UI 自动化元素处于不确定状态。
    ///</summary>
    Indeterminate = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定的作用域内的元素的值 UI 自动化 树。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TreeScope')]
  DNTreeScope = type Integer;
  DNTreeScopeHelper = record helper for DNTreeScope
  public const
    ///<summary>
    ///  指定搜索包括元素本身。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  指定搜索包括元素的直接子级。
    ///</summary>
    Children = 2;
    ///<summary>
    ///  指定搜索包括该元素的后代，其中包括子级。
    ///</summary>
    Descendants = 4;
    ///<summary>
    ///  指定该搜索包含搜索和所有后代的根。
    ///</summary>
    Subtree = 7;
    ///<summary>
    ///  指定搜索包括该元素的父级。
    ///  不支持。
    ///</summary>
    Parent = 8;
    ///<summary>
    ///  指定搜索包括该元素的上级，包括父。
    ///  不支持。
    ///</summary>
    Ancestors = 16;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定用于用户或编程交互的窗口的当前状态的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.WindowInteractionState')]
  DNWindowInteractionState = type Integer;
  DNWindowInteractionStateHelper = record helper for DNWindowInteractionState
  public const
    ///<summary>
    ///  指示正在运行窗口中。
    ///  这不保证窗口会响应或准备好进行用户交互。
    ///</summary>
    Running = 0;
    ///<summary>
    ///  指示正在关闭窗口中。
    ///</summary>
    Closing = 1;
    ///<summary>
    ///  指示窗口中可供用户交互。
    ///</summary>
    ReadyForUserInteraction = 2;
    ///<summary>
    ///  指示窗口被阻止由一个模式窗口。
    ///</summary>
    BlockedByModalWindow = 3;
    ///<summary>
    ///  指示未响应窗口中。
    ///</summary>
    NotResponding = 4;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>
  ///  包含指定窗口的可视状态的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.WindowVisualState')]
  DNWindowVisualState = type Integer;
  DNWindowVisualStateHelper = record helper for DNWindowVisualState
  public const
    ///<summary>
    ///  指定窗口为正常 （还原）。
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  指定窗口已最大化。
    ///</summary>
    Maximized = 1;
    ///<summary>
    ///  指定窗口已最小化。
    ///</summary>
    Minimized = 2;
  end;




type


{ declares }

  DNAutomationEventArgs = interface; // type: System.Windows.Automation.AutomationEventArgs, namespace: System.Windows.Automation
  DNAsyncContentLoadedEventArgs = interface; // type: System.Windows.Automation.AsyncContentLoadedEventArgs, namespace: System.Windows.Automation
  DNAutomationPropertyChangedEventArgs = interface; // type: System.Windows.Automation.AutomationPropertyChangedEventArgs, namespace: System.Windows.Automation
  DNStructureChangedEventArgs = interface; // type: System.Windows.Automation.StructureChangedEventArgs, namespace: System.Windows.Automation
  DNWindowClosedEventArgs = interface; // type: System.Windows.Automation.WindowClosedEventArgs, namespace: System.Windows.Automation
  DNElementNotEnabledException = interface; // type: System.Windows.Automation.ElementNotEnabledException, namespace: System.Windows.Automation
  DNElementNotAvailableException = interface; // type: System.Windows.Automation.ElementNotAvailableException, namespace: System.Windows.Automation
  DNNoClickablePointException = interface; // type: System.Windows.Automation.NoClickablePointException, namespace: System.Windows.Automation
  DNProxyAssemblyNotLoadedException = interface; // type: System.Windows.Automation.ProxyAssemblyNotLoadedException, namespace: System.Windows.Automation
  DNAutomationElementIdentifiers = interface; // type: System.Windows.Automation.AutomationElementIdentifiers, namespace: System.Windows.Automation
  DNAutomationIdentifier = interface; // type: System.Windows.Automation.AutomationIdentifier, namespace: System.Windows.Automation
  DNAutomationEvent = interface; // type: System.Windows.Automation.AutomationEvent, namespace: System.Windows.Automation
  DNAutomationPattern = interface; // type: System.Windows.Automation.AutomationPattern, namespace: System.Windows.Automation
  DNAutomationProperty = interface; // type: System.Windows.Automation.AutomationProperty, namespace: System.Windows.Automation
  DNAutomationTextAttribute = interface; // type: System.Windows.Automation.AutomationTextAttribute, namespace: System.Windows.Automation
  DNControlType = interface; // type: System.Windows.Automation.ControlType, namespace: System.Windows.Automation
  DNDockPatternIdentifiers = interface; // type: System.Windows.Automation.DockPatternIdentifiers, namespace: System.Windows.Automation
  DNExpandCollapsePatternIdentifiers = interface; // type: System.Windows.Automation.ExpandCollapsePatternIdentifiers, namespace: System.Windows.Automation
  DNGridItemPatternIdentifiers = interface; // type: System.Windows.Automation.GridItemPatternIdentifiers, namespace: System.Windows.Automation
  DNGridPatternIdentifiers = interface; // type: System.Windows.Automation.GridPatternIdentifiers, namespace: System.Windows.Automation
  DNInvokePatternIdentifiers = interface; // type: System.Windows.Automation.InvokePatternIdentifiers, namespace: System.Windows.Automation
  DNItemContainerPatternIdentifiers = interface; // type: System.Windows.Automation.ItemContainerPatternIdentifiers, namespace: System.Windows.Automation
  DNMultipleViewPatternIdentifiers = interface; // type: System.Windows.Automation.MultipleViewPatternIdentifiers, namespace: System.Windows.Automation
  DNRangeValuePatternIdentifiers = interface; // type: System.Windows.Automation.RangeValuePatternIdentifiers, namespace: System.Windows.Automation
  DNScrollItemPatternIdentifiers = interface; // type: System.Windows.Automation.ScrollItemPatternIdentifiers, namespace: System.Windows.Automation
  DNScrollPatternIdentifiers = interface; // type: System.Windows.Automation.ScrollPatternIdentifiers, namespace: System.Windows.Automation
  DNSelectionItemPatternIdentifiers = interface; // type: System.Windows.Automation.SelectionItemPatternIdentifiers, namespace: System.Windows.Automation
  DNSelectionPatternIdentifiers = interface; // type: System.Windows.Automation.SelectionPatternIdentifiers, namespace: System.Windows.Automation
  DNSynchronizedInputPatternIdentifiers = interface; // type: System.Windows.Automation.SynchronizedInputPatternIdentifiers, namespace: System.Windows.Automation
  DNTableItemPatternIdentifiers = interface; // type: System.Windows.Automation.TableItemPatternIdentifiers, namespace: System.Windows.Automation
  DNTablePatternIdentifiers = interface; // type: System.Windows.Automation.TablePatternIdentifiers, namespace: System.Windows.Automation
  DNTextPatternIdentifiers = interface; // type: System.Windows.Automation.TextPatternIdentifiers, namespace: System.Windows.Automation
  DNTogglePatternIdentifiers = interface; // type: System.Windows.Automation.TogglePatternIdentifiers, namespace: System.Windows.Automation
  DNTransformPatternIdentifiers = interface; // type: System.Windows.Automation.TransformPatternIdentifiers, namespace: System.Windows.Automation
  DNValuePatternIdentifiers = interface; // type: System.Windows.Automation.ValuePatternIdentifiers, namespace: System.Windows.Automation
  DNVirtualizedItemPatternIdentifiers = interface; // type: System.Windows.Automation.VirtualizedItemPatternIdentifiers, namespace: System.Windows.Automation
  DNWindowPatternIdentifiers = interface; // type: System.Windows.Automation.WindowPatternIdentifiers, namespace: System.Windows.Automation

{ delegates }

  ///<summary>
  ///  表示由 UI 自动化客户端应用程序实现的方法，该方法处理由 UI 自动化提供程序引发的事件。
  ///</summary>
  ///  <param name="sender">
  ///  引发事件的对象。
  ///</param>
  ///  <param name="e">
  ///  有关事件的信息。
  ///</param>
  [DNTypeName('System.Windows.Automation.AutomationEventHandler')]
  DNAutomationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAutomationEventArgs) of object;

  ///<summary>
  ///  表示由 UI 自动化客户端应用程序实现的方法，该方法处理在属性更改后由 UI 自动化提供程序引发的事件。
  ///</summary>
  ///  <param name="sender">
  ///  引发事件的对象。
  ///</param>
  ///  <param name="e">
  ///  有关事件的信息。
  ///</param>
  [DNTypeName('System.Windows.Automation.AutomationPropertyChangedEventHandler')]
  DNAutomationPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAutomationPropertyChangedEventArgs) of object;

  ///<summary>
  ///  表示一个由客户端应用程序实现的方法，用于处理 UI 自动化 关系树结构发生变化时引起的事件。
  ///</summary>
  ///  <param name="sender">
  ///  引发事件的对象。
  ///</param>
  ///  <param name="e">
  ///  有关事件的信息。
  ///</param>
  [DNTypeName('System.Windows.Automation.StructureChangedEventHandler')]
  DNStructureChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStructureChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EECFEF76-82E3-5727-A232-36B78B79B13C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.AutomationEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="eventId">
    ///  事件标识符。
    ///</param>
    {class} function init(eventId: DNAutomationEvent): DNAutomationEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 UI 自动化 事件传递给 <see cref="T:System.Windows.Automation.AutomationEventHandler" />
  ///  委托。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationEventArgs')]
  DNAutomationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{ABAEB7E7-A514-352A-80A1-E3DFA09AF111}']
  { getters & setters } 

    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件标识符。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAutomationEventArgs = class(TDNGenericImport<DNAutomationEventArgsClass, DNAutomationEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAsyncContentLoadedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{AAF51CED-9DC4-5F65-B70E-DB4F23C532F8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.AsyncContentLoadedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="asyncContentState">
    ///  内容加载的状态。
    ///</param>
    ///  <param name="percentComplete">
    ///  已加载的内容的百分比。
    ///</param>
    {class} function init(asyncContentState: DNAsyncContentLoadedState; percentComplete: Double): DNAsyncContentLoadedEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AsyncContentLoadedEventArgs')]
  DNAsyncContentLoadedEventArgs = interface(DNAutomationEventArgs)
  ['{CC63525C-1F7F-3F3B-BA81-7B9EB2FE6FA9}']
  { getters & setters } 

    function get_AsyncContentLoadedState: DNAsyncContentLoadedState;
    function get_PercentComplete: Double;
    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取内容的加载的状态。
    ///</summary>
    ///<returns><see cref="T:System.Windows.Automation.AsyncContentLoadedState" />
    ///  值之一。
    ///</returns>
    property AsyncContentLoadedState: DNAsyncContentLoadedState read get_AsyncContentLoadedState;
    ///<summary>
    ///  获取已加载的内容的百分比。
    ///</summary>
    ///<returns>
    ///  已加载的内容的百分比。
    ///</returns>
    property PercentComplete: Double read get_PercentComplete;
    ///<summary>
    ///  获取事件标识符。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAsyncContentLoadedEventArgs = class(TDNGenericImport<DNAsyncContentLoadedEventArgsClass, DNAsyncContentLoadedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertyChangedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{5F990427-935D-590E-8B89-FEBA12A44395}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.AutomationPropertyChangedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="property">
    ///  已更改的属性的标识符。
    ///</param>
    ///  <param name="oldValue">
    ///  属性的上一个值。
    ///</param>
    ///  <param name="newValue">
    ///  属性的新值。
    ///</param>
    {class} function init(&property: DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNAutomationPropertyChangedEventArgs;

  end;

  ///<summary>
  ///  提供有关属性更改事件的信息。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationPropertyChangedEventArgs')]
  DNAutomationPropertyChangedEventArgs = interface(DNAutomationEventArgs)
  ['{70C95033-A396-3778-9C1B-39228A9C9B3E}']
  { getters & setters } 

    function get_Property: DNAutomationProperty;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Automation.AutomationProperty" />
    ///  标识符，表明哪个属性发生更改。
    ///</summary>
    ///<returns>
    ///  已更改的属性的标识符。
    ///</returns>
    property &Property: DNAutomationProperty read get_Property;
    ///<summary>
    ///  获取已更改的属性的旧值。
    ///</summary>
    ///<returns>
    ///  属性的上一个值，如果不能立即使用上一个值则为 null（Microsoft Visual Basic .NET 中为 <see langword="Nothing" />
    ///  ）。
    ///</returns>
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    ///<summary>
    ///  获取已更改的属性的新值。
    ///</summary>
    ///<returns>
    ///  属性的新值。
    ///</returns>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    ///<summary>
    ///  获取事件标识符。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAutomationPropertyChangedEventArgs = class(TDNGenericImport<DNAutomationPropertyChangedEventArgsClass, DNAutomationPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNStructureChangedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{FA82E66B-09D9-5B3A-850A-9B668E17516E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType" />
    ///  类的新实例，同时指定更改类型和其结构发生更改的元素的 标识符 (ID)。
    ///</summary>
    ///  <param name="structureChangeType">
    ///  用于指定更改类型的单个值。
    ///</param>
    ///  <param name="runtimeId">
    ///  其结构发生更改的 UI 自动化 元素的运行时 标识符 (ID)。
    ///  请参阅“备注”。
    ///</param>
    {class} function init(structureChangeType: DNStructureChangeType; runtimeId: TArray<Int32>): DNStructureChangedEventArgs;

  end;

  ///<summary>
  ///  包含有关的事件的信息时引发 UI 自动化 树状结构已更改。
  ///</summary>
  [DNTypeName('System.Windows.Automation.StructureChangedEventArgs')]
  DNStructureChangedEventArgs = interface(DNAutomationEventArgs)
  ['{D706853C-4F01-357E-90D0-9416ECFDB0F8}']
  { getters & setters } 

    function get_StructureChangeType: DNStructureChangeType;
    function get_EventId: DNAutomationEvent;

  { methods } 

    ///<summary>
    ///  检索 UI 自动化 运行时 标识符 (ID) 的 UI 自动化 结构发生更改的元素。
    ///</summary>
    ///<returns>
    ///  其结构发生更改的 UI 自动化 元素的运行时 ID。
    ///</returns>
    function GetRuntimeId: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示在发生的更改类型 UI 自动化 树结构。
    ///</summary>
    ///<returns>
    ///  类型更改时发生。
    ///</returns>
    property StructureChangeType: DNStructureChangeType read get_StructureChangeType;
    ///<summary>
    ///  获取事件标识符。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNStructureChangedEventArgs = class(TDNGenericImport<DNStructureChangedEventArgsClass, DNStructureChangedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNWindowClosedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{35691F3D-E28B-5A72-856B-97947BE6ADC3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.WindowClosedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="runtimeId">
    ///  运行时标识符的已关闭窗口中。
    ///</param>
    {class} function init(runtimeId: TArray<Int32>): DNWindowClosedEventArgs;

  end;

  ///<summary>
  ///  包含有关窗口关闭时，将引发该事件的信息。
  ///</summary>
  [DNTypeName('System.Windows.Automation.WindowClosedEventArgs')]
  DNWindowClosedEventArgs = interface(DNAutomationEventArgs)
  ['{75EA5EC5-6EDE-371D-93F6-84CC754C5A8D}']
  { getters & setters } 

    function get_EventId: DNAutomationEvent;

  { methods } 

    ///<summary>
    ///  检索 UI 自动化 运行时 标识符 (ID) 与此事件关联。
    ///</summary>
    ///<returns>
    ///  UI 自动化 运行时 ID 引发该事件的窗口。
    ///</returns>
    function GetRuntimeId: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取事件标识符。
    ///</summary>
    ///<returns>
    ///  事件标识符。
    ///</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNWindowClosedEventArgs = class(TDNGenericImport<DNWindowClosedEventArgsClass, DNWindowClosedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNElementNotEnabledExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{74AF6582-B5F3-5191-B4A8-7297519EB349}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNElementNotEnabledException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNElementNotEnabledException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNElementNotEnabledException; overload;

  end;

  ///<summary>
  ///  包含有关尝试操作未启用的控件时，将引发异常的信息。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ElementNotEnabledException')]
  DNElementNotEnabledException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{54461C84-05F7-3267-A382-9BE8A61974A2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  检索序列化目标对象所需的数据。
    ///</summary>
    ///  <param name="info">
    ///  要序列化或反序列化对象所需的数据。
    ///</param>
    ///  <param name="context">
    ///  序列化流的目标。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNElementNotEnabledException = class(TDNGenericImport<DNElementNotEnabledExceptionClass, DNElementNotEnabledException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNElementNotAvailableExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{600424F4-1EC9-54AF-AE1E-0021E3FE44C8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNElementNotAvailableException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNElementNotAvailableException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNElementNotAvailableException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  类提供对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="innerException">
    ///  导致此异常的异常。
    ///</param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNElementNotAvailableException; overload;

  end;

  ///<summary>
  ///  包含有关在尝试访问时引发的异常信息 UI 自动化 不再可用的用户界面部分对应的元素。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ElementNotAvailableException')]
  DNElementNotAvailableException = interface(DDN.mscorlib.DNSystemException)
  ['{C0A2AD64-CFF1-3DBA-A114-43CE9799C73C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  检索序列化目标对象所需的数据。
    ///</summary>
    ///  <param name="info">
    ///  要序列化或反序列化对象所需的数据。
    ///</param>
    ///  <param name="context">
    ///  序列化流的目标。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNElementNotAvailableException = class(TDNGenericImport<DNElementNotAvailableExceptionClass, DNElementNotAvailableException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNNoClickablePointExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{42BE15EE-689A-5779-B229-6B799B98ADDA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNoClickablePointException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNNoClickablePointException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNNoClickablePointException; overload;

  end;

  ///<summary>
  ///  包含有关异常的信息时引发 <see cref="M:System.Windows.Automation.AutomationElement.GetClickablePoint" />
  ///  上调用 UI 自动化 没有可单击点的元素。
  ///</summary>
  [DNTypeName('System.Windows.Automation.NoClickablePointException')]
  DNNoClickablePointException = interface(DDN.mscorlib.DNException)
  ['{8B927203-C5EC-304C-A75B-9412F9750049}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  检索序列化目标对象所需的数据。
    ///</summary>
    ///  <param name="info">
    ///  要序列化或反序列化对象所需的数据。
    ///</param>
    ///  <param name="context">
    ///  序列化流的目标。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoClickablePointException = class(TDNGenericImport<DNNoClickablePointExceptionClass, DNNoClickablePointException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNProxyAssemblyNotLoadedExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{657ADD66-8561-5F01-A811-016ACC3EE049}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  类的新实例。
    ///  在内部使用。
    ///</summary>
    {class} function init: DNProxyAssemblyNotLoadedException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  类并显示错误消息。
    ///  在内部使用。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNProxyAssemblyNotLoadedException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  使用指定的错误消息和对导致此异常的内部异常的引用。
    ///  在内部使用。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNProxyAssemblyNotLoadedException; overload;

  end;

  ///<summary>
  ///  包含有关加载的程序集，其中包含客户端提供程序出现问题时引发的异常的信息
  ///</summary>
  [DNTypeName('System.Windows.Automation.ProxyAssemblyNotLoadedException')]
  DNProxyAssemblyNotLoadedException = interface(DDN.mscorlib.DNException)
  ['{2B8343D1-FBCC-34A3-BE06-B749B7E6641F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  检索序列化目标对象所需的数据。
    ///  在内部使用。
    ///</summary>
    ///  <param name="info">
    ///  要序列化或反序列化对象所需的数据。
    ///</param>
    ///  <param name="context">
    ///  序列化流的目标。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNProxyAssemblyNotLoadedException = class(TDNGenericImport<DNProxyAssemblyNotLoadedExceptionClass, DNProxyAssemblyNotLoadedException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationElementIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{358056A6-6147-5C70-BFA3-AE8C46D18E1A}']
  { static fields getter & setter } 

   function __fakeFieldGet_NotSupported: DDN.mscorlib.DNObject;
   function __fakeFieldGet_IsControlElementProperty: DNAutomationProperty;
   function __fakeFieldGet_ControlTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsContentElementProperty: DNAutomationProperty;
   function __fakeFieldGet_LabeledByProperty: DNAutomationProperty;
   function __fakeFieldGet_NativeWindowHandleProperty: DNAutomationProperty;
   function __fakeFieldGet_AutomationIdProperty: DNAutomationProperty;
   function __fakeFieldGet_ItemTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsPasswordProperty: DNAutomationProperty;
   function __fakeFieldGet_LocalizedControlTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_NameProperty: DNAutomationProperty;
   function __fakeFieldGet_AcceleratorKeyProperty: DNAutomationProperty;
   function __fakeFieldGet_AccessKeyProperty: DNAutomationProperty;
   function __fakeFieldGet_HasKeyboardFocusProperty: DNAutomationProperty;
   function __fakeFieldGet_IsKeyboardFocusableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsEnabledProperty: DNAutomationProperty;
   function __fakeFieldGet_BoundingRectangleProperty: DNAutomationProperty;
   function __fakeFieldGet_ProcessIdProperty: DNAutomationProperty;
   function __fakeFieldGet_RuntimeIdProperty: DNAutomationProperty;
   function __fakeFieldGet_ClassNameProperty: DNAutomationProperty;
   function __fakeFieldGet_HelpTextProperty: DNAutomationProperty;
   function __fakeFieldGet_ClickablePointProperty: DNAutomationProperty;
   function __fakeFieldGet_CultureProperty: DNAutomationProperty;
   function __fakeFieldGet_IsOffscreenProperty: DNAutomationProperty;
   function __fakeFieldGet_OrientationProperty: DNAutomationProperty;
   function __fakeFieldGet_FrameworkIdProperty: DNAutomationProperty;
   function __fakeFieldGet_IsRequiredForFormProperty: DNAutomationProperty;
   function __fakeFieldGet_ItemStatusProperty: DNAutomationProperty;
   function __fakeFieldGet_LiveSettingProperty: DNAutomationProperty;
   function __fakeFieldGet_ControllerForProperty: DNAutomationProperty;
   function __fakeFieldGet_SizeOfSetProperty: DNAutomationProperty;
   function __fakeFieldGet_PositionInSetProperty: DNAutomationProperty;
   function __fakeFieldGet_IsDockPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsExpandCollapsePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsGridItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsGridPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsInvokePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsMultipleViewPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsRangeValuePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsScrollPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsScrollItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSynchronizedInputPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsVirtualizedItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsItemContainerPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTablePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTableItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTextPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTogglePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTransformPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsValuePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsWindowPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_ToolTipOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_ToolTipClosedEvent: DNAutomationEvent;
   function __fakeFieldGet_StructureChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_MenuOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_AutomationPropertyChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_AutomationFocusChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_AsyncContentLoadedEvent: DNAutomationEvent;
   function __fakeFieldGet_MenuClosedEvent: DNAutomationEvent;
   function __fakeFieldGet_LayoutInvalidatedEvent: DNAutomationEvent;
   function __fakeFieldGet_LiveRegionChangedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  指示属性不受支持。
    ///</summary>
    {class} property NotSupported: DDN.mscorlib.DNObject read __fakeFieldGet_NotSupported;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" />
    ///  属性。
    ///</summary>
    {class} property IsControlElementProperty: DNAutomationProperty read __fakeFieldGet_IsControlElementProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" />
    ///  属性。
    ///</summary>
    {class} property ControlTypeProperty: DNAutomationProperty read __fakeFieldGet_ControlTypeProperty;
    ///<summary>
    ///  标识指示元素是否包含对于最终用户有价值的内容的属性。
    ///</summary>
    {class} property IsContentElementProperty: DNAutomationProperty read __fakeFieldGet_IsContentElementProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" />
    ///  属性。
    ///</summary>
    {class} property LabeledByProperty: DNAutomationProperty read __fakeFieldGet_LabeledByProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" />
    ///  属性。
    ///</summary>
    {class} property NativeWindowHandleProperty: DNAutomationProperty read __fakeFieldGet_NativeWindowHandleProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" />
    ///  属性。
    ///</summary>
    {class} property AutomationIdProperty: DNAutomationProperty read __fakeFieldGet_AutomationIdProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" />
    ///  属性。
    ///</summary>
    {class} property ItemTypeProperty: DNAutomationProperty read __fakeFieldGet_ItemTypeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" />
    ///  属性。
    ///</summary>
    {class} property IsPasswordProperty: DNAutomationProperty read __fakeFieldGet_IsPasswordProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" />
    ///  属性。
    ///</summary>
    {class} property LocalizedControlTypeProperty: DNAutomationProperty read __fakeFieldGet_LocalizedControlTypeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" />
    ///  属性。
    ///</summary>
    {class} property NameProperty: DNAutomationProperty read __fakeFieldGet_NameProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" />
    ///  属性。
    ///</summary>
    {class} property AcceleratorKeyProperty: DNAutomationProperty read __fakeFieldGet_AcceleratorKeyProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" />
    ///  属性。
    ///</summary>
    {class} property AccessKeyProperty: DNAutomationProperty read __fakeFieldGet_AccessKeyProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" />
    ///  属性。
    ///</summary>
    {class} property HasKeyboardFocusProperty: DNAutomationProperty read __fakeFieldGet_HasKeyboardFocusProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" />
    ///  属性。
    ///</summary>
    {class} property IsKeyboardFocusableProperty: DNAutomationProperty read __fakeFieldGet_IsKeyboardFocusableProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />
    ///  属性，它指定是否已启用由 <see cref="T:System.Windows.Automation.AutomationElement" />
    ///  引用的 用户界面 (UI) 项。
    ///</summary>
    {class} property IsEnabledProperty: DNAutomationProperty read __fakeFieldGet_IsEnabledProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" />
    ///  属性。
    ///</summary>
    {class} property BoundingRectangleProperty: DNAutomationProperty read __fakeFieldGet_BoundingRectangleProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" />
    ///  属性。
    ///</summary>
    {class} property ProcessIdProperty: DNAutomationProperty read __fakeFieldGet_ProcessIdProperty;
    ///<summary>
    ///  标识包含元素的运行时标识符的属性。
    ///</summary>
    {class} property RuntimeIdProperty: DNAutomationProperty read __fakeFieldGet_RuntimeIdProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" />
    ///  属性。
    ///</summary>
    {class} property ClassNameProperty: DNAutomationProperty read __fakeFieldGet_ClassNameProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" />
    ///  属性。
    ///</summary>
    {class} property HelpTextProperty: DNAutomationProperty read __fakeFieldGet_HelpTextProperty;
    ///<summary>
    ///  标识 <see cref="F:System.Windows.Automation.AutomationElement.ClickablePointProperty" />
    ///  。
    ///</summary>
    {class} property ClickablePointProperty: DNAutomationProperty read __fakeFieldGet_ClickablePointProperty;
    ///<summary>
    ///  标识区域性属性。
    ///</summary>
    {class} property CultureProperty: DNAutomationProperty read __fakeFieldGet_CultureProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" />
    ///  属性，它指示 UI 自动化 元素是否可见。
    ///</summary>
    {class} property IsOffscreenProperty: DNAutomationProperty read __fakeFieldGet_IsOffscreenProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" />
    ///  属性。
    ///</summary>
    {class} property OrientationProperty: DNAutomationProperty read __fakeFieldGet_OrientationProperty;
    ///<summary>
    ///  标识包含元素的基础框架名称的属性。
    ///</summary>
    {class} property FrameworkIdProperty: DNAutomationProperty read __fakeFieldGet_FrameworkIdProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" />
    ///  属性。
    ///</summary>
    {class} property IsRequiredForFormProperty: DNAutomationProperty read __fakeFieldGet_IsRequiredForFormProperty;
    ///<summary>
    ///  标识属性，该属性指定复杂项的可视化表示形式的状态。
    ///</summary>
    {class} property ItemStatusProperty: DNAutomationProperty read __fakeFieldGet_ItemStatusProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.AutomationProperties.LiveSetting" />
    ///  属性。
    ///</summary>
    {class} property LiveSettingProperty: DNAutomationProperty read __fakeFieldGet_LiveSettingProperty;
    {class} property ControllerForProperty: DNAutomationProperty read __fakeFieldGet_ControllerForProperty;
    {class} property SizeOfSetProperty: DNAutomationProperty read __fakeFieldGet_SizeOfSetProperty;
    {class} property PositionInSetProperty: DNAutomationProperty read __fakeFieldGet_PositionInSetProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.DockPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsDockPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsDockPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsExpandCollapsePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsExpandCollapsePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.GridItemPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsGridItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsGridItemPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.GridPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsGridPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsGridPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.InvokePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsInvokePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsInvokePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.MultipleViewPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsMultipleViewPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsMultipleViewPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.RangeValuePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsRangeValuePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsRangeValuePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.SelectionItemPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsSelectionItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionItemPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.SelectionPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsSelectionPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.ScrollPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsScrollPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsScrollPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.ScrollItemPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsScrollItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsScrollItemPatternAvailableProperty;
    ///<summary>
    ///  标识属性，该值指示是否 <see cref="T:System.Windows.Automation.SynchronizedInputPattern" />
    ///  可供此 UI 自动化 元素。
    ///</summary>
    {class} property IsSynchronizedInputPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSynchronizedInputPatternAvailableProperty;
    ///<summary>
    ///  标识属性，该值指示是否 <see cref="T:System.Windows.Automation.VirtualizedItemPattern" />
    ///  可供此 UI 自动化 元素。
    ///</summary>
    {class} property IsVirtualizedItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsVirtualizedItemPatternAvailableProperty;
    ///<summary>
    ///  标识属性，该值指示是否 <see cref="T:System.Windows.Automation.ItemContainerPattern" />
    ///  可供此 UI 自动化 元素。
    ///</summary>
    {class} property IsItemContainerPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsItemContainerPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.TablePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsTablePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTablePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.TableItemPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsTableItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTableItemPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.TextPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsTextPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTextPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.TogglePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsTogglePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTogglePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.TransformPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsTransformPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTransformPatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.ValuePattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsValuePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsValuePatternAvailableProperty;
    ///<summary>
    ///  标识可指示在此 UI 自动化 元素上 <see cref="T:System.Windows.Automation.WindowPattern" />
    ///  是否可用的属性。
    ///</summary>
    {class} property IsWindowPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsWindowPatternAvailableProperty;
    ///<summary>
    ///  标识在打开 ToolTip 时引发的事件。
    ///</summary>
    {class} property ToolTipOpenedEvent: DNAutomationEvent read __fakeFieldGet_ToolTipOpenedEvent;
    ///<summary>
    ///  标识在关闭工具提示时引发的事件。
    ///</summary>
    {class} property ToolTipClosedEvent: DNAutomationEvent read __fakeFieldGet_ToolTipClosedEvent;
    ///<summary>
    ///  标识在 UI 自动化 树结构更改时将引发的事件。
    ///</summary>
    {class} property StructureChangedEvent: DNAutomationEvent read __fakeFieldGet_StructureChangedEvent;
    ///<summary>
    ///  标识在打开菜单时引发的事件。
    ///</summary>
    {class} property MenuOpenedEvent: DNAutomationEvent read __fakeFieldGet_MenuOpenedEvent;
    ///<summary>
    ///  标识 property-changed 事件。
    ///</summary>
    {class} property AutomationPropertyChangedEvent: DNAutomationEvent read __fakeFieldGet_AutomationPropertyChangedEvent;
    ///<summary>
    ///  标识在已更改焦点时引发的事件。
    ///</summary>
    {class} property AutomationFocusChangedEvent: DNAutomationEvent read __fakeFieldGet_AutomationFocusChangedEvent;
    ///<summary>
    ///  标识在异步加载内容过程中引发的事件。
    ///</summary>
    {class} property AsyncContentLoadedEvent: DNAutomationEvent read __fakeFieldGet_AsyncContentLoadedEvent;
    ///<summary>
    ///  标识在关闭菜单时引发的事件。
    ///</summary>
    {class} property MenuClosedEvent: DNAutomationEvent read __fakeFieldGet_MenuClosedEvent;
    ///<summary>
    ///  标识布局失效时引发的事件。
    ///</summary>
    {class} property LayoutInvalidatedEvent: DNAutomationEvent read __fakeFieldGet_LayoutInvalidatedEvent;
    ///<summary>
    ///  标识活动区域更改时引发的事件。
    ///</summary>
    {class} property LiveRegionChangedEvent: DNAutomationEvent read __fakeFieldGet_LiveRegionChangedEvent;

  end;

  ///<summary>
  ///  包含由 UI 自动化提供程序用作标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationElementIdentifiers')]
  DNAutomationElementIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6F443A1A-71A0-3A7A-8C36-008826F3A585}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAutomationElementIdentifiers = class(TDNGenericImport<DNAutomationElementIdentifiersClass, DNAutomationElementIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationIdentifierClass = interface(DNObjectClass)
  ['{0D7EB66B-B138-56F1-85B3-116E2D6125F0}']
  end;

  ///<summary>
  ///  用于标识 UI 自动化 中的控件类型、事件、模式、属性和文本特性的类型的基类。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationIdentifier')]
  DNAutomationIdentifier = interface(DDN.mscorlib.DNIComparable)
  ['{C5646318-7D6B-304A-BB44-624BA93BF591}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationIdentifier = class(TDNGenericImport<DNAutomationIdentifierClass, DNAutomationIdentifier>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationEventClass = interface(DNAutomationIdentifierClass)
  ['{4EA86E0E-AF70-5FE1-A8BA-76F76F8981E6}']
  { static methods } 

    ///<summary>
    ///  检索封装指定的数值标识符的 <see cref="T:System.Windows.Automation.AutomationEvent" />
    ///  。
    ///</summary>
    ///  <param name="id">
    ///  事件标识符。
    ///</param>
    ///<returns>
    ///  封装指定的数值标识符的 <see cref="T:System.Windows.Automation.AutomationEvent" />
    ///  。
    ///</returns>
    {class} function LookupById(id: Int32): DNAutomationEvent;

  end;

  ///<summary>
  ///  标识 UI 自动化 事件。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationEvent')]
  DNAutomationEvent = interface(DNAutomationIdentifier)
  ['{B7DF3005-72B1-3CAF-9EE6-D582E0A1FABE}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationEvent = class(TDNGenericImport<DNAutomationEventClass, DNAutomationEvent>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPatternClass = interface(DNAutomationIdentifierClass)
  ['{FD829866-7C1B-5E56-828B-AADF4F34BBA4}']
  { static methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Windows.Automation.AutomationPattern" />
    ///  ，它封装指定的数值标识符。
    ///</summary>
    ///  <param name="id">
    ///  模式的标识符。
    ///</param>
    ///<returns>
    ///  由 <see cref="T:System.Windows.Automation.AutomationPattern" />
    ///  指定的 <paramref name="id" />
    ///  。
    ///</returns>
    {class} function LookupById(id: Int32): DNAutomationPattern;

  end;

  ///<summary>
  ///  标识控件模式。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationPattern')]
  DNAutomationPattern = interface(DNAutomationIdentifier)
  ['{03618C55-1996-32BF-B544-709255179FC8}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationPattern = class(TDNGenericImport<DNAutomationPatternClass, DNAutomationPattern>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertyClass = interface(DNAutomationIdentifierClass)
  ['{66B35539-8814-5C29-A3E3-D343DD75AC84}']
  { static methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Windows.Automation.AutomationProperty" />
    ///  ，它封装指定的数值标识符。
    ///</summary>
    ///  <param name="id">
    ///  属性标识符。
    ///</param>
    {class} function LookupById(id: Int32): DNAutomationProperty;

  end;

  ///<summary>
  ///  标识属性的 <see cref="T:System.Windows.Automation.AutomationElement" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationProperty')]
  DNAutomationProperty = interface(DNAutomationIdentifier)
  ['{76940F1C-2071-3DC4-8046-BEE158CB73DA}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationProperty = class(TDNGenericImport<DNAutomationPropertyClass, DNAutomationProperty>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationTextAttributeClass = interface(DNAutomationIdentifierClass)
  ['{65866F36-9287-500B-9E27-C2CA3B343A34}']
  { static methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Windows.Automation.AutomationTextAttribute" />
    ///  ，它封装指定的数值标识符。
    ///</summary>
    ///  <param name="id">
    ///  使用数字标识符。
    ///</param>
    {class} function LookupById(id: Int32): DNAutomationTextAttribute;

  end;

  ///<summary>
  ///  标识 UI 自动化 文本特性。
  ///</summary>
  [DNTypeName('System.Windows.Automation.AutomationTextAttribute')]
  DNAutomationTextAttribute = interface(DNAutomationIdentifier)
  ['{D2F62B56-5209-349B-867C-46847CF7A501}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationTextAttribute = class(TDNGenericImport<DNAutomationTextAttributeClass, DNAutomationTextAttribute>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNControlTypeClass = interface(DNAutomationIdentifierClass)
  ['{0A328BF1-38CE-53B9-B21A-96398D7C9F6F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Button: DNControlType;
   function __fakeFieldGet_Calendar: DNControlType;
   function __fakeFieldGet_CheckBox: DNControlType;
   function __fakeFieldGet_ComboBox: DNControlType;
   function __fakeFieldGet_Edit: DNControlType;
   function __fakeFieldGet_Hyperlink: DNControlType;
   function __fakeFieldGet_Image: DNControlType;
   function __fakeFieldGet_ListItem: DNControlType;
   function __fakeFieldGet_List: DNControlType;
   function __fakeFieldGet_Menu: DNControlType;
   function __fakeFieldGet_MenuBar: DNControlType;
   function __fakeFieldGet_MenuItem: DNControlType;
   function __fakeFieldGet_ProgressBar: DNControlType;
   function __fakeFieldGet_RadioButton: DNControlType;
   function __fakeFieldGet_ScrollBar: DNControlType;
   function __fakeFieldGet_Slider: DNControlType;
   function __fakeFieldGet_Spinner: DNControlType;
   function __fakeFieldGet_StatusBar: DNControlType;
   function __fakeFieldGet_Tab: DNControlType;
   function __fakeFieldGet_TabItem: DNControlType;
   function __fakeFieldGet_Text: DNControlType;
   function __fakeFieldGet_ToolBar: DNControlType;
   function __fakeFieldGet_ToolTip: DNControlType;
   function __fakeFieldGet_Tree: DNControlType;
   function __fakeFieldGet_TreeItem: DNControlType;
   function __fakeFieldGet_Custom: DNControlType;
   function __fakeFieldGet_Group: DNControlType;
   function __fakeFieldGet_Thumb: DNControlType;
   function __fakeFieldGet_DataGrid: DNControlType;
   function __fakeFieldGet_DataItem: DNControlType;
   function __fakeFieldGet_Document: DNControlType;
   function __fakeFieldGet_SplitButton: DNControlType;
   function __fakeFieldGet_Window: DNControlType;
   function __fakeFieldGet_Pane: DNControlType;
   function __fakeFieldGet_Header: DNControlType;
   function __fakeFieldGet_HeaderItem: DNControlType;
   function __fakeFieldGet_Table: DNControlType;
   function __fakeFieldGet_TitleBar: DNControlType;
   function __fakeFieldGet_Separator: DNControlType;

  { static fields } 

    ///<summary>
    ///  标识一个按钮控件。
    ///</summary>
    {class} property Button: DNControlType read __fakeFieldGet_Button;
    ///<summary>
    ///  标识一个日历控件，例如日期选取器。
    ///</summary>
    {class} property Calendar: DNControlType read __fakeFieldGet_Calendar;
    ///<summary>
    ///  标识一个复选框控件。
    ///</summary>
    {class} property CheckBox: DNControlType read __fakeFieldGet_CheckBox;
    ///<summary>
    ///  标识一个组合框控件。
    ///</summary>
    {class} property ComboBox: DNControlType read __fakeFieldGet_ComboBox;
    ///<summary>
    ///  标识编辑控件，如文本框。
    ///</summary>
    {class} property Edit: DNControlType read __fakeFieldGet_Edit;
    ///<summary>
    ///  标识一个超链接控件。
    ///</summary>
    {class} property Hyperlink: DNControlType read __fakeFieldGet_Hyperlink;
    ///<summary>
    ///  标识图像控件。
    ///</summary>
    {class} property Image: DNControlType read __fakeFieldGet_Image;
    ///<summary>
    ///  标识一个列表项控件，这是一个列表控件的子项。
    ///</summary>
    {class} property ListItem: DNControlType read __fakeFieldGet_ListItem;
    ///<summary>
    ///  标识列表控件，如列表框。
    ///</summary>
    {class} property List: DNControlType read __fakeFieldGet_List;
    ///<summary>
    ///  标识菜单控件，如应用程序窗口中的顶级菜单。
    ///</summary>
    {class} property Menu: DNControlType read __fakeFieldGet_Menu;
    ///<summary>
    ///  标识菜单栏控件，它通常包含一组顶层菜单。
    ///</summary>
    {class} property MenuBar: DNControlType read __fakeFieldGet_MenuBar;
    ///<summary>
    ///  标识菜单项控件。
    ///</summary>
    {class} property MenuItem: DNControlType read __fakeFieldGet_MenuItem;
    ///<summary>
    ///  标识一个进度栏控件，直观指示较长操作进度。
    ///</summary>
    {class} property ProgressBar: DNControlType read __fakeFieldGet_ProgressBar;
    ///<summary>
    ///  标识单选按钮控件，这是所选内容机制允许只选择一项组中。
    ///</summary>
    {class} property RadioButton: DNControlType read __fakeFieldGet_RadioButton;
    ///<summary>
    ///  确定滚动条控件，例如应用程序窗口中的滚动条。
    ///</summary>
    {class} property ScrollBar: DNControlType read __fakeFieldGet_ScrollBar;
    ///<summary>
    ///  标识一个滑块控件。
    ///</summary>
    {class} property Slider: DNControlType read __fakeFieldGet_Slider;
    ///<summary>
    ///  标识一个数字调整框控件。
    ///</summary>
    {class} property Spinner: DNControlType read __fakeFieldGet_Spinner;
    ///<summary>
    ///  标识的状态栏控件。
    ///</summary>
    {class} property StatusBar: DNControlType read __fakeFieldGet_StatusBar;
    ///<summary>
    ///  标识一个选项卡控件。
    ///</summary>
    {class} property Tab: DNControlType read __fakeFieldGet_Tab;
    ///<summary>
    ///  标识一个选项卡项控件，它表示选项卡控件的页。
    ///</summary>
    {class} property TabItem: DNControlType read __fakeFieldGet_TabItem;
    ///<summary>
    ///  标识编辑控件，例如文本框或格式文本框。
    ///</summary>
    {class} property Text: DNControlType read __fakeFieldGet_Text;
    ///<summary>
    ///  标识一个工具栏，如包含一组应用程序窗口中的命令按钮控件。
    ///</summary>
    {class} property ToolBar: DNControlType read __fakeFieldGet_ToolBar;
    ///<summary>
    ///  标识工具提示控件，将指针移动到在控件上或按 tab 时有时对使用键盘控件将显示一个信息性窗口。
    ///</summary>
    {class} property ToolTip: DNControlType read __fakeFieldGet_ToolTip;
    ///<summary>
    ///  标识一个树控件。
    ///</summary>
    {class} property Tree: DNControlType read __fakeFieldGet_Tree;
    ///<summary>
    ///  标识中的节点 <see cref="F:System.Windows.Automation.ControlType.TreeItem" />
    ///  控件。
    ///</summary>
    {class} property TreeItem: DNControlType read __fakeFieldGet_TreeItem;
    ///<summary>
    ///  标识一个控件，该控件不属于已定义的控件类型之一。
    ///</summary>
    {class} property Custom: DNControlType read __fakeFieldGet_Custom;
    ///<summary>
    ///  标识组控件，它将作为其他控件的容器。
    ///</summary>
    {class} property Group: DNControlType read __fakeFieldGet_Group;
    ///<summary>
    ///  标识在可拖动到其他位置出现滚动条控件。
    ///</summary>
    {class} property Thumb: DNControlType read __fakeFieldGet_Thumb;
    ///<summary>
    ///  标识数据网格控件。
    ///</summary>
    {class} property DataGrid: DNControlType read __fakeFieldGet_DataGrid;
    ///<summary>
    ///  标识数据项控件。
    ///</summary>
    {class} property DataItem: DNControlType read __fakeFieldGet_DataItem;
    ///<summary>
    ///  标识文档控件。
    ///</summary>
    {class} property Document: DNControlType read __fakeFieldGet_Document;
    ///<summary>
    ///  标识是执行默认操作，并且还可以扩展到其他可能操作的列表的按钮的拆分按钮。
    ///</summary>
    {class} property SplitButton: DNControlType read __fakeFieldGet_SplitButton;
    ///<summary>
    ///  标识窗口框架，其中包含子对象。
    ///</summary>
    {class} property Window: DNControlType read __fakeFieldGet_Window;
    ///<summary>
    ///  标识一个窗格控件。
    ///</summary>
    {class} property Pane: DNControlType read __fakeFieldGet_Pane;
    ///<summary>
    ///  标识一个标头控件，其中的标签中的行和列的信息的容器。
    ///</summary>
    {class} property Header: DNControlType read __fakeFieldGet_Header;
    ///<summary>
    ///  标识一个标头项，它是行或列的信息的标签。
    ///</summary>
    {class} property HeaderItem: DNControlType read __fakeFieldGet_HeaderItem;
    ///<summary>
    ///  标识一个表。
    ///</summary>
    {class} property Table: DNControlType read __fakeFieldGet_Table;
    ///<summary>
    ///  标识出现在窗口的标题栏。
    ///</summary>
    {class} property TitleBar: DNControlType read __fakeFieldGet_TitleBar;
    ///<summary>
    ///  标识一个分隔符，例如菜单和工具栏控件中创建 visual 除法。
    ///</summary>
    {class} property Separator: DNControlType read __fakeFieldGet_Separator;

  { static methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Windows.Automation.ControlType" />
    ///  ，它封装指定的数值标识符。
    ///</summary>
    ///  <param name="id">
    ///  控件类型的标识符。
    ///</param>
    {class} function LookupById(id: Int32): DNControlType;

  end;

  ///<summary>
  ///  标识 用户界面 (UI) 控件的类型。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ControlType')]
  DNControlType = interface(DNAutomationIdentifier)
  ['{A83F54CE-FB53-3E6D-BD1F-D416AF93B74A}']
  { getters & setters } 

    function get_LocalizedControlType: string;
    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>
    ///  检索控件类型不支持的模式标识符。
    ///</summary>
    ///<returns>
    ///  一个 UI 自动化 模式标识符数组。
    ///</returns>
    function GetNeverSupportedPatterns: TArray<DNAutomationPattern>;
    ///<summary>
    ///  检索此控件类型必需的属性 标识符 (ID) 的数组。
    ///</summary>
    ///<returns>
    ///  属性 ID 的数组。 </returns>
    function GetRequiredProperties: TArray<DNAutomationProperty>;
    ///<summary>
    ///  检索所需模式集的数组。
    ///</summary>
    ///<returns>
    ///  所需模式集的数组。
    ///</returns>
    function GetRequiredPatternSets: TArray<TArray<DNAutomationPattern>>;
    ///<summary>
    ///  返回一个值，该值指示是否提供 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  等效于此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  要与此标识符进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果对象相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此哈希代码 UI 自动化 标识符。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  比较此 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  与另一个 <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较它的对象。
    ///</param>
    ///<returns>
    ///  此对象减去的哈希代码的哈希代码 <paramref name="obj" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取控件类型的说明。
    ///</summary>
    ///<returns>
    ///  控件类型（如“button”）的本地化说明。
    ///</returns>
    property LocalizedControlType: string read get_LocalizedControlType;
    ///<summary>
    ///  获取基础的数字标识符。
    ///</summary>
    ///<returns>
    ///  基础的标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取已注册的编程名称。
    ///</summary>
    ///<returns>
    ///  以编程方式的名称。
    ///</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNControlType = class(TDNGenericImport<DNControlTypeClass, DNControlType>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNDockPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{655B1DE1-30E7-5679-8955-617382AC66F3}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_DockPositionProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.DockPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" />
    ///  属性。
    ///</summary>
    {class} property DockPositionProperty: DNAutomationProperty read __fakeFieldGet_DockPositionProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.IDockProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.DockPatternIdentifiers')]
  DNDockPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{A8B842FD-25AA-30BB-86E4-5144368F1B48}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDockPatternIdentifiers = class(TDNGenericImport<DNDockPatternIdentifiersClass, DNDockPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNExpandCollapsePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EFE8D5C-66DF-54AB-A63A-05B80CA92F92}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ExpandCollapseStateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" />
    ///  属性。
    ///</summary>
    {class} property ExpandCollapseStateProperty: DNAutomationProperty read __fakeFieldGet_ExpandCollapseStateProperty;

  end;

  ///<summary>
  ///  包含被 <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" />
  ///  用作标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ExpandCollapsePatternIdentifiers')]
  DNExpandCollapsePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{4B1098B3-C06B-39E0-9EB9-B885A9D23305}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpandCollapsePatternIdentifiers = class(TDNGenericImport<DNExpandCollapsePatternIdentifiersClass, DNExpandCollapsePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNGridItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{62CB1771-DB0F-51CE-BEED-11E4ABC2F527}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnProperty: DNAutomationProperty;
   function __fakeFieldGet_RowSpanProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnSpanProperty: DNAutomationProperty;
   function __fakeFieldGet_ContainingGridProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.GridItemPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" />
    ///  属性。
    ///</summary>
    {class} property RowProperty: DNAutomationProperty read __fakeFieldGet_RowProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" />
    ///  属性。
    ///</summary>
    {class} property ColumnProperty: DNAutomationProperty read __fakeFieldGet_ColumnProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" />
    ///  属性。
    ///</summary>
    {class} property RowSpanProperty: DNAutomationProperty read __fakeFieldGet_RowSpanProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" />
    ///  属性。
    ///</summary>
    {class} property ColumnSpanProperty: DNAutomationProperty read __fakeFieldGet_ColumnSpanProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" />
    ///  属性。
    ///</summary>
    {class} property ContainingGridProperty: DNAutomationProperty read __fakeFieldGet_ContainingGridProperty;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.GridItemPatternIdentifiers')]
  DNGridItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{0EAE555F-DF2D-3CF5-B84C-C2F656C28AAD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGridItemPatternIdentifiers = class(TDNGenericImport<DNGridItemPatternIdentifiersClass, DNGridItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNGridPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7B5A191-F75F-564A-9849-E8D3130003C6}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowCountProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnCountProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.GridPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" />
    ///  属性。
    ///</summary>
    {class} property RowCountProperty: DNAutomationProperty read __fakeFieldGet_RowCountProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" />
    ///  属性。
    ///</summary>
    {class} property ColumnCountProperty: DNAutomationProperty read __fakeFieldGet_ColumnCountProperty;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IGridProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.GridPatternIdentifiers')]
  DNGridPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6EA2B8F8-2C2B-3287-B77E-E3397C42ACFB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGridPatternIdentifiers = class(TDNGenericImport<DNGridPatternIdentifiersClass, DNGridPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNInvokePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{459968BE-D30C-5CEB-9193-60EEF4977440}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_InvokedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.InvokePattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识某个控件被激活时引发的事件。
    ///</summary>
    {class} property InvokedEvent: DNAutomationEvent read __fakeFieldGet_InvokedEvent;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.InvokePatternIdentifiers')]
  DNInvokePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{B2D9671D-49C6-3B3B-BB84-233E475C6BE6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInvokePatternIdentifiers = class(TDNGenericImport<DNInvokePatternIdentifiersClass, DNInvokePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNItemContainerPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90B4773C-9E67-5796-8FCE-1C0D9361B66A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.ItemContainerPattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ItemContainerPatternIdentifiers')]
  DNItemContainerPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{38F55F32-8F34-3379-874C-7C94C645043F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNItemContainerPatternIdentifiers = class(TDNGenericImport<DNItemContainerPatternIdentifiersClass, DNItemContainerPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNMultipleViewPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5F282ADE-D1B1-5997-830E-EC356826D985}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CurrentViewProperty: DNAutomationProperty;
   function __fakeFieldGet_SupportedViewsProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.MultipleViewPattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" />
    ///  属性。
    ///</summary>
    {class} property CurrentViewProperty: DNAutomationProperty read __fakeFieldGet_CurrentViewProperty;
    ///<summary>
    ///  标识用于获取视图的控件特定集合的属性。
    ///</summary>
    {class} property SupportedViewsProperty: DNAutomationProperty read __fakeFieldGet_SupportedViewsProperty;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.MultipleViewPatternIdentifiers')]
  DNMultipleViewPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{E932C70A-6950-3B71-A5A2-77B59020D7ED}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMultipleViewPatternIdentifiers = class(TDNGenericImport<DNMultipleViewPatternIdentifiersClass, DNMultipleViewPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNRangeValuePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8E62807-6E0B-582D-9982-335C69332D33}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ValueProperty: DNAutomationProperty;
   function __fakeFieldGet_IsReadOnlyProperty: DNAutomationProperty;
   function __fakeFieldGet_MinimumProperty: DNAutomationProperty;
   function __fakeFieldGet_MaximumProperty: DNAutomationProperty;
   function __fakeFieldGet_LargeChangeProperty: DNAutomationProperty;
   function __fakeFieldGet_SmallChangeProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  将此模式标识为 <see cref="T:System.Windows.Automation.RangeValuePattern" />
    ///  。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />
    ///  属性。
    ///</summary>
    {class} property ValueProperty: DNAutomationProperty read __fakeFieldGet_ValueProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />
    ///  属性。
    ///</summary>
    {class} property IsReadOnlyProperty: DNAutomationProperty read __fakeFieldGet_IsReadOnlyProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />
    ///  属性。
    ///</summary>
    {class} property MinimumProperty: DNAutomationProperty read __fakeFieldGet_MinimumProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />
    ///  属性。
    ///</summary>
    {class} property MaximumProperty: DNAutomationProperty read __fakeFieldGet_MaximumProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />
    ///  属性。
    ///</summary>
    {class} property LargeChangeProperty: DNAutomationProperty read __fakeFieldGet_LargeChangeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />
    ///  属性。
    ///</summary>
    {class} property SmallChangeProperty: DNAutomationProperty read __fakeFieldGet_SmallChangeProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.RangeValuePatternIdentifiers')]
  DNRangeValuePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{E930664E-0162-3BE7-9B3C-E2530CB0F956}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRangeValuePatternIdentifiers = class(TDNGenericImport<DNRangeValuePatternIdentifiersClass, DNRangeValuePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNScrollItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02C52F01-886A-5B81-A1A5-66573BA58EE5}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.ScrollItemPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ScrollItemPatternIdentifiers')]
  DNScrollItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{52836380-ADE3-31B9-BBD7-8C7F2FC0EBB3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScrollItemPatternIdentifiers = class(TDNGenericImport<DNScrollItemPatternIdentifiersClass, DNScrollItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNScrollPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C6841B7-B032-5DB3-AF86-B6E06369EABE}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_HorizontalScrollPercentProperty: DNAutomationProperty;
   function __fakeFieldGet_HorizontalViewSizeProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticalScrollPercentProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticalViewSizeProperty: DNAutomationProperty;
   function __fakeFieldGet_HorizontallyScrollableProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticallyScrollableProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.ScrollPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" />
    ///  属性。
    ///</summary>
    {class} property HorizontalScrollPercentProperty: DNAutomationProperty read __fakeFieldGet_HorizontalScrollPercentProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" />
    ///  属性。
    ///</summary>
    {class} property HorizontalViewSizeProperty: DNAutomationProperty read __fakeFieldGet_HorizontalViewSizeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" />
    ///  属性。
    ///</summary>
    {class} property VerticalScrollPercentProperty: DNAutomationProperty read __fakeFieldGet_VerticalScrollPercentProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" />
    ///  属性。
    ///</summary>
    {class} property VerticalViewSizeProperty: DNAutomationProperty read __fakeFieldGet_VerticalViewSizeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" />
    ///  属性。
    ///</summary>
    {class} property HorizontallyScrollableProperty: DNAutomationProperty read __fakeFieldGet_HorizontallyScrollableProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" />
    ///  属性。
    ///</summary>
    {class} property VerticallyScrollableProperty: DNAutomationProperty read __fakeFieldGet_VerticallyScrollableProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ScrollPatternIdentifiers')]
  DNScrollPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{F2B4BF52-7051-3A2A-ADBB-8694CE632389}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScrollPatternIdentifiers = class(TDNGenericImport<DNScrollPatternIdentifiersClass, DNScrollPatternIdentifiers>)
  public const
    ///<summary>
    ///  指定不应执行滚动。
    ///</summary>
   NoScroll = -1;
  end;

  //-------------namespace: System.Windows.Automation----------------
  DNSelectionItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A3A8790-371C-50CD-A030-E25C419B99CE}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_IsSelectedProperty: DNAutomationProperty;
   function __fakeFieldGet_SelectionContainerProperty: DNAutomationProperty;
   function __fakeFieldGet_ElementAddedToSelectionEvent: DNAutomationEvent;
   function __fakeFieldGet_ElementRemovedFromSelectionEvent: DNAutomationEvent;
   function __fakeFieldGet_ElementSelectedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.SelectionItemPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" />
    ///  属性。
    ///</summary>
    {class} property IsSelectedProperty: DNAutomationProperty read __fakeFieldGet_IsSelectedProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" />
    ///  属性。
    ///</summary>
    {class} property SelectionContainerProperty: DNAutomationProperty read __fakeFieldGet_SelectionContainerProperty;
    ///<summary>
    ///  标识向选定项的集合添加项时引发的事件。
    ///</summary>
    {class} property ElementAddedToSelectionEvent: DNAutomationEvent read __fakeFieldGet_ElementAddedToSelectionEvent;
    ///<summary>
    ///  标识从选定项的集合中删除项时引发的事件。
    ///</summary>
    {class} property ElementRemovedFromSelectionEvent: DNAutomationEvent read __fakeFieldGet_ElementRemovedFromSelectionEvent;
    ///<summary>
    ///  标识选择了单个项时（导致所有之前选中的项被取消选择）引发的事件。
    ///</summary>
    {class} property ElementSelectedEvent: DNAutomationEvent read __fakeFieldGet_ElementSelectedEvent;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.SelectionItemPatternIdentifiers')]
  DNSelectionItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{F873DDF6-4E33-3882-8476-E437A7CC86C7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSelectionItemPatternIdentifiers = class(TDNGenericImport<DNSelectionItemPatternIdentifiersClass, DNSelectionItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNSelectionPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F749D7B9-3434-5A42-B9E7-ECD39FA8E62B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_SelectionProperty: DNAutomationProperty;
   function __fakeFieldGet_CanSelectMultipleProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionRequiredProperty: DNAutomationProperty;
   function __fakeFieldGet_InvalidatedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.SelectionPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识用于获取容器中的选定项的属性。
    ///</summary>
    {class} property SelectionProperty: DNAutomationProperty read __fakeFieldGet_SelectionProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" />
    ///  属性。
    ///</summary>
    {class} property CanSelectMultipleProperty: DNAutomationProperty read __fakeFieldGet_CanSelectMultipleProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" />
    ///  属性。
    ///</summary>
    {class} property IsSelectionRequiredProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionRequiredProperty;
    ///<summary>
    ///  标识在容器中的选项发生重大更改并需要发送多于 <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
    ///  常量所允许的添加和删除事件时引发的事件。
    ///</summary>
    {class} property InvalidatedEvent: DNAutomationEvent read __fakeFieldGet_InvalidatedEvent;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.SelectionPatternIdentifiers')]
  DNSelectionPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{7E95156F-0150-3731-9C2E-68C7E81A08A0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSelectionPatternIdentifiers = class(TDNGenericImport<DNSelectionPatternIdentifiersClass, DNSelectionPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNSynchronizedInputPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{659FFD2A-39D2-5C5B-9A8B-B1F6F7869C9B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_InputReachedTargetEvent: DNAutomationEvent;
   function __fakeFieldGet_InputReachedOtherElementEvent: DNAutomationEvent;
   function __fakeFieldGet_InputDiscardedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.SynchronizedInputPattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识输入接收由当前正在侦听输入元素时引发的事件。
    ///</summary>
    {class} property InputReachedTargetEvent: DNAutomationEvent read __fakeFieldGet_InputReachedTargetEvent;
    ///<summary>
    ///  标识接收输入的而不是当前正在侦听输入元素时引发的事件。
    ///</summary>
    {class} property InputReachedOtherElementEvent: DNAutomationEvent read __fakeFieldGet_InputReachedOtherElementEvent;
    ///<summary>
    ///  标识输入已被丢弃，wpf 时引发的事件。
    ///</summary>
    {class} property InputDiscardedEvent: DNAutomationEvent read __fakeFieldGet_InputDiscardedEvent;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.SynchronizedInputPatternIdentifiers')]
  DNSynchronizedInputPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{3F4930A8-58DC-3F06-9A7B-E4E370472481}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSynchronizedInputPatternIdentifiers = class(TDNGenericImport<DNSynchronizedInputPatternIdentifiersClass, DNSynchronizedInputPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTableItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73667C77-996E-59C0-BB6B-2F20864C3738}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowHeaderItemsProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnHeaderItemsProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.TableItemPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识用于检索与表中项或单元格关联的所有行标题的属性。
    ///</summary>
    {class} property RowHeaderItemsProperty: DNAutomationProperty read __fakeFieldGet_RowHeaderItemsProperty;
    ///<summary>
    ///  标识一个属性，该属性可检索与表项或单元格关联的所有列标题。
    ///</summary>
    {class} property ColumnHeaderItemsProperty: DNAutomationProperty read __fakeFieldGet_ColumnHeaderItemsProperty;

  end;

  ///<summary>
  ///  包含被 <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" />
  ///  用作标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TableItemPatternIdentifiers')]
  DNTableItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{2747B07A-064B-3D6D-A784-6B580A4235BC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTableItemPatternIdentifiers = class(TDNGenericImport<DNTableItemPatternIdentifiersClass, DNTableItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTablePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8123735-9A3E-574B-88DD-F5FF7F6F28B9}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowHeadersProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnHeadersProperty: DNAutomationProperty;
   function __fakeFieldGet_RowOrColumnMajorProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.TablePattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识可调用 <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" />
    ///  方法的属性。
    ///</summary>
    {class} property RowHeadersProperty: DNAutomationProperty read __fakeFieldGet_RowHeadersProperty;
    ///<summary>
    ///  标识可调用 <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" />
    ///  方法的属性。
    ///</summary>
    {class} property ColumnHeadersProperty: DNAutomationProperty read __fakeFieldGet_ColumnHeadersProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" />
    ///  属性。
    ///</summary>
    {class} property RowOrColumnMajorProperty: DNAutomationProperty read __fakeFieldGet_RowOrColumnMajorProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.TablePattern" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TablePatternIdentifiers')]
  DNTablePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{68D82BB7-71F3-3368-B8E0-207DEA5EABA0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTablePatternIdentifiers = class(TDNGenericImport<DNTablePatternIdentifiersClass, DNTablePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTextPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B2030608-5713-5BF0-ADE7-8C7EC61B7E33}']
  { static fields getter & setter } 

   function __fakeFieldGet_MixedAttributeValue: DDN.mscorlib.DNObject;
   function __fakeFieldGet_AnimationStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_BackgroundColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_BulletStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_CapStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_CultureAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontNameAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontSizeAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontWeightAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_ForegroundColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_HorizontalTextAlignmentAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationFirstLineAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationLeadingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationTrailingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsHiddenAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsItalicAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsReadOnlyAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsSubscriptAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsSuperscriptAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginBottomAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginLeadingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginTopAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginTrailingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OutlineStylesAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OverlineColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OverlineStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_StrikethroughColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_StrikethroughStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_TabsAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_TextFlowDirectionsAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_UnderlineColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_UnderlineStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_TextSelectionChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_TextChangedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识给定特性的值是否在 Rich Edit 控件中的某个文本范围内发生变化。
    ///</summary>
    {class} property MixedAttributeValue: DDN.mscorlib.DNObject read __fakeFieldGet_MixedAttributeValue;
    ///<summary>
    ///  标识文本范围的 <see cref="T:System.Windows.Automation.Text.AnimationStyle" />
    ///  特性。
    ///</summary>
    {class} property AnimationStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_AnimationStyleAttribute;
    ///<summary>
    ///  标识 BackgroundColor 文本范围的属性。
    ///</summary>
    {class} property BackgroundColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_BackgroundColorAttribute;
    ///<summary>
    ///  标识文本范围的 <see cref="T:System.Windows.Automation.Text.BulletStyle" />
    ///  特性。
    ///</summary>
    {class} property BulletStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_BulletStyleAttribute;
    ///<summary>
    ///  标识文本范围的 <see cref="T:System.Windows.Automation.Text.CapStyle" />
    ///  特性。
    ///</summary>
    {class} property CapStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_CapStyleAttribute;
    ///<summary>
    ///  标识细化到子语言级别的文本范围的 Culture (<see cref="T:System.Globalization.CultureInfo" />
    ///  ) 特性；例如，瑞士法语 (fr-CH)，而不是法语 (fr)。
    ///</summary>
    {class} property CultureAttribute: DNAutomationTextAttribute read __fakeFieldGet_CultureAttribute;
    ///<summary>
    ///  标识文本范围的 FontName 特性。
    ///</summary>
    {class} property FontNameAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontNameAttribute;
    ///<summary>
    ///  标识文本范围的 FontSize 特性。
    ///</summary>
    {class} property FontSizeAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontSizeAttribute;
    ///<summary>
    ///  标识文本范围的 FontWeight 特性。
    ///</summary>
    {class} property FontWeightAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontWeightAttribute;
    ///<summary>
    ///  标识 ForegroundColor (COLORREF) 文本范围的属性。
    ///</summary>
    {class} property ForegroundColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_ForegroundColorAttribute;
    ///<summary>
    ///  标识文本范围的 <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" />
    ///  特性。
    ///</summary>
    {class} property HorizontalTextAlignmentAttribute: DNAutomationTextAttribute read __fakeFieldGet_HorizontalTextAlignmentAttribute;
    ///<summary>
    ///  标识文本范围的 IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) 特性。
    ///</summary>
    {class} property IndentationFirstLineAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationFirstLineAttribute;
    ///<summary>
    ///  标识文本范围的 IndentationLeading  (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) 特性。
    ///</summary>
    {class} property IndentationLeadingAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationLeadingAttribute;
    ///<summary>
    ///  标识文本范围的 IndentationTrailing  (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) 特性。
    ///</summary>
    {class} property IndentationTrailingAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationTrailingAttribute;
    ///<summary>
    ///  标识文本范围的 IsHidden 特性。
    ///</summary>
    {class} property IsHiddenAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsHiddenAttribute;
    ///<summary>
    ///  标识文本范围的 IsItalic (<see cref="T:System.Windows.FontStyle" />
    ///  ) 特性。
    ///</summary>
    {class} property IsItalicAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsItalicAttribute;
    ///<summary>
    ///  标识文本范围的 IsReadOnly 特性。
    ///</summary>
    {class} property IsReadOnlyAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsReadOnlyAttribute;
    ///<summary>
    ///  标识文本范围的 IsSubscript (<see cref="T:System.Windows.FontVariants" />
    ///  ) 特性。
    ///</summary>
    {class} property IsSubscriptAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsSubscriptAttribute;
    ///<summary>
    ///  标识文本范围的 IsSuperscript (<see cref="T:System.Windows.FontVariants" />
    ///  ) 特性。
    ///</summary>
    {class} property IsSuperscriptAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsSuperscriptAttribute;
    ///<summary>
    ///  标识文本范围的 MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) 特性。
    ///</summary>
    {class} property MarginBottomAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginBottomAttribute;
    ///<summary>
    ///  标识文本范围的 MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) 特性。
    ///</summary>
    {class} property MarginLeadingAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginLeadingAttribute;
    ///<summary>
    ///  标识文本范围的 MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) 特性。
    ///</summary>
    {class} property MarginTopAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginTopAttribute;
    ///<summary>
    ///  标识文本范围的 MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) 特性。
    ///</summary>
    {class} property MarginTrailingAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginTrailingAttribute;
    ///<summary>
    ///  标识文本范围的 OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />
    ///  ) 特性。
    ///</summary>
    {class} property OutlineStylesAttribute: DNAutomationTextAttribute read __fakeFieldGet_OutlineStylesAttribute;
    ///<summary>
    ///  标识文本范围的 OverlineColor 特性。
    ///</summary>
    {class} property OverlineColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_OverlineColorAttribute;
    ///<summary>
    ///  标识文本范围的 OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) 特性。
    ///</summary>
    {class} property OverlineStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_OverlineStyleAttribute;
    ///<summary>
    ///  标识文本范围的 StrikethroughColor 特性。
    ///</summary>
    {class} property StrikethroughColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_StrikethroughColorAttribute;
    ///<summary>
    ///  标识文本范围的 StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) 特性。
    ///</summary>
    {class} property StrikethroughStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_StrikethroughStyleAttribute;
    ///<summary>
    ///  标识文本范围的 Tabs 特性。
    ///</summary>
    {class} property TabsAttribute: DNAutomationTextAttribute read __fakeFieldGet_TabsAttribute;
    ///<summary>
    ///  标识文本范围的 TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />
    ///  ) 特性。
    ///</summary>
    {class} property TextFlowDirectionsAttribute: DNAutomationTextAttribute read __fakeFieldGet_TextFlowDirectionsAttribute;
    ///<summary>
    ///  标识文本范围的 UnderlineColor 特性。
    ///</summary>
    {class} property UnderlineColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_UnderlineColorAttribute;
    ///<summary>
    ///  标识文本范围的 UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) 特性。
    ///</summary>
    {class} property UnderlineStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_UnderlineStyleAttribute;
    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.TextPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识每当修改文本选择时引发的事件。
    ///</summary>
    {class} property TextSelectionChangedEvent: DNAutomationEvent read __fakeFieldGet_TextSelectionChangedEvent;
    ///<summary>
    ///  标识每当修改文本内容时引发的事件。
    ///</summary>
    {class} property TextChangedEvent: DNAutomationEvent read __fakeFieldGet_TextChangedEvent;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.ITextProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TextPatternIdentifiers')]
  DNTextPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{D25DD3AC-A5F0-30B9-B79D-BE5AC367D19E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextPatternIdentifiers = class(TDNGenericImport<DNTextPatternIdentifiersClass, DNTextPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTogglePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6A528D56-1258-5370-93C1-A6C4A058E377}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ToggleStateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.TogglePattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 UI 自动化元素的 <see cref="T:System.Windows.Automation.ToggleState" />
    ///  。
    ///</summary>
    {class} property ToggleStateProperty: DNAutomationProperty read __fakeFieldGet_ToggleStateProperty;

  end;

  ///<summary>
  ///  包含被 <see cref="T:System.Windows.Automation.Provider.IToggleProvider" />
  ///  用作标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TogglePatternIdentifiers')]
  DNTogglePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{49DB8B54-1F06-3E8D-B0C1-310B21107335}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTogglePatternIdentifiers = class(TDNGenericImport<DNTogglePatternIdentifiersClass, DNTogglePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTransformPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{168B2DB4-C277-5274-A1A1-AD4931091E8D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CanMoveProperty: DNAutomationProperty;
   function __fakeFieldGet_CanResizeProperty: DNAutomationProperty;
   function __fakeFieldGet_CanRotateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.TransformPattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" />
    ///  属性。
    ///</summary>
    {class} property CanMoveProperty: DNAutomationProperty read __fakeFieldGet_CanMoveProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" />
    ///  属性。
    ///</summary>
    {class} property CanResizeProperty: DNAutomationProperty read __fakeFieldGet_CanResizeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" />
    ///  属性。
    ///</summary>
    {class} property CanRotateProperty: DNAutomationProperty read __fakeFieldGet_CanRotateProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.ITransformProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.TransformPatternIdentifiers')]
  DNTransformPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{A0D6A33D-51FF-331D-BBA6-44492432F4D6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransformPatternIdentifiers = class(TDNGenericImport<DNTransformPatternIdentifiersClass, DNTransformPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNValuePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E0751D3-432C-5F5C-B5E7-774893D8DF87}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ValueProperty: DNAutomationProperty;
   function __fakeFieldGet_IsReadOnlyProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.ValuePattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" />
    ///  属性。
    ///</summary>
    {class} property ValueProperty: DNAutomationProperty read __fakeFieldGet_ValueProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
    ///  属性。
    ///</summary>
    {class} property IsReadOnlyProperty: DNAutomationProperty read __fakeFieldGet_IsReadOnlyProperty;

  end;

  ///<summary>
  ///  包含用作 <see cref="T:System.Windows.Automation.Provider.IValueProvider" />
  ///  的标识符的值。
  ///</summary>
  [DNTypeName('System.Windows.Automation.ValuePatternIdentifiers')]
  DNValuePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6778D9E8-C4C4-3CB2-98AB-050CBA646BEB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValuePatternIdentifiers = class(TDNGenericImport<DNValuePatternIdentifiersClass, DNValuePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNVirtualizedItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E662C82-3EB2-5529-9A64-19EE0300DAB3}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.VirtualizedItemPattern" />
    ///  控件模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.VirtualizedItemPatternIdentifiers')]
  DNVirtualizedItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{92DC6C4E-63A4-3EA5-A618-DFB4107816B0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVirtualizedItemPatternIdentifiers = class(TDNGenericImport<DNVirtualizedItemPatternIdentifiersClass, DNVirtualizedItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNWindowPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BB592965-E3E9-5205-9143-4BC82E80EE9C}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CanMaximizeProperty: DNAutomationProperty;
   function __fakeFieldGet_CanMinimizeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsModalProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowVisualStateProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowInteractionStateProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTopmostProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_WindowClosedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="T:System.Windows.Automation.WindowPattern" />
    ///  模式。
    ///</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" />
    ///  属性。
    ///</summary>
    {class} property CanMaximizeProperty: DNAutomationProperty read __fakeFieldGet_CanMaximizeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" />
    ///  属性。
    ///</summary>
    {class} property CanMinimizeProperty: DNAutomationProperty read __fakeFieldGet_CanMinimizeProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" />
    ///  属性。
    ///</summary>
    {class} property IsModalProperty: DNAutomationProperty read __fakeFieldGet_IsModalProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" />
    ///  属性。
    ///</summary>
    {class} property WindowVisualStateProperty: DNAutomationProperty read __fakeFieldGet_WindowVisualStateProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" />
    ///  属性。
    ///</summary>
    {class} property WindowInteractionStateProperty: DNAutomationProperty read __fakeFieldGet_WindowInteractionStateProperty;
    ///<summary>
    ///  标识 <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" />
    ///  属性。
    ///</summary>
    {class} property IsTopmostProperty: DNAutomationProperty read __fakeFieldGet_IsTopmostProperty;
    ///<summary>
    ///  标识在打开窗口时引发的事件。
    ///</summary>
    {class} property WindowOpenedEvent: DNAutomationEvent read __fakeFieldGet_WindowOpenedEvent;
    ///<summary>
    ///  标识在关闭窗口时引发的事件。
    ///</summary>
    {class} property WindowClosedEvent: DNAutomationEvent read __fakeFieldGet_WindowClosedEvent;

  end;

  ///<summary>
  ///  包含用作标识符的值 <see cref="T:System.Windows.Automation.Provider.IWindowProvider" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Automation.WindowPatternIdentifiers')]
  DNWindowPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{04D15716-CCA8-3B33-A8E1-51856F440E7C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWindowPatternIdentifiers = class(TDNGenericImport<DNWindowPatternIdentifiersClass, DNWindowPatternIdentifiers>) end;


implementation


initialization
  LoadAssemblyModule('WPF\UIAutomationTypes.dll', True);

finalization

end.
