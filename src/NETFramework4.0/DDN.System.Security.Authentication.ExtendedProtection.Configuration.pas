//----------------------------------------------------------------------------
//  System.dll: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Security.Authentication.ExtendedProtection.Configuration
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Security.Authentication.ExtendedProtection.Configuration;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Configuration;

type


{ declares }

  DNServiceNameElementCollection = interface; // type: System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection, namespace: System.Security.Authentication.ExtendedProtection.Configuration
  DNExtendedProtectionPolicyElement = interface; // type: System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement, namespace: System.Security.Authentication.ExtendedProtection.Configuration
  DNServiceNameElement = interface; // type: System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement, namespace: System.Security.Authentication.ExtendedProtection.Configuration


{ objects }

  //-------------namespace: System.Security.Authentication.ExtendedProtection.Configuration----------------
  DNServiceNameElementCollectionClass = interface(DNObjectClass)
  ['{1F792393-6978-5C0B-AC73-A8334D60184A}']
  { constructors } 

    {class} function init: DNServiceNameElementCollection;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection')]
  DNServiceNameElementCollection = interface(DNObject)
  ['{E3B5500D-B13D-3EA3-BC3A-D59DF95306CB}']
  { getters & setters } 

    function get_Item(index: Int32): DNServiceNameElement; overload;
    procedure set_Item(index: Int32; value: DNServiceNameElement); overload;
    function get_Item(name: string): DNServiceNameElement; overload;
    procedure set_Item(name: string; value: DNServiceNameElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(element: DNServiceNameElement);
    procedure Clear;
    function IndexOf(element: DNServiceNameElement): Int32;
    procedure Remove(element: DNServiceNameElement); overload;
    procedure Remove(name: string); overload;
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNServiceNameElement read get_Item write set_Item; default;
    property Item[name: string]: DNServiceNameElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNServiceNameElementCollection = class(TDNGenericImport<DNServiceNameElementCollectionClass, DNServiceNameElementCollection>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection.Configuration----------------
  DNExtendedProtectionPolicyElementClass = interface(DNObjectClass)
  ['{74FBFDC8-F236-5473-94D1-DD3A6290A3C8}']
  { constructors } 

    {class} function init: DNExtendedProtectionPolicyElement;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement')]
  DNExtendedProtectionPolicyElement = interface(DNObject)
  ['{7F56D197-F36C-3657-922E-B6FF4FAFE485}']
  { getters & setters } 

    function get_PolicyEnforcement: DNPolicyEnforcement;
    procedure set_PolicyEnforcement(value: DNPolicyEnforcement);
    function get_ProtectionScenario: DNProtectionScenario;
    procedure set_ProtectionScenario(value: DNProtectionScenario);
    function get_CustomServiceNames: DNServiceNameElementCollection;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function BuildPolicy: DNExtendedProtectionPolicy;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PolicyEnforcement: DNPolicyEnforcement read get_PolicyEnforcement write set_PolicyEnforcement;
    property ProtectionScenario: DNProtectionScenario read get_ProtectionScenario write set_ProtectionScenario;
    property CustomServiceNames: DNServiceNameElementCollection read get_CustomServiceNames;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNExtendedProtectionPolicyElement = class(TDNGenericImport<DNExtendedProtectionPolicyElementClass, DNExtendedProtectionPolicyElement>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection.Configuration----------------
  DNServiceNameElementClass = interface(DNObjectClass)
  ['{89901B3D-F807-508A-B51A-03CEC278E2CA}']
  { constructors } 

    {class} function init: DNServiceNameElement;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement')]
  DNServiceNameElement = interface(DNObject)
  ['{BCF4DB05-7EF9-3E14-9B54-A3FBFB5503E5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNServiceNameElement = class(TDNGenericImport<DNServiceNameElementClass, DNServiceNameElement>) end;


implementation

end.
