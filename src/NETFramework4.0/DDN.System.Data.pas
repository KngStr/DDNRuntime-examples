//----------------------------------------------------------------------------
//  System.Data.dll: System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Data
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Data;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml,
  DDN.System.Core,
  DDN.System.Transactions,
  DDN.System.EnterpriseServices,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: Microsoft.SqlServer.Server----------------
  [DNTypeName('Microsoft.SqlServer.Server.DataAccessKind')]
  DNDataAccessKind = type Integer;
  DNDataAccessKindHelper = record helper for DNDataAccessKind
  public const
    None = 0;
    Read = 1;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  [DNTypeName('Microsoft.SqlServer.Server.Format')]
  DNFormat = type Integer;
  DNFormatHelper = record helper for DNFormat
  public const
    Unknown = 0;
    Native = 1;
    UserDefined = 2;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  [DNTypeName('Microsoft.SqlServer.Server.SystemDataAccessKind')]
  DNSystemDataAccessKind = type Integer;
  DNSystemDataAccessKindHelper = record helper for DNSystemDataAccessKind
  public const
    None = 0;
    Read = 1;
  end;


  //-------------namespace: Microsoft.SqlServer.Server----------------
  [DNTypeName('Microsoft.SqlServer.Server.TriggerAction')]
  DNTriggerAction = type Integer;
  DNTriggerActionHelper = record helper for DNTriggerAction
  public const
    Invalid = 0;
    Insert = 1;
    Update = 2;
    Delete = 3;
    CreateTable = 21;
    AlterTable = 22;
    DropTable = 23;
    CreateIndex = 24;
    AlterIndex = 25;
    DropIndex = 26;
    CreateSecurityExpression = 31;
    DropSecurityExpression = 33;
    CreateSynonym = 34;
    DropSynonym = 36;
    CreateView = 41;
    AlterView = 42;
    DropView = 43;
    CreateProcedure = 51;
    AlterProcedure = 52;
    DropProcedure = 53;
    CreateFunction = 61;
    AlterFunction = 62;
    DropFunction = 63;
    CreateTrigger = 71;
    AlterTrigger = 72;
    DropTrigger = 73;
    CreateEventNotification = 74;
    DropEventNotification = 76;
    CreateType = 91;
    DropType = 93;
    CreateAssembly = 101;
    AlterAssembly = 102;
    DropAssembly = 103;
    CreateUser = 131;
    AlterUser = 132;
    DropUser = 133;
    CreateRole = 134;
    AlterRole = 135;
    DropRole = 136;
    CreateAppRole = 137;
    AlterAppRole = 138;
    DropAppRole = 139;
    CreateSchema = 141;
    AlterSchema = 142;
    DropSchema = 143;
    CreateLogin = 144;
    AlterLogin = 145;
    DropLogin = 146;
    CreateMsgType = 151;
    DropMsgType = 153;
    CreateContract = 154;
    DropContract = 156;
    CreateQueue = 157;
    AlterQueue = 158;
    DropQueue = 159;
    CreateService = 161;
    AlterService = 162;
    DropService = 163;
    CreateRoute = 164;
    AlterRoute = 165;
    DropRoute = 166;
    GrantStatement = 167;
    DenyStatement = 168;
    RevokeStatement = 169;
    GrantObject = 170;
    DenyObject = 171;
    RevokeObject = 172;
    CreateBinding = 174;
    AlterBinding = 175;
    DropBinding = 176;
    CreatePartitionFunction = 191;
    AlterPartitionFunction = 192;
    DropPartitionFunction = 193;
    CreatePartitionScheme = 194;
    AlterPartitionScheme = 195;
    DropPartitionScheme = 196;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.AcceptRejectRule')]
  DNAcceptRejectRule = type Integer;
  DNAcceptRejectRuleHelper = record helper for DNAcceptRejectRule
  public const
    None = 0;
    Cascade = 1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.CommandBehavior')]
  DNCommandBehavior = type Integer;
  DNCommandBehaviorHelper = record helper for DNCommandBehavior
  public const
    Default_ = 0;
    SingleResult = 1;
    SchemaOnly = 2;
    KeyInfo = 4;
    SingleRow = 8;
    SequentialAccess = 16;
    CloseConnection = 32;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.CommandType')]
  DNCommandType = type Integer;
  DNCommandTypeHelper = record helper for DNCommandType
  public const
    Text = 1;
    StoredProcedure = 4;
    TableDirect = 512;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.CatalogLocation')]
  DNCatalogLocation = type Integer;
  DNCatalogLocationHelper = record helper for DNCatalogLocation
  public const
    Start = 1;
    End_ = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.GroupByBehavior')]
  DNGroupByBehavior = type Integer;
  DNGroupByBehaviorHelper = record helper for DNGroupByBehavior
  public const
    Unknown = 0;
    NotSupported = 1;
    Unrelated = 2;
    MustContainAll = 3;
    ExactMatch = 4;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.IdentifierCase')]
  DNIdentifierCase = type Integer;
  DNIdentifierCaseHelper = record helper for DNIdentifierCase
  public const
    Unknown = 0;
    Insensitive = 1;
    Sensitive = 2;
  end;


  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.SupportedJoinOperators')]
  DNSupportedJoinOperators = type Integer;
  DNSupportedJoinOperatorsHelper = record helper for DNSupportedJoinOperators
  public const
    None = 0;
    Inner = 1;
    LeftOuter = 2;
    RightOuter = 4;
    FullOuter = 8;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ConflictOption')]
  DNConflictOption = type Integer;
  DNConflictOptionHelper = record helper for DNConflictOption
  public const
    CompareAllSearchableValues = 1;
    CompareRowVersion = 2;
    OverwriteChanges = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ConnectionState')]
  DNConnectionState = type Integer;
  DNConnectionStateHelper = record helper for DNConnectionState
  public const
    Closed = 0;
    Open = 1;
    Connecting = 2;
    Executing = 4;
    Fetching = 8;
    Broken = 16;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowAction')]
  DNDataRowAction = type Integer;
  DNDataRowActionHelper = record helper for DNDataRowAction
  public const
    Nothing = 0;
    Delete = 1;
    Change = 2;
    Rollback = 4;
    Commit = 8;
    Add = 16;
    ChangeOriginal = 32;
    ChangeCurrentAndOriginal = 64;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowState')]
  DNDataRowState = type Integer;
  DNDataRowStateHelper = record helper for DNDataRowState
  public const
    Detached = 1;
    Unchanged = 2;
    Added = 4;
    Deleted = 8;
    Modified = 16;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataRowVersion')]
  DNDataRowVersion = type Integer;
  DNDataRowVersionHelper = record helper for DNDataRowVersion
  public const
    Original = 256;
    Current = 512;
    Proposed = 1024;
    Default_ = 1536;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataSetDateTime')]
  DNDataSetDateTime = type Integer;
  DNDataSetDateTimeHelper = record helper for DNDataSetDateTime
  public const
    Local = 1;
    Unspecified = 2;
    UnspecifiedLocal = 3;
    Utc = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DataViewRowState')]
  DNDataViewRowState = type Integer;
  DNDataViewRowStateHelper = record helper for DNDataViewRowState
  public const
    None = 0;
    Unchanged = 2;
    Added = 4;
    Deleted = 8;
    ModifiedCurrent = 16;
    CurrentRows = 22;
    ModifiedOriginal = 32;
    OriginalRows = 42;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.DbType')]
  DNDbType = type Integer;
  DNDbTypeHelper = record helper for DNDbType
  public const
    AnsiString = 0;
    Binary = 1;
    Byte = 2;
    Boolean = 3;
    Currency = 4;
    Date = 5;
    DateTime = 6;
    Decimal = 7;
    Double = 8;
    Guid = 9;
    Int16 = 10;
    Int32 = 11;
    Int64 = 12;
    Object_ = 13;
    SByte = 14;
    Single = 15;
    String_ = 16;
    Time = 17;
    UInt16 = 18;
    UInt32 = 19;
    UInt64 = 20;
    VarNumeric = 21;
    AnsiStringFixedLength = 22;
    StringFixedLength = 23;
    Xml = 25;
    DateTime2 = 26;
    DateTimeOffset = 27;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IsolationLevel')]
  DNIsolationLevel = type Integer;
  DNIsolationLevelHelper = record helper for DNIsolationLevel
  public const
    Chaos = 16;
    ReadUncommitted = 256;
    ReadCommitted = 4096;
    RepeatableRead = 65536;
    Serializable = 1048576;
    Snapshot = 16777216;
    Unspecified = -1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.KeyRestrictionBehavior')]
  DNKeyRestrictionBehavior = type Integer;
  DNKeyRestrictionBehaviorHelper = record helper for DNKeyRestrictionBehavior
  public const
    AllowOnly = 0;
    PreventUsage = 1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.LoadOption')]
  DNLoadOption = type Integer;
  DNLoadOptionHelper = record helper for DNLoadOption
  public const
    OverwriteChanges = 1;
    PreserveChanges = 2;
    Upsert = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MappingType')]
  DNMappingType = type Integer;
  DNMappingTypeHelper = record helper for DNMappingType
  public const
    Element = 1;
    Attribute = 2;
    SimpleContent = 3;
    Hidden = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MissingMappingAction')]
  DNMissingMappingAction = type Integer;
  DNMissingMappingActionHelper = record helper for DNMissingMappingAction
  public const
    Passthrough = 1;
    Ignore = 2;
    Error = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.MissingSchemaAction')]
  DNMissingSchemaAction = type Integer;
  DNMissingSchemaActionHelper = record helper for DNMissingSchemaAction
  public const
    Add = 1;
    Ignore = 2;
    Error = 3;
    AddWithKey = 4;
  end;


  //-------------namespace: System.Data.Odbc----------------
  [DNTypeName('System.Data.Odbc.OdbcType')]
  DNOdbcType = type Integer;
  DNOdbcTypeHelper = record helper for DNOdbcType
  public const
    BigInt = 1;
    Binary = 2;
    Bit = 3;
    Char = 4;
    DateTime = 5;
    Decimal = 6;
    Numeric = 7;
    Double = 8;
    Image = 9;
    Int = 10;
    NChar = 11;
    NText = 12;
    NVarChar = 13;
    Real = 14;
    UniqueIdentifier = 15;
    SmallDateTime = 16;
    SmallInt = 17;
    Text = 18;
    Timestamp = 19;
    TinyInt = 20;
    VarBinary = 21;
    VarChar = 22;
    Date = 23;
    Time = 24;
  end;


  //-------------namespace: System.Data.OleDb----------------
  [DNTypeName('System.Data.OleDb.OleDbLiteral')]
  DNOleDbLiteral = type Integer;
  DNOleDbLiteralHelper = record helper for DNOleDbLiteral
  public const
    Invalid = 0;
    Binary_Literal = 1;
    Catalog_Name = 2;
    Catalog_Separator = 3;
    Char_Literal = 4;
    Column_Alias = 5;
    Column_Name = 6;
    Correlation_Name = 7;
    Cursor_Name = 8;
    Escape_Percent_Prefix = 9;
    Escape_Underscore_Prefix = 10;
    Index_Name = 11;
    Like_Percent = 12;
    Like_Underscore = 13;
    Procedure_Name = 14;
    Quote_Prefix = 15;
    Schema_Name = 16;
    Table_Name = 17;
    Text_Command = 18;
    User_Name = 19;
    View_Name = 20;
    Cube_Name = 21;
    Dimension_Name = 22;
    Hierarchy_Name = 23;
    Level_Name = 24;
    Member_Name = 25;
    Property_Name = 26;
    Schema_Separator = 27;
    Quote_Suffix = 28;
    Escape_Percent_Suffix = 29;
    Escape_Underscore_Suffix = 30;
  end;


  //-------------namespace: System.Data.OleDb----------------
  [DNTypeName('System.Data.OleDb.OleDbType')]
  DNOleDbType = type Integer;
  DNOleDbTypeHelper = record helper for DNOleDbType
  public const
    Empty = 0;
    SmallInt = 2;
    Integer = 3;
    Single = 4;
    Double = 5;
    Currency = 6;
    Date = 7;
    BSTR = 8;
    IDispatch = 9;
    Error = 10;
    Boolean = 11;
    Variant = 12;
    IUnknown = 13;
    Decimal = 14;
    TinyInt = 16;
    UnsignedTinyInt = 17;
    UnsignedSmallInt = 18;
    UnsignedInt = 19;
    BigInt = 20;
    UnsignedBigInt = 21;
    Filetime = 64;
    Guid = 72;
    Binary = 128;
    Char = 129;
    WChar = 130;
    Numeric = 131;
    DBDate = 133;
    DBTime = 134;
    DBTimeStamp = 135;
    PropVariant = 138;
    VarNumeric = 139;
    VarChar = 200;
    LongVarChar = 201;
    VarWChar = 202;
    LongVarWChar = 203;
    VarBinary = 204;
    LongVarBinary = 205;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ParameterDirection')]
  DNParameterDirection = type Integer;
  DNParameterDirectionHelper = record helper for DNParameterDirection
  public const
    Input = 1;
    Output = 2;
    InputOutput = 3;
    ReturnValue = 6;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    NotSupported = 0;
    Required = 1;
    Optional = 2;
    Read = 512;
    Write = 1024;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.Rule')]
  DNRule = type Integer;
  DNRuleHelper = record helper for DNRule
  public const
    None = 0;
    Cascade = 1;
    SetNull = 2;
    SetDefault = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SchemaSerializationMode')]
  DNSchemaSerializationMode = type Integer;
  DNSchemaSerializationModeHelper = record helper for DNSchemaSerializationMode
  public const
    IncludeSchema = 1;
    ExcludeSchema = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SchemaType')]
  DNSchemaType = type Integer;
  DNSchemaTypeHelper = record helper for DNSchemaType
  public const
    Source = 1;
    Mapped = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SerializationFormat')]
  DNSerializationFormat = type Integer;
  DNSerializationFormatHelper = record helper for DNSerializationFormat
  public const
    Xml = 0;
    Binary = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.ApplicationIntent')]
  DNApplicationIntent = type Integer;
  DNApplicationIntentHelper = record helper for DNApplicationIntent
  public const
    ReadWrite = 0;
    ReadOnly = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.PoolBlockingPeriod')]
  DNPoolBlockingPeriod = type Integer;
  DNPoolBlockingPeriodHelper = record helper for DNPoolBlockingPeriod
  public const
    Auto = 0;
    AlwaysBlock = 1;
    NeverBlock = 2;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SortOrder')]
  DNSortOrder = type Integer;
  DNSortOrderHelper = record helper for DNSortOrder
  public const
    Ascending = 0;
    Descending = 1;
    Unspecified = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlAuthenticationMethod')]
  DNSqlAuthenticationMethod = type Integer;
  DNSqlAuthenticationMethodHelper = record helper for DNSqlAuthenticationMethod
  public const
    NotSpecified = 0;
    SqlPassword = 1;
    ActiveDirectoryPassword = 2;
    ActiveDirectoryIntegrated = 3;
    ActiveDirectoryInteractive = 4;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlBulkCopyOptions')]
  DNSqlBulkCopyOptions = type Integer;
  DNSqlBulkCopyOptionsHelper = record helper for DNSqlBulkCopyOptions
  public const
    Default_ = 0;
    KeepIdentity = 1;
    CheckConstraints = 2;
    TableLock = 4;
    KeepNulls = 8;
    FireTriggers = 16;
    UseInternalTransaction = 32;
    AllowEncryptedValueModifications = 64;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlCommandColumnEncryptionSetting')]
  DNSqlCommandColumnEncryptionSetting = type Integer;
  DNSqlCommandColumnEncryptionSettingHelper = record helper for DNSqlCommandColumnEncryptionSetting
  public const
    UseConnectionSetting = 0;
    Enabled = 1;
    ResultSetOnly = 2;
    Disabled = 3;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlConnectionColumnEncryptionSetting')]
  DNSqlConnectionColumnEncryptionSetting = type Integer;
  DNSqlConnectionColumnEncryptionSettingHelper = record helper for DNSqlConnectionColumnEncryptionSetting
  public const
    Disabled = 0;
    Enabled = 1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlNotificationInfo')]
  DNSqlNotificationInfo = type Integer;
  DNSqlNotificationInfoHelper = record helper for DNSqlNotificationInfo
  public const
    Truncate = 0;
    Insert = 1;
    Update = 2;
    Delete = 3;
    Drop = 4;
    Alter = 5;
    Restart = 6;
    Error = 7;
    Query = 8;
    Invalid = 9;
    Options = 10;
    Isolation = 11;
    Expired = 12;
    Resource = 13;
    PreviousFire = 14;
    TemplateLimit = 15;
    Merge = 16;
    AlreadyChanged = -2;
    Unknown = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlNotificationSource')]
  DNSqlNotificationSource = type Integer;
  DNSqlNotificationSourceHelper = record helper for DNSqlNotificationSource
  public const
    Data = 0;
    Timeout = 1;
    Object_ = 2;
    Database = 3;
    System = 4;
    Statement = 5;
    Environment = 6;
    Execution = 7;
    Owner = 8;
    Client = -2;
    Unknown = -1;
  end;


  //-------------namespace: System.Data.SqlClient----------------
  [DNTypeName('System.Data.SqlClient.SqlNotificationType')]
  DNSqlNotificationType = type Integer;
  DNSqlNotificationTypeHelper = record helper for DNSqlNotificationType
  public const
    Change = 0;
    Subscribe = 1;
    Unknown = -1;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.SqlDbType')]
  DNSqlDbType = type Integer;
  DNSqlDbTypeHelper = record helper for DNSqlDbType
  public const
    BigInt = 0;
    Binary = 1;
    Bit = 2;
    Char = 3;
    DateTime = 4;
    Decimal = 5;
    Float = 6;
    Image = 7;
    Int = 8;
    Money = 9;
    NChar = 10;
    NText = 11;
    NVarChar = 12;
    Real = 13;
    UniqueIdentifier = 14;
    SmallDateTime = 15;
    SmallInt = 16;
    SmallMoney = 17;
    Text = 18;
    Timestamp = 19;
    TinyInt = 20;
    VarBinary = 21;
    VarChar = 22;
    Variant = 23;
    Xml = 25;
    Udt = 29;
    Structured = 30;
    Date = 31;
    Time = 32;
    DateTime2 = 33;
    DateTimeOffset = 34;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.SqlCompareOptions')]
  DNSqlCompareOptions = type Integer;
  DNSqlCompareOptionsHelper = record helper for DNSqlCompareOptions
  public const
    None = 0;
    IgnoreCase = 1;
    IgnoreNonSpace = 2;
    IgnoreKanaType = 8;
    IgnoreWidth = 16;
    BinarySort2 = 16384;
    BinarySort = 32768;
  end;


  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.StorageState')]
  DNStorageState = type Integer;
  DNStorageStateHelper = record helper for DNStorageState
  public const
    Buffer = 0;
    Stream = 1;
    UnmanagedBuffer = 2;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.StatementType')]
  DNStatementType = type Integer;
  DNStatementTypeHelper = record helper for DNStatementType
  public const
    Select = 0;
    Insert = 1;
    Update = 2;
    Delete = 3;
    Batch = 4;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.UpdateRowSource')]
  DNUpdateRowSource = type Integer;
  DNUpdateRowSourceHelper = record helper for DNUpdateRowSource
  public const
    None = 0;
    OutputParameters = 1;
    FirstReturnedRecord = 2;
    Both = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.UpdateStatus')]
  DNUpdateStatus = type Integer;
  DNUpdateStatusHelper = record helper for DNUpdateStatus
  public const
    Continue_ = 0;
    ErrorsOccurred = 1;
    SkipCurrentRow = 2;
    SkipAllRemainingRows = 3;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.XmlReadMode')]
  DNXmlReadMode = type Integer;
  DNXmlReadModeHelper = record helper for DNXmlReadMode
  public const
    Auto = 0;
    ReadSchema = 1;
    IgnoreSchema = 2;
    InferSchema = 3;
    DiffGram = 4;
    Fragment = 5;
    InferTypedSchema = 6;
  end;


  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.XmlWriteMode')]
  DNXmlWriteMode = type Integer;
  DNXmlWriteModeHelper = record helper for DNXmlWriteMode
  public const
    WriteSchema = 0;
    IgnoreSchema = 1;
    DiffGram = 2;
  end;




type


{ declares }

  DNIBinarySerialize = interface; // type: Microsoft.SqlServer.Server.IBinarySerialize, namespace: Microsoft.SqlServer.Server
  DNIColumnMappingCollection = interface; // type: System.Data.IColumnMappingCollection, namespace: System.Data
  DNIDataParameterCollection = interface; // type: System.Data.IDataParameterCollection, namespace: System.Data
  DNITableMappingCollection = interface; // type: System.Data.ITableMappingCollection, namespace: System.Data
  DNIDbColumnSchemaGenerator = interface; // type: System.Data.Common.IDbColumnSchemaGenerator, namespace: System.Data.Common
  DNIColumnMapping = interface; // type: System.Data.IColumnMapping, namespace: System.Data
  DNIDataAdapter = interface; // type: System.Data.IDataAdapter, namespace: System.Data
  DNIDbDataAdapter = interface; // type: System.Data.IDbDataAdapter, namespace: System.Data
  DNIDataParameter = interface; // type: System.Data.IDataParameter, namespace: System.Data
  DNIDbDataParameter = interface; // type: System.Data.IDbDataParameter, namespace: System.Data
  DNIDataRecord = interface; // type: System.Data.IDataRecord, namespace: System.Data
  DNITableMapping = interface; // type: System.Data.ITableMapping, namespace: System.Data
  DNINullable = interface; // type: System.Data.SqlTypes.INullable, namespace: System.Data.SqlTypes
  DNIDataReader = interface; // type: System.Data.IDataReader, namespace: System.Data
  DNIDbCommand = interface; // type: System.Data.IDbCommand, namespace: System.Data
  DNIDbConnection = interface; // type: System.Data.IDbConnection, namespace: System.Data
  DNIDbTransaction = interface; // type: System.Data.IDbTransaction, namespace: System.Data
  DNSqlContext = interface; // type: Microsoft.SqlServer.Server.SqlContext, namespace: Microsoft.SqlServer.Server
  DNSqlDataRecord = interface; // type: Microsoft.SqlServer.Server.SqlDataRecord, namespace: Microsoft.SqlServer.Server
  DNSqlMetaData = interface; // type: Microsoft.SqlServer.Server.SqlMetaData, namespace: Microsoft.SqlServer.Server
  DNSqlPipe = interface; // type: Microsoft.SqlServer.Server.SqlPipe, namespace: Microsoft.SqlServer.Server
  DNSqlTriggerContext = interface; // type: Microsoft.SqlServer.Server.SqlTriggerContext, namespace: Microsoft.SqlServer.Server
  DNSqlFacetAttribute = interface; // type: Microsoft.SqlServer.Server.SqlFacetAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlFunctionAttribute = interface; // type: Microsoft.SqlServer.Server.SqlFunctionAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlMethodAttribute = interface; // type: Microsoft.SqlServer.Server.SqlMethodAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlProcedureAttribute = interface; // type: Microsoft.SqlServer.Server.SqlProcedureAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlTriggerAttribute = interface; // type: Microsoft.SqlServer.Server.SqlTriggerAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlUserDefinedAggregateAttribute = interface; // type: Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute, namespace: Microsoft.SqlServer.Server
  DNSqlUserDefinedTypeAttribute = interface; // type: Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute, namespace: Microsoft.SqlServer.Server
  DNDataSysDescriptionAttribute = interface; // type: System.Data.DataSysDescriptionAttribute, namespace: System.Data
  DNDbProviderSpecificTypePropertyAttribute = interface; // type: System.Data.Common.DbProviderSpecificTypePropertyAttribute, namespace: System.Data.Common
  DNDBDataPermissionAttribute = interface; // type: System.Data.Common.DBDataPermissionAttribute, namespace: System.Data.Common
  DNOdbcPermissionAttribute = interface; // type: System.Data.Odbc.OdbcPermissionAttribute, namespace: System.Data.Odbc
  DNOleDbPermissionAttribute = interface; // type: System.Data.OleDb.OleDbPermissionAttribute, namespace: System.Data.OleDb
  DNSqlClientPermissionAttribute = interface; // type: System.Data.SqlClient.SqlClientPermissionAttribute, namespace: System.Data.SqlClient
  DNSqlBulkCopyColumnMappingCollection = interface; // type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection, namespace: System.Data.SqlClient
  DNPropertyCollection = interface; // type: System.Data.PropertyCollection, namespace: System.Data
  DNDataColumn = interface; // type: System.Data.DataColumn, namespace: System.Data
  DNDataSet = interface; // type: System.Data.DataSet, namespace: System.Data
  DNDataTable = interface; // type: System.Data.DataTable, namespace: System.Data
  DNDataView = interface; // type: System.Data.DataView, namespace: System.Data
  DNDataViewManager = interface; // type: System.Data.DataViewManager, namespace: System.Data
  DNDbColumn = interface; // type: System.Data.Common.DbColumn, namespace: System.Data.Common
  DNDbConnectionStringBuilder = interface; // type: System.Data.Common.DbConnectionStringBuilder, namespace: System.Data.Common
  DNOdbcConnectionStringBuilder = interface; // type: System.Data.Odbc.OdbcConnectionStringBuilder, namespace: System.Data.Odbc
  DNOleDbConnectionStringBuilder = interface; // type: System.Data.OleDb.OleDbConnectionStringBuilder, namespace: System.Data.OleDb
  DNSqlConnectionStringBuilder = interface; // type: System.Data.SqlClient.SqlConnectionStringBuilder, namespace: System.Data.SqlClient
  DNDbDataReaderExtensions = interface; // type: System.Data.Common.DbDataReaderExtensions, namespace: System.Data.Common
  DNDbDataRecord = interface; // type: System.Data.Common.DbDataRecord, namespace: System.Data.Common
  DNDbDataSourceEnumerator = interface; // type: System.Data.Common.DbDataSourceEnumerator, namespace: System.Data.Common
  DNSqlDataSourceEnumerator = interface; // type: System.Data.Sql.SqlDataSourceEnumerator, namespace: System.Data.Sql
  DNDbEnumerator = interface; // type: System.Data.Common.DbEnumerator, namespace: System.Data.Common
  DNDbMetaDataCollectionNames = interface; // type: System.Data.Common.DbMetaDataCollectionNames, namespace: System.Data.Common
  DNDbMetaDataColumnNames = interface; // type: System.Data.Common.DbMetaDataColumnNames, namespace: System.Data.Common
  DNDbProviderConfigurationHandler = interface; // type: System.Data.Common.DbProviderConfigurationHandler, namespace: System.Data.Common
  DNDbProviderFactories = interface; // type: System.Data.Common.DbProviderFactories, namespace: System.Data.Common
  DNDbProviderFactoriesConfigurationHandler = interface; // type: System.Data.Common.DbProviderFactoriesConfigurationHandler, namespace: System.Data.Common
  DNDbProviderFactory = interface; // type: System.Data.Common.DbProviderFactory, namespace: System.Data.Common
  DNOdbcFactory = interface; // type: System.Data.Odbc.OdbcFactory, namespace: System.Data.Odbc
  DNOleDbFactory = interface; // type: System.Data.OleDb.OleDbFactory, namespace: System.Data.OleDb
  DNSqlClientFactory = interface; // type: System.Data.SqlClient.SqlClientFactory, namespace: System.Data.SqlClient
  DNSchemaTableColumn = interface; // type: System.Data.Common.SchemaTableColumn, namespace: System.Data.Common
  DNSchemaTableOptionalColumn = interface; // type: System.Data.Common.SchemaTableOptionalColumn, namespace: System.Data.Common
  DNConstraint = interface; // type: System.Data.Constraint, namespace: System.Data
  DNForeignKeyConstraint = interface; // type: System.Data.ForeignKeyConstraint, namespace: System.Data
  DNUniqueConstraint = interface; // type: System.Data.UniqueConstraint, namespace: System.Data
  DNDataRelation = interface; // type: System.Data.DataRelation, namespace: System.Data
  DNDataRow = interface; // type: System.Data.DataRow, namespace: System.Data
  DNDataRowBuilder = interface; // type: System.Data.DataRowBuilder, namespace: System.Data
  DNDataRowView = interface; // type: System.Data.DataRowView, namespace: System.Data
  DNDataViewSetting = interface; // type: System.Data.DataViewSetting, namespace: System.Data
  DNDataViewSettingCollection = interface; // type: System.Data.DataViewSettingCollection, namespace: System.Data
  DNInternalDataCollectionBase = interface; // type: System.Data.InternalDataCollectionBase, namespace: System.Data
  DNConstraintCollection = interface; // type: System.Data.ConstraintCollection, namespace: System.Data
  DNDataColumnCollection = interface; // type: System.Data.DataColumnCollection, namespace: System.Data
  DNDataRelationCollection = interface; // type: System.Data.DataRelationCollection, namespace: System.Data
  DNDataRowCollection = interface; // type: System.Data.DataRowCollection, namespace: System.Data
  DNDataTableCollection = interface; // type: System.Data.DataTableCollection, namespace: System.Data
  DNOdbcError = interface; // type: System.Data.Odbc.OdbcError, namespace: System.Data.Odbc
  DNOdbcErrorCollection = interface; // type: System.Data.Odbc.OdbcErrorCollection, namespace: System.Data.Odbc
  DNOdbcMetaDataCollectionNames = interface; // type: System.Data.Odbc.OdbcMetaDataCollectionNames, namespace: System.Data.Odbc
  DNOdbcMetaDataColumnNames = interface; // type: System.Data.Odbc.OdbcMetaDataColumnNames, namespace: System.Data.Odbc
  DNOleDbEnumerator = interface; // type: System.Data.OleDb.OleDbEnumerator, namespace: System.Data.OleDb
  DNOleDbError = interface; // type: System.Data.OleDb.OleDbError, namespace: System.Data.OleDb
  DNOleDbErrorCollection = interface; // type: System.Data.OleDb.OleDbErrorCollection, namespace: System.Data.OleDb
  DNOleDbMetaDataCollectionNames = interface; // type: System.Data.OleDb.OleDbMetaDataCollectionNames, namespace: System.Data.OleDb
  DNOleDbMetaDataColumnNames = interface; // type: System.Data.OleDb.OleDbMetaDataColumnNames, namespace: System.Data.OleDb
  DNOleDbSchemaGuid = interface; // type: System.Data.OleDb.OleDbSchemaGuid, namespace: System.Data.OleDb
  DNSqlNotificationRequest = interface; // type: System.Data.Sql.SqlNotificationRequest, namespace: System.Data.Sql
  DNSqlAuthenticationInitializer = interface; // type: System.Data.SqlClient.SqlAuthenticationInitializer, namespace: System.Data.SqlClient
  DNSqlAuthenticationParameters = interface; // type: System.Data.SqlClient.SqlAuthenticationParameters, namespace: System.Data.SqlClient
  DNSqlAuthenticationProvider = interface; // type: System.Data.SqlClient.SqlAuthenticationProvider, namespace: System.Data.SqlClient
  DNSqlAuthenticationToken = interface; // type: System.Data.SqlClient.SqlAuthenticationToken, namespace: System.Data.SqlClient
  DNSqlBulkCopy = interface; // type: System.Data.SqlClient.SqlBulkCopy, namespace: System.Data.SqlClient
  DNSqlBulkCopyColumnMapping = interface; // type: System.Data.SqlClient.SqlBulkCopyColumnMapping, namespace: System.Data.SqlClient
  DNSqlClientLogger = interface; // type: System.Data.SqlClient.SqlClientLogger, namespace: System.Data.SqlClient
  DNSqlClientMetaDataCollectionNames = interface; // type: System.Data.SqlClient.SqlClientMetaDataCollectionNames, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionEnclaveProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionEnclaveProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionKeyStoreProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCertificateStoreProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCngProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCngProvider, namespace: System.Data.SqlClient
  DNSqlColumnEncryptionCspProvider = interface; // type: System.Data.SqlClient.SqlColumnEncryptionCspProvider, namespace: System.Data.SqlClient
  DNSqlCredential = interface; // type: System.Data.SqlClient.SqlCredential, namespace: System.Data.SqlClient
  DNSQLDebugging = interface; // type: System.Data.SqlClient.SQLDebugging, namespace: System.Data.SqlClient
  DNSqlDependency = interface; // type: System.Data.SqlClient.SqlDependency, namespace: System.Data.SqlClient
  DNSqlEnclaveAttestationParameters = interface; // type: System.Data.SqlClient.SqlEnclaveAttestationParameters, namespace: System.Data.SqlClient
  DNSqlEnclaveSession = interface; // type: System.Data.SqlClient.SqlEnclaveSession, namespace: System.Data.SqlClient
  DNSqlError = interface; // type: System.Data.SqlClient.SqlError, namespace: System.Data.SqlClient
  DNSqlErrorCollection = interface; // type: System.Data.SqlClient.SqlErrorCollection, namespace: System.Data.SqlClient
  DNSqlBytes = interface; // type: System.Data.SqlTypes.SqlBytes, namespace: System.Data.SqlTypes
  DNSqlChars = interface; // type: System.Data.SqlTypes.SqlChars, namespace: System.Data.SqlTypes
  DNSqlXml = interface; // type: System.Data.SqlTypes.SqlXml, namespace: System.Data.SqlTypes
  DNTypedDataSetGenerator = interface; // type: System.Data.TypedDataSetGenerator, namespace: System.Data
  DNRowUpdatedEventArgs = interface; // type: System.Data.Common.RowUpdatedEventArgs, namespace: System.Data.Common
  DNOdbcRowUpdatedEventArgs = interface; // type: System.Data.Odbc.OdbcRowUpdatedEventArgs, namespace: System.Data.Odbc
  DNOleDbRowUpdatedEventArgs = interface; // type: System.Data.OleDb.OleDbRowUpdatedEventArgs, namespace: System.Data.OleDb
  DNSqlRowUpdatedEventArgs = interface; // type: System.Data.SqlClient.SqlRowUpdatedEventArgs, namespace: System.Data.SqlClient
  DNRowUpdatingEventArgs = interface; // type: System.Data.Common.RowUpdatingEventArgs, namespace: System.Data.Common
  DNOdbcRowUpdatingEventArgs = interface; // type: System.Data.Odbc.OdbcRowUpdatingEventArgs, namespace: System.Data.Odbc
  DNOleDbRowUpdatingEventArgs = interface; // type: System.Data.OleDb.OleDbRowUpdatingEventArgs, namespace: System.Data.OleDb
  DNSqlRowUpdatingEventArgs = interface; // type: System.Data.SqlClient.SqlRowUpdatingEventArgs, namespace: System.Data.SqlClient
  DNDataColumnChangeEventArgs = interface; // type: System.Data.DataColumnChangeEventArgs, namespace: System.Data
  DNDataRowChangeEventArgs = interface; // type: System.Data.DataRowChangeEventArgs, namespace: System.Data
  DNDataTableClearEventArgs = interface; // type: System.Data.DataTableClearEventArgs, namespace: System.Data
  DNDataTableNewRowEventArgs = interface; // type: System.Data.DataTableNewRowEventArgs, namespace: System.Data
  DNFillErrorEventArgs = interface; // type: System.Data.FillErrorEventArgs, namespace: System.Data
  DNMergeFailedEventArgs = interface; // type: System.Data.MergeFailedEventArgs, namespace: System.Data
  DNOdbcInfoMessageEventArgs = interface; // type: System.Data.Odbc.OdbcInfoMessageEventArgs, namespace: System.Data.Odbc
  DNOleDbInfoMessageEventArgs = interface; // type: System.Data.OleDb.OleDbInfoMessageEventArgs, namespace: System.Data.OleDb
  DNSqlInfoMessageEventArgs = interface; // type: System.Data.SqlClient.SqlInfoMessageEventArgs, namespace: System.Data.SqlClient
  DNSqlNotificationEventArgs = interface; // type: System.Data.SqlClient.SqlNotificationEventArgs, namespace: System.Data.SqlClient
  DNSqlRowsCopiedEventArgs = interface; // type: System.Data.SqlClient.SqlRowsCopiedEventArgs, namespace: System.Data.SqlClient
  DNStateChangeEventArgs = interface; // type: System.Data.StateChangeEventArgs, namespace: System.Data
  DNStatementCompletedEventArgs = interface; // type: System.Data.StatementCompletedEventArgs, namespace: System.Data
  DNInvalidUdtException = interface; // type: Microsoft.SqlServer.Server.InvalidUdtException, namespace: Microsoft.SqlServer.Server
  DNDataException = interface; // type: System.Data.DataException, namespace: System.Data
  DNConstraintException = interface; // type: System.Data.ConstraintException, namespace: System.Data
  DNDeletedRowInaccessibleException = interface; // type: System.Data.DeletedRowInaccessibleException, namespace: System.Data
  DNDuplicateNameException = interface; // type: System.Data.DuplicateNameException, namespace: System.Data
  DNInRowChangingEventException = interface; // type: System.Data.InRowChangingEventException, namespace: System.Data
  DNInvalidConstraintException = interface; // type: System.Data.InvalidConstraintException, namespace: System.Data
  DNInvalidExpressionException = interface; // type: System.Data.InvalidExpressionException, namespace: System.Data
  DNEvaluateException = interface; // type: System.Data.EvaluateException, namespace: System.Data
  DNSyntaxErrorException = interface; // type: System.Data.SyntaxErrorException, namespace: System.Data
  DNMissingPrimaryKeyException = interface; // type: System.Data.MissingPrimaryKeyException, namespace: System.Data
  DNNoNullAllowedException = interface; // type: System.Data.NoNullAllowedException, namespace: System.Data
  DNReadOnlyException = interface; // type: System.Data.ReadOnlyException, namespace: System.Data
  DNRowNotInTableException = interface; // type: System.Data.RowNotInTableException, namespace: System.Data
  DNStrongTypingException = interface; // type: System.Data.StrongTypingException, namespace: System.Data
  DNTypedDataSetGeneratorException = interface; // type: System.Data.TypedDataSetGeneratorException, namespace: System.Data
  DNVersionNotFoundException = interface; // type: System.Data.VersionNotFoundException, namespace: System.Data
  DNDBConcurrencyException = interface; // type: System.Data.DBConcurrencyException, namespace: System.Data
  DNOperationAbortedException = interface; // type: System.Data.OperationAbortedException, namespace: System.Data
  DNSqlTypeException = interface; // type: System.Data.SqlTypes.SqlTypeException, namespace: System.Data.SqlTypes
  DNSqlAlreadyFilledException = interface; // type: System.Data.SqlTypes.SqlAlreadyFilledException, namespace: System.Data.SqlTypes
  DNSqlNotFilledException = interface; // type: System.Data.SqlTypes.SqlNotFilledException, namespace: System.Data.SqlTypes
  DNSqlNullValueException = interface; // type: System.Data.SqlTypes.SqlNullValueException, namespace: System.Data.SqlTypes
  DNSqlTruncateException = interface; // type: System.Data.SqlTypes.SqlTruncateException, namespace: System.Data.SqlTypes
  DNDbException = interface; // type: System.Data.Common.DbException, namespace: System.Data.Common
  DNOdbcException = interface; // type: System.Data.Odbc.OdbcException, namespace: System.Data.Odbc
  DNOleDbException = interface; // type: System.Data.OleDb.OleDbException, namespace: System.Data.OleDb
  DNSqlException = interface; // type: System.Data.SqlClient.SqlException, namespace: System.Data.SqlClient
  DNDataAdapter = interface; // type: System.Data.Common.DataAdapter, namespace: System.Data.Common
  DNDbDataAdapter = interface; // type: System.Data.Common.DbDataAdapter, namespace: System.Data.Common
  DNOdbcDataAdapter = interface; // type: System.Data.Odbc.OdbcDataAdapter, namespace: System.Data.Odbc
  DNOleDbDataAdapter = interface; // type: System.Data.OleDb.OleDbDataAdapter, namespace: System.Data.OleDb
  DNSqlDataAdapter = interface; // type: System.Data.SqlClient.SqlDataAdapter, namespace: System.Data.SqlClient
  DNDbCommand = interface; // type: System.Data.Common.DbCommand, namespace: System.Data.Common
  DNOdbcCommand = interface; // type: System.Data.Odbc.OdbcCommand, namespace: System.Data.Odbc
  DNOleDbCommand = interface; // type: System.Data.OleDb.OleDbCommand, namespace: System.Data.OleDb
  DNSqlCommand = interface; // type: System.Data.SqlClient.SqlCommand, namespace: System.Data.SqlClient
  DNDbCommandBuilder = interface; // type: System.Data.Common.DbCommandBuilder, namespace: System.Data.Common
  DNOdbcCommandBuilder = interface; // type: System.Data.Odbc.OdbcCommandBuilder, namespace: System.Data.Odbc
  DNOleDbCommandBuilder = interface; // type: System.Data.OleDb.OleDbCommandBuilder, namespace: System.Data.OleDb
  DNSqlCommandBuilder = interface; // type: System.Data.SqlClient.SqlCommandBuilder, namespace: System.Data.SqlClient
  DNDbConnection = interface; // type: System.Data.Common.DbConnection, namespace: System.Data.Common
  DNOdbcConnection = interface; // type: System.Data.Odbc.OdbcConnection, namespace: System.Data.Odbc
  DNOleDbConnection = interface; // type: System.Data.OleDb.OleDbConnection, namespace: System.Data.OleDb
  DNSqlConnection = interface; // type: System.Data.SqlClient.SqlConnection, namespace: System.Data.SqlClient
  DNDataColumnMapping = interface; // type: System.Data.Common.DataColumnMapping, namespace: System.Data.Common
  DNDataColumnMappingCollection = interface; // type: System.Data.Common.DataColumnMappingCollection, namespace: System.Data.Common
  DNDataTableMapping = interface; // type: System.Data.Common.DataTableMapping, namespace: System.Data.Common
  DNDataTableMappingCollection = interface; // type: System.Data.Common.DataTableMappingCollection, namespace: System.Data.Common
  DNDbDataReader = interface; // type: System.Data.Common.DbDataReader, namespace: System.Data.Common
  DNDataTableReader = interface; // type: System.Data.DataTableReader, namespace: System.Data
  DNOdbcDataReader = interface; // type: System.Data.Odbc.OdbcDataReader, namespace: System.Data.Odbc
  DNOleDbDataReader = interface; // type: System.Data.OleDb.OleDbDataReader, namespace: System.Data.OleDb
  DNSqlDataReader = interface; // type: System.Data.SqlClient.SqlDataReader, namespace: System.Data.SqlClient
  DNDbParameter = interface; // type: System.Data.Common.DbParameter, namespace: System.Data.Common
  DNOdbcParameter = interface; // type: System.Data.Odbc.OdbcParameter, namespace: System.Data.Odbc
  DNOleDbParameter = interface; // type: System.Data.OleDb.OleDbParameter, namespace: System.Data.OleDb
  DNSqlParameter = interface; // type: System.Data.SqlClient.SqlParameter, namespace: System.Data.SqlClient
  DNDbParameterCollection = interface; // type: System.Data.Common.DbParameterCollection, namespace: System.Data.Common
  DNOdbcParameterCollection = interface; // type: System.Data.Odbc.OdbcParameterCollection, namespace: System.Data.Odbc
  DNOleDbParameterCollection = interface; // type: System.Data.OleDb.OleDbParameterCollection, namespace: System.Data.OleDb
  DNSqlParameterCollection = interface; // type: System.Data.SqlClient.SqlParameterCollection, namespace: System.Data.SqlClient
  DNDbTransaction = interface; // type: System.Data.Common.DbTransaction, namespace: System.Data.Common
  DNOdbcTransaction = interface; // type: System.Data.Odbc.OdbcTransaction, namespace: System.Data.Odbc
  DNOleDbTransaction = interface; // type: System.Data.OleDb.OleDbTransaction, namespace: System.Data.OleDb
  DNSqlTransaction = interface; // type: System.Data.SqlClient.SqlTransaction, namespace: System.Data.SqlClient
  DNSqlFileStream = interface; // type: System.Data.SqlTypes.SqlFileStream, namespace: System.Data.SqlTypes
  DNDBDataPermission = interface; // type: System.Data.Common.DBDataPermission, namespace: System.Data.Common
  DNOdbcPermission = interface; // type: System.Data.Odbc.OdbcPermission, namespace: System.Data.Odbc
  DNOleDbPermission = interface; // type: System.Data.OleDb.OleDbPermission, namespace: System.Data.OleDb
  DNSqlClientPermission = interface; // type: System.Data.SqlClient.SqlClientPermission, namespace: System.Data.SqlClient
  DNSqlBinary = interface; // type: System.Data.SqlTypes.SqlBinary, namespace: System.Data.SqlTypes
  DNSqlBoolean = interface; // type: System.Data.SqlTypes.SqlBoolean, namespace: System.Data.SqlTypes
  DNSqlByte = interface; // type: System.Data.SqlTypes.SqlByte, namespace: System.Data.SqlTypes
  DNSqlDateTime = interface; // type: System.Data.SqlTypes.SqlDateTime, namespace: System.Data.SqlTypes
  DNSqlDecimal = interface; // type: System.Data.SqlTypes.SqlDecimal, namespace: System.Data.SqlTypes
  DNSqlDouble = interface; // type: System.Data.SqlTypes.SqlDouble, namespace: System.Data.SqlTypes
  DNSqlGuid = interface; // type: System.Data.SqlTypes.SqlGuid, namespace: System.Data.SqlTypes
  DNSqlInt16 = interface; // type: System.Data.SqlTypes.SqlInt16, namespace: System.Data.SqlTypes
  DNSqlInt32 = interface; // type: System.Data.SqlTypes.SqlInt32, namespace: System.Data.SqlTypes
  DNSqlInt64 = interface; // type: System.Data.SqlTypes.SqlInt64, namespace: System.Data.SqlTypes
  DNSqlMoney = interface; // type: System.Data.SqlTypes.SqlMoney, namespace: System.Data.SqlTypes
  DNSqlSingle = interface; // type: System.Data.SqlTypes.SqlSingle, namespace: System.Data.SqlTypes
  DNSqlString = interface; // type: System.Data.SqlTypes.SqlString, namespace: System.Data.SqlTypes
  DNDataSetSchemaImporterExtension = interface; // type: System.Data.DataSetSchemaImporterExtension, namespace: System.Data
  DNSqlTypesSchemaImporterExtensionHelper = interface; // type: System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper, namespace: System.Data.SqlTypes
  DNTypeBigIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBigIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeBinarySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBinarySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeBitSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeBitSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeDateTimeSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeDecimalSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeDecimalSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeFloatSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeFloatSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeMoneySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeMoneySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNTextSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNTextSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNumericSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNumericSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeNVarCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeRealSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeRealSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallDateTimeSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeSmallMoneySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeTextSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeTextSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeTinyIntSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeUniqueIdentifierSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarBinarySchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarCharSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarCharSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNTypeVarImageSchemaImporterExtension = interface; // type: System.Data.SqlTypes.TypeVarImageSchemaImporterExtension, namespace: System.Data.SqlTypes
  DNXmlDataDocument = interface; // type: System.Xml.XmlDataDocument, namespace: System.Xml

{ delegates }

  [DNTypeName('System.Data.DataColumnChangeEventHandler')]
  DNDataColumnChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataColumnChangeEventArgs) of object;

  [DNTypeName('System.Data.DataRowChangeEventHandler')]
  DNDataRowChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataRowChangeEventArgs) of object;

  [DNTypeName('System.Data.DataTableClearEventHandler')]
  DNDataTableClearEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableClearEventArgs) of object;

  [DNTypeName('System.Data.DataTableNewRowEventHandler')]
  DNDataTableNewRowEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataTableNewRowEventArgs) of object;

  [DNTypeName('System.Data.FillErrorEventHandler')]
  DNFillErrorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFillErrorEventArgs) of object;

  [DNTypeName('System.Data.MergeFailedEventHandler')]
  DNMergeFailedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMergeFailedEventArgs) of object;

  [DNTypeName('System.Data.Odbc.OdbcInfoMessageEventHandler')]
  DNOdbcInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcInfoMessageEventArgs) of object;

  [DNTypeName('System.Data.Odbc.OdbcRowUpdatedEventHandler')]
  DNOdbcRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcRowUpdatedEventArgs) of object;

  [DNTypeName('System.Data.Odbc.OdbcRowUpdatingEventHandler')]
  DNOdbcRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOdbcRowUpdatingEventArgs) of object;

  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventHandler')]
  DNOleDbInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbInfoMessageEventArgs) of object;

  [DNTypeName('System.Data.OleDb.OleDbRowUpdatedEventHandler')]
  DNOleDbRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbRowUpdatedEventArgs) of object;

  [DNTypeName('System.Data.OleDb.OleDbRowUpdatingEventHandler')]
  DNOleDbRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOleDbRowUpdatingEventArgs) of object;

  [DNTypeName('System.Data.SqlClient.OnChangeEventHandler')]
  DNOnChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlNotificationEventArgs) of object;

  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventHandler')]
  DNSqlInfoMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlInfoMessageEventArgs) of object;

  [DNTypeName('System.Data.SqlClient.SqlRowsCopiedEventHandler')]
  DNSqlRowsCopiedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowsCopiedEventArgs) of object;

  [DNTypeName('System.Data.SqlClient.SqlRowUpdatedEventHandler')]
  DNSqlRowUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowUpdatedEventArgs) of object;

  [DNTypeName('System.Data.SqlClient.SqlRowUpdatingEventHandler')]
  DNSqlRowUpdatingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlRowUpdatingEventArgs) of object;

  [DNTypeName('System.Data.StateChangeEventHandler')]
  DNStateChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStateChangeEventArgs) of object;

  [DNTypeName('System.Data.StatementCompletedEventHandler')]
  DNStatementCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStatementCompletedEventArgs) of object;




{ objects }

  //-------------namespace: Microsoft.SqlServer.Server----------------
  [DNTypeName('Microsoft.SqlServer.Server.IBinarySerialize')]
  DNIBinarySerialize = interface(DDN.mscorlib.DNObject)
  ['{EA2D75CA-B756-3302-8412-D2E681C6B978}']
  { methods } 

    procedure Read(r: DDN.mscorlib.DNBinaryReader);
    procedure Write(w: DDN.mscorlib.DNBinaryWriter);

  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IColumnMappingCollection')]
  DNIColumnMappingCollection = interface(DDN.mscorlib.DNIList)
  ['{FEC17537-6149-34F2-B91F-9FB3AF6B2546}']
  { getters & setters } 

    function get_Item(index: string): DDN.mscorlib.DNObject;
    procedure set_Item(index: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function Add(sourceColumnName: string; dataSetColumnName: string): DNIColumnMapping;
    function &Contains(sourceColumnName: string): Boolean;
    function GetByDataSetColumn(dataSetColumnName: string): DNIColumnMapping;
    function IndexOf(sourceColumnName: string): Int32;
    procedure RemoveAt(sourceColumnName: string);

  { propertys } 

    property Item[index: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataParameterCollection')]
  DNIDataParameterCollection = interface(DDN.mscorlib.DNIList)
  ['{B490F13C-7E82-3A54-A31E-DFA010A1AFFE}']
  { getters & setters } 

    function get_Item(parameterName: string): DDN.mscorlib.DNObject;
    procedure set_Item(parameterName: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function &Contains(parameterName: string): Boolean;
    function IndexOf(parameterName: string): Int32;
    procedure RemoveAt(parameterName: string);

  { propertys } 

    property Item[parameterName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ITableMappingCollection')]
  DNITableMappingCollection = interface(DDN.mscorlib.DNIList)
  ['{F11B7EBC-377D-3EF7-B126-CC26D43C2ED8}']
  { getters & setters } 

    function get_Item(index: string): DDN.mscorlib.DNObject;
    procedure set_Item(index: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function Add(sourceTableName: string; dataSetTableName: string): DNITableMapping;
    function &Contains(sourceTableName: string): Boolean;
    function GetByDataSetTable(dataSetTableName: string): DNITableMapping;
    function IndexOf(sourceTableName: string): Int32;
    procedure RemoveAt(sourceTableName: string);

  { propertys } 

    property Item[index: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Data.Common----------------
  [DNTypeName('System.Data.Common.IDbColumnSchemaGenerator')]
  DNIDbColumnSchemaGenerator = interface(DDN.mscorlib.DNObject)
  ['{59AED2D8-A48C-3E29-AB58-F5400CDAF8F2}']
  { methods } 

    function GetColumnSchema: DDN.mscorlib.DNReadOnlyCollection<DNDbColumn>;

  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IColumnMapping')]
  DNIColumnMapping = interface(DDN.mscorlib.DNObject)
  ['{7701EF45-1147-36B5-B474-23C21843AFC0}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { propertys } 

    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataAdapter')]
  DNIDataAdapter = interface(DDN.mscorlib.DNObject)
  ['{8883ACAD-6616-3F54-AD75-0BB5F0D85070}']
  { getters & setters } 

    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_TableMappings: DNITableMappingCollection;

  { methods } 

    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    function Fill(dataSet: DNDataSet): Int32;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32;

  { propertys } 

    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property TableMappings: DNITableMappingCollection read get_TableMappings;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbDataAdapter')]
  DNIDbDataAdapter = interface(DNIDataAdapter)
  ['{FA46C6A3-7D70-3321-AAA3-148BDF7AB779}']
  { getters & setters } 

    function get_SelectCommand: DNIDbCommand;
    procedure set_SelectCommand(value: DNIDbCommand);
    function get_InsertCommand: DNIDbCommand;
    procedure set_InsertCommand(value: DNIDbCommand);
    function get_UpdateCommand: DNIDbCommand;
    procedure set_UpdateCommand(value: DNIDbCommand);
    function get_DeleteCommand: DNIDbCommand;
    procedure set_DeleteCommand(value: DNIDbCommand);

  { propertys } 

    property SelectCommand: DNIDbCommand read get_SelectCommand write set_SelectCommand;
    property InsertCommand: DNIDbCommand read get_InsertCommand write set_InsertCommand;
    property UpdateCommand: DNIDbCommand read get_UpdateCommand write set_UpdateCommand;
    property DeleteCommand: DNIDbCommand read get_DeleteCommand write set_DeleteCommand;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataParameter')]
  DNIDataParameter = interface(DDN.mscorlib.DNObject)
  ['{DBAE8A91-BB4E-3E18-B45F-233C65FBDA2B}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbDataParameter')]
  DNIDbDataParameter = interface(DNIDataParameter)
  ['{391E486C-97BE-3FD1-A26F-BC953AF9EF2D}']
  { getters & setters } 

    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { propertys } 

    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Size: Int32 read get_Size write set_Size;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataRecord')]
  DNIDataRecord = interface(DDN.mscorlib.DNObject)
  ['{6DAA5A9D-4EAC-3C24-B85C-794B4E65604D}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    function GetString(i: Int32): string;
    function IsDBNull(i: Int32): Boolean;
    function GetName(i: Int32): string;
    function GetDataTypeName(i: Int32): string;
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetOrdinal(name: string): Int32;
    function GetBoolean(i: Int32): Boolean;
    function GetByte(i: Int32): Byte;
    function GetBytes(i: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferoffset: Int32; length: Int32): Int64;
    function GetChar(i: Int32): Char;
    function GetChars(i: Int32; fieldoffset: Int64; buffer: TArray<Char>; bufferoffset: Int32; length: Int32): Int64;
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetFloat(i: Int32): Single;
    function GetDouble(i: Int32): Double;
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    function GetData(i: Int32): DNIDataReader;

  { propertys } 

    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.ITableMapping')]
  DNITableMapping = interface(DDN.mscorlib.DNObject)
  ['{7D6C1151-07C6-3BAE-A4CA-2505E8B9F92F}']
  { getters & setters } 

    function get_ColumnMappings: DNIColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { propertys } 

    property ColumnMappings: DNIColumnMappingCollection read get_ColumnMappings;
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  //-------------namespace: System.Data.SqlTypes----------------
  [DNTypeName('System.Data.SqlTypes.INullable')]
  DNINullable = interface(DDN.mscorlib.DNObject)
  ['{E7B3191E-CB93-3820-AB88-949781697507}']
  { getters & setters } 

    function get_IsNull: Boolean;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDataReader')]
  DNIDataReader = interface(DDN.mscorlib.DNIDisposable)
  ['{EEF6063A-B303-370C-A350-20E70194F0B0}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;

  { methods } 

    procedure Close;
    function Read: Boolean;
    function GetSchemaTable: DNDataTable;
    function NextResult: Boolean;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbCommand')]
  DNIDbCommand = interface(DDN.mscorlib.DNIDisposable)
  ['{E41AC658-7894-35BD-B768-0D4824CDD220}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    procedure set_Connection(value: DNIDbConnection);
    function get_Transaction: DNIDbTransaction;
    procedure set_Transaction(value: DNIDbTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Parameters: DNIDataParameterCollection;
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);

  { methods } 

    procedure Prepare;
    procedure Cancel;
    function CreateParameter: DNIDbDataParameter;
    function ExecuteNonQuery: Int32;
    function ExecuteReader: DNIDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNIDataReader; overload;
    function ExecuteScalar: DDN.mscorlib.DNObject;

  { propertys } 

    property Connection: DNIDbConnection read get_Connection write set_Connection;
    property Transaction: DNIDbTransaction read get_Transaction write set_Transaction;
    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Parameters: DNIDataParameterCollection read get_Parameters;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbConnection')]
  DNIDbConnection = interface(DDN.mscorlib.DNIDisposable)
  ['{9BB226F4-2AF3-37E7-B91D-3BB936FC0A7E}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_State: DNConnectionState;

  { methods } 

    function BeginTransaction: DNIDbTransaction; overload;
    function BeginTransaction(il: DNIsolationLevel): DNIDbTransaction; overload;
    procedure Close;
    procedure ChangeDatabase(databaseName: string);
    function CreateCommand: DNIDbCommand;
    procedure Open;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property State: DNConnectionState read get_State;
  end;

  //-------------namespace: System.Data----------------
  [DNTypeName('System.Data.IDbTransaction')]
  DNIDbTransaction = interface(DDN.mscorlib.DNIDisposable)
  ['{62572DE3-DD0D-3763-9548-50665D013F6D}']
  { getters & setters } 

    function get_Connection: DNIDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Commit;
    procedure Rollback;

  { propertys } 

    property Connection: DNIDbConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5151D93-8A81-5185-A0E6-94C7835798A6}']
  { static getter & setter } 

    {class} function get_IsAvailable: Boolean;
    {class} function get_Pipe: DNSqlPipe;
    {class} function get_TriggerContext: DNSqlTriggerContext;
    {class} function get_WindowsIdentity: DDN.mscorlib.DNWindowsIdentity;

  { static propertys } 

    {class} property IsAvailable: Boolean read get_IsAvailable;
    {class} property Pipe: DNSqlPipe read get_Pipe;
    {class} property TriggerContext: DNSqlTriggerContext read get_TriggerContext;
    {class} property WindowsIdentity: DDN.mscorlib.DNWindowsIdentity read get_WindowsIdentity;
  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlContext')]
  DNSqlContext = interface(DDN.mscorlib.DNObject)
  ['{A9B3388F-A387-3F30-8443-3C83BE2525B1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlContext = class(TDNGenericImport<DNSqlContextClass, DNSqlContext>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlDataRecordClass = interface(DNObjectClass)
  ['{D37A48F4-F7DD-5320-8C97-FD83B0606727}']
  { constructors } 

    {class} function init(metaData: TArray<DNSqlMetaData>): DNSqlDataRecord;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlDataRecord')]
  DNSqlDataRecord = interface(DNIDataRecord)
  ['{944E81B5-D1D9-34CE-9699-852F41DE654C}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    function GetName(ordinal: Int32): string;
    function GetDataTypeName(ordinal: Int32): string;
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetOrdinal(name: string): Int32;
    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetBytes(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetChars(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetFloat(ordinal: Int32): Single;
    function GetDouble(ordinal: Int32): Double;
    function GetString(ordinal: Int32): string;
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    function GetDateTimeOffset(ordinal: Int32): DDN.mscorlib.DNDateTimeOffset;
    function GetTimeSpan(ordinal: Int32): DDN.mscorlib.DNTimeSpan;
    function IsDBNull(ordinal: Int32): Boolean;
    function GetSqlMetaData(ordinal: Int32): DNSqlMetaData;
    function GetSqlFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetSqlValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetSqlValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetSqlBinary(ordinal: Int32): DNSqlBinary;
    function GetSqlBytes(ordinal: Int32): DNSqlBytes;
    function GetSqlXml(ordinal: Int32): DNSqlXml;
    function GetSqlBoolean(ordinal: Int32): DNSqlBoolean;
    function GetSqlByte(ordinal: Int32): DNSqlByte;
    function GetSqlChars(ordinal: Int32): DNSqlChars;
    function GetSqlInt16(ordinal: Int32): DNSqlInt16;
    function GetSqlInt32(ordinal: Int32): DNSqlInt32;
    function GetSqlInt64(ordinal: Int32): DNSqlInt64;
    function GetSqlSingle(ordinal: Int32): DNSqlSingle;
    function GetSqlDouble(ordinal: Int32): DNSqlDouble;
    function GetSqlMoney(ordinal: Int32): DNSqlMoney;
    function GetSqlDateTime(ordinal: Int32): DNSqlDateTime;
    function GetSqlDecimal(ordinal: Int32): DNSqlDecimal;
    function GetSqlString(ordinal: Int32): DNSqlString;
    function GetSqlGuid(ordinal: Int32): DNSqlGuid;
    function SetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    procedure SetValue(ordinal: Int32; value: DDN.mscorlib.DNObject);
    procedure SetBoolean(ordinal: Int32; value: Boolean);
    procedure SetByte(ordinal: Int32; value: Byte);
    procedure SetBytes(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32);
    procedure SetChar(ordinal: Int32; value: Char);
    procedure SetChars(ordinal: Int32; fieldOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32);
    procedure SetInt16(ordinal: Int32; value: Int16);
    procedure SetInt32(ordinal: Int32; value: Int32);
    procedure SetInt64(ordinal: Int32; value: Int64);
    procedure SetFloat(ordinal: Int32; value: Single);
    procedure SetDouble(ordinal: Int32; value: Double);
    procedure SetString(ordinal: Int32; value: string);
    procedure SetDecimal(ordinal: Int32; value: DDN.mscorlib.DNDecimal);
    procedure SetDateTime(ordinal: Int32; value: DDN.mscorlib.DNDateTime);
    procedure SetTimeSpan(ordinal: Int32; value: DDN.mscorlib.DNTimeSpan);
    procedure SetDateTimeOffset(ordinal: Int32; value: DDN.mscorlib.DNDateTimeOffset);
    procedure SetDBNull(ordinal: Int32);
    procedure SetGuid(ordinal: Int32; value: DDN.mscorlib.DNGuid);
    procedure SetSqlBoolean(ordinal: Int32; value: DNSqlBoolean);
    procedure SetSqlByte(ordinal: Int32; value: DNSqlByte);
    procedure SetSqlInt16(ordinal: Int32; value: DNSqlInt16);
    procedure SetSqlInt32(ordinal: Int32; value: DNSqlInt32);
    procedure SetSqlInt64(ordinal: Int32; value: DNSqlInt64);
    procedure SetSqlSingle(ordinal: Int32; value: DNSqlSingle);
    procedure SetSqlDouble(ordinal: Int32; value: DNSqlDouble);
    procedure SetSqlMoney(ordinal: Int32; value: DNSqlMoney);
    procedure SetSqlDateTime(ordinal: Int32; value: DNSqlDateTime);
    procedure SetSqlXml(ordinal: Int32; value: DNSqlXml);
    procedure SetSqlDecimal(ordinal: Int32; value: DNSqlDecimal);
    procedure SetSqlString(ordinal: Int32; value: DNSqlString);
    procedure SetSqlBinary(ordinal: Int32; value: DNSqlBinary);
    procedure SetSqlGuid(ordinal: Int32; value: DNSqlGuid);
    procedure SetSqlChars(ordinal: Int32; value: DNSqlChars);
    procedure SetSqlBytes(ordinal: Int32; value: DNSqlBytes);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldCount: Int32 read get_FieldCount;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNSqlDataRecord = class(TDNGenericImport<DNSqlDataRecordClass, DNSqlDataRecord>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlMetaDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B737A9D2-6FFD-5BD8-94E0-A2D1A69D4541}']
  { static getter & setter } 

    {class} function get_Max: Int64;

  { constructors } 

    {class} function init(name: string; dbType: DNSqlDbType): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType; serverTypeName: string): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; userDefinedType: DDN.mscorlib.DNType; serverTypeName: string; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; precision: Byte; scale: Byte): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; precision: Byte; scale: Byte; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; locale: Int64; compareOptions: DNSqlCompareOptions): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; locale: Int64; compareOptions: DNSqlCompareOptions; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; database: string; owningSchema: string; objectName: string; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; precision: Byte; scale: Byte; locale: Int64; compareOptions: DNSqlCompareOptions; userDefinedType: DDN.mscorlib.DNType): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; maxLength: Int64; precision: Byte; scale: Byte; localeId: Int64; compareOptions: DNSqlCompareOptions; userDefinedType: DDN.mscorlib.DNType; useServerDefault: Boolean; isUniqueKey: Boolean; columnSortOrder: DNSortOrder; sortOrdinal: Int32): DNSqlMetaData; overload;
    {class} function init(name: string; dbType: DNSqlDbType; database: string; owningSchema: string; objectName: string): DNSqlMetaData; overload;

  { static methods } 

    {class} function InferFromValue(value: DDN.mscorlib.DNObject; name: string): DNSqlMetaData;

  { static propertys } 

    {class} property Max: Int64 read get_Max;
  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlMetaData')]
  DNSqlMetaData = interface(DDN.mscorlib.DNObject)
  ['{93BB05EB-6510-36A9-B10B-801D513F1524}']
  { getters & setters } 

    function get_CompareOptions: DNSqlCompareOptions;
    function get_DbType: DNDbType;
    function get_IsUniqueKey: Boolean;
    function get_LocaleId: Int64;
    function get_MaxLength: Int64;
    function get_Name: string;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_SortOrder: DNSortOrder;
    function get_SortOrdinal: Int32;
    function get_SqlDbType: DNSqlDbType;
    function get_Type: DDN.mscorlib.DNType;
    function get_TypeName: string;
    function get_UseServerDefault: Boolean;
    function get_XmlSchemaCollectionDatabase: string;
    function get_XmlSchemaCollectionName: string;
    function get_XmlSchemaCollectionOwningSchema: string;

  { methods } 

    function Adjust(value: Int16): Int16; overload;
    function Adjust(value: Int32): Int32; overload;
    function Adjust(value: Int64): Int64; overload;
    function Adjust(value: Single): Single; overload;
    function Adjust(value: Double): Double; overload;
    function Adjust(value: string): string; overload;
    function Adjust(value: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNDateTime; overload;
    function Adjust(value: DDN.mscorlib.DNGuid): DDN.mscorlib.DNGuid; overload;
    function Adjust(value: DNSqlBoolean): DNSqlBoolean; overload;
    function Adjust(value: DNSqlByte): DNSqlByte; overload;
    function Adjust(value: DNSqlInt16): DNSqlInt16; overload;
    function Adjust(value: DNSqlInt32): DNSqlInt32; overload;
    function Adjust(value: DNSqlInt64): DNSqlInt64; overload;
    function Adjust(value: DNSqlSingle): DNSqlSingle; overload;
    function Adjust(value: DNSqlDouble): DNSqlDouble; overload;
    function Adjust(value: DNSqlDateTime): DNSqlDateTime; overload;
    function Adjust(value: DNSqlString): DNSqlString; overload;
    function Adjust(value: DNSqlGuid): DNSqlGuid; overload;
    function Adjust(value: DNSqlXml): DNSqlXml; overload;
    function Adjust(value: DDN.mscorlib.DNTimeSpan): DDN.mscorlib.DNTimeSpan; overload;
    function Adjust(value: DDN.mscorlib.DNDateTimeOffset): DDN.mscorlib.DNDateTimeOffset; overload;
    function Adjust(value: Boolean): Boolean; overload;
    function Adjust(value: Byte): Byte; overload;
    function Adjust(value: Char): Char; overload;
    function Adjust(value: DDN.mscorlib.DNDecimal): DDN.mscorlib.DNDecimal; overload;
    function Adjust(value: DNSqlMoney): DNSqlMoney; overload;
    function Adjust(value: DNSqlDecimal): DNSqlDecimal; overload;
    function Adjust(value: DNSqlBinary): DNSqlBinary; overload;
    function Adjust(value: DNSqlChars): DNSqlChars; overload;
    function Adjust(value: DNSqlBytes): DNSqlBytes; overload;
    function Adjust(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function Adjust(value: TArray<Byte>): TArray<Byte>; overload;
    function Adjust(value: TArray<Char>): TArray<Char>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompareOptions: DNSqlCompareOptions read get_CompareOptions;
    property DbType: DNDbType read get_DbType;
    property IsUniqueKey: Boolean read get_IsUniqueKey;
    property LocaleId: Int64 read get_LocaleId;
    property MaxLength: Int64 read get_MaxLength;
    property Name: string read get_Name;
    property Precision: Byte read get_Precision;
    property Scale: Byte read get_Scale;
    property SortOrder: DNSortOrder read get_SortOrder;
    property SortOrdinal: Int32 read get_SortOrdinal;
    property SqlDbType: DNSqlDbType read get_SqlDbType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property TypeName: string read get_TypeName;
    property UseServerDefault: Boolean read get_UseServerDefault;
    property XmlSchemaCollectionDatabase: string read get_XmlSchemaCollectionDatabase;
    property XmlSchemaCollectionName: string read get_XmlSchemaCollectionName;
    property XmlSchemaCollectionOwningSchema: string read get_XmlSchemaCollectionOwningSchema;
  end;

  TDNSqlMetaData = class(TDNGenericImport<DNSqlMetaDataClass, DNSqlMetaData>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlPipeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AF188E4D-18E8-50E7-AE95-68B49677CF01}']
  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlPipe')]
  DNSqlPipe = interface(DDN.mscorlib.DNObject)
  ['{6F724A5D-98E1-3E92-B08A-4E37785768CD}']
  { getters & setters } 

    function get_IsSendingResults: Boolean;

  { methods } 

    procedure SendResultsEnd;
    procedure ExecuteAndSend(command: DNSqlCommand);
    procedure Send(message: string); overload;
    procedure Send(reader: DNSqlDataReader); overload;
    procedure Send(&record: DNSqlDataRecord); overload;
    procedure SendResultsStart(&record: DNSqlDataRecord);
    procedure SendResultsRow(&record: DNSqlDataRecord);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSendingResults: Boolean read get_IsSendingResults;
  end;

  TDNSqlPipe = class(TDNGenericImport<DNSqlPipeClass, DNSqlPipe>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlTriggerContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3083F524-CEBE-5A76-B4C9-AD7F7D41EEDB}']
  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlTriggerContext')]
  DNSqlTriggerContext = interface(DDN.mscorlib.DNObject)
  ['{02C97B74-F42B-3EA2-956A-1D01A773F21A}']
  { getters & setters } 

    function get_ColumnCount: Int32;
    function get_EventData: DNSqlXml;
    function get_TriggerAction: DNTriggerAction;

  { methods } 

    function IsUpdatedColumn(columnOrdinal: Int32): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColumnCount: Int32 read get_ColumnCount;
    property EventData: DNSqlXml read get_EventData;
    property TriggerAction: DNTriggerAction read get_TriggerAction;
  end;

  TDNSqlTriggerContext = class(TDNGenericImport<DNSqlTriggerContextClass, DNSqlTriggerContext>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlFacetAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E465348B-C8B9-5F0A-95BF-45B83AE919E7}']
  { constructors } 

    {class} function init: DNSqlFacetAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlFacetAttribute')]
  DNSqlFacetAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CCF90767-1E51-33CD-9616-9C98FA0C1692}']
  { getters & setters } 

    function get_IsFixedLength: Boolean;
    procedure set_IsFixedLength(value: Boolean);
    function get_MaxSize: Int32;
    procedure set_MaxSize(value: Int32);
    function get_Precision: Int32;
    procedure set_Precision(value: Int32);
    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFixedLength: Boolean read get_IsFixedLength write set_IsFixedLength;
    property MaxSize: Int32 read get_MaxSize write set_MaxSize;
    property Precision: Int32 read get_Precision write set_Precision;
    property Scale: Int32 read get_Scale write set_Scale;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlFacetAttribute = class(TDNGenericImport<DNSqlFacetAttributeClass, DNSqlFacetAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlFunctionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{464EB31E-B1AD-59E4-BB87-C319E722AAE5}']
  { constructors } 

    {class} function init: DNSqlFunctionAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlFunctionAttribute')]
  DNSqlFunctionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D1590D04-441A-37E9-983D-71C132ED9F6B}']
  { getters & setters } 

    function get_IsDeterministic: Boolean;
    procedure set_IsDeterministic(value: Boolean);
    function get_DataAccess: DNDataAccessKind;
    procedure set_DataAccess(value: DNDataAccessKind);
    function get_SystemDataAccess: DNSystemDataAccessKind;
    procedure set_SystemDataAccess(value: DNSystemDataAccessKind);
    function get_IsPrecise: Boolean;
    procedure set_IsPrecise(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TableDefinition: string;
    procedure set_TableDefinition(value: string);
    function get_FillRowMethodName: string;
    procedure set_FillRowMethodName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDeterministic: Boolean read get_IsDeterministic write set_IsDeterministic;
    property DataAccess: DNDataAccessKind read get_DataAccess write set_DataAccess;
    property SystemDataAccess: DNSystemDataAccessKind read get_SystemDataAccess write set_SystemDataAccess;
    property IsPrecise: Boolean read get_IsPrecise write set_IsPrecise;
    property Name: string read get_Name write set_Name;
    property TableDefinition: string read get_TableDefinition write set_TableDefinition;
    property FillRowMethodName: string read get_FillRowMethodName write set_FillRowMethodName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlFunctionAttribute = class(TDNGenericImport<DNSqlFunctionAttributeClass, DNSqlFunctionAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlMethodAttributeClass = interface(DNSqlFunctionAttributeClass)
  ['{7DFDB86E-0B8B-5D09-9157-7FB0EDF3F8FB}']
  { constructors } 

    {class} function init: DNSqlMethodAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlMethodAttribute')]
  DNSqlMethodAttribute = interface(DNSqlFunctionAttribute)
  ['{A2B70C4B-E9BE-3A29-BA7E-5C74FFF1D43A}']
  { getters & setters } 

    function get_OnNullCall: Boolean;
    procedure set_OnNullCall(value: Boolean);
    function get_IsMutator: Boolean;
    procedure set_IsMutator(value: Boolean);
    function get_InvokeIfReceiverIsNull: Boolean;
    procedure set_InvokeIfReceiverIsNull(value: Boolean);
    function get_IsDeterministic: Boolean;
    procedure set_IsDeterministic(value: Boolean);
    function get_DataAccess: DNDataAccessKind;
    procedure set_DataAccess(value: DNDataAccessKind);
    function get_SystemDataAccess: DNSystemDataAccessKind;
    procedure set_SystemDataAccess(value: DNSystemDataAccessKind);
    function get_IsPrecise: Boolean;
    procedure set_IsPrecise(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TableDefinition: string;
    procedure set_TableDefinition(value: string);
    function get_FillRowMethodName: string;
    procedure set_FillRowMethodName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OnNullCall: Boolean read get_OnNullCall write set_OnNullCall;
    property IsMutator: Boolean read get_IsMutator write set_IsMutator;
    property InvokeIfReceiverIsNull: Boolean read get_InvokeIfReceiverIsNull write set_InvokeIfReceiverIsNull;
    property IsDeterministic: Boolean read get_IsDeterministic write set_IsDeterministic;
    property DataAccess: DNDataAccessKind read get_DataAccess write set_DataAccess;
    property SystemDataAccess: DNSystemDataAccessKind read get_SystemDataAccess write set_SystemDataAccess;
    property IsPrecise: Boolean read get_IsPrecise write set_IsPrecise;
    property Name: string read get_Name write set_Name;
    property TableDefinition: string read get_TableDefinition write set_TableDefinition;
    property FillRowMethodName: string read get_FillRowMethodName write set_FillRowMethodName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlMethodAttribute = class(TDNGenericImport<DNSqlMethodAttributeClass, DNSqlMethodAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlProcedureAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8844317-AF72-5839-81BE-C75FB24EDB4A}']
  { constructors } 

    {class} function init: DNSqlProcedureAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlProcedureAttribute')]
  DNSqlProcedureAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7A97767D-AB39-36B5-BA4F-4127F0830702}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlProcedureAttribute = class(TDNGenericImport<DNSqlProcedureAttributeClass, DNSqlProcedureAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlTriggerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{47FF2954-99E8-5FC1-B3E0-D2BCE1E23DB0}']
  { constructors } 

    {class} function init: DNSqlTriggerAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlTriggerAttribute')]
  DNSqlTriggerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5AE35DDC-D0F8-3AF2-8DFB-AA8AC7C77951}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Event: string;
    procedure set_Event(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Target: string read get_Target write set_Target;
    property Event: string read get_Event write set_Event;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlTriggerAttribute = class(TDNGenericImport<DNSqlTriggerAttributeClass, DNSqlTriggerAttribute>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlUserDefinedAggregateAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AECAE990-BFE4-58F9-8B11-573CE4ADED60}']
  { constructors } 

    {class} function init(format: DNFormat): DNSqlUserDefinedAggregateAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute')]
  DNSqlUserDefinedAggregateAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1434262E-8B0D-3AE6-81A0-B5BBC35D40B8}']
  { getters & setters } 

    function get_MaxByteSize: Int32;
    procedure set_MaxByteSize(value: Int32);
    function get_IsInvariantToDuplicates: Boolean;
    procedure set_IsInvariantToDuplicates(value: Boolean);
    function get_IsInvariantToNulls: Boolean;
    procedure set_IsInvariantToNulls(value: Boolean);
    function get_IsInvariantToOrder: Boolean;
    procedure set_IsInvariantToOrder(value: Boolean);
    function get_IsNullIfEmpty: Boolean;
    procedure set_IsNullIfEmpty(value: Boolean);
    function get_Format: DNFormat;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaxByteSize: Int32 read get_MaxByteSize write set_MaxByteSize;
    property IsInvariantToDuplicates: Boolean read get_IsInvariantToDuplicates write set_IsInvariantToDuplicates;
    property IsInvariantToNulls: Boolean read get_IsInvariantToNulls write set_IsInvariantToNulls;
    property IsInvariantToOrder: Boolean read get_IsInvariantToOrder write set_IsInvariantToOrder;
    property IsNullIfEmpty: Boolean read get_IsNullIfEmpty write set_IsNullIfEmpty;
    property Format: DNFormat read get_Format;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlUserDefinedAggregateAttribute = class(TDNGenericImport<DNSqlUserDefinedAggregateAttributeClass, DNSqlUserDefinedAggregateAttribute>)
  public const
   MaxByteSizeValue = 8000;
  end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNSqlUserDefinedTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{976C3546-1D24-53FE-9538-B7B834AD3105}']
  { constructors } 

    {class} function init(format: DNFormat): DNSqlUserDefinedTypeAttribute;

  end;

  [DNTypeName('Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute')]
  DNSqlUserDefinedTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5EDF6FF3-80BA-3BE8-B646-991927AFA757}']
  { getters & setters } 

    function get_MaxByteSize: Int32;
    procedure set_MaxByteSize(value: Int32);
    function get_IsFixedLength: Boolean;
    procedure set_IsFixedLength(value: Boolean);
    function get_IsByteOrdered: Boolean;
    procedure set_IsByteOrdered(value: Boolean);
    function get_Format: DNFormat;
    function get_ValidationMethodName: string;
    procedure set_ValidationMethodName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaxByteSize: Int32 read get_MaxByteSize write set_MaxByteSize;
    property IsFixedLength: Boolean read get_IsFixedLength write set_IsFixedLength;
    property IsByteOrdered: Boolean read get_IsByteOrdered write set_IsByteOrdered;
    property Format: DNFormat read get_Format;
    property ValidationMethodName: string read get_ValidationMethodName write set_ValidationMethodName;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlUserDefinedTypeAttribute = class(TDNGenericImport<DNSqlUserDefinedTypeAttributeClass, DNSqlUserDefinedTypeAttribute>) end;

  //-------------namespace: System.Data----------------
  DNDataSysDescriptionAttributeClass = interface(DNObjectClass)
  ['{5C08CCA1-4E56-596B-AF91-12164ABCA118}']
  { constructors } 

    {class} function init(description: string): DNDataSysDescriptionAttribute;

  end;

  [DNTypeName('System.Data.DataSysDescriptionAttribute')]
  DNDataSysDescriptionAttribute = interface(DNObject)
  ['{A30B6C19-6EBB-3A35-9EA3-C1DEF99F2E86}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataSysDescriptionAttribute = class(TDNGenericImport<DNDataSysDescriptionAttributeClass, DNDataSysDescriptionAttribute>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderSpecificTypePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C588291B-3EFF-57CF-BFD0-0FCAAD4E120A}']
  { constructors } 

    {class} function init(isProviderSpecificTypeProperty: Boolean): DNDbProviderSpecificTypePropertyAttribute;

  end;

  [DNTypeName('System.Data.Common.DbProviderSpecificTypePropertyAttribute')]
  DNDbProviderSpecificTypePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B024F5CD-4554-31D0-8FBF-4876AD26D74E}']
  { getters & setters } 

    function get_IsProviderSpecificTypeProperty: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsProviderSpecificTypeProperty: Boolean read get_IsProviderSpecificTypeProperty;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDbProviderSpecificTypePropertyAttribute = class(TDNGenericImport<DNDbProviderSpecificTypePropertyAttributeClass, DNDbProviderSpecificTypePropertyAttribute>) end;

  //-------------namespace: System.Data.Common----------------
  DNDBDataPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{9BF00A48-F299-50BA-9498-5186E5C17C70}']
  end;

  [DNTypeName('System.Data.Common.DBDataPermissionAttribute')]
  DNDBDataPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{A351BE8E-CE50-3768-B8CF-F8A32D69840C}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function ShouldSerializeConnectionString: Boolean;
    function ShouldSerializeKeyRestrictions: Boolean;
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDBDataPermissionAttribute = class(TDNGenericImport<DNDBDataPermissionAttributeClass, DNDBDataPermissionAttribute>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{C2475C12-F70B-5AA6-B5DE-E9F61E0AB0FE}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNOdbcPermissionAttribute;

  end;

  [DNTypeName('System.Data.Odbc.OdbcPermissionAttribute')]
  DNOdbcPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{2034B089-68FA-3C53-8361-F3E51773C4F0}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function ShouldSerializeConnectionString: Boolean;
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOdbcPermissionAttribute = class(TDNGenericImport<DNOdbcPermissionAttributeClass, DNOdbcPermissionAttribute>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{78D7DFE9-B896-5239-BE82-7959B99DE1E2}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNOleDbPermissionAttribute;

  end;

  [DNTypeName('System.Data.OleDb.OleDbPermissionAttribute')]
  DNOleDbPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{F0645373-794E-3DE7-9A90-4EE727727087}']
  { getters & setters } 

    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function ShouldSerializeConnectionString: Boolean;
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Provider: string read get_Provider write set_Provider;
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOleDbPermissionAttribute = class(TDNGenericImport<DNOleDbPermissionAttributeClass, DNOleDbPermissionAttribute>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientPermissionAttributeClass = interface(DNDBDataPermissionAttributeClass)
  ['{143373F6-EEE6-5A92-9153-388BEEB3034C}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNSqlClientPermissionAttribute;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientPermissionAttribute')]
  DNSqlClientPermissionAttribute = interface(DNDBDataPermissionAttribute)
  ['{EA46FFE4-6AC7-312C-BC36-92B31D31AC4C}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_KeyRestrictionBehavior: DNKeyRestrictionBehavior;
    procedure set_KeyRestrictionBehavior(value: DNKeyRestrictionBehavior);
    function get_KeyRestrictions: string;
    procedure set_KeyRestrictions(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function ShouldSerializeConnectionString: Boolean;
    function ShouldSerializeKeyRestrictions: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property KeyRestrictionBehavior: DNKeyRestrictionBehavior read get_KeyRestrictionBehavior write set_KeyRestrictionBehavior;
    property KeyRestrictions: string read get_KeyRestrictions write set_KeyRestrictions;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSqlClientPermissionAttribute = class(TDNGenericImport<DNSqlClientPermissionAttributeClass, DNSqlClientPermissionAttribute>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyColumnMappingCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{4D06D991-7B4A-51D1-BE5B-A8F9E71C7FB8}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlBulkCopyColumnMappingCollection')]
  DNSqlBulkCopyColumnMappingCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{E2CBD700-9031-344B-8934-6C37381F90FF}']
  { getters & setters } 

    function get_Item(index: Int32): DNSqlBulkCopyColumnMapping;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNSqlBulkCopyColumnMapping): Boolean;
    procedure CopyTo(&array: TArray<DNSqlBulkCopyColumnMapping>; index: Int32);
    function IndexOf(value: DNSqlBulkCopyColumnMapping): Int32;
    function Add(bulkCopyColumnMapping: DNSqlBulkCopyColumnMapping): DNSqlBulkCopyColumnMapping; overload;
    function Add(sourceColumn: string; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    function Add(sourceColumnIndex: Int32; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    function Add(sourceColumn: string; destinationColumnIndex: Int32): DNSqlBulkCopyColumnMapping; overload;
    function Add(sourceColumnIndex: Int32; destinationColumnIndex: Int32): DNSqlBulkCopyColumnMapping; overload;
    procedure Clear;
    procedure Insert(index: Int32; value: DNSqlBulkCopyColumnMapping);
    procedure Remove(value: DNSqlBulkCopyColumnMapping);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSqlBulkCopyColumnMapping read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSqlBulkCopyColumnMappingCollection = class(TDNGenericImport<DNSqlBulkCopyColumnMappingCollectionClass, DNSqlBulkCopyColumnMappingCollection>) end;

  //-------------namespace: System.Data----------------
  DNPropertyCollectionClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{C85F27D1-0548-568C-B2DE-C2FA42369C7F}']
  { constructors } 

    {class} function init: DNPropertyCollection;

  end;

  [DNTypeName('System.Data.PropertyCollection')]
  DNPropertyCollection = interface(DDN.mscorlib.DNHashtable)
  ['{AFC091BB-C65A-3D7B-B411-9FE3C18EFA6A}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure Clear;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNPropertyCollection = class(TDNGenericImport<DNPropertyCollectionClass, DNPropertyCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnClass = interface(DNObjectClass)
  ['{AA653357-C952-55EF-A2AB-F65D2563C1D9}']
  { constructors } 

    {class} function init: DNDataColumn; overload;
    {class} function init(columnName: string): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType; expr: string): DNDataColumn; overload;
    {class} function init(columnName: string; dataType: DDN.mscorlib.DNType; expr: string; &type: DNMappingType): DNDataColumn; overload;

  end;

  [DNTypeName('System.Data.DataColumn')]
  DNDataColumn = interface(DNObject)
  ['{7AE16284-BC54-3D58-B276-B5B4D6D65157}']
  { getters & setters } 

    function get_AllowDBNull: Boolean;
    procedure set_AllowDBNull(value: Boolean);
    function get_AutoIncrement: Boolean;
    procedure set_AutoIncrement(value: Boolean);
    function get_AutoIncrementSeed: Int64;
    procedure set_AutoIncrementSeed(value: Int64);
    function get_AutoIncrementStep: Int64;
    procedure set_AutoIncrementStep(value: Int64);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ColumnName: string;
    procedure set_ColumnName(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_DataType: DDN.mscorlib.DNType;
    procedure set_DataType(value: DDN.mscorlib.DNType);
    function get_DateTimeMode: DNDataSetDateTime;
    procedure set_DateTimeMode(value: DNDataSetDateTime);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Ordinal: Int32;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Table: DNDataTable;
    function get_Unique: Boolean;
    procedure set_Unique(value: Boolean);
    function get_ColumnMapping: DNMappingType;
    procedure set_ColumnMapping(value: DNMappingType);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SetOrdinal(ordinal: Int32);
    function ToString: string;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowDBNull: Boolean read get_AllowDBNull write set_AllowDBNull;
    property AutoIncrement: Boolean read get_AutoIncrement write set_AutoIncrement;
    property AutoIncrementSeed: Int64 read get_AutoIncrementSeed write set_AutoIncrementSeed;
    property AutoIncrementStep: Int64 read get_AutoIncrementStep write set_AutoIncrementStep;
    property Caption: string read get_Caption write set_Caption;
    property ColumnName: string read get_ColumnName write set_ColumnName;
    property Prefix: string read get_Prefix write set_Prefix;
    property DataType: DDN.mscorlib.DNType read get_DataType write set_DataType;
    property DateTimeMode: DNDataSetDateTime read get_DateTimeMode write set_DateTimeMode;
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    property Expression: string read get_Expression write set_Expression;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property Namespace: string read get_Namespace write set_Namespace;
    property Ordinal: Int32 read get_Ordinal;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Table: DNDataTable read get_Table;
    property Unique: Boolean read get_Unique write set_Unique;
    property ColumnMapping: DNMappingType read get_ColumnMapping write set_ColumnMapping;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataColumn = class(TDNGenericImport<DNDataColumnClass, DNDataColumn>) end;

  //-------------namespace: System.Data----------------
  DNDataSetClass = interface(DNObjectClass)
  ['{5BB739BB-F730-568F-B238-22587AD46860}']
  { constructors } 

    {class} function init: DNDataSet; overload;
    {class} function init(dataSetName: string): DNDataSet; overload;

  { static methods } 

    {class} function GetDataSetSchema(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Data.DataSet')]
  DNDataSet = interface(DNObject)
  ['{6E3DF7A0-377F-3A21-BB7C-C4C37F17758D}']
  { getters & setters } 

    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_SchemaSerializationMode: DNSchemaSerializationMode;
    procedure set_SchemaSerializationMode(value: DNSchemaSerializationMode);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_DefaultViewManager: DNDataViewManager;
    function get_EnforceConstraints: Boolean;
    procedure set_EnforceConstraints(value: Boolean);
    function get_DataSetName: string;
    procedure set_DataSetName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_IsInitialized: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Relations: DNDataRelationCollection;
    function get_Tables: DNDataTableCollection;
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_MergeFailed(value: DNMergeFailedEventHandler);
    procedure remove_MergeFailed(value: DNMergeFailedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure AcceptChanges;
    procedure BeginInit;
    procedure EndInit;
    procedure Clear;
    function Clone: DNDataSet;
    function Copy: DNDataSet;
    function GetChanges: DNDataSet; overload;
    function GetChanges(rowStates: DNDataRowState): DNDataSet; overload;
    function GetXml: string;
    function GetXmlSchema: string;
    function HasChanges: Boolean; overload;
    function HasChanges(rowStates: DNDataRowState): Boolean; overload;
    procedure InferXmlSchema(reader: DDN.System.Xml.DNXmlReader; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(stream: DDN.mscorlib.DNStream; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(reader: DDN.mscorlib.DNTextReader; nsArray: TArray<string>); overload;
    procedure InferXmlSchema(fileName: string; nsArray: TArray<string>); overload;
    procedure ReadXmlSchema(reader: DDN.System.Xml.DNXmlReader); overload;
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    procedure ReadXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter; multipleTargetConverter: DDN.mscorlib.DNConverter<DDN.mscorlib.DNType, string>); overload;
    function ReadXml(reader: DDN.System.Xml.DNXmlReader): DNXmlReadMode; overload;
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    function ReadXml(reader: DDN.System.Xml.DNXmlReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(stream: DDN.mscorlib.DNStream; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(reader: DDN.mscorlib.DNTextReader; mode: DNXmlReadMode): DNXmlReadMode; overload;
    function ReadXml(fileName: string; mode: DNXmlReadMode): DNXmlReadMode; overload;
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter); overload;
    procedure WriteXml(fileName: string); overload;
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    procedure Merge(dataSet: DNDataSet); overload;
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean); overload;
    procedure Merge(dataSet: DNDataSet; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Merge(table: DNDataTable); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Merge(rows: TArray<DNDataRow>); overload;
    procedure Merge(rows: TArray<DNDataRow>; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure RejectChanges;
    procedure Reset;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler; tables: TArray<DNDataTable>); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<DNDataTable>); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; tables: TArray<string>); overload;
    function CreateDataReader: DNDataTableReader; overload;
    function CreateDataReader(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    property SchemaSerializationMode: DNSchemaSerializationMode read get_SchemaSerializationMode write set_SchemaSerializationMode;
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property DefaultViewManager: DNDataViewManager read get_DefaultViewManager;
    property EnforceConstraints: Boolean read get_EnforceConstraints write set_EnforceConstraints;
    property DataSetName: string read get_DataSetName write set_DataSetName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Prefix: string read get_Prefix write set_Prefix;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property HasErrors: Boolean read get_HasErrors;
    property IsInitialized: Boolean read get_IsInitialized;
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Relations: DNDataRelationCollection read get_Relations;
    property Tables: DNDataTableCollection read get_Tables;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataSet = class(TDNGenericImport<DNDataSetClass, DNDataSet>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClass = interface(DNObjectClass)
  ['{00EA467F-E9AF-5824-8F4E-345226A80AD5}']
  { constructors } 

    {class} function init: DNDataTable; overload;
    {class} function init(tableName: string): DNDataTable; overload;
    {class} function init(tableName: string; tableNamespace: string): DNDataTable; overload;

  { static methods } 

    {class} function GetDataTableSchema(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlSchemaComplexType;

  end;

  [DNTypeName('System.Data.DataTable')]
  DNDataTable = interface(DNObject)
  ['{56839C77-582D-3A29-AEB5-7011A8335593}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_IsInitialized: Boolean;
    function get_RemotingFormat: DNSerializationFormat;
    procedure set_RemotingFormat(value: DNSerializationFormat);
    function get_ChildRelations: DNDataRelationCollection;
    function get_Columns: DNDataColumnCollection;
    function get_Constraints: DNConstraintCollection;
    function get_DataSet: DNDataSet;
    function get_DefaultView: DNDataView;
    function get_DisplayExpression: string;
    procedure set_DisplayExpression(value: string);
    function get_ExtendedProperties: DNPropertyCollection;
    function get_HasErrors: Boolean;
    function get_Locale: DDN.mscorlib.DNCultureInfo;
    procedure set_Locale(value: DDN.mscorlib.DNCultureInfo);
    function get_MinimumCapacity: Int32;
    procedure set_MinimumCapacity(value: Int32);
    function get_ParentRelations: DNDataRelationCollection;
    function get_PrimaryKey: TArray<DNDataColumn>;
    procedure set_PrimaryKey(value: TArray<DNDataColumn>);
    function get_Rows: DNDataRowCollection;
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanging(value: DNDataColumnChangeEventHandler);
    procedure add_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure remove_ColumnChanged(value: DNDataColumnChangeEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_RowChanged(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanged(value: DNDataRowChangeEventHandler);
    procedure add_RowChanging(value: DNDataRowChangeEventHandler);
    procedure remove_RowChanging(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleting(value: DNDataRowChangeEventHandler);
    procedure add_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure remove_RowDeleted(value: DNDataRowChangeEventHandler);
    procedure add_TableClearing(value: DNDataTableClearEventHandler);
    procedure remove_TableClearing(value: DNDataTableClearEventHandler);
    procedure add_TableCleared(value: DNDataTableClearEventHandler);
    procedure remove_TableCleared(value: DNDataTableClearEventHandler);
    procedure add_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure remove_TableNewRow(value: DNDataTableNewRowEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure BeginInit;
    procedure EndInit;
    procedure AcceptChanges;
    function Clone: DNDataTable;
    function Copy: DNDataTable;
    procedure Clear;
    function Compute(expression: string; filter: string): DDN.mscorlib.DNObject;
    function GetChanges: DNDataTable; overload;
    function GetChanges(rowStates: DNDataRowState): DNDataTable; overload;
    function GetErrors: TArray<DNDataRow>;
    procedure ImportRow(row: DNDataRow);
    function NewRow: DNDataRow;
    procedure RejectChanges;
    procedure Reset;
    function Select: TArray<DNDataRow>; overload;
    function Select(filterExpression: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string): TArray<DNDataRow>; overload;
    function Select(filterExpression: string; sort: string; recordStates: DNDataViewRowState): TArray<DNDataRow>; overload;
    function ToString: string;
    procedure BeginLoadData;
    procedure EndLoadData;
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; fAcceptChanges: Boolean): DNDataRow; overload;
    function LoadDataRow(values: TArray<DDN.mscorlib.DNObject>; loadOption: DNLoadOption): DNDataRow; overload;
    procedure Merge(table: DNDataTable); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean); overload;
    procedure Merge(table: DNDataTable; preserveChanges: Boolean; missingSchemaAction: DNMissingSchemaAction); overload;
    procedure Load(reader: DNIDataReader); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption); overload;
    procedure Load(reader: DNIDataReader; loadOption: DNLoadOption; errorHandler: DNFillErrorEventHandler); overload;
    function CreateDataReader: DNDataTableReader;
    procedure WriteXml(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteXml(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string); overload;
    procedure WriteXml(fileName: string; writeHierarchy: Boolean); overload;
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode); overload;
    procedure WriteXml(stream: DDN.mscorlib.DNStream; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDN.mscorlib.DNTextWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode); overload;
    procedure WriteXml(writer: DDN.System.Xml.DNXmlWriter; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode); overload;
    procedure WriteXml(fileName: string; mode: DNXmlWriteMode; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteXmlSchema(stream: DDN.mscorlib.DNStream; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteXmlSchema(writer: DDN.mscorlib.DNTextWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter); overload;
    procedure WriteXmlSchema(writer: DDN.System.Xml.DNXmlWriter; writeHierarchy: Boolean); overload;
    procedure WriteXmlSchema(fileName: string); overload;
    procedure WriteXmlSchema(fileName: string; writeHierarchy: Boolean); overload;
    function ReadXml(stream: DDN.mscorlib.DNStream): DNXmlReadMode; overload;
    function ReadXml(reader: DDN.mscorlib.DNTextReader): DNXmlReadMode; overload;
    function ReadXml(fileName: string): DNXmlReadMode; overload;
    function ReadXml(reader: DDN.System.Xml.DNXmlReader): DNXmlReadMode; overload;
    procedure ReadXmlSchema(stream: DDN.mscorlib.DNStream); overload;
    procedure ReadXmlSchema(reader: DDN.mscorlib.DNTextReader); overload;
    procedure ReadXmlSchema(fileName: string); overload;
    procedure ReadXmlSchema(reader: DDN.System.Xml.DNXmlReader); overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property IsInitialized: Boolean read get_IsInitialized;
    property RemotingFormat: DNSerializationFormat read get_RemotingFormat write set_RemotingFormat;
    property ChildRelations: DNDataRelationCollection read get_ChildRelations;
    property Columns: DNDataColumnCollection read get_Columns;
    property Constraints: DNConstraintCollection read get_Constraints;
    property DataSet: DNDataSet read get_DataSet;
    property DefaultView: DNDataView read get_DefaultView;
    property DisplayExpression: string read get_DisplayExpression write set_DisplayExpression;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
    property HasErrors: Boolean read get_HasErrors;
    property Locale: DDN.mscorlib.DNCultureInfo read get_Locale write set_Locale;
    property MinimumCapacity: Int32 read get_MinimumCapacity write set_MinimumCapacity;
    property ParentRelations: DNDataRelationCollection read get_ParentRelations;
    property PrimaryKey: TArray<DNDataColumn> read get_PrimaryKey write set_PrimaryKey;
    property Rows: DNDataRowCollection read get_Rows;
    property TableName: string read get_TableName write set_TableName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Prefix: string read get_Prefix write set_Prefix;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: System.Data----------------
  DNDataViewClass = interface(DNObjectClass)
  ['{6293E4A1-BAC8-5136-ACE2-021771D79AE2}']
  { constructors } 

    {class} function init: DNDataView; overload;
    {class} function init(table: DNDataTable): DNDataView; overload;
    {class} function init(table: DNDataTable; RowFilter: string; Sort: string; RowState: DNDataViewRowState): DNDataView; overload;

  end;

  [DNTypeName('System.Data.DataView')]
  DNDataView = interface(DNObject)
  ['{954DCFBB-B6BF-3BAA-B683-D6ECDB9E8FD8}']
  { getters & setters } 

    function get_AllowDelete: Boolean;
    procedure set_AllowDelete(value: Boolean);
    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_Count: Int32;
    function get_DataViewManager: DNDataViewManager;
    function get_IsInitialized: Boolean;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);
    function get_Table: DNDataTable;
    procedure set_Table(value: DNDataTable);
    function get_Item(recordIndex: Int32): DNDataRowView;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    procedure Delete(index: Int32);
    function Find(key: DDN.mscorlib.DNObject): Int32; overload;
    function Find(key: TArray<DDN.mscorlib.DNObject>): Int32; overload;
    function FindRows(key: TArray<DDN.mscorlib.DNObject>): TArray<DNDataRowView>; overload;
    function ToTable(distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    function Equals(view: DNDataView): Boolean; overload;
    function AddNew: DNDataRowView;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function FindRows(key: DDN.mscorlib.DNObject): TArray<DNDataRowView>; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function ToTable: DNDataTable; overload;
    function ToTable(tableName: string): DNDataTable; overload;
    function ToTable(tableName: string; distinct: Boolean; columnNames: TArray<string>): DNDataTable; overload;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowDelete: Boolean read get_AllowDelete write set_AllowDelete;
    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    property Count: Int32 read get_Count;
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    property IsInitialized: Boolean read get_IsInitialized;
    property RowFilter: string read get_RowFilter write set_RowFilter;
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    property Sort: string read get_Sort write set_Sort;
    property Table: DNDataTable read get_Table write set_Table;
    property Item[recordIndex: Int32]: DNDataRowView read get_Item; default;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataView = class(TDNGenericImport<DNDataViewClass, DNDataView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewManagerClass = interface(DNObjectClass)
  ['{FEFEA83B-9600-5D1E-8BF2-8A841409B4EF}']
  { constructors } 

    {class} function init: DNDataViewManager; overload;
    {class} function init(dataSet: DNDataSet): DNDataViewManager; overload;

  end;

  [DNTypeName('System.Data.DataViewManager')]
  DNDataViewManager = interface(DNObject)
  ['{720CC903-7243-397C-854C-1F8900F3F337}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    procedure set_DataSet(value: DNDataSet);
    function get_DataViewSettings: DNDataViewSettingCollection;
    function get_DataViewSettingCollectionString: string;
    procedure set_DataViewSettingCollectionString(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure remove_ListChanged(value: DDN.System.DNListChangedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateDataView(table: DNDataTable): DNDataView;
    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataSet: DNDataSet read get_DataSet write set_DataSet;
    property DataViewSettings: DNDataViewSettingCollection read get_DataViewSettings;
    property DataViewSettingCollectionString: string read get_DataViewSettingCollectionString write set_DataViewSettingCollectionString;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNDataViewManager = class(TDNGenericImport<DNDataViewManagerClass, DNDataViewManager>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB6C5C4D-46F4-593C-8010-A3BAF6540872}']
  end;

  [DNTypeName('System.Data.Common.DbColumn')]
  DNDbColumn = interface(DDN.mscorlib.DNObject)
  ['{4742526D-9BC9-3BF6-9346-46EBB65DD1FF}']
  { getters & setters } 

    function get_AllowDBNull: DDN.mscorlib.DNNullable<Boolean>;
    function get_BaseCatalogName: string;
    function get_BaseColumnName: string;
    function get_BaseSchemaName: string;
    function get_BaseServerName: string;
    function get_BaseTableName: string;
    function get_ColumnName: string;
    function get_ColumnOrdinal: DDN.mscorlib.DNNullable<Int32>;
    function get_ColumnSize: DDN.mscorlib.DNNullable<Int32>;
    function get_IsAliased: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsAutoIncrement: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsExpression: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsHidden: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsIdentity: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsKey: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsLong: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsReadOnly: DDN.mscorlib.DNNullable<Boolean>;
    function get_IsUnique: DDN.mscorlib.DNNullable<Boolean>;
    function get_NumericPrecision: DDN.mscorlib.DNNullable<Int32>;
    function get_NumericScale: DDN.mscorlib.DNNullable<Int32>;
    function get_UdtAssemblyQualifiedName: string;
    function get_DataType: DDN.mscorlib.DNType;
    function get_DataTypeName: string;
    function get_Item(&property: string): DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowDBNull: DDN.mscorlib.DNNullable<Boolean> read get_AllowDBNull;
    property BaseCatalogName: string read get_BaseCatalogName;
    property BaseColumnName: string read get_BaseColumnName;
    property BaseSchemaName: string read get_BaseSchemaName;
    property BaseServerName: string read get_BaseServerName;
    property BaseTableName: string read get_BaseTableName;
    property ColumnName: string read get_ColumnName;
    property ColumnOrdinal: DDN.mscorlib.DNNullable<Int32> read get_ColumnOrdinal;
    property ColumnSize: DDN.mscorlib.DNNullable<Int32> read get_ColumnSize;
    property IsAliased: DDN.mscorlib.DNNullable<Boolean> read get_IsAliased;
    property IsAutoIncrement: DDN.mscorlib.DNNullable<Boolean> read get_IsAutoIncrement;
    property IsExpression: DDN.mscorlib.DNNullable<Boolean> read get_IsExpression;
    property IsHidden: DDN.mscorlib.DNNullable<Boolean> read get_IsHidden;
    property IsIdentity: DDN.mscorlib.DNNullable<Boolean> read get_IsIdentity;
    property IsKey: DDN.mscorlib.DNNullable<Boolean> read get_IsKey;
    property IsLong: DDN.mscorlib.DNNullable<Boolean> read get_IsLong;
    property IsReadOnly: DDN.mscorlib.DNNullable<Boolean> read get_IsReadOnly;
    property IsUnique: DDN.mscorlib.DNNullable<Boolean> read get_IsUnique;
    property NumericPrecision: DDN.mscorlib.DNNullable<Int32> read get_NumericPrecision;
    property NumericScale: DDN.mscorlib.DNNullable<Int32> read get_NumericScale;
    property UdtAssemblyQualifiedName: string read get_UdtAssemblyQualifiedName;
    property DataType: DDN.mscorlib.DNType read get_DataType;
    property DataTypeName: string read get_DataTypeName;
    property Item[&property: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbColumn = class(TDNGenericImport<DNDbColumnClass, DNDbColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionStringBuilderClass = interface(DNObjectClass)
  ['{CF7AA95D-C35E-5CD4-93A5-97C16324E230}']
  { constructors } 

    {class} function init: DNDbConnectionStringBuilder; overload;
    {class} function init(useOdbcRules: Boolean): DNDbConnectionStringBuilder; overload;

  { static methods } 

    {class} procedure AppendKeyValuePair(builder: DDN.mscorlib.DNStringBuilder; keyword: string; value: string); overload;
    {class} procedure AppendKeyValuePair(builder: DDN.mscorlib.DNStringBuilder; keyword: string; value: string; useOdbcRules: Boolean); overload;

  end;

  [DNTypeName('System.Data.Common.DbConnectionStringBuilder')]
  DNDbConnectionStringBuilder = interface(DDN.mscorlib.DNIDictionary)
  ['{4C0C21B0-F263-3AED-A5DF-33B6E6F99D18}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    procedure Clear;
    function ContainsKey(keyword: string): Boolean;
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function Remove(keyword: string): Boolean;
    function ShouldSerialize(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNDbConnectionStringBuilder = class(TDNGenericImport<DNDbConnectionStringBuilderClass, DNDbConnectionStringBuilder>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{0D832B2A-C83C-5AB8-9910-C850899F9179}']
  { constructors } 

    {class} function init: DNOdbcConnectionStringBuilder; overload;
    {class} function init(connectionString: string): DNOdbcConnectionStringBuilder; overload;

  end;

  [DNTypeName('System.Data.Odbc.OdbcConnectionStringBuilder')]
  DNOdbcConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{CB08F5D9-6D9E-352C-B3B2-24A4617FD060}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_Driver: string;
    procedure set_Driver(value: string);
    function get_Dsn: string;
    procedure set_Dsn(value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Clear;
    function ContainsKey(keyword: string): Boolean;
    function Remove(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function ShouldSerialize(keyword: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Driver: string read get_Driver write set_Driver;
    property Dsn: string read get_Dsn write set_Dsn;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNOdbcConnectionStringBuilder = class(TDNGenericImport<DNOdbcConnectionStringBuilderClass, DNOdbcConnectionStringBuilder>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{B62EF529-B460-5B73-A68A-EA6379F66658}']
  { constructors } 

    {class} function init: DNOleDbConnectionStringBuilder; overload;
    {class} function init(connectionString: string): DNOleDbConnectionStringBuilder; overload;

  end;

  [DNTypeName('System.Data.OleDb.OleDbConnectionStringBuilder')]
  DNOleDbConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{BD5C2F6C-8E32-36AC-A89B-A5C8C3342E21}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_OleDbServices: Int32;
    procedure set_OleDbServices(value: Int32);
    function get_PersistSecurityInfo: Boolean;
    procedure set_PersistSecurityInfo(value: Boolean);
    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Clear;
    function ContainsKey(keyword: string): Boolean;
    function Remove(keyword: string): Boolean;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function ShouldSerialize(keyword: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property DataSource: string read get_DataSource write set_DataSource;
    property FileName: string read get_FileName write set_FileName;
    property OleDbServices: Int32 read get_OleDbServices write set_OleDbServices;
    property PersistSecurityInfo: Boolean read get_PersistSecurityInfo write set_PersistSecurityInfo;
    property Provider: string read get_Provider write set_Provider;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNOleDbConnectionStringBuilder = class(TDNGenericImport<DNOleDbConnectionStringBuilderClass, DNOleDbConnectionStringBuilder>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlConnectionStringBuilderClass = interface(DNDbConnectionStringBuilderClass)
  ['{3F34A947-4EC9-5337-A384-5E33860966F9}']
  { constructors } 

    {class} function init: DNSqlConnectionStringBuilder; overload;
    {class} function init(connectionString: string): DNSqlConnectionStringBuilder; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlConnectionStringBuilder')]
  DNSqlConnectionStringBuilder = interface(DNDbConnectionStringBuilder)
  ['{3A386B26-6DF0-3BDF-801E-6580EFABEC73}']
  { getters & setters } 

    function get_Item(keyword: string): DDN.mscorlib.DNObject;
    procedure set_Item(keyword: string; value: DDN.mscorlib.DNObject);
    function get_ApplicationIntent: DNApplicationIntent;
    procedure set_ApplicationIntent(value: DNApplicationIntent);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_AsynchronousProcessing: Boolean;
    procedure set_AsynchronousProcessing(value: Boolean);
    function get_AttachDBFilename: string;
    procedure set_AttachDBFilename(value: string);
    function get_PoolBlockingPeriod: DNPoolBlockingPeriod;
    procedure set_PoolBlockingPeriod(value: DNPoolBlockingPeriod);
    function get_ConnectionReset: Boolean;
    procedure set_ConnectionReset(value: Boolean);
    function get_ContextConnection: Boolean;
    procedure set_ContextConnection(value: Boolean);
    function get_ConnectTimeout: Int32;
    procedure set_ConnectTimeout(value: Int32);
    function get_CurrentLanguage: string;
    procedure set_CurrentLanguage(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_Encrypt: Boolean;
    procedure set_Encrypt(value: Boolean);
    function get_ColumnEncryptionSetting: DNSqlConnectionColumnEncryptionSetting;
    procedure set_ColumnEncryptionSetting(value: DNSqlConnectionColumnEncryptionSetting);
    function get_EnclaveAttestationUrl: string;
    procedure set_EnclaveAttestationUrl(value: string);
    function get_TrustServerCertificate: Boolean;
    procedure set_TrustServerCertificate(value: Boolean);
    function get_Enlist: Boolean;
    procedure set_Enlist(value: Boolean);
    function get_FailoverPartner: string;
    procedure set_FailoverPartner(value: string);
    function get_InitialCatalog: string;
    procedure set_InitialCatalog(value: string);
    function get_IntegratedSecurity: Boolean;
    procedure set_IntegratedSecurity(value: Boolean);
    function get_Authentication: DNSqlAuthenticationMethod;
    procedure set_Authentication(value: DNSqlAuthenticationMethod);
    function get_LoadBalanceTimeout: Int32;
    procedure set_LoadBalanceTimeout(value: Int32);
    function get_MaxPoolSize: Int32;
    procedure set_MaxPoolSize(value: Int32);
    function get_ConnectRetryCount: Int32;
    procedure set_ConnectRetryCount(value: Int32);
    function get_ConnectRetryInterval: Int32;
    procedure set_ConnectRetryInterval(value: Int32);
    function get_MinPoolSize: Int32;
    procedure set_MinPoolSize(value: Int32);
    function get_MultipleActiveResultSets: Boolean;
    procedure set_MultipleActiveResultSets(value: Boolean);
    function get_MultiSubnetFailover: Boolean;
    procedure set_MultiSubnetFailover(value: Boolean);
    function get_TransparentNetworkIPResolution: Boolean;
    procedure set_TransparentNetworkIPResolution(value: Boolean);
    function get_NetworkLibrary: string;
    procedure set_NetworkLibrary(value: string);
    function get_PacketSize: Int32;
    procedure set_PacketSize(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_PersistSecurityInfo: Boolean;
    procedure set_PersistSecurityInfo(value: Boolean);
    function get_Pooling: Boolean;
    procedure set_Pooling(value: Boolean);
    function get_Replication: Boolean;
    procedure set_Replication(value: Boolean);
    function get_TransactionBinding: string;
    procedure set_TransactionBinding(value: string);
    function get_TypeSystemVersion: string;
    procedure set_TypeSystemVersion(value: string);
    function get_UserID: string;
    procedure set_UserID(value: string);
    function get_UserInstance: Boolean;
    procedure set_UserInstance(value: Boolean);
    function get_WorkstationID: string;
    procedure set_WorkstationID(value: string);
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_BrowsableConnectionString: Boolean;
    procedure set_BrowsableConnectionString(value: Boolean);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure Clear;
    function TryGetValue(keyword: string; out value: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(keyword: string): Boolean;
    function Remove(keyword: string): Boolean;
    function ShouldSerialize(keyword: string): Boolean;
    procedure Add(keyword: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function EquivalentTo(connectionStringBuilder: DNDbConnectionStringBuilder): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[keyword: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property ApplicationIntent: DNApplicationIntent read get_ApplicationIntent write set_ApplicationIntent;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property AsynchronousProcessing: Boolean read get_AsynchronousProcessing write set_AsynchronousProcessing;
    property AttachDBFilename: string read get_AttachDBFilename write set_AttachDBFilename;
    property PoolBlockingPeriod: DNPoolBlockingPeriod read get_PoolBlockingPeriod write set_PoolBlockingPeriod;
    property ConnectionReset: Boolean read get_ConnectionReset write set_ConnectionReset;
    property ContextConnection: Boolean read get_ContextConnection write set_ContextConnection;
    property ConnectTimeout: Int32 read get_ConnectTimeout write set_ConnectTimeout;
    property CurrentLanguage: string read get_CurrentLanguage write set_CurrentLanguage;
    property DataSource: string read get_DataSource write set_DataSource;
    property Encrypt: Boolean read get_Encrypt write set_Encrypt;
    property ColumnEncryptionSetting: DNSqlConnectionColumnEncryptionSetting read get_ColumnEncryptionSetting write set_ColumnEncryptionSetting;
    property EnclaveAttestationUrl: string read get_EnclaveAttestationUrl write set_EnclaveAttestationUrl;
    property TrustServerCertificate: Boolean read get_TrustServerCertificate write set_TrustServerCertificate;
    property Enlist: Boolean read get_Enlist write set_Enlist;
    property FailoverPartner: string read get_FailoverPartner write set_FailoverPartner;
    property InitialCatalog: string read get_InitialCatalog write set_InitialCatalog;
    property IntegratedSecurity: Boolean read get_IntegratedSecurity write set_IntegratedSecurity;
    property Authentication: DNSqlAuthenticationMethod read get_Authentication write set_Authentication;
    property LoadBalanceTimeout: Int32 read get_LoadBalanceTimeout write set_LoadBalanceTimeout;
    property MaxPoolSize: Int32 read get_MaxPoolSize write set_MaxPoolSize;
    property ConnectRetryCount: Int32 read get_ConnectRetryCount write set_ConnectRetryCount;
    property ConnectRetryInterval: Int32 read get_ConnectRetryInterval write set_ConnectRetryInterval;
    property MinPoolSize: Int32 read get_MinPoolSize write set_MinPoolSize;
    property MultipleActiveResultSets: Boolean read get_MultipleActiveResultSets write set_MultipleActiveResultSets;
    property MultiSubnetFailover: Boolean read get_MultiSubnetFailover write set_MultiSubnetFailover;
    property TransparentNetworkIPResolution: Boolean read get_TransparentNetworkIPResolution write set_TransparentNetworkIPResolution;
    property NetworkLibrary: string read get_NetworkLibrary write set_NetworkLibrary;
    property PacketSize: Int32 read get_PacketSize write set_PacketSize;
    property Password: string read get_Password write set_Password;
    property PersistSecurityInfo: Boolean read get_PersistSecurityInfo write set_PersistSecurityInfo;
    property Pooling: Boolean read get_Pooling write set_Pooling;
    property Replication: Boolean read get_Replication write set_Replication;
    property TransactionBinding: string read get_TransactionBinding write set_TransactionBinding;
    property TypeSystemVersion: string read get_TypeSystemVersion write set_TypeSystemVersion;
    property UserID: string read get_UserID write set_UserID;
    property UserInstance: Boolean read get_UserInstance write set_UserInstance;
    property WorkstationID: string read get_WorkstationID write set_WorkstationID;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property BrowsableConnectionString: Boolean read get_BrowsableConnectionString write set_BrowsableConnectionString;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNSqlConnectionStringBuilder = class(TDNGenericImport<DNSqlConnectionStringBuilderClass, DNSqlConnectionStringBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E06702B-7C2A-5BF2-A0AB-5FEA314EFE7F}']
  { static methods } 

    {class} function GetColumnSchema(reader: DNDbDataReader): DDN.mscorlib.DNReadOnlyCollection<DNDbColumn>;
    {class} function CanGetColumnSchema(reader: DNDbDataReader): Boolean;

  end;

  [DNTypeName('System.Data.Common.DbDataReaderExtensions')]
  DNDbDataReaderExtensions = interface(DDN.mscorlib.DNObject)
  ['{B6AEE8F8-1EE1-308F-8092-1AACE315F09B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbDataReaderExtensions = class(TDNGenericImport<DNDbDataReaderExtensionsClass, DNDbDataReaderExtensions>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataRecordClass = interface(DNObjectClass)
  ['{D4C8BE44-8B2C-5326-811C-F203B591EB6D}']
  end;

  [DNTypeName('System.Data.Common.DbDataRecord')]
  DNDbDataRecord = interface(DDN.System.DNICustomTypeDescriptor)
  ['{7529B2E8-64FA-3F43-9323-335FC77F4E2B}']
  { getters & setters } 

    function get_FieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    function GetData(i: Int32): DNIDataReader;
    function GetBoolean(i: Int32): Boolean;
    function GetByte(i: Int32): Byte;
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChar(i: Int32): Char;
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetDataTypeName(i: Int32): string;
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(i: Int32): Double;
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    function GetFloat(i: Int32): Single;
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetName(i: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetString(i: Int32): string;
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function IsDBNull(i: Int32): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldCount: Int32 read get_FieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbDataRecord = class(TDNGenericImport<DNDbDataRecordClass, DNDbDataRecord>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataSourceEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BDAF0E7-1148-5DC4-A723-D0739D500B10}']
  end;

  [DNTypeName('System.Data.Common.DbDataSourceEnumerator')]
  DNDbDataSourceEnumerator = interface(DDN.mscorlib.DNObject)
  ['{9767A78B-E5A6-3DA2-B87B-445904AC0CBF}']
  { methods } 

    function GetDataSources: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbDataSourceEnumerator = class(TDNGenericImport<DNDbDataSourceEnumeratorClass, DNDbDataSourceEnumerator>) end;

  //-------------namespace: System.Data.Sql----------------
  DNSqlDataSourceEnumeratorClass = interface(DNDbDataSourceEnumeratorClass)
  ['{142DDE02-3AB9-53A3-82B2-573326157A8F}']
  { static getter & setter } 

    {class} function get_Instance: DNSqlDataSourceEnumerator;

  { static propertys } 

    {class} property Instance: DNSqlDataSourceEnumerator read get_Instance;
  end;

  [DNTypeName('System.Data.Sql.SqlDataSourceEnumerator')]
  DNSqlDataSourceEnumerator = interface(DNDbDataSourceEnumerator)
  ['{0B789350-8957-30C4-B768-17F9F650DC54}']
  { methods } 

    function GetDataSources: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlDataSourceEnumerator = class(TDNGenericImport<DNSqlDataSourceEnumeratorClass, DNSqlDataSourceEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbEnumeratorClass = interface(DNObjectClass)
  ['{5B316C41-9FB5-58AF-916B-A357E6911750}']
  { constructors } 

    {class} function init(reader: DNIDataReader): DNDbEnumerator; overload;
    {class} function init(reader: DNIDataReader; closeReader: Boolean): DNDbEnumerator; overload;
    {class} function init(reader: DNDbDataReader): DNDbEnumerator; overload;
    {class} function init(reader: DNDbDataReader; closeReader: Boolean): DNDbEnumerator; overload;

  end;

  [DNTypeName('System.Data.Common.DbEnumerator')]
  DNDbEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{E4F30E4F-D3B2-3FF8-95A4-0207BB25EA7B}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNObject;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DDN.mscorlib.DNObject read get_Current;
  end;

  TDNDbEnumerator = class(TDNGenericImport<DNDbEnumeratorClass, DNDbEnumerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6FE4D1F-2EBB-54C8-897F-A87CB0E4B8F3}']
  { static fields getter & setter } 

   function __fakeFieldGet_MetaDataCollections: string;
   function __fakeFieldGet_DataSourceInformation: string;
   function __fakeFieldGet_DataTypes: string;
   function __fakeFieldGet_Restrictions: string;
   function __fakeFieldGet_ReservedWords: string;

  { static fields } 

    {class} property MetaDataCollections: string read __fakeFieldGet_MetaDataCollections;
    {class} property DataSourceInformation: string read __fakeFieldGet_DataSourceInformation;
    {class} property DataTypes: string read __fakeFieldGet_DataTypes;
    {class} property Restrictions: string read __fakeFieldGet_Restrictions;
    {class} property ReservedWords: string read __fakeFieldGet_ReservedWords;

  end;

  [DNTypeName('System.Data.Common.DbMetaDataCollectionNames')]
  DNDbMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{CE5E7406-07E8-3A8A-B04E-4043BD4AA10D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbMetaDataCollectionNames = class(TDNGenericImport<DNDbMetaDataCollectionNamesClass, DNDbMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3ECE213-79F4-5D35-8F22-73F920EC4B0F}']
  { static fields getter & setter } 

   function __fakeFieldGet_CollectionName: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_CompositeIdentifierSeparatorPattern: string;
   function __fakeFieldGet_CreateFormat: string;
   function __fakeFieldGet_CreateParameters: string;
   function __fakeFieldGet_DataSourceProductName: string;
   function __fakeFieldGet_DataSourceProductVersion: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_DataSourceProductVersionNormalized: string;
   function __fakeFieldGet_GroupByBehavior: string;
   function __fakeFieldGet_IdentifierCase: string;
   function __fakeFieldGet_IdentifierPattern: string;
   function __fakeFieldGet_IsAutoIncrementable: string;
   function __fakeFieldGet_IsBestMatch: string;
   function __fakeFieldGet_IsCaseSensitive: string;
   function __fakeFieldGet_IsConcurrencyType: string;
   function __fakeFieldGet_IsFixedLength: string;
   function __fakeFieldGet_IsFixedPrecisionScale: string;
   function __fakeFieldGet_IsLiteralSupported: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_IsNullable: string;
   function __fakeFieldGet_IsSearchable: string;
   function __fakeFieldGet_IsSearchableWithLike: string;
   function __fakeFieldGet_IsUnsigned: string;
   function __fakeFieldGet_LiteralPrefix: string;
   function __fakeFieldGet_LiteralSuffix: string;
   function __fakeFieldGet_MaximumScale: string;
   function __fakeFieldGet_MinimumScale: string;
   function __fakeFieldGet_NumberOfIdentifierParts: string;
   function __fakeFieldGet_NumberOfRestrictions: string;
   function __fakeFieldGet_OrderByColumnsInSelect: string;
   function __fakeFieldGet_ParameterMarkerFormat: string;
   function __fakeFieldGet_ParameterMarkerPattern: string;
   function __fakeFieldGet_ParameterNameMaxLength: string;
   function __fakeFieldGet_ParameterNamePattern: string;
   function __fakeFieldGet_ProviderDbType: string;
   function __fakeFieldGet_QuotedIdentifierCase: string;
   function __fakeFieldGet_QuotedIdentifierPattern: string;
   function __fakeFieldGet_ReservedWord: string;
   function __fakeFieldGet_StatementSeparatorPattern: string;
   function __fakeFieldGet_StringLiteralPattern: string;
   function __fakeFieldGet_SupportedJoinOperators: string;
   function __fakeFieldGet_TypeName: string;

  { static fields } 

    {class} property CollectionName: string read __fakeFieldGet_CollectionName;
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    {class} property CompositeIdentifierSeparatorPattern: string read __fakeFieldGet_CompositeIdentifierSeparatorPattern;
    {class} property CreateFormat: string read __fakeFieldGet_CreateFormat;
    {class} property CreateParameters: string read __fakeFieldGet_CreateParameters;
    {class} property DataSourceProductName: string read __fakeFieldGet_DataSourceProductName;
    {class} property DataSourceProductVersion: string read __fakeFieldGet_DataSourceProductVersion;
    {class} property DataType: string read __fakeFieldGet_DataType;
    {class} property DataSourceProductVersionNormalized: string read __fakeFieldGet_DataSourceProductVersionNormalized;
    {class} property GroupByBehavior: string read __fakeFieldGet_GroupByBehavior;
    {class} property IdentifierCase: string read __fakeFieldGet_IdentifierCase;
    {class} property IdentifierPattern: string read __fakeFieldGet_IdentifierPattern;
    {class} property IsAutoIncrementable: string read __fakeFieldGet_IsAutoIncrementable;
    {class} property IsBestMatch: string read __fakeFieldGet_IsBestMatch;
    {class} property IsCaseSensitive: string read __fakeFieldGet_IsCaseSensitive;
    {class} property IsConcurrencyType: string read __fakeFieldGet_IsConcurrencyType;
    {class} property IsFixedLength: string read __fakeFieldGet_IsFixedLength;
    {class} property IsFixedPrecisionScale: string read __fakeFieldGet_IsFixedPrecisionScale;
    {class} property IsLiteralSupported: string read __fakeFieldGet_IsLiteralSupported;
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    {class} property IsNullable: string read __fakeFieldGet_IsNullable;
    {class} property IsSearchable: string read __fakeFieldGet_IsSearchable;
    {class} property IsSearchableWithLike: string read __fakeFieldGet_IsSearchableWithLike;
    {class} property IsUnsigned: string read __fakeFieldGet_IsUnsigned;
    {class} property LiteralPrefix: string read __fakeFieldGet_LiteralPrefix;
    {class} property LiteralSuffix: string read __fakeFieldGet_LiteralSuffix;
    {class} property MaximumScale: string read __fakeFieldGet_MaximumScale;
    {class} property MinimumScale: string read __fakeFieldGet_MinimumScale;
    {class} property NumberOfIdentifierParts: string read __fakeFieldGet_NumberOfIdentifierParts;
    {class} property NumberOfRestrictions: string read __fakeFieldGet_NumberOfRestrictions;
    {class} property OrderByColumnsInSelect: string read __fakeFieldGet_OrderByColumnsInSelect;
    {class} property ParameterMarkerFormat: string read __fakeFieldGet_ParameterMarkerFormat;
    {class} property ParameterMarkerPattern: string read __fakeFieldGet_ParameterMarkerPattern;
    {class} property ParameterNameMaxLength: string read __fakeFieldGet_ParameterNameMaxLength;
    {class} property ParameterNamePattern: string read __fakeFieldGet_ParameterNamePattern;
    {class} property ProviderDbType: string read __fakeFieldGet_ProviderDbType;
    {class} property QuotedIdentifierCase: string read __fakeFieldGet_QuotedIdentifierCase;
    {class} property QuotedIdentifierPattern: string read __fakeFieldGet_QuotedIdentifierPattern;
    {class} property ReservedWord: string read __fakeFieldGet_ReservedWord;
    {class} property StatementSeparatorPattern: string read __fakeFieldGet_StatementSeparatorPattern;
    {class} property StringLiteralPattern: string read __fakeFieldGet_StringLiteralPattern;
    {class} property SupportedJoinOperators: string read __fakeFieldGet_SupportedJoinOperators;
    {class} property TypeName: string read __fakeFieldGet_TypeName;

  end;

  [DNTypeName('System.Data.Common.DbMetaDataColumnNames')]
  DNDbMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{179009F4-9A5A-331D-9FD8-A68057B57177}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbMetaDataColumnNames = class(TDNGenericImport<DNDbMetaDataColumnNamesClass, DNDbMetaDataColumnNames>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderConfigurationHandlerClass = interface(DNObjectClass)
  ['{ADCF575D-AD12-5CFA-BBF4-0B71877A90E9}']
  { constructors } 

    {class} function init: DNDbProviderConfigurationHandler;

  end;

  [DNTypeName('System.Data.Common.DbProviderConfigurationHandler')]
  DNDbProviderConfigurationHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{25D5927A-38D6-3F85-B3C8-2E8603CB0C55}']
  { methods } 

    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderConfigurationHandler = class(TDNGenericImport<DNDbProviderConfigurationHandlerClass, DNDbProviderConfigurationHandler>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3FC1820-7795-59D2-9A22-9059712AD6E6}']
  { static methods } 

    {class} function GetFactoryClasses: DNDataTable;
    {class} function GetFactory(providerInvariantName: string): DNDbProviderFactory; overload;
    {class} function GetFactory(providerRow: DNDataRow): DNDbProviderFactory; overload;
    {class} function GetFactory(connection: DNDbConnection): DNDbProviderFactory; overload;

  end;

  [DNTypeName('System.Data.Common.DbProviderFactories')]
  DNDbProviderFactories = interface(DDN.mscorlib.DNObject)
  ['{4F66693F-753B-38BA-8CE7-5993A84851D8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderFactories = class(TDNGenericImport<DNDbProviderFactoriesClass, DNDbProviderFactories>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoriesConfigurationHandlerClass = interface(DNObjectClass)
  ['{0DD69E91-5FF4-5654-B866-09AFECEF66F1}']
  { constructors } 

    {class} function init: DNDbProviderFactoriesConfigurationHandler;

  end;

  [DNTypeName('System.Data.Common.DbProviderFactoriesConfigurationHandler')]
  DNDbProviderFactoriesConfigurationHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{7C35AC0E-F224-3EB1-BF6D-153E48CA5FF2}']
  { methods } 

    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDbProviderFactoriesConfigurationHandler = class(TDNGenericImport<DNDbProviderFactoriesConfigurationHandlerClass, DNDbProviderFactoriesConfigurationHandler>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbProviderFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BCE20412-E2C3-5A60-BC9A-7A98ECCFF473}']
  end;

  [DNTypeName('System.Data.Common.DbProviderFactory')]
  DNDbProviderFactory = interface(DDN.mscorlib.DNObject)
  ['{D444E2EA-2294-335C-AD61-ECF89730C995}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    function CreateCommand: DNDbCommand;
    function CreateCommandBuilder: DNDbCommandBuilder;
    function CreateConnection: DNDbConnection;
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    function CreateDataAdapter: DNDbDataAdapter;
    function CreateParameter: DNDbParameter;
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNDbProviderFactory = class(TDNGenericImport<DNDbProviderFactoryClass, DNDbProviderFactory>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcFactoryClass = interface(DNDbProviderFactoryClass)
  ['{A8BB5F11-B5CF-56F5-B43D-EE80FE09FC7E}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNOdbcFactory;

  { static fields } 

    {class} property Instance: DNOdbcFactory read __fakeFieldGet_Instance;

  end;

  [DNTypeName('System.Data.Odbc.OdbcFactory')]
  DNOdbcFactory = interface(DNDbProviderFactory)
  ['{27C6B951-E1BC-3BB3-BEB7-6F0D23C21915}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    function CreateCommand: DNDbCommand;
    function CreateCommandBuilder: DNDbCommandBuilder;
    function CreateConnection: DNDbConnection;
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    function CreateDataAdapter: DNDbDataAdapter;
    function CreateParameter: DNDbParameter;
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNOdbcFactory = class(TDNGenericImport<DNOdbcFactoryClass, DNOdbcFactory>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbFactoryClass = interface(DNDbProviderFactoryClass)
  ['{F526CC0E-C8D3-5B64-B170-4B6621E0E3BA}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNOleDbFactory;

  { static fields } 

    {class} property Instance: DNOleDbFactory read __fakeFieldGet_Instance;

  end;

  [DNTypeName('System.Data.OleDb.OleDbFactory')]
  DNOleDbFactory = interface(DNDbProviderFactory)
  ['{E0D6CA8C-13A3-3E42-881A-EBEA076DE2FE}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    function CreateCommand: DNDbCommand;
    function CreateCommandBuilder: DNDbCommandBuilder;
    function CreateConnection: DNDbConnection;
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    function CreateDataAdapter: DNDbDataAdapter;
    function CreateParameter: DNDbParameter;
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNOleDbFactory = class(TDNGenericImport<DNOleDbFactoryClass, DNOleDbFactory>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientFactoryClass = interface(DNDbProviderFactoryClass)
  ['{1A62464C-3560-5279-A3FD-D2CB7A2C0BB2}']
  { static fields getter & setter } 

   function __fakeFieldGet_Instance: DNSqlClientFactory;

  { static fields } 

    {class} property Instance: DNSqlClientFactory read __fakeFieldGet_Instance;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientFactory')]
  DNSqlClientFactory = interface(DNDbProviderFactory)
  ['{FCF7570C-31C8-34C5-93D2-6A37D7612323}']
  { getters & setters } 

    function get_CanCreateDataSourceEnumerator: Boolean;

  { methods } 

    function CreateCommand: DNDbCommand;
    function CreateCommandBuilder: DNDbCommandBuilder;
    function CreateConnection: DNDbConnection;
    function CreateConnectionStringBuilder: DNDbConnectionStringBuilder;
    function CreateDataAdapter: DNDbDataAdapter;
    function CreateParameter: DNDbParameter;
    function CreatePermission(state: DDN.mscorlib.DNPermissionState): DDN.mscorlib.DNCodeAccessPermission;
    function CreateDataSourceEnumerator: DNDbDataSourceEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanCreateDataSourceEnumerator: Boolean read get_CanCreateDataSourceEnumerator;
  end;

  TDNSqlClientFactory = class(TDNGenericImport<DNSqlClientFactoryClass, DNSqlClientFactory>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{340E6785-7541-5ED1-9F11-8E382841FC4A}']
  { static fields getter & setter } 

   function __fakeFieldGet_ColumnName: string;
   function __fakeFieldGet_ColumnOrdinal: string;
   function __fakeFieldGet_ColumnSize: string;
   function __fakeFieldGet_NumericPrecision: string;
   function __fakeFieldGet_NumericScale: string;
   function __fakeFieldGet_DataType: string;
   function __fakeFieldGet_ProviderType: string;
   function __fakeFieldGet_NonVersionedProviderType: string;
   function __fakeFieldGet_IsLong: string;
   function __fakeFieldGet_AllowDBNull: string;
   function __fakeFieldGet_IsAliased: string;
   function __fakeFieldGet_IsExpression: string;
   function __fakeFieldGet_IsKey: string;
   function __fakeFieldGet_IsUnique: string;
   function __fakeFieldGet_BaseSchemaName: string;
   function __fakeFieldGet_BaseTableName: string;
   function __fakeFieldGet_BaseColumnName: string;

  { static fields } 

    {class} property ColumnName: string read __fakeFieldGet_ColumnName;
    {class} property ColumnOrdinal: string read __fakeFieldGet_ColumnOrdinal;
    {class} property ColumnSize: string read __fakeFieldGet_ColumnSize;
    {class} property NumericPrecision: string read __fakeFieldGet_NumericPrecision;
    {class} property NumericScale: string read __fakeFieldGet_NumericScale;
    {class} property DataType: string read __fakeFieldGet_DataType;
    {class} property ProviderType: string read __fakeFieldGet_ProviderType;
    {class} property NonVersionedProviderType: string read __fakeFieldGet_NonVersionedProviderType;
    {class} property IsLong: string read __fakeFieldGet_IsLong;
    {class} property AllowDBNull: string read __fakeFieldGet_AllowDBNull;
    {class} property IsAliased: string read __fakeFieldGet_IsAliased;
    {class} property IsExpression: string read __fakeFieldGet_IsExpression;
    {class} property IsKey: string read __fakeFieldGet_IsKey;
    {class} property IsUnique: string read __fakeFieldGet_IsUnique;
    {class} property BaseSchemaName: string read __fakeFieldGet_BaseSchemaName;
    {class} property BaseTableName: string read __fakeFieldGet_BaseTableName;
    {class} property BaseColumnName: string read __fakeFieldGet_BaseColumnName;

  end;

  [DNTypeName('System.Data.Common.SchemaTableColumn')]
  DNSchemaTableColumn = interface(DDN.mscorlib.DNObject)
  ['{945894BD-B20F-3623-92A4-CFBC2CF121D8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaTableColumn = class(TDNGenericImport<DNSchemaTableColumnClass, DNSchemaTableColumn>) end;

  //-------------namespace: System.Data.Common----------------
  DNSchemaTableOptionalColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86063EB6-8BF1-5ADA-8DF4-B9E9FA661882}']
  { static fields getter & setter } 

   function __fakeFieldGet_ProviderSpecificDataType: string;
   function __fakeFieldGet_IsAutoIncrement: string;
   function __fakeFieldGet_IsHidden: string;
   function __fakeFieldGet_IsReadOnly: string;
   function __fakeFieldGet_IsRowVersion: string;
   function __fakeFieldGet_BaseServerName: string;
   function __fakeFieldGet_BaseCatalogName: string;
   function __fakeFieldGet_AutoIncrementSeed: string;
   function __fakeFieldGet_AutoIncrementStep: string;
   function __fakeFieldGet_DefaultValue: string;
   function __fakeFieldGet_Expression: string;
   function __fakeFieldGet_BaseTableNamespace: string;
   function __fakeFieldGet_BaseColumnNamespace: string;
   function __fakeFieldGet_ColumnMapping: string;

  { static fields } 

    {class} property ProviderSpecificDataType: string read __fakeFieldGet_ProviderSpecificDataType;
    {class} property IsAutoIncrement: string read __fakeFieldGet_IsAutoIncrement;
    {class} property IsHidden: string read __fakeFieldGet_IsHidden;
    {class} property IsReadOnly: string read __fakeFieldGet_IsReadOnly;
    {class} property IsRowVersion: string read __fakeFieldGet_IsRowVersion;
    {class} property BaseServerName: string read __fakeFieldGet_BaseServerName;
    {class} property BaseCatalogName: string read __fakeFieldGet_BaseCatalogName;
    {class} property AutoIncrementSeed: string read __fakeFieldGet_AutoIncrementSeed;
    {class} property AutoIncrementStep: string read __fakeFieldGet_AutoIncrementStep;
    {class} property DefaultValue: string read __fakeFieldGet_DefaultValue;
    {class} property Expression: string read __fakeFieldGet_Expression;
    {class} property BaseTableNamespace: string read __fakeFieldGet_BaseTableNamespace;
    {class} property BaseColumnNamespace: string read __fakeFieldGet_BaseColumnNamespace;
    {class} property ColumnMapping: string read __fakeFieldGet_ColumnMapping;

  end;

  [DNTypeName('System.Data.Common.SchemaTableOptionalColumn')]
  DNSchemaTableOptionalColumn = interface(DDN.mscorlib.DNObject)
  ['{12B8017E-5FCB-31B1-82FC-C00CB63695FC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaTableOptionalColumn = class(TDNGenericImport<DNSchemaTableOptionalColumnClass, DNSchemaTableOptionalColumn>) end;

  //-------------namespace: System.Data----------------
  DNConstraintClass = interface(DDN.mscorlib.DNObjectClass)
  ['{376E489F-FCFD-5759-9D08-4ECBEE117D5D}']
  end;

  [DNTypeName('System.Data.Constraint')]
  DNConstraint = interface(DDN.mscorlib.DNObject)
  ['{EB020EE2-BFFB-30DF-B5FA-7769DC394BD2}']
  { getters & setters } 

    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_Table: DNDataTable;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property Table: DNDataTable read get_Table;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNConstraint = class(TDNGenericImport<DNConstraintClass, DNConstraint>) end;

  //-------------namespace: System.Data----------------
  DNForeignKeyConstraintClass = interface(DNConstraintClass)
  ['{E2C7B0FB-A5E1-57AF-BD3E-BFC62C242C38}']
  { constructors } 

    {class} function init(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNForeignKeyConstraint; overload;
    {class} function init(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;
    {class} function init(constraintName: string; parentTableName: string; parentTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; acceptRejectRule: DNAcceptRejectRule; deleteRule: DNRule; updateRule: DNRule): DNForeignKeyConstraint; overload;

  end;

  [DNTypeName('System.Data.ForeignKeyConstraint')]
  DNForeignKeyConstraint = interface(DNConstraint)
  ['{9CEA06B5-47F6-3E63-B5F4-9564F1F86276}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_Table: DNDataTable;
    function get_AcceptRejectRule: DNAcceptRejectRule;
    procedure set_AcceptRejectRule(value: DNAcceptRejectRule);
    function get_DeleteRule: DNRule;
    procedure set_DeleteRule(value: DNRule);
    function get_RelatedColumns: TArray<DNDataColumn>;
    function get_RelatedTable: DNDataTable;
    function get_UpdateRule: DNRule;
    procedure set_UpdateRule(value: DNRule);
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function Equals(key: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Columns: TArray<DNDataColumn> read get_Columns;
    property Table: DNDataTable read get_Table;
    property AcceptRejectRule: DNAcceptRejectRule read get_AcceptRejectRule write set_AcceptRejectRule;
    property DeleteRule: DNRule read get_DeleteRule write set_DeleteRule;
    property RelatedColumns: TArray<DNDataColumn> read get_RelatedColumns;
    property RelatedTable: DNDataTable read get_RelatedTable;
    property UpdateRule: DNRule read get_UpdateRule write set_UpdateRule;
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNForeignKeyConstraint = class(TDNGenericImport<DNForeignKeyConstraintClass, DNForeignKeyConstraint>) end;

  //-------------namespace: System.Data----------------
  DNUniqueConstraintClass = interface(DNConstraintClass)
  ['{5999817A-58A5-5682-8C2C-C667F7EB385E}']
  { constructors } 

    {class} function init(name: string; column: DNDataColumn): DNUniqueConstraint; overload;
    {class} function init(column: DNDataColumn): DNUniqueConstraint; overload;
    {class} function init(name: string; columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    {class} function init(columns: TArray<DNDataColumn>): DNUniqueConstraint; overload;
    {class} function init(name: string; columnNames: TArray<string>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(name: string; column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(column: DNDataColumn; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(name: string; columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;
    {class} function init(columns: TArray<DNDataColumn>; isPrimaryKey: Boolean): DNUniqueConstraint; overload;

  end;

  [DNTypeName('System.Data.UniqueConstraint')]
  DNUniqueConstraint = interface(DNConstraint)
  ['{2E43B09D-4045-385B-9FBA-0D749852FE19}']
  { getters & setters } 

    function get_Columns: TArray<DNDataColumn>;
    function get_IsPrimaryKey: Boolean;
    function get_Table: DNDataTable;
    function get_ConstraintName: string;
    procedure set_ConstraintName(value: string);
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function Equals(key2: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Columns: TArray<DNDataColumn> read get_Columns;
    property IsPrimaryKey: Boolean read get_IsPrimaryKey;
    property Table: DNDataTable read get_Table;
    property ConstraintName: string read get_ConstraintName write set_ConstraintName;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNUniqueConstraint = class(TDNGenericImport<DNUniqueConstraintClass, DNUniqueConstraint>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C2B58DB-0CF6-54E5-A228-9139B6D1F527}']
  { constructors } 

    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    {class} function init(relationName: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentTableName: string; childTableName: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;
    {class} function init(relationName: string; parentTableName: string; parentTableNamespace: string; childTableName: string; childTableNamespace: string; parentColumnNames: TArray<string>; childColumnNames: TArray<string>; nested: Boolean): DNDataRelation; overload;

  end;

  [DNTypeName('System.Data.DataRelation')]
  DNDataRelation = interface(DDN.mscorlib.DNObject)
  ['{28A715A9-0E4D-3E5F-85A2-D3FB10F07D1D}']
  { getters & setters } 

    function get_ChildColumns: TArray<DNDataColumn>;
    function get_ChildTable: DNDataTable;
    function get_DataSet: DNDataSet;
    function get_ParentColumns: TArray<DNDataColumn>;
    function get_ParentTable: DNDataTable;
    function get_RelationName: string;
    procedure set_RelationName(value: string);
    function get_Nested: Boolean;
    procedure set_Nested(value: Boolean);
    function get_ParentKeyConstraint: DNUniqueConstraint;
    function get_ChildKeyConstraint: DNForeignKeyConstraint;
    function get_ExtendedProperties: DNPropertyCollection;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ChildColumns: TArray<DNDataColumn> read get_ChildColumns;
    property ChildTable: DNDataTable read get_ChildTable;
    property DataSet: DNDataSet read get_DataSet;
    property ParentColumns: TArray<DNDataColumn> read get_ParentColumns;
    property ParentTable: DNDataTable read get_ParentTable;
    property RelationName: string read get_RelationName write set_RelationName;
    property Nested: Boolean read get_Nested write set_Nested;
    property ParentKeyConstraint: DNUniqueConstraint read get_ParentKeyConstraint;
    property ChildKeyConstraint: DNForeignKeyConstraint read get_ChildKeyConstraint;
    property ExtendedProperties: DNPropertyCollection read get_ExtendedProperties;
  end;

  TDNDataRelation = class(TDNGenericImport<DNDataRelationClass, DNDataRelation>) end;

  //-------------namespace: System.Data----------------
  DNDataRowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB7D244F-523B-57B6-89A4-E31CABF91FF2}']
  end;

  [DNTypeName('System.Data.DataRow')]
  DNDataRow = interface(DDN.mscorlib.DNObject)
  ['{208AC0D0-8D94-3FE0-8090-4813634573A2}']
  { getters & setters } 

    function get_RowError: string;
    procedure set_RowError(value: string);
    function get_RowState: DNDataRowState;
    function get_Table: DNDataTable;
    function get_Item(columnIndex: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnIndex: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnName: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(columnName: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(column: DNDataColumn): DDN.mscorlib.DNObject; overload;
    procedure set_Item(column: DNDataColumn; value: DDN.mscorlib.DNObject); overload;
    function get_Item(columnIndex: Int32; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(columnName: string; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_Item(column: DNDataColumn; version: DNDataRowVersion): DDN.mscorlib.DNObject; overload;
    function get_ItemArray: TArray<DDN.mscorlib.DNObject>;
    procedure set_ItemArray(value: TArray<DDN.mscorlib.DNObject>);
    function get_HasErrors: Boolean;

  { methods } 

    procedure BeginEdit;
    procedure CancelEdit;
    procedure Delete;
    procedure EndEdit;
    procedure SetColumnError(columnIndex: Int32; error: string); overload;
    procedure SetColumnError(columnName: string; error: string); overload;
    function GetColumnError(columnIndex: Int32): string; overload;
    function GetColumnError(columnName: string): string; overload;
    function GetColumnError(column: DNDataColumn): string; overload;
    procedure ClearErrors;
    function GetChildRows(relationName: string): TArray<DNDataRow>; overload;
    function GetChildRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetChildRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    function GetChildRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetParentRow(relationName: string): DNDataRow; overload;
    function GetParentRow(relationName: string; version: DNDataRowVersion): DNDataRow; overload;
    function GetParentRow(relation: DNDataRelation): DNDataRow; overload;
    function GetParentRow(relation: DNDataRelation; version: DNDataRowVersion): DNDataRow; overload;
    function GetParentRows(relationName: string): TArray<DNDataRow>; overload;
    function GetParentRows(relationName: string; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function GetParentRows(relation: DNDataRelation): TArray<DNDataRow>; overload;
    function GetParentRows(relation: DNDataRelation; version: DNDataRowVersion): TArray<DNDataRow>; overload;
    function HasVersion(version: DNDataRowVersion): Boolean;
    function IsNull(columnIndex: Int32): Boolean; overload;
    function IsNull(columnName: string): Boolean; overload;
    function IsNull(column: DNDataColumn): Boolean; overload;
    function IsNull(column: DNDataColumn; version: DNDataRowVersion): Boolean; overload;
    procedure SetParentRow(parentRow: DNDataRow); overload;
    procedure SetParentRow(parentRow: DNDataRow; relation: DNDataRelation); overload;
    procedure SetAdded;
    procedure SetModified;
    procedure AcceptChanges;
    procedure SetColumnError(column: DNDataColumn; error: string); overload;
    function GetColumnsInError: TArray<DNDataColumn>;
    procedure RejectChanges;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowError: string read get_RowError write set_RowError;
    property RowState: DNDataRowState read get_RowState;
    property Table: DNDataTable read get_Table;
    property Item[columnIndex: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[column: DNDataColumn]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[columnIndex: Int32; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[columnName: string; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[column: DNDataColumn; version: DNDataRowVersion]: DDN.mscorlib.DNObject read get_Item; default;
    property ItemArray: TArray<DDN.mscorlib.DNObject> read get_ItemArray write set_ItemArray;
    property HasErrors: Boolean read get_HasErrors;
  end;

  TDNDataRow = class(TDNGenericImport<DNDataRowClass, DNDataRow>) end;

  //-------------namespace: System.Data----------------
  DNDataRowBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CCC6370-F073-5902-9B26-AD16F3C32860}']
  end;

  [DNTypeName('System.Data.DataRowBuilder')]
  DNDataRowBuilder = interface(DDN.mscorlib.DNObject)
  ['{AFE4600F-6640-31C0-ADC9-C67BA3F200AA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataRowBuilder = class(TDNGenericImport<DNDataRowBuilderClass, DNDataRowBuilder>) end;

  //-------------namespace: System.Data----------------
  DNDataRowViewClass = interface(DNObjectClass)
  ['{C17EB2C8-B8C1-526F-939F-9872BCC64767}']
  end;

  [DNTypeName('System.Data.DataRowView')]
  DNDataRowView = interface(DDN.System.DNICustomTypeDescriptor)
  ['{91862A40-DC23-3C7F-B0D8-1BFD26EC98E4}']
  { getters & setters } 

    function get_DataView: DNDataView;
    function get_Item(ndx: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(ndx: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(&property: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(&property: string; value: DDN.mscorlib.DNObject); overload;
    function get_RowVersion: DNDataRowVersion;
    function get_Row: DNDataRow;
    function get_IsNew: Boolean;
    function get_IsEdit: Boolean;

  { events } 

    procedure add_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);

  { methods } 

    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function CreateChildView(relation: DNDataRelation; followParent: Boolean): DNDataView; overload;
    function CreateChildView(relation: DNDataRelation): DNDataView; overload;
    function CreateChildView(relationName: string; followParent: Boolean): DNDataView; overload;
    function CreateChildView(relationName: string): DNDataView; overload;
    procedure BeginEdit;
    procedure CancelEdit;
    procedure EndEdit;
    procedure Delete;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataView: DNDataView read get_DataView;
    property Item[ndx: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[&property: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property RowVersion: DNDataRowVersion read get_RowVersion;
    property Row: DNDataRow read get_Row;
    property IsNew: Boolean read get_IsNew;
    property IsEdit: Boolean read get_IsEdit;
  end;

  TDNDataRowView = class(TDNGenericImport<DNDataRowViewClass, DNDataRowView>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7258DA3-4FD2-5DD6-A8B2-89B70951B0AF}']
  end;

  [DNTypeName('System.Data.DataViewSetting')]
  DNDataViewSetting = interface(DDN.mscorlib.DNObject)
  ['{A69B4B3C-E79F-3DA5-9584-17C3D4AF0A9E}']
  { getters & setters } 

    function get_ApplyDefaultSort: Boolean;
    procedure set_ApplyDefaultSort(value: Boolean);
    function get_DataViewManager: DNDataViewManager;
    function get_Table: DNDataTable;
    function get_RowFilter: string;
    procedure set_RowFilter(value: string);
    function get_RowStateFilter: DNDataViewRowState;
    procedure set_RowStateFilter(value: DNDataViewRowState);
    function get_Sort: string;
    procedure set_Sort(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplyDefaultSort: Boolean read get_ApplyDefaultSort write set_ApplyDefaultSort;
    property DataViewManager: DNDataViewManager read get_DataViewManager;
    property Table: DNDataTable read get_Table;
    property RowFilter: string read get_RowFilter write set_RowFilter;
    property RowStateFilter: DNDataViewRowState read get_RowStateFilter write set_RowStateFilter;
    property Sort: string read get_Sort write set_Sort;
  end;

  TDNDataViewSetting = class(TDNGenericImport<DNDataViewSettingClass, DNDataViewSetting>) end;

  //-------------namespace: System.Data----------------
  DNDataViewSettingCollectionClass = interface(DNObjectClass)
  ['{B5806A80-E07F-5D92-844B-6850F4506BAD}']
  end;

  [DNTypeName('System.Data.DataViewSettingCollection')]
  DNDataViewSettingCollection = interface(DDN.mscorlib.DNICollection)
  ['{F9A67967-A864-3864-A823-94EB28C60765}']
  { getters & setters } 

    function get_Item(table: DNDataTable): DNDataViewSetting; overload;
    procedure set_Item(table: DNDataTable; value: DNDataViewSetting); overload;
    function get_Item(tableName: string): DNDataViewSetting; overload;
    function get_Item(index: Int32): DNDataViewSetting; overload;
    procedure set_Item(index: Int32; value: DNDataViewSetting); overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(ar: TArray<DNDataViewSetting>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[table: DNDataTable]: DNDataViewSetting read get_Item write set_Item; default;
    property Item[tableName: string]: DNDataViewSetting read get_Item; default;
    property Item[index: Int32]: DNDataViewSetting read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataViewSettingCollection = class(TDNGenericImport<DNDataViewSettingCollectionClass, DNDataViewSettingCollection>) end;

  //-------------namespace: System.Data----------------
  DNInternalDataCollectionBaseClass = interface(DNObjectClass)
  ['{6F9B9085-B3D4-5711-B22B-D3D771AADA35}']
  { constructors } 

    {class} function init: DNInternalDataCollectionBase;

  end;

  [DNTypeName('System.Data.InternalDataCollectionBase')]
  DNInternalDataCollectionBase = interface(DDN.mscorlib.DNICollection)
  ['{E55DE979-3346-3493-ADE7-ECC252F2D229}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNInternalDataCollectionBase = class(TDNGenericImport<DNInternalDataCollectionBaseClass, DNInternalDataCollectionBase>) end;

  //-------------namespace: System.Data----------------
  DNConstraintCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{62C546D3-8AA5-5A4E-BC36-7AAF56476D74}']
  end;

  [DNTypeName('System.Data.ConstraintCollection')]
  DNConstraintCollection = interface(DNInternalDataCollectionBase)
  ['{75461A0D-19F9-3D4E-885C-A066AD8C7DA9}']
  { getters & setters } 

    function get_Item(index: Int32): DNConstraint; overload;
    function get_Item(name: string): DNConstraint; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(constraint: DNConstraint); overload;
    function Add(name: string; columns: TArray<DNDataColumn>; primaryKey: Boolean): DNConstraint; overload;
    function Add(name: string; column: DNDataColumn; primaryKey: Boolean): DNConstraint; overload;
    function Add(name: string; primaryKeyColumn: DNDataColumn; foreignKeyColumn: DNDataColumn): DNConstraint; overload;
    function Add(name: string; primaryKeyColumns: TArray<DNDataColumn>; foreignKeyColumns: TArray<DNDataColumn>): DNConstraint; overload;
    procedure AddRange(constraints: TArray<DNConstraint>);
    function CanRemove(constraint: DNConstraint): Boolean;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNConstraint>; index: Int32); overload;
    function IndexOf(constraint: DNConstraint): Int32; overload;
    function IndexOf(constraintName: string): Int32; overload;
    procedure Remove(constraint: DNConstraint); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure Clear;
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConstraint read get_Item; default;
    property Item[name: string]: DNConstraint read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNConstraintCollection = class(TDNGenericImport<DNConstraintCollectionClass, DNConstraintCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{A00A9A17-EE05-5836-99D0-2CE1D70A785F}']
  end;

  [DNTypeName('System.Data.DataColumnCollection')]
  DNDataColumnCollection = interface(DNInternalDataCollectionBase)
  ['{68727487-487C-383F-A83C-DEE9FDDC59EB}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataColumn; overload;
    function get_Item(name: string): DNDataColumn; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    procedure Add(column: DNDataColumn); overload;
    procedure AddRange(columns: TArray<DNDataColumn>);
    function Add(columnName: string; &type: DDN.mscorlib.DNType; expression: string): DNDataColumn; overload;
    function Add(columnName: string; &type: DDN.mscorlib.DNType): DNDataColumn; overload;
    function Add(columnName: string): DNDataColumn; overload;
    function Add: DNDataColumn; overload;
    function CanRemove(column: DNDataColumn): Boolean;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNDataColumn>; index: Int32); overload;
    function IndexOf(column: DNDataColumn): Int32; overload;
    function IndexOf(columnName: string): Int32; overload;
    procedure Remove(column: DNDataColumn); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure Clear;
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataColumn read get_Item; default;
    property Item[name: string]: DNDataColumn read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataColumnCollection = class(TDNGenericImport<DNDataColumnCollectionClass, DNDataColumnCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRelationCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{D7BD456A-CD28-5D2F-8BC1-CE6573B5B4F1}']
  end;

  [DNTypeName('System.Data.DataRelationCollection')]
  DNDataRelationCollection = interface(DNInternalDataCollectionBase)
  ['{6AA9CAE2-68C2-3EFB-8947-06F2A62BE714}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataRelation; overload;
    function get_Item(name: string): DNDataRelation; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    procedure AddRange(relations: TArray<DNDataRelation>);
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    function Add(name: string; parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>; createConstraints: Boolean): DNDataRelation; overload;
    function Add(parentColumns: TArray<DNDataColumn>; childColumns: TArray<DNDataColumn>): DNDataRelation; overload;
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    function Add(name: string; parentColumn: DNDataColumn; childColumn: DNDataColumn; createConstraints: Boolean): DNDataRelation; overload;
    function Add(parentColumn: DNDataColumn; childColumn: DNDataColumn): DNDataRelation; overload;
    function &Contains(name: string): Boolean;
    procedure CopyTo(&array: TArray<DNDataRelation>; index: Int32); overload;
    function IndexOf(relation: DNDataRelation): Int32; overload;
    function IndexOf(relationName: string): Int32; overload;
    function CanRemove(relation: DNDataRelation): Boolean;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure Add(relation: DNDataRelation); overload;
    procedure Clear;
    procedure Remove(relation: DNDataRelation); overload;
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataRelation read get_Item; default;
    property Item[name: string]: DNDataRelation read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRelationCollection = class(TDNGenericImport<DNDataRelationCollectionClass, DNDataRelationCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataRowCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{5E6C1162-90E6-59F3-BAA0-3D0B3939C9A9}']
  end;

  [DNTypeName('System.Data.DataRowCollection')]
  DNDataRowCollection = interface(DNInternalDataCollectionBase)
  ['{E3A1DFAE-10DE-3667-8ADD-B69986EBF849}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataRow;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(row: DNDataRow); overload;
    procedure InsertAt(row: DNDataRow; pos: Int32);
    function IndexOf(row: DNDataRow): Int32;
    function Add(values: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    function Find(key: DDN.mscorlib.DNObject): DNDataRow; overload;
    function Find(keys: TArray<DDN.mscorlib.DNObject>): DNDataRow; overload;
    procedure Clear;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean; overload;
    function &Contains(keys: TArray<DDN.mscorlib.DNObject>): Boolean; overload;
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNDataRow>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Remove(row: DNDataRow);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataRow read get_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataRowCollection = class(TDNGenericImport<DNDataRowCollectionClass, DNDataRowCollection>) end;

  //-------------namespace: System.Data----------------
  DNDataTableCollectionClass = interface(DNInternalDataCollectionBaseClass)
  ['{C362542A-D4FE-581A-9E75-42982C793A0F}']
  end;

  [DNTypeName('System.Data.DataTableCollection')]
  DNDataTableCollection = interface(DNInternalDataCollectionBase)
  ['{1FB590A0-3C5C-3492-B1BB-B1BBBF38D68A}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataTable; overload;
    function get_Item(name: string): DNDataTable; overload;
    function get_Item(name: string; tableNamespace: string): DNDataTable; overload;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { events } 

    procedure add_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanged(value: DDN.System.DNCollectionChangeEventHandler);
    procedure add_CollectionChanging(value: DDN.System.DNCollectionChangeEventHandler);
    procedure remove_CollectionChanging(value: DDN.System.DNCollectionChangeEventHandler);

  { methods } 

    function CanRemove(table: DNDataTable): Boolean;
    function &Contains(name: string): Boolean; overload;
    function &Contains(name: string; tableNamespace: string): Boolean; overload;
    procedure CopyTo(&array: TArray<DNDataTable>; index: Int32); overload;
    function IndexOf(table: DNDataTable): Int32; overload;
    function IndexOf(tableName: string): Int32; overload;
    function IndexOf(tableName: string; tableNamespace: string): Int32; overload;
    procedure Remove(name: string; tableNamespace: string); overload;
    procedure Add(table: DNDataTable); overload;
    procedure AddRange(tables: TArray<DNDataTable>);
    function Add(name: string): DNDataTable; overload;
    function Add(name: string; tableNamespace: string): DNDataTable; overload;
    function Add: DNDataTable; overload;
    procedure Clear;
    procedure Remove(table: DNDataTable); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(name: string); overload;
    procedure CopyTo(ar: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataTable read get_Item; default;
    property Item[name: string]: DNDataTable read get_Item; default;
    property Item[name: string; tableNamespace: string]: DNDataTable read get_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDataTableCollection = class(TDNGenericImport<DNDataTableCollectionClass, DNDataTableCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{63387667-F2B4-5701-A2E6-495753AB3B94}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcError')]
  DNOdbcError = interface(DDN.mscorlib.DNObject)
  ['{B89EC9F4-D800-3B8E-B0A6-B1A1ADBC950A}']
  { getters & setters } 

    function get_Message: string;
    function get_SQLState: string;
    function get_NativeError: Int32;
    function get_Source: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property SQLState: string read get_SQLState;
    property NativeError: Int32 read get_NativeError;
    property Source: string read get_Source;
  end;

  TDNOdbcError = class(TDNGenericImport<DNOdbcErrorClass, DNOdbcError>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcErrorCollectionClass = interface(DNObjectClass)
  ['{4BC64D8C-EAAC-5C61-B243-A04BC49C9E7E}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcErrorCollection')]
  DNOdbcErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{1EB0B38A-577C-3F0C-8341-E97E8CCFE6A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(i: Int32): DNOdbcError;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; i: Int32); overload;
    procedure CopyTo(&array: TArray<DNOdbcError>; i: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[i: Int32]: DNOdbcError read get_Item; default;
  end;

  TDNOdbcErrorCollection = class(TDNGenericImport<DNOdbcErrorCollectionClass, DNOdbcErrorCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0700762A-92AB-575D-BEA3-60B153DA20D7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_ProcedureParameters: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    {class} property Columns: string read __fakeFieldGet_Columns;
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    {class} property ProcedureParameters: string read __fakeFieldGet_ProcedureParameters;
    {class} property Tables: string read __fakeFieldGet_Tables;
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  [DNTypeName('System.Data.Odbc.OdbcMetaDataCollectionNames')]
  DNOdbcMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{253D780B-BB5D-35CE-B7F9-65DD8EB74A8F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOdbcMetaDataCollectionNames = class(TDNGenericImport<DNOdbcMetaDataCollectionNamesClass, DNOdbcMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80133A1A-C9B9-5E30-8124-598B9EB7D00F}']
  { static fields getter & setter } 

   function __fakeFieldGet_BooleanFalseLiteral: string;
   function __fakeFieldGet_BooleanTrueLiteral: string;
   function __fakeFieldGet_SQLType: string;

  { static fields } 

    {class} property BooleanFalseLiteral: string read __fakeFieldGet_BooleanFalseLiteral;
    {class} property BooleanTrueLiteral: string read __fakeFieldGet_BooleanTrueLiteral;
    {class} property SQLType: string read __fakeFieldGet_SQLType;

  end;

  [DNTypeName('System.Data.Odbc.OdbcMetaDataColumnNames')]
  DNOdbcMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{F1A3BC88-55E3-32E2-A075-7E3D54AAC6B6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOdbcMetaDataColumnNames = class(TDNGenericImport<DNOdbcMetaDataColumnNamesClass, DNOdbcMetaDataColumnNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDFD8658-6872-5D3C-8E01-698B91CF3BED}']
  { constructors } 

    {class} function init: DNOleDbEnumerator;

  { static methods } 

    {class} function GetEnumerator(&type: DDN.mscorlib.DNType): DNOleDbDataReader;
    {class} function GetRootEnumerator: DNOleDbDataReader;

  end;

  [DNTypeName('System.Data.OleDb.OleDbEnumerator')]
  DNOleDbEnumerator = interface(DDN.mscorlib.DNObject)
  ['{D54552B5-4B35-36C6-96E2-18EF097B802A}']
  { methods } 

    function GetElements: DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbEnumerator = class(TDNGenericImport<DNOleDbEnumeratorClass, DNOleDbEnumerator>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8C97E12-5EE5-5E51-A46A-FE515DE7E174}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbError')]
  DNOleDbError = interface(DDN.mscorlib.DNObject)
  ['{6DEE0079-201B-3ACC-AF36-ADEAD0308B64}']
  { getters & setters } 

    function get_Message: string;
    function get_NativeError: Int32;
    function get_Source: string;
    function get_SQLState: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property NativeError: Int32 read get_NativeError;
    property Source: string read get_Source;
    property SQLState: string read get_SQLState;
  end;

  TDNOleDbError = class(TDNGenericImport<DNOleDbErrorClass, DNOleDbError>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbErrorCollectionClass = interface(DNObjectClass)
  ['{88780DC4-86A7-5189-B822-0324A96846F6}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbErrorCollection')]
  DNOleDbErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{21D1CE24-A06B-323C-A36B-F0FFCBB7363A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOleDbError;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNOleDbError>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOleDbError read get_Item; default;
  end;

  TDNOleDbErrorCollection = class(TDNGenericImport<DNOleDbErrorCollectionClass, DNOleDbErrorCollection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2582E8C2-D758-58A1-90D9-2966721C642A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Catalogs: string;
   function __fakeFieldGet_Collations: string;
   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_ProcedureParameters: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    {class} property Catalogs: string read __fakeFieldGet_Catalogs;
    {class} property Collations: string read __fakeFieldGet_Collations;
    {class} property Columns: string read __fakeFieldGet_Columns;
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    {class} property ProcedureParameters: string read __fakeFieldGet_ProcedureParameters;
    {class} property Tables: string read __fakeFieldGet_Tables;
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  [DNTypeName('System.Data.OleDb.OleDbMetaDataCollectionNames')]
  DNOleDbMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{059103F6-79E3-3980-8E0C-E3DA2C048531}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbMetaDataCollectionNames = class(TDNGenericImport<DNOleDbMetaDataCollectionNamesClass, DNOleDbMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbMetaDataColumnNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1D80889-C3AA-5EAF-A0BB-53F632AB41E9}']
  { static fields getter & setter } 

   function __fakeFieldGet_BooleanFalseLiteral: string;
   function __fakeFieldGet_BooleanTrueLiteral: string;
   function __fakeFieldGet_NativeDataType: string;
   function __fakeFieldGet_DateTimeDigits: string;

  { static fields } 

    {class} property BooleanFalseLiteral: string read __fakeFieldGet_BooleanFalseLiteral;
    {class} property BooleanTrueLiteral: string read __fakeFieldGet_BooleanTrueLiteral;
    {class} property NativeDataType: string read __fakeFieldGet_NativeDataType;
    {class} property DateTimeDigits: string read __fakeFieldGet_DateTimeDigits;

  end;

  [DNTypeName('System.Data.OleDb.OleDbMetaDataColumnNames')]
  DNOleDbMetaDataColumnNames = interface(DDN.mscorlib.DNObject)
  ['{B960D5F6-C8C0-3112-9948-05740A2828C4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbMetaDataColumnNames = class(TDNGenericImport<DNOleDbMetaDataColumnNamesClass, DNOleDbMetaDataColumnNames>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbSchemaGuidClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A471583-FCB2-5584-85F0-F0369E6FC121}']
  { constructors } 

    {class} function init: DNOleDbSchemaGuid;

  { static fields getter & setter } 

   function __fakeFieldGet_Tables_Info: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Trustee: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Assertions: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Catalogs: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Character_Sets: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Collations: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Columns: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Check_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Constraint_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Constraint_Table_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Key_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Referential_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Constraints: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Column_Domain_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Indexes: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Column_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Usage_Privileges: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedures: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Schemata: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Sql_Languages: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Statistics: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Tables: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Translations: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Provider_Types: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Views: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_View_Column_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_View_Table_Usage: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedure_Parameters: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Foreign_Keys: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Primary_Keys: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Procedure_Columns: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Table_Statistics: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Check_Constraints_By_Table: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_SchemaGuids: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_DbInfoKeywords: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_DbInfoLiterals: DDN.mscorlib.DNGuid;

  { static fields } 

    {class} property Tables_Info: DDN.mscorlib.DNGuid read __fakeFieldGet_Tables_Info;
    {class} property Trustee: DDN.mscorlib.DNGuid read __fakeFieldGet_Trustee;
    {class} property Assertions: DDN.mscorlib.DNGuid read __fakeFieldGet_Assertions;
    {class} property Catalogs: DDN.mscorlib.DNGuid read __fakeFieldGet_Catalogs;
    {class} property Character_Sets: DDN.mscorlib.DNGuid read __fakeFieldGet_Character_Sets;
    {class} property Collations: DDN.mscorlib.DNGuid read __fakeFieldGet_Collations;
    {class} property Columns: DDN.mscorlib.DNGuid read __fakeFieldGet_Columns;
    {class} property Check_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Check_Constraints;
    {class} property Constraint_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Constraint_Column_Usage;
    {class} property Constraint_Table_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Constraint_Table_Usage;
    {class} property Key_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Key_Column_Usage;
    {class} property Referential_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Referential_Constraints;
    {class} property Table_Constraints: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Constraints;
    {class} property Column_Domain_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_Column_Domain_Usage;
    {class} property Indexes: DDN.mscorlib.DNGuid read __fakeFieldGet_Indexes;
    {class} property Column_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Column_Privileges;
    {class} property Table_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Privileges;
    {class} property Usage_Privileges: DDN.mscorlib.DNGuid read __fakeFieldGet_Usage_Privileges;
    {class} property Procedures: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedures;
    {class} property Schemata: DDN.mscorlib.DNGuid read __fakeFieldGet_Schemata;
    {class} property Sql_Languages: DDN.mscorlib.DNGuid read __fakeFieldGet_Sql_Languages;
    {class} property Statistics: DDN.mscorlib.DNGuid read __fakeFieldGet_Statistics;
    {class} property Tables: DDN.mscorlib.DNGuid read __fakeFieldGet_Tables;
    {class} property Translations: DDN.mscorlib.DNGuid read __fakeFieldGet_Translations;
    {class} property Provider_Types: DDN.mscorlib.DNGuid read __fakeFieldGet_Provider_Types;
    {class} property Views: DDN.mscorlib.DNGuid read __fakeFieldGet_Views;
    {class} property View_Column_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_View_Column_Usage;
    {class} property View_Table_Usage: DDN.mscorlib.DNGuid read __fakeFieldGet_View_Table_Usage;
    {class} property Procedure_Parameters: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedure_Parameters;
    {class} property Foreign_Keys: DDN.mscorlib.DNGuid read __fakeFieldGet_Foreign_Keys;
    {class} property Primary_Keys: DDN.mscorlib.DNGuid read __fakeFieldGet_Primary_Keys;
    {class} property Procedure_Columns: DDN.mscorlib.DNGuid read __fakeFieldGet_Procedure_Columns;
    {class} property Table_Statistics: DDN.mscorlib.DNGuid read __fakeFieldGet_Table_Statistics;
    {class} property Check_Constraints_By_Table: DDN.mscorlib.DNGuid read __fakeFieldGet_Check_Constraints_By_Table;
    {class} property SchemaGuids: DDN.mscorlib.DNGuid read __fakeFieldGet_SchemaGuids;
    {class} property DbInfoKeywords: DDN.mscorlib.DNGuid read __fakeFieldGet_DbInfoKeywords;
    {class} property DbInfoLiterals: DDN.mscorlib.DNGuid read __fakeFieldGet_DbInfoLiterals;

  end;

  [DNTypeName('System.Data.OleDb.OleDbSchemaGuid')]
  DNOleDbSchemaGuid = interface(DDN.mscorlib.DNObject)
  ['{24F82AA5-56BC-300A-8199-9A9A3FD77ABC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOleDbSchemaGuid = class(TDNGenericImport<DNOleDbSchemaGuidClass, DNOleDbSchemaGuid>) end;

  //-------------namespace: System.Data.Sql----------------
  DNSqlNotificationRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC582921-76B1-5D1F-AB29-F1ED6D6ED44C}']
  { constructors } 

    {class} function init: DNSqlNotificationRequest; overload;
    {class} function init(userData: string; options: string; timeout: Int32): DNSqlNotificationRequest; overload;

  end;

  [DNTypeName('System.Data.Sql.SqlNotificationRequest')]
  DNSqlNotificationRequest = interface(DDN.mscorlib.DNObject)
  ['{DE4AC26B-F2EA-33B8-83EA-A252F0B2E17D}']
  { getters & setters } 

    function get_Options: string;
    procedure set_Options(value: string);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_UserData: string;
    procedure set_UserData(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Options: string read get_Options write set_Options;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property UserData: string read get_UserData write set_UserData;
  end;

  TDNSqlNotificationRequest = class(TDNGenericImport<DNSqlNotificationRequestClass, DNSqlNotificationRequest>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationInitializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7270086-3DDC-5D87-8A80-782DF57D0B33}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationInitializer')]
  DNSqlAuthenticationInitializer = interface(DDN.mscorlib.DNObject)
  ['{27D7788D-A96E-3512-8829-C0069BC6EBC9}']
  { methods } 

    procedure Initialize;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlAuthenticationInitializer = class(TDNGenericImport<DNSqlAuthenticationInitializerClass, DNSqlAuthenticationInitializer>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2F6F6B3-D5BA-5FC6-9E01-469E59506280}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationParameters')]
  DNSqlAuthenticationParameters = interface(DDN.mscorlib.DNObject)
  ['{393A36B7-14F1-3474-8785-1FDECC1B0E4A}']
  { getters & setters } 

    function get_AuthenticationMethod: DNSqlAuthenticationMethod;
    function get_Resource: string;
    function get_Authority: string;
    function get_UserId: string;
    function get_Password: string;
    function get_ConnectionId: DDN.mscorlib.DNGuid;
    function get_ServerName: string;
    function get_DatabaseName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthenticationMethod: DNSqlAuthenticationMethod read get_AuthenticationMethod;
    property Resource: string read get_Resource;
    property Authority: string read get_Authority;
    property UserId: string read get_UserId;
    property Password: string read get_Password;
    property ConnectionId: DDN.mscorlib.DNGuid read get_ConnectionId;
    property ServerName: string read get_ServerName;
    property DatabaseName: string read get_DatabaseName;
  end;

  TDNSqlAuthenticationParameters = class(TDNGenericImport<DNSqlAuthenticationParametersClass, DNSqlAuthenticationParameters>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{061610E4-19F3-5313-92D3-30909FA5C7A3}']
  { static methods } 

    {class} function GetProvider(authenticationMethod: DNSqlAuthenticationMethod): DNSqlAuthenticationProvider;
    {class} function SetProvider(authenticationMethod: DNSqlAuthenticationMethod; provider: DNSqlAuthenticationProvider): Boolean;

  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationProvider')]
  DNSqlAuthenticationProvider = interface(DDN.mscorlib.DNObject)
  ['{EC1CDE39-B318-33C5-9B28-2311BEC05605}']
  { methods } 

    procedure BeforeLoad(authenticationMethod: DNSqlAuthenticationMethod);
    procedure BeforeUnload(authenticationMethod: DNSqlAuthenticationMethod);
    function IsSupported(authenticationMethod: DNSqlAuthenticationMethod): Boolean;
    function AcquireTokenAsync(parameters: DNSqlAuthenticationParameters): DDN.mscorlib.DNTask<DNSqlAuthenticationToken>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlAuthenticationProvider = class(TDNGenericImport<DNSqlAuthenticationProviderClass, DNSqlAuthenticationProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlAuthenticationTokenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0ECFDB2E-CBC4-5F2B-BF46-019E8FF86071}']
  { constructors } 

    {class} function init(accessToken: string; expiresOn: DDN.mscorlib.DNDateTimeOffset): DNSqlAuthenticationToken;

  end;

  [DNTypeName('System.Data.SqlClient.SqlAuthenticationToken')]
  DNSqlAuthenticationToken = interface(DDN.mscorlib.DNObject)
  ['{2BA7088E-C49D-3A0F-A85D-4F216B6166A2}']
  { getters & setters } 

    function get_ExpiresOn: DDN.mscorlib.DNDateTimeOffset;
    function get_AccessToken: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExpiresOn: DDN.mscorlib.DNDateTimeOffset read get_ExpiresOn;
    property AccessToken: string read get_AccessToken;
  end;

  TDNSqlAuthenticationToken = class(TDNGenericImport<DNSqlAuthenticationTokenClass, DNSqlAuthenticationToken>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyClass = interface(DNObjectClass)
  ['{1228D3A5-047C-5B0D-92E2-38181E5D7731}']
  { constructors } 

    {class} function init(connection: DNSqlConnection): DNSqlBulkCopy; overload;
    {class} function init(connection: DNSqlConnection; copyOptions: DNSqlBulkCopyOptions; externalTransaction: DNSqlTransaction): DNSqlBulkCopy; overload;
    {class} function init(connectionString: string): DNSqlBulkCopy; overload;
    {class} function init(connectionString: string; copyOptions: DNSqlBulkCopyOptions): DNSqlBulkCopy; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlBulkCopy')]
  DNSqlBulkCopy = interface(DDN.mscorlib.DNIDisposable)
  ['{57734AA7-5E91-3868-8716-17A3B9780BA6}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_BulkCopyTimeout: Int32;
    procedure set_BulkCopyTimeout(value: Int32);
    function get_EnableStreaming: Boolean;
    procedure set_EnableStreaming(value: Boolean);
    function get_ColumnMappings: DNSqlBulkCopyColumnMappingCollection;
    function get_DestinationTableName: string;
    procedure set_DestinationTableName(value: string);
    function get_NotifyAfter: Int32;
    procedure set_NotifyAfter(value: Int32);

  { events } 

    procedure add_SqlRowsCopied(value: DNSqlRowsCopiedEventHandler);
    procedure remove_SqlRowsCopied(value: DNSqlRowsCopiedEventHandler);

  { methods } 

    procedure WriteToServer(reader: DNDbDataReader); overload;
    procedure WriteToServer(reader: DNIDataReader); overload;
    procedure WriteToServer(table: DNDataTable); overload;
    procedure WriteToServer(table: DNDataTable; rowState: DNDataRowState); overload;
    procedure WriteToServer(rows: TArray<DNDataRow>); overload;
    function WriteToServerAsync(rows: TArray<DNDataRow>): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(reader: DNDbDataReader): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(reader: DNDbDataReader; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(reader: DNIDataReader): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(reader: DNIDataReader; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(table: DNDataTable): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(table: DNDataTable; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(table: DNDataTable; rowState: DNDataRowState): DDN.mscorlib.DNTask; overload;
    function WriteToServerAsync(table: DNDataTable; rowState: DNDataRowState; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    function WriteToServerAsync(rows: TArray<DNDataRow>; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property BulkCopyTimeout: Int32 read get_BulkCopyTimeout write set_BulkCopyTimeout;
    property EnableStreaming: Boolean read get_EnableStreaming write set_EnableStreaming;
    property ColumnMappings: DNSqlBulkCopyColumnMappingCollection read get_ColumnMappings;
    property DestinationTableName: string read get_DestinationTableName write set_DestinationTableName;
    property NotifyAfter: Int32 read get_NotifyAfter write set_NotifyAfter;
  end;

  TDNSqlBulkCopy = class(TDNGenericImport<DNSqlBulkCopyClass, DNSqlBulkCopy>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlBulkCopyColumnMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A477E7A-B2C4-5C4F-B6BF-FD9E8A495B01}']
  { constructors } 

    {class} function init: DNSqlBulkCopyColumnMapping; overload;
    {class} function init(sourceColumn: string; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    {class} function init(sourceColumnOrdinal: Int32; destinationColumn: string): DNSqlBulkCopyColumnMapping; overload;
    {class} function init(sourceColumn: string; destinationOrdinal: Int32): DNSqlBulkCopyColumnMapping; overload;
    {class} function init(sourceColumnOrdinal: Int32; destinationOrdinal: Int32): DNSqlBulkCopyColumnMapping; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlBulkCopyColumnMapping')]
  DNSqlBulkCopyColumnMapping = interface(DDN.mscorlib.DNObject)
  ['{F38FDFF7-9580-30EA-9A4A-A47FA9B8579D}']
  { getters & setters } 

    function get_DestinationColumn: string;
    procedure set_DestinationColumn(value: string);
    function get_DestinationOrdinal: Int32;
    procedure set_DestinationOrdinal(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceOrdinal: Int32;
    procedure set_SourceOrdinal(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DestinationColumn: string read get_DestinationColumn write set_DestinationColumn;
    property DestinationOrdinal: Int32 read get_DestinationOrdinal write set_DestinationOrdinal;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceOrdinal: Int32 read get_SourceOrdinal write set_SourceOrdinal;
  end;

  TDNSqlBulkCopyColumnMapping = class(TDNGenericImport<DNSqlBulkCopyColumnMappingClass, DNSqlBulkCopyColumnMapping>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientLoggerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64189E45-81B5-5D7D-8AC5-8EC6A77582C9}']
  { constructors } 

    {class} function init: DNSqlClientLogger;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientLogger')]
  DNSqlClientLogger = interface(DDN.mscorlib.DNObject)
  ['{4BAAEB14-707D-3264-B28B-A37B7012AD88}']
  { getters & setters } 

    function get_IsLoggingEnabled: Boolean;

  { methods } 

    procedure LogInfo(&type: string; method: string; message: string);
    procedure LogError(&type: string; method: string; message: string);
    function LogAssert(value: Boolean; &type: string; method: string; message: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsLoggingEnabled: Boolean read get_IsLoggingEnabled;
  end;

  TDNSqlClientLogger = class(TDNGenericImport<DNSqlClientLoggerClass, DNSqlClientLogger>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientMetaDataCollectionNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A0B61192-D759-556C-A951-65776B6C3690}']
  { static fields getter & setter } 

   function __fakeFieldGet_Columns: string;
   function __fakeFieldGet_Databases: string;
   function __fakeFieldGet_ForeignKeys: string;
   function __fakeFieldGet_IndexColumns: string;
   function __fakeFieldGet_Indexes: string;
   function __fakeFieldGet_Parameters: string;
   function __fakeFieldGet_ProcedureColumns: string;
   function __fakeFieldGet_Procedures: string;
   function __fakeFieldGet_Tables: string;
   function __fakeFieldGet_UserDefinedTypes: string;
   function __fakeFieldGet_Users: string;
   function __fakeFieldGet_ViewColumns: string;
   function __fakeFieldGet_Views: string;

  { static fields } 

    {class} property Columns: string read __fakeFieldGet_Columns;
    {class} property Databases: string read __fakeFieldGet_Databases;
    {class} property ForeignKeys: string read __fakeFieldGet_ForeignKeys;
    {class} property IndexColumns: string read __fakeFieldGet_IndexColumns;
    {class} property Indexes: string read __fakeFieldGet_Indexes;
    {class} property Parameters: string read __fakeFieldGet_Parameters;
    {class} property ProcedureColumns: string read __fakeFieldGet_ProcedureColumns;
    {class} property Procedures: string read __fakeFieldGet_Procedures;
    {class} property Tables: string read __fakeFieldGet_Tables;
    {class} property UserDefinedTypes: string read __fakeFieldGet_UserDefinedTypes;
    {class} property Users: string read __fakeFieldGet_Users;
    {class} property ViewColumns: string read __fakeFieldGet_ViewColumns;
    {class} property Views: string read __fakeFieldGet_Views;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientMetaDataCollectionNames')]
  DNSqlClientMetaDataCollectionNames = interface(DDN.mscorlib.DNObject)
  ['{15984A17-E56C-3454-AC1A-B363CDDECE3C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlClientMetaDataCollectionNames = class(TDNGenericImport<DNSqlClientMetaDataCollectionNamesClass, DNSqlClientMetaDataCollectionNames>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionEnclaveProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0636B43D-3B0C-5D3A-8645-EB692270D29A}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionEnclaveProvider')]
  DNSqlColumnEncryptionEnclaveProvider = interface(DDN.mscorlib.DNObject)
  ['{9F73C055-7997-3654-BDA2-2F55FC8D8BB1}']
  { methods } 

    procedure GetEnclaveSession(serverName: string; attestationUrl: string; out sqlEnclaveSession: DNSqlEnclaveSession; out counter: Int64);
    function GetAttestationParameters: DNSqlEnclaveAttestationParameters;
    procedure CreateEnclaveSession(enclaveAttestationInfo: TArray<Byte>; clientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng; attestationUrl: string; servername: string; out sqlEnclaveSession: DNSqlEnclaveSession; out counter: Int64);
    procedure InvalidateEnclaveSession(serverName: string; enclaveAttestationUrl: string; enclaveSession: DNSqlEnclaveSession);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionEnclaveProvider = class(TDNGenericImport<DNSqlColumnEncryptionEnclaveProviderClass, DNSqlColumnEncryptionEnclaveProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionKeyStoreProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E90EA962-BDCF-52EA-BAEA-39C4F47CD0C8}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider')]
  DNSqlColumnEncryptionKeyStoreProvider = interface(DDN.mscorlib.DNObject)
  ['{646E24F4-8540-3AA6-A2E0-60458F6E96EF}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionKeyStoreProvider = class(TDNGenericImport<DNSqlColumnEncryptionKeyStoreProviderClass, DNSqlColumnEncryptionKeyStoreProvider>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCertificateStoreProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{B8B51DFD-7D44-58B9-B217-4FD1DE7A9AE5}']
  { constructors } 

    {class} function init: DNSqlColumnEncryptionCertificateStoreProvider;

  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider')]
  DNSqlColumnEncryptionCertificateStoreProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{D6655E9D-3A56-3F1C-A126-4B9DE18E6F38}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCertificateStoreProvider = class(TDNGenericImport<DNSqlColumnEncryptionCertificateStoreProviderClass, DNSqlColumnEncryptionCertificateStoreProvider>)
  public const
   ProviderName = 'MSSQL_CERTIFICATE_STORE';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCngProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{96EB1852-D628-5B64-90F3-28900438FCF9}']
  { constructors } 

    {class} function init: DNSqlColumnEncryptionCngProvider;

  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCngProvider')]
  DNSqlColumnEncryptionCngProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{3110E653-1689-3CD0-A5EC-1AF2CEE19911}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCngProvider = class(TDNGenericImport<DNSqlColumnEncryptionCngProviderClass, DNSqlColumnEncryptionCngProvider>)
  public const
   ProviderName = 'MSSQL_CNG_STORE';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlColumnEncryptionCspProviderClass = interface(DNSqlColumnEncryptionKeyStoreProviderClass)
  ['{085DE0C4-0A9B-576C-BFF0-D4F579D3C0DF}']
  { constructors } 

    {class} function init: DNSqlColumnEncryptionCspProvider;

  end;

  [DNTypeName('System.Data.SqlClient.SqlColumnEncryptionCspProvider')]
  DNSqlColumnEncryptionCspProvider = interface(DNSqlColumnEncryptionKeyStoreProvider)
  ['{B67DE20E-CF5F-3762-A4E2-39ADDBE5CCFD}']
  { methods } 

    function SignColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean): TArray<Byte>;
    function VerifyColumnMasterKeyMetadata(masterKeyPath: string; allowEnclaveComputations: Boolean; signature: TArray<Byte>): Boolean;
    function DecryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; encryptedColumnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function EncryptColumnEncryptionKey(masterKeyPath: string; encryptionAlgorithm: string; columnEncryptionKey: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlColumnEncryptionCspProvider = class(TDNGenericImport<DNSqlColumnEncryptionCspProviderClass, DNSqlColumnEncryptionCspProvider>)
  public const
   ProviderName = 'MSSQL_CSP_PROVIDER';
  end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCredentialClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E65E795-8FC1-5812-8149-412DEBA4EF7B}']
  { constructors } 

    {class} function init(userId: string; password: DDN.mscorlib.DNSecureString): DNSqlCredential;

  end;

  [DNTypeName('System.Data.SqlClient.SqlCredential')]
  DNSqlCredential = interface(DDN.mscorlib.DNObject)
  ['{8D53DB41-BFD1-3E10-9414-DF8D7A1CB2CE}']
  { getters & setters } 

    function get_UserId: string;
    function get_Password: DDN.mscorlib.DNSecureString;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserId: string read get_UserId;
    property Password: DDN.mscorlib.DNSecureString read get_Password;
  end;

  TDNSqlCredential = class(TDNGenericImport<DNSqlCredentialClass, DNSqlCredential>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSQLDebuggingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC0784DE-7976-5E8F-AE68-9A671B344113}']
  { constructors } 

    {class} function init: DNSQLDebugging;

  end;

  [DNTypeName('System.Data.SqlClient.SQLDebugging')]
  DNSQLDebugging = interface(DDN.mscorlib.DNObject)
  ['{AFEF65AD-4577-447A-A148-83ACADD3D4B9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSQLDebugging = class(TDNGenericImport<DNSQLDebuggingClass, DNSQLDebugging>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDependencyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89A4C3EF-90CF-5252-92A6-7CA9735C17DF}']
  { constructors } 

    {class} function init: DNSqlDependency; overload;
    {class} function init(command: DNSqlCommand): DNSqlDependency; overload;
    {class} function init(command: DNSqlCommand; options: string; timeout: Int32): DNSqlDependency; overload;

  { static methods } 

    {class} function Start(connectionString: string): Boolean; overload;
    {class} function Start(connectionString: string; queue: string): Boolean; overload;
    {class} function Stop(connectionString: string): Boolean; overload;
    {class} function Stop(connectionString: string; queue: string): Boolean; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlDependency')]
  DNSqlDependency = interface(DDN.mscorlib.DNObject)
  ['{3426F3A6-F249-3D9C-80EE-C5B0708DA11F}']
  { getters & setters } 

    function get_HasChanges: Boolean;
    function get_Id: string;

  { events } 

    procedure add_OnChange(value: DNOnChangeEventHandler);
    procedure remove_OnChange(value: DNOnChangeEventHandler);

  { methods } 

    procedure AddCommandDependency(command: DNSqlCommand);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasChanges: Boolean read get_HasChanges;
    property Id: string read get_Id;
  end;

  TDNSqlDependency = class(TDNGenericImport<DNSqlDependencyClass, DNSqlDependency>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlEnclaveAttestationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57FF4CDC-BDF5-5F76-945A-F66AFBFDE08E}']
  { constructors } 

    {class} function init(protocol: Int32; input: TArray<Byte>; clientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng): DNSqlEnclaveAttestationParameters;

  end;

  [DNTypeName('System.Data.SqlClient.SqlEnclaveAttestationParameters')]
  DNSqlEnclaveAttestationParameters = interface(DDN.mscorlib.DNObject)
  ['{E2D7782F-5C8D-3D37-9F7E-8642EA0D53B6}']
  { getters & setters } 

    function get_Protocol: Int32;
    function get_ClientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng;

  { methods } 

    function GetInput: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Protocol: Int32 read get_Protocol;
    property ClientDiffieHellmanKey: DDN.System.Core.DNECDiffieHellmanCng read get_ClientDiffieHellmanKey;
  end;

  TDNSqlEnclaveAttestationParameters = class(TDNGenericImport<DNSqlEnclaveAttestationParametersClass, DNSqlEnclaveAttestationParameters>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlEnclaveSessionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08727787-DA4B-554B-A8D5-2E6709598CE7}']
  { constructors } 

    {class} function init(sessionKey: TArray<Byte>; sessionId: Int64): DNSqlEnclaveSession;

  end;

  [DNTypeName('System.Data.SqlClient.SqlEnclaveSession')]
  DNSqlEnclaveSession = interface(DDN.mscorlib.DNObject)
  ['{2ADE2ADA-6EEA-3FDE-8060-76CF16B7C301}']
  { getters & setters } 

    function get_SessionId: Int64;

  { methods } 

    function GetSessionKey: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SessionId: Int64 read get_SessionId;
  end;

  TDNSqlEnclaveSession = class(TDNGenericImport<DNSqlEnclaveSessionClass, DNSqlEnclaveSession>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08B747E8-D736-5A73-BB28-8D0E63072594}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlError')]
  DNSqlError = interface(DDN.mscorlib.DNObject)
  ['{3300A145-13B0-3DFB-A833-E6DE462FAB99}']
  { getters & setters } 

    function get_Source: string;
    function get_Number: Int32;
    function get_State: Byte;
    function get_Class: Byte;
    function get_Server: string;
    function get_Message: string;
    function get_Procedure: string;
    function get_LineNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: string read get_Source;
    property Number: Int32 read get_Number;
    property State: Byte read get_State;
    property &Class: Byte read get_Class;
    property Server: string read get_Server;
    property Message: string read get_Message;
    property &Procedure: string read get_Procedure;
    property LineNumber: Int32 read get_LineNumber;
  end;

  TDNSqlError = class(TDNGenericImport<DNSqlErrorClass, DNSqlError>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlErrorCollectionClass = interface(DNObjectClass)
  ['{55018440-F371-5229-97E5-3A5E88D0F36D}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlErrorCollection')]
  DNSqlErrorCollection = interface(DDN.mscorlib.DNICollection)
  ['{0D3E24E8-3729-3195-8732-80902BC548FC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNSqlError;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNSqlError>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNSqlError read get_Item; default;
  end;

  TDNSqlErrorCollection = class(TDNGenericImport<DNSqlErrorCollectionClass, DNSqlErrorCollection>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBytesClass = interface(DNObjectClass)
  ['{3AD176CF-E8C3-5490-9208-7DB1326D4517}']
  { static getter & setter } 

    {class} function get_Null: DNSqlBytes;

  { constructors } 

    {class} function init: DNSqlBytes; overload;
    {class} function init(buffer: TArray<Byte>): DNSqlBytes; overload;
    {class} function init(value: DNSqlBinary): DNSqlBytes; overload;
    {class} function init(s: DDN.mscorlib.DNStream): DNSqlBytes; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlBytes read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlBytes')]
  DNSqlBytes = interface(DNINullable)
  ['{DFEA266A-B66D-341F-8DE1-ACAB8A9C6564}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Byte>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Byte>;
    function get_Item(offset: Int64): Byte;
    procedure set_Item(offset: Int64; value: Byte);
    function get_Storage: DNStorageState;
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);

  { methods } 

    procedure SetNull;
    procedure SetLength(value: Int64);
    function Read(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32): Int64;
    procedure Write(offset: Int64; buffer: TArray<Byte>; offsetInBuffer: Int32; count: Int32);
    function ToSqlBinary: DNSqlBinary;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Buffer: TArray<Byte> read get_Buffer;
    property Length: Int64 read get_Length;
    property MaxLength: Int64 read get_MaxLength;
    property Value: TArray<Byte> read get_Value;
    property Item[offset: Int64]: Byte read get_Item write set_Item; default;
    property Storage: DNStorageState read get_Storage;
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
  end;

  TDNSqlBytes = class(TDNGenericImport<DNSqlBytesClass, DNSqlBytes>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlCharsClass = interface(DNObjectClass)
  ['{402C3B2D-44A0-5FCC-92E5-902F2DEDD826}']
  { static getter & setter } 

    {class} function get_Null: DNSqlChars;

  { constructors } 

    {class} function init: DNSqlChars; overload;
    {class} function init(buffer: TArray<Char>): DNSqlChars; overload;
    {class} function init(value: DNSqlString): DNSqlChars; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlChars read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlChars')]
  DNSqlChars = interface(DNINullable)
  ['{445D8429-C2BC-30B2-94DF-D51131301951}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Buffer: TArray<Char>;
    function get_Length: Int64;
    function get_MaxLength: Int64;
    function get_Value: TArray<Char>;
    function get_Item(offset: Int64): Char;
    procedure set_Item(offset: Int64; value: Char);
    function get_Storage: DNStorageState;

  { methods } 

    procedure SetNull;
    procedure SetLength(value: Int64);
    function Read(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32): Int64;
    procedure Write(offset: Int64; buffer: TArray<Char>; offsetInBuffer: Int32; count: Int32);
    function ToSqlString: DNSqlString;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Buffer: TArray<Char> read get_Buffer;
    property Length: Int64 read get_Length;
    property MaxLength: Int64 read get_MaxLength;
    property Value: TArray<Char> read get_Value;
    property Item[offset: Int64]: Char read get_Item write set_Item; default;
    property Storage: DNStorageState read get_Storage;
  end;

  TDNSqlChars = class(TDNGenericImport<DNSqlCharsClass, DNSqlChars>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlXmlClass = interface(DNObjectClass)
  ['{2DA5915F-CEFB-54C3-8860-97DD634A514F}']
  { static getter & setter } 

    {class} function get_Null: DNSqlXml;

  { constructors } 

    {class} function init: DNSqlXml; overload;
    {class} function init(value: DDN.System.Xml.DNXmlReader): DNSqlXml; overload;
    {class} function init(value: DDN.mscorlib.DNStream): DNSqlXml; overload;

  { static methods } 

    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  { static propertys } 

    {class} property Null: DNSqlXml read get_Null;
  end;

  [DNTypeName('System.Data.SqlTypes.SqlXml')]
  DNSqlXml = interface(DNINullable)
  ['{D2B9B85D-34A6-3D8E-B78F-88919F51DF17}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;

  { methods } 

    function CreateReader: DDN.System.Xml.DNXmlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: string read get_Value;
  end;

  TDNSqlXml = class(TDNGenericImport<DNSqlXmlClass, DNSqlXml>) end;

  //-------------namespace: System.Data----------------
  DNTypedDataSetGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{424002BC-971E-549B-9E79-079006F30562}']
  { constructors } 

    {class} function init: DNTypedDataSetGenerator;

  { static methods } 

    {class} procedure Generate(dataSet: DNDataSet; codeNamespace: DDN.System.DNCodeNamespace; codeGen: DDN.System.DNICodeGenerator);
    {class} function GenerateIdName(name: string; codeGen: DDN.System.DNICodeGenerator): string;

  end;

  [DNTypeName('System.Data.TypedDataSetGenerator')]
  DNTypedDataSetGenerator = interface(DDN.mscorlib.DNObject)
  ['{6E1E89F6-487E-306B-8210-8E5812529515}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypedDataSetGenerator = class(TDNGenericImport<DNTypedDataSetGeneratorClass, DNTypedDataSetGenerator>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{89985335-8E9C-5B28-8478-0D1C0E5763BA}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatedEventArgs;

  end;

  [DNTypeName('System.Data.Common.RowUpdatedEventArgs')]
  DNRowUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E4D48765-DD05-3535-BED1-90F0D496B1A4}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNIDbCommand read get_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Row: DNDataRow read get_Row;
    property RowCount: Int32 read get_RowCount;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatedEventArgs = class(TDNGenericImport<DNRowUpdatedEventArgsClass, DNRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{F2D68EE2-75ED-50C3-BF19-98F72E1393C0}']
  { constructors } 

    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOdbcRowUpdatedEventArgs;

  end;

  [DNTypeName('System.Data.Odbc.OdbcRowUpdatedEventArgs')]
  DNOdbcRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{53700BD6-7A75-3375-9080-8DB368360D17}']
  { getters & setters } 

    function get_Command: DNOdbcCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNOdbcCommand read get_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Row: DNDataRow read get_Row;
    property RowCount: Int32 read get_RowCount;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOdbcRowUpdatedEventArgs = class(TDNGenericImport<DNOdbcRowUpdatedEventArgsClass, DNOdbcRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{56141D82-BAFA-5E86-B398-960869F2C9C6}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOleDbRowUpdatedEventArgs;

  end;

  [DNTypeName('System.Data.OleDb.OleDbRowUpdatedEventArgs')]
  DNOleDbRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{38DF6A4D-0373-34A1-9390-E7721215A819}']
  { getters & setters } 

    function get_Command: DNOleDbCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNOleDbCommand read get_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Row: DNDataRow read get_Row;
    property RowCount: Int32 read get_RowCount;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOleDbRowUpdatedEventArgs = class(TDNGenericImport<DNOleDbRowUpdatedEventArgsClass, DNOleDbRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowUpdatedEventArgsClass = interface(DNRowUpdatedEventArgsClass)
  ['{4ECDEFDA-047A-55CF-BE59-A558FFA247E4}']
  { constructors } 

    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNSqlRowUpdatedEventArgs;

  end;

  [DNTypeName('System.Data.SqlClient.SqlRowUpdatedEventArgs')]
  DNSqlRowUpdatedEventArgs = interface(DNRowUpdatedEventArgs)
  ['{FDDC357F-D7FC-3269-B46E-B015DD784F78}']
  { getters & setters } 

    function get_Command: DNSqlCommand;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_RecordsAffected: Int32;
    function get_Row: DNDataRow;
    function get_RowCount: Int32;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNSqlCommand read get_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Row: DNDataRow read get_Row;
    property RowCount: Int32 read get_RowCount;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNSqlRowUpdatedEventArgs = class(TDNGenericImport<DNSqlRowUpdatedEventArgsClass, DNSqlRowUpdatedEventArgs>) end;

  //-------------namespace: System.Data.Common----------------
  DNRowUpdatingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{1E3BE921-4ED7-52D7-9782-0CCCD4BB37A4}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNRowUpdatingEventArgs;

  end;

  [DNTypeName('System.Data.Common.RowUpdatingEventArgs')]
  DNRowUpdatingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BC6E44BB-A58E-3156-ACC2-50D167FCCF44}']
  { getters & setters } 

    function get_Command: DNIDbCommand;
    procedure set_Command(value: DNIDbCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNIDbCommand read get_Command write set_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property Row: DNDataRow read get_Row;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNRowUpdatingEventArgs = class(TDNGenericImport<DNRowUpdatingEventArgsClass, DNRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{160B0195-9D6A-5DB9-A9A1-33A63490242D}']
  { constructors } 

    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOdbcRowUpdatingEventArgs;

  end;

  [DNTypeName('System.Data.Odbc.OdbcRowUpdatingEventArgs')]
  DNOdbcRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{91EF26F3-E833-3246-B66F-94F20A490FE6}']
  { getters & setters } 

    function get_Command: DNOdbcCommand;
    procedure set_Command(value: DNOdbcCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNOdbcCommand read get_Command write set_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property Row: DNDataRow read get_Row;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOdbcRowUpdatingEventArgs = class(TDNGenericImport<DNOdbcRowUpdatingEventArgsClass, DNOdbcRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{E99F5526-9820-549C-9CB7-F932F6E70B40}']
  { constructors } 

    {class} function init(dataRow: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNOleDbRowUpdatingEventArgs;

  end;

  [DNTypeName('System.Data.OleDb.OleDbRowUpdatingEventArgs')]
  DNOleDbRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{EDB4D7FF-9268-3EF6-A9CB-6DABDD7DB263}']
  { getters & setters } 

    function get_Command: DNOleDbCommand;
    procedure set_Command(value: DNOleDbCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNOleDbCommand read get_Command write set_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property Row: DNDataRow read get_Row;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNOleDbRowUpdatingEventArgs = class(TDNGenericImport<DNOleDbRowUpdatingEventArgsClass, DNOleDbRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowUpdatingEventArgsClass = interface(DNRowUpdatingEventArgsClass)
  ['{ADFF2CC7-B2FA-57BD-83C1-A4DE3BE365F5}']
  { constructors } 

    {class} function init(row: DNDataRow; command: DNIDbCommand; statementType: DNStatementType; tableMapping: DNDataTableMapping): DNSqlRowUpdatingEventArgs;

  end;

  [DNTypeName('System.Data.SqlClient.SqlRowUpdatingEventArgs')]
  DNSqlRowUpdatingEventArgs = interface(DNRowUpdatingEventArgs)
  ['{64F42CA7-B456-3308-80B0-18D165B29007}']
  { getters & setters } 

    function get_Command: DNSqlCommand;
    procedure set_Command(value: DNSqlCommand);
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Row: DNDataRow;
    function get_StatementType: DNStatementType;
    function get_Status: DNUpdateStatus;
    procedure set_Status(value: DNUpdateStatus);
    function get_TableMapping: DNDataTableMapping;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DNSqlCommand read get_Command write set_Command;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property Row: DNDataRow read get_Row;
    property StatementType: DNStatementType read get_StatementType;
    property Status: DNUpdateStatus read get_Status write set_Status;
    property TableMapping: DNDataTableMapping read get_TableMapping;
  end;

  TDNSqlRowUpdatingEventArgs = class(TDNGenericImport<DNSqlRowUpdatingEventArgsClass, DNSqlRowUpdatingEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataColumnChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E093AF51-E23D-5B0E-BFF1-DEA4554E8CCC}']
  { constructors } 

    {class} function init(row: DNDataRow; column: DNDataColumn; value: DDN.mscorlib.DNObject): DNDataColumnChangeEventArgs;

  end;

  [DNTypeName('System.Data.DataColumnChangeEventArgs')]
  DNDataColumnChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F3D0A1DA-D027-3E0A-95CB-4CD3B25F3E9D}']
  { getters & setters } 

    function get_Column: DNDataColumn;
    function get_Row: DNDataRow;
    function get_ProposedValue: DDN.mscorlib.DNObject;
    procedure set_ProposedValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Column: DNDataColumn read get_Column;
    property Row: DNDataRow read get_Row;
    property ProposedValue: DDN.mscorlib.DNObject read get_ProposedValue write set_ProposedValue;
  end;

  TDNDataColumnChangeEventArgs = class(TDNGenericImport<DNDataColumnChangeEventArgsClass, DNDataColumnChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataRowChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EACF8D2A-F76A-5DCD-ADE6-3BD171C9C6F7}']
  { constructors } 

    {class} function init(row: DNDataRow; action: DNDataRowAction): DNDataRowChangeEventArgs;

  end;

  [DNTypeName('System.Data.DataRowChangeEventArgs')]
  DNDataRowChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BE27FF81-9AE9-3583-99C1-9D8F15D8832F}']
  { getters & setters } 

    function get_Row: DNDataRow;
    function get_Action: DNDataRowAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: DNDataRow read get_Row;
    property Action: DNDataRowAction read get_Action;
  end;

  TDNDataRowChangeEventArgs = class(TDNGenericImport<DNDataRowChangeEventArgsClass, DNDataRowChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableClearEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3FAA835A-6B33-5E6E-9249-759E8E8179BA}']
  { constructors } 

    {class} function init(dataTable: DNDataTable): DNDataTableClearEventArgs;

  end;

  [DNTypeName('System.Data.DataTableClearEventArgs')]
  DNDataTableClearEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1C828E83-1DA2-3ED3-A238-E68B1B66E5CF}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_TableName: string;
    function get_TableNamespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Table: DNDataTable read get_Table;
    property TableName: string read get_TableName;
    property TableNamespace: string read get_TableNamespace;
  end;

  TDNDataTableClearEventArgs = class(TDNGenericImport<DNDataTableClearEventArgsClass, DNDataTableClearEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNDataTableNewRowEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DD55550D-4643-5E2A-BFA7-33BDA30D720F}']
  { constructors } 

    {class} function init(dataRow: DNDataRow): DNDataTableNewRowEventArgs;

  end;

  [DNTypeName('System.Data.DataTableNewRowEventArgs')]
  DNDataTableNewRowEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{8DA50CAC-EA82-38BE-8041-D721195CBBAB}']
  { getters & setters } 

    function get_Row: DNDataRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: DNDataRow read get_Row;
  end;

  TDNDataTableNewRowEventArgs = class(TDNGenericImport<DNDataTableNewRowEventArgsClass, DNDataTableNewRowEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNFillErrorEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A7082645-C257-58BC-8E25-4B2074DA6356}']
  { constructors } 

    {class} function init(dataTable: DNDataTable; values: TArray<DDN.mscorlib.DNObject>): DNFillErrorEventArgs;

  end;

  [DNTypeName('System.Data.FillErrorEventArgs')]
  DNFillErrorEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{23695D73-5ED9-3965-90A8-66488560DF52}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_DataTable: DNDataTable;
    function get_Errors: DDN.mscorlib.DNException;
    procedure set_Errors(value: DDN.mscorlib.DNException);
    function get_Values: TArray<DDN.mscorlib.DNObject>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Continue: Boolean read get_Continue write set_Continue;
    property DataTable: DNDataTable read get_DataTable;
    property Errors: DDN.mscorlib.DNException read get_Errors write set_Errors;
    property Values: TArray<DDN.mscorlib.DNObject> read get_Values;
  end;

  TDNFillErrorEventArgs = class(TDNGenericImport<DNFillErrorEventArgsClass, DNFillErrorEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNMergeFailedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{609582C1-8731-5867-89A8-F23BF6C3B576}']
  { constructors } 

    {class} function init(table: DNDataTable; conflict: string): DNMergeFailedEventArgs;

  end;

  [DNTypeName('System.Data.MergeFailedEventArgs')]
  DNMergeFailedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{08B4397F-E667-341F-8B61-6303224951F2}']
  { getters & setters } 

    function get_Table: DNDataTable;
    function get_Conflict: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Table: DNDataTable read get_Table;
    property Conflict: string read get_Conflict;
  end;

  TDNMergeFailedEventArgs = class(TDNGenericImport<DNMergeFailedEventArgsClass, DNMergeFailedEventArgs>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{160DA715-EFFD-5C56-B980-D7EAC9039620}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcInfoMessageEventArgs')]
  DNOdbcInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{278F49B4-1D34-35F9-B853-AD9E5C0693CF}']
  { getters & setters } 

    function get_Errors: DNOdbcErrorCollection;
    function get_Message: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Errors: DNOdbcErrorCollection read get_Errors;
    property Message: string read get_Message;
  end;

  TDNOdbcInfoMessageEventArgs = class(TDNGenericImport<DNOdbcInfoMessageEventArgsClass, DNOdbcInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7BA4AD22-7E73-5E3E-9A5D-0FEC17EACC17}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbInfoMessageEventArgs')]
  DNOleDbInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F7FCAC61-B247-3EA0-A99E-9761E4FB85F5}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Errors: DNOleDbErrorCollection;
    function get_Message: string;
    function get_Source: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Errors: DNOleDbErrorCollection read get_Errors;
    property Message: string read get_Message;
    property Source: string read get_Source;
  end;

  TDNOleDbInfoMessageEventArgs = class(TDNGenericImport<DNOleDbInfoMessageEventArgsClass, DNOleDbInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlInfoMessageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{481F2F6B-6013-5B28-B3AF-FBDF5112B463}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlInfoMessageEventArgs')]
  DNSqlInfoMessageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD38BC5F-E6CA-35CF-9BCE-087D6285E1A5}']
  { getters & setters } 

    function get_Errors: DNSqlErrorCollection;
    function get_Message: string;
    function get_Source: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Errors: DNSqlErrorCollection read get_Errors;
    property Message: string read get_Message;
    property Source: string read get_Source;
  end;

  TDNSqlInfoMessageEventArgs = class(TDNGenericImport<DNSqlInfoMessageEventArgsClass, DNSqlInfoMessageEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlNotificationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A4BD358D-CFDA-55A3-B654-2D53532E78B5}']
  { constructors } 

    {class} function init(&type: DNSqlNotificationType; info: DNSqlNotificationInfo; source: DNSqlNotificationSource): DNSqlNotificationEventArgs;

  end;

  [DNTypeName('System.Data.SqlClient.SqlNotificationEventArgs')]
  DNSqlNotificationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EA5B7613-CB34-3120-AC57-58124910F1A9}']
  { getters & setters } 

    function get_Type: DNSqlNotificationType;
    function get_Info: DNSqlNotificationInfo;
    function get_Source: DNSqlNotificationSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNSqlNotificationType read get_Type;
    property Info: DNSqlNotificationInfo read get_Info;
    property Source: DNSqlNotificationSource read get_Source;
  end;

  TDNSqlNotificationEventArgs = class(TDNGenericImport<DNSqlNotificationEventArgsClass, DNSqlNotificationEventArgs>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlRowsCopiedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5B49A0E8-C46B-52FD-ADEE-583B28D5E1CA}']
  { constructors } 

    {class} function init(rowsCopied: Int64): DNSqlRowsCopiedEventArgs;

  end;

  [DNTypeName('System.Data.SqlClient.SqlRowsCopiedEventArgs')]
  DNSqlRowsCopiedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C6D8CE5F-556F-36DF-845D-AFA25B58F2A5}']
  { getters & setters } 

    function get_Abort: Boolean;
    procedure set_Abort(value: Boolean);
    function get_RowsCopied: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Abort: Boolean read get_Abort write set_Abort;
    property RowsCopied: Int64 read get_RowsCopied;
  end;

  TDNSqlRowsCopiedEventArgs = class(TDNGenericImport<DNSqlRowsCopiedEventArgsClass, DNSqlRowsCopiedEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStateChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{62F1B9D0-E4D8-5961-A5C4-37DC95CA1F4F}']
  { constructors } 

    {class} function init(originalState: DNConnectionState; currentState: DNConnectionState): DNStateChangeEventArgs;

  end;

  [DNTypeName('System.Data.StateChangeEventArgs')]
  DNStateChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1579DF95-26A0-392F-9B07-AFA8F2EC8639}']
  { getters & setters } 

    function get_CurrentState: DNConnectionState;
    function get_OriginalState: DNConnectionState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentState: DNConnectionState read get_CurrentState;
    property OriginalState: DNConnectionState read get_OriginalState;
  end;

  TDNStateChangeEventArgs = class(TDNGenericImport<DNStateChangeEventArgsClass, DNStateChangeEventArgs>) end;

  //-------------namespace: System.Data----------------
  DNStatementCompletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8AA5531F-E032-59BE-B470-0E1D4EC9BB32}']
  { constructors } 

    {class} function init(recordCount: Int32): DNStatementCompletedEventArgs;

  end;

  [DNTypeName('System.Data.StatementCompletedEventArgs')]
  DNStatementCompletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{965D4C7C-4A5F-31D4-BBE7-8700B9D563B7}']
  { getters & setters } 

    function get_RecordCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RecordCount: Int32 read get_RecordCount;
  end;

  TDNStatementCompletedEventArgs = class(TDNGenericImport<DNStatementCompletedEventArgsClass, DNStatementCompletedEventArgs>) end;

  //-------------namespace: Microsoft.SqlServer.Server----------------
  DNInvalidUdtExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{EC111D83-C8E9-5C18-A193-CCDE6188E558}']
  end;

  [DNTypeName('Microsoft.SqlServer.Server.InvalidUdtException')]
  DNInvalidUdtException = interface(DDN.mscorlib.DNSystemException)
  ['{5E0FFDED-B506-31B9-9323-C6FDDD7663E0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidUdtException = class(TDNGenericImport<DNInvalidUdtExceptionClass, DNInvalidUdtException>) end;

  //-------------namespace: System.Data----------------
  DNDataExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{DCA79D6D-7247-5D5F-8C3F-00AEE99AFCB0}']
  { constructors } 

    {class} function init: DNDataException; overload;
    {class} function init(s: string): DNDataException; overload;
    {class} function init(s: string; innerException: DDN.mscorlib.DNException): DNDataException; overload;

  end;

  [DNTypeName('System.Data.DataException')]
  DNDataException = interface(DDN.mscorlib.DNSystemException)
  ['{95332F7A-E0C0-3F4C-B43E-37A649E5D82F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDataException = class(TDNGenericImport<DNDataExceptionClass, DNDataException>) end;

  //-------------namespace: System.Data----------------
  DNConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{B4AE4F67-FBE7-59F6-93E7-88493B8EEFE8}']
  { constructors } 

    {class} function init: DNConstraintException; overload;
    {class} function init(s: string): DNConstraintException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNConstraintException; overload;

  end;

  [DNTypeName('System.Data.ConstraintException')]
  DNConstraintException = interface(DNDataException)
  ['{4F5DB157-1B87-3BFA-A646-EA9626CC305B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNConstraintException = class(TDNGenericImport<DNConstraintExceptionClass, DNConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNDeletedRowInaccessibleExceptionClass = interface(DNDataExceptionClass)
  ['{FF807492-9CA0-5209-8CC7-79286D0E9B36}']
  { constructors } 

    {class} function init: DNDeletedRowInaccessibleException; overload;
    {class} function init(s: string): DNDeletedRowInaccessibleException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNDeletedRowInaccessibleException; overload;

  end;

  [DNTypeName('System.Data.DeletedRowInaccessibleException')]
  DNDeletedRowInaccessibleException = interface(DNDataException)
  ['{EEAF5688-A1A4-3A06-9BD4-5D2CE72925A1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDeletedRowInaccessibleException = class(TDNGenericImport<DNDeletedRowInaccessibleExceptionClass, DNDeletedRowInaccessibleException>) end;

  //-------------namespace: System.Data----------------
  DNDuplicateNameExceptionClass = interface(DNDataExceptionClass)
  ['{1F635599-B4F7-560A-BD82-9E3764926E59}']
  { constructors } 

    {class} function init: DNDuplicateNameException; overload;
    {class} function init(s: string): DNDuplicateNameException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNDuplicateNameException; overload;

  end;

  [DNTypeName('System.Data.DuplicateNameException')]
  DNDuplicateNameException = interface(DNDataException)
  ['{35B3B69B-F044-38A4-B605-C7C0A305B5BB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDuplicateNameException = class(TDNGenericImport<DNDuplicateNameExceptionClass, DNDuplicateNameException>) end;

  //-------------namespace: System.Data----------------
  DNInRowChangingEventExceptionClass = interface(DNDataExceptionClass)
  ['{7E614671-D11E-5D8A-BE1F-07A03D9B1F7D}']
  { constructors } 

    {class} function init: DNInRowChangingEventException; overload;
    {class} function init(s: string): DNInRowChangingEventException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInRowChangingEventException; overload;

  end;

  [DNTypeName('System.Data.InRowChangingEventException')]
  DNInRowChangingEventException = interface(DNDataException)
  ['{10A5490A-C1C0-3E1F-A5F9-DB5B1277EA9D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInRowChangingEventException = class(TDNGenericImport<DNInRowChangingEventExceptionClass, DNInRowChangingEventException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidConstraintExceptionClass = interface(DNDataExceptionClass)
  ['{19521912-F8E0-5C32-888E-55944DA4A376}']
  { constructors } 

    {class} function init: DNInvalidConstraintException; overload;
    {class} function init(s: string): DNInvalidConstraintException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidConstraintException; overload;

  end;

  [DNTypeName('System.Data.InvalidConstraintException')]
  DNInvalidConstraintException = interface(DNDataException)
  ['{E5C5CFB3-1213-3B38-9C87-64C614F3F121}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidConstraintException = class(TDNGenericImport<DNInvalidConstraintExceptionClass, DNInvalidConstraintException>) end;

  //-------------namespace: System.Data----------------
  DNInvalidExpressionExceptionClass = interface(DNDataExceptionClass)
  ['{FF0025DA-14BE-5F10-B9C5-14DD08895A97}']
  { constructors } 

    {class} function init: DNInvalidExpressionException; overload;
    {class} function init(s: string): DNInvalidExpressionException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidExpressionException; overload;

  end;

  [DNTypeName('System.Data.InvalidExpressionException')]
  DNInvalidExpressionException = interface(DNDataException)
  ['{E3D6CB57-9EE1-32B6-8A2B-AB50D1936FD2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidExpressionException = class(TDNGenericImport<DNInvalidExpressionExceptionClass, DNInvalidExpressionException>) end;

  //-------------namespace: System.Data----------------
  DNEvaluateExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{87E2CD6F-5A80-5E67-B821-C60776F58FFE}']
  { constructors } 

    {class} function init: DNEvaluateException; overload;
    {class} function init(s: string): DNEvaluateException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEvaluateException; overload;

  end;

  [DNTypeName('System.Data.EvaluateException')]
  DNEvaluateException = interface(DNInvalidExpressionException)
  ['{62788F22-F1CE-3059-8384-7AC4AFCF6BDA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEvaluateException = class(TDNGenericImport<DNEvaluateExceptionClass, DNEvaluateException>) end;

  //-------------namespace: System.Data----------------
  DNSyntaxErrorExceptionClass = interface(DNInvalidExpressionExceptionClass)
  ['{BA387326-FAE3-593B-91D4-39FD83844E69}']
  { constructors } 

    {class} function init: DNSyntaxErrorException; overload;
    {class} function init(s: string): DNSyntaxErrorException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSyntaxErrorException; overload;

  end;

  [DNTypeName('System.Data.SyntaxErrorException')]
  DNSyntaxErrorException = interface(DNInvalidExpressionException)
  ['{0D4EEFDA-E8FC-392D-A2CC-0EC26C4A25F4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSyntaxErrorException = class(TDNGenericImport<DNSyntaxErrorExceptionClass, DNSyntaxErrorException>) end;

  //-------------namespace: System.Data----------------
  DNMissingPrimaryKeyExceptionClass = interface(DNDataExceptionClass)
  ['{13DC3B41-8488-56C1-988A-91F94E2C4F3B}']
  { constructors } 

    {class} function init: DNMissingPrimaryKeyException; overload;
    {class} function init(s: string): DNMissingPrimaryKeyException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMissingPrimaryKeyException; overload;

  end;

  [DNTypeName('System.Data.MissingPrimaryKeyException')]
  DNMissingPrimaryKeyException = interface(DNDataException)
  ['{28292C62-2A34-3475-9254-2C9D16607AE0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingPrimaryKeyException = class(TDNGenericImport<DNMissingPrimaryKeyExceptionClass, DNMissingPrimaryKeyException>) end;

  //-------------namespace: System.Data----------------
  DNNoNullAllowedExceptionClass = interface(DNDataExceptionClass)
  ['{2F4AC106-B26B-5614-9694-2B2B43ECDB59}']
  { constructors } 

    {class} function init: DNNoNullAllowedException; overload;
    {class} function init(s: string): DNNoNullAllowedException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNNoNullAllowedException; overload;

  end;

  [DNTypeName('System.Data.NoNullAllowedException')]
  DNNoNullAllowedException = interface(DNDataException)
  ['{F44D3CD4-B00A-35CB-8517-48B88157FE44}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoNullAllowedException = class(TDNGenericImport<DNNoNullAllowedExceptionClass, DNNoNullAllowedException>) end;

  //-------------namespace: System.Data----------------
  DNReadOnlyExceptionClass = interface(DNDataExceptionClass)
  ['{BC446F6F-D209-5BD7-BE03-CA2A74A86A82}']
  { constructors } 

    {class} function init: DNReadOnlyException; overload;
    {class} function init(s: string): DNReadOnlyException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNReadOnlyException; overload;

  end;

  [DNTypeName('System.Data.ReadOnlyException')]
  DNReadOnlyException = interface(DNDataException)
  ['{D41F90F6-251A-3A54-B633-EBE4D14D6EA6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReadOnlyException = class(TDNGenericImport<DNReadOnlyExceptionClass, DNReadOnlyException>) end;

  //-------------namespace: System.Data----------------
  DNRowNotInTableExceptionClass = interface(DNDataExceptionClass)
  ['{E0C567B8-D8B1-5AC9-BAB8-FC9808BE68F2}']
  { constructors } 

    {class} function init: DNRowNotInTableException; overload;
    {class} function init(s: string): DNRowNotInTableException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNRowNotInTableException; overload;

  end;

  [DNTypeName('System.Data.RowNotInTableException')]
  DNRowNotInTableException = interface(DNDataException)
  ['{644C9CEC-12AD-373D-8F72-A407B4F8FF15}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRowNotInTableException = class(TDNGenericImport<DNRowNotInTableExceptionClass, DNRowNotInTableException>) end;

  //-------------namespace: System.Data----------------
  DNStrongTypingExceptionClass = interface(DNDataExceptionClass)
  ['{6379B64C-50EE-5DF4-9902-EF0D512EC335}']
  { constructors } 

    {class} function init: DNStrongTypingException; overload;
    {class} function init(message: string): DNStrongTypingException; overload;
    {class} function init(s: string; innerException: DDN.mscorlib.DNException): DNStrongTypingException; overload;

  end;

  [DNTypeName('System.Data.StrongTypingException')]
  DNStrongTypingException = interface(DNDataException)
  ['{0344E365-016C-346C-B029-84E053C98510}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNStrongTypingException = class(TDNGenericImport<DNStrongTypingExceptionClass, DNStrongTypingException>) end;

  //-------------namespace: System.Data----------------
  DNTypedDataSetGeneratorExceptionClass = interface(DNDataExceptionClass)
  ['{5E7A7584-B217-57B5-A3C9-83056183DA24}']
  { constructors } 

    {class} function init: DNTypedDataSetGeneratorException; overload;
    {class} function init(message: string): DNTypedDataSetGeneratorException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTypedDataSetGeneratorException; overload;
    {class} function init(list: DDN.mscorlib.DNArrayList): DNTypedDataSetGeneratorException; overload;

  end;

  [DNTypeName('System.Data.TypedDataSetGeneratorException')]
  DNTypedDataSetGeneratorException = interface(DNDataException)
  ['{7368AA2F-95D3-3E49-88D8-4566C0020FB0}']
  { getters & setters } 

    function get_ErrorList: DDN.mscorlib.DNArrayList;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorList: DDN.mscorlib.DNArrayList read get_ErrorList;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypedDataSetGeneratorException = class(TDNGenericImport<DNTypedDataSetGeneratorExceptionClass, DNTypedDataSetGeneratorException>) end;

  //-------------namespace: System.Data----------------
  DNVersionNotFoundExceptionClass = interface(DNDataExceptionClass)
  ['{08A44480-0613-50F6-BF52-B08F2A39AC98}']
  { constructors } 

    {class} function init: DNVersionNotFoundException; overload;
    {class} function init(s: string): DNVersionNotFoundException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNVersionNotFoundException; overload;

  end;

  [DNTypeName('System.Data.VersionNotFoundException')]
  DNVersionNotFoundException = interface(DNDataException)
  ['{B5F91CF5-31D5-311B-A974-09AE28E1C261}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNVersionNotFoundException = class(TDNGenericImport<DNVersionNotFoundExceptionClass, DNVersionNotFoundException>) end;

  //-------------namespace: System.Data----------------
  DNDBConcurrencyExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{AC5878F3-9C4C-5BD5-A7F7-E3C39A9ED264}']
  { constructors } 

    {class} function init: DNDBConcurrencyException; overload;
    {class} function init(message: string): DNDBConcurrencyException; overload;
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNDBConcurrencyException; overload;
    {class} function init(message: string; inner: DDN.mscorlib.DNException; dataRows: TArray<DNDataRow>): DNDBConcurrencyException; overload;

  end;

  [DNTypeName('System.Data.DBConcurrencyException')]
  DNDBConcurrencyException = interface(DDN.mscorlib.DNSystemException)
  ['{41AC822C-4053-3239-89CD-D09EAACBA9A9}']
  { getters & setters } 

    function get_Row: DNDataRow;
    procedure set_Row(value: DNDataRow);
    function get_RowCount: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure CopyToRows(&array: TArray<DNDataRow>); overload;
    procedure CopyToRows(&array: TArray<DNDataRow>; arrayIndex: Int32); overload;
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Row: DNDataRow read get_Row write set_Row;
    property RowCount: Int32 read get_RowCount;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDBConcurrencyException = class(TDNGenericImport<DNDBConcurrencyExceptionClass, DNDBConcurrencyException>) end;

  //-------------namespace: System.Data----------------
  DNOperationAbortedExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{4A232F22-A431-5790-B874-8D332F3507B7}']
  end;

  [DNTypeName('System.Data.OperationAbortedException')]
  DNOperationAbortedException = interface(DDN.mscorlib.DNSystemException)
  ['{73B53162-443B-3457-91A5-D7262A82BD92}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOperationAbortedException = class(TDNGenericImport<DNOperationAbortedExceptionClass, DNOperationAbortedException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTypeExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9625EB0F-3854-513A-9DEB-912C57E7FE35}']
  { constructors } 

    {class} function init: DNSqlTypeException; overload;
    {class} function init(message: string): DNSqlTypeException; overload;
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlTypeException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlTypeException')]
  DNSqlTypeException = interface(DDN.mscorlib.DNSystemException)
  ['{7678DA29-71E3-3FBA-A739-077120A6869D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlTypeException = class(TDNGenericImport<DNSqlTypeExceptionClass, DNSqlTypeException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlAlreadyFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{1EC3BB71-A3E3-59EF-B7E1-103E67845349}']
  { constructors } 

    {class} function init: DNSqlAlreadyFilledException; overload;
    {class} function init(message: string): DNSqlAlreadyFilledException; overload;
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlAlreadyFilledException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlAlreadyFilledException')]
  DNSqlAlreadyFilledException = interface(DNSqlTypeException)
  ['{E9E525F9-1084-3C76-A305-D7C371D88327}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlAlreadyFilledException = class(TDNGenericImport<DNSqlAlreadyFilledExceptionClass, DNSqlAlreadyFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNotFilledExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{55CE0BCE-3C74-5576-88B2-7774E1A6E73B}']
  { constructors } 

    {class} function init: DNSqlNotFilledException; overload;
    {class} function init(message: string): DNSqlNotFilledException; overload;
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlNotFilledException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlNotFilledException')]
  DNSqlNotFilledException = interface(DNSqlTypeException)
  ['{72878FEE-1263-3C0F-93B9-022BBEF05490}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlNotFilledException = class(TDNGenericImport<DNSqlNotFilledExceptionClass, DNSqlNotFilledException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlNullValueExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{4CEC667A-12E6-5029-9825-7D491314ABD6}']
  { constructors } 

    {class} function init: DNSqlNullValueException; overload;
    {class} function init(message: string): DNSqlNullValueException; overload;
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlNullValueException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlNullValueException')]
  DNSqlNullValueException = interface(DNSqlTypeException)
  ['{13C65320-A71B-3473-860D-DFDEBCCE58A6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlNullValueException = class(TDNGenericImport<DNSqlNullValueExceptionClass, DNSqlNullValueException>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTruncateExceptionClass = interface(DNSqlTypeExceptionClass)
  ['{213C7C6E-7316-50CE-80F5-F756A08A4FA2}']
  { constructors } 

    {class} function init: DNSqlTruncateException; overload;
    {class} function init(message: string): DNSqlTruncateException; overload;
    {class} function init(message: string; e: DDN.mscorlib.DNException): DNSqlTruncateException; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlTruncateException')]
  DNSqlTruncateException = interface(DNSqlTypeException)
  ['{03DD07B2-755B-3B9D-ADCE-6ABB51CAF504}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlTruncateException = class(TDNGenericImport<DNSqlTruncateExceptionClass, DNSqlTruncateException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{6F0ACD2C-DDFC-5B6E-AFEF-087170AD944A}']
  end;

  [DNTypeName('System.Data.Common.DbException')]
  DNDbException = interface(DDN.mscorlib.DNExternalException)
  ['{61AD995A-DA04-3139-BD92-150C4935184D}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDbException = class(TDNGenericImport<DNDbExceptionClass, DNDbException>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcExceptionClass = interface(DNDbExceptionClass)
  ['{6F22F2C1-7272-5F68-8728-2F33AB5FD7A4}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcException')]
  DNOdbcException = interface(DNDbException)
  ['{25963533-A5F8-3BE2-A6A8-952B0F856310}']
  { getters & setters } 

    function get_Errors: DNOdbcErrorCollection;
    function get_Source: string;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Errors: DNOdbcErrorCollection read get_Errors;
    property Source: string read get_Source;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdbcException = class(TDNGenericImport<DNOdbcExceptionClass, DNOdbcException>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbExceptionClass = interface(DNDbExceptionClass)
  ['{D1BA5C2A-6D6C-5DA1-988A-438E0789CBC5}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbException')]
  DNOleDbException = interface(DNDbException)
  ['{7D375F63-68C8-3955-8A75-A69EE8E96A8D}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Errors: DNOleDbErrorCollection;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Errors: DNOleDbErrorCollection read get_Errors;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOleDbException = class(TDNGenericImport<DNOleDbExceptionClass, DNOleDbException>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlExceptionClass = interface(DNDbExceptionClass)
  ['{80A5A752-E801-5490-91C5-550B2386497C}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlException')]
  DNSqlException = interface(DNDbException)
  ['{B85AC0F9-3A9B-3DAE-B9DB-96F517A25B1A}']
  { getters & setters } 

    function get_Errors: DNSqlErrorCollection;
    function get_ClientConnectionId: DDN.mscorlib.DNGuid;
    function get_Class: Byte;
    function get_LineNumber: Int32;
    function get_Number: Int32;
    function get_Procedure: string;
    function get_Server: string;
    function get_State: Byte;
    function get_Source: string;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(si: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Errors: DNSqlErrorCollection read get_Errors;
    property ClientConnectionId: DDN.mscorlib.DNGuid read get_ClientConnectionId;
    property &Class: Byte read get_Class;
    property LineNumber: Int32 read get_LineNumber;
    property Number: Int32 read get_Number;
    property &Procedure: string read get_Procedure;
    property Server: string read get_Server;
    property State: Byte read get_State;
    property Source: string read get_Source;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlException = class(TDNGenericImport<DNSqlExceptionClass, DNSqlException>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataAdapterClass = interface(DNObjectClass)
  ['{50CE4E0C-5D83-5588-8AEA-C7B1C12699A5}']
  end;

  [DNTypeName('System.Data.Common.DataAdapter')]
  DNDataAdapter = interface(DNObject)
  ['{FF7BB96D-D9D5-35F0-BE9F-61B28F6B42D4}']
  { getters & setters } 

    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>;
    function Fill(dataSet: DNDataSet): Int32;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDataAdapter = class(TDNGenericImport<DNDataAdapterClass, DNDataAdapter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataAdapterClass = interface(DNDataAdapterClass)
  ['{E2F24866-4CE2-5DE5-92BB-5847AD6F39C2}']
  end;

  [DNTypeName('System.Data.Common.DbDataAdapter')]
  DNDbDataAdapter = interface(DNDataAdapter)
  ['{709CDBCC-26E5-3D11-A73A-5AA9BF436DB4}']
  { getters & setters } 

    function get_DeleteCommand: DNDbCommand;
    procedure set_DeleteCommand(value: DNDbCommand);
    function get_InsertCommand: DNDbCommand;
    procedure set_InsertCommand(value: DNDbCommand);
    function get_SelectCommand: DNDbCommand;
    procedure set_SelectCommand(value: DNDbCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_UpdateCommand: DNDbCommand;
    procedure set_UpdateCommand(value: DNDbCommand);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    function Fill(dataSet: DNDataSet): Int32; overload;
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    function Fill(dataTable: DNDataTable): Int32; overload;
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32; overload;
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    function Update(dataTable: DNDataTable): Int32; overload;
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeleteCommand: DNDbCommand read get_DeleteCommand write set_DeleteCommand;
    property InsertCommand: DNDbCommand read get_InsertCommand write set_InsertCommand;
    property SelectCommand: DNDbCommand read get_SelectCommand write set_SelectCommand;
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property UpdateCommand: DNDbCommand read get_UpdateCommand write set_UpdateCommand;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbDataAdapter = class(TDNGenericImport<DNDbDataAdapterClass, DNDbDataAdapter>)
  public const
   DefaultSourceTableName = 'Table';
  end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{4A2CECDD-5203-528C-B34B-3077D060F7F3}']
  { constructors } 

    {class} function init: DNOdbcDataAdapter; overload;
    {class} function init(selectCommand: DNOdbcCommand): DNOdbcDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnection: DNOdbcConnection): DNOdbcDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnectionString: string): DNOdbcDataAdapter; overload;

  end;

  [DNTypeName('System.Data.Odbc.OdbcDataAdapter')]
  DNOdbcDataAdapter = interface(DNDbDataAdapter)
  ['{C84DB417-A3DD-3F46-B15E-21873853E324}']
  { getters & setters } 

    function get_DeleteCommand: DNOdbcCommand;
    procedure set_DeleteCommand(value: DNOdbcCommand);
    function get_InsertCommand: DNOdbcCommand;
    procedure set_InsertCommand(value: DNOdbcCommand);
    function get_SelectCommand: DNOdbcCommand;
    procedure set_SelectCommand(value: DNOdbcCommand);
    function get_UpdateCommand: DNOdbcCommand;
    procedure set_UpdateCommand(value: DNOdbcCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNOdbcRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNOdbcRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNOdbcRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNOdbcRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    function Fill(dataSet: DNDataSet): Int32; overload;
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    function Fill(dataTable: DNDataTable): Int32; overload;
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32; overload;
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    function Update(dataTable: DNDataTable): Int32; overload;
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeleteCommand: DNOdbcCommand read get_DeleteCommand write set_DeleteCommand;
    property InsertCommand: DNOdbcCommand read get_InsertCommand write set_InsertCommand;
    property SelectCommand: DNOdbcCommand read get_SelectCommand write set_SelectCommand;
    property UpdateCommand: DNOdbcCommand read get_UpdateCommand write set_UpdateCommand;
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcDataAdapter = class(TDNGenericImport<DNOdbcDataAdapterClass, DNOdbcDataAdapter>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{E7B972FA-EBBF-5D7A-99A4-B671DF3C4756}']
  { constructors } 

    {class} function init: DNOleDbDataAdapter; overload;
    {class} function init(selectCommand: DNOleDbCommand): DNOleDbDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnectionString: string): DNOleDbDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnection: DNOleDbConnection): DNOleDbDataAdapter; overload;

  end;

  [DNTypeName('System.Data.OleDb.OleDbDataAdapter')]
  DNOleDbDataAdapter = interface(DNDbDataAdapter)
  ['{01C0E727-85AB-3B18-9A25-85648F0DB50C}']
  { getters & setters } 

    function get_DeleteCommand: DNOleDbCommand;
    procedure set_DeleteCommand(value: DNOleDbCommand);
    function get_InsertCommand: DNOleDbCommand;
    procedure set_InsertCommand(value: DNOleDbCommand);
    function get_SelectCommand: DNOleDbCommand;
    procedure set_SelectCommand(value: DNOleDbCommand);
    function get_UpdateCommand: DNOleDbCommand;
    procedure set_UpdateCommand(value: DNOleDbCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNOleDbRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNOleDbRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNOleDbRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNOleDbRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Fill(dataTable: DNDataTable; ADODBRecordSet: DDN.mscorlib.DNObject): Int32; overload;
    function Fill(dataSet: DNDataSet; ADODBRecordSet: DDN.mscorlib.DNObject; srcTable: string): Int32; overload;
    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    function Fill(dataSet: DNDataSet): Int32; overload;
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    function Fill(dataTable: DNDataTable): Int32; overload;
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32; overload;
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    function Update(dataTable: DNDataTable): Int32; overload;
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeleteCommand: DNOleDbCommand read get_DeleteCommand write set_DeleteCommand;
    property InsertCommand: DNOleDbCommand read get_InsertCommand write set_InsertCommand;
    property SelectCommand: DNOleDbCommand read get_SelectCommand write set_SelectCommand;
    property UpdateCommand: DNOleDbCommand read get_UpdateCommand write set_UpdateCommand;
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbDataAdapter = class(TDNGenericImport<DNOleDbDataAdapterClass, DNOleDbDataAdapter>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDataAdapterClass = interface(DNDbDataAdapterClass)
  ['{C63B489B-515B-5A38-A872-42B4EF5882DA}']
  { constructors } 

    {class} function init: DNSqlDataAdapter; overload;
    {class} function init(selectCommand: DNSqlCommand): DNSqlDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnectionString: string): DNSqlDataAdapter; overload;
    {class} function init(selectCommandText: string; selectConnection: DNSqlConnection): DNSqlDataAdapter; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlDataAdapter')]
  DNSqlDataAdapter = interface(DNDbDataAdapter)
  ['{27A46983-6FE5-3792-9ABA-2BBA046C6F7B}']
  { getters & setters } 

    function get_DeleteCommand: DNSqlCommand;
    procedure set_DeleteCommand(value: DNSqlCommand);
    function get_InsertCommand: DNSqlCommand;
    procedure set_InsertCommand(value: DNSqlCommand);
    function get_SelectCommand: DNSqlCommand;
    procedure set_SelectCommand(value: DNSqlCommand);
    function get_UpdateBatchSize: Int32;
    procedure set_UpdateBatchSize(value: Int32);
    function get_UpdateCommand: DNSqlCommand;
    procedure set_UpdateCommand(value: DNSqlCommand);
    function get_AcceptChangesDuringFill: Boolean;
    procedure set_AcceptChangesDuringFill(value: Boolean);
    function get_AcceptChangesDuringUpdate: Boolean;
    procedure set_AcceptChangesDuringUpdate(value: Boolean);
    function get_ContinueUpdateOnError: Boolean;
    procedure set_ContinueUpdateOnError(value: Boolean);
    function get_FillLoadOption: DNLoadOption;
    procedure set_FillLoadOption(value: DNLoadOption);
    function get_MissingMappingAction: DNMissingMappingAction;
    procedure set_MissingMappingAction(value: DNMissingMappingAction);
    function get_MissingSchemaAction: DNMissingSchemaAction;
    procedure set_MissingSchemaAction(value: DNMissingSchemaAction);
    function get_ReturnProviderSpecificTypes: Boolean;
    procedure set_ReturnProviderSpecificTypes(value: Boolean);
    function get_TableMappings: DNDataTableMappingCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_RowUpdated(value: DNSqlRowUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNSqlRowUpdatedEventHandler);
    procedure add_RowUpdating(value: DNSqlRowUpdatingEventHandler);
    procedure remove_RowUpdating(value: DNSqlRowUpdatingEventHandler);
    procedure add_FillError(value: DNFillErrorEventHandler);
    procedure remove_FillError(value: DNFillErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function FillSchema(dataTable: DNDataTable; schemaType: DNSchemaType): DNDataTable; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType): TArray<DNDataTable>; overload;
    function FillSchema(dataSet: DNDataSet; schemaType: DNSchemaType; srcTable: string): TArray<DNDataTable>; overload;
    function Fill(dataSet: DNDataSet): Int32; overload;
    function Fill(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function Fill(dataSet: DNDataSet; startRecord: Int32; maxRecords: Int32; srcTable: string): Int32; overload;
    function Fill(dataTable: DNDataTable): Int32; overload;
    function Fill(startRecord: Int32; maxRecords: Int32; dataTables: TArray<DNDataTable>): Int32; overload;
    function GetFillParameters: TArray<DNIDataParameter>;
    function Update(dataSet: DNDataSet): Int32; overload;
    function Update(dataRows: TArray<DNDataRow>): Int32; overload;
    function Update(dataTable: DNDataTable): Int32; overload;
    function Update(dataSet: DNDataSet; srcTable: string): Int32; overload;
    function ShouldSerializeAcceptChangesDuringFill: Boolean;
    function ShouldSerializeFillLoadOption: Boolean;
    procedure ResetFillLoadOption;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DeleteCommand: DNSqlCommand read get_DeleteCommand write set_DeleteCommand;
    property InsertCommand: DNSqlCommand read get_InsertCommand write set_InsertCommand;
    property SelectCommand: DNSqlCommand read get_SelectCommand write set_SelectCommand;
    property UpdateBatchSize: Int32 read get_UpdateBatchSize write set_UpdateBatchSize;
    property UpdateCommand: DNSqlCommand read get_UpdateCommand write set_UpdateCommand;
    property AcceptChangesDuringFill: Boolean read get_AcceptChangesDuringFill write set_AcceptChangesDuringFill;
    property AcceptChangesDuringUpdate: Boolean read get_AcceptChangesDuringUpdate write set_AcceptChangesDuringUpdate;
    property ContinueUpdateOnError: Boolean read get_ContinueUpdateOnError write set_ContinueUpdateOnError;
    property FillLoadOption: DNLoadOption read get_FillLoadOption write set_FillLoadOption;
    property MissingMappingAction: DNMissingMappingAction read get_MissingMappingAction write set_MissingMappingAction;
    property MissingSchemaAction: DNMissingSchemaAction read get_MissingSchemaAction write set_MissingSchemaAction;
    property ReturnProviderSpecificTypes: Boolean read get_ReturnProviderSpecificTypes write set_ReturnProviderSpecificTypes;
    property TableMappings: DNDataTableMappingCollection read get_TableMappings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlDataAdapter = class(TDNGenericImport<DNSqlDataAdapterClass, DNSqlDataAdapter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandClass = interface(DNObjectClass)
  ['{E455D831-9C37-5B53-9804-FD467C53D206}']
  end;

  [DNTypeName('System.Data.Common.DbCommand')]
  DNDbCommand = interface(DNObject)
  ['{00E5A1B0-8B83-3CF0-B5EC-EE6EDC19D2D2}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNDbConnection;
    procedure set_Connection(value: DNDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNDbParameterCollection;
    function get_Transaction: DNDbTransaction;
    procedure set_Transaction(value: DNDbTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Cancel;
    function CreateParameter: DNDbParameter;
    function ExecuteNonQuery: Int32;
    function ExecuteReader: DNDbDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNDbDataReader; overload;
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    function ExecuteScalar: DDN.mscorlib.DNObject;
    procedure Prepare;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Connection: DNDbConnection read get_Connection write set_Connection;
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Parameters: DNDbParameterCollection read get_Parameters;
    property Transaction: DNDbTransaction read get_Transaction write set_Transaction;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbCommand = class(TDNGenericImport<DNDbCommandClass, DNDbCommand>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcCommandClass = interface(DNDbCommandClass)
  ['{C7753A3F-5AB4-5698-A387-E49233BBF875}']
  { constructors } 

    {class} function init: DNOdbcCommand; overload;
    {class} function init(cmdText: string): DNOdbcCommand; overload;
    {class} function init(cmdText: string; connection: DNOdbcConnection): DNOdbcCommand; overload;
    {class} function init(cmdText: string; connection: DNOdbcConnection; transaction: DNOdbcTransaction): DNOdbcCommand; overload;

  end;

  [DNTypeName('System.Data.Odbc.OdbcCommand')]
  DNOdbcCommand = interface(DNDbCommand)
  ['{C24C1018-CD7F-3757-97D9-7F825DE347DC}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNOdbcConnection;
    procedure set_Connection(value: DNOdbcConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNOdbcParameterCollection;
    function get_Transaction: DNOdbcTransaction;
    procedure set_Transaction(value: DNOdbcTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Cancel;
    procedure ResetCommandTimeout;
    function CreateParameter: DNOdbcParameter;
    function ExecuteNonQuery: Int32;
    function ExecuteReader: DNOdbcDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNOdbcDataReader; overload;
    function ExecuteScalar: DDN.mscorlib.DNObject;
    procedure Prepare;
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Connection: DNOdbcConnection read get_Connection write set_Connection;
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Parameters: DNOdbcParameterCollection read get_Parameters;
    property Transaction: DNOdbcTransaction read get_Transaction write set_Transaction;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcCommand = class(TDNGenericImport<DNOdbcCommandClass, DNOdbcCommand>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbCommandClass = interface(DNDbCommandClass)
  ['{3A2CB0B2-4101-5FB1-87AD-B7F8BD8CBEC5}']
  { constructors } 

    {class} function init: DNOleDbCommand; overload;
    {class} function init(cmdText: string): DNOleDbCommand; overload;
    {class} function init(cmdText: string; connection: DNOleDbConnection): DNOleDbCommand; overload;
    {class} function init(cmdText: string; connection: DNOleDbConnection; transaction: DNOleDbTransaction): DNOleDbCommand; overload;

  end;

  [DNTypeName('System.Data.OleDb.OleDbCommand')]
  DNOleDbCommand = interface(DNDbCommand)
  ['{8297BC84-C7C9-3FF2-82F8-076658B9225A}']
  { getters & setters } 

    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_Connection: DNOleDbConnection;
    procedure set_Connection(value: DNOleDbConnection);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNOleDbParameterCollection;
    function get_Transaction: DNOleDbTransaction;
    procedure set_Transaction(value: DNOleDbTransaction);
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ResetCommandTimeout;
    procedure Cancel;
    function Clone: DNOleDbCommand;
    function CreateParameter: DNOleDbParameter;
    function ExecuteReader: DNOleDbDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNOleDbDataReader; overload;
    function ExecuteNonQuery: Int32;
    function ExecuteScalar: DDN.mscorlib.DNObject;
    procedure Prepare;
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNDbDataReader>; overload;
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CommandText: string read get_CommandText write set_CommandText;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property Connection: DNOleDbConnection read get_Connection write set_Connection;
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Parameters: DNOleDbParameterCollection read get_Parameters;
    property Transaction: DNOleDbTransaction read get_Transaction write set_Transaction;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbCommand = class(TDNGenericImport<DNOleDbCommandClass, DNOleDbCommand>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCommandClass = interface(DNDbCommandClass)
  ['{CC985FF6-C9B0-52BF-902E-E57FAEBF1EAC}']
  { constructors } 

    {class} function init: DNSqlCommand; overload;
    {class} function init(cmdText: string): DNSqlCommand; overload;
    {class} function init(cmdText: string; connection: DNSqlConnection): DNSqlCommand; overload;
    {class} function init(cmdText: string; connection: DNSqlConnection; transaction: DNSqlTransaction): DNSqlCommand; overload;
    {class} function init(cmdText: string; connection: DNSqlConnection; transaction: DNSqlTransaction; columnEncryptionSetting: DNSqlCommandColumnEncryptionSetting): DNSqlCommand; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlCommand')]
  DNSqlCommand = interface(DNDbCommand)
  ['{227D56B1-F0A1-3A78-BCE9-3C145295413D}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    procedure set_Connection(value: DNSqlConnection);
    function get_NotificationAutoEnlist: Boolean;
    procedure set_NotificationAutoEnlist(value: Boolean);
    function get_Notification: DNSqlNotificationRequest;
    procedure set_Notification(value: DNSqlNotificationRequest);
    function get_Transaction: DNSqlTransaction;
    procedure set_Transaction(value: DNSqlTransaction);
    function get_CommandText: string;
    procedure set_CommandText(value: string);
    function get_ColumnEncryptionSetting: DNSqlCommandColumnEncryptionSetting;
    function get_CommandTimeout: Int32;
    procedure set_CommandTimeout(value: Int32);
    function get_CommandType: DNCommandType;
    procedure set_CommandType(value: DNCommandType);
    function get_DesignTimeVisible: Boolean;
    procedure set_DesignTimeVisible(value: Boolean);
    function get_Parameters: DNSqlParameterCollection;
    function get_UpdatedRowSource: DNUpdateRowSource;
    procedure set_UpdatedRowSource(value: DNUpdateRowSource);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_StatementCompleted(value: DNStatementCompletedEventHandler);
    procedure remove_StatementCompleted(value: DNStatementCompletedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ResetCommandTimeout;
    procedure Prepare;
    procedure Cancel;
    function CreateParameter: DNSqlParameter;
    function ExecuteScalar: DDN.mscorlib.DNObject;
    function ExecuteNonQuery: Int32;
    function BeginExecuteNonQuery: DDN.mscorlib.DNIAsyncResult; overload;
    function BeginExecuteNonQuery(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndExecuteNonQuery(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function ExecuteXmlReader: DDN.System.Xml.DNXmlReader;
    function BeginExecuteXmlReader: DDN.mscorlib.DNIAsyncResult; overload;
    function BeginExecuteXmlReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndExecuteXmlReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.System.Xml.DNXmlReader;
    function BeginExecuteReader: DDN.mscorlib.DNIAsyncResult; overload;
    function BeginExecuteReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function ExecuteReader: DNSqlDataReader; overload;
    function ExecuteReader(behavior: DNCommandBehavior): DNSqlDataReader; overload;
    function BeginExecuteReader(behavior: DNCommandBehavior): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginExecuteReader(callback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject; behavior: DNCommandBehavior): DDN.mscorlib.DNIAsyncResult; overload;
    function EndExecuteReader(asyncResult: DDN.mscorlib.DNIAsyncResult): DNSqlDataReader;
    function ExecuteNonQueryAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteReaderAsync: DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    function ExecuteReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    function ExecuteReaderAsync(behavior: DNCommandBehavior; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNSqlDataReader>; overload;
    function ExecuteScalarAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    function ExecuteXmlReaderAsync: DDN.mscorlib.DNTask<DDN.System.Xml.DNXmlReader>; overload;
    function ExecuteXmlReaderAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.System.Xml.DNXmlReader>; overload;
    function Clone: DNSqlCommand;
    function ExecuteNonQueryAsync: DDN.mscorlib.DNTask<Int32>; overload;
    function ExecuteScalarAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Connection: DNSqlConnection read get_Connection write set_Connection;
    property NotificationAutoEnlist: Boolean read get_NotificationAutoEnlist write set_NotificationAutoEnlist;
    property Notification: DNSqlNotificationRequest read get_Notification write set_Notification;
    property Transaction: DNSqlTransaction read get_Transaction write set_Transaction;
    property CommandText: string read get_CommandText write set_CommandText;
    property ColumnEncryptionSetting: DNSqlCommandColumnEncryptionSetting read get_ColumnEncryptionSetting;
    property CommandTimeout: Int32 read get_CommandTimeout write set_CommandTimeout;
    property CommandType: DNCommandType read get_CommandType write set_CommandType;
    property DesignTimeVisible: Boolean read get_DesignTimeVisible write set_DesignTimeVisible;
    property Parameters: DNSqlParameterCollection read get_Parameters;
    property UpdatedRowSource: DNUpdateRowSource read get_UpdatedRowSource write set_UpdatedRowSource;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlCommand = class(TDNGenericImport<DNSqlCommandClass, DNSqlCommand>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbCommandBuilderClass = interface(DNObjectClass)
  ['{1CC1E454-A9F1-5AA6-8C86-8B46BD7F387B}']
  end;

  [DNTypeName('System.Data.Common.DbCommandBuilder')]
  DNDbCommandBuilder = interface(DNObject)
  ['{E3ED7AF0-DF9B-31CB-BBF1-0752C94F7459}']
  { getters & setters } 

    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_DataAdapter: DNDbDataAdapter;
    procedure set_DataAdapter(value: DNDbDataAdapter);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RefreshSchema;
    function GetInsertCommand: DNDbCommand; overload;
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function GetUpdateCommand: DNDbCommand; overload;
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function GetDeleteCommand: DNDbCommand; overload;
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNDbCommand; overload;
    function QuoteIdentifier(unquotedIdentifier: string): string;
    function UnquoteIdentifier(quotedIdentifier: string): string;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    property DataAdapter: DNDbDataAdapter read get_DataAdapter write set_DataAdapter;
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbCommandBuilder = class(TDNGenericImport<DNDbCommandBuilderClass, DNDbCommandBuilder>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{EE20785E-84E4-5F70-8C13-7ACA63D3CAD0}']
  { constructors } 

    {class} function init: DNOdbcCommandBuilder; overload;
    {class} function init(adapter: DNOdbcDataAdapter): DNOdbcCommandBuilder; overload;

  { static methods } 

    {class} procedure DeriveParameters(command: DNOdbcCommand);

  end;

  [DNTypeName('System.Data.Odbc.OdbcCommandBuilder')]
  DNOdbcCommandBuilder = interface(DNDbCommandBuilder)
  ['{B3070EF9-1EB5-3D69-A515-4BC58D761A8C}']
  { getters & setters } 

    function get_DataAdapter: DNOdbcDataAdapter;
    procedure set_DataAdapter(value: DNOdbcDataAdapter);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function QuoteIdentifier(unquotedIdentifier: string): string; overload;
    function UnquoteIdentifier(quotedIdentifier: string): string; overload;
    function GetInsertCommand: DNOdbcCommand; overload;
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    function GetUpdateCommand: DNOdbcCommand; overload;
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    function GetDeleteCommand: DNOdbcCommand; overload;
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNOdbcCommand; overload;
    function QuoteIdentifier(unquotedIdentifier: string; connection: DNOdbcConnection): string; overload;
    function UnquoteIdentifier(quotedIdentifier: string; connection: DNOdbcConnection): string; overload;
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataAdapter: DNOdbcDataAdapter read get_DataAdapter write set_DataAdapter;
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcCommandBuilder = class(TDNGenericImport<DNOdbcCommandBuilderClass, DNOdbcCommandBuilder>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{8F35996D-C13E-554B-9A52-D54D292B0915}']
  { constructors } 

    {class} function init: DNOleDbCommandBuilder; overload;
    {class} function init(adapter: DNOleDbDataAdapter): DNOleDbCommandBuilder; overload;

  { static methods } 

    {class} procedure DeriveParameters(command: DNOleDbCommand);

  end;

  [DNTypeName('System.Data.OleDb.OleDbCommandBuilder')]
  DNOleDbCommandBuilder = interface(DNDbCommandBuilder)
  ['{37CBF99A-AA08-36FD-94A1-56786EADC080}']
  { getters & setters } 

    function get_DataAdapter: DNOleDbDataAdapter;
    procedure set_DataAdapter(value: DNOleDbDataAdapter);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function QuoteIdentifier(unquotedIdentifier: string): string; overload;
    function UnquoteIdentifier(quotedIdentifier: string): string; overload;
    function GetInsertCommand: DNOleDbCommand; overload;
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    function GetUpdateCommand: DNOleDbCommand; overload;
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    function GetDeleteCommand: DNOleDbCommand; overload;
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNOleDbCommand; overload;
    function QuoteIdentifier(unquotedIdentifier: string; connection: DNOleDbConnection): string; overload;
    function UnquoteIdentifier(quotedIdentifier: string; connection: DNOleDbConnection): string; overload;
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataAdapter: DNOleDbDataAdapter read get_DataAdapter write set_DataAdapter;
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbCommandBuilder = class(TDNGenericImport<DNOleDbCommandBuilderClass, DNOleDbCommandBuilder>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlCommandBuilderClass = interface(DNDbCommandBuilderClass)
  ['{B2CCD562-232F-5195-99E9-3B71EE7DF204}']
  { constructors } 

    {class} function init: DNSqlCommandBuilder; overload;
    {class} function init(adapter: DNSqlDataAdapter): DNSqlCommandBuilder; overload;

  { static methods } 

    {class} procedure DeriveParameters(command: DNSqlCommand);

  end;

  [DNTypeName('System.Data.SqlClient.SqlCommandBuilder')]
  DNSqlCommandBuilder = interface(DNDbCommandBuilder)
  ['{DF7ADC5F-E439-3079-A773-8954876B15BE}']
  { getters & setters } 

    function get_CatalogLocation: DNCatalogLocation;
    procedure set_CatalogLocation(value: DNCatalogLocation);
    function get_CatalogSeparator: string;
    procedure set_CatalogSeparator(value: string);
    function get_DataAdapter: DNSqlDataAdapter;
    procedure set_DataAdapter(value: DNSqlDataAdapter);
    function get_QuotePrefix: string;
    procedure set_QuotePrefix(value: string);
    function get_QuoteSuffix: string;
    procedure set_QuoteSuffix(value: string);
    function get_SchemaSeparator: string;
    procedure set_SchemaSeparator(value: string);
    function get_ConflictOption: DNConflictOption;
    procedure set_ConflictOption(value: DNConflictOption);
    function get_SetAllValues: Boolean;
    procedure set_SetAllValues(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetInsertCommand: DNSqlCommand; overload;
    function GetInsertCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    function GetUpdateCommand: DNSqlCommand; overload;
    function GetUpdateCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    function GetDeleteCommand: DNSqlCommand; overload;
    function GetDeleteCommand(useColumnsForParameterNames: Boolean): DNSqlCommand; overload;
    function QuoteIdentifier(unquotedIdentifier: string): string;
    function UnquoteIdentifier(quotedIdentifier: string): string;
    procedure RefreshSchema;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CatalogLocation: DNCatalogLocation read get_CatalogLocation write set_CatalogLocation;
    property CatalogSeparator: string read get_CatalogSeparator write set_CatalogSeparator;
    property DataAdapter: DNSqlDataAdapter read get_DataAdapter write set_DataAdapter;
    property QuotePrefix: string read get_QuotePrefix write set_QuotePrefix;
    property QuoteSuffix: string read get_QuoteSuffix write set_QuoteSuffix;
    property SchemaSeparator: string read get_SchemaSeparator write set_SchemaSeparator;
    property ConflictOption: DNConflictOption read get_ConflictOption write set_ConflictOption;
    property SetAllValues: Boolean read get_SetAllValues write set_SetAllValues;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlCommandBuilder = class(TDNGenericImport<DNSqlCommandBuilderClass, DNSqlCommandBuilder>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbConnectionClass = interface(DNObjectClass)
  ['{62B283BB-1B18-5941-AA2D-22A2D3D7B8B5}']
  end;

  [DNTypeName('System.Data.Common.DbConnection')]
  DNDbConnection = interface(DNObject)
  ['{4E5995F3-B839-3C89-9E92-54B67A829185}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function BeginTransaction: DNDbTransaction; overload;
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNDbTransaction; overload;
    procedure Close;
    procedure ChangeDatabase(databaseName: string);
    function CreateCommand: DNDbCommand;
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    function GetSchema: DNDataTable; overload;
    function GetSchema(collectionName: string): DNDataTable; overload;
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    procedure Open;
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property DataSource: string read get_DataSource;
    property ServerVersion: string read get_ServerVersion;
    property State: DNConnectionState read get_State;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDbConnection = class(TDNGenericImport<DNDbConnectionClass, DNDbConnection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcConnectionClass = interface(DNDbConnectionClass)
  ['{CBA938C7-5777-5BAA-A324-FFDE3530E9D7}']
  { constructors } 

    {class} function init(connectionString: string): DNOdbcConnection; overload;
    {class} function init: DNOdbcConnection; overload;

  { static methods } 

    {class} procedure ReleaseObjectPool;

  end;

  [DNTypeName('System.Data.Odbc.OdbcConnection')]
  DNOdbcConnection = interface(DNDbConnection)
  ['{67D42822-4C6B-372D-9939-D59B17EBD29D}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    procedure set_ConnectionTimeout(value: Int32);
    function get_Database: string;
    function get_DataSource: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Driver: string;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNOdbcInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNOdbcInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ChangeDatabase(value: string);
    procedure Close;
    function GetSchema: DNDataTable; overload;
    function GetSchema(collectionName: string): DNDataTable; overload;
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    function BeginTransaction: DNOdbcTransaction; overload;
    function BeginTransaction(isolevel: DNIsolationLevel): DNOdbcTransaction; overload;
    function CreateCommand: DNOdbcCommand;
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    procedure Open;
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout write set_ConnectionTimeout;
    property Database: string read get_Database;
    property DataSource: string read get_DataSource;
    property ServerVersion: string read get_ServerVersion;
    property State: DNConnectionState read get_State;
    property Driver: string read get_Driver;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOdbcConnection = class(TDNGenericImport<DNOdbcConnectionClass, DNOdbcConnection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbConnectionClass = interface(DNDbConnectionClass)
  ['{047A5A0F-EEC5-51A7-99FD-069EDB7AB0A5}']
  { constructors } 

    {class} function init(connectionString: string): DNOleDbConnection; overload;
    {class} function init: DNOleDbConnection; overload;

  { static methods } 

    {class} procedure ReleaseObjectPool;

  end;

  [DNTypeName('System.Data.OleDb.OleDbConnection')]
  DNOleDbConnection = interface(DNDbConnection)
  ['{FF833BE1-7559-39E3-8101-632D1EFCE029}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_Provider: string;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNOleDbInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Close;
    function GetSchema: DNDataTable; overload;
    function GetSchema(collectionName: string): DNDataTable; overload;
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    procedure ResetState;
    function BeginTransaction: DNOleDbTransaction; overload;
    function BeginTransaction(isolationLevel: DNIsolationLevel): DNOleDbTransaction; overload;
    procedure ChangeDatabase(value: string);
    function CreateCommand: DNOleDbCommand;
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    function GetOleDbSchemaTable(schema: DDN.mscorlib.DNGuid; restrictions: TArray<DDN.mscorlib.DNObject>): DNDataTable;
    procedure Open;
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property DataSource: string read get_DataSource;
    property Provider: string read get_Provider;
    property ServerVersion: string read get_ServerVersion;
    property State: DNConnectionState read get_State;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNOleDbConnection = class(TDNGenericImport<DNOleDbConnectionClass, DNOleDbConnection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlConnectionClass = interface(DNDbConnectionClass)
  ['{C469825F-AD4F-5E6A-A8BD-F229AF9A0051}']
  { static getter & setter } 

    {class} function get_ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>>;
    {class} function get_ColumnEncryptionQueryMetadataCacheEnabled: Boolean;
    {class} procedure set_ColumnEncryptionQueryMetadataCacheEnabled(value: Boolean);
    {class} function get_ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan;
    {class} procedure set_ColumnEncryptionKeyCacheTtl(value: DDN.mscorlib.DNTimeSpan);

  { constructors } 

    {class} function init(connectionString: string): DNSqlConnection; overload;
    {class} function init(connectionString: string; credential: DNSqlCredential): DNSqlConnection; overload;
    {class} function init: DNSqlConnection; overload;

  { static methods } 

    {class} procedure ClearAllPools;
    {class} procedure RegisterColumnEncryptionKeyStoreProviders(customProviders: DDN.mscorlib.DNIDictionary<string, DNSqlColumnEncryptionKeyStoreProvider>);
    {class} procedure ClearPool(connection: DNSqlConnection);
    {class} procedure ChangePassword(connectionString: string; newPassword: string); overload;
    {class} procedure ChangePassword(connectionString: string; credential: DNSqlCredential; newSecurePassword: DDN.mscorlib.DNSecureString); overload;

  { static propertys } 

    {class} property ColumnEncryptionTrustedMasterKeyPaths: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNIList<string>> read get_ColumnEncryptionTrustedMasterKeyPaths;
    {class} property ColumnEncryptionQueryMetadataCacheEnabled: Boolean read get_ColumnEncryptionQueryMetadataCacheEnabled write set_ColumnEncryptionQueryMetadataCacheEnabled;
    {class} property ColumnEncryptionKeyCacheTtl: DDN.mscorlib.DNTimeSpan read get_ColumnEncryptionKeyCacheTtl write set_ColumnEncryptionKeyCacheTtl;
  end;

  [DNTypeName('System.Data.SqlClient.SqlConnection')]
  DNSqlConnection = interface(DNDbConnection)
  ['{F8C85934-FC42-3A0A-AB23-EBA6D5B37B8A}']
  { getters & setters } 

    function get_StatisticsEnabled: Boolean;
    procedure set_StatisticsEnabled(value: Boolean);
    function get_AccessToken: string;
    procedure set_AccessToken(value: string);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ConnectionTimeout: Int32;
    function get_Database: string;
    function get_DataSource: string;
    function get_PacketSize: Int32;
    function get_ClientConnectionId: DDN.mscorlib.DNGuid;
    function get_ServerVersion: string;
    function get_State: DNConnectionState;
    function get_WorkstationId: string;
    function get_Credential: DNSqlCredential;
    procedure set_Credential(value: DNSqlCredential);
    function get_FireInfoMessageEventOnUserErrors: Boolean;
    procedure set_FireInfoMessageEventOnUserErrors(value: Boolean);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure remove_InfoMessage(value: DNSqlInfoMessageEventHandler);
    procedure add_StateChange(value: DNStateChangeEventHandler);
    procedure remove_StateChange(value: DNStateChangeEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetSchema: DNDataTable; overload;
    function GetSchema(collectionName: string): DNDataTable; overload;
    function GetSchema(collectionName: string; restrictionValues: TArray<string>): DNDataTable; overload;
    function BeginTransaction: DNSqlTransaction; overload;
    function BeginTransaction(iso: DNIsolationLevel): DNSqlTransaction; overload;
    function BeginTransaction(transactionName: string): DNSqlTransaction; overload;
    function BeginTransaction(iso: DNIsolationLevel; transactionName: string): DNSqlTransaction; overload;
    procedure ChangeDatabase(database: string);
    procedure Close;
    function CreateCommand: DNSqlCommand;
    procedure EnlistDistributedTransaction(transaction: DDN.System.EnterpriseServices.DNITransaction);
    procedure Open;
    function OpenAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure ResetStatistics;
    function RetrieveStatistics: DDN.mscorlib.DNIDictionary;
    procedure EnlistTransaction(transaction: DDN.System.Transactions.DNTransaction);
    function OpenAsync: DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StatisticsEnabled: Boolean read get_StatisticsEnabled write set_StatisticsEnabled;
    property AccessToken: string read get_AccessToken write set_AccessToken;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property ConnectionTimeout: Int32 read get_ConnectionTimeout;
    property Database: string read get_Database;
    property DataSource: string read get_DataSource;
    property PacketSize: Int32 read get_PacketSize;
    property ClientConnectionId: DDN.mscorlib.DNGuid read get_ClientConnectionId;
    property ServerVersion: string read get_ServerVersion;
    property State: DNConnectionState read get_State;
    property WorkstationId: string read get_WorkstationId;
    property Credential: DNSqlCredential read get_Credential write set_Credential;
    property FireInfoMessageEventOnUserErrors: Boolean read get_FireInfoMessageEventOnUserErrors write set_FireInfoMessageEventOnUserErrors;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSqlConnection = class(TDNGenericImport<DNSqlConnectionClass, DNSqlConnection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C5C847C1-5BCB-525C-B083-B05C3944BB3E}']
  { constructors } 

    {class} function init: DNDataColumnMapping; overload;
    {class} function init(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping; overload;

  { static methods } 

    {class} function GetDataColumnBySchemaAction(sourceColumn: string; dataSetColumn: string; dataTable: DNDataTable; dataType: DDN.mscorlib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;

  end;

  [DNTypeName('System.Data.Common.DataColumnMapping')]
  DNDataColumnMapping = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{39520FE3-6378-3299-AB11-6042EFBED6FE}']
  { getters & setters } 

    function get_DataSetColumn: string;
    procedure set_DataSetColumn(value: string);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);

  { methods } 

    function ToString: string;
    function GetDataColumnBySchemaAction(dataTable: DNDataTable; dataType: DDN.mscorlib.DNType; schemaAction: DNMissingSchemaAction): DNDataColumn; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataSetColumn: string read get_DataSetColumn write set_DataSetColumn;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
  end;

  TDNDataColumnMapping = class(TDNGenericImport<DNDataColumnMappingClass, DNDataColumnMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataColumnMappingCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{E22F8FA0-6B35-5896-B69A-BB82E59330AF}']
  { constructors } 

    {class} function init: DNDataColumnMappingCollection;

  { static methods } 

    {class} function GetDataColumn(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; dataType: DDN.mscorlib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    {class} function GetColumnMappingBySchemaAction(columnMappings: DNDataColumnMappingCollection; sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;

  end;

  [DNTypeName('System.Data.Common.DataColumnMappingCollection')]
  DNDataColumnMappingCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{CA59DC57-554D-3ED3-8CF4-AA921FD38D46}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataColumnMapping; overload;
    procedure set_Item(index: Int32; value: DNDataColumnMapping); overload;
    function get_Item(sourceColumn: string): DNDataColumnMapping; overload;
    procedure set_Item(sourceColumn: string; value: DNDataColumnMapping); overload;

  { methods } 

    function &Contains(value: string): Boolean; overload;
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(sourceColumn: string); overload;
    function Add(sourceColumn: string; dataSetColumn: string): DNDataColumnMapping;
    procedure AddRange(values: TArray<DNDataColumnMapping>); overload;
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    procedure CopyTo(&array: TArray<DNDataColumnMapping>; index: Int32); overload;
    function GetByDataSetColumn(value: string): DNDataColumnMapping;
    function IndexOf(sourceColumn: string): Int32; overload;
    function IndexOfDataSetColumn(dataSetColumn: string): Int32;
    procedure Insert(index: Int32; value: DNDataColumnMapping); overload;
    procedure Remove(value: DNDataColumnMapping);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataColumnMapping read get_Item write set_Item; default;
    property Item[sourceColumn: string]: DNDataColumnMapping read get_Item write set_Item; default;
  end;

  TDNDataColumnMappingCollection = class(TDNGenericImport<DNDataColumnMappingCollectionClass, DNDataColumnMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{B5260371-A96F-52A8-A3FC-1093A39A23E4}']
  { constructors } 

    {class} function init: DNDataTableMapping; overload;
    {class} function init(sourceTable: string; dataSetTable: string): DNDataTableMapping; overload;
    {class} function init(sourceTable: string; dataSetTable: string; columnMappings: TArray<DNDataColumnMapping>): DNDataTableMapping; overload;

  end;

  [DNTypeName('System.Data.Common.DataTableMapping')]
  DNDataTableMapping = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{4A427B61-A253-3B5D-AB26-CF8CB7A391C0}']
  { getters & setters } 

    function get_ColumnMappings: DNDataColumnMappingCollection;
    function get_DataSetTable: string;
    procedure set_DataSetTable(value: string);
    function get_SourceTable: string;
    procedure set_SourceTable(value: string);

  { methods } 

    function ToString: string;
    function GetDataColumn(sourceColumn: string; dataType: DDN.mscorlib.DNType; dataTable: DNDataTable; mappingAction: DNMissingMappingAction; schemaAction: DNMissingSchemaAction): DNDataColumn;
    function GetColumnMappingBySchemaAction(sourceColumn: string; mappingAction: DNMissingMappingAction): DNDataColumnMapping;
    function GetDataTableBySchemaAction(dataSet: DNDataSet; schemaAction: DNMissingSchemaAction): DNDataTable;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ColumnMappings: DNDataColumnMappingCollection read get_ColumnMappings;
    property DataSetTable: string read get_DataSetTable write set_DataSetTable;
    property SourceTable: string read get_SourceTable write set_SourceTable;
  end;

  TDNDataTableMapping = class(TDNGenericImport<DNDataTableMappingClass, DNDataTableMapping>) end;

  //-------------namespace: System.Data.Common----------------
  DNDataTableMappingCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{97C165F2-70FB-5562-80D6-5536FEA628E6}']
  { constructors } 

    {class} function init: DNDataTableMappingCollection;

  { static methods } 

    {class} function GetTableMappingBySchemaAction(tableMappings: DNDataTableMappingCollection; sourceTable: string; dataSetTable: string; mappingAction: DNMissingMappingAction): DNDataTableMapping;

  end;

  [DNTypeName('System.Data.Common.DataTableMappingCollection')]
  DNDataTableMappingCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{F3117EC1-489D-39B3-B89E-FF106E64D3E6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNDataTableMapping; overload;
    procedure set_Item(index: Int32; value: DNDataTableMapping); overload;
    function get_Item(sourceTable: string): DNDataTableMapping; overload;
    procedure set_Item(sourceTable: string; value: DNDataTableMapping); overload;

  { methods } 

    function &Contains(value: string): Boolean; overload;
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(sourceTable: string); overload;
    procedure AddRange(values: TArray<DNDataTableMapping>); overload;
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function Add(sourceTable: string; dataSetTable: string): DNDataTableMapping;
    procedure CopyTo(&array: TArray<DNDataTableMapping>; index: Int32); overload;
    function GetByDataSetTable(dataSetTable: string): DNDataTableMapping;
    function IndexOf(sourceTable: string): Int32; overload;
    function IndexOfDataSetTable(dataSetTable: string): Int32;
    procedure Insert(index: Int32; value: DNDataTableMapping); overload;
    procedure Remove(value: DNDataTableMapping);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDataTableMapping read get_Item write set_Item; default;
    property Item[sourceTable: string]: DNDataTableMapping read get_Item write set_Item; default;
  end;

  TDNDataTableMappingCollection = class(TDNGenericImport<DNDataTableMappingCollectionClass, DNDataTableMappingCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbDataReaderClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{AC311513-5303-52B1-90BC-EC46F7579F8F}']
  end;

  [DNTypeName('System.Data.Common.DbDataReader')]
  DNDbDataReader = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{BD84DD06-A2C7-33E9-BD16-288FD41CCD30}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    procedure Close;
    procedure Dispose;
    function GetSchemaTable: DNDataTable;
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function GetDataTypeName(ordinal: Int32): string;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetName(ordinal: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetBytes(ordinal: Int32; dataOffset: Int64; buffer: TArray<Byte>; bufferOffset: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetChars(ordinal: Int32; dataOffset: Int64; buffer: TArray<Char>; bufferOffset: Int32; length: Int32): Int64;
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(ordinal: Int32): Double;
    function GetFloat(ordinal: Int32): Single;
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetString(ordinal: Int32): string;
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function IsDBNull(ordinal: Int32): Boolean;
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResult: Boolean;
    function Read: Boolean;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property FieldCount: Int32 read get_FieldCount;
    property HasRows: Boolean read get_HasRows;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDbDataReader = class(TDNGenericImport<DNDbDataReaderClass, DNDbDataReader>) end;

  //-------------namespace: System.Data----------------
  DNDataTableReaderClass = interface(DNDbDataReaderClass)
  ['{DE013FFE-18A1-549D-BBFE-B7A35A1EC675}']
  { constructors } 

    {class} function init(dataTable: DNDataTable): DNDataTableReader; overload;
    {class} function init(dataTables: TArray<DNDataTable>): DNDataTableReader; overload;

  end;

  [DNTypeName('System.Data.DataTableReader')]
  DNDataTableReader = interface(DNDbDataReader)
  ['{B042F350-345A-3F37-B532-D557D91D5FCA}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_HasRows: Boolean;
    function get_Item(ordinal: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_FieldCount: Int32;
    function get_VisibleFieldCount: Int32;

  { methods } 

    procedure Close;
    function GetSchemaTable: DNDataTable;
    function NextResult: Boolean;
    function Read: Boolean;
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetDataTypeName(ordinal: Int32): string;
    function GetFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetName(ordinal: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(ordinal: Int32): Double;
    function GetFloat(ordinal: Int32): Single;
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetString(ordinal: Int32): string;
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function IsDBNull(ordinal: Int32): Boolean;
    procedure Dispose;
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property HasRows: Boolean read get_HasRows;
    property Item[ordinal: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property FieldCount: Int32 read get_FieldCount;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNDataTableReader = class(TDNGenericImport<DNDataTableReaderClass, DNDataTableReader>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcDataReaderClass = interface(DNDbDataReaderClass)
  ['{2471BE4D-B343-5EE3-9C0A-2DFE24A5479C}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcDataReader')]
  DNOdbcDataReader = interface(DNDbDataReader)
  ['{3F16877F-1104-31CE-BA29-EE6A4E68DB41}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(value: string): DDN.mscorlib.DNObject; overload;
    function get_VisibleFieldCount: Int32;

  { methods } 

    procedure Close;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IsDBNull(i: Int32): Boolean;
    function GetByte(i: Int32): Byte;
    function GetChar(i: Int32): Char;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetBoolean(i: Int32): Boolean;
    function GetFloat(i: Int32): Single;
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(i: Int32): Double;
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    function GetString(i: Int32): string;
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function Read: Boolean;
    function NextResult: Boolean;
    function GetDataTypeName(i: Int32): string;
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    function GetName(i: Int32): string;
    function GetOrdinal(value: string): Int32;
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetDate(i: Int32): DDN.mscorlib.DNDateTime;
    function GetTime(i: Int32): DDN.mscorlib.DNTimeSpan;
    function GetSchemaTable: DNDataTable;
    procedure Dispose;
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function GetData(ordinal: Int32): DNDbDataReader;
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property FieldCount: Int32 read get_FieldCount;
    property HasRows: Boolean read get_HasRows;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[value: string]: DDN.mscorlib.DNObject read get_Item; default;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNOdbcDataReader = class(TDNGenericImport<DNOdbcDataReaderClass, DNOdbcDataReader>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbDataReaderClass = interface(DNDbDataReaderClass)
  ['{5998AC6D-88DE-5E03-8321-2B9F08D92B18}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbDataReader')]
  DNOleDbDataReader = interface(DNDbDataReader)
  ['{EC6F90AC-BAD9-3D17-9115-66514B377436}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_VisibleFieldCount: Int32;

  { methods } 

    function GetBoolean(ordinal: Int32): Boolean;
    function GetByte(ordinal: Int32): Byte;
    function GetDateTime(ordinal: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(ordinal: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(ordinal: Int32): Double;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetFloat(ordinal: Int32): Single;
    function GetGuid(ordinal: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(ordinal: Int32): Int16;
    function GetInt32(ordinal: Int32): Int32;
    function GetInt64(ordinal: Int32): Int64;
    function GetString(ordinal: Int32): string;
    function GetValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function IsDBNull(ordinal: Int32): Boolean;
    function GetSchemaTable: DNDataTable;
    procedure Close;
    function GetBytes(ordinal: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetChars(ordinal: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetChar(ordinal: Int32): Char;
    function GetData(ordinal: Int32): DNOleDbDataReader;
    function GetDataTypeName(index: Int32): string;
    function GetFieldType(index: Int32): DDN.mscorlib.DNType;
    function GetName(index: Int32): string;
    function GetOrdinal(name: string): Int32;
    function GetTimeSpan(ordinal: Int32): DDN.mscorlib.DNTimeSpan;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function NextResult: Boolean;
    function Read: Boolean;
    procedure Dispose;
    function GetProviderSpecificFieldType(ordinal: Int32): DDN.mscorlib.DNType;
    function GetProviderSpecificValue(ordinal: Int32): DDN.mscorlib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetTextReader(ordinal: Int32): DDN.mscorlib.DNTextReader;
    function IsDBNullAsync(ordinal: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function GetStream(ordinal: Int32): DDN.mscorlib.DNStream;
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property FieldCount: Int32 read get_FieldCount;
    property HasRows: Boolean read get_HasRows;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
  end;

  TDNOleDbDataReader = class(TDNGenericImport<DNOleDbDataReaderClass, DNOleDbDataReader>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlDataReaderClass = interface(DNDbDataReaderClass)
  ['{119ACEE0-904D-5216-A436-ED710B01A3C8}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlDataReader')]
  DNSqlDataReader = interface(DNDbDataReader)
  ['{071B1B29-B2A1-31D8-B9E6-8C926B02709A}']
  { getters & setters } 

    function get_Depth: Int32;
    function get_FieldCount: Int32;
    function get_HasRows: Boolean;
    function get_IsClosed: Boolean;
    function get_RecordsAffected: Int32;
    function get_VisibleFieldCount: Int32;
    function get_Item(i: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    function GetDataTypeName(i: Int32): string;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetFieldType(i: Int32): DDN.mscorlib.DNType;
    function GetName(i: Int32): string;
    function GetProviderSpecificFieldType(i: Int32): DDN.mscorlib.DNType;
    function GetOrdinal(name: string): Int32;
    function GetProviderSpecificValue(i: Int32): DDN.mscorlib.DNObject;
    function GetProviderSpecificValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetSqlValue(i: Int32): DDN.mscorlib.DNObject;
    function GetValue(i: Int32): DDN.mscorlib.DNObject;
    procedure Close;
    function GetSchemaTable: DNDataTable;
    function GetBoolean(i: Int32): Boolean;
    function GetXmlReader(i: Int32): DDN.System.Xml.DNXmlReader;
    function GetStream(i: Int32): DDN.mscorlib.DNStream;
    function GetByte(i: Int32): Byte;
    function GetBytes(i: Int32; dataIndex: Int64; buffer: TArray<Byte>; bufferIndex: Int32; length: Int32): Int64;
    function GetTextReader(i: Int32): DDN.mscorlib.DNTextReader;
    function GetChar(i: Int32): Char;
    function GetChars(i: Int32; dataIndex: Int64; buffer: TArray<Char>; bufferIndex: Int32; length: Int32): Int64;
    function GetDateTime(i: Int32): DDN.mscorlib.DNDateTime;
    function GetDecimal(i: Int32): DDN.mscorlib.DNDecimal;
    function GetDouble(i: Int32): Double;
    function GetFloat(i: Int32): Single;
    function GetGuid(i: Int32): DDN.mscorlib.DNGuid;
    function GetInt16(i: Int32): Int16;
    function GetInt32(i: Int32): Int32;
    function GetInt64(i: Int32): Int64;
    function GetSqlBoolean(i: Int32): DNSqlBoolean;
    function GetSqlBinary(i: Int32): DNSqlBinary;
    function GetSqlByte(i: Int32): DNSqlByte;
    function GetSqlBytes(i: Int32): DNSqlBytes;
    function GetSqlChars(i: Int32): DNSqlChars;
    function GetSqlDateTime(i: Int32): DNSqlDateTime;
    function GetSqlDecimal(i: Int32): DNSqlDecimal;
    function GetSqlGuid(i: Int32): DNSqlGuid;
    function GetSqlDouble(i: Int32): DNSqlDouble;
    function GetSqlInt16(i: Int32): DNSqlInt16;
    function GetSqlInt32(i: Int32): DNSqlInt32;
    function GetSqlInt64(i: Int32): DNSqlInt64;
    function GetSqlMoney(i: Int32): DNSqlMoney;
    function GetSqlSingle(i: Int32): DNSqlSingle;
    function GetSqlString(i: Int32): DNSqlString;
    function GetSqlXml(i: Int32): DNSqlXml;
    function GetSqlValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function GetString(i: Int32): string;
    function GetTimeSpan(i: Int32): DDN.mscorlib.DNTimeSpan;
    function GetDateTimeOffset(i: Int32): DDN.mscorlib.DNDateTimeOffset;
    function GetValues(values: TArray<DDN.mscorlib.DNObject>): Int32;
    function IsDBNull(i: Int32): Boolean;
    function NextResult: Boolean;
    function Read: Boolean;
    function NextResultAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    function IsDBNullAsync(i: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Boolean>; overload;
    procedure Dispose;
    function GetData(ordinal: Int32): DNDbDataReader;
    function IsDBNullAsync(ordinal: Int32): DDN.mscorlib.DNTask<Boolean>; overload;
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function NextResultAsync: DDN.mscorlib.DNTask<Boolean>; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Depth: Int32 read get_Depth;
    property FieldCount: Int32 read get_FieldCount;
    property HasRows: Boolean read get_HasRows;
    property IsClosed: Boolean read get_IsClosed;
    property RecordsAffected: Int32 read get_RecordsAffected;
    property VisibleFieldCount: Int32 read get_VisibleFieldCount;
    property Item[i: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNSqlDataReader = class(TDNGenericImport<DNSqlDataReaderClass, DNSqlDataReader>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{F6963C2C-CA04-5763-A9E1-B6EC207FA30C}']
  end;

  [DNTypeName('System.Data.Common.DbParameter')]
  DNDbParameter = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{C4B6E989-39F9-3A4D-ABFE-52E8C93A7E8B}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    procedure ResetDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Size: Int32 read get_Size write set_Size;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNDbParameter = class(TDNGenericImport<DNDbParameterClass, DNDbParameter>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcParameterClass = interface(DNDbParameterClass)
  ['{E60BBD69-62CF-59DB-B824-4FF4978220E7}']
  { constructors } 

    {class} function init: DNOdbcParameter; overload;
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    {class} function init(name: string; &type: DNOdbcType): DNOdbcParameter; overload;
    {class} function init(name: string; &type: DNOdbcType; size: Int32): DNOdbcParameter; overload;
    {class} function init(name: string; &type: DNOdbcType; size: Int32; sourcecolumn: string): DNOdbcParameter; overload;
    {class} function init(parameterName: string; odbcType: DNOdbcType; size: Int32; parameterDirection: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; srcColumn: string; srcVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    {class} function init(parameterName: string; odbcType: DNOdbcType; size: Int32; parameterDirection: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;

  end;

  [DNTypeName('System.Data.Odbc.OdbcParameter')]
  DNOdbcParameter = interface(DNDbParameter)
  ['{1E022618-1E0C-36DB-BBE6-CE8F6AD07304}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_OdbcType: DNOdbcType;
    procedure set_OdbcType(value: DNOdbcType);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    procedure ResetDbType;
    function ToString: string;
    procedure ResetOdbcType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property OdbcType: DNOdbcType read get_OdbcType write set_OdbcType;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Size: Int32 read get_Size write set_Size;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNOdbcParameter = class(TDNGenericImport<DNOdbcParameterClass, DNOdbcParameter>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbParameterClass = interface(DNDbParameterClass)
  ['{8FC50BD2-324C-56E6-9486-C4C0BD85DA81}']
  { constructors } 

    {class} function init: DNOleDbParameter; overload;
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    {class} function init(name: string; dataType: DNOleDbType): DNOleDbParameter; overload;
    {class} function init(name: string; dataType: DNOleDbType; size: Int32): DNOleDbParameter; overload;
    {class} function init(name: string; dataType: DNOleDbType; size: Int32; srcColumn: string): DNOleDbParameter; overload;
    {class} function init(parameterName: string; dbType: DNOleDbType; size: Int32; direction: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; srcColumn: string; srcVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    {class} function init(parameterName: string; dbType: DNOleDbType; size: Int32; direction: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;

  end;

  [DNTypeName('System.Data.OleDb.OleDbParameter')]
  DNOleDbParameter = interface(DNDbParameter)
  ['{A96E1807-77BF-31AD-A4CE-2DEC5B2C4A62}']
  { getters & setters } 

    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_OleDbType: DNOleDbType;
    procedure set_OleDbType(value: DNOleDbType);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    procedure ResetDbType;
    function ToString: string;
    procedure ResetOleDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DbType: DNDbType read get_DbType write set_DbType;
    property OleDbType: DNOleDbType read get_OleDbType write set_OleDbType;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Size: Int32 read get_Size write set_Size;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNOleDbParameter = class(TDNGenericImport<DNOleDbParameterClass, DNOleDbParameter>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlParameterClass = interface(DNDbParameterClass)
  ['{BA938AC2-82F5-59BE-88BC-E00D81906E86}']
  { constructors } 

    {class} function init: DNSqlParameter; overload;
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; direction: DNParameterDirection; isNullable: Boolean; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; direction: DNParameterDirection; precision: Byte; scale: Byte; sourceColumn: string; sourceVersion: DNDataRowVersion; sourceColumnNullMapping: Boolean; value: DDN.mscorlib.DNObject; xmlSchemaCollectionDatabase: string; xmlSchemaCollectionOwningSchema: string; xmlSchemaCollectionName: string): DNSqlParameter; overload;
    {class} function init(parameterName: string; dbType: DNSqlDbType): DNSqlParameter; overload;
    {class} function init(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32): DNSqlParameter; overload;
    {class} function init(parameterName: string; dbType: DNSqlDbType; size: Int32; sourceColumn: string): DNSqlParameter; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlParameter')]
  DNSqlParameter = interface(DNDbParameter)
  ['{FBA6EDCE-D5E7-3E0D-8DF5-18E249F61813}']
  { getters & setters } 

    function get_CompareInfo: DNSqlCompareOptions;
    procedure set_CompareInfo(value: DNSqlCompareOptions);
    function get_XmlSchemaCollectionDatabase: string;
    procedure set_XmlSchemaCollectionDatabase(value: string);
    function get_XmlSchemaCollectionOwningSchema: string;
    procedure set_XmlSchemaCollectionOwningSchema(value: string);
    function get_XmlSchemaCollectionName: string;
    procedure set_XmlSchemaCollectionName(value: string);
    function get_ForceColumnEncryption: Boolean;
    procedure set_ForceColumnEncryption(value: Boolean);
    function get_DbType: DNDbType;
    procedure set_DbType(value: DNDbType);
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);
    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_Precision: Byte;
    procedure set_Precision(value: Byte);
    function get_Scale: Byte;
    procedure set_Scale(value: Byte);
    function get_SqlDbType: DNSqlDbType;
    procedure set_SqlDbType(value: DNSqlDbType);
    function get_SqlValue: DDN.mscorlib.DNObject;
    procedure set_SqlValue(value: DDN.mscorlib.DNObject);
    function get_UdtTypeName: string;
    procedure set_UdtTypeName(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Direction: DNParameterDirection;
    procedure set_Direction(value: DNParameterDirection);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SourceColumn: string;
    procedure set_SourceColumn(value: string);
    function get_SourceColumnNullMapping: Boolean;
    procedure set_SourceColumnNullMapping(value: Boolean);
    function get_SourceVersion: DNDataRowVersion;
    procedure set_SourceVersion(value: DNDataRowVersion);

  { methods } 

    procedure ResetDbType;
    function ToString: string;
    procedure ResetSqlDbType;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CompareInfo: DNSqlCompareOptions read get_CompareInfo write set_CompareInfo;
    property XmlSchemaCollectionDatabase: string read get_XmlSchemaCollectionDatabase write set_XmlSchemaCollectionDatabase;
    property XmlSchemaCollectionOwningSchema: string read get_XmlSchemaCollectionOwningSchema write set_XmlSchemaCollectionOwningSchema;
    property XmlSchemaCollectionName: string read get_XmlSchemaCollectionName write set_XmlSchemaCollectionName;
    property ForceColumnEncryption: Boolean read get_ForceColumnEncryption write set_ForceColumnEncryption;
    property DbType: DNDbType read get_DbType write set_DbType;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
    property ParameterName: string read get_ParameterName write set_ParameterName;
    property Precision: Byte read get_Precision write set_Precision;
    property Scale: Byte read get_Scale write set_Scale;
    property SqlDbType: DNSqlDbType read get_SqlDbType write set_SqlDbType;
    property SqlValue: DDN.mscorlib.DNObject read get_SqlValue write set_SqlValue;
    property UdtTypeName: string read get_UdtTypeName write set_UdtTypeName;
    property TypeName: string read get_TypeName write set_TypeName;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Direction: DNParameterDirection read get_Direction write set_Direction;
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property Offset: Int32 read get_Offset write set_Offset;
    property Size: Int32 read get_Size write set_Size;
    property SourceColumn: string read get_SourceColumn write set_SourceColumn;
    property SourceColumnNullMapping: Boolean read get_SourceColumnNullMapping write set_SourceColumnNullMapping;
    property SourceVersion: DNDataRowVersion read get_SourceVersion write set_SourceVersion;
  end;

  TDNSqlParameter = class(TDNGenericImport<DNSqlParameterClass, DNSqlParameter>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbParameterCollectionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{02F02AC2-2327-5D70-B009-B174A461E656}']
  end;

  [DNTypeName('System.Data.Common.DbParameterCollection')]
  DNDbParameterCollection = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8498DAF2-C125-3F91-9392-5410107143A2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDbParameter; overload;
    procedure set_Item(index: Int32; value: DNDbParameter); overload;
    function get_Item(parameterName: string): DNDbParameter; overload;
    procedure set_Item(parameterName: string; value: DNDbParameter); overload;

  { methods } 

    function Add(value: DDN.mscorlib.DNObject): Int32;
    procedure AddRange(values: DDN.mscorlib.DNArray);
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    function &Contains(value: string): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    function IndexOf(parameterName: string): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject);
    procedure Remove(value: DDN.mscorlib.DNObject);
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(parameterName: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDbParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNDbParameter read get_Item write set_Item; default;
  end;

  TDNDbParameterCollection = class(TDNGenericImport<DNDbParameterCollectionClass, DNDbParameterCollection>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{C5E01425-796C-5B08-93D4-AB6EAE258DA8}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcParameterCollection')]
  DNOdbcParameterCollection = interface(DNDbParameterCollection)
  ['{E38F61BA-6E96-3D86-99DF-3E4B7D876070}']
  { getters & setters } 

    function get_Item(index: Int32): DNOdbcParameter; overload;
    procedure set_Item(index: Int32; value: DNOdbcParameter); overload;
    function get_Item(parameterName: string): DNOdbcParameter; overload;
    procedure set_Item(parameterName: string; value: DNOdbcParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function &Contains(value: string): Boolean; overload;
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Clear;
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(parameterName: string): Int32; overload;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(parameterName: string); overload;
    function Add(value: DNOdbcParameter): DNOdbcParameter; overload;
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNOdbcParameter; overload;
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNOdbcParameter;
    function Add(parameterName: string; odbcType: DNOdbcType): DNOdbcParameter; overload;
    function Add(parameterName: string; odbcType: DNOdbcType; size: Int32): DNOdbcParameter; overload;
    function Add(parameterName: string; odbcType: DNOdbcType; size: Int32; sourceColumn: string): DNOdbcParameter; overload;
    procedure AddRange(values: TArray<DNOdbcParameter>); overload;
    function &Contains(value: DNOdbcParameter): Boolean; overload;
    procedure CopyTo(&array: TArray<DNOdbcParameter>; index: Int32); overload;
    function IndexOf(value: DNOdbcParameter): Int32; overload;
    procedure Insert(index: Int32; value: DNOdbcParameter); overload;
    procedure Remove(value: DNOdbcParameter); overload;
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOdbcParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNOdbcParameter read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOdbcParameterCollection = class(TDNGenericImport<DNOdbcParameterCollectionClass, DNOdbcParameterCollection>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{EA4A22CE-3244-5F55-BDF5-9011B217D7C7}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbParameterCollection')]
  DNOleDbParameterCollection = interface(DNDbParameterCollection)
  ['{24BFDD33-7845-3726-85E9-21FCB2802C80}']
  { getters & setters } 

    function get_Item(index: Int32): DNOleDbParameter; overload;
    procedure set_Item(index: Int32; value: DNOleDbParameter); overload;
    function get_Item(parameterName: string): DNOleDbParameter; overload;
    procedure set_Item(parameterName: string; value: DNOleDbParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function &Contains(value: string): Boolean; overload;
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Clear;
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(parameterName: string): Int32; overload;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(parameterName: string); overload;
    function Add(value: DNOleDbParameter): DNOleDbParameter; overload;
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNOleDbParameter; overload;
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNOleDbParameter;
    function Add(parameterName: string; oleDbType: DNOleDbType): DNOleDbParameter; overload;
    function Add(parameterName: string; oleDbType: DNOleDbType; size: Int32): DNOleDbParameter; overload;
    function Add(parameterName: string; oleDbType: DNOleDbType; size: Int32; sourceColumn: string): DNOleDbParameter; overload;
    procedure AddRange(values: TArray<DNOleDbParameter>); overload;
    function &Contains(value: DNOleDbParameter): Boolean; overload;
    procedure CopyTo(&array: TArray<DNOleDbParameter>; index: Int32); overload;
    function IndexOf(value: DNOleDbParameter): Int32; overload;
    procedure Insert(index: Int32; value: DNOleDbParameter); overload;
    procedure Remove(value: DNOleDbParameter); overload;
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOleDbParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNOleDbParameter read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOleDbParameterCollection = class(TDNGenericImport<DNOleDbParameterCollectionClass, DNOleDbParameterCollection>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlParameterCollectionClass = interface(DNDbParameterCollectionClass)
  ['{A3F23AA6-9B07-5230-8AC8-1B5901EDF5D9}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlParameterCollection')]
  DNSqlParameterCollection = interface(DNDbParameterCollection)
  ['{AB5F7221-67BB-3AEF-91E1-AD345E07117E}']
  { getters & setters } 

    function get_Item(index: Int32): DNSqlParameter; overload;
    procedure set_Item(index: Int32; value: DNSqlParameter); overload;
    function get_Item(parameterName: string): DNSqlParameter; overload;
    procedure set_Item(parameterName: string; value: DNSqlParameter); overload;
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function &Contains(value: string): Boolean; overload;
    function Add(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Clear;
    function &Contains(value: DDN.mscorlib.DNObject): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(parameterName: string): Int32; overload;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32; overload;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNObject); overload;
    procedure Remove(value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure RemoveAt(parameterName: string); overload;
    function Add(value: DNSqlParameter): DNSqlParameter; overload;
    function Add(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter; overload;
    function AddWithValue(parameterName: string; value: DDN.mscorlib.DNObject): DNSqlParameter;
    function Add(parameterName: string; sqlDbType: DNSqlDbType): DNSqlParameter; overload;
    function Add(parameterName: string; sqlDbType: DNSqlDbType; size: Int32): DNSqlParameter; overload;
    function Add(parameterName: string; sqlDbType: DNSqlDbType; size: Int32; sourceColumn: string): DNSqlParameter; overload;
    procedure AddRange(values: TArray<DNSqlParameter>); overload;
    function &Contains(value: DNSqlParameter): Boolean; overload;
    procedure CopyTo(&array: TArray<DNSqlParameter>; index: Int32); overload;
    function IndexOf(value: DNSqlParameter): Int32; overload;
    procedure Insert(index: Int32; value: DNSqlParameter); overload;
    procedure Remove(value: DNSqlParameter); overload;
    procedure AddRange(values: DDN.mscorlib.DNArray); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSqlParameter read get_Item write set_Item; default;
    property Item[parameterName: string]: DNSqlParameter read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSqlParameterCollection = class(TDNGenericImport<DNSqlParameterCollectionClass, DNSqlParameterCollection>) end;

  //-------------namespace: System.Data.Common----------------
  DNDbTransactionClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4FCB2B8F-4FAA-5D96-81E6-8ABFB11C4CD6}']
  end;

  [DNTypeName('System.Data.Common.DbTransaction')]
  DNDbTransaction = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{D36E8E8B-BE81-3B90-A003-1A472606FDA4}']
  { getters & setters } 

    function get_Connection: DNDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Dispose;
    procedure Commit;
    procedure Rollback;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNDbConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNDbTransaction = class(TDNGenericImport<DNDbTransactionClass, DNDbTransaction>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcTransactionClass = interface(DNDbTransactionClass)
  ['{DD4F160B-7362-5ABC-B0B2-19E870F6EA3E}']
  end;

  [DNTypeName('System.Data.Odbc.OdbcTransaction')]
  DNOdbcTransaction = interface(DNDbTransaction)
  ['{A9CBC7C8-F01C-3644-93C8-F6FCF7A2076B}']
  { getters & setters } 

    function get_Connection: DNOdbcConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Commit;
    procedure Rollback;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNOdbcConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNOdbcTransaction = class(TDNGenericImport<DNOdbcTransactionClass, DNOdbcTransaction>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbTransactionClass = interface(DNDbTransactionClass)
  ['{C7A2649D-1ED1-5730-AC0F-5E744C071EFD}']
  end;

  [DNTypeName('System.Data.OleDb.OleDbTransaction')]
  DNOleDbTransaction = interface(DNDbTransaction)
  ['{F538329B-0483-3A25-B7C8-92EDBBCF3717}']
  { getters & setters } 

    function get_Connection: DNOleDbConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    function &Begin(isolevel: DNIsolationLevel): DNOleDbTransaction; overload;
    function &Begin: DNOleDbTransaction; overload;
    procedure Commit;
    procedure Rollback;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNOleDbConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNOleDbTransaction = class(TDNGenericImport<DNOleDbTransactionClass, DNOleDbTransaction>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlTransactionClass = interface(DNDbTransactionClass)
  ['{A10EAAC5-D3CB-5942-A02A-969BD9445160}']
  end;

  [DNTypeName('System.Data.SqlClient.SqlTransaction')]
  DNSqlTransaction = interface(DNDbTransaction)
  ['{824F20F8-D6D0-33E5-9A93-A12B97209D56}']
  { getters & setters } 

    function get_Connection: DNSqlConnection;
    function get_IsolationLevel: DNIsolationLevel;

  { methods } 

    procedure Commit;
    procedure Rollback; overload;
    procedure Rollback(transactionName: string); overload;
    procedure Save(savePointName: string);
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNSqlConnection read get_Connection;
    property IsolationLevel: DNIsolationLevel read get_IsolationLevel;
  end;

  TDNSqlTransaction = class(TDNGenericImport<DNSqlTransactionClass, DNSqlTransaction>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlFileStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{E15792ED-276C-5C85-B3BA-8E7F5DC04892}']
  { constructors } 

    {class} function init(path: string; transactionContext: TArray<Byte>; access: DDN.mscorlib.DNFileAccess): DNSqlFileStream; overload;
    {class} function init(path: string; transactionContext: TArray<Byte>; access: DDN.mscorlib.DNFileAccess; options: DDN.mscorlib.DNFileOptions; allocationSize: Int64): DNSqlFileStream; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlFileStream')]
  DNSqlFileStream = interface(DDN.mscorlib.DNStream)
  ['{88EB48AA-4903-354B-B4AF-B7943CD2BFA3}']
  { getters & setters } 

    function get_Name: string;
    function get_TransactionContext: TArray<Byte>;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read([in][out]buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadByte: Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TransactionContext: TArray<Byte> read get_TransactionContext;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNSqlFileStream = class(TDNGenericImport<DNSqlFileStreamClass, DNSqlFileStream>) end;

  //-------------namespace: System.Data.Common----------------
  DNDBDataPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{117B9E9F-10C2-584B-98C8-821ACA242541}']
  end;

  [DNTypeName('System.Data.Common.DBDataPermission')]
  DNDBDataPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{BA3FEDB4-03B9-3044-BFB3-1C5076F9F317}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    function Copy: DDN.mscorlib.DNIPermission;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNDBDataPermission = class(TDNGenericImport<DNDBDataPermissionClass, DNDBDataPermission>) end;

  //-------------namespace: System.Data.Odbc----------------
  DNOdbcPermissionClass = interface(DNDBDataPermissionClass)
  ['{0FB40B43-1157-522E-8351-8E5E390EC987}']
  { constructors } 

    {class} function init: DNOdbcPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNOdbcPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNOdbcPermission; overload;

  end;

  [DNTypeName('System.Data.Odbc.OdbcPermission')]
  DNOdbcPermission = interface(DNDBDataPermission)
  ['{2F3993E2-1392-3E28-B725-1D8A8A5FFE2B}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNOdbcPermission = class(TDNGenericImport<DNOdbcPermissionClass, DNOdbcPermission>) end;

  //-------------namespace: System.Data.OleDb----------------
  DNOleDbPermissionClass = interface(DNDBDataPermissionClass)
  ['{AE164ED5-AB45-52C9-A772-DB8F2CE259A1}']
  { constructors } 

    {class} function init: DNOleDbPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNOleDbPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNOleDbPermission; overload;

  end;

  [DNTypeName('System.Data.OleDb.OleDbPermission')]
  DNOleDbPermission = interface(DNDBDataPermission)
  ['{305402F3-83F5-34CD-922E-02CFFD8D2C37}']
  { getters & setters } 

    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Provider: string read get_Provider write set_Provider;
    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNOleDbPermission = class(TDNGenericImport<DNOleDbPermissionClass, DNOleDbPermission>) end;

  //-------------namespace: System.Data.SqlClient----------------
  DNSqlClientPermissionClass = interface(DNDBDataPermissionClass)
  ['{ED7E30C1-ACC9-504A-B5FE-4446A357779B}']
  { constructors } 

    {class} function init: DNSqlClientPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNSqlClientPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState; allowBlankPassword: Boolean): DNSqlClientPermission; overload;

  end;

  [DNTypeName('System.Data.SqlClient.SqlClientPermission')]
  DNSqlClientPermission = interface(DNDBDataPermission)
  ['{B17C70CA-A6C5-323E-A3AC-9E959F039538}']
  { getters & setters } 

    function get_AllowBlankPassword: Boolean;
    procedure set_AllowBlankPassword(value: Boolean);

  { methods } 

    procedure Add(connectionString: string; restrictions: string; behavior: DNKeyRestrictionBehavior);
    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowBlankPassword: Boolean read get_AllowBlankPassword write set_AllowBlankPassword;
  end;

  TDNSqlClientPermission = class(TDNGenericImport<DNSqlClientPermissionClass, DNSqlClientPermission>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBinaryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BC5F7805-404E-52E2-8980-17E05A908C45}']
  { constructors } 

    {class} function init(value: TArray<Byte>): DNSqlBinary;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlBinary;

  { static fields } 

    {class} property Null: DNSqlBinary read __fakeFieldGet_Null;

  { static methods } 

    {class} function Add(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    {class} function Concat(x: DNSqlBinary; y: DNSqlBinary): DNSqlBinary;
    {class} function Equals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function LessThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlBinary; y: DNSqlBinary): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlBinary')]
  DNSqlBinary = interface(DDN.mscorlib.DNValueType)
  ['{786A4E29-6E12-387C-B5BF-64828EB757E4}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: TArray<Byte>;
    function get_Item(index: Int32): Byte;
    function get_Length: Int32;

  { methods } 

    function ToString: string;
    function ToSqlGuid: DNSqlGuid;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlBinary): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: TArray<Byte> read get_Value;
    property Item[index: Int32]: Byte read get_Item; default;
    property Length: Int32 read get_Length;
  end;

  TDNSqlBinary = class(TDNGenericImport<DNSqlBinaryClass, DNSqlBinary>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlBooleanClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BCB78FA4-2432-5072-AF33-969F663AA254}']
  { constructors } 

    {class} function init(value: Boolean): DNSqlBoolean; overload;
    {class} function init(value: Int32): DNSqlBoolean; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_True: DNSqlBoolean;
   function __fakeFieldGet_False: DNSqlBoolean;
   function __fakeFieldGet_Null: DNSqlBoolean;
   function __fakeFieldGet_Zero: DNSqlBoolean;
   function __fakeFieldGet_One: DNSqlBoolean;

  { static fields } 

    {class} property True: DNSqlBoolean read __fakeFieldGet_True;
    {class} property False: DNSqlBoolean read __fakeFieldGet_False;
    {class} property Null: DNSqlBoolean read __fakeFieldGet_Null;
    {class} property Zero: DNSqlBoolean read __fakeFieldGet_Zero;
    {class} property One: DNSqlBoolean read __fakeFieldGet_One;

  { static methods } 

    {class} function Parse(s: string): DNSqlBoolean;
    {class} function OnesComplement(x: DNSqlBoolean): DNSqlBoolean;
    {class} function &And(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function &Or(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function &Xor(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function Equals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function LessThan(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GreaterThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function LessThanOrEquals(x: DNSqlBoolean; y: DNSqlBoolean): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlBoolean')]
  DNSqlBoolean = interface(DDN.mscorlib.DNValueType)
  ['{B8E24A3F-FC08-3838-9051-1F1CA4323B29}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Boolean;
    function get_IsTrue: Boolean;
    function get_IsFalse: Boolean;
    function get_ByteValue: Byte;

  { methods } 

    function ToString: string;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlBoolean): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Boolean read get_Value;
    property IsTrue: Boolean read get_IsTrue;
    property IsFalse: Boolean read get_IsFalse;
    property ByteValue: Byte read get_ByteValue;
  end;

  TDNSqlBoolean = class(TDNGenericImport<DNSqlBooleanClass, DNSqlBoolean>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlByteClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B0043E6D-8C6A-5CFA-A00A-FC20DBA97B83}']
  { constructors } 

    {class} function init(value: Byte): DNSqlByte;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlByte;
   function __fakeFieldGet_Zero: DNSqlByte;
   function __fakeFieldGet_MinValue: DNSqlByte;
   function __fakeFieldGet_MaxValue: DNSqlByte;

  { static fields } 

    {class} property Null: DNSqlByte read __fakeFieldGet_Null;
    {class} property Zero: DNSqlByte read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlByte read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlByte read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlByte;
    {class} function OnesComplement(x: DNSqlByte): DNSqlByte;
    {class} function Add(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Subtract(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Multiply(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Divide(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function &Mod(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Modulus(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function BitwiseAnd(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function BitwiseOr(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function &Xor(x: DNSqlByte; y: DNSqlByte): DNSqlByte;
    {class} function Equals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function LessThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlByte; y: DNSqlByte): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlByte')]
  DNSqlByte = interface(DDN.mscorlib.DNValueType)
  ['{4D1AFAD7-1431-3AFC-8960-D2DE9BE53DE6}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Byte;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlByte): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Byte read get_Value;
  end;

  TDNSqlByte = class(TDNGenericImport<DNSqlByteClass, DNSqlByte>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDateTimeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CFD65AA2-B683-5C7D-8EE2-F2E470823769}']
  { constructors } 

    {class} function init(value: DDN.mscorlib.DNDateTime): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Double): DNSqlDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; bilisecond: Int32): DNSqlDateTime; overload;
    {class} function init(dayTicks: Int32; timeTicks: Int32): DNSqlDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SQLTicksPerSecond: Int32;
   function __fakeFieldGet_SQLTicksPerMinute: Int32;
   function __fakeFieldGet_SQLTicksPerHour: Int32;
   function __fakeFieldGet_MinValue: DNSqlDateTime;
   function __fakeFieldGet_MaxValue: DNSqlDateTime;
   function __fakeFieldGet_Null: DNSqlDateTime;

  { static fields } 

    {class} property SQLTicksPerSecond: Int32 read __fakeFieldGet_SQLTicksPerSecond;
    {class} property SQLTicksPerMinute: Int32 read __fakeFieldGet_SQLTicksPerMinute;
    {class} property SQLTicksPerHour: Int32 read __fakeFieldGet_SQLTicksPerHour;
    {class} property MinValue: DNSqlDateTime read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDateTime read __fakeFieldGet_MaxValue;
    {class} property Null: DNSqlDateTime read __fakeFieldGet_Null;

  { static methods } 

    {class} function Parse(s: string): DNSqlDateTime;
    {class} function Add(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    {class} function Subtract(x: DNSqlDateTime; t: DDN.mscorlib.DNTimeSpan): DNSqlDateTime;
    {class} function Equals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDateTime; y: DNSqlDateTime): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDateTime')]
  DNSqlDateTime = interface(DDN.mscorlib.DNValueType)
  ['{C599278A-B83C-358D-96B1-56EA21FCF240}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDateTime;
    function get_DayTicks: Int32;
    function get_TimeTicks: Int32;

  { methods } 

    function ToString: string;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDateTime): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDN.mscorlib.DNDateTime read get_Value;
    property DayTicks: Int32 read get_DayTicks;
    property TimeTicks: Int32 read get_TimeTicks;
  end;

  TDNSqlDateTime = class(TDNGenericImport<DNSqlDateTimeClass, DNSqlDateTime>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDecimalClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{9F2819B0-E2F3-575A-964E-F4FE05261A86}']
  { constructors } 

    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlDecimal; overload;
    {class} function init(value: Int32): DNSqlDecimal; overload;
    {class} function init(value: Int64): DNSqlDecimal; overload;
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; bits: TArray<Int32>): DNSqlDecimal; overload;
    {class} function init(bPrecision: Byte; bScale: Byte; fPositive: Boolean; data1: Int32; data2: Int32; data3: Int32; data4: Int32): DNSqlDecimal; overload;
    {class} function init(dVal: Double): DNSqlDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxPrecision: Byte;
   function __fakeFieldGet_MaxScale: Byte;
   function __fakeFieldGet_Null: DNSqlDecimal;
   function __fakeFieldGet_MinValue: DNSqlDecimal;
   function __fakeFieldGet_MaxValue: DNSqlDecimal;

  { static fields } 

    {class} property MaxPrecision: Byte read __fakeFieldGet_MaxPrecision;
    {class} property MaxScale: Byte read __fakeFieldGet_MaxScale;
    {class} property Null: DNSqlDecimal read __fakeFieldGet_Null;
    {class} property MinValue: DNSqlDecimal read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDecimal read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlDecimal;
    {class} function AdjustScale(n: DNSqlDecimal; digits: Int32; fRound: Boolean): DNSqlDecimal;
    {class} function ConvertToPrecScale(n: DNSqlDecimal; precision: Int32; scale: Int32): DNSqlDecimal;
    {class} function Add(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Subtract(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Multiply(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Divide(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlDecimal;
    {class} function Equals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDecimal; y: DNSqlDecimal): DNSqlBoolean;
    {class} function Abs(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Ceiling(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Floor(n: DNSqlDecimal): DNSqlDecimal;
    {class} function Sign(n: DNSqlDecimal): DNSqlInt32;
    {class} function Round(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    {class} function Truncate(n: DNSqlDecimal; position: Int32): DNSqlDecimal;
    {class} function Power(n: DNSqlDecimal; exp: Double): DNSqlDecimal;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDecimal')]
  DNSqlDecimal = interface(DDN.mscorlib.DNValueType)
  ['{BDCFC99C-77C5-3116-BD41-6BE948F47914}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;
    function get_IsPositive: Boolean;
    function get_Precision: Byte;
    function get_Scale: Byte;
    function get_Data: TArray<Int32>;
    function get_BinData: TArray<Byte>;

  { methods } 

    function ToString: string;
    function ToDouble: Double;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDecimal): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDN.mscorlib.DNDecimal read get_Value;
    property IsPositive: Boolean read get_IsPositive;
    property Precision: Byte read get_Precision;
    property Scale: Byte read get_Scale;
    property Data: TArray<Int32> read get_Data;
    property BinData: TArray<Byte> read get_BinData;
  end;

  TDNSqlDecimal = class(TDNGenericImport<DNSqlDecimalClass, DNSqlDecimal>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlDoubleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6CF2800B-3833-5F2C-82F5-D52E4986C67A}']
  { constructors } 

    {class} function init(value: Double): DNSqlDouble;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlDouble;
   function __fakeFieldGet_Zero: DNSqlDouble;
   function __fakeFieldGet_MinValue: DNSqlDouble;
   function __fakeFieldGet_MaxValue: DNSqlDouble;

  { static fields } 

    {class} property Null: DNSqlDouble read __fakeFieldGet_Null;
    {class} property Zero: DNSqlDouble read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlDouble read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlDouble read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlDouble;
    {class} function Add(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Subtract(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Multiply(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Divide(x: DNSqlDouble; y: DNSqlDouble): DNSqlDouble;
    {class} function Equals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function LessThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlDouble; y: DNSqlDouble): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlDouble')]
  DNSqlDouble = interface(DDN.mscorlib.DNValueType)
  ['{15948ECF-16E5-35C7-AB50-F8B22FC235CA}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Double;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlDouble): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Double read get_Value;
  end;

  TDNSqlDouble = class(TDNGenericImport<DNSqlDoubleClass, DNSqlDouble>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlGuidClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B91E024B-C566-5CF3-8C05-3B4D709225DC}']
  { constructors } 

    {class} function init(value: TArray<Byte>): DNSqlGuid; overload;
    {class} function init(s: string): DNSqlGuid; overload;
    {class} function init(g: DDN.mscorlib.DNGuid): DNSqlGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNSqlGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlGuid;

  { static fields } 

    {class} property Null: DNSqlGuid read __fakeFieldGet_Null;

  { static methods } 

    {class} function Parse(s: string): DNSqlGuid;
    {class} function Equals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function LessThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlGuid; y: DNSqlGuid): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlGuid')]
  DNSqlGuid = interface(DDN.mscorlib.DNValueType)
  ['{F0D806DB-2E99-384B-8436-4F44230A9344}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNGuid;

  { methods } 

    function ToByteArray: TArray<Byte>;
    function ToString: string;
    function ToSqlString: DNSqlString;
    function ToSqlBinary: DNSqlBinary;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlGuid): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDN.mscorlib.DNGuid read get_Value;
  end;

  TDNSqlGuid = class(TDNGenericImport<DNSqlGuidClass, DNSqlGuid>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt16Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3BF5CA4B-7F76-5731-9FD3-C8C0A300D610}']
  { constructors } 

    {class} function init(value: Int16): DNSqlInt16;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt16;
   function __fakeFieldGet_Zero: DNSqlInt16;
   function __fakeFieldGet_MinValue: DNSqlInt16;
   function __fakeFieldGet_MaxValue: DNSqlInt16;

  { static fields } 

    {class} property Null: DNSqlInt16 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt16 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt16 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt16 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt16;
    {class} function OnesComplement(x: DNSqlInt16): DNSqlInt16;
    {class} function Add(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Subtract(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Multiply(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Divide(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function &Mod(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Modulus(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function BitwiseAnd(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function BitwiseOr(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function &Xor(x: DNSqlInt16; y: DNSqlInt16): DNSqlInt16;
    {class} function Equals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt16; y: DNSqlInt16): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt16')]
  DNSqlInt16 = interface(DDN.mscorlib.DNValueType)
  ['{20F45935-DA99-3C1C-9580-217119B0F859}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int16;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt16): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int16 read get_Value;
  end;

  TDNSqlInt16 = class(TDNGenericImport<DNSqlInt16Class, DNSqlInt16>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt32Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CF5049B8-ABB5-5D6A-A82C-3A5F655687CF}']
  { constructors } 

    {class} function init(value: Int32): DNSqlInt32;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt32;
   function __fakeFieldGet_Zero: DNSqlInt32;
   function __fakeFieldGet_MinValue: DNSqlInt32;
   function __fakeFieldGet_MaxValue: DNSqlInt32;

  { static fields } 

    {class} property Null: DNSqlInt32 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt32 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt32 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt32 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt32;
    {class} function OnesComplement(x: DNSqlInt32): DNSqlInt32;
    {class} function Add(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Subtract(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Multiply(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Divide(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function &Mod(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Modulus(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function BitwiseAnd(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function BitwiseOr(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function &Xor(x: DNSqlInt32; y: DNSqlInt32): DNSqlInt32;
    {class} function Equals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt32; y: DNSqlInt32): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt32')]
  DNSqlInt32 = interface(DDN.mscorlib.DNValueType)
  ['{4BDFEF65-38A3-3B4D-A409-223E7AFFA172}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int32;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt32): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int32 read get_Value;
  end;

  TDNSqlInt32 = class(TDNGenericImport<DNSqlInt32Class, DNSqlInt32>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlInt64Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{12B1DB76-156F-5305-93FE-EE0D0D4FAFE8}']
  { constructors } 

    {class} function init(value: Int64): DNSqlInt64;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlInt64;
   function __fakeFieldGet_Zero: DNSqlInt64;
   function __fakeFieldGet_MinValue: DNSqlInt64;
   function __fakeFieldGet_MaxValue: DNSqlInt64;

  { static fields } 

    {class} property Null: DNSqlInt64 read __fakeFieldGet_Null;
    {class} property Zero: DNSqlInt64 read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlInt64 read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlInt64 read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlInt64;
    {class} function OnesComplement(x: DNSqlInt64): DNSqlInt64;
    {class} function Add(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Subtract(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Multiply(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Divide(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function &Mod(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Modulus(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function BitwiseAnd(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function BitwiseOr(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function &Xor(x: DNSqlInt64; y: DNSqlInt64): DNSqlInt64;
    {class} function Equals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function LessThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlInt64; y: DNSqlInt64): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlInt64')]
  DNSqlInt64 = interface(DDN.mscorlib.DNValueType)
  ['{00CBD4D3-846A-301B-B4E5-3C8A0F0F8A22}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Int64;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlInt64): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Int64 read get_Value;
  end;

  TDNSqlInt64 = class(TDNGenericImport<DNSqlInt64Class, DNSqlInt64>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlMoneyClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8BEB8FFC-8B77-5B40-862E-C38062667DEE}']
  { constructors } 

    {class} function init(value: Int32): DNSqlMoney; overload;
    {class} function init(value: Int64): DNSqlMoney; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSqlMoney; overload;
    {class} function init(value: Double): DNSqlMoney; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlMoney;
   function __fakeFieldGet_Zero: DNSqlMoney;
   function __fakeFieldGet_MinValue: DNSqlMoney;
   function __fakeFieldGet_MaxValue: DNSqlMoney;

  { static fields } 

    {class} property Null: DNSqlMoney read __fakeFieldGet_Null;
    {class} property Zero: DNSqlMoney read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlMoney read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlMoney read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlMoney;
    {class} function Add(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Subtract(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Multiply(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Divide(x: DNSqlMoney; y: DNSqlMoney): DNSqlMoney;
    {class} function Equals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function LessThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlMoney; y: DNSqlMoney): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlMoney')]
  DNSqlMoney = interface(DDN.mscorlib.DNValueType)
  ['{9DE6EE1A-043D-37A7-A54E-A5541A181DEF}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: DDN.mscorlib.DNDecimal;

  { methods } 

    function ToDecimal: DDN.mscorlib.DNDecimal;
    function ToInt64: Int64;
    function ToInt32: Int32;
    function ToDouble: Double;
    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlMoney): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: DDN.mscorlib.DNDecimal read get_Value;
  end;

  TDNSqlMoney = class(TDNGenericImport<DNSqlMoneyClass, DNSqlMoney>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlSingleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{37F2DDC7-3D28-5A2D-A6B9-B1261DE01D9B}']
  { constructors } 

    {class} function init(value: Single): DNSqlSingle; overload;
    {class} function init(value: Double): DNSqlSingle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlSingle;
   function __fakeFieldGet_Zero: DNSqlSingle;
   function __fakeFieldGet_MinValue: DNSqlSingle;
   function __fakeFieldGet_MaxValue: DNSqlSingle;

  { static fields } 

    {class} property Null: DNSqlSingle read __fakeFieldGet_Null;
    {class} property Zero: DNSqlSingle read __fakeFieldGet_Zero;
    {class} property MinValue: DNSqlSingle read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNSqlSingle read __fakeFieldGet_MaxValue;

  { static methods } 

    {class} function Parse(s: string): DNSqlSingle;
    {class} function Add(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Subtract(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Multiply(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Divide(x: DNSqlSingle; y: DNSqlSingle): DNSqlSingle;
    {class} function Equals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function LessThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlSingle; y: DNSqlSingle): DNSqlBoolean;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlSingle')]
  DNSqlSingle = interface(DDN.mscorlib.DNValueType)
  ['{276F2119-1904-3B1B-8463-F19AF694D94A}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: Single;

  { methods } 

    function ToString: string;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlString: DNSqlString;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlSingle): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: Single read get_Value;
  end;

  TDNSqlSingle = class(TDNGenericImport<DNSqlSingleClass, DNSqlSingle>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlStringClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{16539F8A-13D9-5E3B-AC40-2AC7238A19B8}']
  { constructors } 

    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32; fUnicode: Boolean): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; fUnicode: Boolean): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>; index: Int32; count: Int32): DNSqlString; overload;
    {class} function init(lcid: Int32; compareOptions: DNSqlCompareOptions; data: TArray<Byte>): DNSqlString; overload;
    {class} function init(data: string; lcid: Int32; compareOptions: DNSqlCompareOptions): DNSqlString; overload;
    {class} function init(data: string; lcid: Int32): DNSqlString; overload;
    {class} function init(data: string): DNSqlString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNSqlString;
   function __fakeFieldGet_IgnoreCase: Int32;
   function __fakeFieldGet_IgnoreWidth: Int32;
   function __fakeFieldGet_IgnoreNonSpace: Int32;
   function __fakeFieldGet_IgnoreKanaType: Int32;
   function __fakeFieldGet_BinarySort: Int32;
   function __fakeFieldGet_BinarySort2: Int32;

  { static fields } 

    {class} property Null: DNSqlString read __fakeFieldGet_Null;
    {class} property IgnoreCase: Int32 read __fakeFieldGet_IgnoreCase;
    {class} property IgnoreWidth: Int32 read __fakeFieldGet_IgnoreWidth;
    {class} property IgnoreNonSpace: Int32 read __fakeFieldGet_IgnoreNonSpace;
    {class} property IgnoreKanaType: Int32 read __fakeFieldGet_IgnoreKanaType;
    {class} property BinarySort: Int32 read __fakeFieldGet_BinarySort;
    {class} property BinarySort2: Int32 read __fakeFieldGet_BinarySort2;

  { static methods } 

    {class} function Concat(x: DNSqlString; y: DNSqlString): DNSqlString;
    {class} function Add(x: DNSqlString; y: DNSqlString): DNSqlString;
    {class} function Equals(x: DNSqlString; y: DNSqlString): DNSqlBoolean; overload;
    {class} function NotEquals(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function LessThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function GreaterThan(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function LessThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function GreaterThanOrEqual(x: DNSqlString; y: DNSqlString): DNSqlBoolean;
    {class} function CompareOptionsFromSqlCompareOptions(compareOptions: DNSqlCompareOptions): DDN.mscorlib.DNCompareOptions;
    {class} function GetXsdType(schemaSet: DDN.System.Xml.DNXmlSchemaSet): DDN.System.Xml.DNXmlQualifiedName;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlString')]
  DNSqlString = interface(DDN.mscorlib.DNValueType)
  ['{304E7F9C-A851-379F-A730-C4555C05BF33}']
  { getters & setters } 

    function get_IsNull: Boolean;
    function get_Value: string;
    function get_LCID: Int32;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_CompareInfo: DDN.mscorlib.DNCompareInfo;
    function get_SqlCompareOptions: DNSqlCompareOptions;

  { methods } 

    function ToString: string;
    function GetUnicodeBytes: TArray<Byte>;
    function GetNonUnicodeBytes: TArray<Byte>;
    function Clone: DNSqlString;
    function ToSqlBoolean: DNSqlBoolean;
    function ToSqlByte: DNSqlByte;
    function ToSqlDateTime: DNSqlDateTime;
    function ToSqlDouble: DNSqlDouble;
    function ToSqlInt16: DNSqlInt16;
    function ToSqlInt32: DNSqlInt32;
    function ToSqlInt64: DNSqlInt64;
    function ToSqlMoney: DNSqlMoney;
    function ToSqlDecimal: DNSqlDecimal;
    function ToSqlSingle: DNSqlSingle;
    function ToSqlGuid: DNSqlGuid;
    function CompareTo(value: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(value: DNSqlString): Int32; overload;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsNull: Boolean read get_IsNull;
    property Value: string read get_Value;
    property LCID: Int32 read get_LCID;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    property CompareInfo: DDN.mscorlib.DNCompareInfo read get_CompareInfo;
    property SqlCompareOptions: DNSqlCompareOptions read get_SqlCompareOptions;
  end;

  TDNSqlString = class(TDNGenericImport<DNSqlStringClass, DNSqlString>) end;

  //-------------namespace: System.Data----------------
  DNDataSetSchemaImporterExtensionClass = interface(DNObjectClass)
  ['{9B98207D-45B6-5354-A53F-3FD2DADAF8CE}']
  { constructors } 

    {class} function init: DNDataSetSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.DataSetSchemaImporterExtension')]
  DNDataSetSchemaImporterExtension = interface(DNObject)
  ['{09512958-649F-3854-81C0-DE4795F78BA5}']
  { methods } 

    function ImportSchemaType(name: string; schemaNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataSetSchemaImporterExtension = class(TDNGenericImport<DNDataSetSchemaImporterExtensionClass, DNDataSetSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNSqlTypesSchemaImporterExtensionHelperClass = interface(DNObjectClass)
  ['{772F90DC-D0E9-5CEA-8A42-CB6A96EE37D8}']
  { constructors } 

    {class} function init(name: string; targetNamespace: string; references: TArray<string>; namespaceImports: TArray<DDN.System.DNCodeNamespaceImport>; destinationType: string; direct: Boolean): DNSqlTypesSchemaImporterExtensionHelper; overload;
    {class} function init(name: string; destinationType: string): DNSqlTypesSchemaImporterExtensionHelper; overload;
    {class} function init(name: string; destinationType: string; direct: Boolean): DNSqlTypesSchemaImporterExtensionHelper; overload;

  end;

  [DNTypeName('System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper')]
  DNSqlTypesSchemaImporterExtensionHelper = interface(DNObject)
  ['{E248171A-002A-3035-B308-FFB78E02542C}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlTypesSchemaImporterExtensionHelper = class(TDNGenericImport<DNSqlTypesSchemaImporterExtensionHelperClass, DNSqlTypesSchemaImporterExtensionHelper>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBigIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{26BEA8BD-158C-53A9-B7EE-D060BD30C4D2}']
  { constructors } 

    {class} function init: DNTypeBigIntSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeBigIntSchemaImporterExtension')]
  DNTypeBigIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{5A57403F-FBB5-345F-BF23-1C5EA5EC1213}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBigIntSchemaImporterExtension = class(TDNGenericImport<DNTypeBigIntSchemaImporterExtensionClass, DNTypeBigIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBinarySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{FE1ED156-DC9B-52EA-B144-84DEE1AF5F7A}']
  { constructors } 

    {class} function init: DNTypeBinarySchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeBinarySchemaImporterExtension')]
  DNTypeBinarySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{0E34EF0C-E4B6-3941-9344-F22EDE85CB7B}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBinarySchemaImporterExtension = class(TDNGenericImport<DNTypeBinarySchemaImporterExtensionClass, DNTypeBinarySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeBitSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{15E6F105-2477-5349-BC3B-7BC2B0E47274}']
  { constructors } 

    {class} function init: DNTypeBitSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeBitSchemaImporterExtension')]
  DNTypeBitSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{18E6AD5E-3E67-3FD2-99F7-EAD80E856B11}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeBitSchemaImporterExtension = class(TDNGenericImport<DNTypeBitSchemaImporterExtensionClass, DNTypeBitSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{BE943EA8-D0E6-5EC8-B5AC-D97E3C20B633}']
  { constructors } 

    {class} function init: DNTypeCharSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeCharSchemaImporterExtension')]
  DNTypeCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{41798B65-28F3-3CB2-A8DF-36503C29D85F}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeCharSchemaImporterExtension = class(TDNGenericImport<DNTypeCharSchemaImporterExtensionClass, DNTypeCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeDateTimeSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{81236AE8-49B5-5B32-A1C0-133BA0BCD8E9}']
  { constructors } 

    {class} function init: DNTypeDateTimeSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension')]
  DNTypeDateTimeSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{23535402-D07C-3B55-83EB-779096C82858}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDateTimeSchemaImporterExtension = class(TDNGenericImport<DNTypeDateTimeSchemaImporterExtensionClass, DNTypeDateTimeSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeDecimalSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{5E4AA0CC-0783-5264-9BA3-8D71E3A45B13}']
  { constructors } 

    {class} function init: DNTypeDecimalSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeDecimalSchemaImporterExtension')]
  DNTypeDecimalSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{BE5D3EA5-6DE2-3CCD-8116-23D29C5386FA}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDecimalSchemaImporterExtension = class(TDNGenericImport<DNTypeDecimalSchemaImporterExtensionClass, DNTypeDecimalSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeFloatSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D5151541-292C-5FD9-804F-583363C9B0AD}']
  { constructors } 

    {class} function init: DNTypeFloatSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeFloatSchemaImporterExtension')]
  DNTypeFloatSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{C4D7C601-D1C2-3DC6-AE2C-29E4C782AE8D}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeFloatSchemaImporterExtension = class(TDNGenericImport<DNTypeFloatSchemaImporterExtensionClass, DNTypeFloatSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{84287612-FDBC-561F-8281-AD8B4B81BE9E}']
  { constructors } 

    {class} function init: DNTypeIntSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeIntSchemaImporterExtension')]
  DNTypeIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{95B2DA6A-6F7B-348D-8101-C3FDFB1BD15D}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeIntSchemaImporterExtension = class(TDNGenericImport<DNTypeIntSchemaImporterExtensionClass, DNTypeIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeMoneySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{2A5F94A5-928C-55C9-9683-481828356671}']
  { constructors } 

    {class} function init: DNTypeMoneySchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeMoneySchemaImporterExtension')]
  DNTypeMoneySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F7AA49CD-DEC5-37B9-B1C9-0EB7CE366204}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeMoneySchemaImporterExtension = class(TDNGenericImport<DNTypeMoneySchemaImporterExtensionClass, DNTypeMoneySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{C9A5B743-CF6D-5B32-86D7-AA88B7BE7282}']
  { constructors } 

    {class} function init: DNTypeNCharSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeNCharSchemaImporterExtension')]
  DNTypeNCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F6134327-DE16-3E69-B9A3-891E39F7CA67}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNCharSchemaImporterExtension = class(TDNGenericImport<DNTypeNCharSchemaImporterExtensionClass, DNTypeNCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNTextSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{EB6B57AD-74AE-57CC-BFE3-6883AE29082E}']
  { constructors } 

    {class} function init: DNTypeNTextSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeNTextSchemaImporterExtension')]
  DNTypeNTextSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{49F51A5F-F01A-3684-A8C9-1658E36F97A2}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNTextSchemaImporterExtension = class(TDNGenericImport<DNTypeNTextSchemaImporterExtensionClass, DNTypeNTextSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNumericSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{F7EB5407-6309-58EE-9705-D12DFC656577}']
  { constructors } 

    {class} function init: DNTypeNumericSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeNumericSchemaImporterExtension')]
  DNTypeNumericSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{31E614F6-BFA5-3265-A868-BBFC1105D235}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNumericSchemaImporterExtension = class(TDNGenericImport<DNTypeNumericSchemaImporterExtensionClass, DNTypeNumericSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeNVarCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{FC1192F0-2512-5427-AC65-E3C0B2399207}']
  { constructors } 

    {class} function init: DNTypeNVarCharSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension')]
  DNTypeNVarCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{0910F4A0-B56F-3570-98FA-14450A435273}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNVarCharSchemaImporterExtension = class(TDNGenericImport<DNTypeNVarCharSchemaImporterExtensionClass, DNTypeNVarCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeRealSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D573A8CF-3BDA-5E04-97CE-9C038240AB59}']
  { constructors } 

    {class} function init: DNTypeRealSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeRealSchemaImporterExtension')]
  DNTypeRealSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{9F3DECBE-49D6-3F91-BE6F-AA123454C482}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeRealSchemaImporterExtension = class(TDNGenericImport<DNTypeRealSchemaImporterExtensionClass, DNTypeRealSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallDateTimeSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{7B3CA223-7412-54C1-8717-4E653716A485}']
  { constructors } 

    {class} function init: DNTypeSmallDateTimeSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension')]
  DNTypeSmallDateTimeSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{A004AEFC-5A6F-3B84-BC99-80DD80AC76D1}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallDateTimeSchemaImporterExtension = class(TDNGenericImport<DNTypeSmallDateTimeSchemaImporterExtensionClass, DNTypeSmallDateTimeSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{708DDCC5-2477-5548-9E5B-7EBCF44F51D4}']
  { constructors } 

    {class} function init: DNTypeSmallIntSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension')]
  DNTypeSmallIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{7252A0B8-4B5E-3DA0-B7F2-A58347820406}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallIntSchemaImporterExtension = class(TDNGenericImport<DNTypeSmallIntSchemaImporterExtensionClass, DNTypeSmallIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeSmallMoneySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{915E709E-8CAF-5D5C-AA44-A1927030A130}']
  { constructors } 

    {class} function init: DNTypeSmallMoneySchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension')]
  DNTypeSmallMoneySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{F1BBE8BB-B092-31A4-A430-7AAB3A5F2216}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeSmallMoneySchemaImporterExtension = class(TDNGenericImport<DNTypeSmallMoneySchemaImporterExtensionClass, DNTypeSmallMoneySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeTextSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{06ABEA7C-275F-5351-9D48-165FFCC7AD07}']
  { constructors } 

    {class} function init: DNTypeTextSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeTextSchemaImporterExtension')]
  DNTypeTextSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{D54564DE-2B62-3498-A0AB-92261965FC56}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeTextSchemaImporterExtension = class(TDNGenericImport<DNTypeTextSchemaImporterExtensionClass, DNTypeTextSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeTinyIntSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{5CDC7732-C71F-5AC4-8AF9-7FDF5DFCA47A}']
  { constructors } 

    {class} function init: DNTypeTinyIntSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension')]
  DNTypeTinyIntSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{1AB7C3CF-702F-319A-8FE6-52AFD18E2D82}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeTinyIntSchemaImporterExtension = class(TDNGenericImport<DNTypeTinyIntSchemaImporterExtensionClass, DNTypeTinyIntSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeUniqueIdentifierSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{D0B2E25E-2F1D-55A8-A017-D220C48800CA}']
  { constructors } 

    {class} function init: DNTypeUniqueIdentifierSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension')]
  DNTypeUniqueIdentifierSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{7B665635-1499-355C-88CD-F15BCADA9B05}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeUniqueIdentifierSchemaImporterExtension = class(TDNGenericImport<DNTypeUniqueIdentifierSchemaImporterExtensionClass, DNTypeUniqueIdentifierSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarBinarySchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{78787E14-D5C9-517C-AA73-C1CEE1F6003D}']
  { constructors } 

    {class} function init: DNTypeVarBinarySchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension')]
  DNTypeVarBinarySchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{273D2569-6B44-3406-A108-6B549002E767}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarBinarySchemaImporterExtension = class(TDNGenericImport<DNTypeVarBinarySchemaImporterExtensionClass, DNTypeVarBinarySchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarCharSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{F259F2D7-EB66-53CE-B122-5ED21BD0380F}']
  { constructors } 

    {class} function init: DNTypeVarCharSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeVarCharSchemaImporterExtension')]
  DNTypeVarCharSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{A58311F8-456D-3371-BDA7-8DAE7C278BF7}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarCharSchemaImporterExtension = class(TDNGenericImport<DNTypeVarCharSchemaImporterExtensionClass, DNTypeVarCharSchemaImporterExtension>) end;

  //-------------namespace: System.Data.SqlTypes----------------
  DNTypeVarImageSchemaImporterExtensionClass = interface(DNSqlTypesSchemaImporterExtensionHelperClass)
  ['{AAC1F414-2EAE-5F05-B0AC-4902363C375E}']
  { constructors } 

    {class} function init: DNTypeVarImageSchemaImporterExtension;

  end;

  [DNTypeName('System.Data.SqlTypes.TypeVarImageSchemaImporterExtension')]
  DNTypeVarImageSchemaImporterExtension = interface(DNSqlTypesSchemaImporterExtensionHelper)
  ['{E9BBF708-3896-3482-9184-04DDCC7F6550}']
  { methods } 

    function ImportSchemaType(name: string; xmlNamespace: string; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportSchemaType(&type: DDN.System.Xml.DNXmlSchemaType; context: DDN.System.Xml.DNXmlSchemaObject; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    function ImportAnyElement(any: DDN.System.Xml.DNXmlSchemaAny; mixed: Boolean; schemas: DDN.System.Xml.DNXmlSchemas; importer: DDN.System.Xml.DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DDN.System.Xml.DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeVarImageSchemaImporterExtension = class(TDNGenericImport<DNTypeVarImageSchemaImporterExtensionClass, DNTypeVarImageSchemaImporterExtension>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDataDocumentClass = interface(DNObjectClass)
  ['{F2F4E07B-104C-5753-BAC3-7255B3949AAC}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    {class} function init: DNXmlDataDocument; overload;
    {class} function init(dataset: DNDataSet): DNXmlDataDocument; overload;

  { static propertys } 

    {class} property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  [DNTypeName('System.Xml.XmlDataDocument')]
  DNXmlDataDocument = interface(DNObject)
  ['{03C271EC-6EF3-3EB2-8C52-28C9AF77C24B}']
  { getters & setters } 

    function get_DataSet: DNDataSet;
    function get_NodeType: DDN.System.Xml.DNXmlNodeType;
    function get_ParentNode: DDN.System.Xml.DNXmlNode;
    function get_DocumentType: DDN.System.Xml.DNXmlDocumentType;
    function get_Implementation: DDN.System.Xml.DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DDN.System.Xml.DNXmlElement;
    function get_OwnerDocument: DDN.System.Xml.DNXmlDocument;
    function get_Schemas: DDN.System.Xml.DNXmlSchemaSet;
    procedure set_Schemas(value: DDN.System.Xml.DNXmlSchemaSet);
    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    function get_NameTable: DDN.System.Xml.DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DDN.System.Xml.DNXmlNodeList;
    function get_PreviousSibling: DDN.System.Xml.DNXmlNode;
    function get_NextSibling: DDN.System.Xml.DNXmlNode;
    function get_Attributes: DDN.System.Xml.DNXmlAttributeCollection;
    function get_FirstChild: DDN.System.Xml.DNXmlNode;
    function get_LastChild: DDN.System.Xml.DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DDN.System.Xml.DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    function get_PreviousText: DDN.System.Xml.DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);

  { methods } 

    function CreateElement(prefix: string; localName: string; namespaceURI: string): DDN.System.Xml.DNXmlElement; overload;
    function CreateEntityReference(name: string): DDN.System.Xml.DNXmlEntityReference;
    function GetRowFromElement(e: DDN.System.Xml.DNXmlElement): DNDataRow;
    function GetElementFromRow(r: DNDataRow): DDN.System.Xml.DNXmlElement;
    function CloneNode(deep: Boolean): DDN.System.Xml.DNXmlNode;
    procedure Load(filename: string); overload;
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    procedure Load(reader: DDN.System.Xml.DNXmlReader); overload;
    function GetElementById(elemId: string): DDN.System.Xml.DNXmlElement;
    function GetElementsByTagName(name: string): DDN.System.Xml.DNXmlNodeList; overload;
    function CreateAttribute(name: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateCDataSection(data: string): DDN.System.Xml.DNXmlCDataSection;
    function CreateComment(data: string): DDN.System.Xml.DNXmlComment;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DDN.System.Xml.DNXmlDocumentType;
    function CreateDocumentFragment: DDN.System.Xml.DNXmlDocumentFragment;
    function CreateElement(name: string): DDN.System.Xml.DNXmlElement; overload;
    function CreateProcessingInstruction(target: string; data: string): DDN.System.Xml.DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DDN.System.Xml.DNXmlDeclaration;
    function CreateTextNode(text: string): DDN.System.Xml.DNXmlText;
    function CreateSignificantWhitespace(text: string): DDN.System.Xml.DNXmlSignificantWhitespace;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function CreateWhitespace(text: string): DDN.System.Xml.DNXmlWhitespace;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DDN.System.Xml.DNXmlNodeList; overload;
    function ImportNode(node: DDN.System.Xml.DNXmlNode; deep: Boolean): DDN.System.Xml.DNXmlNode;
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function ReadNode(reader: DDN.System.Xml.DNXmlReader): DDN.System.Xml.DNXmlNode;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteTo(w: DDN.System.Xml.DNXmlWriter);
    procedure WriteContentTo(xw: DDN.System.Xml.DNXmlWriter);
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler); overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    procedure Save(w: DDN.System.Xml.DNXmlWriter); overload;
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler; nodeToValidate: DDN.System.Xml.DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DDN.System.Xml.DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNode; overload;
    function SelectNodes(xpath: string): DDN.System.Xml.DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNodeList; overload;
    function InsertBefore(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function InsertAfter(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function ReplaceChild(newChild: DDN.System.Xml.DNXmlNode; oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function RemoveChild(oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function PrependChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function AppendChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    procedure Normalize;
    function Clone: DDN.System.Xml.DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSet: DNDataSet read get_DataSet;
    property NodeType: DDN.System.Xml.DNXmlNodeType read get_NodeType;
    property ParentNode: DDN.System.Xml.DNXmlNode read get_ParentNode;
    property DocumentType: DDN.System.Xml.DNXmlDocumentType read get_DocumentType;
    property &Implementation: DDN.System.Xml.DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DDN.System.Xml.DNXmlElement read get_DocumentElement;
    property OwnerDocument: DDN.System.Xml.DNXmlDocument read get_OwnerDocument;
    property Schemas: DDN.System.Xml.DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    property NameTable: DDN.System.Xml.DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DDN.System.Xml.DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DDN.System.Xml.DNXmlNode read get_PreviousSibling;
    property NextSibling: DDN.System.Xml.DNXmlNode read get_NextSibling;
    property Attributes: DDN.System.Xml.DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DDN.System.Xml.DNXmlNode read get_FirstChild;
    property LastChild: DDN.System.Xml.DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property PreviousText: DDN.System.Xml.DNXmlNode read get_PreviousText;
  end;

  TDNXmlDataDocument = class(TDNGenericImport<DNXmlDataDocumentClass, DNXmlDataDocument>) end;


implementation


initialization
  LoadAssemblyModule('System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089');

finalization

end.
