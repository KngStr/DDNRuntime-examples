// PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//-----------------------------------------------------------//
//                                                           //
//     DDN.PresentationCore                         
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.PresentationCore;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Windows.Common;

type

{ enums }

  //-------------namespace: System.Windows.Automation----------------
  [DNTypeName('System.Windows.Automation.AutomationLiveSetting')]
  DNAutomationLiveSetting = type Integer;
  DNAutomationLiveSettingHelper = record helper for DNAutomationLiveSetting
  public const
    Off = 0;
    Polite = 1;
    Assertive = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  [DNTypeName('System.Windows.Automation.IsOffscreenBehavior')]
  DNIsOffscreenBehavior = type Integer;
  DNIsOffscreenBehaviorHelper = record helper for DNIsOffscreenBehavior
  public const
    Default_ = 0;
    Onscreen = 1;
    Offscreen = 2;
    FromClip = 3;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationControlType')]
  DNAutomationControlType = type Integer;
  DNAutomationControlTypeHelper = record helper for DNAutomationControlType
  public const
    Button = 0;
    Calendar = 1;
    CheckBox = 2;
    ComboBox = 3;
    Edit = 4;
    Hyperlink = 5;
    Image = 6;
    ListItem = 7;
    List = 8;
    Menu = 9;
    MenuBar = 10;
    MenuItem = 11;
    ProgressBar = 12;
    RadioButton = 13;
    ScrollBar = 14;
    Slider = 15;
    Spinner = 16;
    StatusBar = 17;
    Tab = 18;
    TabItem = 19;
    Text = 20;
    ToolBar = 21;
    ToolTip = 22;
    Tree = 23;
    TreeItem = 24;
    Custom = 25;
    Group = 26;
    Thumb = 27;
    DataGrid = 28;
    DataItem = 29;
    Document = 30;
    SplitButton = 31;
    Window = 32;
    Pane = 33;
    Header = 34;
    HeaderItem = 35;
    Table = 36;
    TitleBar = 37;
    Separator = 38;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationEvents')]
  DNAutomationEvents = type Integer;
  DNAutomationEventsHelper = record helper for DNAutomationEvents
  public const
    ToolTipOpened = 0;
    ToolTipClosed = 1;
    MenuOpened = 2;
    MenuClosed = 3;
    AutomationFocusChanged = 4;
    InvokePatternOnInvoked = 5;
    SelectionItemPatternOnElementAddedToSelection = 6;
    SelectionItemPatternOnElementRemovedFromSelection = 7;
    SelectionItemPatternOnElementSelected = 8;
    SelectionPatternOnInvalidated = 9;
    TextPatternOnTextSelectionChanged = 10;
    TextPatternOnTextChanged = 11;
    AsyncContentLoaded = 12;
    PropertyChanged = 13;
    StructureChanged = 14;
    InputReachedTarget = 15;
    InputReachedOtherElement = 16;
    InputDiscarded = 17;
    LiveRegionChanged = 18;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.AutomationOrientation')]
  DNAutomationOrientation = type Integer;
  DNAutomationOrientationHelper = record helper for DNAutomationOrientation
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
  end;


  //-------------namespace: System.Windows.Automation.Peers----------------
  [DNTypeName('System.Windows.Automation.Peers.PatternInterface')]
  DNPatternInterface = type Integer;
  DNPatternInterfaceHelper = record helper for DNPatternInterface
  public const
    Invoke = 0;
    Selection = 1;
    Value = 2;
    RangeValue = 3;
    Scroll = 4;
    ScrollItem = 5;
    ExpandCollapse = 6;
    Grid = 7;
    GridItem = 8;
    MultipleView = 9;
    Window = 10;
    SelectionItem = 11;
    Dock = 12;
    Table = 13;
    TableItem = 14;
    Toggle = 15;
    Transform = 16;
    Text = 17;
    ItemContainer = 18;
    VirtualizedItem = 19;
    SynchronizedInput = 20;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.BaselineAlignment')]
  DNBaselineAlignment = type Integer;
  DNBaselineAlignmentHelper = record helper for DNBaselineAlignment
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
    Baseline = 3;
    TextTop = 4;
    TextBottom = 5;
    Subscript = 6;
    Superscript = 7;
  end;


  //-------------namespace: System.Windows.Diagnostics----------------
  [DNTypeName('System.Windows.Diagnostics.VisualTreeChangeType')]
  DNVisualTreeChangeType = type Integer;
  DNVisualTreeChangeTypeHelper = record helper for DNVisualTreeChangeType
  public const
    Add = 0;
    Remove = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragAction')]
  DNDragAction = type Integer;
  DNDragActionHelper = record helper for DNDragAction
  public const
    Continue_ = 0;
    Drop = 1;
    Cancel = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragDropEffects')]
  DNDragDropEffects = type Integer;
  DNDragDropEffectsHelper = record helper for DNDragDropEffects
  public const
    None = 0;
    Copy = 1;
    Move = 2;
    Link = 4;
    Scroll = -2147483648;
    All = -2147483645;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.DragDropKeyStates')]
  DNDragDropKeyStates = type Integer;
  DNDragDropKeyStatesHelper = record helper for DNDragDropKeyStates
  public const
    None = 0;
    LeftMouseButton = 1;
    RightMouseButton = 2;
    ShiftKey = 4;
    ControlKey = 8;
    MiddleMouseButton = 16;
    AltKey = 32;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FlowDirection')]
  DNFlowDirection = type Integer;
  DNFlowDirectionHelper = record helper for DNFlowDirection
  public const
    LeftToRight = 0;
    RightToLeft = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontCapitals')]
  DNFontCapitals = type Integer;
  DNFontCapitalsHelper = record helper for DNFontCapitals
  public const
    Normal = 0;
    AllSmallCaps = 1;
    SmallCaps = 2;
    AllPetiteCaps = 3;
    PetiteCaps = 4;
    Unicase = 5;
    Titling = 6;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontEastAsianLanguage')]
  DNFontEastAsianLanguage = type Integer;
  DNFontEastAsianLanguageHelper = record helper for DNFontEastAsianLanguage
  public const
    Normal = 0;
    Jis78 = 1;
    Jis83 = 2;
    Jis90 = 3;
    Jis04 = 4;
    HojoKanji = 5;
    NlcKanji = 6;
    Simplified = 7;
    Traditional = 8;
    TraditionalNames = 9;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontEastAsianWidths')]
  DNFontEastAsianWidths = type Integer;
  DNFontEastAsianWidthsHelper = record helper for DNFontEastAsianWidths
  public const
    Normal = 0;
    Proportional = 1;
    Full = 2;
    Half = 3;
    Third = 4;
    Quarter = 5;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontFraction')]
  DNFontFraction = type Integer;
  DNFontFractionHelper = record helper for DNFontFraction
  public const
    Normal = 0;
    Slashed = 1;
    Stacked = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontNumeralAlignment')]
  DNFontNumeralAlignment = type Integer;
  DNFontNumeralAlignmentHelper = record helper for DNFontNumeralAlignment
  public const
    Normal = 0;
    Proportional = 1;
    Tabular = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontNumeralStyle')]
  DNFontNumeralStyle = type Integer;
  DNFontNumeralStyleHelper = record helper for DNFontNumeralStyle
  public const
    Normal = 0;
    Lining = 1;
    OldStyle = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.FontVariants')]
  DNFontVariants = type Integer;
  DNFontVariantsHelper = record helper for DNFontVariants
  public const
    Normal = 0;
    Superscript = 1;
    Subscript = 2;
    Ordinal = 3;
    Inferior = 4;
    Ruby = 5;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.ApplicationGesture')]
  DNApplicationGesture = type Integer;
  DNApplicationGestureHelper = record helper for DNApplicationGesture
  public const
    AllGestures = 0;
    NoGesture = 61440;
    ScratchOut = 61441;
    Triangle = 61442;
    Square = 61443;
    Star = 61444;
    Check = 61445;
    Curlicue = 61456;
    DoubleCurlicue = 61457;
    Circle = 61472;
    DoubleCircle = 61473;
    SemicircleLeft = 61480;
    SemicircleRight = 61481;
    ChevronUp = 61488;
    ChevronDown = 61489;
    ChevronLeft = 61490;
    ChevronRight = 61491;
    ArrowUp = 61496;
    ArrowDown = 61497;
    ArrowLeft = 61498;
    ArrowRight = 61499;
    Up = 61528;
    Down = 61529;
    Left = 61530;
    Right = 61531;
    UpDown = 61536;
    DownUp = 61537;
    LeftRight = 61538;
    RightLeft = 61539;
    UpLeftLong = 61540;
    UpRightLong = 61541;
    DownLeftLong = 61542;
    DownRightLong = 61543;
    UpLeft = 61544;
    UpRight = 61545;
    DownLeft = 61546;
    DownRight = 61547;
    LeftUp = 61548;
    LeftDown = 61549;
    RightUp = 61550;
    RightDown = 61551;
    Exclamation = 61604;
    Tap = 61680;
    DoubleTap = 61681;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.RecognitionConfidence')]
  DNRecognitionConfidence = type Integer;
  DNRecognitionConfidenceHelper = record helper for DNRecognitionConfidence
  public const
    Strong = 0;
    Intermediate = 1;
    Poor = 2;
  end;


  //-------------namespace: System.Windows.Ink----------------
  [DNTypeName('System.Windows.Ink.StylusTip')]
  DNStylusTip = type Integer;
  DNStylusTipHelper = record helper for DNStylusTip
  public const
    Rectangle = 0;
    Ellipse = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.CaptureMode')]
  DNCaptureMode = type Integer;
  DNCaptureModeHelper = record helper for DNCaptureMode
  public const
    None = 0;
    Element = 1;
    SubTree = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.CursorType')]
  DNCursorType = type Integer;
  DNCursorTypeHelper = record helper for DNCursorType
  public const
    None = 0;
    No = 1;
    Arrow = 2;
    AppStarting = 3;
    Cross = 4;
    Help = 5;
    IBeam = 6;
    SizeAll = 7;
    SizeNESW = 8;
    SizeNS = 9;
    SizeNWSE = 10;
    SizeWE = 11;
    UpArrow = 12;
    Wait = 13;
    Hand = 14;
    Pen = 15;
    ScrollNS = 16;
    ScrollWE = 17;
    ScrollAll = 18;
    ScrollN = 19;
    ScrollS = 20;
    ScrollW = 21;
    ScrollE = 22;
    ScrollNW = 23;
    ScrollNE = 24;
    ScrollSW = 25;
    ScrollSE = 26;
    ArrowCD = 27;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ImeConversionModeValues')]
  DNImeConversionModeValues = type Integer;
  DNImeConversionModeValuesHelper = record helper for DNImeConversionModeValues
  public const
    Native = 1;
    Katakana = 2;
    FullShape = 4;
    Roman = 8;
    CharCode = 16;
    NoConversion = 32;
    Eudc = 64;
    Symbol = 128;
    Fixed = 256;
    Alphanumeric = 512;
    DoNotCare = -2147483648;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ImeSentenceModeValues')]
  DNImeSentenceModeValues = type Integer;
  DNImeSentenceModeValuesHelper = record helper for DNImeSentenceModeValues
  public const
    None = 0;
    PluralClause = 1;
    SingleConversion = 2;
    Automatic = 4;
    PhrasePrediction = 8;
    Conversation = 16;
    DoNotCare = -2147483648;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.InputMethodState')]
  DNInputMethodState = type Integer;
  DNInputMethodStateHelper = record helper for DNInputMethodState
  public const
    Off = 0;
    On_ = 1;
    DoNotCare = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.InputMode')]
  DNInputMode = type Integer;
  DNInputModeHelper = record helper for DNInputMode
  public const
    Foreground = 0;
    Sink = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.InputScopeNameValue')]
  DNInputScopeNameValue = type Integer;
  DNInputScopeNameValueHelper = record helper for DNInputScopeNameValue
  public const
    Default_ = 0;
    Url = 1;
    FullFilePath = 2;
    FileName = 3;
    EmailUserName = 4;
    EmailSmtpAddress = 5;
    LogOnName = 6;
    PersonalFullName = 7;
    PersonalNamePrefix = 8;
    PersonalGivenName = 9;
    PersonalMiddleName = 10;
    PersonalSurname = 11;
    PersonalNameSuffix = 12;
    PostalAddress = 13;
    PostalCode = 14;
    AddressStreet = 15;
    AddressStateOrProvince = 16;
    AddressCity = 17;
    AddressCountryName = 18;
    AddressCountryShortName = 19;
    CurrencyAmountAndSymbol = 20;
    CurrencyAmount = 21;
    Date = 22;
    DateMonth = 23;
    DateDay = 24;
    DateYear = 25;
    DateMonthName = 26;
    DateDayName = 27;
    Digits = 28;
    Number = 29;
    OneChar = 30;
    Password = 31;
    TelephoneNumber = 32;
    TelephoneCountryCode = 33;
    TelephoneAreaCode = 34;
    TelephoneLocalNumber = 35;
    Time = 36;
    TimeHour = 37;
    TimeMinorSec = 38;
    NumberFullWidth = 39;
    AlphanumericHalfWidth = 40;
    AlphanumericFullWidth = 41;
    CurrencyChinese = 42;
    Bopomofo = 43;
    Hiragana = 44;
    KatakanaHalfWidth = 45;
    KatakanaFullWidth = 46;
    Hanja = 47;
    Xml = -4;
    Srgs = -3;
    RegularExpression = -2;
    PhraseList = -1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.InputType')]
  DNInputType = type Integer;
  DNInputTypeHelper = record helper for DNInputType
  public const
    Keyboard = 0;
    Mouse = 1;
    Stylus = 2;
    Hid = 3;
    Text = 4;
    Command = 5;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.KeyStates')]
  DNKeyStates = type Integer;
  DNKeyStatesHelper = record helper for DNKeyStates
  public const
    None = 0;
    Down = 1;
    Toggled = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ManipulationModes')]
  DNManipulationModes = type Integer;
  DNManipulationModesHelper = record helper for DNManipulationModes
  public const
    None = 0;
    TranslateX = 1;
    TranslateY = 2;
    Translate = 3;
    Rotate = 4;
    Scale = 8;
    All = 15;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.MouseAction')]
  DNMouseAction = type Integer;
  DNMouseActionHelper = record helper for DNMouseAction
  public const
    None = 0;
    LeftClick = 1;
    RightClick = 2;
    MiddleClick = 3;
    WheelClick = 4;
    LeftDoubleClick = 5;
    RightDoubleClick = 6;
    MiddleDoubleClick = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.MouseButton')]
  DNMouseButton = type Integer;
  DNMouseButtonHelper = record helper for DNMouseButton
  public const
    Left = 0;
    Middle = 1;
    Right = 2;
    XButton1 = 3;
    XButton2 = 4;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.MouseButtonState')]
  DNMouseButtonState = type Integer;
  DNMouseButtonStateHelper = record helper for DNMouseButtonState
  public const
    Released = 0;
    Pressed = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.RestoreFocusMode')]
  DNRestoreFocusMode = type Integer;
  DNRestoreFocusModeHelper = record helper for DNRestoreFocusMode
  public const
    Auto = 0;
    None = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.SpeechMode')]
  DNSpeechMode = type Integer;
  DNSpeechModeHelper = record helper for DNSpeechMode
  public const
    Dictation = 0;
    Command = 1;
    Indeterminate = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.StylusButtonState')]
  DNStylusButtonState = type Integer;
  DNStylusButtonStateHelper = record helper for DNStylusButtonState
  public const
    Up = 0;
    Down = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.StylusPointPropertyUnit')]
  DNStylusPointPropertyUnit = type Integer;
  DNStylusPointPropertyUnitHelper = record helper for DNStylusPointPropertyUnit
  public const
    None = 0;
    Inches = 1;
    Centimeters = 2;
    Degrees = 3;
    Radians = 4;
    Seconds = 5;
    Pounds = 6;
    Grams = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.SystemGesture')]
  DNSystemGesture = type Integer;
  DNSystemGestureHelper = record helper for DNSystemGesture
  public const
    None = 0;
    Tap = 16;
    RightTap = 18;
    Drag = 19;
    RightDrag = 20;
    HoldEnter = 21;
    HoldLeave = 22;
    HoverEnter = 23;
    HoverLeave = 24;
    Flick = 31;
    TwoFingerTap = 4352;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TabletDeviceType')]
  DNTabletDeviceType = type Integer;
  DNTabletDeviceTypeHelper = record helper for DNTabletDeviceType
  public const
    Stylus = 0;
    Touch = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TabletHardwareCapabilities')]
  DNTabletHardwareCapabilities = type Integer;
  DNTabletHardwareCapabilitiesHelper = record helper for DNTabletHardwareCapabilities
  public const
    None = 0;
    Integrated = 1;
    StylusMustTouch = 2;
    HardProximity = 4;
    StylusHasPhysicalIds = 8;
    SupportsPressure = 1073741824;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TextCompositionAutoComplete')]
  DNTextCompositionAutoComplete = type Integer;
  DNTextCompositionAutoCompleteHelper = record helper for DNTextCompositionAutoComplete
  public const
    Off = 0;
    On_ = 1;
  end;


  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.TouchAction')]
  DNTouchAction = type Integer;
  DNTouchActionHelper = record helper for DNTouchAction
  public const
    Down = 0;
    Move = 1;
    Up = 2;
  end;


  //-------------namespace: System.Windows.Interop----------------
  [DNTypeName('System.Windows.Interop.D3DResourceType')]
  DND3DResourceType = type Integer;
  DND3DResourceTypeHelper = record helper for DND3DResourceType
  public const
    IDirect3DSurface9 = 0;
  end;


  //-------------namespace: System.Windows.Interop----------------
  [DNTypeName('System.Windows.Interop.RenderMode')]
  DNRenderMode = type Integer;
  DNRenderModeHelper = record helper for DNRenderMode
  public const
    Default_ = 0;
    SoftwareOnly = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.LineBreakCondition')]
  DNLineBreakCondition = type Integer;
  DNLineBreakConditionHelper = record helper for DNLineBreakCondition
  public const
    BreakDesired = 0;
    BreakPossible = 1;
    BreakRestrained = 2;
    BreakAlways = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.LocalizationCategory')]
  DNLocalizationCategory = type Integer;
  DNLocalizationCategoryHelper = record helper for DNLocalizationCategory
  public const
    None = 0;
    Text = 1;
    Title = 2;
    Label_ = 3;
    Button = 4;
    CheckBox = 5;
    ComboBox = 6;
    ListBox = 7;
    Menu = 8;
    RadioButton = 9;
    ToolTip = 10;
    Hyperlink = 11;
    TextFlow = 12;
    XmlData = 13;
    Font = 14;
    Inherit = 15;
    Ignore = 16;
    NeverLocalize = 17;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.AlignmentX')]
  DNAlignmentX = type Integer;
  DNAlignmentXHelper = record helper for DNAlignmentX
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.AlignmentY')]
  DNAlignmentY = type Integer;
  DNAlignmentYHelper = record helper for DNAlignmentY
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.ClockState')]
  DNClockState = type Integer;
  DNClockStateHelper = record helper for DNClockState
  public const
    Active = 0;
    Filling = 1;
    Stopped = 2;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.EasingMode')]
  DNEasingMode = type Integer;
  DNEasingModeHelper = record helper for DNEasingMode
  public const
    EaseIn = 0;
    EaseOut = 1;
    EaseInOut = 2;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.FillBehavior')]
  DNFillBehavior = type Integer;
  DNFillBehaviorHelper = record helper for DNFillBehavior
  public const
    HoldEnd = 0;
    Stop = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.HandoffBehavior')]
  DNHandoffBehavior = type Integer;
  DNHandoffBehaviorHelper = record helper for DNHandoffBehavior
  public const
    SnapshotAndReplace = 0;
    Compose = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.KeyTimeType')]
  DNKeyTimeType = type Integer;
  DNKeyTimeTypeHelper = record helper for DNKeyTimeType
  public const
    Uniform = 0;
    Percent = 1;
    TimeSpan = 2;
    Paced = 3;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.PathAnimationSource')]
  DNPathAnimationSource = type Integer;
  DNPathAnimationSourceHelper = record helper for DNPathAnimationSource
  public const
    X = 0;
    Y = 1;
    Angle = 2;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.SlipBehavior')]
  DNSlipBehavior = type Integer;
  DNSlipBehaviorHelper = record helper for DNSlipBehavior
  public const
    Grow = 0;
    Slip = 1;
  end;


  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.TimeSeekOrigin')]
  DNTimeSeekOrigin = type Integer;
  DNTimeSeekOriginHelper = record helper for DNTimeSeekOrigin
  public const
    BeginTime = 0;
    Duration = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.BitmapScalingMode')]
  DNBitmapScalingMode = type Integer;
  DNBitmapScalingModeHelper = record helper for DNBitmapScalingMode
  public const
    Unspecified = 0;
    LowQuality = 1;
    Linear = 1;
    HighQuality = 2;
    Fant = 2;
    NearestNeighbor = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.BrushMappingMode')]
  DNBrushMappingMode = type Integer;
  DNBrushMappingModeHelper = record helper for DNBrushMappingMode
  public const
    Absolute_ = 0;
    RelativeToBoundingBox = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.CachingHint')]
  DNCachingHint = type Integer;
  DNCachingHintHelper = record helper for DNCachingHint
  public const
    Unspecified = 0;
    Cache = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.ClearTypeHint')]
  DNClearTypeHint = type Integer;
  DNClearTypeHintHelper = record helper for DNClearTypeHint
  public const
    Auto = 0;
    Enabled = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.ColorInterpolationMode')]
  DNColorInterpolationMode = type Integer;
  DNColorInterpolationModeHelper = record helper for DNColorInterpolationMode
  public const
    ScRgbLinearInterpolation = 0;
    SRgbLinearInterpolation = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.EdgeMode')]
  DNEdgeMode = type Integer;
  DNEdgeModeHelper = record helper for DNEdgeMode
  public const
    Unspecified = 0;
    Aliased = 1;
  end;


  //-------------namespace: System.Windows.Media.Effects----------------
  [DNTypeName('System.Windows.Media.Effects.EdgeProfile')]
  DNEdgeProfile = type Integer;
  DNEdgeProfileHelper = record helper for DNEdgeProfile
  public const
    Linear = 0;
    CurvedIn = 1;
    CurvedOut = 2;
    BulgedUp = 3;
  end;


  //-------------namespace: System.Windows.Media.Effects----------------
  [DNTypeName('System.Windows.Media.Effects.KernelType')]
  DNKernelType = type Integer;
  DNKernelTypeHelper = record helper for DNKernelType
  public const
    Gaussian = 0;
    Box = 1;
  end;


  //-------------namespace: System.Windows.Media.Effects----------------
  [DNTypeName('System.Windows.Media.Effects.RenderingBias')]
  DNRenderingBias = type Integer;
  DNRenderingBiasHelper = record helper for DNRenderingBias
  public const
    Performance = 0;
    Quality = 1;
  end;


  //-------------namespace: System.Windows.Media.Effects----------------
  [DNTypeName('System.Windows.Media.Effects.SamplingMode')]
  DNSamplingMode = type Integer;
  DNSamplingModeHelper = record helper for DNSamplingMode
  public const
    NearestNeighbor = 0;
    Bilinear = 1;
    Auto = 2;
  end;


  //-------------namespace: System.Windows.Media.Effects----------------
  [DNTypeName('System.Windows.Media.Effects.ShaderRenderMode')]
  DNShaderRenderMode = type Integer;
  DNShaderRenderModeHelper = record helper for DNShaderRenderMode
  public const
    Auto = 0;
    SoftwareOnly = 1;
    HardwareOnly = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.FillRule')]
  DNFillRule = type Integer;
  DNFillRuleHelper = record helper for DNFillRule
  public const
    EvenOdd = 0;
    Nonzero = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.FontEmbeddingRight')]
  DNFontEmbeddingRight = type Integer;
  DNFontEmbeddingRightHelper = record helper for DNFontEmbeddingRight
  public const
    Installable = 0;
    InstallableButNoSubsetting = 1;
    InstallableButWithBitmapsOnly = 2;
    InstallableButNoSubsettingAndWithBitmapsOnly = 3;
    RestrictedLicense = 4;
    PreviewAndPrint = 5;
    PreviewAndPrintButNoSubsetting = 6;
    PreviewAndPrintButWithBitmapsOnly = 7;
    PreviewAndPrintButNoSubsettingAndWithBitmapsOnly = 8;
    Editable = 9;
    EditableButNoSubsetting = 10;
    EditableButWithBitmapsOnly = 11;
    EditableButNoSubsettingAndWithBitmapsOnly = 12;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.GeometryCombineMode')]
  DNGeometryCombineMode = type Integer;
  DNGeometryCombineModeHelper = record helper for DNGeometryCombineMode
  public const
    Union = 0;
    Intersect = 1;
    Xor_ = 2;
    Exclude = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.GradientSpreadMethod')]
  DNGradientSpreadMethod = type Integer;
  DNGradientSpreadMethodHelper = record helper for DNGradientSpreadMethod
  public const
    Pad = 0;
    Reflect = 1;
    Repeat_ = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.HitTestFilterBehavior')]
  DNHitTestFilterBehavior = type Integer;
  DNHitTestFilterBehaviorHelper = record helper for DNHitTestFilterBehavior
  public const
    ContinueSkipSelfAndChildren = 0;
    ContinueSkipChildren = 2;
    ContinueSkipSelf = 4;
    Continue_ = 6;
    Stop = 8;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.HitTestResultBehavior')]
  DNHitTestResultBehavior = type Integer;
  DNHitTestResultBehaviorHelper = record helper for DNHitTestResultBehavior
  public const
    Stop = 0;
    Continue_ = 1;
  end;


  //-------------namespace: System.Windows.Media.Imaging----------------
  [DNTypeName('System.Windows.Media.Imaging.BitmapCacheOption')]
  DNBitmapCacheOption = type Integer;
  DNBitmapCacheOptionHelper = record helper for DNBitmapCacheOption
  public const
    Default_ = 0;
    OnDemand = 0;
    OnLoad = 1;
    None = 2;
  end;


  //-------------namespace: System.Windows.Media.Imaging----------------
  [DNTypeName('System.Windows.Media.Imaging.BitmapCreateOptions')]
  DNBitmapCreateOptions = type Integer;
  DNBitmapCreateOptionsHelper = record helper for DNBitmapCreateOptions
  public const
    None = 0;
    PreservePixelFormat = 1;
    DelayCreation = 2;
    IgnoreColorProfile = 4;
    IgnoreImageCache = 8;
  end;


  //-------------namespace: System.Windows.Media.Imaging----------------
  [DNTypeName('System.Windows.Media.Imaging.PngInterlaceOption')]
  DNPngInterlaceOption = type Integer;
  DNPngInterlaceOptionHelper = record helper for DNPngInterlaceOption
  public const
    Default_ = 0;
    On_ = 1;
    Off = 2;
  end;


  //-------------namespace: System.Windows.Media.Imaging----------------
  [DNTypeName('System.Windows.Media.Imaging.Rotation')]
  DNRotation = type Integer;
  DNRotationHelper = record helper for DNRotation
  public const
    Rotate0 = 0;
    Rotate90 = 1;
    Rotate180 = 2;
    Rotate270 = 3;
  end;


  //-------------namespace: System.Windows.Media.Imaging----------------
  [DNTypeName('System.Windows.Media.Imaging.TiffCompressOption')]
  DNTiffCompressOption = type Integer;
  DNTiffCompressOptionHelper = record helper for DNTiffCompressOption
  public const
    Default_ = 0;
    None = 1;
    Ccitt3 = 2;
    Ccitt4 = 3;
    Lzw = 4;
    Rle = 5;
    Zip = 6;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.IntersectionDetail')]
  DNIntersectionDetail = type Integer;
  DNIntersectionDetailHelper = record helper for DNIntersectionDetail
  public const
    NotCalculated = 0;
    Empty = 1;
    FullyInside = 2;
    FullyContains = 3;
    Intersects = 4;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.NumberCultureSource')]
  DNNumberCultureSource = type Integer;
  DNNumberCultureSourceHelper = record helper for DNNumberCultureSource
  public const
    Text = 0;
    User = 1;
    Override_ = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.NumberSubstitutionMethod')]
  DNNumberSubstitutionMethod = type Integer;
  DNNumberSubstitutionMethodHelper = record helper for DNNumberSubstitutionMethod
  public const
    AsCulture = 0;
    Context = 1;
    European = 2;
    NativeNational = 3;
    Traditional = 4;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.PenLineCap')]
  DNPenLineCap = type Integer;
  DNPenLineCapHelper = record helper for DNPenLineCap
  public const
    Flat = 0;
    Square = 1;
    Round = 2;
    Triangle = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.PenLineJoin')]
  DNPenLineJoin = type Integer;
  DNPenLineJoinHelper = record helper for DNPenLineJoin
  public const
    Miter = 0;
    Bevel = 1;
    Round = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.Stretch')]
  DNStretch = type Integer;
  DNStretchHelper = record helper for DNStretch
  public const
    None = 0;
    Fill = 1;
    Uniform = 2;
    UniformToFill = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.StyleSimulations')]
  DNStyleSimulations = type Integer;
  DNStyleSimulationsHelper = record helper for DNStyleSimulations
  public const
    None = 0;
    BoldSimulation = 1;
    ItalicSimulation = 2;
    BoldItalicSimulation = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.SweepDirection')]
  DNSweepDirection = type Integer;
  DNSweepDirectionHelper = record helper for DNSweepDirection
  public const
    Counterclockwise = 0;
    Clockwise = 1;
  end;


  //-------------namespace: System.Windows.Media.TextFormatting----------------
  [DNTypeName('System.Windows.Media.TextFormatting.InvertAxes')]
  DNInvertAxes = type Integer;
  DNInvertAxesHelper = record helper for DNInvertAxes
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
    Both = 3;
  end;


  //-------------namespace: System.Windows.Media.TextFormatting----------------
  [DNTypeName('System.Windows.Media.TextFormatting.TextCollapsingStyle')]
  DNTextCollapsingStyle = type Integer;
  DNTextCollapsingStyleHelper = record helper for DNTextCollapsingStyle
  public const
    TrailingCharacter = 0;
    TrailingWord = 1;
  end;


  //-------------namespace: System.Windows.Media.TextFormatting----------------
  [DNTypeName('System.Windows.Media.TextFormatting.TextTabAlignment')]
  DNTextTabAlignment = type Integer;
  DNTextTabAlignmentHelper = record helper for DNTextTabAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Character = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextFormattingMode')]
  DNTextFormattingMode = type Integer;
  DNTextFormattingModeHelper = record helper for DNTextFormattingMode
  public const
    Ideal = 0;
    Display = 1;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextHintingMode')]
  DNTextHintingMode = type Integer;
  DNTextHintingModeHelper = record helper for DNTextHintingMode
  public const
    Auto = 0;
    Fixed = 1;
    Animated = 2;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TextRenderingMode')]
  DNTextRenderingMode = type Integer;
  DNTextRenderingModeHelper = record helper for DNTextRenderingMode
  public const
    Auto = 0;
    Aliased = 1;
    Grayscale = 2;
    ClearType = 3;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.TileMode')]
  DNTileMode = type Integer;
  DNTileModeHelper = record helper for DNTileMode
  public const
    None = 0;
    FlipX = 1;
    FlipY = 2;
    FlipXY = 3;
    Tile = 4;
  end;


  //-------------namespace: System.Windows.Media----------------
  [DNTypeName('System.Windows.Media.ToleranceType')]
  DNToleranceType = type Integer;
  DNToleranceTypeHelper = record helper for DNToleranceType
  public const
    Absolute_ = 0;
    Relative = 1;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Modifiability')]
  DNModifiability = type Integer;
  DNModifiabilityHelper = record helper for DNModifiability
  public const
    Unmodifiable = 0;
    Modifiable = 1;
    Inherit = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Readability')]
  DNReadability = type Integer;
  DNReadabilityHelper = record helper for DNReadability
  public const
    Unreadable = 0;
    Readable = 1;
    Inherit = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.RoutingStrategy')]
  DNRoutingStrategy = type Integer;
  DNRoutingStrategyHelper = record helper for DNRoutingStrategy
  public const
    Tunnel = 0;
    Bubble = 1;
    Direct = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.SizeToContent')]
  DNSizeToContent = type Integer;
  DNSizeToContentHelper = record helper for DNSizeToContent
  public const
    Manual = 0;
    Width = 1;
    Height = 2;
    WidthAndHeight = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    Left = 0;
    Right = 1;
    Center = 2;
    Justify = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextDataFormat')]
  DNTextDataFormat = type Integer;
  DNTextDataFormatHelper = record helper for DNTextDataFormat
  public const
    Text = 0;
    UnicodeText = 1;
    Rtf = 2;
    Html = 3;
    CommaSeparatedValue = 4;
    Xaml = 5;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextDecorationLocation')]
  DNTextDecorationLocation = type Integer;
  DNTextDecorationLocationHelper = record helper for DNTextDecorationLocation
  public const
    Underline = 0;
    OverLine = 1;
    Strikethrough = 2;
    Baseline = 3;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextDecorationUnit')]
  DNTextDecorationUnit = type Integer;
  DNTextDecorationUnitHelper = record helper for DNTextDecorationUnit
  public const
    FontRecommended = 0;
    FontRenderingEmSize = 1;
    Pixel = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextMarkerStyle')]
  DNTextMarkerStyle = type Integer;
  DNTextMarkerStyleHelper = record helper for DNTextMarkerStyle
  public const
    None = 0;
    Disc = 1;
    Circle = 2;
    Square = 3;
    Box = 4;
    LowerRoman = 5;
    UpperRoman = 6;
    LowerLatin = 7;
    UpperLatin = 8;
    Decimal = 9;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextTrimming')]
  DNTextTrimming = type Integer;
  DNTextTrimmingHelper = record helper for DNTextTrimming
  public const
    None = 0;
    CharacterEllipsis = 1;
    WordEllipsis = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.TextWrapping')]
  DNTextWrapping = type Integer;
  DNTextWrappingHelper = record helper for DNTextWrapping
  public const
    WrapWithOverflow = 0;
    NoWrap = 1;
    Wrap = 2;
  end;


  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.Visibility')]
  DNVisibility = type Integer;
  DNVisibilityHelper = record helper for DNVisibility
  public const
    Visible = 0;
    Hidden = 1;
    Collapsed = 2;
  end;




type


{ declares }

  DNLocalizabilityAttribute = interface; // type: System.Windows.LocalizabilityAttribute, namespace: System.Windows
  DNAssemblyAssociatedContentFileAttribute = interface; // type: System.Windows.Resources.AssemblyAssociatedContentFileAttribute, namespace: System.Windows.Resources
  DNStrokeCollection = interface; // type: System.Windows.Ink.StrokeCollection, namespace: System.Windows.Ink
  DNStylusPlugInCollection = interface; // type: System.Windows.Input.StylusPlugIns.StylusPlugInCollection, namespace: System.Windows.Input.StylusPlugIns
  DNStylusPointCollection = interface; // type: System.Windows.Input.StylusPointCollection, namespace: System.Windows.Input
  DNTouchPointCollection = interface; // type: System.Windows.Input.TouchPointCollection, namespace: System.Windows.Input
  DNStylusButtonCollection = interface; // type: System.Windows.Input.StylusButtonCollection, namespace: System.Windows.Input
  DNStylusDeviceCollection = interface; // type: System.Windows.Input.StylusDeviceCollection, namespace: System.Windows.Input
  DNCultureInfoIetfLanguageTagConverter = interface; // type: System.Windows.CultureInfoIetfLanguageTagConverter, namespace: System.Windows
  DNDurationConverter = interface; // type: System.Windows.DurationConverter, namespace: System.Windows
  DNFontStretchConverter = interface; // type: System.Windows.FontStretchConverter, namespace: System.Windows
  DNFontStyleConverter = interface; // type: System.Windows.FontStyleConverter, namespace: System.Windows
  DNFontWeightConverter = interface; // type: System.Windows.FontWeightConverter, namespace: System.Windows
  DNCursorConverter = interface; // type: System.Windows.Input.CursorConverter, namespace: System.Windows.Input
  DNInputScopeConverter = interface; // type: System.Windows.Input.InputScopeConverter, namespace: System.Windows.Input
  DNInputScopeNameConverter = interface; // type: System.Windows.Input.InputScopeNameConverter, namespace: System.Windows.Input
  DNKeyGestureConverter = interface; // type: System.Windows.Input.KeyGestureConverter, namespace: System.Windows.Input
  DNMouseActionConverter = interface; // type: System.Windows.Input.MouseActionConverter, namespace: System.Windows.Input
  DNMouseGestureConverter = interface; // type: System.Windows.Input.MouseGestureConverter, namespace: System.Windows.Input
  DNKeySplineConverter = interface; // type: System.Windows.KeySplineConverter, namespace: System.Windows
  DNKeyTimeConverter = interface; // type: System.Windows.KeyTimeConverter, namespace: System.Windows
  DNXmlLanguageConverter = interface; // type: System.Windows.Markup.XmlLanguageConverter, namespace: System.Windows.Markup
  DNRepeatBehaviorConverter = interface; // type: System.Windows.Media.Animation.RepeatBehaviorConverter, namespace: System.Windows.Media.Animation
  DNBrushConverter = interface; // type: System.Windows.Media.BrushConverter, namespace: System.Windows.Media
  DNCacheModeConverter = interface; // type: System.Windows.Media.CacheModeConverter, namespace: System.Windows.Media
  DNColorConverter = interface; // type: System.Windows.Media.ColorConverter, namespace: System.Windows.Media
  DNBaseIListConverter = interface; // type: System.Windows.Media.Converters.BaseIListConverter, namespace: System.Windows.Media.Converters
  DNBoolIListConverter = interface; // type: System.Windows.Media.Converters.BoolIListConverter, namespace: System.Windows.Media.Converters
  DNCharIListConverter = interface; // type: System.Windows.Media.Converters.CharIListConverter, namespace: System.Windows.Media.Converters
  DNDoubleIListConverter = interface; // type: System.Windows.Media.Converters.DoubleIListConverter, namespace: System.Windows.Media.Converters
  DNPointIListConverter = interface; // type: System.Windows.Media.Converters.PointIListConverter, namespace: System.Windows.Media.Converters
  DNUShortIListConverter = interface; // type: System.Windows.Media.Converters.UShortIListConverter, namespace: System.Windows.Media.Converters
  DNDoubleCollectionConverter = interface; // type: System.Windows.Media.DoubleCollectionConverter, namespace: System.Windows.Media
  DNFontFamilyConverter = interface; // type: System.Windows.Media.FontFamilyConverter, namespace: System.Windows.Media
  DNGeometryConverter = interface; // type: System.Windows.Media.GeometryConverter, namespace: System.Windows.Media
  DNImageSourceConverter = interface; // type: System.Windows.Media.ImageSourceConverter, namespace: System.Windows.Media
  DNInt32CollectionConverter = interface; // type: System.Windows.Media.Int32CollectionConverter, namespace: System.Windows.Media
  DNMatrix3DConverter = interface; // type: System.Windows.Media.Media3D.Matrix3DConverter, namespace: System.Windows.Media.Media3D
  DNPoint3DCollectionConverter = interface; // type: System.Windows.Media.Media3D.Point3DCollectionConverter, namespace: System.Windows.Media.Media3D
  DNPoint3DConverter = interface; // type: System.Windows.Media.Media3D.Point3DConverter, namespace: System.Windows.Media.Media3D
  DNPoint4DConverter = interface; // type: System.Windows.Media.Media3D.Point4DConverter, namespace: System.Windows.Media.Media3D
  DNQuaternionConverter = interface; // type: System.Windows.Media.Media3D.QuaternionConverter, namespace: System.Windows.Media.Media3D
  DNRect3DConverter = interface; // type: System.Windows.Media.Media3D.Rect3DConverter, namespace: System.Windows.Media.Media3D
  DNSize3DConverter = interface; // type: System.Windows.Media.Media3D.Size3DConverter, namespace: System.Windows.Media.Media3D
  DNVector3DCollectionConverter = interface; // type: System.Windows.Media.Media3D.Vector3DCollectionConverter, namespace: System.Windows.Media.Media3D
  DNVector3DConverter = interface; // type: System.Windows.Media.Media3D.Vector3DConverter, namespace: System.Windows.Media.Media3D
  DNPathFigureCollectionConverter = interface; // type: System.Windows.Media.PathFigureCollectionConverter, namespace: System.Windows.Media
  DNPixelFormatConverter = interface; // type: System.Windows.Media.PixelFormatConverter, namespace: System.Windows.Media
  DNPointCollectionConverter = interface; // type: System.Windows.Media.PointCollectionConverter, namespace: System.Windows.Media
  DNRequestCachePolicyConverter = interface; // type: System.Windows.Media.RequestCachePolicyConverter, namespace: System.Windows.Media
  DNTransformConverter = interface; // type: System.Windows.Media.TransformConverter, namespace: System.Windows.Media
  DNVectorCollectionConverter = interface; // type: System.Windows.Media.VectorCollectionConverter, namespace: System.Windows.Media
  DNStrokeCollectionConverter = interface; // type: System.Windows.StrokeCollectionConverter, namespace: System.Windows
  DNTextDecorationCollectionConverter = interface; // type: System.Windows.TextDecorationCollectionConverter, namespace: System.Windows
  DNGetPageCompletedEventArgs = interface; // type: System.Windows.Documents.GetPageCompletedEventArgs, namespace: System.Windows.Documents
  DNGetPageNumberCompletedEventArgs = interface; // type: System.Windows.Documents.GetPageNumberCompletedEventArgs, namespace: System.Windows.Documents
  DNHwndDpiChangedEventArgs = interface; // type: System.Windows.HwndDpiChangedEventArgs, namespace: System.Windows
  DNAutoResizedEventArgs = interface; // type: System.Windows.AutoResizedEventArgs, namespace: System.Windows
  DNVisualTreeChangeEventArgs = interface; // type: System.Windows.Diagnostics.VisualTreeChangeEventArgs, namespace: System.Windows.Diagnostics
  DNPagesChangedEventArgs = interface; // type: System.Windows.Documents.PagesChangedEventArgs, namespace: System.Windows.Documents
  DNPaginationProgressEventArgs = interface; // type: System.Windows.Documents.PaginationProgressEventArgs, namespace: System.Windows.Documents
  DNDrawingAttributesReplacedEventArgs = interface; // type: System.Windows.Ink.DrawingAttributesReplacedEventArgs, namespace: System.Windows.Ink
  DNLassoSelectionChangedEventArgs = interface; // type: System.Windows.Ink.LassoSelectionChangedEventArgs, namespace: System.Windows.Ink
  DNPropertyDataChangedEventArgs = interface; // type: System.Windows.Ink.PropertyDataChangedEventArgs, namespace: System.Windows.Ink
  DNStrokeCollectionChangedEventArgs = interface; // type: System.Windows.Ink.StrokeCollectionChangedEventArgs, namespace: System.Windows.Ink
  DNStrokeHitEventArgs = interface; // type: System.Windows.Ink.StrokeHitEventArgs, namespace: System.Windows.Ink
  DNStylusPointsReplacedEventArgs = interface; // type: System.Windows.Ink.StylusPointsReplacedEventArgs, namespace: System.Windows.Ink
  DNAccessKeyEventArgs = interface; // type: System.Windows.Input.AccessKeyEventArgs, namespace: System.Windows.Input
  DNInputLanguageEventArgs = interface; // type: System.Windows.Input.InputLanguageEventArgs, namespace: System.Windows.Input
  DNInputLanguageChangedEventArgs = interface; // type: System.Windows.Input.InputLanguageChangedEventArgs, namespace: System.Windows.Input
  DNInputLanguageChangingEventArgs = interface; // type: System.Windows.Input.InputLanguageChangingEventArgs, namespace: System.Windows.Input
  DNInputMethodStateChangedEventArgs = interface; // type: System.Windows.Input.InputMethodStateChangedEventArgs, namespace: System.Windows.Input
  DNNotifyInputEventArgs = interface; // type: System.Windows.Input.NotifyInputEventArgs, namespace: System.Windows.Input
  DNProcessInputEventArgs = interface; // type: System.Windows.Input.ProcessInputEventArgs, namespace: System.Windows.Input
  DNPreProcessInputEventArgs = interface; // type: System.Windows.Input.PreProcessInputEventArgs, namespace: System.Windows.Input
  DNTouchFrameEventArgs = interface; // type: System.Windows.Input.TouchFrameEventArgs, namespace: System.Windows.Input
  DNExceptionEventArgs = interface; // type: System.Windows.Media.ExceptionEventArgs, namespace: System.Windows.Media
  DNDownloadProgressEventArgs = interface; // type: System.Windows.Media.Imaging.DownloadProgressEventArgs, namespace: System.Windows.Media.Imaging
  DNMediaScriptCommandEventArgs = interface; // type: System.Windows.Media.MediaScriptCommandEventArgs, namespace: System.Windows.Media
  DNRenderingEventArgs = interface; // type: System.Windows.Media.RenderingEventArgs, namespace: System.Windows.Media
  DNRoutedEventArgs = interface; // type: System.Windows.RoutedEventArgs, namespace: System.Windows
  DNDataObjectEventArgs = interface; // type: System.Windows.DataObjectEventArgs, namespace: System.Windows
  DNDataObjectCopyingEventArgs = interface; // type: System.Windows.DataObjectCopyingEventArgs, namespace: System.Windows
  DNDataObjectPastingEventArgs = interface; // type: System.Windows.DataObjectPastingEventArgs, namespace: System.Windows
  DNDataObjectSettingDataEventArgs = interface; // type: System.Windows.DataObjectSettingDataEventArgs, namespace: System.Windows
  DNDpiChangedEventArgs = interface; // type: System.Windows.DpiChangedEventArgs, namespace: System.Windows
  DNDragEventArgs = interface; // type: System.Windows.DragEventArgs, namespace: System.Windows
  DNGiveFeedbackEventArgs = interface; // type: System.Windows.GiveFeedbackEventArgs, namespace: System.Windows
  DNAccessKeyPressedEventArgs = interface; // type: System.Windows.Input.AccessKeyPressedEventArgs, namespace: System.Windows.Input
  DNCanExecuteRoutedEventArgs = interface; // type: System.Windows.Input.CanExecuteRoutedEventArgs, namespace: System.Windows.Input
  DNExecutedRoutedEventArgs = interface; // type: System.Windows.Input.ExecutedRoutedEventArgs, namespace: System.Windows.Input
  DNInputEventArgs = interface; // type: System.Windows.Input.InputEventArgs, namespace: System.Windows.Input
  DNKeyboardEventArgs = interface; // type: System.Windows.Input.KeyboardEventArgs, namespace: System.Windows.Input
  DNKeyboardFocusChangedEventArgs = interface; // type: System.Windows.Input.KeyboardFocusChangedEventArgs, namespace: System.Windows.Input
  DNKeyboardInputProviderAcquireFocusEventArgs = interface; // type: System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs, namespace: System.Windows.Input
  DNKeyEventArgs = interface; // type: System.Windows.Input.KeyEventArgs, namespace: System.Windows.Input
  DNManipulationBoundaryFeedbackEventArgs = interface; // type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs, namespace: System.Windows.Input
  DNManipulationCompletedEventArgs = interface; // type: System.Windows.Input.ManipulationCompletedEventArgs, namespace: System.Windows.Input
  DNManipulationDeltaEventArgs = interface; // type: System.Windows.Input.ManipulationDeltaEventArgs, namespace: System.Windows.Input
  DNManipulationInertiaStartingEventArgs = interface; // type: System.Windows.Input.ManipulationInertiaStartingEventArgs, namespace: System.Windows.Input
  DNManipulationStartedEventArgs = interface; // type: System.Windows.Input.ManipulationStartedEventArgs, namespace: System.Windows.Input
  DNManipulationStartingEventArgs = interface; // type: System.Windows.Input.ManipulationStartingEventArgs, namespace: System.Windows.Input
  DNMouseEventArgs = interface; // type: System.Windows.Input.MouseEventArgs, namespace: System.Windows.Input
  DNMouseButtonEventArgs = interface; // type: System.Windows.Input.MouseButtonEventArgs, namespace: System.Windows.Input
  DNMouseWheelEventArgs = interface; // type: System.Windows.Input.MouseWheelEventArgs, namespace: System.Windows.Input
  DNQueryCursorEventArgs = interface; // type: System.Windows.Input.QueryCursorEventArgs, namespace: System.Windows.Input
  DNStylusEventArgs = interface; // type: System.Windows.Input.StylusEventArgs, namespace: System.Windows.Input
  DNStylusButtonEventArgs = interface; // type: System.Windows.Input.StylusButtonEventArgs, namespace: System.Windows.Input
  DNStylusDownEventArgs = interface; // type: System.Windows.Input.StylusDownEventArgs, namespace: System.Windows.Input
  DNStylusSystemGestureEventArgs = interface; // type: System.Windows.Input.StylusSystemGestureEventArgs, namespace: System.Windows.Input
  DNTextCompositionEventArgs = interface; // type: System.Windows.Input.TextCompositionEventArgs, namespace: System.Windows.Input
  DNTouchEventArgs = interface; // type: System.Windows.Input.TouchEventArgs, namespace: System.Windows.Input
  DNQueryContinueDragEventArgs = interface; // type: System.Windows.QueryContinueDragEventArgs, namespace: System.Windows
  DNSourceChangedEventArgs = interface; // type: System.Windows.SourceChangedEventArgs, namespace: System.Windows
  DNAnimationException = interface; // type: System.Windows.Media.Animation.AnimationException, namespace: System.Windows.Media.Animation
  DNInvalidWmpVersionException = interface; // type: System.Windows.Media.InvalidWmpVersionException, namespace: System.Windows.Media
  DNPackageStore = interface; // type: System.IO.Packaging.PackageStore, namespace: System.IO.Packaging
  DNPackWebRequestFactory = interface; // type: System.IO.Packaging.PackWebRequestFactory, namespace: System.IO.Packaging
  DNPackWebRequest = interface; // type: System.IO.Packaging.PackWebRequest, namespace: System.IO.Packaging
  DNPackWebResponse = interface; // type: System.IO.Packaging.PackWebResponse, namespace: System.IO.Packaging
  DNDpiScale = interface; // type: System.Windows.DpiScale, namespace: System.Windows
  DNDuration = interface; // type: System.Windows.Duration, namespace: System.Windows
  DNFontStretch = interface; // type: System.Windows.FontStretch, namespace: System.Windows
  DNFontStyle = interface; // type: System.Windows.FontStyle, namespace: System.Windows
  DNFontWeight = interface; // type: System.Windows.FontWeight, namespace: System.Windows
  DNStylusPoint = interface; // type: System.Windows.Input.StylusPoint, namespace: System.Windows.Input
  DNHwndSourceParameters = interface; // type: System.Windows.Interop.HwndSourceParameters, namespace: System.Windows.Interop
  DNKeyTime = interface; // type: System.Windows.Media.Animation.KeyTime, namespace: System.Windows.Media.Animation
  DNRepeatBehavior = interface; // type: System.Windows.Media.Animation.RepeatBehavior, namespace: System.Windows.Media.Animation
  DNAnimation_TimelineCollection_Enumerator = interface; // type: System.Windows.Media.Animation.TimelineCollection+Enumerator, namespace: System.Windows.Media.Animation
  DNColor = interface; // type: System.Windows.Media.Color, namespace: System.Windows.Media
  DNMedia_DoubleCollection_Enumerator = interface; // type: System.Windows.Media.DoubleCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_DrawingCollection_Enumerator = interface; // type: System.Windows.Media.DrawingCollection+Enumerator, namespace: System.Windows.Media
  DNEffects_BitmapEffectCollection_Enumerator = interface; // type: System.Windows.Media.Effects.BitmapEffectCollection+Enumerator, namespace: System.Windows.Media.Effects
  DNMedia_GeneralTransformCollection_Enumerator = interface; // type: System.Windows.Media.GeneralTransformCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_GeometryCollection_Enumerator = interface; // type: System.Windows.Media.GeometryCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_GradientStopCollection_Enumerator = interface; // type: System.Windows.Media.GradientStopCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_Int32Collection_Enumerator = interface; // type: System.Windows.Media.Int32Collection+Enumerator, namespace: System.Windows.Media
  DNMedia3D_GeneralTransform3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.GeneralTransform3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNMedia3D_MaterialCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.MaterialCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNMatrix3D = interface; // type: System.Windows.Media.Media3D.Matrix3D, namespace: System.Windows.Media.Media3D
  DNMedia3D_Model3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Model3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNPoint3D = interface; // type: System.Windows.Media.Media3D.Point3D, namespace: System.Windows.Media.Media3D
  DNMedia3D_Point3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Point3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNPoint4D = interface; // type: System.Windows.Media.Media3D.Point4D, namespace: System.Windows.Media.Media3D
  DNQuaternion = interface; // type: System.Windows.Media.Media3D.Quaternion, namespace: System.Windows.Media.Media3D
  DNRect3D = interface; // type: System.Windows.Media.Media3D.Rect3D, namespace: System.Windows.Media.Media3D
  DNSize3D = interface; // type: System.Windows.Media.Media3D.Size3D, namespace: System.Windows.Media.Media3D
  DNMedia3D_Transform3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Transform3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNVector3D = interface; // type: System.Windows.Media.Media3D.Vector3D, namespace: System.Windows.Media.Media3D
  DNMedia3D_Vector3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Vector3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNMedia3D_Visual3DCollection_Enumerator = interface; // type: System.Windows.Media.Media3D.Visual3DCollection+Enumerator, namespace: System.Windows.Media.Media3D
  DNMedia_PathFigureCollection_Enumerator = interface; // type: System.Windows.Media.PathFigureCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_PathSegmentCollection_Enumerator = interface; // type: System.Windows.Media.PathSegmentCollection+Enumerator, namespace: System.Windows.Media
  DNPixelFormat = interface; // type: System.Windows.Media.PixelFormat, namespace: System.Windows.Media
  DNPixelFormatChannelMask = interface; // type: System.Windows.Media.PixelFormatChannelMask, namespace: System.Windows.Media
  DNMedia_PointCollection_Enumerator = interface; // type: System.Windows.Media.PointCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_TextEffectCollection_Enumerator = interface; // type: System.Windows.Media.TextEffectCollection+Enumerator, namespace: System.Windows.Media
  DNCharacterBufferRange = interface; // type: System.Windows.Media.TextFormatting.CharacterBufferRange, namespace: System.Windows.Media.TextFormatting
  DNCharacterBufferReference = interface; // type: System.Windows.Media.TextFormatting.CharacterBufferReference, namespace: System.Windows.Media.TextFormatting
  DNCharacterHit = interface; // type: System.Windows.Media.TextFormatting.CharacterHit, namespace: System.Windows.Media.TextFormatting
  DNMinMaxParagraphWidth = interface; // type: System.Windows.Media.TextFormatting.MinMaxParagraphWidth, namespace: System.Windows.Media.TextFormatting
  DNMedia_TransformCollection_Enumerator = interface; // type: System.Windows.Media.TransformCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_VectorCollection_Enumerator = interface; // type: System.Windows.Media.VectorCollection+Enumerator, namespace: System.Windows.Media
  DNMedia_VisualCollection_Enumerator = interface; // type: System.Windows.Media.VisualCollection+Enumerator, namespace: System.Windows.Media
  DNRoutedEventHandlerInfo = interface; // type: System.Windows.RoutedEventHandlerInfo, namespace: System.Windows
  DNWindows_TextDecorationCollection_Enumerator = interface; // type: System.Windows.TextDecorationCollection+Enumerator, namespace: System.Windows
  DNAutomationProperties = interface; // type: System.Windows.Automation.AutomationProperties, namespace: System.Windows.Automation
  DNHostedWindowWrapper = interface; // type: System.Windows.Automation.Peers.HostedWindowWrapper, namespace: System.Windows.Automation.Peers
  DNClipboard = interface; // type: System.Windows.Clipboard, namespace: System.Windows
  DNContentOperations = interface; // type: System.Windows.ContentOperations, namespace: System.Windows
  DNCoreCompatibilityPreferences = interface; // type: System.Windows.CoreCompatibilityPreferences, namespace: System.Windows
  DNDataFormat = interface; // type: System.Windows.DataFormat, namespace: System.Windows
  DNDataFormats = interface; // type: System.Windows.DataFormats, namespace: System.Windows
  DNDataObject = interface; // type: System.Windows.DataObject, namespace: System.Windows
  DNVisualDiagnostics = interface; // type: System.Windows.Diagnostics.VisualDiagnostics, namespace: System.Windows.Diagnostics
  DNXamlSourceInfo = interface; // type: System.Windows.Diagnostics.XamlSourceInfo, namespace: System.Windows.Diagnostics
  DNContentPosition = interface; // type: System.Windows.Documents.ContentPosition, namespace: System.Windows.Documents
  DNDocumentPage = interface; // type: System.Windows.Documents.DocumentPage, namespace: System.Windows.Documents
  DNDocumentPaginator = interface; // type: System.Windows.Documents.DocumentPaginator, namespace: System.Windows.Documents
  DNDynamicDocumentPaginator = interface; // type: System.Windows.Documents.DynamicDocumentPaginator, namespace: System.Windows.Documents
  DNIDocumentPaginatorSource = interface; // type: System.Windows.Documents.IDocumentPaginatorSource, namespace: System.Windows.Documents
  DNDragDrop = interface; // type: System.Windows.DragDrop, namespace: System.Windows
  DNEventManager = interface; // type: System.Windows.EventManager, namespace: System.Windows
  DNEventPrivateKey = interface; // type: System.Windows.EventPrivateKey, namespace: System.Windows
  DNEventRoute = interface; // type: System.Windows.EventRoute, namespace: System.Windows
  DNFontStretches = interface; // type: System.Windows.FontStretches, namespace: System.Windows
  DNFontStyles = interface; // type: System.Windows.FontStyles, namespace: System.Windows
  DNFontWeights = interface; // type: System.Windows.FontWeights, namespace: System.Windows
  DNIContentHost = interface; // type: System.Windows.IContentHost, namespace: System.Windows
  DNIDataObject = interface; // type: System.Windows.IDataObject, namespace: System.Windows
  DNIInputElement = interface; // type: System.Windows.IInputElement, namespace: System.Windows
  DNDrawingAttributeIds = interface; // type: System.Windows.Ink.DrawingAttributeIds, namespace: System.Windows.Ink
  DNDrawingAttributes = interface; // type: System.Windows.Ink.DrawingAttributes, namespace: System.Windows.Ink
  DNGestureRecognitionResult = interface; // type: System.Windows.Ink.GestureRecognitionResult, namespace: System.Windows.Ink
  DNIncrementalHitTester = interface; // type: System.Windows.Ink.IncrementalHitTester, namespace: System.Windows.Ink
  DNIncrementalLassoHitTester = interface; // type: System.Windows.Ink.IncrementalLassoHitTester, namespace: System.Windows.Ink
  DNIncrementalStrokeHitTester = interface; // type: System.Windows.Ink.IncrementalStrokeHitTester, namespace: System.Windows.Ink
  DNStroke = interface; // type: System.Windows.Ink.Stroke, namespace: System.Windows.Ink
  DNStylusShape = interface; // type: System.Windows.Ink.StylusShape, namespace: System.Windows.Ink
  DNEllipseStylusShape = interface; // type: System.Windows.Ink.EllipseStylusShape, namespace: System.Windows.Ink
  DNRectangleStylusShape = interface; // type: System.Windows.Ink.RectangleStylusShape, namespace: System.Windows.Ink
  DNAccessKeyManager = interface; // type: System.Windows.Input.AccessKeyManager, namespace: System.Windows.Input
  DNApplicationCommands = interface; // type: System.Windows.Input.ApplicationCommands, namespace: System.Windows.Input
  DNCommandBinding = interface; // type: System.Windows.Input.CommandBinding, namespace: System.Windows.Input
  DNCommandBindingCollection = interface; // type: System.Windows.Input.CommandBindingCollection, namespace: System.Windows.Input
  DNCommandManager = interface; // type: System.Windows.Input.CommandManager, namespace: System.Windows.Input
  DNComponentCommands = interface; // type: System.Windows.Input.ComponentCommands, namespace: System.Windows.Input
  DNCursor = interface; // type: System.Windows.Input.Cursor, namespace: System.Windows.Input
  DNCursors = interface; // type: System.Windows.Input.Cursors, namespace: System.Windows.Input
  DNFocusManager = interface; // type: System.Windows.Input.FocusManager, namespace: System.Windows.Input
  DNICommandSource = interface; // type: System.Windows.Input.ICommandSource, namespace: System.Windows.Input
  DNIInputLanguageSource = interface; // type: System.Windows.Input.IInputLanguageSource, namespace: System.Windows.Input
  DNIManipulator = interface; // type: System.Windows.Input.IManipulator, namespace: System.Windows.Input
  DNInertiaExpansionBehavior = interface; // type: System.Windows.Input.InertiaExpansionBehavior, namespace: System.Windows.Input
  DNInertiaRotationBehavior = interface; // type: System.Windows.Input.InertiaRotationBehavior, namespace: System.Windows.Input
  DNInertiaTranslationBehavior = interface; // type: System.Windows.Input.InertiaTranslationBehavior, namespace: System.Windows.Input
  DNInputBindingCollection = interface; // type: System.Windows.Input.InputBindingCollection, namespace: System.Windows.Input
  DNInputGesture = interface; // type: System.Windows.Input.InputGesture, namespace: System.Windows.Input
  DNKeyGesture = interface; // type: System.Windows.Input.KeyGesture, namespace: System.Windows.Input
  DNMouseGesture = interface; // type: System.Windows.Input.MouseGesture, namespace: System.Windows.Input
  DNInputGestureCollection = interface; // type: System.Windows.Input.InputGestureCollection, namespace: System.Windows.Input
  DNInputScope = interface; // type: System.Windows.Input.InputScope, namespace: System.Windows.Input
  DNInputScopeName = interface; // type: System.Windows.Input.InputScopeName, namespace: System.Windows.Input
  DNInputScopePhrase = interface; // type: System.Windows.Input.InputScopePhrase, namespace: System.Windows.Input
  DNKeyboard = interface; // type: System.Windows.Input.Keyboard, namespace: System.Windows.Input
  DNManipulation = interface; // type: System.Windows.Input.Manipulation, namespace: System.Windows.Input
  DNManipulationDelta = interface; // type: System.Windows.Input.ManipulationDelta, namespace: System.Windows.Input
  DNManipulationPivot = interface; // type: System.Windows.Input.ManipulationPivot, namespace: System.Windows.Input
  DNManipulationVelocities = interface; // type: System.Windows.Input.ManipulationVelocities, namespace: System.Windows.Input
  DNMediaCommands = interface; // type: System.Windows.Input.MediaCommands, namespace: System.Windows.Input
  DNMouse = interface; // type: System.Windows.Input.Mouse, namespace: System.Windows.Input
  DNNavigationCommands = interface; // type: System.Windows.Input.NavigationCommands, namespace: System.Windows.Input
  DNRoutedCommand = interface; // type: System.Windows.Input.RoutedCommand, namespace: System.Windows.Input
  DNRoutedUICommand = interface; // type: System.Windows.Input.RoutedUICommand, namespace: System.Windows.Input
  DNStagingAreaInputItem = interface; // type: System.Windows.Input.StagingAreaInputItem, namespace: System.Windows.Input
  DNStylus = interface; // type: System.Windows.Input.Stylus, namespace: System.Windows.Input
  DNStylusButton = interface; // type: System.Windows.Input.StylusButton, namespace: System.Windows.Input
  DNRawStylusInput = interface; // type: System.Windows.Input.StylusPlugIns.RawStylusInput, namespace: System.Windows.Input.StylusPlugIns
  DNStylusPlugIn = interface; // type: System.Windows.Input.StylusPlugIns.StylusPlugIn, namespace: System.Windows.Input.StylusPlugIns
  DNDynamicRenderer = interface; // type: System.Windows.Input.StylusPlugIns.DynamicRenderer, namespace: System.Windows.Input.StylusPlugIns
  DNStylusPointDescription = interface; // type: System.Windows.Input.StylusPointDescription, namespace: System.Windows.Input
  DNStylusPointProperties = interface; // type: System.Windows.Input.StylusPointProperties, namespace: System.Windows.Input
  DNStylusPointProperty = interface; // type: System.Windows.Input.StylusPointProperty, namespace: System.Windows.Input
  DNStylusPointPropertyInfo = interface; // type: System.Windows.Input.StylusPointPropertyInfo, namespace: System.Windows.Input
  DNTablet = interface; // type: System.Windows.Input.Tablet, namespace: System.Windows.Input
  DNTabletDeviceCollection = interface; // type: System.Windows.Input.TabletDeviceCollection, namespace: System.Windows.Input
  DNWispTabletDeviceCollection = interface; // type: System.Windows.Input.StylusWisp.WispTabletDeviceCollection, namespace: System.Windows.Input.StylusWisp
  DNTouch = interface; // type: System.Windows.Input.Touch, namespace: System.Windows.Input
  DNTouchPoint = interface; // type: System.Windows.Input.TouchPoint, namespace: System.Windows.Input
  DNCursorInteropHelper = interface; // type: System.Windows.Interop.CursorInteropHelper, namespace: System.Windows.Interop
  DNImaging = interface; // type: System.Windows.Interop.Imaging, namespace: System.Windows.Interop
  DNIWin32Window = interface; // type: System.Windows.Interop.IWin32Window, namespace: System.Windows.Interop
  DNIAddChild = interface; // type: System.Windows.Markup.IAddChild, namespace: System.Windows.Markup
  DNKeyGestureValueSerializer = interface; // type: System.Windows.Input.KeyGestureValueSerializer, namespace: System.Windows.Input
  DNMouseActionValueSerializer = interface; // type: System.Windows.Input.MouseActionValueSerializer, namespace: System.Windows.Input
  DNMouseGestureValueSerializer = interface; // type: System.Windows.Input.MouseGestureValueSerializer, namespace: System.Windows.Input
  DNBrushValueSerializer = interface; // type: System.Windows.Media.Converters.BrushValueSerializer, namespace: System.Windows.Media.Converters
  DNCacheModeValueSerializer = interface; // type: System.Windows.Media.Converters.CacheModeValueSerializer, namespace: System.Windows.Media.Converters
  DNDoubleCollectionValueSerializer = interface; // type: System.Windows.Media.Converters.DoubleCollectionValueSerializer, namespace: System.Windows.Media.Converters
  DNGeometryValueSerializer = interface; // type: System.Windows.Media.Converters.GeometryValueSerializer, namespace: System.Windows.Media.Converters
  DNInt32CollectionValueSerializer = interface; // type: System.Windows.Media.Converters.Int32CollectionValueSerializer, namespace: System.Windows.Media.Converters
  DNPathFigureCollectionValueSerializer = interface; // type: System.Windows.Media.Converters.PathFigureCollectionValueSerializer, namespace: System.Windows.Media.Converters
  DNPointCollectionValueSerializer = interface; // type: System.Windows.Media.Converters.PointCollectionValueSerializer, namespace: System.Windows.Media.Converters
  DNTransformValueSerializer = interface; // type: System.Windows.Media.Converters.TransformValueSerializer, namespace: System.Windows.Media.Converters
  DNVectorCollectionValueSerializer = interface; // type: System.Windows.Media.Converters.VectorCollectionValueSerializer, namespace: System.Windows.Media.Converters
  DNFontFamilyValueSerializer = interface; // type: System.Windows.Media.FontFamilyValueSerializer, namespace: System.Windows.Media
  DNImageSourceValueSerializer = interface; // type: System.Windows.Media.ImageSourceValueSerializer, namespace: System.Windows.Media
  DNMatrix3DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNPoint3DCollectionValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNPoint3DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Point3DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNPoint4DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Point4DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNQuaternionValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.QuaternionValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNRect3DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Rect3DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNSize3DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Size3DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNVector3DCollectionValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNVector3DValueSerializer = interface; // type: System.Windows.Media.Media3D.Converters.Vector3DValueSerializer, namespace: System.Windows.Media.Media3D.Converters
  DNXmlLanguage = interface; // type: System.Windows.Markup.XmlLanguage, namespace: System.Windows.Markup
  DNClockCollection = interface; // type: System.Windows.Media.Animation.ClockCollection, namespace: System.Windows.Media.Animation
  DNIAnimatable = interface; // type: System.Windows.Media.Animation.IAnimatable, namespace: System.Windows.Media.Animation
  DNIEasingFunction = interface; // type: System.Windows.Media.Animation.IEasingFunction, namespace: System.Windows.Media.Animation
  DNIKeyFrame = interface; // type: System.Windows.Media.Animation.IKeyFrame, namespace: System.Windows.Media.Animation
  DNIKeyFrameAnimation = interface; // type: System.Windows.Media.Animation.IKeyFrameAnimation, namespace: System.Windows.Media.Animation
  DNBrushes = interface; // type: System.Windows.Media.Brushes, namespace: System.Windows.Media
  DNCharacterMetrics = interface; // type: System.Windows.Media.CharacterMetrics, namespace: System.Windows.Media
  DNColorContext = interface; // type: System.Windows.Media.ColorContext, namespace: System.Windows.Media
  DNColors = interface; // type: System.Windows.Media.Colors, namespace: System.Windows.Media
  DNDashStyles = interface; // type: System.Windows.Media.DashStyles, namespace: System.Windows.Media
  DNFamilyTypeface = interface; // type: System.Windows.Media.FamilyTypeface, namespace: System.Windows.Media
  DNFamilyTypefaceCollection = interface; // type: System.Windows.Media.FamilyTypefaceCollection, namespace: System.Windows.Media
  DNFontEmbeddingManager = interface; // type: System.Windows.Media.FontEmbeddingManager, namespace: System.Windows.Media
  DNFontFamily = interface; // type: System.Windows.Media.FontFamily, namespace: System.Windows.Media
  DNFontFamilyMap = interface; // type: System.Windows.Media.FontFamilyMap, namespace: System.Windows.Media
  DNFontFamilyMapCollection = interface; // type: System.Windows.Media.FontFamilyMapCollection, namespace: System.Windows.Media
  DNFonts = interface; // type: System.Windows.Media.Fonts, namespace: System.Windows.Media
  DNFormattedText = interface; // type: System.Windows.Media.FormattedText, namespace: System.Windows.Media
  DNGlyphRun = interface; // type: System.Windows.Media.GlyphRun, namespace: System.Windows.Media
  DNGlyphTypeface = interface; // type: System.Windows.Media.GlyphTypeface, namespace: System.Windows.Media
  DNHitTestParameters = interface; // type: System.Windows.Media.HitTestParameters, namespace: System.Windows.Media
  DNGeometryHitTestParameters = interface; // type: System.Windows.Media.GeometryHitTestParameters, namespace: System.Windows.Media
  DNPointHitTestParameters = interface; // type: System.Windows.Media.PointHitTestParameters, namespace: System.Windows.Media
  DNHitTestResult = interface; // type: System.Windows.Media.HitTestResult, namespace: System.Windows.Media
  DNGeometryHitTestResult = interface; // type: System.Windows.Media.GeometryHitTestResult, namespace: System.Windows.Media
  DNRayHitTestResult = interface; // type: System.Windows.Media.Media3D.RayHitTestResult, namespace: System.Windows.Media.Media3D
  DNRayMeshGeometry3DHitTestResult = interface; // type: System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult, namespace: System.Windows.Media.Media3D
  DNPointHitTestResult = interface; // type: System.Windows.Media.PointHitTestResult, namespace: System.Windows.Media
  DNBitmapCodecInfo = interface; // type: System.Windows.Media.Imaging.BitmapCodecInfo, namespace: System.Windows.Media.Imaging
  DNBitmapMetadataBlob = interface; // type: System.Windows.Media.Imaging.BitmapMetadataBlob, namespace: System.Windows.Media.Imaging
  DNBitmapPalettes = interface; // type: System.Windows.Media.Imaging.BitmapPalettes, namespace: System.Windows.Media.Imaging
  DNBitmapSizeOptions = interface; // type: System.Windows.Media.Imaging.BitmapSizeOptions, namespace: System.Windows.Media.Imaging
  DNLanguageSpecificStringDictionary = interface; // type: System.Windows.Media.LanguageSpecificStringDictionary, namespace: System.Windows.Media
  DNHitTestParameters3D = interface; // type: System.Windows.Media.Media3D.HitTestParameters3D, namespace: System.Windows.Media.Media3D
  DNRayHitTestParameters = interface; // type: System.Windows.Media.Media3D.RayHitTestParameters, namespace: System.Windows.Media.Media3D
  DNVisual3DCollection = interface; // type: System.Windows.Media.Media3D.Visual3DCollection, namespace: System.Windows.Media.Media3D
  DNNumberSubstitution = interface; // type: System.Windows.Media.NumberSubstitution, namespace: System.Windows.Media
  DNPixelFormats = interface; // type: System.Windows.Media.PixelFormats, namespace: System.Windows.Media
  DNRenderCapability = interface; // type: System.Windows.Media.RenderCapability, namespace: System.Windows.Media
  DNRenderOptions = interface; // type: System.Windows.Media.RenderOptions, namespace: System.Windows.Media
  DNCultureSpecificCharacterBufferRange = interface; // type: System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange, namespace: System.Windows.Media.TextFormatting
  DNIndexedGlyphRun = interface; // type: System.Windows.Media.TextFormatting.IndexedGlyphRun, namespace: System.Windows.Media.TextFormatting
  DNTextBounds = interface; // type: System.Windows.Media.TextFormatting.TextBounds, namespace: System.Windows.Media.TextFormatting
  DNTextCollapsedRange = interface; // type: System.Windows.Media.TextFormatting.TextCollapsedRange, namespace: System.Windows.Media.TextFormatting
  DNTextCollapsingProperties = interface; // type: System.Windows.Media.TextFormatting.TextCollapsingProperties, namespace: System.Windows.Media.TextFormatting
  DNTextTrailingCharacterEllipsis = interface; // type: System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis, namespace: System.Windows.Media.TextFormatting
  DNTextTrailingWordEllipsis = interface; // type: System.Windows.Media.TextFormatting.TextTrailingWordEllipsis, namespace: System.Windows.Media.TextFormatting
  DNTextEmbeddedObjectMetrics = interface; // type: System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics, namespace: System.Windows.Media.TextFormatting
  DNTextFormatter = interface; // type: System.Windows.Media.TextFormatting.TextFormatter, namespace: System.Windows.Media.TextFormatting
  DNTextLine = interface; // type: System.Windows.Media.TextFormatting.TextLine, namespace: System.Windows.Media.TextFormatting
  DNTextLineBreak = interface; // type: System.Windows.Media.TextFormatting.TextLineBreak, namespace: System.Windows.Media.TextFormatting
  DNTextMarkerProperties = interface; // type: System.Windows.Media.TextFormatting.TextMarkerProperties, namespace: System.Windows.Media.TextFormatting
  DNTextSimpleMarkerProperties = interface; // type: System.Windows.Media.TextFormatting.TextSimpleMarkerProperties, namespace: System.Windows.Media.TextFormatting
  DNTextParagraphProperties = interface; // type: System.Windows.Media.TextFormatting.TextParagraphProperties, namespace: System.Windows.Media.TextFormatting
  DNTextRun = interface; // type: System.Windows.Media.TextFormatting.TextRun, namespace: System.Windows.Media.TextFormatting
  DNTextCharacters = interface; // type: System.Windows.Media.TextFormatting.TextCharacters, namespace: System.Windows.Media.TextFormatting
  DNTextEmbeddedObject = interface; // type: System.Windows.Media.TextFormatting.TextEmbeddedObject, namespace: System.Windows.Media.TextFormatting
  DNTextEndOfLine = interface; // type: System.Windows.Media.TextFormatting.TextEndOfLine, namespace: System.Windows.Media.TextFormatting
  DNTextEndOfParagraph = interface; // type: System.Windows.Media.TextFormatting.TextEndOfParagraph, namespace: System.Windows.Media.TextFormatting
  DNTextEndOfSegment = interface; // type: System.Windows.Media.TextFormatting.TextEndOfSegment, namespace: System.Windows.Media.TextFormatting
  DNTextHidden = interface; // type: System.Windows.Media.TextFormatting.TextHidden, namespace: System.Windows.Media.TextFormatting
  DNTextModifier = interface; // type: System.Windows.Media.TextFormatting.TextModifier, namespace: System.Windows.Media.TextFormatting
  DNTextRunBounds = interface; // type: System.Windows.Media.TextFormatting.TextRunBounds, namespace: System.Windows.Media.TextFormatting
  DNTextRunCache = interface; // type: System.Windows.Media.TextFormatting.TextRunCache, namespace: System.Windows.Media.TextFormatting
  DNTextRunProperties = interface; // type: System.Windows.Media.TextFormatting.TextRunProperties, namespace: System.Windows.Media.TextFormatting
  DNTextRunTypographyProperties = interface; // type: System.Windows.Media.TextFormatting.TextRunTypographyProperties, namespace: System.Windows.Media.TextFormatting
  DNTextSource = interface; // type: System.Windows.Media.TextFormatting.TextSource, namespace: System.Windows.Media.TextFormatting
  DNTextTabProperties = interface; // type: System.Windows.Media.TextFormatting.TextTabProperties, namespace: System.Windows.Media.TextFormatting
  DNTypeface = interface; // type: System.Windows.Media.Typeface, namespace: System.Windows.Media
  DNVisualCollection = interface; // type: System.Windows.Media.VisualCollection, namespace: System.Windows.Media
  DNVisualTreeHelper = interface; // type: System.Windows.Media.VisualTreeHelper, namespace: System.Windows.Media
  DNBaseUriHelper = interface; // type: System.Windows.Navigation.BaseUriHelper, namespace: System.Windows.Navigation
  DNUIPropertyMetadata = interface; // type: System.Windows.UIPropertyMetadata, namespace: System.Windows
  DNRoutedEvent = interface; // type: System.Windows.RoutedEvent, namespace: System.Windows
  DNSizeChangedInfo = interface; // type: System.Windows.SizeChangedInfo, namespace: System.Windows
  DNTextDecorations = interface; // type: System.Windows.TextDecorations, namespace: System.Windows
  DNAutomationPeer = interface; // type: System.Windows.Automation.Peers.AutomationPeer, namespace: System.Windows.Automation.Peers
  DNContentElementAutomationPeer = interface; // type: System.Windows.Automation.Peers.ContentElementAutomationPeer, namespace: System.Windows.Automation.Peers
  DNUIElement3DAutomationPeer = interface; // type: System.Windows.Automation.Peers.UIElement3DAutomationPeer, namespace: System.Windows.Automation.Peers
  DNUIElementAutomationPeer = interface; // type: System.Windows.Automation.Peers.UIElementAutomationPeer, namespace: System.Windows.Automation.Peers
  DNGenericRootAutomationPeer = interface; // type: System.Windows.Automation.Peers.GenericRootAutomationPeer, namespace: System.Windows.Automation.Peers
  DNContentElement = interface; // type: System.Windows.ContentElement, namespace: System.Windows
  DNInputBinding = interface; // type: System.Windows.Input.InputBinding, namespace: System.Windows.Input
  DNKeyBinding = interface; // type: System.Windows.Input.KeyBinding, namespace: System.Windows.Input
  DNMouseBinding = interface; // type: System.Windows.Input.MouseBinding, namespace: System.Windows.Input
  DNAnimatable = interface; // type: System.Windows.Media.Animation.Animatable, namespace: System.Windows.Media.Animation
  DNTimeline = interface; // type: System.Windows.Media.Animation.Timeline, namespace: System.Windows.Media.Animation
  DNAnimationTimeline = interface; // type: System.Windows.Media.Animation.AnimationTimeline, namespace: System.Windows.Media.Animation
  DNBooleanAnimationBase = interface; // type: System.Windows.Media.Animation.BooleanAnimationBase, namespace: System.Windows.Media.Animation
  DNBooleanAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNByteAnimationBase = interface; // type: System.Windows.Media.Animation.ByteAnimationBase, namespace: System.Windows.Media.Animation
  DNByteAnimation = interface; // type: System.Windows.Media.Animation.ByteAnimation, namespace: System.Windows.Media.Animation
  DNByteAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNCharAnimationBase = interface; // type: System.Windows.Media.Animation.CharAnimationBase, namespace: System.Windows.Media.Animation
  DNCharAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.CharAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNColorAnimationBase = interface; // type: System.Windows.Media.Animation.ColorAnimationBase, namespace: System.Windows.Media.Animation
  DNColorAnimation = interface; // type: System.Windows.Media.Animation.ColorAnimation, namespace: System.Windows.Media.Animation
  DNColorAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNDecimalAnimationBase = interface; // type: System.Windows.Media.Animation.DecimalAnimationBase, namespace: System.Windows.Media.Animation
  DNDecimalAnimation = interface; // type: System.Windows.Media.Animation.DecimalAnimation, namespace: System.Windows.Media.Animation
  DNDecimalAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNDoubleAnimationBase = interface; // type: System.Windows.Media.Animation.DoubleAnimationBase, namespace: System.Windows.Media.Animation
  DNDoubleAnimation = interface; // type: System.Windows.Media.Animation.DoubleAnimation, namespace: System.Windows.Media.Animation
  DNDoubleAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNDoubleAnimationUsingPath = interface; // type: System.Windows.Media.Animation.DoubleAnimationUsingPath, namespace: System.Windows.Media.Animation
  DNInt16AnimationBase = interface; // type: System.Windows.Media.Animation.Int16AnimationBase, namespace: System.Windows.Media.Animation
  DNInt16Animation = interface; // type: System.Windows.Media.Animation.Int16Animation, namespace: System.Windows.Media.Animation
  DNInt16AnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNInt32AnimationBase = interface; // type: System.Windows.Media.Animation.Int32AnimationBase, namespace: System.Windows.Media.Animation
  DNInt32Animation = interface; // type: System.Windows.Media.Animation.Int32Animation, namespace: System.Windows.Media.Animation
  DNInt32AnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNInt64AnimationBase = interface; // type: System.Windows.Media.Animation.Int64AnimationBase, namespace: System.Windows.Media.Animation
  DNInt64Animation = interface; // type: System.Windows.Media.Animation.Int64Animation, namespace: System.Windows.Media.Animation
  DNInt64AnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNMatrixAnimationBase = interface; // type: System.Windows.Media.Animation.MatrixAnimationBase, namespace: System.Windows.Media.Animation
  DNMatrixAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNMatrixAnimationUsingPath = interface; // type: System.Windows.Media.Animation.MatrixAnimationUsingPath, namespace: System.Windows.Media.Animation
  DNObjectAnimationBase = interface; // type: System.Windows.Media.Animation.ObjectAnimationBase, namespace: System.Windows.Media.Animation
  DNObjectAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNPoint3DAnimationBase = interface; // type: System.Windows.Media.Animation.Point3DAnimationBase, namespace: System.Windows.Media.Animation
  DNPoint3DAnimation = interface; // type: System.Windows.Media.Animation.Point3DAnimation, namespace: System.Windows.Media.Animation
  DNPoint3DAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNPointAnimationBase = interface; // type: System.Windows.Media.Animation.PointAnimationBase, namespace: System.Windows.Media.Animation
  DNPointAnimation = interface; // type: System.Windows.Media.Animation.PointAnimation, namespace: System.Windows.Media.Animation
  DNPointAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.PointAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNPointAnimationUsingPath = interface; // type: System.Windows.Media.Animation.PointAnimationUsingPath, namespace: System.Windows.Media.Animation
  DNQuaternionAnimationBase = interface; // type: System.Windows.Media.Animation.QuaternionAnimationBase, namespace: System.Windows.Media.Animation
  DNQuaternionAnimation = interface; // type: System.Windows.Media.Animation.QuaternionAnimation, namespace: System.Windows.Media.Animation
  DNQuaternionAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNRectAnimationBase = interface; // type: System.Windows.Media.Animation.RectAnimationBase, namespace: System.Windows.Media.Animation
  DNRectAnimation = interface; // type: System.Windows.Media.Animation.RectAnimation, namespace: System.Windows.Media.Animation
  DNRectAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.RectAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNRotation3DAnimationBase = interface; // type: System.Windows.Media.Animation.Rotation3DAnimationBase, namespace: System.Windows.Media.Animation
  DNRotation3DAnimation = interface; // type: System.Windows.Media.Animation.Rotation3DAnimation, namespace: System.Windows.Media.Animation
  DNRotation3DAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNSingleAnimationBase = interface; // type: System.Windows.Media.Animation.SingleAnimationBase, namespace: System.Windows.Media.Animation
  DNSingleAnimation = interface; // type: System.Windows.Media.Animation.SingleAnimation, namespace: System.Windows.Media.Animation
  DNSingleAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNSizeAnimationBase = interface; // type: System.Windows.Media.Animation.SizeAnimationBase, namespace: System.Windows.Media.Animation
  DNSizeAnimation = interface; // type: System.Windows.Media.Animation.SizeAnimation, namespace: System.Windows.Media.Animation
  DNSizeAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNStringAnimationBase = interface; // type: System.Windows.Media.Animation.StringAnimationBase, namespace: System.Windows.Media.Animation
  DNStringAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.StringAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNVector3DAnimationBase = interface; // type: System.Windows.Media.Animation.Vector3DAnimationBase, namespace: System.Windows.Media.Animation
  DNVector3DAnimation = interface; // type: System.Windows.Media.Animation.Vector3DAnimation, namespace: System.Windows.Media.Animation
  DNVector3DAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNVectorAnimationBase = interface; // type: System.Windows.Media.Animation.VectorAnimationBase, namespace: System.Windows.Media.Animation
  DNVectorAnimation = interface; // type: System.Windows.Media.Animation.VectorAnimation, namespace: System.Windows.Media.Animation
  DNVectorAnimationUsingKeyFrames = interface; // type: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames, namespace: System.Windows.Media.Animation
  DNTimelineGroup = interface; // type: System.Windows.Media.Animation.TimelineGroup, namespace: System.Windows.Media.Animation
  DNParallelTimeline = interface; // type: System.Windows.Media.Animation.ParallelTimeline, namespace: System.Windows.Media.Animation
  DNMediaTimeline = interface; // type: System.Windows.Media.MediaTimeline, namespace: System.Windows.Media
  DNTimelineCollection = interface; // type: System.Windows.Media.Animation.TimelineCollection, namespace: System.Windows.Media.Animation
  DNBrush = interface; // type: System.Windows.Media.Brush, namespace: System.Windows.Media
  DNBitmapCacheBrush = interface; // type: System.Windows.Media.BitmapCacheBrush, namespace: System.Windows.Media
  DNGradientBrush = interface; // type: System.Windows.Media.GradientBrush, namespace: System.Windows.Media
  DNLinearGradientBrush = interface; // type: System.Windows.Media.LinearGradientBrush, namespace: System.Windows.Media
  DNRadialGradientBrush = interface; // type: System.Windows.Media.RadialGradientBrush, namespace: System.Windows.Media
  DNSolidColorBrush = interface; // type: System.Windows.Media.SolidColorBrush, namespace: System.Windows.Media
  DNTileBrush = interface; // type: System.Windows.Media.TileBrush, namespace: System.Windows.Media
  DNDrawingBrush = interface; // type: System.Windows.Media.DrawingBrush, namespace: System.Windows.Media
  DNImageBrush = interface; // type: System.Windows.Media.ImageBrush, namespace: System.Windows.Media
  DNVisualBrush = interface; // type: System.Windows.Media.VisualBrush, namespace: System.Windows.Media
  DNCacheMode = interface; // type: System.Windows.Media.CacheMode, namespace: System.Windows.Media
  DNBitmapCache = interface; // type: System.Windows.Media.BitmapCache, namespace: System.Windows.Media
  DNDashStyle = interface; // type: System.Windows.Media.DashStyle, namespace: System.Windows.Media
  DNDrawing = interface; // type: System.Windows.Media.Drawing, namespace: System.Windows.Media
  DNDrawingGroup = interface; // type: System.Windows.Media.DrawingGroup, namespace: System.Windows.Media
  DNGeometryDrawing = interface; // type: System.Windows.Media.GeometryDrawing, namespace: System.Windows.Media
  DNGlyphRunDrawing = interface; // type: System.Windows.Media.GlyphRunDrawing, namespace: System.Windows.Media
  DNImageDrawing = interface; // type: System.Windows.Media.ImageDrawing, namespace: System.Windows.Media
  DNVideoDrawing = interface; // type: System.Windows.Media.VideoDrawing, namespace: System.Windows.Media
  DNDrawingCollection = interface; // type: System.Windows.Media.DrawingCollection, namespace: System.Windows.Media
  DNBitmapEffect = interface; // type: System.Windows.Media.Effects.BitmapEffect, namespace: System.Windows.Media.Effects
  DNBevelBitmapEffect = interface; // type: System.Windows.Media.Effects.BevelBitmapEffect, namespace: System.Windows.Media.Effects
  DNBitmapEffectGroup = interface; // type: System.Windows.Media.Effects.BitmapEffectGroup, namespace: System.Windows.Media.Effects
  DNBlurBitmapEffect = interface; // type: System.Windows.Media.Effects.BlurBitmapEffect, namespace: System.Windows.Media.Effects
  DNDropShadowBitmapEffect = interface; // type: System.Windows.Media.Effects.DropShadowBitmapEffect, namespace: System.Windows.Media.Effects
  DNEmbossBitmapEffect = interface; // type: System.Windows.Media.Effects.EmbossBitmapEffect, namespace: System.Windows.Media.Effects
  DNOuterGlowBitmapEffect = interface; // type: System.Windows.Media.Effects.OuterGlowBitmapEffect, namespace: System.Windows.Media.Effects
  DNBitmapEffectCollection = interface; // type: System.Windows.Media.Effects.BitmapEffectCollection, namespace: System.Windows.Media.Effects
  DNBitmapEffectInput = interface; // type: System.Windows.Media.Effects.BitmapEffectInput, namespace: System.Windows.Media.Effects
  DNEffect = interface; // type: System.Windows.Media.Effects.Effect, namespace: System.Windows.Media.Effects
  DNBlurEffect = interface; // type: System.Windows.Media.Effects.BlurEffect, namespace: System.Windows.Media.Effects
  DNDropShadowEffect = interface; // type: System.Windows.Media.Effects.DropShadowEffect, namespace: System.Windows.Media.Effects
  DNShaderEffect = interface; // type: System.Windows.Media.Effects.ShaderEffect, namespace: System.Windows.Media.Effects
  DNPixelShader = interface; // type: System.Windows.Media.Effects.PixelShader, namespace: System.Windows.Media.Effects
  DNGeneralTransform = interface; // type: System.Windows.Media.GeneralTransform, namespace: System.Windows.Media
  DNGeneralTransformGroup = interface; // type: System.Windows.Media.GeneralTransformGroup, namespace: System.Windows.Media
  DNTransform = interface; // type: System.Windows.Media.Transform, namespace: System.Windows.Media
  DNMatrixTransform = interface; // type: System.Windows.Media.MatrixTransform, namespace: System.Windows.Media
  DNRotateTransform = interface; // type: System.Windows.Media.RotateTransform, namespace: System.Windows.Media
  DNScaleTransform = interface; // type: System.Windows.Media.ScaleTransform, namespace: System.Windows.Media
  DNSkewTransform = interface; // type: System.Windows.Media.SkewTransform, namespace: System.Windows.Media
  DNTransformGroup = interface; // type: System.Windows.Media.TransformGroup, namespace: System.Windows.Media
  DNTranslateTransform = interface; // type: System.Windows.Media.TranslateTransform, namespace: System.Windows.Media
  DNGeneralTransformCollection = interface; // type: System.Windows.Media.GeneralTransformCollection, namespace: System.Windows.Media
  DNGeometry = interface; // type: System.Windows.Media.Geometry, namespace: System.Windows.Media
  DNCombinedGeometry = interface; // type: System.Windows.Media.CombinedGeometry, namespace: System.Windows.Media
  DNEllipseGeometry = interface; // type: System.Windows.Media.EllipseGeometry, namespace: System.Windows.Media
  DNGeometryGroup = interface; // type: System.Windows.Media.GeometryGroup, namespace: System.Windows.Media
  DNLineGeometry = interface; // type: System.Windows.Media.LineGeometry, namespace: System.Windows.Media
  DNPathGeometry = interface; // type: System.Windows.Media.PathGeometry, namespace: System.Windows.Media
  DNRectangleGeometry = interface; // type: System.Windows.Media.RectangleGeometry, namespace: System.Windows.Media
  DNStreamGeometry = interface; // type: System.Windows.Media.StreamGeometry, namespace: System.Windows.Media
  DNGeometryCollection = interface; // type: System.Windows.Media.GeometryCollection, namespace: System.Windows.Media
  DNGradientStop = interface; // type: System.Windows.Media.GradientStop, namespace: System.Windows.Media
  DNGradientStopCollection = interface; // type: System.Windows.Media.GradientStopCollection, namespace: System.Windows.Media
  DNGuidelineSet = interface; // type: System.Windows.Media.GuidelineSet, namespace: System.Windows.Media
  DNImageSource = interface; // type: System.Windows.Media.ImageSource, namespace: System.Windows.Media
  DND3DImage = interface; // type: System.Windows.Interop.D3DImage, namespace: System.Windows.Interop
  DNDrawingImage = interface; // type: System.Windows.Media.DrawingImage, namespace: System.Windows.Media
  DNBitmapSource = interface; // type: System.Windows.Media.Imaging.BitmapSource, namespace: System.Windows.Media.Imaging
  DNInteropBitmap = interface; // type: System.Windows.Interop.InteropBitmap, namespace: System.Windows.Interop
  DNBitmapFrame = interface; // type: System.Windows.Media.Imaging.BitmapFrame, namespace: System.Windows.Media.Imaging
  DNBitmapImage = interface; // type: System.Windows.Media.Imaging.BitmapImage, namespace: System.Windows.Media.Imaging
  DNCachedBitmap = interface; // type: System.Windows.Media.Imaging.CachedBitmap, namespace: System.Windows.Media.Imaging
  DNColorConvertedBitmap = interface; // type: System.Windows.Media.Imaging.ColorConvertedBitmap, namespace: System.Windows.Media.Imaging
  DNCroppedBitmap = interface; // type: System.Windows.Media.Imaging.CroppedBitmap, namespace: System.Windows.Media.Imaging
  DNFormatConvertedBitmap = interface; // type: System.Windows.Media.Imaging.FormatConvertedBitmap, namespace: System.Windows.Media.Imaging
  DNRenderTargetBitmap = interface; // type: System.Windows.Media.Imaging.RenderTargetBitmap, namespace: System.Windows.Media.Imaging
  DNTransformedBitmap = interface; // type: System.Windows.Media.Imaging.TransformedBitmap, namespace: System.Windows.Media.Imaging
  DNWriteableBitmap = interface; // type: System.Windows.Media.Imaging.WriteableBitmap, namespace: System.Windows.Media.Imaging
  DNCamera = interface; // type: System.Windows.Media.Media3D.Camera, namespace: System.Windows.Media.Media3D
  DNMatrixCamera = interface; // type: System.Windows.Media.Media3D.MatrixCamera, namespace: System.Windows.Media.Media3D
  DNProjectionCamera = interface; // type: System.Windows.Media.Media3D.ProjectionCamera, namespace: System.Windows.Media.Media3D
  DNOrthographicCamera = interface; // type: System.Windows.Media.Media3D.OrthographicCamera, namespace: System.Windows.Media.Media3D
  DNPerspectiveCamera = interface; // type: System.Windows.Media.Media3D.PerspectiveCamera, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3D = interface; // type: System.Windows.Media.Media3D.GeneralTransform3D, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3DGroup = interface; // type: System.Windows.Media.Media3D.GeneralTransform3DGroup, namespace: System.Windows.Media.Media3D
  DNTransform3D = interface; // type: System.Windows.Media.Media3D.Transform3D, namespace: System.Windows.Media.Media3D
  DNAffineTransform3D = interface; // type: System.Windows.Media.Media3D.AffineTransform3D, namespace: System.Windows.Media.Media3D
  DNRotateTransform3D = interface; // type: System.Windows.Media.Media3D.RotateTransform3D, namespace: System.Windows.Media.Media3D
  DNScaleTransform3D = interface; // type: System.Windows.Media.Media3D.ScaleTransform3D, namespace: System.Windows.Media.Media3D
  DNTranslateTransform3D = interface; // type: System.Windows.Media.Media3D.TranslateTransform3D, namespace: System.Windows.Media.Media3D
  DNMatrixTransform3D = interface; // type: System.Windows.Media.Media3D.MatrixTransform3D, namespace: System.Windows.Media.Media3D
  DNTransform3DGroup = interface; // type: System.Windows.Media.Media3D.Transform3DGroup, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3DCollection = interface; // type: System.Windows.Media.Media3D.GeneralTransform3DCollection, namespace: System.Windows.Media.Media3D
  DNGeometry3D = interface; // type: System.Windows.Media.Media3D.Geometry3D, namespace: System.Windows.Media.Media3D
  DNMeshGeometry3D = interface; // type: System.Windows.Media.Media3D.MeshGeometry3D, namespace: System.Windows.Media.Media3D
  DNMaterial = interface; // type: System.Windows.Media.Media3D.Material, namespace: System.Windows.Media.Media3D
  DNDiffuseMaterial = interface; // type: System.Windows.Media.Media3D.DiffuseMaterial, namespace: System.Windows.Media.Media3D
  DNEmissiveMaterial = interface; // type: System.Windows.Media.Media3D.EmissiveMaterial, namespace: System.Windows.Media.Media3D
  DNMaterialGroup = interface; // type: System.Windows.Media.Media3D.MaterialGroup, namespace: System.Windows.Media.Media3D
  DNSpecularMaterial = interface; // type: System.Windows.Media.Media3D.SpecularMaterial, namespace: System.Windows.Media.Media3D
  DNMaterialCollection = interface; // type: System.Windows.Media.Media3D.MaterialCollection, namespace: System.Windows.Media.Media3D
  DNModel3D = interface; // type: System.Windows.Media.Media3D.Model3D, namespace: System.Windows.Media.Media3D
  DNGeometryModel3D = interface; // type: System.Windows.Media.Media3D.GeometryModel3D, namespace: System.Windows.Media.Media3D
  DNLight = interface; // type: System.Windows.Media.Media3D.Light, namespace: System.Windows.Media.Media3D
  DNAmbientLight = interface; // type: System.Windows.Media.Media3D.AmbientLight, namespace: System.Windows.Media.Media3D
  DNDirectionalLight = interface; // type: System.Windows.Media.Media3D.DirectionalLight, namespace: System.Windows.Media.Media3D
  DNPointLightBase = interface; // type: System.Windows.Media.Media3D.PointLightBase, namespace: System.Windows.Media.Media3D
  DNPointLight = interface; // type: System.Windows.Media.Media3D.PointLight, namespace: System.Windows.Media.Media3D
  DNSpotLight = interface; // type: System.Windows.Media.Media3D.SpotLight, namespace: System.Windows.Media.Media3D
  DNModel3DGroup = interface; // type: System.Windows.Media.Media3D.Model3DGroup, namespace: System.Windows.Media.Media3D
  DNModel3DCollection = interface; // type: System.Windows.Media.Media3D.Model3DCollection, namespace: System.Windows.Media.Media3D
  DNRotation3D = interface; // type: System.Windows.Media.Media3D.Rotation3D, namespace: System.Windows.Media.Media3D
  DNAxisAngleRotation3D = interface; // type: System.Windows.Media.Media3D.AxisAngleRotation3D, namespace: System.Windows.Media.Media3D
  DNQuaternionRotation3D = interface; // type: System.Windows.Media.Media3D.QuaternionRotation3D, namespace: System.Windows.Media.Media3D
  DNTransform3DCollection = interface; // type: System.Windows.Media.Media3D.Transform3DCollection, namespace: System.Windows.Media.Media3D
  DNMediaPlayer = interface; // type: System.Windows.Media.MediaPlayer, namespace: System.Windows.Media
  DNPathFigure = interface; // type: System.Windows.Media.PathFigure, namespace: System.Windows.Media
  DNPathFigureCollection = interface; // type: System.Windows.Media.PathFigureCollection, namespace: System.Windows.Media
  DNPathSegment = interface; // type: System.Windows.Media.PathSegment, namespace: System.Windows.Media
  DNArcSegment = interface; // type: System.Windows.Media.ArcSegment, namespace: System.Windows.Media
  DNBezierSegment = interface; // type: System.Windows.Media.BezierSegment, namespace: System.Windows.Media
  DNLineSegment = interface; // type: System.Windows.Media.LineSegment, namespace: System.Windows.Media
  DNPolyBezierSegment = interface; // type: System.Windows.Media.PolyBezierSegment, namespace: System.Windows.Media
  DNPolyLineSegment = interface; // type: System.Windows.Media.PolyLineSegment, namespace: System.Windows.Media
  DNPolyQuadraticBezierSegment = interface; // type: System.Windows.Media.PolyQuadraticBezierSegment, namespace: System.Windows.Media
  DNQuadraticBezierSegment = interface; // type: System.Windows.Media.QuadraticBezierSegment, namespace: System.Windows.Media
  DNPathSegmentCollection = interface; // type: System.Windows.Media.PathSegmentCollection, namespace: System.Windows.Media
  DNPen = interface; // type: System.Windows.Media.Pen, namespace: System.Windows.Media
  DNTextEffect = interface; // type: System.Windows.Media.TextEffect, namespace: System.Windows.Media
  DNTextEffectCollection = interface; // type: System.Windows.Media.TextEffectCollection, namespace: System.Windows.Media
  DNTransformCollection = interface; // type: System.Windows.Media.TransformCollection, namespace: System.Windows.Media
  DNTextDecoration = interface; // type: System.Windows.TextDecoration, namespace: System.Windows
  DNTextDecorationCollection = interface; // type: System.Windows.TextDecorationCollection, namespace: System.Windows
  DNBooleanKeyFrame = interface; // type: System.Windows.Media.Animation.BooleanKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteBooleanKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteBooleanKeyFrame, namespace: System.Windows.Media.Animation
  DNBooleanKeyFrameCollection = interface; // type: System.Windows.Media.Animation.BooleanKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNByteKeyFrame = interface; // type: System.Windows.Media.Animation.ByteKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteByteKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteByteKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingByteKeyFrame = interface; // type: System.Windows.Media.Animation.EasingByteKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearByteKeyFrame = interface; // type: System.Windows.Media.Animation.LinearByteKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineByteKeyFrame = interface; // type: System.Windows.Media.Animation.SplineByteKeyFrame, namespace: System.Windows.Media.Animation
  DNByteKeyFrameCollection = interface; // type: System.Windows.Media.Animation.ByteKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNCharKeyFrame = interface; // type: System.Windows.Media.Animation.CharKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteCharKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteCharKeyFrame, namespace: System.Windows.Media.Animation
  DNCharKeyFrameCollection = interface; // type: System.Windows.Media.Animation.CharKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNColorKeyFrame = interface; // type: System.Windows.Media.Animation.ColorKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteColorKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteColorKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingColorKeyFrame = interface; // type: System.Windows.Media.Animation.EasingColorKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearColorKeyFrame = interface; // type: System.Windows.Media.Animation.LinearColorKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineColorKeyFrame = interface; // type: System.Windows.Media.Animation.SplineColorKeyFrame, namespace: System.Windows.Media.Animation
  DNColorKeyFrameCollection = interface; // type: System.Windows.Media.Animation.ColorKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNDecimalKeyFrame = interface; // type: System.Windows.Media.Animation.DecimalKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteDecimalKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteDecimalKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingDecimalKeyFrame = interface; // type: System.Windows.Media.Animation.EasingDecimalKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearDecimalKeyFrame = interface; // type: System.Windows.Media.Animation.LinearDecimalKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineDecimalKeyFrame = interface; // type: System.Windows.Media.Animation.SplineDecimalKeyFrame, namespace: System.Windows.Media.Animation
  DNDecimalKeyFrameCollection = interface; // type: System.Windows.Media.Animation.DecimalKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNDoubleKeyFrame = interface; // type: System.Windows.Media.Animation.DoubleKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteDoubleKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteDoubleKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingDoubleKeyFrame = interface; // type: System.Windows.Media.Animation.EasingDoubleKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearDoubleKeyFrame = interface; // type: System.Windows.Media.Animation.LinearDoubleKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineDoubleKeyFrame = interface; // type: System.Windows.Media.Animation.SplineDoubleKeyFrame, namespace: System.Windows.Media.Animation
  DNDoubleKeyFrameCollection = interface; // type: System.Windows.Media.Animation.DoubleKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNEasingFunctionBase = interface; // type: System.Windows.Media.Animation.EasingFunctionBase, namespace: System.Windows.Media.Animation
  DNBackEase = interface; // type: System.Windows.Media.Animation.BackEase, namespace: System.Windows.Media.Animation
  DNBounceEase = interface; // type: System.Windows.Media.Animation.BounceEase, namespace: System.Windows.Media.Animation
  DNCircleEase = interface; // type: System.Windows.Media.Animation.CircleEase, namespace: System.Windows.Media.Animation
  DNCubicEase = interface; // type: System.Windows.Media.Animation.CubicEase, namespace: System.Windows.Media.Animation
  DNElasticEase = interface; // type: System.Windows.Media.Animation.ElasticEase, namespace: System.Windows.Media.Animation
  DNExponentialEase = interface; // type: System.Windows.Media.Animation.ExponentialEase, namespace: System.Windows.Media.Animation
  DNPowerEase = interface; // type: System.Windows.Media.Animation.PowerEase, namespace: System.Windows.Media.Animation
  DNQuadraticEase = interface; // type: System.Windows.Media.Animation.QuadraticEase, namespace: System.Windows.Media.Animation
  DNQuarticEase = interface; // type: System.Windows.Media.Animation.QuarticEase, namespace: System.Windows.Media.Animation
  DNQuinticEase = interface; // type: System.Windows.Media.Animation.QuinticEase, namespace: System.Windows.Media.Animation
  DNSineEase = interface; // type: System.Windows.Media.Animation.SineEase, namespace: System.Windows.Media.Animation
  DNInt16KeyFrame = interface; // type: System.Windows.Media.Animation.Int16KeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteInt16KeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteInt16KeyFrame, namespace: System.Windows.Media.Animation
  DNEasingInt16KeyFrame = interface; // type: System.Windows.Media.Animation.EasingInt16KeyFrame, namespace: System.Windows.Media.Animation
  DNLinearInt16KeyFrame = interface; // type: System.Windows.Media.Animation.LinearInt16KeyFrame, namespace: System.Windows.Media.Animation
  DNSplineInt16KeyFrame = interface; // type: System.Windows.Media.Animation.SplineInt16KeyFrame, namespace: System.Windows.Media.Animation
  DNInt16KeyFrameCollection = interface; // type: System.Windows.Media.Animation.Int16KeyFrameCollection, namespace: System.Windows.Media.Animation
  DNInt32KeyFrame = interface; // type: System.Windows.Media.Animation.Int32KeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteInt32KeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteInt32KeyFrame, namespace: System.Windows.Media.Animation
  DNEasingInt32KeyFrame = interface; // type: System.Windows.Media.Animation.EasingInt32KeyFrame, namespace: System.Windows.Media.Animation
  DNLinearInt32KeyFrame = interface; // type: System.Windows.Media.Animation.LinearInt32KeyFrame, namespace: System.Windows.Media.Animation
  DNSplineInt32KeyFrame = interface; // type: System.Windows.Media.Animation.SplineInt32KeyFrame, namespace: System.Windows.Media.Animation
  DNInt32KeyFrameCollection = interface; // type: System.Windows.Media.Animation.Int32KeyFrameCollection, namespace: System.Windows.Media.Animation
  DNInt64KeyFrame = interface; // type: System.Windows.Media.Animation.Int64KeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteInt64KeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteInt64KeyFrame, namespace: System.Windows.Media.Animation
  DNEasingInt64KeyFrame = interface; // type: System.Windows.Media.Animation.EasingInt64KeyFrame, namespace: System.Windows.Media.Animation
  DNLinearInt64KeyFrame = interface; // type: System.Windows.Media.Animation.LinearInt64KeyFrame, namespace: System.Windows.Media.Animation
  DNSplineInt64KeyFrame = interface; // type: System.Windows.Media.Animation.SplineInt64KeyFrame, namespace: System.Windows.Media.Animation
  DNInt64KeyFrameCollection = interface; // type: System.Windows.Media.Animation.Int64KeyFrameCollection, namespace: System.Windows.Media.Animation
  DNKeySpline = interface; // type: System.Windows.Media.Animation.KeySpline, namespace: System.Windows.Media.Animation
  DNMatrixKeyFrame = interface; // type: System.Windows.Media.Animation.MatrixKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteMatrixKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteMatrixKeyFrame, namespace: System.Windows.Media.Animation
  DNMatrixKeyFrameCollection = interface; // type: System.Windows.Media.Animation.MatrixKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNObjectKeyFrame = interface; // type: System.Windows.Media.Animation.ObjectKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteObjectKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteObjectKeyFrame, namespace: System.Windows.Media.Animation
  DNObjectKeyFrameCollection = interface; // type: System.Windows.Media.Animation.ObjectKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNPoint3DKeyFrame = interface; // type: System.Windows.Media.Animation.Point3DKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscretePoint3DKeyFrame = interface; // type: System.Windows.Media.Animation.DiscretePoint3DKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingPoint3DKeyFrame = interface; // type: System.Windows.Media.Animation.EasingPoint3DKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearPoint3DKeyFrame = interface; // type: System.Windows.Media.Animation.LinearPoint3DKeyFrame, namespace: System.Windows.Media.Animation
  DNSplinePoint3DKeyFrame = interface; // type: System.Windows.Media.Animation.SplinePoint3DKeyFrame, namespace: System.Windows.Media.Animation
  DNPoint3DKeyFrameCollection = interface; // type: System.Windows.Media.Animation.Point3DKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNPointKeyFrame = interface; // type: System.Windows.Media.Animation.PointKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscretePointKeyFrame = interface; // type: System.Windows.Media.Animation.DiscretePointKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingPointKeyFrame = interface; // type: System.Windows.Media.Animation.EasingPointKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearPointKeyFrame = interface; // type: System.Windows.Media.Animation.LinearPointKeyFrame, namespace: System.Windows.Media.Animation
  DNSplinePointKeyFrame = interface; // type: System.Windows.Media.Animation.SplinePointKeyFrame, namespace: System.Windows.Media.Animation
  DNPointKeyFrameCollection = interface; // type: System.Windows.Media.Animation.PointKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNQuaternionKeyFrame = interface; // type: System.Windows.Media.Animation.QuaternionKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteQuaternionKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteQuaternionKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingQuaternionKeyFrame = interface; // type: System.Windows.Media.Animation.EasingQuaternionKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearQuaternionKeyFrame = interface; // type: System.Windows.Media.Animation.LinearQuaternionKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineQuaternionKeyFrame = interface; // type: System.Windows.Media.Animation.SplineQuaternionKeyFrame, namespace: System.Windows.Media.Animation
  DNQuaternionKeyFrameCollection = interface; // type: System.Windows.Media.Animation.QuaternionKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNRectKeyFrame = interface; // type: System.Windows.Media.Animation.RectKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteRectKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteRectKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingRectKeyFrame = interface; // type: System.Windows.Media.Animation.EasingRectKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearRectKeyFrame = interface; // type: System.Windows.Media.Animation.LinearRectKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineRectKeyFrame = interface; // type: System.Windows.Media.Animation.SplineRectKeyFrame, namespace: System.Windows.Media.Animation
  DNRectKeyFrameCollection = interface; // type: System.Windows.Media.Animation.RectKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNRotation3DKeyFrame = interface; // type: System.Windows.Media.Animation.Rotation3DKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteRotation3DKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteRotation3DKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingRotation3DKeyFrame = interface; // type: System.Windows.Media.Animation.EasingRotation3DKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearRotation3DKeyFrame = interface; // type: System.Windows.Media.Animation.LinearRotation3DKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineRotation3DKeyFrame = interface; // type: System.Windows.Media.Animation.SplineRotation3DKeyFrame, namespace: System.Windows.Media.Animation
  DNRotation3DKeyFrameCollection = interface; // type: System.Windows.Media.Animation.Rotation3DKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNSingleKeyFrame = interface; // type: System.Windows.Media.Animation.SingleKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteSingleKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteSingleKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingSingleKeyFrame = interface; // type: System.Windows.Media.Animation.EasingSingleKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearSingleKeyFrame = interface; // type: System.Windows.Media.Animation.LinearSingleKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineSingleKeyFrame = interface; // type: System.Windows.Media.Animation.SplineSingleKeyFrame, namespace: System.Windows.Media.Animation
  DNSingleKeyFrameCollection = interface; // type: System.Windows.Media.Animation.SingleKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNSizeKeyFrame = interface; // type: System.Windows.Media.Animation.SizeKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteSizeKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteSizeKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingSizeKeyFrame = interface; // type: System.Windows.Media.Animation.EasingSizeKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearSizeKeyFrame = interface; // type: System.Windows.Media.Animation.LinearSizeKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineSizeKeyFrame = interface; // type: System.Windows.Media.Animation.SplineSizeKeyFrame, namespace: System.Windows.Media.Animation
  DNSizeKeyFrameCollection = interface; // type: System.Windows.Media.Animation.SizeKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNStringKeyFrame = interface; // type: System.Windows.Media.Animation.StringKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteStringKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteStringKeyFrame, namespace: System.Windows.Media.Animation
  DNStringKeyFrameCollection = interface; // type: System.Windows.Media.Animation.StringKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNVector3DKeyFrame = interface; // type: System.Windows.Media.Animation.Vector3DKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteVector3DKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteVector3DKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingVector3DKeyFrame = interface; // type: System.Windows.Media.Animation.EasingVector3DKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearVector3DKeyFrame = interface; // type: System.Windows.Media.Animation.LinearVector3DKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineVector3DKeyFrame = interface; // type: System.Windows.Media.Animation.SplineVector3DKeyFrame, namespace: System.Windows.Media.Animation
  DNVector3DKeyFrameCollection = interface; // type: System.Windows.Media.Animation.Vector3DKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNVectorKeyFrame = interface; // type: System.Windows.Media.Animation.VectorKeyFrame, namespace: System.Windows.Media.Animation
  DNDiscreteVectorKeyFrame = interface; // type: System.Windows.Media.Animation.DiscreteVectorKeyFrame, namespace: System.Windows.Media.Animation
  DNEasingVectorKeyFrame = interface; // type: System.Windows.Media.Animation.EasingVectorKeyFrame, namespace: System.Windows.Media.Animation
  DNLinearVectorKeyFrame = interface; // type: System.Windows.Media.Animation.LinearVectorKeyFrame, namespace: System.Windows.Media.Animation
  DNSplineVectorKeyFrame = interface; // type: System.Windows.Media.Animation.SplineVectorKeyFrame, namespace: System.Windows.Media.Animation
  DNVectorKeyFrameCollection = interface; // type: System.Windows.Media.Animation.VectorKeyFrameCollection, namespace: System.Windows.Media.Animation
  DNDoubleCollection = interface; // type: System.Windows.Media.DoubleCollection, namespace: System.Windows.Media
  DNImageMetadata = interface; // type: System.Windows.Media.ImageMetadata, namespace: System.Windows.Media
  DNBitmapMetadata = interface; // type: System.Windows.Media.Imaging.BitmapMetadata, namespace: System.Windows.Media.Imaging
  DNInPlaceBitmapMetadataWriter = interface; // type: System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter, namespace: System.Windows.Media.Imaging
  DNInt32Collection = interface; // type: System.Windows.Media.Int32Collection, namespace: System.Windows.Media
  DNGeneralTransform2DTo3D = interface; // type: System.Windows.Media.Media3D.GeneralTransform2DTo3D, namespace: System.Windows.Media.Media3D
  DNGeneralTransform3DTo2D = interface; // type: System.Windows.Media.Media3D.GeneralTransform3DTo2D, namespace: System.Windows.Media.Media3D
  DNPoint3DCollection = interface; // type: System.Windows.Media.Media3D.Point3DCollection, namespace: System.Windows.Media.Media3D
  DNVector3DCollection = interface; // type: System.Windows.Media.Media3D.Vector3DCollection, namespace: System.Windows.Media.Media3D
  DNPointCollection = interface; // type: System.Windows.Media.PointCollection, namespace: System.Windows.Media
  DNVectorCollection = interface; // type: System.Windows.Media.VectorCollection, namespace: System.Windows.Media
  DNGestureRecognizer = interface; // type: System.Windows.Ink.GestureRecognizer, namespace: System.Windows.Ink
  DNVisual3D = interface; // type: System.Windows.Media.Media3D.Visual3D, namespace: System.Windows.Media.Media3D
  DNModelVisual3D = interface; // type: System.Windows.Media.Media3D.ModelVisual3D, namespace: System.Windows.Media.Media3D
  DNViewport2DVisual3D = interface; // type: System.Windows.Media.Media3D.Viewport2DVisual3D, namespace: System.Windows.Media.Media3D
  DNUIElement3D = interface; // type: System.Windows.UIElement3D, namespace: System.Windows
  DNContainerUIElement3D = interface; // type: System.Windows.Media.Media3D.ContainerUIElement3D, namespace: System.Windows.Media.Media3D
  DNModelUIElement3D = interface; // type: System.Windows.Media.Media3D.ModelUIElement3D, namespace: System.Windows.Media.Media3D
  DNVisual = interface; // type: System.Windows.Media.Visual, namespace: System.Windows.Media
  DNContainerVisual = interface; // type: System.Windows.Media.ContainerVisual, namespace: System.Windows.Media
  DNDrawingVisual = interface; // type: System.Windows.Media.DrawingVisual, namespace: System.Windows.Media
  DNHostVisual = interface; // type: System.Windows.Media.HostVisual, namespace: System.Windows.Media
  DNViewport3DVisual = interface; // type: System.Windows.Media.Media3D.Viewport3DVisual, namespace: System.Windows.Media.Media3D
  DNUIElement = interface; // type: System.Windows.UIElement, namespace: System.Windows
  DNInputDevice = interface; // type: System.Windows.Input.InputDevice, namespace: System.Windows.Input
  DNKeyboardDevice = interface; // type: System.Windows.Input.KeyboardDevice, namespace: System.Windows.Input
  DNMouseDevice = interface; // type: System.Windows.Input.MouseDevice, namespace: System.Windows.Input
  DNStylusDevice = interface; // type: System.Windows.Input.StylusDevice, namespace: System.Windows.Input
  DNTabletDevice = interface; // type: System.Windows.Input.TabletDevice, namespace: System.Windows.Input
  DNTouchDevice = interface; // type: System.Windows.Input.TouchDevice, namespace: System.Windows.Input
  DNInputLanguageManager = interface; // type: System.Windows.Input.InputLanguageManager, namespace: System.Windows.Input
  DNInputManager = interface; // type: System.Windows.Input.InputManager, namespace: System.Windows.Input
  DNInputMethod = interface; // type: System.Windows.Input.InputMethod, namespace: System.Windows.Input
  DNTextComposition = interface; // type: System.Windows.Input.TextComposition, namespace: System.Windows.Input
  DNTextCompositionManager = interface; // type: System.Windows.Input.TextCompositionManager, namespace: System.Windows.Input
  DNClock = interface; // type: System.Windows.Media.Animation.Clock, namespace: System.Windows.Media.Animation
  DNAnimationClock = interface; // type: System.Windows.Media.Animation.AnimationClock, namespace: System.Windows.Media.Animation
  DNClockGroup = interface; // type: System.Windows.Media.Animation.ClockGroup, namespace: System.Windows.Media.Animation
  DNMediaClock = interface; // type: System.Windows.Media.MediaClock, namespace: System.Windows.Media
  DNClockController = interface; // type: System.Windows.Media.Animation.ClockController, namespace: System.Windows.Media.Animation
  DNCompositionTarget = interface; // type: System.Windows.Media.CompositionTarget, namespace: System.Windows.Media
  DNHwndTarget = interface; // type: System.Windows.Interop.HwndTarget, namespace: System.Windows.Interop
  DNVisualTarget = interface; // type: System.Windows.Media.VisualTarget, namespace: System.Windows.Media
  DNDrawingContext = interface; // type: System.Windows.Media.DrawingContext, namespace: System.Windows.Media
  DNBitmapDecoder = interface; // type: System.Windows.Media.Imaging.BitmapDecoder, namespace: System.Windows.Media.Imaging
  DNBmpBitmapDecoder = interface; // type: System.Windows.Media.Imaging.BmpBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNGifBitmapDecoder = interface; // type: System.Windows.Media.Imaging.GifBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNIconBitmapDecoder = interface; // type: System.Windows.Media.Imaging.IconBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNJpegBitmapDecoder = interface; // type: System.Windows.Media.Imaging.JpegBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNLateBoundBitmapDecoder = interface; // type: System.Windows.Media.Imaging.LateBoundBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNPngBitmapDecoder = interface; // type: System.Windows.Media.Imaging.PngBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNTiffBitmapDecoder = interface; // type: System.Windows.Media.Imaging.TiffBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNWmpBitmapDecoder = interface; // type: System.Windows.Media.Imaging.WmpBitmapDecoder, namespace: System.Windows.Media.Imaging
  DNBitmapEncoder = interface; // type: System.Windows.Media.Imaging.BitmapEncoder, namespace: System.Windows.Media.Imaging
  DNBmpBitmapEncoder = interface; // type: System.Windows.Media.Imaging.BmpBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNGifBitmapEncoder = interface; // type: System.Windows.Media.Imaging.GifBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNJpegBitmapEncoder = interface; // type: System.Windows.Media.Imaging.JpegBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNPngBitmapEncoder = interface; // type: System.Windows.Media.Imaging.PngBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNTiffBitmapEncoder = interface; // type: System.Windows.Media.Imaging.TiffBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNWmpBitmapEncoder = interface; // type: System.Windows.Media.Imaging.WmpBitmapEncoder, namespace: System.Windows.Media.Imaging
  DNBitmapPalette = interface; // type: System.Windows.Media.Imaging.BitmapPalette, namespace: System.Windows.Media.Imaging
  DNStreamGeometryContext = interface; // type: System.Windows.Media.StreamGeometryContext, namespace: System.Windows.Media
  DNPresentationSource = interface; // type: System.Windows.PresentationSource, namespace: System.Windows
  DNHwndSource = interface; // type: System.Windows.Interop.HwndSource, namespace: System.Windows.Interop
  DNCanExecuteChangedEventManager = interface; // type: System.Windows.Input.CanExecuteChangedEventManager, namespace: System.Windows.Input

{ delegates }

  [DNTypeName('System.Windows.AutoResizedEventHandler')]
  DNAutoResizedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAutoResizedEventArgs) of object;

  [DNTypeName('System.Windows.DataObjectCopyingEventHandler')]
  DNDataObjectCopyingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataObjectCopyingEventArgs) of object;

  [DNTypeName('System.Windows.DataObjectPastingEventHandler')]
  DNDataObjectPastingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataObjectPastingEventArgs) of object;

  [DNTypeName('System.Windows.DataObjectSettingDataEventHandler')]
  DNDataObjectSettingDataEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataObjectSettingDataEventArgs) of object;

  [DNTypeName('System.Windows.Documents.GetPageCompletedEventHandler')]
  DNGetPageCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGetPageCompletedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.GetPageNumberCompletedEventHandler')]
  DNGetPageNumberCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGetPageNumberCompletedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.PagesChangedEventHandler')]
  DNPagesChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPagesChangedEventArgs) of object;

  [DNTypeName('System.Windows.Documents.PaginationProgressEventHandler')]
  DNPaginationProgressEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPaginationProgressEventArgs) of object;

  [DNTypeName('System.Windows.DpiChangedEventHandler')]
  DNDpiChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDpiChangedEventArgs) of object;

  [DNTypeName('System.Windows.DragEventHandler')]
  DNDragEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDragEventArgs) of object;

  [DNTypeName('System.Windows.GiveFeedbackEventHandler')]
  DNGiveFeedbackEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGiveFeedbackEventArgs) of object;

  [DNTypeName('System.Windows.HwndDpiChangedEventHandler')]
  DNHwndDpiChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNHwndDpiChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.DrawingAttributesReplacedEventHandler')]
  DNDrawingAttributesReplacedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDrawingAttributesReplacedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.LassoSelectionChangedEventHandler')]
  DNLassoSelectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNLassoSelectionChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.PropertyDataChangedEventHandler')]
  DNPropertyDataChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPropertyDataChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StrokeCollectionChangedEventHandler')]
  DNStrokeCollectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStrokeCollectionChangedEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StrokeHitEventHandler')]
  DNStrokeHitEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStrokeHitEventArgs) of object;

  [DNTypeName('System.Windows.Ink.StylusPointsReplacedEventHandler')]
  DNStylusPointsReplacedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusPointsReplacedEventArgs) of object;

  [DNTypeName('System.Windows.Input.AccessKeyPressedEventHandler')]
  DNAccessKeyPressedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAccessKeyPressedEventArgs) of object;

  [DNTypeName('System.Windows.Input.CanExecuteRoutedEventHandler')]
  DNCanExecuteRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCanExecuteRoutedEventArgs) of object;

  [DNTypeName('System.Windows.Input.ExecutedRoutedEventHandler')]
  DNExecutedRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNExecutedRoutedEventArgs) of object;

  [DNTypeName('System.Windows.Input.InputEventHandler')]
  DNInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.InputLanguageEventHandler')]
  DNInputLanguageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInputLanguageEventArgs) of object;

  [DNTypeName('System.Windows.Input.InputMethodStateChangedEventHandler')]
  DNInputMethodStateChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInputMethodStateChangedEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyboardEventHandler')]
  DNKeyboardEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyboardEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyboardFocusChangedEventHandler')]
  DNKeyboardFocusChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyboardFocusChangedEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler')]
  DNKeyboardInputProviderAcquireFocusEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyboardInputProviderAcquireFocusEventArgs) of object;

  [DNTypeName('System.Windows.Input.KeyEventHandler')]
  DNKeyEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNKeyEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseButtonEventHandler')]
  DNMouseButtonEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseButtonEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseEventHandler')]
  DNMouseEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseEventArgs) of object;

  [DNTypeName('System.Windows.Input.MouseWheelEventHandler')]
  DNMouseWheelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMouseWheelEventArgs) of object;

  [DNTypeName('System.Windows.Input.NotifyInputEventHandler')]
  DNNotifyInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNNotifyInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.PreProcessInputEventHandler')]
  DNPreProcessInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPreProcessInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.ProcessInputEventHandler')]
  DNProcessInputEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProcessInputEventArgs) of object;

  [DNTypeName('System.Windows.Input.QueryCursorEventHandler')]
  DNQueryCursorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryCursorEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusButtonEventHandler')]
  DNStylusButtonEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusButtonEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusDownEventHandler')]
  DNStylusDownEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusDownEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusEventHandler')]
  DNStylusEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusEventArgs) of object;

  [DNTypeName('System.Windows.Input.StylusSystemGestureEventHandler')]
  DNStylusSystemGestureEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStylusSystemGestureEventArgs) of object;

  [DNTypeName('System.Windows.Input.TextCompositionEventHandler')]
  DNTextCompositionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTextCompositionEventArgs) of object;

  [DNTypeName('System.Windows.Input.TouchFrameEventHandler')]
  DNTouchFrameEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTouchFrameEventArgs) of object;

  [DNTypeName('System.Windows.Interop.HwndSourceHook')]
  DNHwndSourceHook = function(hwnd: IntPtr; msg: Int32; wParam: IntPtr; lParam: IntPtr; out handled: Boolean): IntPtr of object;

  [DNTypeName('System.Windows.Media.HitTestFilterCallback')]
  DNHitTestFilterCallback = function(potentialHitTestTarget: DDN.System.Windows.Common.DNDependencyObject): DNHitTestFilterBehavior of object;

  [DNTypeName('System.Windows.Media.HitTestResultCallback')]
  DNHitTestResultCallback = function(result: DNHitTestResult): DNHitTestResultBehavior of object;

  [DNTypeName('System.Windows.QueryContinueDragEventHandler')]
  DNQueryContinueDragEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNQueryContinueDragEventArgs) of object;

  [DNTypeName('System.Windows.RoutedEventHandler')]
  DNRoutedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRoutedEventArgs) of object;

  [DNTypeName('System.Windows.SourceChangedEventHandler')]
  DNSourceChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSourceChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows----------------
  DNLocalizabilityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{840DCF53-9C9E-52C9-8E29-FAC7693FEAF4}']
  { constructors } 

    {class} function init(category: DNLocalizationCategory): DNLocalizabilityAttribute;

  end;

  [DNTypeName('System.Windows.LocalizabilityAttribute')]
  DNLocalizabilityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{20961F89-C9DB-35B1-9D96-059C2E85EFFF}']
  { getters & setters } 

    function get_Category: DNLocalizationCategory;
    function get_Readability: DNReadability;
    procedure set_Readability(value: DNReadability);
    function get_Modifiability: DNModifiability;
    procedure set_Modifiability(value: DNModifiability);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: DNLocalizationCategory read get_Category;
    property Readability: DNReadability read get_Readability write set_Readability;
    property Modifiability: DNModifiability read get_Modifiability write set_Modifiability;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLocalizabilityAttribute = class(TDNGenericImport<DNLocalizabilityAttributeClass, DNLocalizabilityAttribute>) end;

  //-------------namespace: System.Windows.Resources----------------
  DNAssemblyAssociatedContentFileAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7C41E9C5-734C-5381-BF93-182B6D94F1A7}']
  { constructors } 

    {class} function init(relativeContentFilePath: string): DNAssemblyAssociatedContentFileAttribute;

  end;

  [DNTypeName('System.Windows.Resources.AssemblyAssociatedContentFileAttribute')]
  DNAssemblyAssociatedContentFileAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A63FB4B2-3CD3-3E85-8C28-EAD28C762EAF}']
  { getters & setters } 

    function get_RelativeContentFilePath: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RelativeContentFilePath: string read get_RelativeContentFilePath;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAssemblyAssociatedContentFileAttribute = class(TDNGenericImport<DNAssemblyAssociatedContentFileAttributeClass, DNAssemblyAssociatedContentFileAttribute>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0398F2FD-6375-5D8E-A8DB-2A35F0A67846}']
  { constructors } 

    {class} function init: DNStrokeCollection; overload;
    {class} function init(strokes: DDN.mscorlib.DNIEnumerable<DNStroke>): DNStrokeCollection; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNStrokeCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InkSerializedFormat: string;

  { static fields } 

    {class} property InkSerializedFormat: string read __fakeFieldGet_InkSerializedFormat;

  end;

  [DNTypeName('System.Windows.Ink.StrokeCollection')]
  DNStrokeCollection = interface(DDN.mscorlib.DNObject)
  ['{ED486B01-26E5-3F35-98B4-B7D56D98126B}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_StrokesChanged(value: DNStrokeCollectionChangedEventHandler);
    procedure remove_StrokesChanged(value: DNStrokeCollectionChangedEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream; compress: Boolean); overload;
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    procedure Transform(transformMatrix: DDN.System.Windows.Common.DNMatrix; applyToStylusTip: Boolean);
    function Clone: DNStrokeCollection;
    function IndexOf(stroke: DNStroke): Int32;
    procedure Remove(strokes: DNStrokeCollection);
    procedure Add(strokes: DNStrokeCollection);
    procedure Replace(strokeToReplace: DNStroke; strokesToReplaceWith: DNStrokeCollection); overload;
    procedure Replace(strokesToReplace: DNStrokeCollection; strokesToReplaceWith: DNStrokeCollection); overload;
    function GetBounds: DDN.System.Windows.Common.DNRect;
    function HitTest(point: DDN.System.Windows.Common.DNPoint): DNStrokeCollection; overload;
    function HitTest(point: DDN.System.Windows.Common.DNPoint; diameter: Double): DNStrokeCollection; overload;
    function HitTest(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; percentageWithinLasso: Int32): DNStrokeCollection; overload;
    function HitTest(bounds: DDN.System.Windows.Common.DNRect; percentageWithinBounds: Int32): DNStrokeCollection; overload;
    function HitTest(path: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; stylusShape: DNStylusShape): DNStrokeCollection; overload;
    procedure Clip(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>); overload;
    procedure Erase(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>); overload;
    procedure Erase(eraserPath: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; eraserShape: DNStylusShape); overload;
    procedure Draw(context: DNDrawingContext);
    function GetIncrementalStrokeHitTester(eraserShape: DNStylusShape): DNIncrementalStrokeHitTester;
    function GetIncrementalLassoHitTester(percentageWithinLasso: Int32): DNIncrementalLassoHitTester;
    procedure Clip(bounds: DDN.System.Windows.Common.DNRect); overload;
    procedure Erase(bounds: DDN.System.Windows.Common.DNRect); overload;
    procedure CopyTo(&array: TArray<DNStroke>; index: Int32);
    function &Contains(item: DNStroke): Boolean;
    procedure Insert(index: Int32; item: DNStroke);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStrokeCollection = class(TDNGenericImport<DNStrokeCollectionClass, DNStrokeCollection>) end;

  //-------------namespace: System.Windows.Input.StylusPlugIns----------------
  DNStylusPlugInCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BFB2C5D-3AF8-525E-84D4-DF6DCCB88AD3}']
  end;

  [DNTypeName('System.Windows.Input.StylusPlugIns.StylusPlugInCollection')]
  DNStylusPlugInCollection = interface(DDN.mscorlib.DNObject)
  ['{6F957D27-5AFF-36E1-AF78-D59EE7F2D4BD}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNStylusPlugIn>; index: Int32);
    function &Contains(item: DNStylusPlugIn): Boolean;
    function IndexOf(item: DNStylusPlugIn): Int32;
    procedure Insert(index: Int32; item: DNStylusPlugIn);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStylusPlugInCollection = class(TDNGenericImport<DNStylusPlugInCollectionClass, DNStylusPlugInCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18334B3E-9349-50FC-BE92-6CC16EF73E5C}']
  { constructors } 

    {class} function init: DNStylusPointCollection; overload;
    {class} function init(initialCapacity: Int32): DNStylusPointCollection; overload;
    {class} function init(stylusPointDescription: DNStylusPointDescription): DNStylusPointCollection; overload;
    {class} function init(stylusPointDescription: DNStylusPointDescription; initialCapacity: Int32): DNStylusPointCollection; overload;
    {class} function init(stylusPoints: DDN.mscorlib.DNIEnumerable<DNStylusPoint>): DNStylusPointCollection; overload;
    {class} function init(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>): DNStylusPointCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPointCollection')]
  DNStylusPointCollection = interface(DDN.mscorlib.DNObject)
  ['{4B1686D2-09DE-3FBE-A10B-45007983C059}']
  { getters & setters } 

    function get_Description: DNStylusPointDescription;
    function get_Count: Int32;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(stylusPoints: DNStylusPointCollection);
    function Clone: DNStylusPointCollection;
    function Reformat(subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection;
    function ToHiMetricArray: TArray<Int32>;
    procedure CopyTo(&array: TArray<DNStylusPoint>; index: Int32);
    function &Contains(item: DNStylusPoint): Boolean;
    function IndexOf(item: DNStylusPoint): Int32;
    procedure Insert(index: Int32; item: DNStylusPoint);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: DNStylusPointDescription read get_Description;
    property Count: Int32 read get_Count;
  end;

  TDNStylusPointCollection = class(TDNGenericImport<DNStylusPointCollectionClass, DNStylusPointCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4331DF4C-F933-5382-8A5B-3D8C540A938A}']
  { constructors } 

    {class} function init: DNTouchPointCollection;

  end;

  [DNTypeName('System.Windows.Input.TouchPointCollection')]
  DNTouchPointCollection = interface(DDN.mscorlib.DNObject)
  ['{C3BE72B2-D0E0-306D-88C1-F3B7140E652B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNTouchPoint>; index: Int32);
    function &Contains(item: DNTouchPoint): Boolean;
    function IndexOf(item: DNTouchPoint): Int32;
    procedure Insert(index: Int32; item: DNTouchPoint);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTouchPointCollection = class(TDNGenericImport<DNTouchPointCollectionClass, DNTouchPointCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17A56F55-5EAE-55F5-9060-EB8B3FF7CAA0}']
  end;

  [DNTypeName('System.Windows.Input.StylusButtonCollection')]
  DNStylusButtonCollection = interface(DDN.mscorlib.DNObject)
  ['{A71EE954-4650-3C17-9C4F-F5173DCCC934}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetStylusButtonByGuid(guid: DDN.mscorlib.DNGuid): DNStylusButton;
    function &Contains(value: DNStylusButton): Boolean;
    procedure CopyTo(&array: TArray<DNStylusButton>; index: Int32);
    function IndexOf(value: DNStylusButton): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStylusButtonCollection = class(TDNGenericImport<DNStylusButtonCollectionClass, DNStylusButtonCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusDeviceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9E00DBCF-5101-5506-8400-DE8CCE6C4554}']
  end;

  [DNTypeName('System.Windows.Input.StylusDeviceCollection')]
  DNStylusDeviceCollection = interface(DDN.mscorlib.DNObject)
  ['{EC635E6A-840F-30DF-9250-F7A8E86BADDF}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNStylusDevice): Boolean;
    procedure CopyTo(&array: TArray<DNStylusDevice>; index: Int32);
    function IndexOf(value: DNStylusDevice): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStylusDeviceCollection = class(TDNGenericImport<DNStylusDeviceCollectionClass, DNStylusDeviceCollection>) end;

  //-------------namespace: System.Windows----------------
  DNCultureInfoIetfLanguageTagConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{697469DB-A752-5C46-A83C-AE741F93E509}']
  { constructors } 

    {class} function init: DNCultureInfoIetfLanguageTagConverter;

  end;

  [DNTypeName('System.Windows.CultureInfoIetfLanguageTagConverter')]
  DNCultureInfoIetfLanguageTagConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{92C5DF55-8FF0-3FD1-ACA6-8CDE7B62EBA6}']
  { methods } 

    function CanConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCultureInfoIetfLanguageTagConverter = class(TDNGenericImport<DNCultureInfoIetfLanguageTagConverterClass, DNCultureInfoIetfLanguageTagConverter>) end;

  //-------------namespace: System.Windows----------------
  DNDurationConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{289DE1A3-316C-56B5-82C5-C9FF1AD5899B}']
  { constructors } 

    {class} function init: DNDurationConverter;

  end;

  [DNTypeName('System.Windows.DurationConverter')]
  DNDurationConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{D8981FA8-BC69-3458-BF1E-2C619B9175B9}']
  { methods } 

    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDurationConverter = class(TDNGenericImport<DNDurationConverterClass, DNDurationConverter>) end;

  //-------------namespace: System.Windows----------------
  DNFontStretchConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{7F61CBDF-7DC2-5A83-AC6E-1941CF3B4976}']
  { constructors } 

    {class} function init: DNFontStretchConverter;

  end;

  [DNTypeName('System.Windows.FontStretchConverter')]
  DNFontStretchConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{065499F0-1682-375A-99C1-774F953BB053}']
  { methods } 

    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontStretchConverter = class(TDNGenericImport<DNFontStretchConverterClass, DNFontStretchConverter>) end;

  //-------------namespace: System.Windows----------------
  DNFontStyleConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{928A651B-95BE-5C84-A12B-24759AE6F359}']
  { constructors } 

    {class} function init: DNFontStyleConverter;

  end;

  [DNTypeName('System.Windows.FontStyleConverter')]
  DNFontStyleConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{5EA93C07-2B60-3260-BADB-BFD90F2448A8}']
  { methods } 

    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontStyleConverter = class(TDNGenericImport<DNFontStyleConverterClass, DNFontStyleConverter>) end;

  //-------------namespace: System.Windows----------------
  DNFontWeightConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{454E9762-5283-597F-9354-AD9F64A06BCA}']
  { constructors } 

    {class} function init: DNFontWeightConverter;

  end;

  [DNTypeName('System.Windows.FontWeightConverter')]
  DNFontWeightConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{366BEDEC-BE39-38C0-B6C2-A792DE087090}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontWeightConverter = class(TDNGenericImport<DNFontWeightConverterClass, DNFontWeightConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCursorConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{8A3BB9CE-452F-5B20-975C-8704B025129D}']
  { constructors } 

    {class} function init: DNCursorConverter;

  end;

  [DNTypeName('System.Windows.Input.CursorConverter')]
  DNCursorConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{53C78281-9C69-3BE7-9D17-AD8AA74E5B84}']
  { methods } 

    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCursorConverter = class(TDNGenericImport<DNCursorConverterClass, DNCursorConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopeConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{27729951-D81A-5929-82A9-74F79FD9C4F1}']
  { constructors } 

    {class} function init: DNInputScopeConverter;

  end;

  [DNTypeName('System.Windows.Input.InputScopeConverter')]
  DNInputScopeConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{64680828-6C79-3E73-A3C0-0FF8ED5370A1}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInputScopeConverter = class(TDNGenericImport<DNInputScopeConverterClass, DNInputScopeConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopeNameConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{097E2531-2F13-5F5D-9099-65C4FDC6BFE6}']
  { constructors } 

    {class} function init: DNInputScopeNameConverter;

  end;

  [DNTypeName('System.Windows.Input.InputScopeNameConverter')]
  DNInputScopeNameConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{53EAF2C4-052D-3910-9C38-BA0D5060FDC6}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInputScopeNameConverter = class(TDNGenericImport<DNInputScopeNameConverterClass, DNInputScopeNameConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyGestureConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{89F95DED-53ED-5895-B26E-BDC994FA30C2}']
  { constructors } 

    {class} function init: DNKeyGestureConverter;

  end;

  [DNTypeName('System.Windows.Input.KeyGestureConverter')]
  DNKeyGestureConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{46557A36-0957-3F19-84E5-CFCEA8242D5C}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyGestureConverter = class(TDNGenericImport<DNKeyGestureConverterClass, DNKeyGestureConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseActionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{D5914F7E-351E-5D14-91C5-64E0AA3E7C2F}']
  { constructors } 

    {class} function init: DNMouseActionConverter;

  end;

  [DNTypeName('System.Windows.Input.MouseActionConverter')]
  DNMouseActionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{065E78BF-7677-318B-8B75-26B6E7470D3C}']
  { methods } 

    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMouseActionConverter = class(TDNGenericImport<DNMouseActionConverterClass, DNMouseActionConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseGestureConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{7C78FDE1-15A7-5418-ADFD-4F113D9AA3FD}']
  { constructors } 

    {class} function init: DNMouseGestureConverter;

  end;

  [DNTypeName('System.Windows.Input.MouseGestureConverter')]
  DNMouseGestureConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{20D6EE7A-A784-338F-895F-940EEAA6D6D9}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMouseGestureConverter = class(TDNGenericImport<DNMouseGestureConverterClass, DNMouseGestureConverter>) end;

  //-------------namespace: System.Windows----------------
  DNKeySplineConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{AC7B78F9-7DBA-5050-AA50-6D8B4FD7E0E5}']
  { constructors } 

    {class} function init: DNKeySplineConverter;

  end;

  [DNTypeName('System.Windows.KeySplineConverter')]
  DNKeySplineConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{DDC44B5C-8FE9-3D37-8E84-E6AC8DB45111}']
  { methods } 

    function CanConvertFrom(typeDescriptor: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeySplineConverter = class(TDNGenericImport<DNKeySplineConverterClass, DNKeySplineConverter>) end;

  //-------------namespace: System.Windows----------------
  DNKeyTimeConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{E8157684-C011-54FB-96C2-0ACC345AECF7}']
  { constructors } 

    {class} function init: DNKeyTimeConverter;

  end;

  [DNTypeName('System.Windows.KeyTimeConverter')]
  DNKeyTimeConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{B08516C9-83E8-31C6-9EAA-7870B8D324AF}']
  { methods } 

    function ConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyTimeConverter = class(TDNGenericImport<DNKeyTimeConverterClass, DNKeyTimeConverter>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlLanguageConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{546D4346-DC08-538D-861B-DA6FAE83F129}']
  { constructors } 

    {class} function init: DNXmlLanguageConverter;

  end;

  [DNTypeName('System.Windows.Markup.XmlLanguageConverter')]
  DNXmlLanguageConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{8A493574-A027-3EEE-A36A-560F5D5255F2}']
  { methods } 

    function CanConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlLanguageConverter = class(TDNGenericImport<DNXmlLanguageConverterClass, DNXmlLanguageConverter>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRepeatBehaviorConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{C3F33DE9-FEF4-523E-AA9C-9DF534C1FA00}']
  { constructors } 

    {class} function init: DNRepeatBehaviorConverter;

  end;

  [DNTypeName('System.Windows.Media.Animation.RepeatBehaviorConverter')]
  DNRepeatBehaviorConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{17926A6C-2BE0-3B3B-8D51-17254308763E}']
  { methods } 

    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRepeatBehaviorConverter = class(TDNGenericImport<DNRepeatBehaviorConverterClass, DNRepeatBehaviorConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBrushConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{3A437912-3379-5D93-8BDD-E59C115B6CE0}']
  { constructors } 

    {class} function init: DNBrushConverter;

  end;

  [DNTypeName('System.Windows.Media.BrushConverter')]
  DNBrushConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{3846607A-6744-31D0-890A-77AEFD5038F4}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushConverter = class(TDNGenericImport<DNBrushConverterClass, DNBrushConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCacheModeConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{8FC3C6B5-8C8A-5183-9685-19128996F1EA}']
  { constructors } 

    {class} function init: DNCacheModeConverter;

  end;

  [DNTypeName('System.Windows.Media.CacheModeConverter')]
  DNCacheModeConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{DBDEED77-B502-37AC-B46F-BC0048DE5DEF}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCacheModeConverter = class(TDNGenericImport<DNCacheModeConverterClass, DNCacheModeConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNColorConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{FD717804-FAB1-59C9-9B63-EA5146852C80}']
  { constructors } 

    {class} function init: DNColorConverter;

  { static methods } 

    {class} function ConvertFromString(value: string): DDN.mscorlib.DNObject; overload;

  end;

  [DNTypeName('System.Windows.Media.ColorConverter')]
  DNColorConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{D1CB1A2F-2843-31E3-B232-FB08A11AF6DE}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorConverter = class(TDNGenericImport<DNColorConverterClass, DNColorConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNBaseIListConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{F4F945AE-8F01-5D39-A105-894827D14FFE}']
  end;

  [DNTypeName('System.Windows.Media.Converters.BaseIListConverter')]
  DNBaseIListConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{B47EEF27-6614-3732-95BE-27823A348A97}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseIListConverter = class(TDNGenericImport<DNBaseIListConverterClass, DNBaseIListConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNBoolIListConverterClass = interface(DNBaseIListConverterClass)
  ['{E5BEDF6E-02EB-5E38-BED2-632F8A16A5D1}']
  { constructors } 

    {class} function init: DNBoolIListConverter;

  end;

  [DNTypeName('System.Windows.Media.Converters.BoolIListConverter')]
  DNBoolIListConverter = interface(DNBaseIListConverter)
  ['{323508EB-D29E-32CF-86C5-CDF2E2139FFC}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBoolIListConverter = class(TDNGenericImport<DNBoolIListConverterClass, DNBoolIListConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNCharIListConverterClass = interface(DNBaseIListConverterClass)
  ['{2B963B3D-6788-5044-9905-820DD7F4570E}']
  { constructors } 

    {class} function init: DNCharIListConverter;

  end;

  [DNTypeName('System.Windows.Media.Converters.CharIListConverter')]
  DNCharIListConverter = interface(DNBaseIListConverter)
  ['{3CD34B35-7D12-35EB-AAFE-9642D4CEA134}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCharIListConverter = class(TDNGenericImport<DNCharIListConverterClass, DNCharIListConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNDoubleIListConverterClass = interface(DNBaseIListConverterClass)
  ['{86CF2917-7190-5A98-A89C-2B8402C57C9D}']
  { constructors } 

    {class} function init: DNDoubleIListConverter;

  end;

  [DNTypeName('System.Windows.Media.Converters.DoubleIListConverter')]
  DNDoubleIListConverter = interface(DNBaseIListConverter)
  ['{14A9FC82-618A-361E-8AA8-7D383C27EF5C}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDoubleIListConverter = class(TDNGenericImport<DNDoubleIListConverterClass, DNDoubleIListConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNPointIListConverterClass = interface(DNBaseIListConverterClass)
  ['{85DAB087-8362-54E3-A6CA-F1346560BA50}']
  { constructors } 

    {class} function init: DNPointIListConverter;

  end;

  [DNTypeName('System.Windows.Media.Converters.PointIListConverter')]
  DNPointIListConverter = interface(DNBaseIListConverter)
  ['{22401E3D-A729-3E8A-A658-CC35AFF44252}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointIListConverter = class(TDNGenericImport<DNPointIListConverterClass, DNPointIListConverter>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNUShortIListConverterClass = interface(DNBaseIListConverterClass)
  ['{34DE3D91-4CFA-5BF1-8808-61ACD08ECFD6}']
  { constructors } 

    {class} function init: DNUShortIListConverter;

  end;

  [DNTypeName('System.Windows.Media.Converters.UShortIListConverter')]
  DNUShortIListConverter = interface(DNBaseIListConverter)
  ['{AD16E782-2792-3DEA-A2F4-7519BB7414FF}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUShortIListConverter = class(TDNGenericImport<DNUShortIListConverterClass, DNUShortIListConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDoubleCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{4DD16BAF-DECC-5A9E-9885-F3C828AB5C68}']
  { constructors } 

    {class} function init: DNDoubleCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.DoubleCollectionConverter')]
  DNDoubleCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{7FC3DF6D-F5BB-3978-BA15-EDC38E25C0F2}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDoubleCollectionConverter = class(TDNGenericImport<DNDoubleCollectionConverterClass, DNDoubleCollectionConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{B973E655-4DF8-50DA-8822-03EBA8D394F8}']
  { constructors } 

    {class} function init: DNFontFamilyConverter;

  end;

  [DNTypeName('System.Windows.Media.FontFamilyConverter')]
  DNFontFamilyConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{EA6C1501-E94B-34DA-8E3F-1648ED8CD2C8}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; o: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontFamilyConverter = class(TDNGenericImport<DNFontFamilyConverterClass, DNFontFamilyConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{21B7303D-E04A-54C3-96BB-1799C954B0E1}']
  { constructors } 

    {class} function init: DNGeometryConverter;

  end;

  [DNTypeName('System.Windows.Media.GeometryConverter')]
  DNGeometryConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{85B272B7-9604-34CF-81A6-E6D49DFECCA1}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGeometryConverter = class(TDNGenericImport<DNGeometryConverterClass, DNGeometryConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageSourceConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{668DF96F-68B4-5597-856A-880AD89DA74C}']
  { constructors } 

    {class} function init: DNImageSourceConverter;

  end;

  [DNTypeName('System.Windows.Media.ImageSourceConverter')]
  DNImageSourceConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{1AE80EAF-95C2-32EE-B145-A8AF27BFD32A}']
  { methods } 

    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageSourceConverter = class(TDNGenericImport<DNImageSourceConverterClass, DNImageSourceConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNInt32CollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{524BE0CF-4B42-554A-B173-0FD3AAB646C0}']
  { constructors } 

    {class} function init: DNInt32CollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.Int32CollectionConverter')]
  DNInt32CollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{50D8E0E0-47D9-3F61-94E8-527C55EDA0A1}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32CollectionConverter = class(TDNGenericImport<DNInt32CollectionConverterClass, DNInt32CollectionConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMatrix3DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{D3C3413C-689E-5BA3-B520-88BA384FE9B1}']
  { constructors } 

    {class} function init: DNMatrix3DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Matrix3DConverter')]
  DNMatrix3DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{28F8F6E3-9F9D-369F-A1FE-B8F49531CE33}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrix3DConverter = class(TDNGenericImport<DNMatrix3DConverterClass, DNMatrix3DConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint3DCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{507758F8-7912-5C27-8F88-B9B3FE0CFE30}']
  { constructors } 

    {class} function init: DNPoint3DCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3DCollectionConverter')]
  DNPoint3DCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{D4B2803D-00A1-390E-9D3E-90007EE61A4F}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint3DCollectionConverter = class(TDNGenericImport<DNPoint3DCollectionConverterClass, DNPoint3DCollectionConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint3DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{6267B8C7-65B7-5CD5-8074-D5D3E3F465F1}']
  { constructors } 

    {class} function init: DNPoint3DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3DConverter')]
  DNPoint3DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{33DD0238-D849-34C3-9588-CF18EE3AC248}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint3DConverter = class(TDNGenericImport<DNPoint3DConverterClass, DNPoint3DConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint4DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{C48DD09D-1FEC-5550-9B7B-A18B4A188AB5}']
  { constructors } 

    {class} function init: DNPoint4DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point4DConverter')]
  DNPoint4DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{9093A67D-D883-3603-AC52-EE8E6135703D}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint4DConverter = class(TDNGenericImport<DNPoint4DConverterClass, DNPoint4DConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNQuaternionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{64029663-BED8-5ED8-A5CC-EF6958804E37}']
  { constructors } 

    {class} function init: DNQuaternionConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.QuaternionConverter')]
  DNQuaternionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{01833E5C-BAAA-3A16-B9B4-3D6AD82CB45D}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQuaternionConverter = class(TDNGenericImport<DNQuaternionConverterClass, DNQuaternionConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRect3DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{1DB179DA-0618-5B24-B1E5-FB184C3DCCBB}']
  { constructors } 

    {class} function init: DNRect3DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Rect3DConverter')]
  DNRect3DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{A221C9F4-3FE9-39B7-9DF9-458D889FEDE7}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRect3DConverter = class(TDNGenericImport<DNRect3DConverterClass, DNRect3DConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNSize3DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{60217E69-59F6-543A-B565-9E8EAA3DED98}']
  { constructors } 

    {class} function init: DNSize3DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Size3DConverter')]
  DNSize3DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{BEC3D990-E14E-3E14-8322-6AFCA710E6CA}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSize3DConverter = class(TDNGenericImport<DNSize3DConverterClass, DNSize3DConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVector3DCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{58371CE8-4CED-58E4-93EA-C1302785606D}']
  { constructors } 

    {class} function init: DNVector3DCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3DCollectionConverter')]
  DNVector3DCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{E6536C48-DF06-31F7-943C-9F8E8725E4DD}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVector3DCollectionConverter = class(TDNGenericImport<DNVector3DCollectionConverterClass, DNVector3DCollectionConverter>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVector3DConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{77304126-BF63-5C05-A8F4-670A0F15FCE7}']
  { constructors } 

    {class} function init: DNVector3DConverter;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3DConverter')]
  DNVector3DConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{C1D1C9BF-6C95-3B5D-B886-8A058CE2AEB5}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVector3DConverter = class(TDNGenericImport<DNVector3DConverterClass, DNVector3DConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{4A362EEF-805F-50C1-9D1C-E6EA5FCB4D42}']
  { constructors } 

    {class} function init: DNPathFigureCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.PathFigureCollectionConverter')]
  DNPathFigureCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{2AC97929-1D18-36EC-8193-4BFCD089546F}']
  { methods } 

    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPathFigureCollectionConverter = class(TDNGenericImport<DNPathFigureCollectionConverterClass, DNPathFigureCollectionConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{25D1A2DF-2F24-52E6-A6EF-1658E15EC3CE}']
  { constructors } 

    {class} function init: DNPixelFormatConverter;

  end;

  [DNTypeName('System.Windows.Media.PixelFormatConverter')]
  DNPixelFormatConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{DCACE4CF-6315-3239-B79A-CEC929CD15AC}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFromString(value: string): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; o: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPixelFormatConverter = class(TDNGenericImport<DNPixelFormatConverterClass, DNPixelFormatConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{ACEE8741-DFBB-55B3-A5C6-DC9E22EA24FB}']
  { constructors } 

    {class} function init: DNPointCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.PointCollectionConverter')]
  DNPointCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{553C0910-C1BF-3930-8676-F88EDBE0D077}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointCollectionConverter = class(TDNGenericImport<DNPointCollectionConverterClass, DNPointCollectionConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRequestCachePolicyConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{FDCB1245-0A76-555D-9678-C593DC95E696}']
  { constructors } 

    {class} function init: DNRequestCachePolicyConverter;

  end;

  [DNTypeName('System.Windows.Media.RequestCachePolicyConverter')]
  DNRequestCachePolicyConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{892D9204-0D4C-31A5-99B8-8778B5DE936B}']
  { methods } 

    function CanConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(td: DDN.System.Windows.Common.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(typeDescriptorContext: DDN.System.Windows.Common.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRequestCachePolicyConverter = class(TDNGenericImport<DNRequestCachePolicyConverterClass, DNRequestCachePolicyConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTransformConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{853601DA-B4A9-5777-9293-128F2BE2EBA9}']
  { constructors } 

    {class} function init: DNTransformConverter;

  end;

  [DNTypeName('System.Windows.Media.TransformConverter')]
  DNTransformConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{B09C1717-F704-3641-880B-8A7930CACD59}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransformConverter = class(TDNGenericImport<DNTransformConverterClass, DNTransformConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVectorCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{C5FE948E-9E33-56C4-806F-2DA6DCC559B9}']
  { constructors } 

    {class} function init: DNVectorCollectionConverter;

  end;

  [DNTypeName('System.Windows.Media.VectorCollectionConverter')]
  DNVectorCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{0CA0D591-AD6F-3775-B708-0E576D8DC228}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorCollectionConverter = class(TDNGenericImport<DNVectorCollectionConverterClass, DNVectorCollectionConverter>) end;

  //-------------namespace: System.Windows----------------
  DNStrokeCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{B846A0A3-2225-5FE8-BE5C-869937BAC0A6}']
  { constructors } 

    {class} function init: DNStrokeCollectionConverter;

  end;

  [DNTypeName('System.Windows.StrokeCollectionConverter')]
  DNStrokeCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{C6D0EDDE-9E72-3515-962D-F946AF986C71}']
  { methods } 

    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStrokeCollectionConverter = class(TDNGenericImport<DNStrokeCollectionConverterClass, DNStrokeCollectionConverter>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationCollectionConverterClass = interface(DDN.System.Windows.Common.DNTypeConverterClass)
  ['{AEC25AD9-6A26-5A7D-BDF0-911D8A5BCB7A}']
  { constructors } 

    {class} function init: DNTextDecorationCollectionConverter;

  { static methods } 

    {class} function ConvertFromString(text: string): DNTextDecorationCollection; overload;

  end;

  [DNTypeName('System.Windows.TextDecorationCollectionConverter')]
  DNTextDecorationCollectionConverter = interface(DDN.System.Windows.Common.DNTypeConverter)
  ['{CBF339F1-ED7D-38DB-B572-7F52097D1392}']
  { methods } 

    function ConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; input: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DDN.System.Windows.Common.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.Windows.Common.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.Windows.Common.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.Windows.Common.DNITypeDescriptorContext): DDN.System.Windows.Common.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.Windows.Common.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.Windows.Common.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.Windows.Common.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextDecorationCollectionConverter = class(TDNGenericImport<DNTextDecorationCollectionConverterClass, DNTextDecorationCollectionConverter>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNGetPageCompletedEventArgsClass = interface(DDN.System.Windows.Common.DNAsyncCompletedEventArgsClass)
  ['{CFBDDCBF-D6AE-51AB-BD90-EB089856762A}']
  { constructors } 

    {class} function init(page: DNDocumentPage; pageNumber: Int32; error: DDN.mscorlib.DNException; cancelled: Boolean; userState: DDN.mscorlib.DNObject): DNGetPageCompletedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.GetPageCompletedEventArgs')]
  DNGetPageCompletedEventArgs = interface(DDN.System.Windows.Common.DNAsyncCompletedEventArgs)
  ['{2C3B6ED8-D5E0-3C7F-807F-4B842D7EF081}']
  { getters & setters } 

    function get_DocumentPage: DNDocumentPage;
    function get_PageNumber: Int32;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocumentPage: DNDocumentPage read get_DocumentPage;
    property PageNumber: Int32 read get_PageNumber;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNGetPageCompletedEventArgs = class(TDNGenericImport<DNGetPageCompletedEventArgsClass, DNGetPageCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNGetPageNumberCompletedEventArgsClass = interface(DDN.System.Windows.Common.DNAsyncCompletedEventArgsClass)
  ['{275CBB99-C010-5CA9-BB04-6D10555C41C5}']
  { constructors } 

    {class} function init(contentPosition: DNContentPosition; pageNumber: Int32; error: DDN.mscorlib.DNException; cancelled: Boolean; userState: DDN.mscorlib.DNObject): DNGetPageNumberCompletedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.GetPageNumberCompletedEventArgs')]
  DNGetPageNumberCompletedEventArgs = interface(DDN.System.Windows.Common.DNAsyncCompletedEventArgs)
  ['{D8D3394B-A54D-3EEB-B8E0-23BDC3537FB4}']
  { getters & setters } 

    function get_ContentPosition: DNContentPosition;
    function get_PageNumber: Int32;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentPosition: DNContentPosition read get_ContentPosition;
    property PageNumber: Int32 read get_PageNumber;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNGetPageNumberCompletedEventArgs = class(TDNGenericImport<DNGetPageNumberCompletedEventArgsClass, DNGetPageNumberCompletedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNHwndDpiChangedEventArgsClass = interface(DDN.System.Windows.Common.DNHandledEventArgsClass)
  ['{F3EB706D-430A-5F7E-BEE3-A1E519F051DA}']
  end;

  [DNTypeName('System.Windows.HwndDpiChangedEventArgs')]
  DNHwndDpiChangedEventArgs = interface(DDN.System.Windows.Common.DNHandledEventArgs)
  ['{4A6092BF-1951-36AF-B8DA-5B76813F3EE5}']
  { getters & setters } 

    function get_OldDpi: DNDpiScale;
    function get_NewDpi: DNDpiScale;
    function get_SuggestedRect: DDN.System.Windows.Common.DNRect;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldDpi: DNDpiScale read get_OldDpi;
    property NewDpi: DNDpiScale read get_NewDpi;
    property SuggestedRect: DDN.System.Windows.Common.DNRect read get_SuggestedRect;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHwndDpiChangedEventArgs = class(TDNGenericImport<DNHwndDpiChangedEventArgsClass, DNHwndDpiChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNAutoResizedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B703D520-635D-588D-BC21-1FA7A2D9DBFF}']
  { constructors } 

    {class} function init(size: DDN.System.Windows.Common.DNSize): DNAutoResizedEventArgs;

  end;

  [DNTypeName('System.Windows.AutoResizedEventArgs')]
  DNAutoResizedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B9A10F9F-0911-3940-BB0C-519350F9CBDE}']
  { getters & setters } 

    function get_Size: DDN.System.Windows.Common.DNSize;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: DDN.System.Windows.Common.DNSize read get_Size;
  end;

  TDNAutoResizedEventArgs = class(TDNGenericImport<DNAutoResizedEventArgsClass, DNAutoResizedEventArgs>) end;

  //-------------namespace: System.Windows.Diagnostics----------------
  DNVisualTreeChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B496D2CE-64F6-58C5-9B5D-F9F3BDFF260C}']
  { constructors } 

    {class} function init(parent: DDN.System.Windows.Common.DNDependencyObject; child: DDN.System.Windows.Common.DNDependencyObject; childIndex: Int32; changeType: DNVisualTreeChangeType): DNVisualTreeChangeEventArgs;

  end;

  [DNTypeName('System.Windows.Diagnostics.VisualTreeChangeEventArgs')]
  DNVisualTreeChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EEFF4A8F-AC81-3F54-9BFD-C9B2A52381BE}']
  { getters & setters } 

    function get_Parent: DDN.System.Windows.Common.DNDependencyObject;
    function get_Child: DDN.System.Windows.Common.DNDependencyObject;
    function get_ChildIndex: Int32;
    function get_ChangeType: DNVisualTreeChangeType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DDN.System.Windows.Common.DNDependencyObject read get_Parent;
    property Child: DDN.System.Windows.Common.DNDependencyObject read get_Child;
    property ChildIndex: Int32 read get_ChildIndex;
    property ChangeType: DNVisualTreeChangeType read get_ChangeType;
  end;

  TDNVisualTreeChangeEventArgs = class(TDNGenericImport<DNVisualTreeChangeEventArgsClass, DNVisualTreeChangeEventArgs>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNPagesChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{CE0882F9-11EE-557B-90C9-04680968356B}']
  { constructors } 

    {class} function init(start: Int32; count: Int32): DNPagesChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.PagesChangedEventArgs')]
  DNPagesChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{45CE15B4-8BDB-337C-B40B-490C668C18B4}']
  { getters & setters } 

    function get_Start: Int32;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: Int32 read get_Start;
    property Count: Int32 read get_Count;
  end;

  TDNPagesChangedEventArgs = class(TDNGenericImport<DNPagesChangedEventArgsClass, DNPagesChangedEventArgs>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNPaginationProgressEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{01CE199C-7A8B-58C9-BA54-A6D51F78B55B}']
  { constructors } 

    {class} function init(start: Int32; count: Int32): DNPaginationProgressEventArgs;

  end;

  [DNTypeName('System.Windows.Documents.PaginationProgressEventArgs')]
  DNPaginationProgressEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6CE3461A-6681-3912-8085-DCA3887C6B90}']
  { getters & setters } 

    function get_Start: Int32;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: Int32 read get_Start;
    property Count: Int32 read get_Count;
  end;

  TDNPaginationProgressEventArgs = class(TDNGenericImport<DNPaginationProgressEventArgsClass, DNPaginationProgressEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNDrawingAttributesReplacedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{910A8B65-29BC-5C18-9F53-D6FC8D4DD52B}']
  { constructors } 

    {class} function init(newDrawingAttributes: DNDrawingAttributes; previousDrawingAttributes: DNDrawingAttributes): DNDrawingAttributesReplacedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.DrawingAttributesReplacedEventArgs')]
  DNDrawingAttributesReplacedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E79A9297-A863-3F6C-9A35-93F706285E57}']
  { getters & setters } 

    function get_NewDrawingAttributes: DNDrawingAttributes;
    function get_PreviousDrawingAttributes: DNDrawingAttributes;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewDrawingAttributes: DNDrawingAttributes read get_NewDrawingAttributes;
    property PreviousDrawingAttributes: DNDrawingAttributes read get_PreviousDrawingAttributes;
  end;

  TDNDrawingAttributesReplacedEventArgs = class(TDNGenericImport<DNDrawingAttributesReplacedEventArgsClass, DNDrawingAttributesReplacedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNLassoSelectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{61111518-8D92-5CF8-ABA2-11CF2EF7DA57}']
  end;

  [DNTypeName('System.Windows.Ink.LassoSelectionChangedEventArgs')]
  DNLassoSelectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1EFC8D1B-4A6F-35B0-ADA5-433236DB2098}']
  { getters & setters } 

    function get_SelectedStrokes: DNStrokeCollection;
    function get_DeselectedStrokes: DNStrokeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SelectedStrokes: DNStrokeCollection read get_SelectedStrokes;
    property DeselectedStrokes: DNStrokeCollection read get_DeselectedStrokes;
  end;

  TDNLassoSelectionChangedEventArgs = class(TDNGenericImport<DNLassoSelectionChangedEventArgsClass, DNLassoSelectionChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNPropertyDataChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FA166FC3-A50F-5D0A-9640-8CAD97D4DA84}']
  { constructors } 

    {class} function init(propertyGuid: DDN.mscorlib.DNGuid; newValue: DDN.mscorlib.DNObject; previousValue: DDN.mscorlib.DNObject): DNPropertyDataChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.PropertyDataChangedEventArgs')]
  DNPropertyDataChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0D064728-C236-3C67-A675-86603B44DEA8}']
  { getters & setters } 

    function get_PropertyGuid: DDN.mscorlib.DNGuid;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_PreviousValue: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyGuid: DDN.mscorlib.DNGuid read get_PropertyGuid;
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    property PreviousValue: DDN.mscorlib.DNObject read get_PreviousValue;
  end;

  TDNPropertyDataChangedEventArgs = class(TDNGenericImport<DNPropertyDataChangedEventArgsClass, DNPropertyDataChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeCollectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{92167DB8-2548-510C-8D92-F44C45D55507}']
  { constructors } 

    {class} function init(added: DNStrokeCollection; removed: DNStrokeCollection): DNStrokeCollectionChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.StrokeCollectionChangedEventArgs')]
  DNStrokeCollectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FE760549-9BC9-3541-8245-5167B7AEA588}']
  { getters & setters } 

    function get_Added: DNStrokeCollection;
    function get_Removed: DNStrokeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Added: DNStrokeCollection read get_Added;
    property Removed: DNStrokeCollection read get_Removed;
  end;

  TDNStrokeCollectionChangedEventArgs = class(TDNGenericImport<DNStrokeCollectionChangedEventArgsClass, DNStrokeCollectionChangedEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeHitEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2FE1B1C9-E51B-57AE-BB76-66946E96440C}']
  end;

  [DNTypeName('System.Windows.Ink.StrokeHitEventArgs')]
  DNStrokeHitEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F8F31090-4242-3A58-B728-A2AB6E1E0C23}']
  { getters & setters } 

    function get_HitStroke: DNStroke;

  { methods } 

    function GetPointEraseResults: DNStrokeCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HitStroke: DNStroke read get_HitStroke;
  end;

  TDNStrokeHitEventArgs = class(TDNGenericImport<DNStrokeHitEventArgsClass, DNStrokeHitEventArgs>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStylusPointsReplacedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B97DAE37-22B0-5C9D-B2EF-B80828C76F69}']
  { constructors } 

    {class} function init(newStylusPoints: DNStylusPointCollection; previousStylusPoints: DNStylusPointCollection): DNStylusPointsReplacedEventArgs;

  end;

  [DNTypeName('System.Windows.Ink.StylusPointsReplacedEventArgs')]
  DNStylusPointsReplacedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{24B22091-6679-3F14-9F30-2791087D8BC3}']
  { getters & setters } 

    function get_NewStylusPoints: DNStylusPointCollection;
    function get_PreviousStylusPoints: DNStylusPointCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewStylusPoints: DNStylusPointCollection read get_NewStylusPoints;
    property PreviousStylusPoints: DNStylusPointCollection read get_PreviousStylusPoints;
  end;

  TDNStylusPointsReplacedEventArgs = class(TDNGenericImport<DNStylusPointsReplacedEventArgsClass, DNStylusPointsReplacedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNAccessKeyEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{52820268-3E36-5384-9767-CDBD28189FCA}']
  end;

  [DNTypeName('System.Windows.Input.AccessKeyEventArgs')]
  DNAccessKeyEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{03DE7D57-6E74-3190-B603-CDA8A004F6D3}']
  { getters & setters } 

    function get_Key: string;
    function get_IsMultiple: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property IsMultiple: Boolean read get_IsMultiple;
  end;

  TDNAccessKeyEventArgs = class(TDNGenericImport<DNAccessKeyEventArgsClass, DNAccessKeyEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputLanguageEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3CEBD9EF-A563-5C58-9F8B-583563798F3F}']
  end;

  [DNTypeName('System.Windows.Input.InputLanguageEventArgs')]
  DNInputLanguageEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{4FA0CC76-47DB-3F8B-A906-C819AB56797E}']
  { getters & setters } 

    function get_NewLanguage: DDN.mscorlib.DNCultureInfo;
    function get_PreviousLanguage: DDN.mscorlib.DNCultureInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewLanguage: DDN.mscorlib.DNCultureInfo read get_NewLanguage;
    property PreviousLanguage: DDN.mscorlib.DNCultureInfo read get_PreviousLanguage;
  end;

  TDNInputLanguageEventArgs = class(TDNGenericImport<DNInputLanguageEventArgsClass, DNInputLanguageEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputLanguageChangedEventArgsClass = interface(DNInputLanguageEventArgsClass)
  ['{DF5D4172-7AAE-50B6-8948-E16D02A47DFC}']
  { constructors } 

    {class} function init(newLanguageId: DDN.mscorlib.DNCultureInfo; previousLanguageId: DDN.mscorlib.DNCultureInfo): DNInputLanguageChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Input.InputLanguageChangedEventArgs')]
  DNInputLanguageChangedEventArgs = interface(DNInputLanguageEventArgs)
  ['{31E5072F-AAC0-3AEC-9DC5-2E8F4B748FCF}']
  { getters & setters } 

    function get_NewLanguage: DDN.mscorlib.DNCultureInfo;
    function get_PreviousLanguage: DDN.mscorlib.DNCultureInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewLanguage: DDN.mscorlib.DNCultureInfo read get_NewLanguage;
    property PreviousLanguage: DDN.mscorlib.DNCultureInfo read get_PreviousLanguage;
  end;

  TDNInputLanguageChangedEventArgs = class(TDNGenericImport<DNInputLanguageChangedEventArgsClass, DNInputLanguageChangedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputLanguageChangingEventArgsClass = interface(DNInputLanguageEventArgsClass)
  ['{1A809FB1-A2E7-54A2-AAF7-FA7302F0D23B}']
  { constructors } 

    {class} function init(newLanguageId: DDN.mscorlib.DNCultureInfo; previousLanguageId: DDN.mscorlib.DNCultureInfo): DNInputLanguageChangingEventArgs;

  end;

  [DNTypeName('System.Windows.Input.InputLanguageChangingEventArgs')]
  DNInputLanguageChangingEventArgs = interface(DNInputLanguageEventArgs)
  ['{8AFCDA78-9555-346B-ACDF-B0211E8DFD4F}']
  { getters & setters } 

    function get_Rejected: Boolean;
    procedure set_Rejected(value: Boolean);
    function get_NewLanguage: DDN.mscorlib.DNCultureInfo;
    function get_PreviousLanguage: DDN.mscorlib.DNCultureInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rejected: Boolean read get_Rejected write set_Rejected;
    property NewLanguage: DDN.mscorlib.DNCultureInfo read get_NewLanguage;
    property PreviousLanguage: DDN.mscorlib.DNCultureInfo read get_PreviousLanguage;
  end;

  TDNInputLanguageChangingEventArgs = class(TDNGenericImport<DNInputLanguageChangingEventArgsClass, DNInputLanguageChangingEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputMethodStateChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{73BDD6E7-7F0F-5176-9E38-502ABBC07AF0}']
  end;

  [DNTypeName('System.Windows.Input.InputMethodStateChangedEventArgs')]
  DNInputMethodStateChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C2649D62-0156-3477-AAED-6804AD34271B}']
  { getters & setters } 

    function get_IsImeStateChanged: Boolean;
    function get_IsMicrophoneStateChanged: Boolean;
    function get_IsHandwritingStateChanged: Boolean;
    function get_IsSpeechModeChanged: Boolean;
    function get_IsImeConversionModeChanged: Boolean;
    function get_IsImeSentenceModeChanged: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsImeStateChanged: Boolean read get_IsImeStateChanged;
    property IsMicrophoneStateChanged: Boolean read get_IsMicrophoneStateChanged;
    property IsHandwritingStateChanged: Boolean read get_IsHandwritingStateChanged;
    property IsSpeechModeChanged: Boolean read get_IsSpeechModeChanged;
    property IsImeConversionModeChanged: Boolean read get_IsImeConversionModeChanged;
    property IsImeSentenceModeChanged: Boolean read get_IsImeSentenceModeChanged;
  end;

  TDNInputMethodStateChangedEventArgs = class(TDNGenericImport<DNInputMethodStateChangedEventArgsClass, DNInputMethodStateChangedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNNotifyInputEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F01688C9-1565-51C7-8626-B2FEEF163CD0}']
  end;

  [DNTypeName('System.Windows.Input.NotifyInputEventArgs')]
  DNNotifyInputEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{209008FD-5FC6-3FCF-BDD4-1195727F0503}']
  { getters & setters } 

    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNNotifyInputEventArgs = class(TDNGenericImport<DNNotifyInputEventArgsClass, DNNotifyInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNProcessInputEventArgsClass = interface(DNNotifyInputEventArgsClass)
  ['{E26A7ED0-B2A4-5059-9317-B28EC5093F1D}']
  end;

  [DNTypeName('System.Windows.Input.ProcessInputEventArgs')]
  DNProcessInputEventArgs = interface(DNNotifyInputEventArgs)
  ['{36327679-6C9F-3DC7-95FB-DEE9F21A1F19}']
  { getters & setters } 

    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    function PushInput(input: DNInputEventArgs; promote: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PushInput(input: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PopInput: DNStagingAreaInputItem;
    function PeekInput: DNStagingAreaInputItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNProcessInputEventArgs = class(TDNGenericImport<DNProcessInputEventArgsClass, DNProcessInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNPreProcessInputEventArgsClass = interface(DNProcessInputEventArgsClass)
  ['{109D9126-C484-5827-95CF-7E973E839012}']
  end;

  [DNTypeName('System.Windows.Input.PreProcessInputEventArgs')]
  DNPreProcessInputEventArgs = interface(DNProcessInputEventArgs)
  ['{6E3DB92F-7FE5-3C7B-8BAE-8BBC4331D375}']
  { getters & setters } 

    function get_Canceled: Boolean;
    function get_StagingItem: DNStagingAreaInputItem;
    function get_InputManager: DNInputManager;

  { methods } 

    procedure Cancel;
    function PushInput(input: DNInputEventArgs; promote: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PushInput(input: DNStagingAreaInputItem): DNStagingAreaInputItem; overload;
    function PopInput: DNStagingAreaInputItem;
    function PeekInput: DNStagingAreaInputItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Canceled: Boolean read get_Canceled;
    property StagingItem: DNStagingAreaInputItem read get_StagingItem;
    property InputManager: DNInputManager read get_InputManager;
  end;

  TDNPreProcessInputEventArgs = class(TDNGenericImport<DNPreProcessInputEventArgsClass, DNPreProcessInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchFrameEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{96848707-DD3C-5924-8208-9051F193D3B8}']
  end;

  [DNTypeName('System.Windows.Input.TouchFrameEventArgs')]
  DNTouchFrameEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F92D9307-F39C-357C-9AAC-44F4E4FE7678}']
  { getters & setters } 

    function get_Timestamp: Int32;

  { methods } 

    function GetTouchPoints(relativeTo: DNIInputElement): DNTouchPointCollection;
    function GetPrimaryTouchPoint(relativeTo: DNIInputElement): DNTouchPoint;
    procedure SuspendMousePromotionUntilTouchUp;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timestamp: Int32 read get_Timestamp;
  end;

  TDNTouchFrameEventArgs = class(TDNGenericImport<DNTouchFrameEventArgsClass, DNTouchFrameEventArgs>) end;

  //-------------namespace: System.Windows.Media----------------
  DNExceptionEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DDC1977A-F640-5CC5-86A7-EC6C13D6198A}']
  end;

  [DNTypeName('System.Windows.Media.ExceptionEventArgs')]
  DNExceptionEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2D80A3BE-70EC-3E42-B35B-CD814A49B27C}']
  { getters & setters } 

    function get_ErrorException: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ErrorException: DDN.mscorlib.DNException read get_ErrorException;
  end;

  TDNExceptionEventArgs = class(TDNGenericImport<DNExceptionEventArgsClass, DNExceptionEventArgs>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNDownloadProgressEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{42235967-77A7-5D17-9A4A-2E89D9875947}']
  end;

  [DNTypeName('System.Windows.Media.Imaging.DownloadProgressEventArgs')]
  DNDownloadProgressEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C331DD76-0940-3475-A27D-6F53B2A38B65}']
  { getters & setters } 

    function get_Progress: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Progress: Int32 read get_Progress;
  end;

  TDNDownloadProgressEventArgs = class(TDNGenericImport<DNDownloadProgressEventArgsClass, DNDownloadProgressEventArgs>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaScriptCommandEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BEC285AC-A0F8-5560-8E8C-06B9E39B715D}']
  end;

  [DNTypeName('System.Windows.Media.MediaScriptCommandEventArgs')]
  DNMediaScriptCommandEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1723E802-2BCC-321C-BE85-C939C1A00769}']
  { getters & setters } 

    function get_ParameterType: string;
    function get_ParameterValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParameterType: string read get_ParameterType;
    property ParameterValue: string read get_ParameterValue;
  end;

  TDNMediaScriptCommandEventArgs = class(TDNGenericImport<DNMediaScriptCommandEventArgsClass, DNMediaScriptCommandEventArgs>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRenderingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B50E798B-DAB9-5FAC-BA6C-1A5C283B693F}']
  end;

  [DNTypeName('System.Windows.Media.RenderingEventArgs')]
  DNRenderingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2DF9014B-719F-356C-8B50-2C6CC535BAAB}']
  { getters & setters } 

    function get_RenderingTime: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RenderingTime: DDN.mscorlib.DNTimeSpan read get_RenderingTime;
  end;

  TDNRenderingEventArgs = class(TDNGenericImport<DNRenderingEventArgsClass, DNRenderingEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNRoutedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F807D56C-469E-5B66-97A5-1E59BACD379E}']
  { constructors } 

    {class} function init: DNRoutedEventArgs; overload;
    {class} function init(routedEvent: DNRoutedEvent): DNRoutedEventArgs; overload;
    {class} function init(routedEvent: DNRoutedEvent; source: DDN.mscorlib.DNObject): DNRoutedEventArgs; overload;

  end;

  [DNTypeName('System.Windows.RoutedEventArgs')]
  DNRoutedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2AD9448F-6906-318C-AB8A-37C6CD956291}']
  { getters & setters } 

    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNRoutedEventArgs = class(TDNGenericImport<DNRoutedEventArgsClass, DNRoutedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDataObjectEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{4D0B657E-5906-5798-9593-2A083214974F}']
  end;

  [DNTypeName('System.Windows.DataObjectEventArgs')]
  DNDataObjectEventArgs = interface(DNRoutedEventArgs)
  ['{1097A383-A921-38E4-9CF0-8B85F6F9E5AC}']
  { getters & setters } 

    function get_IsDragDrop: Boolean;
    function get_CommandCancelled: Boolean;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure CancelCommand;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDragDrop: Boolean read get_IsDragDrop;
    property CommandCancelled: Boolean read get_CommandCancelled;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDataObjectEventArgs = class(TDNGenericImport<DNDataObjectEventArgsClass, DNDataObjectEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDataObjectCopyingEventArgsClass = interface(DNDataObjectEventArgsClass)
  ['{576A5CD0-8566-53E2-8B76-E3D61A6354F1}']
  { constructors } 

    {class} function init(dataObject: DNIDataObject; isDragDrop: Boolean): DNDataObjectCopyingEventArgs;

  end;

  [DNTypeName('System.Windows.DataObjectCopyingEventArgs')]
  DNDataObjectCopyingEventArgs = interface(DNDataObjectEventArgs)
  ['{DFC31489-F29D-3871-8A52-F33447F7F01F}']
  { getters & setters } 

    function get_DataObject: DNIDataObject;
    function get_IsDragDrop: Boolean;
    function get_CommandCancelled: Boolean;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure CancelCommand;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataObject: DNIDataObject read get_DataObject;
    property IsDragDrop: Boolean read get_IsDragDrop;
    property CommandCancelled: Boolean read get_CommandCancelled;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDataObjectCopyingEventArgs = class(TDNGenericImport<DNDataObjectCopyingEventArgsClass, DNDataObjectCopyingEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDataObjectPastingEventArgsClass = interface(DNDataObjectEventArgsClass)
  ['{16F0C26D-F849-597F-9319-BF7EE3707FFE}']
  { constructors } 

    {class} function init(dataObject: DNIDataObject; isDragDrop: Boolean; formatToApply: string): DNDataObjectPastingEventArgs;

  end;

  [DNTypeName('System.Windows.DataObjectPastingEventArgs')]
  DNDataObjectPastingEventArgs = interface(DNDataObjectEventArgs)
  ['{3E13273D-8C1D-3D2D-AAF0-10A81B6404D0}']
  { getters & setters } 

    function get_SourceDataObject: DNIDataObject;
    function get_DataObject: DNIDataObject;
    procedure set_DataObject(value: DNIDataObject);
    function get_FormatToApply: string;
    procedure set_FormatToApply(value: string);
    function get_IsDragDrop: Boolean;
    function get_CommandCancelled: Boolean;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure CancelCommand;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceDataObject: DNIDataObject read get_SourceDataObject;
    property DataObject: DNIDataObject read get_DataObject write set_DataObject;
    property FormatToApply: string read get_FormatToApply write set_FormatToApply;
    property IsDragDrop: Boolean read get_IsDragDrop;
    property CommandCancelled: Boolean read get_CommandCancelled;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDataObjectPastingEventArgs = class(TDNGenericImport<DNDataObjectPastingEventArgsClass, DNDataObjectPastingEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDataObjectSettingDataEventArgsClass = interface(DNDataObjectEventArgsClass)
  ['{4C27044B-D1D7-5A23-9F9A-572A0270EB57}']
  { constructors } 

    {class} function init(dataObject: DNIDataObject; format: string): DNDataObjectSettingDataEventArgs;

  end;

  [DNTypeName('System.Windows.DataObjectSettingDataEventArgs')]
  DNDataObjectSettingDataEventArgs = interface(DNDataObjectEventArgs)
  ['{A8765A5F-3852-31AA-B03B-A728ADF560B8}']
  { getters & setters } 

    function get_DataObject: DNIDataObject;
    function get_Format: string;
    function get_IsDragDrop: Boolean;
    function get_CommandCancelled: Boolean;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure CancelCommand;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataObject: DNIDataObject read get_DataObject;
    property Format: string read get_Format;
    property IsDragDrop: Boolean read get_IsDragDrop;
    property CommandCancelled: Boolean read get_CommandCancelled;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDataObjectSettingDataEventArgs = class(TDNGenericImport<DNDataObjectSettingDataEventArgsClass, DNDataObjectSettingDataEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDpiChangedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{348A3D65-C417-56B7-95DE-391AD58825F7}']
  end;

  [DNTypeName('System.Windows.DpiChangedEventArgs')]
  DNDpiChangedEventArgs = interface(DNRoutedEventArgs)
  ['{1E815D4F-1C7A-3624-89B3-500AECDC2AD0}']
  { getters & setters } 

    function get_OldDpi: DNDpiScale;
    function get_NewDpi: DNDpiScale;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldDpi: DNDpiScale read get_OldDpi;
    property NewDpi: DNDpiScale read get_NewDpi;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDpiChangedEventArgs = class(TDNGenericImport<DNDpiChangedEventArgsClass, DNDpiChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNDragEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{A0D3A64B-2ECE-5229-A875-863CBDD3D022}']
  end;

  [DNTypeName('System.Windows.DragEventArgs')]
  DNDragEventArgs = interface(DNRoutedEventArgs)
  ['{398A4F8C-B7FE-3755-BC10-A255F7BB3369}']
  { getters & setters } 

    function get_Data: DNIDataObject;
    function get_KeyStates: DNDragDropKeyStates;
    function get_AllowedEffects: DNDragDropEffects;
    function get_Effects: DNDragDropEffects;
    procedure set_Effects(value: DNDragDropEffects);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: DNIDataObject read get_Data;
    property KeyStates: DNDragDropKeyStates read get_KeyStates;
    property AllowedEffects: DNDragDropEffects read get_AllowedEffects;
    property Effects: DNDragDropEffects read get_Effects write set_Effects;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNDragEventArgs = class(TDNGenericImport<DNDragEventArgsClass, DNDragEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNGiveFeedbackEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{EF5B5274-AD6F-5A43-AEC8-E0E26F8731A2}']
  end;

  [DNTypeName('System.Windows.GiveFeedbackEventArgs')]
  DNGiveFeedbackEventArgs = interface(DNRoutedEventArgs)
  ['{9DB6C689-0FC9-32A0-9384-0F6CD88462D6}']
  { getters & setters } 

    function get_Effects: DNDragDropEffects;
    function get_UseDefaultCursors: Boolean;
    procedure set_UseDefaultCursors(value: Boolean);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Effects: DNDragDropEffects read get_Effects;
    property UseDefaultCursors: Boolean read get_UseDefaultCursors write set_UseDefaultCursors;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNGiveFeedbackEventArgs = class(TDNGenericImport<DNGiveFeedbackEventArgsClass, DNGiveFeedbackEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNAccessKeyPressedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{6758337D-7370-5D3A-AE64-ECF26073266B}']
  { constructors } 

    {class} function init: DNAccessKeyPressedEventArgs; overload;
    {class} function init(key: string): DNAccessKeyPressedEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.AccessKeyPressedEventArgs')]
  DNAccessKeyPressedEventArgs = interface(DNRoutedEventArgs)
  ['{F4B4A7B4-DD40-3D6C-A621-EA6144B84E57}']
  { getters & setters } 

    function get_Scope: DDN.mscorlib.DNObject;
    procedure set_Scope(value: DDN.mscorlib.DNObject);
    function get_Target: DNUIElement;
    procedure set_Target(value: DNUIElement);
    function get_Key: string;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scope: DDN.mscorlib.DNObject read get_Scope write set_Scope;
    property Target: DNUIElement read get_Target write set_Target;
    property Key: string read get_Key;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNAccessKeyPressedEventArgs = class(TDNGenericImport<DNAccessKeyPressedEventArgsClass, DNAccessKeyPressedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCanExecuteRoutedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{6F40BEE4-4ED8-5595-BC13-9660171A7147}']
  end;

  [DNTypeName('System.Windows.Input.CanExecuteRoutedEventArgs')]
  DNCanExecuteRoutedEventArgs = interface(DNRoutedEventArgs)
  ['{C200A19A-2CC1-3220-A4B0-B156203A3C28}']
  { getters & setters } 

    function get_Command: DDN.System.Windows.Common.DNICommand;
    function get_Parameter: DDN.mscorlib.DNObject;
    function get_CanExecute: Boolean;
    procedure set_CanExecute(value: Boolean);
    function get_ContinueRouting: Boolean;
    procedure set_ContinueRouting(value: Boolean);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DDN.System.Windows.Common.DNICommand read get_Command;
    property Parameter: DDN.mscorlib.DNObject read get_Parameter;
    property CanExecute: Boolean read get_CanExecute write set_CanExecute;
    property ContinueRouting: Boolean read get_ContinueRouting write set_ContinueRouting;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNCanExecuteRoutedEventArgs = class(TDNGenericImport<DNCanExecuteRoutedEventArgsClass, DNCanExecuteRoutedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNExecutedRoutedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{38BB61B5-DF92-5233-890C-6208F48E5FC1}']
  end;

  [DNTypeName('System.Windows.Input.ExecutedRoutedEventArgs')]
  DNExecutedRoutedEventArgs = interface(DNRoutedEventArgs)
  ['{FD6724B5-6B10-3D57-A31C-ADCF5948F961}']
  { getters & setters } 

    function get_Command: DDN.System.Windows.Common.DNICommand;
    function get_Parameter: DDN.mscorlib.DNObject;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DDN.System.Windows.Common.DNICommand read get_Command;
    property Parameter: DDN.mscorlib.DNObject read get_Parameter;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNExecutedRoutedEventArgs = class(TDNGenericImport<DNExecutedRoutedEventArgsClass, DNExecutedRoutedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{69D7679E-0CF4-59DC-A314-A2FC18857129}']
  { constructors } 

    {class} function init(inputDevice: DNInputDevice; timestamp: Int32): DNInputEventArgs;

  end;

  [DNTypeName('System.Windows.Input.InputEventArgs')]
  DNInputEventArgs = interface(DNRoutedEventArgs)
  ['{5080CF3A-33B0-3D38-B710-9F2697B17A77}']
  { getters & setters } 

    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNInputEventArgs = class(TDNGenericImport<DNInputEventArgsClass, DNInputEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardEventArgsClass = interface(DNInputEventArgsClass)
  ['{59C99D9B-731D-51EE-9BE0-71CAEE117F75}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; timestamp: Int32): DNKeyboardEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyboardEventArgs')]
  DNKeyboardEventArgs = interface(DNInputEventArgs)
  ['{3E333582-C86E-3ADA-AB55-0A982F378037}']
  { getters & setters } 

    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyboardEventArgs = class(TDNGenericImport<DNKeyboardEventArgsClass, DNKeyboardEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardFocusChangedEventArgsClass = interface(DNKeyboardEventArgsClass)
  ['{1791911B-1C91-58A8-9140-17C5E533E01B}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; timestamp: Int32; oldFocus: DNIInputElement; newFocus: DNIInputElement): DNKeyboardFocusChangedEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyboardFocusChangedEventArgs')]
  DNKeyboardFocusChangedEventArgs = interface(DNKeyboardEventArgs)
  ['{858660E0-92BD-39ED-8EC1-E4B9C4827F36}']
  { getters & setters } 

    function get_OldFocus: DNIInputElement;
    function get_NewFocus: DNIInputElement;
    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldFocus: DNIInputElement read get_OldFocus;
    property NewFocus: DNIInputElement read get_NewFocus;
    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyboardFocusChangedEventArgs = class(TDNGenericImport<DNKeyboardFocusChangedEventArgsClass, DNKeyboardFocusChangedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardInputProviderAcquireFocusEventArgsClass = interface(DNKeyboardEventArgsClass)
  ['{B933E817-0FC8-5728-9EF3-1E880AF15DD0}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; timestamp: Int32; focusAcquired: Boolean): DNKeyboardInputProviderAcquireFocusEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs')]
  DNKeyboardInputProviderAcquireFocusEventArgs = interface(DNKeyboardEventArgs)
  ['{6FAB911E-C0A3-36C5-B77D-544CE919835B}']
  { getters & setters } 

    function get_FocusAcquired: Boolean;
    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FocusAcquired: Boolean read get_FocusAcquired;
    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyboardInputProviderAcquireFocusEventArgs = class(TDNGenericImport<DNKeyboardInputProviderAcquireFocusEventArgsClass, DNKeyboardInputProviderAcquireFocusEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyEventArgsClass = interface(DNKeyboardEventArgsClass)
  ['{D099FF1B-8F93-58FA-A048-93D02E4C08AB}']
  { constructors } 

    {class} function init(keyboard: DNKeyboardDevice; inputSource: DNPresentationSource; timestamp: Int32; key: DDN.System.Windows.Common.DNKey): DNKeyEventArgs;

  end;

  [DNTypeName('System.Windows.Input.KeyEventArgs')]
  DNKeyEventArgs = interface(DNKeyboardEventArgs)
  ['{C9FE1AAA-AAAD-379C-AFC3-120B9C05C72E}']
  { getters & setters } 

    function get_InputSource: DNPresentationSource;
    function get_Key: DDN.System.Windows.Common.DNKey;
    function get_ImeProcessedKey: DDN.System.Windows.Common.DNKey;
    function get_SystemKey: DDN.System.Windows.Common.DNKey;
    function get_DeadCharProcessedKey: DDN.System.Windows.Common.DNKey;
    function get_KeyStates: DNKeyStates;
    function get_IsRepeat: Boolean;
    function get_IsDown: Boolean;
    function get_IsUp: Boolean;
    function get_IsToggled: Boolean;
    function get_KeyboardDevice: DNKeyboardDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputSource: DNPresentationSource read get_InputSource;
    property Key: DDN.System.Windows.Common.DNKey read get_Key;
    property ImeProcessedKey: DDN.System.Windows.Common.DNKey read get_ImeProcessedKey;
    property SystemKey: DDN.System.Windows.Common.DNKey read get_SystemKey;
    property DeadCharProcessedKey: DDN.System.Windows.Common.DNKey read get_DeadCharProcessedKey;
    property KeyStates: DNKeyStates read get_KeyStates;
    property IsRepeat: Boolean read get_IsRepeat;
    property IsDown: Boolean read get_IsDown;
    property IsUp: Boolean read get_IsUp;
    property IsToggled: Boolean read get_IsToggled;
    property KeyboardDevice: DNKeyboardDevice read get_KeyboardDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNKeyEventArgs = class(TDNGenericImport<DNKeyEventArgsClass, DNKeyEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationBoundaryFeedbackEventArgsClass = interface(DNInputEventArgsClass)
  ['{87BA4C0E-9893-5C7E-B958-2657A0F9CFA6}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationBoundaryFeedbackEventArgs')]
  DNManipulationBoundaryFeedbackEventArgs = interface(DNInputEventArgs)
  ['{E0C22554-EDEF-3086-A4EE-BBEB549A29F8}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_BoundaryFeedback: DNManipulationDelta;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property BoundaryFeedback: DNManipulationDelta read get_BoundaryFeedback;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationBoundaryFeedbackEventArgs = class(TDNGenericImport<DNManipulationBoundaryFeedbackEventArgsClass, DNManipulationBoundaryFeedbackEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationCompletedEventArgsClass = interface(DNInputEventArgsClass)
  ['{96B1F48B-2E1D-57AF-8EA7-D12FC34414F9}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationCompletedEventArgs')]
  DNManipulationCompletedEventArgs = interface(DNInputEventArgs)
  ['{4984B7FC-3D5C-39F1-B95B-D50A88CB5BB6}']
  { getters & setters } 

    function get_IsInertial: Boolean;
    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DDN.System.Windows.Common.DNPoint;
    function get_TotalManipulation: DNManipulationDelta;
    function get_FinalVelocities: DNManipulationVelocities;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInertial: Boolean read get_IsInertial;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DDN.System.Windows.Common.DNPoint read get_ManipulationOrigin;
    property TotalManipulation: DNManipulationDelta read get_TotalManipulation;
    property FinalVelocities: DNManipulationVelocities read get_FinalVelocities;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationCompletedEventArgs = class(TDNGenericImport<DNManipulationCompletedEventArgsClass, DNManipulationCompletedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationDeltaEventArgsClass = interface(DNInputEventArgsClass)
  ['{C3020CF9-3E0A-5A45-ACDE-39306996D75F}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationDeltaEventArgs')]
  DNManipulationDeltaEventArgs = interface(DNInputEventArgs)
  ['{54228E20-AA83-3104-9BA9-8DB5F54FDA0C}']
  { getters & setters } 

    function get_IsInertial: Boolean;
    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DDN.System.Windows.Common.DNPoint;
    function get_CumulativeManipulation: DNManipulationDelta;
    function get_DeltaManipulation: DNManipulationDelta;
    function get_Velocities: DNManipulationVelocities;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure ReportBoundaryFeedback(unusedManipulation: DNManipulationDelta);
    procedure Complete;
    procedure StartInertia;
    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInertial: Boolean read get_IsInertial;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DDN.System.Windows.Common.DNPoint read get_ManipulationOrigin;
    property CumulativeManipulation: DNManipulationDelta read get_CumulativeManipulation;
    property DeltaManipulation: DNManipulationDelta read get_DeltaManipulation;
    property Velocities: DNManipulationVelocities read get_Velocities;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationDeltaEventArgs = class(TDNGenericImport<DNManipulationDeltaEventArgsClass, DNManipulationDeltaEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationInertiaStartingEventArgsClass = interface(DNInputEventArgsClass)
  ['{3E6A740B-2BEE-57B4-B19C-E54A59154FDE}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationInertiaStartingEventArgs')]
  DNManipulationInertiaStartingEventArgs = interface(DNInputEventArgs)
  ['{75C7CD94-C786-3D48-875B-253772B87E37}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DDN.System.Windows.Common.DNPoint;
    procedure set_ManipulationOrigin(value: DDN.System.Windows.Common.DNPoint);
    function get_InitialVelocities: DNManipulationVelocities;
    function get_TranslationBehavior: DNInertiaTranslationBehavior;
    procedure set_TranslationBehavior(value: DNInertiaTranslationBehavior);
    function get_RotationBehavior: DNInertiaRotationBehavior;
    procedure set_RotationBehavior(value: DNInertiaRotationBehavior);
    function get_ExpansionBehavior: DNInertiaExpansionBehavior;
    procedure set_ExpansionBehavior(value: DNInertiaExpansionBehavior);
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    procedure SetInertiaParameter(parameter: DDN.System.Windows.Common.DNInertiaParameters2D);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DDN.System.Windows.Common.DNPoint read get_ManipulationOrigin write set_ManipulationOrigin;
    property InitialVelocities: DNManipulationVelocities read get_InitialVelocities;
    property TranslationBehavior: DNInertiaTranslationBehavior read get_TranslationBehavior write set_TranslationBehavior;
    property RotationBehavior: DNInertiaRotationBehavior read get_RotationBehavior write set_RotationBehavior;
    property ExpansionBehavior: DNInertiaExpansionBehavior read get_ExpansionBehavior write set_ExpansionBehavior;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationInertiaStartingEventArgs = class(TDNGenericImport<DNManipulationInertiaStartingEventArgsClass, DNManipulationInertiaStartingEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationStartedEventArgsClass = interface(DNInputEventArgsClass)
  ['{222A13A1-76DA-5D6F-9291-417488BCD705}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationStartedEventArgs')]
  DNManipulationStartedEventArgs = interface(DNInputEventArgs)
  ['{91791897-0B98-38DE-9F37-8D52B72D5533}']
  { getters & setters } 

    function get_ManipulationContainer: DNIInputElement;
    function get_ManipulationOrigin: DDN.System.Windows.Common.DNPoint;
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    procedure Complete;
    function Cancel: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ManipulationContainer: DNIInputElement read get_ManipulationContainer;
    property ManipulationOrigin: DDN.System.Windows.Common.DNPoint read get_ManipulationOrigin;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationStartedEventArgs = class(TDNGenericImport<DNManipulationStartedEventArgsClass, DNManipulationStartedEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationStartingEventArgsClass = interface(DNInputEventArgsClass)
  ['{805674D0-425A-50B1-B491-0416772118CC}']
  end;

  [DNTypeName('System.Windows.Input.ManipulationStartingEventArgs')]
  DNManipulationStartingEventArgs = interface(DNInputEventArgs)
  ['{4770345D-0FE6-3C92-9A42-44A29B2454DE}']
  { getters & setters } 

    function get_Mode: DNManipulationModes;
    procedure set_Mode(value: DNManipulationModes);
    function get_ManipulationContainer: DNIInputElement;
    procedure set_ManipulationContainer(value: DNIInputElement);
    function get_Pivot: DNManipulationPivot;
    procedure set_Pivot(value: DNManipulationPivot);
    function get_IsSingleTouchEnabled: Boolean;
    procedure set_IsSingleTouchEnabled(value: Boolean);
    function get_Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator>;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Cancel: Boolean;
    procedure SetManipulationParameter(parameter: DDN.System.Windows.Common.DNManipulationParameters2D);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNManipulationModes read get_Mode write set_Mode;
    property ManipulationContainer: DNIInputElement read get_ManipulationContainer write set_ManipulationContainer;
    property Pivot: DNManipulationPivot read get_Pivot write set_Pivot;
    property IsSingleTouchEnabled: Boolean read get_IsSingleTouchEnabled write set_IsSingleTouchEnabled;
    property Manipulators: DDN.mscorlib.DNIEnumerable<DNIManipulator> read get_Manipulators;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNManipulationStartingEventArgs = class(TDNGenericImport<DNManipulationStartingEventArgsClass, DNManipulationStartingEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseEventArgsClass = interface(DNInputEventArgsClass)
  ['{828F9CD4-8AA9-5ED1-B488-828E7E68E958}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32): DNMouseEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; stylusDevice: DNStylusDevice): DNMouseEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.MouseEventArgs')]
  DNMouseEventArgs = interface(DNInputEventArgs)
  ['{D70FFB4A-1E5E-3C33-9622-708781F2FA3D}']
  { getters & setters } 

    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseEventArgs = class(TDNGenericImport<DNMouseEventArgsClass, DNMouseEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseButtonEventArgsClass = interface(DNMouseEventArgsClass)
  ['{2E1857B4-0A05-565D-B996-4C1AC31D03BF}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32; button: DNMouseButton): DNMouseButtonEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; button: DNMouseButton; stylusDevice: DNStylusDevice): DNMouseButtonEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.MouseButtonEventArgs')]
  DNMouseButtonEventArgs = interface(DNMouseEventArgs)
  ['{869C09E3-4568-313E-82B7-3B3307D8D6F8}']
  { getters & setters } 

    function get_ChangedButton: DNMouseButton;
    function get_ButtonState: DNMouseButtonState;
    function get_ClickCount: Int32;
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChangedButton: DNMouseButton read get_ChangedButton;
    property ButtonState: DNMouseButtonState read get_ButtonState;
    property ClickCount: Int32 read get_ClickCount;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseButtonEventArgs = class(TDNGenericImport<DNMouseButtonEventArgsClass, DNMouseButtonEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseWheelEventArgsClass = interface(DNMouseEventArgsClass)
  ['{DEC535A5-D48A-5210-BC6E-9DA5AFE93764}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32; delta: Int32): DNMouseWheelEventArgs;

  end;

  [DNTypeName('System.Windows.Input.MouseWheelEventArgs')]
  DNMouseWheelEventArgs = interface(DNMouseEventArgs)
  ['{C967BEEF-7702-3537-87BB-582E5862C9D1}']
  { getters & setters } 

    function get_Delta: Int32;
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Delta: Int32 read get_Delta;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNMouseWheelEventArgs = class(TDNGenericImport<DNMouseWheelEventArgsClass, DNMouseWheelEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNQueryCursorEventArgsClass = interface(DNMouseEventArgsClass)
  ['{008C3AE0-BC64-51F6-8017-5FFF959342F3}']
  { constructors } 

    {class} function init(mouse: DNMouseDevice; timestamp: Int32): DNQueryCursorEventArgs; overload;
    {class} function init(mouse: DNMouseDevice; timestamp: Int32; stylusDevice: DNStylusDevice): DNQueryCursorEventArgs; overload;

  end;

  [DNTypeName('System.Windows.Input.QueryCursorEventArgs')]
  DNQueryCursorEventArgs = interface(DNMouseEventArgs)
  ['{6FDE6F96-4440-3CF0-B4B2-DEE2C7CC7E46}']
  { getters & setters } 

    function get_Cursor: DNCursor;
    procedure set_Cursor(value: DNCursor);
    function get_MouseDevice: DNMouseDevice;
    function get_StylusDevice: DNStylusDevice;
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cursor: DNCursor read get_Cursor write set_Cursor;
    property MouseDevice: DNMouseDevice read get_MouseDevice;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNQueryCursorEventArgs = class(TDNGenericImport<DNQueryCursorEventArgsClass, DNQueryCursorEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusEventArgsClass = interface(DNInputEventArgsClass)
  ['{949E0CF6-9E85-5642-9FF6-C378C72F6D9D}']
  { constructors } 

    {class} function init(stylus: DNStylusDevice; timestamp: Int32): DNStylusEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusEventArgs')]
  DNStylusEventArgs = interface(DNInputEventArgs)
  ['{40490D28-8A1D-3223-B8C5-CC8769348C52}']
  { getters & setters } 

    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusEventArgs = class(TDNGenericImport<DNStylusEventArgsClass, DNStylusEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonEventArgsClass = interface(DNStylusEventArgsClass)
  ['{7EF48912-06D1-5058-A51F-0EA3A4BB6393}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32; button: DNStylusButton): DNStylusButtonEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusButtonEventArgs')]
  DNStylusButtonEventArgs = interface(DNStylusEventArgs)
  ['{46095FC5-3ABF-32A3-A67C-985D72E57B00}']
  { getters & setters } 

    function get_StylusButton: DNStylusButton;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StylusButton: DNStylusButton read get_StylusButton;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusButtonEventArgs = class(TDNGenericImport<DNStylusButtonEventArgsClass, DNStylusButtonEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusDownEventArgsClass = interface(DNStylusEventArgsClass)
  ['{F09D61A3-1B31-56A1-9DC0-B57F28D3042D}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32): DNStylusDownEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusDownEventArgs')]
  DNStylusDownEventArgs = interface(DNStylusEventArgs)
  ['{FC5E4B0D-3254-32DE-8648-AC54771B5E0E}']
  { getters & setters } 

    function get_TapCount: Int32;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TapCount: Int32 read get_TapCount;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusDownEventArgs = class(TDNGenericImport<DNStylusDownEventArgsClass, DNStylusDownEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusSystemGestureEventArgsClass = interface(DNStylusEventArgsClass)
  ['{BFC839A1-CD40-5520-9E3C-A17ACE8B3CB2}']
  { constructors } 

    {class} function init(stylusDevice: DNStylusDevice; timestamp: Int32; systemGesture: DNSystemGesture): DNStylusSystemGestureEventArgs;

  end;

  [DNTypeName('System.Windows.Input.StylusSystemGestureEventArgs')]
  DNStylusSystemGestureEventArgs = interface(DNStylusEventArgs)
  ['{C57AD047-137E-3392-AEDA-B2DB05019DC8}']
  { getters & setters } 

    function get_SystemGesture: DNSystemGesture;
    function get_StylusDevice: DNStylusDevice;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SystemGesture: DNSystemGesture read get_SystemGesture;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNStylusSystemGestureEventArgs = class(TDNGenericImport<DNStylusSystemGestureEventArgsClass, DNStylusSystemGestureEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTextCompositionEventArgsClass = interface(DNInputEventArgsClass)
  ['{55099432-D966-511E-9A91-253425496437}']
  { constructors } 

    {class} function init(inputDevice: DNInputDevice; composition: DNTextComposition): DNTextCompositionEventArgs;

  end;

  [DNTypeName('System.Windows.Input.TextCompositionEventArgs')]
  DNTextCompositionEventArgs = interface(DNInputEventArgs)
  ['{9EFC1D41-4C1C-3FD1-9FE5-0B3F762F8A45}']
  { getters & setters } 

    function get_TextComposition: DNTextComposition;
    function get_Text: string;
    function get_SystemText: string;
    function get_ControlText: string;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextComposition: DNTextComposition read get_TextComposition;
    property Text: string read get_Text;
    property SystemText: string read get_SystemText;
    property ControlText: string read get_ControlText;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNTextCompositionEventArgs = class(TDNGenericImport<DNTextCompositionEventArgsClass, DNTextCompositionEventArgs>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchEventArgsClass = interface(DNInputEventArgsClass)
  ['{35EF0F8F-07E1-5D2A-AA5A-DF0A2C207E6B}']
  { constructors } 

    {class} function init(touchDevice: DNTouchDevice; timestamp: Int32): DNTouchEventArgs;

  end;

  [DNTypeName('System.Windows.Input.TouchEventArgs')]
  DNTouchEventArgs = interface(DNInputEventArgs)
  ['{7CF2FE81-D18A-313C-BB67-39DE6291BC12}']
  { getters & setters } 

    function get_TouchDevice: DNTouchDevice;
    function get_Device: DNInputDevice;
    function get_Timestamp: Int32;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function GetTouchPoint(relativeTo: DNIInputElement): DNTouchPoint;
    function GetIntermediateTouchPoints(relativeTo: DNIInputElement): DNTouchPointCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TouchDevice: DNTouchDevice read get_TouchDevice;
    property Device: DNInputDevice read get_Device;
    property Timestamp: Int32 read get_Timestamp;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNTouchEventArgs = class(TDNGenericImport<DNTouchEventArgsClass, DNTouchEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNQueryContinueDragEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{619D9571-BDE2-5EBA-B44F-479F2A4C0B9C}']
  end;

  [DNTypeName('System.Windows.QueryContinueDragEventArgs')]
  DNQueryContinueDragEventArgs = interface(DNRoutedEventArgs)
  ['{96DBFEC3-71A7-3959-A8D3-5AEE692D853C}']
  { getters & setters } 

    function get_EscapePressed: Boolean;
    function get_KeyStates: DNDragDropKeyStates;
    function get_Action: DNDragAction;
    procedure set_Action(value: DNDragAction);
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EscapePressed: Boolean read get_EscapePressed;
    property KeyStates: DNDragDropKeyStates read get_KeyStates;
    property Action: DNDragAction read get_Action write set_Action;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNQueryContinueDragEventArgs = class(TDNGenericImport<DNQueryContinueDragEventArgsClass, DNQueryContinueDragEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNSourceChangedEventArgsClass = interface(DNRoutedEventArgsClass)
  ['{74B71F5E-0DBB-51C0-814A-E5B3C7C94E60}']
  { constructors } 

    {class} function init(oldSource: DNPresentationSource; newSource: DNPresentationSource): DNSourceChangedEventArgs; overload;
    {class} function init(oldSource: DNPresentationSource; newSource: DNPresentationSource; element: DNIInputElement; oldParent: DNIInputElement): DNSourceChangedEventArgs; overload;

  end;

  [DNTypeName('System.Windows.SourceChangedEventArgs')]
  DNSourceChangedEventArgs = interface(DNRoutedEventArgs)
  ['{228B1948-780E-3892-969E-FACBE5EADD90}']
  { getters & setters } 

    function get_OldSource: DNPresentationSource;
    function get_NewSource: DNPresentationSource;
    function get_Element: DNIInputElement;
    function get_OldParent: DNIInputElement;
    function get_RoutedEvent: DNRoutedEvent;
    procedure set_RoutedEvent(value: DNRoutedEvent);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Source: DDN.mscorlib.DNObject;
    procedure set_Source(value: DDN.mscorlib.DNObject);
    function get_OriginalSource: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldSource: DNPresentationSource read get_OldSource;
    property NewSource: DNPresentationSource read get_NewSource;
    property Element: DNIInputElement read get_Element;
    property OldParent: DNIInputElement read get_OldParent;
    property RoutedEvent: DNRoutedEvent read get_RoutedEvent write set_RoutedEvent;
    property Handled: Boolean read get_Handled write set_Handled;
    property Source: DDN.mscorlib.DNObject read get_Source write set_Source;
    property OriginalSource: DDN.mscorlib.DNObject read get_OriginalSource;
  end;

  TDNSourceChangedEventArgs = class(TDNGenericImport<DNSourceChangedEventArgsClass, DNSourceChangedEventArgs>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{836D4337-A5F6-547E-BF20-67FEB44048CC}']
  end;

  [DNTypeName('System.Windows.Media.Animation.AnimationException')]
  DNAnimationException = interface(DDN.mscorlib.DNSystemException)
  ['{76BE0FB7-40E8-3551-962C-C13F2C125D54}']
  { getters & setters } 

    function get_Clock: DNAnimationClock;
    function get_Property: DDN.System.Windows.Common.DNDependencyProperty;
    function get_Target: DNIAnimatable;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Clock: DNAnimationClock read get_Clock;
    property &Property: DDN.System.Windows.Common.DNDependencyProperty read get_Property;
    property Target: DNIAnimatable read get_Target;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAnimationException = class(TDNGenericImport<DNAnimationExceptionClass, DNAnimationException>) end;

  //-------------namespace: System.Windows.Media----------------
  DNInvalidWmpVersionExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{B909A7FF-BEF4-56CC-BD6C-CD9386A14EE4}']
  { constructors } 

    {class} function init: DNInvalidWmpVersionException; overload;
    {class} function init(message: string): DNInvalidWmpVersionException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidWmpVersionException; overload;

  end;

  [DNTypeName('System.Windows.Media.InvalidWmpVersionException')]
  DNInvalidWmpVersionException = interface(DDN.mscorlib.DNSystemException)
  ['{3A15F9D4-F803-378A-8FC5-AA3C03EC7750}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidWmpVersionException = class(TDNGenericImport<DNInvalidWmpVersionExceptionClass, DNInvalidWmpVersionException>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageStoreClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2280310F-A66E-5225-A8CC-9B10A5D0D2C1}']
  { static methods } 

    {class} function GetPackage(uri: DDN.System.Windows.Common.DNUri): DDN.System.Windows.Common.DNPackage;
    {class} procedure RemovePackage(uri: DDN.System.Windows.Common.DNUri);
    {class} procedure AddPackage(uri: DDN.System.Windows.Common.DNUri; &package: DDN.System.Windows.Common.DNPackage);

  end;

  [DNTypeName('System.IO.Packaging.PackageStore')]
  DNPackageStore = interface(DDN.mscorlib.DNObject)
  ['{3CB24AD9-8EB4-38E4-8B1E-9ADF502FDFB3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackageStore = class(TDNGenericImport<DNPackageStoreClass, DNPackageStore>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackWebRequestFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ABE0282A-D844-5A87-AB39-D980F568EC6E}']
  { constructors } 

    {class} function init: DNPackWebRequestFactory;

  end;

  [DNTypeName('System.IO.Packaging.PackWebRequestFactory')]
  DNPackWebRequestFactory = interface(DDN.mscorlib.DNObject)
  ['{E28A552E-A847-3A64-8324-B8C0FFF55F8D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackWebRequestFactory = class(TDNGenericImport<DNPackWebRequestFactoryClass, DNPackWebRequestFactory>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackWebRequestClass = interface(DDN.System.Windows.Common.DNWebRequestClass)
  ['{40D7C55C-97D1-56C9-896D-B048FBB641D1}']
  end;

  [DNTypeName('System.IO.Packaging.PackWebRequest')]
  DNPackWebRequest = interface(DDN.System.Windows.Common.DNWebRequest)
  ['{A944C784-F81F-370D-A94C-A04DA6F3E987}']
  { getters & setters } 

    function get_CachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy;
    procedure set_CachePolicy(value: DDN.System.Windows.Common.DNRequestCachePolicy);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Credentials: DDN.System.Windows.Common.DNICredentials;
    procedure set_Credentials(value: DDN.System.Windows.Common.DNICredentials);
    function get_Headers: DDN.System.Windows.Common.DNWebHeaderCollection;
    procedure set_Headers(value: DDN.System.Windows.Common.DNWebHeaderCollection);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Proxy: DDN.System.Windows.Common.DNIWebProxy;
    procedure set_Proxy(value: DDN.System.Windows.Common.DNIWebProxy);
    function get_RequestUri: DDN.System.Windows.Common.DNUri;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_CreatorInstance: DDN.System.Windows.Common.DNIWebRequestCreate;
    function get_AuthenticationLevel: DDN.System.Windows.Common.DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DDN.System.Windows.Common.DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function GetRequestStream: DDN.mscorlib.DNStream;
    function GetResponse: DDN.System.Windows.Common.DNWebResponse;
    function GetInnerRequest: DDN.System.Windows.Common.DNWebRequest;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.System.Windows.Common.DNWebResponse;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream;
    procedure &Abort;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Credentials: DDN.System.Windows.Common.DNICredentials read get_Credentials write set_Credentials;
    property Headers: DDN.System.Windows.Common.DNWebHeaderCollection read get_Headers write set_Headers;
    property Method: string read get_Method write set_Method;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Proxy: DDN.System.Windows.Common.DNIWebProxy read get_Proxy write set_Proxy;
    property RequestUri: DDN.System.Windows.Common.DNUri read get_RequestUri;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property CreatorInstance: DDN.System.Windows.Common.DNIWebRequestCreate read get_CreatorInstance;
    property AuthenticationLevel: DDN.System.Windows.Common.DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNPackWebRequest = class(TDNGenericImport<DNPackWebRequestClass, DNPackWebRequest>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackWebResponseClass = interface(DDN.System.Windows.Common.DNWebResponseClass)
  ['{39666872-C956-5BAE-857E-0720C82C287D}']
  end;

  [DNTypeName('System.IO.Packaging.PackWebResponse')]
  DNPackWebResponse = interface(DDN.System.Windows.Common.DNWebResponse)
  ['{847671DB-9688-359A-B88C-F20C44F3E360}']
  { getters & setters } 

    function get_InnerResponse: DDN.System.Windows.Common.DNWebResponse;
    function get_Headers: DDN.System.Windows.Common.DNWebHeaderCollection;
    function get_ResponseUri: DDN.System.Windows.Common.DNUri;
    function get_IsFromCache: Boolean;
    function get_ContentType: string;
    function get_ContentLength: Int64;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_SupportsHeaders: Boolean;

  { methods } 

    function GetResponseStream: DDN.mscorlib.DNStream;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InnerResponse: DDN.System.Windows.Common.DNWebResponse read get_InnerResponse;
    property Headers: DDN.System.Windows.Common.DNWebHeaderCollection read get_Headers;
    property ResponseUri: DDN.System.Windows.Common.DNUri read get_ResponseUri;
    property IsFromCache: Boolean read get_IsFromCache;
    property ContentType: string read get_ContentType;
    property ContentLength: Int64 read get_ContentLength;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
  end;

  TDNPackWebResponse = class(TDNGenericImport<DNPackWebResponseClass, DNPackWebResponse>) end;

  //-------------namespace: System.Windows----------------
  DNDpiScaleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{5F9B153D-C467-5E72-8967-96EB0226D81C}']
  { constructors } 

    {class} function init(dpiScaleX: Double; dpiScaleY: Double): DNDpiScale;

  end;

  [DNTypeName('System.Windows.DpiScale')]
  DNDpiScale = interface(DDN.mscorlib.DNValueType)
  ['{953960E0-9952-37C1-A917-D8F997ECF34B}']
  { getters & setters } 

    function get_DpiScaleX: Double;
    function get_DpiScaleY: Double;
    function get_PixelsPerDip: Double;
    function get_PixelsPerInchX: Double;
    function get_PixelsPerInchY: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DpiScaleX: Double read get_DpiScaleX;
    property DpiScaleY: Double read get_DpiScaleY;
    property PixelsPerDip: Double read get_PixelsPerDip;
    property PixelsPerInchX: Double read get_PixelsPerInchX;
    property PixelsPerInchY: Double read get_PixelsPerInchY;
  end;

  TDNDpiScale = class(TDNGenericImport<DNDpiScaleClass, DNDpiScale>) end;

  //-------------namespace: System.Windows----------------
  DNDurationClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0FDCBFB2-C8B1-5441-B98D-3EC7AC3BE4A5}']
  { static getter & setter } 

    {class} function get_Automatic: DNDuration;
    {class} function get_Forever: DNDuration;

  { constructors } 

    {class} function init(timeSpan: DDN.mscorlib.DNTimeSpan): DNDuration;

  { static methods } 

    {class} function Compare(t1: DNDuration; t2: DNDuration): Int32;
    {class} function Plus(duration: DNDuration): DNDuration;
    {class} function Equals(t1: DNDuration; t2: DNDuration): Boolean; overload;

  { static propertys } 

    {class} property Automatic: DNDuration read get_Automatic;
    {class} property Forever: DNDuration read get_Forever;
  end;

  [DNTypeName('System.Windows.Duration')]
  DNDuration = interface(DDN.mscorlib.DNValueType)
  ['{97DFFF52-0165-38BC-9DD0-D5586AFF8D09}']
  { getters & setters } 

    function get_HasTimeSpan: Boolean;
    function get_TimeSpan: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Add(duration: DNDuration): DNDuration;
    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(duration: DNDuration): Boolean; overload;
    function GetHashCode: Int32;
    function Subtract(duration: DNDuration): DNDuration;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasTimeSpan: Boolean read get_HasTimeSpan;
    property TimeSpan: DDN.mscorlib.DNTimeSpan read get_TimeSpan;
  end;

  TDNDuration = class(TDNGenericImport<DNDurationClass, DNDuration>) end;

  //-------------namespace: System.Windows----------------
  DNFontStretchClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0C9F2C49-44A2-5762-8784-612AB238B811}']
  { static methods } 

    {class} function Compare(left: DNFontStretch; right: DNFontStretch): Int32;
    {class} function FromOpenTypeStretch(stretchValue: Int32): DNFontStretch;

  end;

  [DNTypeName('System.Windows.FontStretch')]
  DNFontStretch = interface(DDN.mscorlib.DNValueType)
  ['{119BB629-5180-3A6B-BE89-24C5A27C8A75}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function ToOpenTypeStretch: Int32;
    function Equals(obj: DNFontStretch): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontStretch = class(TDNGenericImport<DNFontStretchClass, DNFontStretch>) end;

  //-------------namespace: System.Windows----------------
  DNFontStyleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0D64E6CC-3978-50FE-A191-FB9A9297CD82}']
  end;

  [DNTypeName('System.Windows.FontStyle')]
  DNFontStyle = interface(DDN.mscorlib.DNValueType)
  ['{6AAAC45A-6DA8-36E1-BFAC-E4C44E27CDCF}']
  { methods } 

    function Equals(obj: DNFontStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontStyle = class(TDNGenericImport<DNFontStyleClass, DNFontStyle>) end;

  //-------------namespace: System.Windows----------------
  DNFontWeightClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{9DF76BAC-F3D6-5ED0-9146-355377F7343F}']
  { static methods } 

    {class} function Compare(left: DNFontWeight; right: DNFontWeight): Int32;
    {class} function FromOpenTypeWeight(weightValue: Int32): DNFontWeight;

  end;

  [DNTypeName('System.Windows.FontWeight')]
  DNFontWeight = interface(DDN.mscorlib.DNValueType)
  ['{3534E6D8-9DAB-34C8-AA24-3B3DCE783A33}']
  { methods } 

    function ToOpenTypeWeight: Int32;
    function Equals(obj: DNFontWeight): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFontWeight = class(TDNGenericImport<DNFontWeightClass, DNFontWeight>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B642AE88-C9A8-57E4-B2E0-A860E225172C}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNStylusPoint; overload;
    {class} function init(x: Double; y: Double; pressureFactor: Single): DNStylusPoint; overload;
    {class} function init(x: Double; y: Double; pressureFactor: Single; stylusPointDescription: DNStylusPointDescription; additionalValues: TArray<Int32>): DNStylusPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxXY: Double;
   function __fakeFieldGet_MinXY: Double;

  { static fields } 

    {class} property MaxXY: Double read __fakeFieldGet_MaxXY;
    {class} property MinXY: Double read __fakeFieldGet_MinXY;

  { static methods } 

    {class} function Equals(stylusPoint1: DNStylusPoint; stylusPoint2: DNStylusPoint): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPoint')]
  DNStylusPoint = interface(DDN.mscorlib.DNValueType)
  ['{144C5DF5-5A7A-380E-8F01-885D2A6E691F}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_PressureFactor: Single;
    procedure set_PressureFactor(value: Single);
    function get_Description: DNStylusPointDescription;

  { methods } 

    function HasProperty(stylusPointProperty: DNStylusPointProperty): Boolean;
    function GetPropertyValue(stylusPointProperty: DNStylusPointProperty): Int32;
    procedure SetPropertyValue(stylusPointProperty: DNStylusPointProperty; value: Int32);
    function ToPoint: DDN.System.Windows.Common.DNPoint;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNStylusPoint): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property PressureFactor: Single read get_PressureFactor write set_PressureFactor;
    property Description: DNStylusPointDescription read get_Description;
  end;

  TDNStylusPoint = class(TDNGenericImport<DNStylusPointClass, DNStylusPoint>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNHwndSourceParametersClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F1EA3334-C739-5CE5-AC63-DAE3A0D9F920}']
  { constructors } 

    {class} function init(name: string): DNHwndSourceParameters; overload;
    {class} function init(name: string; width: Int32; height: Int32): DNHwndSourceParameters; overload;

  end;

  [DNTypeName('System.Windows.Interop.HwndSourceParameters')]
  DNHwndSourceParameters = interface(DDN.mscorlib.DNValueType)
  ['{025CE2CB-584F-395A-B2E3-A69C35020310}']
  { getters & setters } 

    function get_WindowClassStyle: Int32;
    procedure set_WindowClassStyle(value: Int32);
    function get_WindowStyle: Int32;
    procedure set_WindowStyle(value: Int32);
    function get_ExtendedWindowStyle: Int32;
    procedure set_ExtendedWindowStyle(value: Int32);
    function get_PositionX: Int32;
    procedure set_PositionX(value: Int32);
    function get_PositionY: Int32;
    procedure set_PositionY(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HasAssignedSize: Boolean;
    function get_WindowName: string;
    procedure set_WindowName(value: string);
    function get_ParentWindow: IntPtr;
    procedure set_ParentWindow(value: IntPtr);
    function get_HwndSourceHook: DNHwndSourceHook;
    procedure set_HwndSourceHook(value: DNHwndSourceHook);
    function get_AdjustSizingForNonClientArea: Boolean;
    procedure set_AdjustSizingForNonClientArea(value: Boolean);
    function get_TreatAncestorsAsNonClientArea: Boolean;
    procedure set_TreatAncestorsAsNonClientArea(value: Boolean);
    function get_UsesPerPixelOpacity: Boolean;
    procedure set_UsesPerPixelOpacity(value: Boolean);
    function get_UsesPerPixelTransparency: Boolean;
    procedure set_UsesPerPixelTransparency(value: Boolean);
    function get_RestoreFocusMode: DNRestoreFocusMode;
    procedure set_RestoreFocusMode(value: DNRestoreFocusMode);
    function get_AcquireHwndFocusInMenuMode: Boolean;
    procedure set_AcquireHwndFocusInMenuMode(value: Boolean);
    function get_TreatAsInputRoot: Boolean;
    procedure set_TreatAsInputRoot(value: Boolean);

  { methods } 

    function GetHashCode: Int32;
    procedure SetPosition(x: Int32; y: Int32);
    procedure SetSize(width: Int32; height: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(obj: DNHwndSourceParameters): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property WindowClassStyle: Int32 read get_WindowClassStyle write set_WindowClassStyle;
    property WindowStyle: Int32 read get_WindowStyle write set_WindowStyle;
    property ExtendedWindowStyle: Int32 read get_ExtendedWindowStyle write set_ExtendedWindowStyle;
    property PositionX: Int32 read get_PositionX write set_PositionX;
    property PositionY: Int32 read get_PositionY write set_PositionY;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property HasAssignedSize: Boolean read get_HasAssignedSize;
    property WindowName: string read get_WindowName write set_WindowName;
    property ParentWindow: IntPtr read get_ParentWindow write set_ParentWindow;
    property HwndSourceHook: DNHwndSourceHook read get_HwndSourceHook write set_HwndSourceHook;
    property AdjustSizingForNonClientArea: Boolean read get_AdjustSizingForNonClientArea write set_AdjustSizingForNonClientArea;
    property TreatAncestorsAsNonClientArea: Boolean read get_TreatAncestorsAsNonClientArea write set_TreatAncestorsAsNonClientArea;
    property UsesPerPixelOpacity: Boolean read get_UsesPerPixelOpacity write set_UsesPerPixelOpacity;
    property UsesPerPixelTransparency: Boolean read get_UsesPerPixelTransparency write set_UsesPerPixelTransparency;
    property RestoreFocusMode: DNRestoreFocusMode read get_RestoreFocusMode write set_RestoreFocusMode;
    property AcquireHwndFocusInMenuMode: Boolean read get_AcquireHwndFocusInMenuMode write set_AcquireHwndFocusInMenuMode;
    property TreatAsInputRoot: Boolean read get_TreatAsInputRoot write set_TreatAsInputRoot;
  end;

  TDNHwndSourceParameters = class(TDNGenericImport<DNHwndSourceParametersClass, DNHwndSourceParameters>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNKeyTimeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B38D1CA0-BCAA-59BB-A649-50DF6A96261E}']
  { static getter & setter } 

    {class} function get_Uniform: DNKeyTime;
    {class} function get_Paced: DNKeyTime;

  { static methods } 

    {class} function FromPercent(percent: Double): DNKeyTime;
    {class} function FromTimeSpan(timeSpan: DDN.mscorlib.DNTimeSpan): DNKeyTime;
    {class} function Equals(keyTime1: DNKeyTime; keyTime2: DNKeyTime): Boolean; overload;

  { static propertys } 

    {class} property Uniform: DNKeyTime read get_Uniform;
    {class} property Paced: DNKeyTime read get_Paced;
  end;

  [DNTypeName('System.Windows.Media.Animation.KeyTime')]
  DNKeyTime = interface(DDN.mscorlib.DNValueType)
  ['{A1CF8483-81F6-3F00-9EAD-02A5E3AC56F3}']
  { getters & setters } 

    function get_TimeSpan: DDN.mscorlib.DNTimeSpan;
    function get_Percent: Double;
    function get_Type: DNKeyTimeType;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNKeyTime): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property TimeSpan: DDN.mscorlib.DNTimeSpan read get_TimeSpan;
    property Percent: Double read get_Percent;
    property &Type: DNKeyTimeType read get_Type;
  end;

  TDNKeyTime = class(TDNGenericImport<DNKeyTimeClass, DNKeyTime>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRepeatBehaviorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{36BDC889-955B-5019-851C-719F437C83B6}']
  { static getter & setter } 

    {class} function get_Forever: DNRepeatBehavior;

  { constructors } 

    {class} function init(count: Double): DNRepeatBehavior; overload;
    {class} function init(duration: DDN.mscorlib.DNTimeSpan): DNRepeatBehavior; overload;

  { static methods } 

    {class} function Equals(repeatBehavior1: DNRepeatBehavior; repeatBehavior2: DNRepeatBehavior): Boolean; overload;

  { static propertys } 

    {class} property Forever: DNRepeatBehavior read get_Forever;
  end;

  [DNTypeName('System.Windows.Media.Animation.RepeatBehavior')]
  DNRepeatBehavior = interface(DDN.mscorlib.DNValueType)
  ['{6D6775D5-1881-3AFD-96E1-4D7FC321ED5E}']
  { getters & setters } 

    function get_HasCount: Boolean;
    function get_HasDuration: Boolean;
    function get_Count: Double;
    function get_Duration: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(repeatBehavior: DNRepeatBehavior): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasCount: Boolean read get_HasCount;
    property HasDuration: Boolean read get_HasDuration;
    property Count: Double read get_Count;
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration;
  end;

  TDNRepeatBehavior = class(TDNGenericImport<DNRepeatBehaviorClass, DNRepeatBehavior>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimation_TimelineCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{626F1EB3-5BDA-504C-8F76-2C962027F8E5}']
  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineCollection+Enumerator')]
  DNAnimation_TimelineCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{13989025-C08B-34A2-A686-511314EEBBB0}']
  { getters & setters } 

    function get_Current: DNTimeline;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTimeline read get_Current;
  end;

  TDNAnimation_TimelineCollection_Enumerator = class(TDNGenericImport<DNAnimation_TimelineCollection_EnumeratorClass, DNAnimation_TimelineCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNColorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{877BD298-BDB1-5026-9F91-19B7903E8523}']
  { static methods } 

    {class} function FromAValues(a: Single; values: TArray<Single>; profileUri: DDN.System.Windows.Common.DNUri): DNColor;
    {class} function FromValues(values: TArray<Single>; profileUri: DDN.System.Windows.Common.DNUri): DNColor;
    {class} function FromScRgb(a: Single; r: Single; g: Single; b: Single): DNColor;
    {class} function FromArgb(a: Byte; r: Byte; g: Byte; b: Byte): DNColor;
    {class} function FromRgb(r: Byte; g: Byte; b: Byte): DNColor;
    {class} function AreClose(color1: DNColor; color2: DNColor): Boolean;
    {class} function Add(color1: DNColor; color2: DNColor): DNColor;
    {class} function Subtract(color1: DNColor; color2: DNColor): DNColor;
    {class} function Multiply(color: DNColor; coefficient: Single): DNColor;
    {class} function Equals(color1: DNColor; color2: DNColor): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.Color')]
  DNColor = interface(DDN.mscorlib.DNValueType)
  ['{9A369504-B0E6-3F1C-9910-6E64D760BE87}']
  { getters & setters } 

    function get_ColorContext: DNColorContext;
    function get_A: Byte;
    procedure set_A(value: Byte);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_ScA: Single;
    procedure set_ScA(value: Single);
    function get_ScR: Single;
    procedure set_ScR(value: Single);
    function get_ScG: Single;
    procedure set_ScG(value: Single);
    function get_ScB: Single;
    procedure set_ScB(value: Single);

  { methods } 

    function GetHashCode: Int32;
    procedure Clamp;
    function Equals(color: DNColor): Boolean; overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetNativeColorValues: TArray<Single>;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ColorContext: DNColorContext read get_ColorContext;
    property A: Byte read get_A write set_A;
    property R: Byte read get_R write set_R;
    property G: Byte read get_G write set_G;
    property B: Byte read get_B write set_B;
    property ScA: Single read get_ScA write set_ScA;
    property ScR: Single read get_ScR write set_ScR;
    property ScG: Single read get_ScG write set_ScG;
    property ScB: Single read get_ScB write set_ScB;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_DoubleCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{27533E8F-87AF-5701-83D6-674552018EDB}']
  end;

  [DNTypeName('System.Windows.Media.DoubleCollection+Enumerator')]
  DNMedia_DoubleCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{50AACEB1-CC11-3DB9-868D-9EA17034F6DB}']
  { getters & setters } 

    function get_Current: Double;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: Double read get_Current;
  end;

  TDNMedia_DoubleCollection_Enumerator = class(TDNGenericImport<DNMedia_DoubleCollection_EnumeratorClass, DNMedia_DoubleCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_DrawingCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A5D5ADEA-77EF-5ABA-A847-9E9259E048A0}']
  end;

  [DNTypeName('System.Windows.Media.DrawingCollection+Enumerator')]
  DNMedia_DrawingCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{D751FD49-1D06-3898-A84C-DB4B8F18E9C7}']
  { getters & setters } 

    function get_Current: DNDrawing;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNDrawing read get_Current;
  end;

  TDNMedia_DrawingCollection_Enumerator = class(TDNGenericImport<DNMedia_DrawingCollection_EnumeratorClass, DNMedia_DrawingCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNEffects_BitmapEffectCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{54A07685-7A8C-5453-9BB0-9777CCFE8F71}']
  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffectCollection+Enumerator')]
  DNEffects_BitmapEffectCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{640CF93F-F6A0-3103-A634-6D112C32CC64}']
  { getters & setters } 

    function get_Current: DNBitmapEffect;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNBitmapEffect read get_Current;
  end;

  TDNEffects_BitmapEffectCollection_Enumerator = class(TDNGenericImport<DNEffects_BitmapEffectCollection_EnumeratorClass, DNEffects_BitmapEffectCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_GeneralTransformCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{E4ABCFFE-CE7C-55DA-8018-9D0F8A822F44}']
  end;

  [DNTypeName('System.Windows.Media.GeneralTransformCollection+Enumerator')]
  DNMedia_GeneralTransformCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{321B11E9-E9B1-351B-ACE5-883E7190C6FE}']
  { getters & setters } 

    function get_Current: DNGeneralTransform;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNGeneralTransform read get_Current;
  end;

  TDNMedia_GeneralTransformCollection_Enumerator = class(TDNGenericImport<DNMedia_GeneralTransformCollection_EnumeratorClass, DNMedia_GeneralTransformCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_GeometryCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A86D5224-9816-576F-B986-3BBBCEE04D9B}']
  end;

  [DNTypeName('System.Windows.Media.GeometryCollection+Enumerator')]
  DNMedia_GeometryCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{E17D7D8F-0967-3E05-A224-CB359B212196}']
  { getters & setters } 

    function get_Current: DNGeometry;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNGeometry read get_Current;
  end;

  TDNMedia_GeometryCollection_Enumerator = class(TDNGenericImport<DNMedia_GeometryCollection_EnumeratorClass, DNMedia_GeometryCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_GradientStopCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{25219624-AF4B-5E4A-B80E-3F142EEF2F0A}']
  end;

  [DNTypeName('System.Windows.Media.GradientStopCollection+Enumerator')]
  DNMedia_GradientStopCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{9B029FFF-07BD-3F36-847C-3F8F2B599624}']
  { getters & setters } 

    function get_Current: DNGradientStop;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNGradientStop read get_Current;
  end;

  TDNMedia_GradientStopCollection_Enumerator = class(TDNGenericImport<DNMedia_GradientStopCollection_EnumeratorClass, DNMedia_GradientStopCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_Int32Collection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{56322D78-C029-5F3A-82DB-A7EC881FB64E}']
  end;

  [DNTypeName('System.Windows.Media.Int32Collection+Enumerator')]
  DNMedia_Int32Collection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{C9864ED5-C0E4-39B8-892A-22D4D500C712}']
  { getters & setters } 

    function get_Current: Int32;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: Int32 read get_Current;
  end;

  TDNMedia_Int32Collection_Enumerator = class(TDNGenericImport<DNMedia_Int32Collection_EnumeratorClass, DNMedia_Int32Collection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_GeneralTransform3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{033D3699-751C-5550-9816-D0727D462D24}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3DCollection+Enumerator')]
  DNMedia3D_GeneralTransform3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{8AEE8536-EEB5-366E-BF0B-A06BF4FF5451}']
  { getters & setters } 

    function get_Current: DNGeneralTransform3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNGeneralTransform3D read get_Current;
  end;

  TDNMedia3D_GeneralTransform3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_GeneralTransform3DCollection_EnumeratorClass, DNMedia3D_GeneralTransform3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_MaterialCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3A81E6FE-369E-5FE9-B0F1-724FECBDBE73}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.MaterialCollection+Enumerator')]
  DNMedia3D_MaterialCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{B7B354A3-895E-3E93-8737-904DD79695C0}']
  { getters & setters } 

    function get_Current: DNMaterial;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNMaterial read get_Current;
  end;

  TDNMedia3D_MaterialCollection_Enumerator = class(TDNGenericImport<DNMedia3D_MaterialCollection_EnumeratorClass, DNMedia3D_MaterialCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMatrix3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{4BC21B1A-4609-5D8F-87C3-711FCA4F2781}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix3D;

  { constructors } 

    {class} function init(m11: Double; m12: Double; m13: Double; m14: Double; m21: Double; m22: Double; m23: Double; m24: Double; m31: Double; m32: Double; m33: Double; m34: Double; offsetX: Double; offsetY: Double; offsetZ: Double; m44: Double): DNMatrix3D;

  { static methods } 

    {class} function Multiply(matrix1: DNMatrix3D; matrix2: DNMatrix3D): DNMatrix3D;
    {class} function Equals(matrix1: DNMatrix3D; matrix2: DNMatrix3D): Boolean; overload;
    {class} function Parse(source: string): DNMatrix3D;

  { static propertys } 

    {class} property Identity: DNMatrix3D read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Matrix3D')]
  DNMatrix3D = interface(DDN.mscorlib.DNValueType)
  ['{F36B5BAE-0085-3EC6-83AA-DE341B8217E8}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_IsAffine: Boolean;
    function get_Determinant: Double;
    function get_HasInverse: Boolean;
    function get_M11: Double;
    procedure set_M11(value: Double);
    function get_M12: Double;
    procedure set_M12(value: Double);
    function get_M13: Double;
    procedure set_M13(value: Double);
    function get_M14: Double;
    procedure set_M14(value: Double);
    function get_M21: Double;
    procedure set_M21(value: Double);
    function get_M22: Double;
    procedure set_M22(value: Double);
    function get_M23: Double;
    procedure set_M23(value: Double);
    function get_M24: Double;
    procedure set_M24(value: Double);
    function get_M31: Double;
    procedure set_M31(value: Double);
    function get_M32: Double;
    procedure set_M32(value: Double);
    function get_M33: Double;
    procedure set_M33(value: Double);
    function get_M34: Double;
    procedure set_M34(value: Double);
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);
    function get_OffsetZ: Double;
    procedure set_OffsetZ(value: Double);
    function get_M44: Double;
    procedure set_M44(value: Double);

  { methods } 

    procedure SetIdentity;
    procedure Prepend(matrix: DNMatrix3D);
    procedure Append(matrix: DNMatrix3D);
    procedure Rotate(quaternion: DNQuaternion);
    procedure RotatePrepend(quaternion: DNQuaternion);
    procedure RotateAt(quaternion: DNQuaternion; center: DNPoint3D);
    procedure RotateAtPrepend(quaternion: DNQuaternion; center: DNPoint3D);
    procedure Scale(scale: DNVector3D);
    procedure ScalePrepend(scale: DNVector3D);
    procedure ScaleAt(scale: DNVector3D; center: DNPoint3D);
    procedure ScaleAtPrepend(scale: DNVector3D; center: DNPoint3D);
    procedure Translate(offset: DNVector3D);
    procedure TranslatePrepend(offset: DNVector3D);
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Invert;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNMatrix3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property IsAffine: Boolean read get_IsAffine;
    property Determinant: Double read get_Determinant;
    property HasInverse: Boolean read get_HasInverse;
    property M11: Double read get_M11 write set_M11;
    property M12: Double read get_M12 write set_M12;
    property M13: Double read get_M13 write set_M13;
    property M14: Double read get_M14 write set_M14;
    property M21: Double read get_M21 write set_M21;
    property M22: Double read get_M22 write set_M22;
    property M23: Double read get_M23 write set_M23;
    property M24: Double read get_M24 write set_M24;
    property M31: Double read get_M31 write set_M31;
    property M32: Double read get_M32 write set_M32;
    property M33: Double read get_M33 write set_M33;
    property M34: Double read get_M34 write set_M34;
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    property OffsetY: Double read get_OffsetY write set_OffsetY;
    property OffsetZ: Double read get_OffsetZ write set_OffsetZ;
    property M44: Double read get_M44 write set_M44;
  end;

  TDNMatrix3D = class(TDNGenericImport<DNMatrix3DClass, DNMatrix3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_Model3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{3B86FAF3-8E23-541F-818E-71C313354263}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Model3DCollection+Enumerator')]
  DNMedia3D_Model3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{CAE0D35D-3164-3B18-A649-91092293832A}']
  { getters & setters } 

    function get_Current: DNModel3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNModel3D read get_Current;
  end;

  TDNMedia3D_Model3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_Model3DCollection_EnumeratorClass, DNMedia3D_Model3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{AE78F3CC-BDE1-524F-888D-2751E7132818}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNPoint3D;

  { static methods } 

    {class} function Add(point: DNPoint3D; vector: DNVector3D): DNPoint3D;
    {class} function Subtract(point: DNPoint3D; vector: DNVector3D): DNPoint3D; overload;
    {class} function Subtract(point1: DNPoint3D; point2: DNPoint3D): DNVector3D; overload;
    {class} function Multiply(point: DNPoint3D; matrix: DNMatrix3D): DNPoint3D;
    {class} function Equals(point1: DNPoint3D; point2: DNPoint3D): Boolean; overload;
    {class} function Parse(source: string): DNPoint3D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3D')]
  DNPoint3D = interface(DDN.mscorlib.DNValueType)
  ['{F3EB3BA4-BAD2-368F-B652-2230BAF332B8}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    procedure Offset(offsetX: Double; offsetY: Double; offsetZ: Double);
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNPoint3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNPoint3D = class(TDNGenericImport<DNPoint3DClass, DNPoint3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_Point3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{14BE6AE5-F0ED-5EC4-B054-98FFEC471269}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3DCollection+Enumerator')]
  DNMedia3D_Point3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{1EF7D27C-7ABA-3BD8-AADA-DA4110062636}']
  { getters & setters } 

    function get_Current: DNPoint3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNPoint3D read get_Current;
  end;

  TDNMedia3D_Point3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_Point3DCollection_EnumeratorClass, DNMedia3D_Point3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint4DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{5B42E7AA-C583-5115-89F2-F9D56F80166E}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double; w: Double): DNPoint4D;

  { static methods } 

    {class} function Add(point1: DNPoint4D; point2: DNPoint4D): DNPoint4D;
    {class} function Subtract(point1: DNPoint4D; point2: DNPoint4D): DNPoint4D;
    {class} function Multiply(point: DNPoint4D; matrix: DNMatrix3D): DNPoint4D;
    {class} function Equals(point1: DNPoint4D; point2: DNPoint4D): Boolean; overload;
    {class} function Parse(source: string): DNPoint4D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point4D')]
  DNPoint4D = interface(DDN.mscorlib.DNValueType)
  ['{9101299F-0618-3990-BC57-7F6B78982716}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_W: Double;
    procedure set_W(value: Double);

  { methods } 

    procedure Offset(deltaX: Double; deltaY: Double; deltaZ: Double; deltaW: Double);
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNPoint4D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
    property W: Double read get_W write set_W;
  end;

  TDNPoint4D = class(TDNGenericImport<DNPoint4DClass, DNPoint4D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNQuaternionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{89512F08-2E18-52CC-B8F5-9E3244940C03}']
  { static getter & setter } 

    {class} function get_Identity: DNQuaternion;

  { constructors } 

    {class} function init(x: Double; y: Double; z: Double; w: Double): DNQuaternion; overload;
    {class} function init(axisOfRotation: DNVector3D; angleInDegrees: Double): DNQuaternion; overload;

  { static methods } 

    {class} function Add(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Subtract(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Multiply(left: DNQuaternion; right: DNQuaternion): DNQuaternion;
    {class} function Slerp(from: DNQuaternion; &to: DNQuaternion; t: Double): DNQuaternion; overload;
    {class} function Slerp(from: DNQuaternion; &to: DNQuaternion; t: Double; useShortestPath: Boolean): DNQuaternion; overload;
    {class} function Equals(quaternion1: DNQuaternion; quaternion2: DNQuaternion): Boolean; overload;
    {class} function Parse(source: string): DNQuaternion;

  { static propertys } 

    {class} property Identity: DNQuaternion read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Quaternion')]
  DNQuaternion = interface(DDN.mscorlib.DNValueType)
  ['{50227CBA-D709-32CE-89D5-286F9449AA0B}']
  { getters & setters } 

    function get_Axis: DNVector3D;
    function get_Angle: Double;
    function get_IsNormalized: Boolean;
    function get_IsIdentity: Boolean;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_W: Double;
    procedure set_W(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    procedure Conjugate;
    procedure Invert;
    procedure Normalize;
    function Equals(value: DNQuaternion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Axis: DNVector3D read get_Axis;
    property Angle: Double read get_Angle;
    property IsNormalized: Boolean read get_IsNormalized;
    property IsIdentity: Boolean read get_IsIdentity;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
    property W: Double read get_W write set_W;
  end;

  TDNQuaternion = class(TDNGenericImport<DNQuaternionClass, DNQuaternion>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRect3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{E3532CA5-20FD-5F76-AD96-066EA560FAA6}']
  { static getter & setter } 

    {class} function get_Empty: DNRect3D;

  { constructors } 

    {class} function init(location: DNPoint3D; size: DNSize3D): DNRect3D; overload;
    {class} function init(x: Double; y: Double; z: Double; sizeX: Double; sizeY: Double; sizeZ: Double): DNRect3D; overload;

  { static methods } 

    {class} function Intersect(rect1: DNRect3D; rect2: DNRect3D): DNRect3D; overload;
    {class} function Union(rect1: DNRect3D; rect2: DNRect3D): DNRect3D; overload;
    {class} function Union(rect: DNRect3D; point: DNPoint3D): DNRect3D; overload;
    {class} function Offset(rect: DNRect3D; offsetVector: DNVector3D): DNRect3D; overload;
    {class} function Offset(rect: DNRect3D; offsetX: Double; offsetY: Double; offsetZ: Double): DNRect3D; overload;
    {class} function Equals(rect1: DNRect3D; rect2: DNRect3D): Boolean; overload;
    {class} function Parse(source: string): DNRect3D;

  { static propertys } 

    {class} property Empty: DNRect3D read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Rect3D')]
  DNRect3D = interface(DDN.mscorlib.DNValueType)
  ['{0088A4CB-831A-330F-81B7-1F629158A031}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Location: DNPoint3D;
    procedure set_Location(value: DNPoint3D);
    function get_Size: DNSize3D;
    procedure set_Size(value: DNSize3D);
    function get_SizeX: Double;
    procedure set_SizeX(value: Double);
    function get_SizeY: Double;
    procedure set_SizeY(value: Double);
    function get_SizeZ: Double;
    procedure set_SizeZ(value: Double);
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function &Contains(point: DNPoint3D): Boolean; overload;
    function &Contains(x: Double; y: Double; z: Double): Boolean; overload;
    function &Contains(rect: DNRect3D): Boolean; overload;
    function IntersectsWith(rect: DNRect3D): Boolean;
    procedure Intersect(rect: DNRect3D); overload;
    procedure Union(rect: DNRect3D); overload;
    procedure Union(point: DNPoint3D); overload;
    procedure Offset(offsetVector: DNVector3D); overload;
    procedure Offset(offsetX: Double; offsetY: Double; offsetZ: Double); overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNRect3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Location: DNPoint3D read get_Location write set_Location;
    property Size: DNSize3D read get_Size write set_Size;
    property SizeX: Double read get_SizeX write set_SizeX;
    property SizeY: Double read get_SizeY write set_SizeY;
    property SizeZ: Double read get_SizeZ write set_SizeZ;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNRect3D = class(TDNGenericImport<DNRect3DClass, DNRect3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNSize3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{262991D8-325B-54DB-9FDC-04843C879E72}']
  { static getter & setter } 

    {class} function get_Empty: DNSize3D;

  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNSize3D;

  { static methods } 

    {class} function Equals(size1: DNSize3D; size2: DNSize3D): Boolean; overload;
    {class} function Parse(source: string): DNSize3D;

  { static propertys } 

    {class} property Empty: DNSize3D read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Size3D')]
  DNSize3D = interface(DDN.mscorlib.DNValueType)
  ['{AE40BFEC-6E4F-3557-821E-E5910A7D5425}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNSize3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNSize3D = class(TDNGenericImport<DNSize3DClass, DNSize3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_Transform3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0B303C53-C6E0-5503-81B6-731DC4CDD073}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Transform3DCollection+Enumerator')]
  DNMedia3D_Transform3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{86FDF9AE-33AC-336E-B86F-EA9FAD84E80B}']
  { getters & setters } 

    function get_Current: DNTransform3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTransform3D read get_Current;
  end;

  TDNMedia3D_Transform3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_Transform3DCollection_EnumeratorClass, DNMedia3D_Transform3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVector3DClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BA5E87BE-5A6E-5207-B9C9-BF5DB0580B06}']
  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNVector3D;

  { static methods } 

    {class} function AngleBetween(vector1: DNVector3D; vector2: DNVector3D): Double;
    {class} function Add(vector1: DNVector3D; vector2: DNVector3D): DNVector3D; overload;
    {class} function Subtract(vector1: DNVector3D; vector2: DNVector3D): DNVector3D; overload;
    {class} function Add(vector: DNVector3D; point: DNPoint3D): DNPoint3D; overload;
    {class} function Subtract(vector: DNVector3D; point: DNPoint3D): DNPoint3D; overload;
    {class} function Multiply(vector: DNVector3D; scalar: Double): DNVector3D; overload;
    {class} function Multiply(scalar: Double; vector: DNVector3D): DNVector3D; overload;
    {class} function Divide(vector: DNVector3D; scalar: Double): DNVector3D;
    {class} function Multiply(vector: DNVector3D; matrix: DNMatrix3D): DNVector3D; overload;
    {class} function DotProduct(vector1: DNVector3D; vector2: DNVector3D): Double;
    {class} function CrossProduct(vector1: DNVector3D; vector2: DNVector3D): DNVector3D;
    {class} function Equals(vector1: DNVector3D; vector2: DNVector3D): Boolean; overload;
    {class} function Parse(source: string): DNVector3D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3D')]
  DNVector3D = interface(DDN.mscorlib.DNValueType)
  ['{8C1EBFA7-C644-3135-83D2-2781F2977005}']
  { getters & setters } 

    function get_Length: Double;
    function get_LengthSquared: Double;
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    procedure Normalize;
    procedure Negate;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNVector3D): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Length: Double read get_Length;
    property LengthSquared: Double read get_LengthSquared;
    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNVector3D = class(TDNGenericImport<DNVector3DClass, DNVector3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_Vector3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C18D9013-BA86-55C5-A767-0C8CCCE034AB}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3DCollection+Enumerator')]
  DNMedia3D_Vector3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{C869AD3D-5188-3747-90BF-F05595112753}']
  { getters & setters } 

    function get_Current: DNVector3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNVector3D read get_Current;
  end;

  TDNMedia3D_Vector3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_Vector3DCollection_EnumeratorClass, DNMedia3D_Vector3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMedia3D_Visual3DCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{EC5B795C-43C3-54BF-ABA7-55BA015E29AC}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3DCollection+Enumerator')]
  DNMedia3D_Visual3DCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{A09D1B0F-77A2-31BD-80AE-904871D108FD}']
  { getters & setters } 

    function get_Current: DNVisual3D;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNVisual3D read get_Current;
  end;

  TDNMedia3D_Visual3DCollection_Enumerator = class(TDNGenericImport<DNMedia3D_Visual3DCollection_EnumeratorClass, DNMedia3D_Visual3DCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_PathFigureCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B3AD6C3B-CDA1-5DBE-87C0-9524B24FE2A4}']
  end;

  [DNTypeName('System.Windows.Media.PathFigureCollection+Enumerator')]
  DNMedia_PathFigureCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{2719A155-ADD7-3C98-91AB-2DDD2BA9F79D}']
  { getters & setters } 

    function get_Current: DNPathFigure;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNPathFigure read get_Current;
  end;

  TDNMedia_PathFigureCollection_Enumerator = class(TDNGenericImport<DNMedia_PathFigureCollection_EnumeratorClass, DNMedia_PathFigureCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_PathSegmentCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{352D2943-D6A0-5B5B-9B20-53651114D330}']
  end;

  [DNTypeName('System.Windows.Media.PathSegmentCollection+Enumerator')]
  DNMedia_PathSegmentCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{38C591AC-603C-315C-B8AD-EC92AC486823}']
  { getters & setters } 

    function get_Current: DNPathSegment;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNPathSegment read get_Current;
  end;

  TDNMedia_PathSegmentCollection_Enumerator = class(TDNGenericImport<DNMedia_PathSegmentCollection_EnumeratorClass, DNMedia_PathSegmentCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2E46C716-ECAF-5C71-985F-A2F1A4EEA0FE}']
  { static methods } 

    {class} function Equals(left: DNPixelFormat; right: DNPixelFormat): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.PixelFormat')]
  DNPixelFormat = interface(DDN.mscorlib.DNValueType)
  ['{19677C85-613C-3B79-AFB1-77B8931A4328}']
  { getters & setters } 

    function get_BitsPerPixel: Int32;
    function get_Masks: DDN.mscorlib.DNIList<DNPixelFormatChannelMask>;

  { methods } 

    function Equals(pixelFormat: DNPixelFormat): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BitsPerPixel: Int32 read get_BitsPerPixel;
    property Masks: DDN.mscorlib.DNIList<DNPixelFormatChannelMask> read get_Masks;
  end;

  TDNPixelFormat = class(TDNGenericImport<DNPixelFormatClass, DNPixelFormat>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatChannelMaskClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B1C6ED14-35F8-597E-A207-CBC56355DD94}']
  { static methods } 

    {class} function Equals(left: DNPixelFormatChannelMask; right: DNPixelFormatChannelMask): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.PixelFormatChannelMask')]
  DNPixelFormatChannelMask = interface(DDN.mscorlib.DNValueType)
  ['{BACA919F-EE7B-3F1F-B3F6-45BEBE9518B1}']
  { getters & setters } 

    function get_Mask: DDN.mscorlib.DNIList<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Mask: DDN.mscorlib.DNIList<Byte> read get_Mask;
  end;

  TDNPixelFormatChannelMask = class(TDNGenericImport<DNPixelFormatChannelMaskClass, DNPixelFormatChannelMask>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_PointCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{EF139B18-B06D-5D52-B975-B42C3666E587}']
  end;

  [DNTypeName('System.Windows.Media.PointCollection+Enumerator')]
  DNMedia_PointCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{C45FB0F5-D651-3E15-9473-86AC851CB3D4}']
  { getters & setters } 

    function get_Current: DDN.System.Windows.Common.DNPoint;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DDN.System.Windows.Common.DNPoint read get_Current;
  end;

  TDNMedia_PointCollection_Enumerator = class(TDNGenericImport<DNMedia_PointCollection_EnumeratorClass, DNMedia_PointCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_TextEffectCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2BB13AB3-4E2E-51B0-9906-070AC2DF5ABF}']
  end;

  [DNTypeName('System.Windows.Media.TextEffectCollection+Enumerator')]
  DNMedia_TextEffectCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{7EE941BB-C6AD-3A09-8212-C706CD2F9C53}']
  { getters & setters } 

    function get_Current: DNTextEffect;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTextEffect read get_Current;
  end;

  TDNMedia_TextEffectCollection_Enumerator = class(TDNGenericImport<DNMedia_TextEffectCollection_EnumeratorClass, DNMedia_TextEffectCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNCharacterBufferRangeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{08339850-36BD-5536-B5DB-FCFAE1125B0E}']
  { static getter & setter } 

    {class} function get_Empty: DNCharacterBufferRange;

  { constructors } 

    {class} function init(characterArray: TArray<Char>; offsetToFirstChar: Int32; characterLength: Int32): DNCharacterBufferRange; overload;
    {class} function init(characterString: string; offsetToFirstChar: Int32; characterLength: Int32): DNCharacterBufferRange; overload;
    {class} function init(unsafeCharacterString: PChar; characterLength: Int32): DNCharacterBufferRange; overload;

  { static propertys } 

    {class} property Empty: DNCharacterBufferRange read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.CharacterBufferRange')]
  DNCharacterBufferRange = interface(DDN.mscorlib.DNValueType)
  ['{7DDE7AC2-6F72-3680-9825-03A0A506A86C}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNCharacterBufferRange): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
  end;

  TDNCharacterBufferRange = class(TDNGenericImport<DNCharacterBufferRangeClass, DNCharacterBufferRange>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNCharacterBufferReferenceClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C62CFCD4-9153-536E-82CD-C8FDD0C775CF}']
  { constructors } 

    {class} function init(characterArray: TArray<Char>; offsetToFirstChar: Int32): DNCharacterBufferReference; overload;
    {class} function init(characterString: string; offsetToFirstChar: Int32): DNCharacterBufferReference; overload;
    {class} function init(unsafeCharacterString: PChar; characterLength: Int32): DNCharacterBufferReference; overload;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.CharacterBufferReference')]
  DNCharacterBufferReference = interface(DDN.mscorlib.DNValueType)
  ['{DEA61D13-1BC1-3BA7-8AFE-6321BC38060A}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNCharacterBufferReference): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNCharacterBufferReference = class(TDNGenericImport<DNCharacterBufferReferenceClass, DNCharacterBufferReference>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNCharacterHitClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1AF0892A-47FD-52D2-81BD-8149A994DA30}']
  { constructors } 

    {class} function init(firstCharacterIndex: Int32; trailingLength: Int32): DNCharacterHit;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.CharacterHit')]
  DNCharacterHit = interface(DDN.mscorlib.DNValueType)
  ['{A2B910A9-9E81-3598-A301-A5F75994AC36}']
  { getters & setters } 

    function get_FirstCharacterIndex: Int32;
    function get_TrailingLength: Int32;

  { methods } 

    function Equals(obj: DNCharacterHit): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FirstCharacterIndex: Int32 read get_FirstCharacterIndex;
    property TrailingLength: Int32 read get_TrailingLength;
  end;

  TDNCharacterHit = class(TDNGenericImport<DNCharacterHitClass, DNCharacterHit>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNMinMaxParagraphWidthClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{549A32AC-46D0-5E8F-9F23-24BEA19D9760}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.MinMaxParagraphWidth')]
  DNMinMaxParagraphWidth = interface(DDN.mscorlib.DNValueType)
  ['{1FB1DCD4-242B-3D83-BB3D-ADD7CF794E8D}']
  { getters & setters } 

    function get_MinWidth: Double;
    function get_MaxWidth: Double;

  { methods } 

    function GetHashCode: Int32;
    function Equals(value: DNMinMaxParagraphWidth): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MinWidth: Double read get_MinWidth;
    property MaxWidth: Double read get_MaxWidth;
  end;

  TDNMinMaxParagraphWidth = class(TDNGenericImport<DNMinMaxParagraphWidthClass, DNMinMaxParagraphWidth>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_TransformCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{56EFE6B5-15C1-5224-BFDD-F677831AFFC1}']
  end;

  [DNTypeName('System.Windows.Media.TransformCollection+Enumerator')]
  DNMedia_TransformCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{715D36D1-006D-3240-872B-83EE65E7867D}']
  { getters & setters } 

    function get_Current: DNTransform;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTransform read get_Current;
  end;

  TDNMedia_TransformCollection_Enumerator = class(TDNGenericImport<DNMedia_TransformCollection_EnumeratorClass, DNMedia_TransformCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_VectorCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{36DC7BFC-98D0-5EF7-84EF-162FB6A4C551}']
  end;

  [DNTypeName('System.Windows.Media.VectorCollection+Enumerator')]
  DNMedia_VectorCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{5E0C13A5-1A03-34BE-84F0-9749BCF90ADA}']
  { getters & setters } 

    function get_Current: DDN.System.Windows.Common.DNVector;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DDN.System.Windows.Common.DNVector read get_Current;
  end;

  TDNMedia_VectorCollection_Enumerator = class(TDNGenericImport<DNMedia_VectorCollection_EnumeratorClass, DNMedia_VectorCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMedia_VisualCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A0FD9F7C-3017-5C64-9F65-AFB8DF65B7C1}']
  end;

  [DNTypeName('System.Windows.Media.VisualCollection+Enumerator')]
  DNMedia_VisualCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{E03E6468-B152-3864-B202-4A69F9AE6F92}']
  { getters & setters } 

    function get_Current: DNVisual;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNVisual read get_Current;
  end;

  TDNMedia_VisualCollection_Enumerator = class(TDNGenericImport<DNMedia_VisualCollection_EnumeratorClass, DNMedia_VisualCollection_Enumerator>) end;

  //-------------namespace: System.Windows----------------
  DNRoutedEventHandlerInfoClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{5711D525-A7B8-55D2-869D-86DC5950CDA6}']
  end;

  [DNTypeName('System.Windows.RoutedEventHandlerInfo')]
  DNRoutedEventHandlerInfo = interface(DDN.mscorlib.DNValueType)
  ['{99711545-CE9B-3AA6-9A2B-A2D0CA76FE72}']
  { getters & setters } 

    function get_Handler: DDN.mscorlib.DNDelegate;
    function get_InvokeHandledEventsToo: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(handlerInfo: DNRoutedEventHandlerInfo): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Handler: DDN.mscorlib.DNDelegate read get_Handler;
    property InvokeHandledEventsToo: Boolean read get_InvokeHandledEventsToo;
  end;

  TDNRoutedEventHandlerInfo = class(TDNGenericImport<DNRoutedEventHandlerInfoClass, DNRoutedEventHandlerInfo>) end;

  //-------------namespace: System.Windows----------------
  DNWindows_TextDecorationCollection_EnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6227290B-0002-5FEE-96A0-4D814DB6CD31}']
  end;

  [DNTypeName('System.Windows.TextDecorationCollection+Enumerator')]
  DNWindows_TextDecorationCollection_Enumerator = interface(DDN.mscorlib.DNValueType)
  ['{D3638BBD-574D-31A1-A8F8-31F0838329BD}']
  { getters & setters } 

    function get_Current: DNTextDecoration;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DNTextDecoration read get_Current;
  end;

  TDNWindows_TextDecorationCollection_Enumerator = class(TDNGenericImport<DNWindows_TextDecorationCollection_EnumeratorClass, DNWindows_TextDecorationCollection_Enumerator>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60F2074A-E11F-5239-B755-BBF940920D2B}']
  { static fields getter & setter } 

   function __fakeFieldGet_AutomationIdProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_NameProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_HelpTextProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AcceleratorKeyProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AccessKeyProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ItemStatusProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ItemTypeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsColumnHeaderProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsRowHeaderProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsRequiredForFormProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LabeledByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsOffscreenBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LiveSettingProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PositionInSetProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SizeOfSetProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AutomationIdProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AutomationIdProperty;
    {class} property NameProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NameProperty;
    {class} property HelpTextProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_HelpTextProperty;
    {class} property AcceleratorKeyProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AcceleratorKeyProperty;
    {class} property AccessKeyProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AccessKeyProperty;
    {class} property ItemStatusProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ItemStatusProperty;
    {class} property ItemTypeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ItemTypeProperty;
    {class} property IsColumnHeaderProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsColumnHeaderProperty;
    {class} property IsRowHeaderProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsRowHeaderProperty;
    {class} property IsRequiredForFormProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsRequiredForFormProperty;
    {class} property LabeledByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LabeledByProperty;
    {class} property IsOffscreenBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsOffscreenBehaviorProperty;
    {class} property LiveSettingProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LiveSettingProperty;
    {class} property PositionInSetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionInSetProperty;
    {class} property SizeOfSetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SizeOfSetProperty;

  { static methods } 

    {class} procedure SetAutomationId(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetAutomationId(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetName(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetName(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetHelpText(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetHelpText(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetAcceleratorKey(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetAcceleratorKey(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetAccessKey(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetAccessKey(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetItemStatus(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetItemStatus(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} procedure SetItemType(element: DDN.System.Windows.Common.DNDependencyObject; value: string);
    {class} function GetItemType(element: DDN.System.Windows.Common.DNDependencyObject): string;
    {class} function GetIsColumnHeader(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsRowHeader(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsRequiredForForm(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} procedure SetLabeledBy(element: DDN.System.Windows.Common.DNDependencyObject; value: DNUIElement);
    {class} function GetLabeledBy(element: DDN.System.Windows.Common.DNDependencyObject): DNUIElement;
    {class} procedure SetIsOffscreenBehavior(element: DDN.System.Windows.Common.DNDependencyObject; value: DNIsOffscreenBehavior);
    {class} function GetIsOffscreenBehavior(element: DDN.System.Windows.Common.DNDependencyObject): DNIsOffscreenBehavior;
    {class} procedure SetLiveSetting(element: DDN.System.Windows.Common.DNDependencyObject; value: DNAutomationLiveSetting);
    {class} function GetLiveSetting(element: DDN.System.Windows.Common.DNDependencyObject): DNAutomationLiveSetting;
    {class} procedure SetPositionInSet(element: DDN.System.Windows.Common.DNDependencyObject; value: Int32);
    {class} function GetPositionInSet(element: DDN.System.Windows.Common.DNDependencyObject): Int32;
    {class} procedure SetSizeOfSet(element: DDN.System.Windows.Common.DNDependencyObject; value: Int32);
    {class} function GetSizeOfSet(element: DDN.System.Windows.Common.DNDependencyObject): Int32;
    {class} procedure SetIsColumnHeader(element: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);
    {class} procedure SetIsRowHeader(element: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);
    {class} procedure SetIsRequiredForForm(element: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);

  end;

  [DNTypeName('System.Windows.Automation.AutomationProperties')]
  DNAutomationProperties = interface(DDN.mscorlib.DNObject)
  ['{82E43DDE-E09B-3095-9F71-F746F9E09D62}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAutomationProperties = class(TDNGenericImport<DNAutomationPropertiesClass, DNAutomationProperties>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNHostedWindowWrapperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3EC926D-ED8B-5396-9F54-CFDDE6E11EE0}']
  { constructors } 

    {class} function init(hwnd: IntPtr): DNHostedWindowWrapper;

  end;

  [DNTypeName('System.Windows.Automation.Peers.HostedWindowWrapper')]
  DNHostedWindowWrapper = interface(DDN.mscorlib.DNObject)
  ['{4F48E4C6-EB9B-3C22-B00B-46DF1E1F0A01}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHostedWindowWrapper = class(TDNGenericImport<DNHostedWindowWrapperClass, DNHostedWindowWrapper>) end;

  //-------------namespace: System.Windows----------------
  DNClipboardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9D0235C7-B3D4-51BF-A998-2B26ED7D85C1}']
  { static methods } 

    {class} procedure Clear;
    {class} function ContainsAudio: Boolean;
    {class} function ContainsData(format: string): Boolean;
    {class} function ContainsFileDropList: Boolean;
    {class} function ContainsImage: Boolean;
    {class} function ContainsText: Boolean; overload;
    {class} function ContainsText(format: DNTextDataFormat): Boolean; overload;
    {class} procedure Flush;
    {class} function GetAudioStream: DDN.mscorlib.DNStream;
    {class} function GetData(format: string): DDN.mscorlib.DNObject;
    {class} function GetImage: DNBitmapSource;
    {class} function GetText: string; overload;
    {class} function GetText(format: DNTextDataFormat): string; overload;
    {class} procedure SetAudio(audioBytes: TArray<Byte>); overload;
    {class} procedure SetAudio(audioStream: DDN.mscorlib.DNStream); overload;
    {class} procedure SetData(format: string; data: DDN.mscorlib.DNObject);
    {class} procedure SetImage(image: DNBitmapSource);
    {class} procedure SetText(text: string); overload;
    {class} procedure SetText(text: string; format: DNTextDataFormat); overload;
    {class} function GetDataObject: DNIDataObject;
    {class} function IsCurrent(data: DNIDataObject): Boolean;
    {class} procedure SetDataObject(data: DDN.mscorlib.DNObject); overload;
    {class} procedure SetDataObject(data: DDN.mscorlib.DNObject; copy: Boolean); overload;
    {class} function GetFileDropList: DDN.System.Windows.Common.DNStringCollection;
    {class} procedure SetFileDropList(fileDropList: DDN.System.Windows.Common.DNStringCollection);

  end;

  [DNTypeName('System.Windows.Clipboard')]
  DNClipboard = interface(DDN.mscorlib.DNObject)
  ['{9D532C04-E406-3D50-9394-A33C059CEEBD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClipboard = class(TDNGenericImport<DNClipboardClass, DNClipboard>) end;

  //-------------namespace: System.Windows----------------
  DNContentOperationsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64B11264-B658-53A8-BEF7-35594E0A685B}']
  { static methods } 

    {class} function GetParent(reference: DNContentElement): DDN.System.Windows.Common.DNDependencyObject;
    {class} procedure SetParent(reference: DNContentElement; parent: DDN.System.Windows.Common.DNDependencyObject);

  end;

  [DNTypeName('System.Windows.ContentOperations')]
  DNContentOperations = interface(DDN.mscorlib.DNObject)
  ['{FE0A86C7-108E-31F5-A3DD-9D117E5EC05C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContentOperations = class(TDNGenericImport<DNContentOperationsClass, DNContentOperations>) end;

  //-------------namespace: System.Windows----------------
  DNCoreCompatibilityPreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5234E0CA-BD46-5D7B-B170-26024539D548}']
  { static getter & setter } 

    {class} function get_IsAltKeyRequiredInAccessKeyDefaultScope: Boolean;
    {class} procedure set_IsAltKeyRequiredInAccessKeyDefaultScope(value: Boolean);

  { static propertys } 

    {class} property IsAltKeyRequiredInAccessKeyDefaultScope: Boolean read get_IsAltKeyRequiredInAccessKeyDefaultScope write set_IsAltKeyRequiredInAccessKeyDefaultScope;
  end;

  [DNTypeName('System.Windows.CoreCompatibilityPreferences')]
  DNCoreCompatibilityPreferences = interface(DDN.mscorlib.DNObject)
  ['{F71176A2-B68E-3644-8F3B-C4BA9EFC6760}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCoreCompatibilityPreferences = class(TDNGenericImport<DNCoreCompatibilityPreferencesClass, DNCoreCompatibilityPreferences>) end;

  //-------------namespace: System.Windows----------------
  DNDataFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BB3ABDF6-F0B8-5F21-840D-4793FDCF6ED2}']
  { constructors } 

    {class} function init(name: string; id: Int32): DNDataFormat;

  end;

  [DNTypeName('System.Windows.DataFormat')]
  DNDataFormat = interface(DDN.mscorlib.DNObject)
  ['{46682554-6071-3F5A-A5B7-4CE6BDA001B0}']
  { getters & setters } 

    function get_Name: string;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Id: Int32 read get_Id;
  end;

  TDNDataFormat = class(TDNGenericImport<DNDataFormatClass, DNDataFormat>) end;

  //-------------namespace: System.Windows----------------
  DNDataFormatsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{68E0D80F-BF5A-59AE-B2FD-E9A0819532F5}']
  { static fields getter & setter } 

   function __fakeFieldGet_Text: string;
   function __fakeFieldGet_UnicodeText: string;
   function __fakeFieldGet_Dib: string;
   function __fakeFieldGet_Bitmap: string;
   function __fakeFieldGet_EnhancedMetafile: string;
   function __fakeFieldGet_MetafilePicture: string;
   function __fakeFieldGet_SymbolicLink: string;
   function __fakeFieldGet_Dif: string;
   function __fakeFieldGet_Tiff: string;
   function __fakeFieldGet_OemText: string;
   function __fakeFieldGet_Palette: string;
   function __fakeFieldGet_PenData: string;
   function __fakeFieldGet_Riff: string;
   function __fakeFieldGet_WaveAudio: string;
   function __fakeFieldGet_FileDrop: string;
   function __fakeFieldGet_Locale: string;
   function __fakeFieldGet_Html: string;
   function __fakeFieldGet_Rtf: string;
   function __fakeFieldGet_CommaSeparatedValue: string;
   function __fakeFieldGet_StringFormat: string;
   function __fakeFieldGet_Serializable: string;
   function __fakeFieldGet_Xaml: string;
   function __fakeFieldGet_XamlPackage: string;

  { static fields } 

    {class} property Text: string read __fakeFieldGet_Text;
    {class} property UnicodeText: string read __fakeFieldGet_UnicodeText;
    {class} property Dib: string read __fakeFieldGet_Dib;
    {class} property Bitmap: string read __fakeFieldGet_Bitmap;
    {class} property EnhancedMetafile: string read __fakeFieldGet_EnhancedMetafile;
    {class} property MetafilePicture: string read __fakeFieldGet_MetafilePicture;
    {class} property SymbolicLink: string read __fakeFieldGet_SymbolicLink;
    {class} property Dif: string read __fakeFieldGet_Dif;
    {class} property Tiff: string read __fakeFieldGet_Tiff;
    {class} property OemText: string read __fakeFieldGet_OemText;
    {class} property Palette: string read __fakeFieldGet_Palette;
    {class} property PenData: string read __fakeFieldGet_PenData;
    {class} property Riff: string read __fakeFieldGet_Riff;
    {class} property WaveAudio: string read __fakeFieldGet_WaveAudio;
    {class} property FileDrop: string read __fakeFieldGet_FileDrop;
    {class} property Locale: string read __fakeFieldGet_Locale;
    {class} property Html: string read __fakeFieldGet_Html;
    {class} property Rtf: string read __fakeFieldGet_Rtf;
    {class} property CommaSeparatedValue: string read __fakeFieldGet_CommaSeparatedValue;
    {class} property StringFormat: string read __fakeFieldGet_StringFormat;
    {class} property Serializable: string read __fakeFieldGet_Serializable;
    {class} property Xaml: string read __fakeFieldGet_Xaml;
    {class} property XamlPackage: string read __fakeFieldGet_XamlPackage;

  { static methods } 

    {class} function GetDataFormat(id: Int32): DNDataFormat; overload;
    {class} function GetDataFormat(format: string): DNDataFormat; overload;

  end;

  [DNTypeName('System.Windows.DataFormats')]
  DNDataFormats = interface(DDN.mscorlib.DNObject)
  ['{D9D38C50-29B9-390B-912B-19B64289B0C7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataFormats = class(TDNGenericImport<DNDataFormatsClass, DNDataFormats>) end;

  //-------------namespace: System.Windows----------------
  DNDataObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DB39A23-D863-5486-A102-34FF90FFF4B0}']
  { constructors } 

    {class} function init: DNDataObject; overload;
    {class} function init(data: DDN.mscorlib.DNObject): DNDataObject; overload;
    {class} function init(format: string; data: DDN.mscorlib.DNObject): DNDataObject; overload;
    {class} function init(format: DDN.mscorlib.DNType; data: DDN.mscorlib.DNObject): DNDataObject; overload;
    {class} function init(format: string; data: DDN.mscorlib.DNObject; autoConvert: Boolean): DNDataObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_CopyingEvent: DNRoutedEvent;
   function __fakeFieldGet_PastingEvent: DNRoutedEvent;
   function __fakeFieldGet_SettingDataEvent: DNRoutedEvent;

  { static fields } 

    {class} property CopyingEvent: DNRoutedEvent read __fakeFieldGet_CopyingEvent;
    {class} property PastingEvent: DNRoutedEvent read __fakeFieldGet_PastingEvent;
    {class} property SettingDataEvent: DNRoutedEvent read __fakeFieldGet_SettingDataEvent;

  { static methods } 

    {class} procedure AddCopyingHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectCopyingEventHandler);
    {class} procedure RemoveCopyingHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectCopyingEventHandler);
    {class} procedure AddPastingHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectPastingEventHandler);
    {class} procedure RemovePastingHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectPastingEventHandler);
    {class} procedure AddSettingDataHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectSettingDataEventHandler);
    {class} procedure RemoveSettingDataHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDataObjectSettingDataEventHandler);

  end;

  [DNTypeName('System.Windows.DataObject')]
  DNDataObject = interface(DDN.mscorlib.DNObject)
  ['{945F7719-9D00-347A-B091-EBB498387C2C}']
  { methods } 

    function GetData(format: string; autoConvert: Boolean): DDN.mscorlib.DNObject; overload;
    function GetData(format: string): DDN.mscorlib.DNObject; overload;
    function GetData(format: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetDataPresent(format: DDN.mscorlib.DNType): Boolean; overload;
    function GetDataPresent(format: string; autoConvert: Boolean): Boolean; overload;
    function GetDataPresent(format: string): Boolean; overload;
    function GetFormats(autoConvert: Boolean): TArray<string>; overload;
    function GetFormats: TArray<string>; overload;
    procedure SetData(data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: DDN.mscorlib.DNType; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject; autoConvert: Boolean); overload;
    function ContainsAudio: Boolean;
    function ContainsFileDropList: Boolean;
    function ContainsImage: Boolean;
    function ContainsText: Boolean; overload;
    function ContainsText(format: DNTextDataFormat): Boolean; overload;
    function GetAudioStream: DDN.mscorlib.DNStream;
    function GetImage: DNBitmapSource;
    function GetText: string; overload;
    function GetText(format: DNTextDataFormat): string; overload;
    procedure SetAudio(audioBytes: TArray<Byte>); overload;
    procedure SetAudio(audioStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(image: DNBitmapSource);
    procedure SetText(textData: string); overload;
    procedure SetText(textData: string; format: DNTextDataFormat); overload;
    function GetFileDropList: DDN.System.Windows.Common.DNStringCollection;
    procedure SetFileDropList(fileDropList: DDN.System.Windows.Common.DNStringCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataObject = class(TDNGenericImport<DNDataObjectClass, DNDataObject>) end;

  //-------------namespace: System.Windows.Diagnostics----------------
  DNVisualDiagnosticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D98C9CCB-C6B3-5D57-A965-1AFDEE692C1D}']
  { static methods } 

    {class} procedure EnableVisualTreeChanged;
    {class} procedure DisableVisualTreeChanged;
    {class} function GetXamlSourceInfo(obj: DDN.mscorlib.DNObject): DNXamlSourceInfo;

  end;

  [DNTypeName('System.Windows.Diagnostics.VisualDiagnostics')]
  DNVisualDiagnostics = interface(DDN.mscorlib.DNObject)
  ['{625C8B04-3CFF-3326-8BDA-149608EC0721}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVisualDiagnostics = class(TDNGenericImport<DNVisualDiagnosticsClass, DNVisualDiagnostics>) end;

  //-------------namespace: System.Windows.Diagnostics----------------
  DNXamlSourceInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5BA3EE88-C199-5ADB-B70F-16E6FC3735B2}']
  { constructors } 

    {class} function init(sourceUri: DDN.System.Windows.Common.DNUri; lineNumber: Int32; linePosition: Int32): DNXamlSourceInfo;

  end;

  [DNTypeName('System.Windows.Diagnostics.XamlSourceInfo')]
  DNXamlSourceInfo = interface(DDN.mscorlib.DNObject)
  ['{947A4215-650F-3016-9016-BBCA03CE5B2F}']
  { getters & setters } 

    function get_SourceUri: DDN.System.Windows.Common.DNUri;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceUri: DDN.System.Windows.Common.DNUri read get_SourceUri;
    property LineNumber: Int32 read get_LineNumber;
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXamlSourceInfo = class(TDNGenericImport<DNXamlSourceInfoClass, DNXamlSourceInfo>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNContentPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50BEBF9F-94D1-56B8-893D-6C8D26A70C20}']
  { static fields getter & setter } 

   function __fakeFieldGet_Missing: DNContentPosition;

  { static fields } 

    {class} property Missing: DNContentPosition read __fakeFieldGet_Missing;

  end;

  [DNTypeName('System.Windows.Documents.ContentPosition')]
  DNContentPosition = interface(DDN.mscorlib.DNObject)
  ['{EDC0BAC6-38F4-3C5D-8D38-461E77F222E5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContentPosition = class(TDNGenericImport<DNContentPositionClass, DNContentPosition>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDocumentPageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14B0949C-704E-502C-AD59-FBE34F030286}']
  { constructors } 

    {class} function init(visual: DNVisual): DNDocumentPage; overload;
    {class} function init(visual: DNVisual; pageSize: DDN.System.Windows.Common.DNSize; bleedBox: DDN.System.Windows.Common.DNRect; contentBox: DDN.System.Windows.Common.DNRect): DNDocumentPage; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Missing: DNDocumentPage;

  { static fields } 

    {class} property Missing: DNDocumentPage read __fakeFieldGet_Missing;

  end;

  [DNTypeName('System.Windows.Documents.DocumentPage')]
  DNDocumentPage = interface(DDN.mscorlib.DNObject)
  ['{E94BE48A-2A69-3197-B818-03E199414B6B}']
  { getters & setters } 

    function get_Visual: DNVisual;
    function get_Size: DDN.System.Windows.Common.DNSize;
    function get_BleedBox: DDN.System.Windows.Common.DNRect;
    function get_ContentBox: DDN.System.Windows.Common.DNRect;

  { events } 

    procedure add_PageDestroyed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageDestroyed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Visual: DNVisual read get_Visual;
    property Size: DDN.System.Windows.Common.DNSize read get_Size;
    property BleedBox: DDN.System.Windows.Common.DNRect read get_BleedBox;
    property ContentBox: DDN.System.Windows.Common.DNRect read get_ContentBox;
  end;

  TDNDocumentPage = class(TDNGenericImport<DNDocumentPageClass, DNDocumentPage>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDocumentPaginatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14C459EA-6E60-5E64-95B5-6DD2A1875304}']
  end;

  [DNTypeName('System.Windows.Documents.DocumentPaginator')]
  DNDocumentPaginator = interface(DDN.mscorlib.DNObject)
  ['{DEBF2109-D538-34BE-94A9-ED46CABAFB92}']
  { getters & setters } 

    function get_IsPageCountValid: Boolean;
    function get_PageCount: Int32;
    function get_PageSize: DDN.System.Windows.Common.DNSize;
    procedure set_PageSize(value: DDN.System.Windows.Common.DNSize);
    function get_Source: DNIDocumentPaginatorSource;

  { events } 

    procedure add_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure remove_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure add_ComputePageCountCompleted(value: DDN.System.Windows.Common.DNAsyncCompletedEventHandler);
    procedure remove_ComputePageCountCompleted(value: DDN.System.Windows.Common.DNAsyncCompletedEventHandler);
    procedure add_PagesChanged(value: DNPagesChangedEventHandler);
    procedure remove_PagesChanged(value: DNPagesChangedEventHandler);

  { methods } 

    procedure GetPageAsync(pageNumber: Int32); overload;
    procedure GetPageAsync(pageNumber: Int32; userState: DDN.mscorlib.DNObject); overload;
    procedure ComputePageCount;
    procedure ComputePageCountAsync; overload;
    procedure ComputePageCountAsync(userState: DDN.mscorlib.DNObject); overload;
    procedure CancelAsync(userState: DDN.mscorlib.DNObject);
    function GetPage(pageNumber: Int32): DNDocumentPage;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPageCountValid: Boolean read get_IsPageCountValid;
    property PageCount: Int32 read get_PageCount;
    property PageSize: DDN.System.Windows.Common.DNSize read get_PageSize write set_PageSize;
    property Source: DNIDocumentPaginatorSource read get_Source;
  end;

  TDNDocumentPaginator = class(TDNGenericImport<DNDocumentPaginatorClass, DNDocumentPaginator>) end;

  //-------------namespace: System.Windows.Documents----------------
  DNDynamicDocumentPaginatorClass = interface(DNDocumentPaginatorClass)
  ['{979BB184-82EB-523A-A2F6-790CE77D28C5}']
  end;

  [DNTypeName('System.Windows.Documents.DynamicDocumentPaginator')]
  DNDynamicDocumentPaginator = interface(DNDocumentPaginator)
  ['{B151CA8F-4DDD-33E8-8B95-2C22CFD2A1DB}']
  { getters & setters } 

    function get_IsBackgroundPaginationEnabled: Boolean;
    procedure set_IsBackgroundPaginationEnabled(value: Boolean);
    function get_IsPageCountValid: Boolean;
    function get_PageCount: Int32;
    function get_PageSize: DDN.System.Windows.Common.DNSize;
    procedure set_PageSize(value: DDN.System.Windows.Common.DNSize);
    function get_Source: DNIDocumentPaginatorSource;

  { events } 

    procedure add_GetPageNumberCompleted(value: DNGetPageNumberCompletedEventHandler);
    procedure remove_GetPageNumberCompleted(value: DNGetPageNumberCompletedEventHandler);
    procedure add_PaginationCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PaginationCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_PaginationProgress(value: DNPaginationProgressEventHandler);
    procedure remove_PaginationProgress(value: DNPaginationProgressEventHandler);
    procedure add_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure remove_GetPageCompleted(value: DNGetPageCompletedEventHandler);
    procedure add_ComputePageCountCompleted(value: DDN.System.Windows.Common.DNAsyncCompletedEventHandler);
    procedure remove_ComputePageCountCompleted(value: DDN.System.Windows.Common.DNAsyncCompletedEventHandler);
    procedure add_PagesChanged(value: DNPagesChangedEventHandler);
    procedure remove_PagesChanged(value: DNPagesChangedEventHandler);

  { methods } 

    procedure GetPageNumberAsync(contentPosition: DNContentPosition); overload;
    procedure GetPageNumberAsync(contentPosition: DNContentPosition; userState: DDN.mscorlib.DNObject); overload;
    function GetPageNumber(contentPosition: DNContentPosition): Int32;
    function GetPagePosition(page: DNDocumentPage): DNContentPosition;
    function GetObjectPosition(value: DDN.mscorlib.DNObject): DNContentPosition;
    procedure GetPageAsync(pageNumber: Int32); overload;
    procedure GetPageAsync(pageNumber: Int32; userState: DDN.mscorlib.DNObject); overload;
    procedure ComputePageCount;
    procedure ComputePageCountAsync; overload;
    procedure ComputePageCountAsync(userState: DDN.mscorlib.DNObject); overload;
    procedure CancelAsync(userState: DDN.mscorlib.DNObject);
    function GetPage(pageNumber: Int32): DNDocumentPage;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBackgroundPaginationEnabled: Boolean read get_IsBackgroundPaginationEnabled write set_IsBackgroundPaginationEnabled;
    property IsPageCountValid: Boolean read get_IsPageCountValid;
    property PageCount: Int32 read get_PageCount;
    property PageSize: DDN.System.Windows.Common.DNSize read get_PageSize write set_PageSize;
    property Source: DNIDocumentPaginatorSource read get_Source;
  end;

  TDNDynamicDocumentPaginator = class(TDNGenericImport<DNDynamicDocumentPaginatorClass, DNDynamicDocumentPaginator>) end;

  //-------------namespace: System.Windows.Documents----------------
  [DNTypeName('System.Windows.Documents.IDocumentPaginatorSource')]
  DNIDocumentPaginatorSource = interface(DDN.mscorlib.DNObject)
  ['{2C0C27DF-282F-3225-ADCD-CEC68F890EEB}']
  { getters & setters } 

    function get_DocumentPaginator: DNDocumentPaginator;

  { propertys } 

    property DocumentPaginator: DNDocumentPaginator read get_DocumentPaginator;
  end;

  //-------------namespace: System.Windows----------------
  DNDragDropClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FBF172C0-FF87-50DE-840E-89BDED74E4AE}']
  { static fields getter & setter } 

   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;

  { static methods } 

    {class} procedure AddPreviewQueryContinueDragHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryContinueDragEventHandler);
    {class} procedure RemovePreviewQueryContinueDragHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryContinueDragEventHandler);
    {class} procedure AddQueryContinueDragHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryContinueDragEventHandler);
    {class} procedure RemoveQueryContinueDragHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryContinueDragEventHandler);
    {class} procedure AddPreviewGiveFeedbackHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNGiveFeedbackEventHandler);
    {class} procedure RemovePreviewGiveFeedbackHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNGiveFeedbackEventHandler);
    {class} procedure AddGiveFeedbackHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNGiveFeedbackEventHandler);
    {class} procedure RemoveGiveFeedbackHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNGiveFeedbackEventHandler);
    {class} procedure AddPreviewDragEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemovePreviewDragEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddDragEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemoveDragEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddPreviewDragOverHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemovePreviewDragOverHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddDragOverHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemoveDragOverHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddPreviewDragLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemovePreviewDragLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddDragLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemoveDragLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddPreviewDropHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemovePreviewDropHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure AddDropHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} procedure RemoveDropHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNDragEventHandler);
    {class} function DoDragDrop(dragSource: DDN.System.Windows.Common.DNDependencyObject; data: DDN.mscorlib.DNObject; allowedEffects: DNDragDropEffects): DNDragDropEffects;

  end;

  [DNTypeName('System.Windows.DragDrop')]
  DNDragDrop = interface(DDN.mscorlib.DNObject)
  ['{68BEA415-025C-33F2-8F41-6BB18279646D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDragDrop = class(TDNGenericImport<DNDragDropClass, DNDragDrop>) end;

  //-------------namespace: System.Windows----------------
  DNEventManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA991CAC-F1FD-5077-BF50-D57E8B0F6340}']
  { static methods } 

    {class} procedure RegisterClassHandler(classType: DDN.mscorlib.DNType; routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    {class} procedure RegisterClassHandler(classType: DDN.mscorlib.DNType; routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    {class} function GetRoutedEvents: TArray<DNRoutedEvent>;
    {class} function GetRoutedEventsForOwner(ownerType: DDN.mscorlib.DNType): TArray<DNRoutedEvent>;
    {class} function RegisterRoutedEvent(name: string; routingStrategy: DNRoutingStrategy; handlerType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNRoutedEvent;

  end;

  [DNTypeName('System.Windows.EventManager')]
  DNEventManager = interface(DDN.mscorlib.DNObject)
  ['{AC8323BF-2C30-3A3E-BE71-AB17004DDA46}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventManager = class(TDNGenericImport<DNEventManagerClass, DNEventManager>) end;

  //-------------namespace: System.Windows----------------
  DNEventPrivateKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E6650E5-BB61-5299-95D4-546F046BF638}']
  { constructors } 

    {class} function init: DNEventPrivateKey;

  end;

  [DNTypeName('System.Windows.EventPrivateKey')]
  DNEventPrivateKey = interface(DDN.mscorlib.DNObject)
  ['{E4A64762-74CB-3285-954C-059897CF34DE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventPrivateKey = class(TDNGenericImport<DNEventPrivateKeyClass, DNEventPrivateKey>) end;

  //-------------namespace: System.Windows----------------
  DNEventRouteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3CA674A7-6705-5252-A980-1AC78788CFEC}']
  { constructors } 

    {class} function init(routedEvent: DNRoutedEvent): DNEventRoute;

  end;

  [DNTypeName('System.Windows.EventRoute')]
  DNEventRoute = interface(DDN.mscorlib.DNObject)
  ['{1A05639F-12DC-3701-88E4-9B42694F8BCF}']
  { methods } 

    procedure PushBranchNode(node: DDN.mscorlib.DNObject; source: DDN.mscorlib.DNObject);
    function PopBranchNode: DDN.mscorlib.DNObject;
    function PeekBranchNode: DDN.mscorlib.DNObject;
    function PeekBranchSource: DDN.mscorlib.DNObject;
    procedure Add(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventRoute = class(TDNGenericImport<DNEventRouteClass, DNEventRoute>) end;

  //-------------namespace: System.Windows----------------
  DNFontStretchesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D744FCEC-B518-5CDC-966C-88AB07614911}']
  { static getter & setter } 

    {class} function get_UltraCondensed: DNFontStretch;
    {class} function get_ExtraCondensed: DNFontStretch;
    {class} function get_Condensed: DNFontStretch;
    {class} function get_SemiCondensed: DNFontStretch;
    {class} function get_Normal: DNFontStretch;
    {class} function get_Medium: DNFontStretch;
    {class} function get_SemiExpanded: DNFontStretch;
    {class} function get_Expanded: DNFontStretch;
    {class} function get_ExtraExpanded: DNFontStretch;
    {class} function get_UltraExpanded: DNFontStretch;

  { static propertys } 

    {class} property UltraCondensed: DNFontStretch read get_UltraCondensed;
    {class} property ExtraCondensed: DNFontStretch read get_ExtraCondensed;
    {class} property Condensed: DNFontStretch read get_Condensed;
    {class} property SemiCondensed: DNFontStretch read get_SemiCondensed;
    {class} property Normal: DNFontStretch read get_Normal;
    {class} property Medium: DNFontStretch read get_Medium;
    {class} property SemiExpanded: DNFontStretch read get_SemiExpanded;
    {class} property Expanded: DNFontStretch read get_Expanded;
    {class} property ExtraExpanded: DNFontStretch read get_ExtraExpanded;
    {class} property UltraExpanded: DNFontStretch read get_UltraExpanded;
  end;

  [DNTypeName('System.Windows.FontStretches')]
  DNFontStretches = interface(DDN.mscorlib.DNObject)
  ['{037F3F4C-536A-311C-82CD-38C4415F6839}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontStretches = class(TDNGenericImport<DNFontStretchesClass, DNFontStretches>) end;

  //-------------namespace: System.Windows----------------
  DNFontStylesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A6A716C-15DB-5842-AC50-F2A4B5462AA6}']
  { static getter & setter } 

    {class} function get_Normal: DNFontStyle;
    {class} function get_Oblique: DNFontStyle;
    {class} function get_Italic: DNFontStyle;

  { static propertys } 

    {class} property Normal: DNFontStyle read get_Normal;
    {class} property Oblique: DNFontStyle read get_Oblique;
    {class} property Italic: DNFontStyle read get_Italic;
  end;

  [DNTypeName('System.Windows.FontStyles')]
  DNFontStyles = interface(DDN.mscorlib.DNObject)
  ['{60F0E2EA-D9E7-3934-BDE8-5A1018BD2FC0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontStyles = class(TDNGenericImport<DNFontStylesClass, DNFontStyles>) end;

  //-------------namespace: System.Windows----------------
  DNFontWeightsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2574105D-D553-5588-A137-23622C74F971}']
  { static getter & setter } 

    {class} function get_Thin: DNFontWeight;
    {class} function get_ExtraLight: DNFontWeight;
    {class} function get_UltraLight: DNFontWeight;
    {class} function get_Light: DNFontWeight;
    {class} function get_Normal: DNFontWeight;
    {class} function get_Regular: DNFontWeight;
    {class} function get_Medium: DNFontWeight;
    {class} function get_DemiBold: DNFontWeight;
    {class} function get_SemiBold: DNFontWeight;
    {class} function get_Bold: DNFontWeight;
    {class} function get_ExtraBold: DNFontWeight;
    {class} function get_UltraBold: DNFontWeight;
    {class} function get_Black: DNFontWeight;
    {class} function get_Heavy: DNFontWeight;
    {class} function get_ExtraBlack: DNFontWeight;
    {class} function get_UltraBlack: DNFontWeight;

  { static propertys } 

    {class} property Thin: DNFontWeight read get_Thin;
    {class} property ExtraLight: DNFontWeight read get_ExtraLight;
    {class} property UltraLight: DNFontWeight read get_UltraLight;
    {class} property Light: DNFontWeight read get_Light;
    {class} property Normal: DNFontWeight read get_Normal;
    {class} property Regular: DNFontWeight read get_Regular;
    {class} property Medium: DNFontWeight read get_Medium;
    {class} property DemiBold: DNFontWeight read get_DemiBold;
    {class} property SemiBold: DNFontWeight read get_SemiBold;
    {class} property Bold: DNFontWeight read get_Bold;
    {class} property ExtraBold: DNFontWeight read get_ExtraBold;
    {class} property UltraBold: DNFontWeight read get_UltraBold;
    {class} property Black: DNFontWeight read get_Black;
    {class} property Heavy: DNFontWeight read get_Heavy;
    {class} property ExtraBlack: DNFontWeight read get_ExtraBlack;
    {class} property UltraBlack: DNFontWeight read get_UltraBlack;
  end;

  [DNTypeName('System.Windows.FontWeights')]
  DNFontWeights = interface(DDN.mscorlib.DNObject)
  ['{D23D9C4A-2E72-3E3C-9C37-0F59BB84EE74}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontWeights = class(TDNGenericImport<DNFontWeightsClass, DNFontWeights>) end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IContentHost')]
  DNIContentHost = interface(DDN.mscorlib.DNObject)
  ['{2EC1F188-C6B8-3E63-9C53-E56F1DA62005}']
  { getters & setters } 

    function get_HostedElements: DDN.mscorlib.DNIEnumerator<DNIInputElement>;

  { methods } 

    function InputHitTest(point: DDN.System.Windows.Common.DNPoint): DNIInputElement;
    procedure OnChildDesiredSizeChanged(child: DNUIElement);

  { propertys } 

    property HostedElements: DDN.mscorlib.DNIEnumerator<DNIInputElement> read get_HostedElements;
  end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IDataObject')]
  DNIDataObject = interface(DDN.mscorlib.DNObject)
  ['{FE4FF803-496E-3A49-AF00-13B2CC182476}']
  { methods } 

    function GetData(format: string): DDN.mscorlib.DNObject; overload;
    function GetData(format: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetData(format: string; autoConvert: Boolean): DDN.mscorlib.DNObject; overload;
    function GetDataPresent(format: string): Boolean; overload;
    function GetDataPresent(format: DDN.mscorlib.DNType): Boolean; overload;
    function GetDataPresent(format: string; autoConvert: Boolean): Boolean; overload;
    function GetFormats: TArray<string>; overload;
    function GetFormats(autoConvert: Boolean): TArray<string>; overload;
    procedure SetData(data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: DDN.mscorlib.DNType; data: DDN.mscorlib.DNObject); overload;
    procedure SetData(format: string; data: DDN.mscorlib.DNObject; autoConvert: Boolean); overload;

  end;

  //-------------namespace: System.Windows----------------
  [DNTypeName('System.Windows.IInputElement')]
  DNIInputElement = interface(DDN.mscorlib.DNObject)
  ['{E911D80F-B218-3D27-B373-2610591CC88F}']
  { getters & setters } 

    function get_IsMouseOver: Boolean;
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsEnabled: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);

  { events } 

    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);

  { methods } 

    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;

  { propertys } 

    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsEnabled: Boolean read get_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
  end;

  //-------------namespace: System.Windows.Ink----------------
  DNDrawingAttributeIdsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43D1B85B-B0CF-5F77-AF21-E09DF6357456}']
  { static fields getter & setter } 

   function __fakeFieldGet_Color: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_StylusTip: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_StylusTipTransform: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_StylusHeight: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_StylusWidth: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_DrawingFlags: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_IsHighlighter: DDN.mscorlib.DNGuid;

  { static fields } 

    {class} property Color: DDN.mscorlib.DNGuid read __fakeFieldGet_Color;
    {class} property StylusTip: DDN.mscorlib.DNGuid read __fakeFieldGet_StylusTip;
    {class} property StylusTipTransform: DDN.mscorlib.DNGuid read __fakeFieldGet_StylusTipTransform;
    {class} property StylusHeight: DDN.mscorlib.DNGuid read __fakeFieldGet_StylusHeight;
    {class} property StylusWidth: DDN.mscorlib.DNGuid read __fakeFieldGet_StylusWidth;
    {class} property DrawingFlags: DDN.mscorlib.DNGuid read __fakeFieldGet_DrawingFlags;
    {class} property IsHighlighter: DDN.mscorlib.DNGuid read __fakeFieldGet_IsHighlighter;

  end;

  [DNTypeName('System.Windows.Ink.DrawingAttributeIds')]
  DNDrawingAttributeIds = interface(DDN.mscorlib.DNObject)
  ['{C1A87D71-C76A-3CD4-8292-1ACA5D5E1801}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDrawingAttributeIds = class(TDNGenericImport<DNDrawingAttributeIdsClass, DNDrawingAttributeIds>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNDrawingAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C21A15BC-717E-55C4-A005-695CB1362411}']
  { constructors } 

    {class} function init: DNDrawingAttributes;

  { static fields getter & setter } 

   function __fakeFieldGet_MinHeight: Double;
   function __fakeFieldGet_MinWidth: Double;
   function __fakeFieldGet_MaxHeight: Double;
   function __fakeFieldGet_MaxWidth: Double;

  { static fields } 

    {class} property MinHeight: Double read __fakeFieldGet_MinHeight;
    {class} property MinWidth: Double read __fakeFieldGet_MinWidth;
    {class} property MaxHeight: Double read __fakeFieldGet_MaxHeight;
    {class} property MaxWidth: Double read __fakeFieldGet_MaxWidth;

  end;

  [DNTypeName('System.Windows.Ink.DrawingAttributes')]
  DNDrawingAttributes = interface(DDN.mscorlib.DNObject)
  ['{8F89EA2D-867D-3064-A244-B02120975AE1}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_StylusTip: DNStylusTip;
    procedure set_StylusTip(value: DNStylusTip);
    function get_StylusTipTransform: DDN.System.Windows.Common.DNMatrix;
    procedure set_StylusTipTransform(value: DDN.System.Windows.Common.DNMatrix);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_FitToCurve: Boolean;
    procedure set_FitToCurve(value: Boolean);
    function get_IgnorePressure: Boolean;
    procedure set_IgnorePressure(value: Boolean);
    function get_IsHighlighter: Boolean;
    procedure set_IsHighlighter(value: Boolean);

  { events } 

    procedure add_AttributeChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_AttributeChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);

  { methods } 

    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function Clone: DNDrawingAttributes;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property StylusTip: DNStylusTip read get_StylusTip write set_StylusTip;
    property StylusTipTransform: DDN.System.Windows.Common.DNMatrix read get_StylusTipTransform write set_StylusTipTransform;
    property Height: Double read get_Height write set_Height;
    property Width: Double read get_Width write set_Width;
    property FitToCurve: Boolean read get_FitToCurve write set_FitToCurve;
    property IgnorePressure: Boolean read get_IgnorePressure write set_IgnorePressure;
    property IsHighlighter: Boolean read get_IsHighlighter write set_IsHighlighter;
  end;

  TDNDrawingAttributes = class(TDNGenericImport<DNDrawingAttributesClass, DNDrawingAttributes>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNGestureRecognitionResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2670918D-FC38-5041-8F98-A55CF80CF729}']
  end;

  [DNTypeName('System.Windows.Ink.GestureRecognitionResult')]
  DNGestureRecognitionResult = interface(DDN.mscorlib.DNObject)
  ['{3123EF8C-09D5-331B-B3A3-1BD492F1EFF0}']
  { getters & setters } 

    function get_RecognitionConfidence: DNRecognitionConfidence;
    function get_ApplicationGesture: DNApplicationGesture;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RecognitionConfidence: DNRecognitionConfidence read get_RecognitionConfidence;
    property ApplicationGesture: DNApplicationGesture read get_ApplicationGesture;
  end;

  TDNGestureRecognitionResult = class(TDNGenericImport<DNGestureRecognitionResultClass, DNGestureRecognitionResult>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNIncrementalHitTesterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{91AB8EBB-0329-5341-AFAE-5AF19E8193DC}']
  end;

  [DNTypeName('System.Windows.Ink.IncrementalHitTester')]
  DNIncrementalHitTester = interface(DDN.mscorlib.DNObject)
  ['{0E18397A-C074-36AC-BD60-E619822B69DE}']
  { getters & setters } 

    function get_IsValid: Boolean;

  { methods } 

    procedure AddPoints(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>); overload;
    procedure AddPoint(point: DDN.System.Windows.Common.DNPoint);
    procedure AddPoints(stylusPoints: DNStylusPointCollection); overload;
    procedure EndHitTesting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
  end;

  TDNIncrementalHitTester = class(TDNGenericImport<DNIncrementalHitTesterClass, DNIncrementalHitTester>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNIncrementalLassoHitTesterClass = interface(DNIncrementalHitTesterClass)
  ['{B5AA74C6-5669-5F7B-8606-ED367527F83B}']
  end;

  [DNTypeName('System.Windows.Ink.IncrementalLassoHitTester')]
  DNIncrementalLassoHitTester = interface(DNIncrementalHitTester)
  ['{1D9132EC-CAEF-3F33-9C28-DA24E13F59ED}']
  { getters & setters } 

    function get_IsValid: Boolean;

  { events } 

    procedure add_SelectionChanged(value: DNLassoSelectionChangedEventHandler);
    procedure remove_SelectionChanged(value: DNLassoSelectionChangedEventHandler);

  { methods } 

    procedure AddPoints(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>); overload;
    procedure AddPoint(point: DDN.System.Windows.Common.DNPoint);
    procedure AddPoints(stylusPoints: DNStylusPointCollection); overload;
    procedure EndHitTesting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
  end;

  TDNIncrementalLassoHitTester = class(TDNGenericImport<DNIncrementalLassoHitTesterClass, DNIncrementalLassoHitTester>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNIncrementalStrokeHitTesterClass = interface(DNIncrementalHitTesterClass)
  ['{B84F7763-0E75-52B6-A3C7-498361FBAD0F}']
  end;

  [DNTypeName('System.Windows.Ink.IncrementalStrokeHitTester')]
  DNIncrementalStrokeHitTester = interface(DNIncrementalHitTester)
  ['{5B0CD6BE-37AF-3D61-8F90-4F099AE8F9C6}']
  { getters & setters } 

    function get_IsValid: Boolean;

  { events } 

    procedure add_StrokeHit(value: DNStrokeHitEventHandler);
    procedure remove_StrokeHit(value: DNStrokeHitEventHandler);

  { methods } 

    procedure AddPoints(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>); overload;
    procedure AddPoint(point: DDN.System.Windows.Common.DNPoint);
    procedure AddPoints(stylusPoints: DNStylusPointCollection); overload;
    procedure EndHitTesting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
  end;

  TDNIncrementalStrokeHitTester = class(TDNGenericImport<DNIncrementalStrokeHitTesterClass, DNIncrementalStrokeHitTester>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStrokeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DABA871C-26C9-527D-9F1A-99F29FFBF8D8}']
  { constructors } 

    {class} function init(stylusPoints: DNStylusPointCollection): DNStroke; overload;
    {class} function init(stylusPoints: DNStylusPointCollection; drawingAttributes: DNDrawingAttributes): DNStroke; overload;

  end;

  [DNTypeName('System.Windows.Ink.Stroke')]
  DNStroke = interface(DDN.mscorlib.DNObject)
  ['{C9687816-10DB-3F11-BC75-BC6FEFD7348C}']
  { getters & setters } 

    function get_DrawingAttributes: DNDrawingAttributes;
    procedure set_DrawingAttributes(value: DNDrawingAttributes);
    function get_StylusPoints: DNStylusPointCollection;
    procedure set_StylusPoints(value: DNStylusPointCollection);

  { events } 

    procedure add_DrawingAttributesChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_DrawingAttributesChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_DrawingAttributesReplaced(value: DNDrawingAttributesReplacedEventHandler);
    procedure remove_DrawingAttributesReplaced(value: DNDrawingAttributesReplacedEventHandler);
    procedure add_StylusPointsReplaced(value: DNStylusPointsReplacedEventHandler);
    procedure remove_StylusPointsReplaced(value: DNStylusPointsReplacedEventHandler);
    procedure add_StylusPointsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_StylusPointsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure remove_PropertyDataChanged(value: DNPropertyDataChangedEventHandler);
    procedure add_Invalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Invalidated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStroke;
    procedure Transform(transformMatrix: DDN.System.Windows.Common.DNMatrix; applyToStylusTip: Boolean);
    procedure AddPropertyData(propertyDataId: DDN.mscorlib.DNGuid; propertyData: DDN.mscorlib.DNObject);
    procedure RemovePropertyData(propertyDataId: DDN.mscorlib.DNGuid);
    function GetPropertyData(propertyDataId: DDN.mscorlib.DNGuid): DDN.mscorlib.DNObject;
    function GetPropertyDataIds: TArray<DDN.mscorlib.DNGuid>;
    function ContainsPropertyData(propertyDataId: DDN.mscorlib.DNGuid): Boolean;
    function GetBounds: DDN.System.Windows.Common.DNRect;
    procedure Draw(context: DNDrawingContext); overload;
    procedure Draw(drawingContext: DNDrawingContext; drawingAttributes: DNDrawingAttributes); overload;
    function GetClipResult(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>): DNStrokeCollection; overload;
    function GetEraseResult(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>): DNStrokeCollection; overload;
    function GetEraseResult(eraserPath: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; eraserShape: DNStylusShape): DNStrokeCollection; overload;
    function HitTest(bounds: DDN.System.Windows.Common.DNRect; percentageWithinBounds: Int32): Boolean; overload;
    function HitTest(lassoPoints: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; percentageWithinLasso: Int32): Boolean; overload;
    function HitTest(path: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; stylusShape: DNStylusShape): Boolean; overload;
    function GetGeometry: DNGeometry; overload;
    function GetGeometry(drawingAttributes: DNDrawingAttributes): DNGeometry; overload;
    function GetBezierStylusPoints: DNStylusPointCollection;
    function GetClipResult(bounds: DDN.System.Windows.Common.DNRect): DNStrokeCollection; overload;
    function GetEraseResult(bounds: DDN.System.Windows.Common.DNRect): DNStrokeCollection; overload;
    function HitTest(point: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function HitTest(point: DDN.System.Windows.Common.DNPoint; diameter: Double): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DrawingAttributes: DNDrawingAttributes read get_DrawingAttributes write set_DrawingAttributes;
    property StylusPoints: DNStylusPointCollection read get_StylusPoints write set_StylusPoints;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNStylusShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC28FA0D-2EC3-5423-9D63-6AE5CA8E7F06}']
  end;

  [DNTypeName('System.Windows.Ink.StylusShape')]
  DNStylusShape = interface(DDN.mscorlib.DNObject)
  ['{87A39C51-2EB0-368A-9D33-3A3C9CB70A1A}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Rotation: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Rotation: Double read get_Rotation;
  end;

  TDNStylusShape = class(TDNGenericImport<DNStylusShapeClass, DNStylusShape>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNEllipseStylusShapeClass = interface(DNStylusShapeClass)
  ['{EB146543-02FE-5D38-B852-8B14C936CC22}']
  { constructors } 

    {class} function init(width: Double; height: Double): DNEllipseStylusShape; overload;
    {class} function init(width: Double; height: Double; rotation: Double): DNEllipseStylusShape; overload;

  end;

  [DNTypeName('System.Windows.Ink.EllipseStylusShape')]
  DNEllipseStylusShape = interface(DNStylusShape)
  ['{370CBCC3-66CB-3067-B96E-C37FC585F1F6}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Rotation: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Rotation: Double read get_Rotation;
  end;

  TDNEllipseStylusShape = class(TDNGenericImport<DNEllipseStylusShapeClass, DNEllipseStylusShape>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNRectangleStylusShapeClass = interface(DNStylusShapeClass)
  ['{74880F19-E257-5B7D-B28D-A54176BB1497}']
  { constructors } 

    {class} function init(width: Double; height: Double): DNRectangleStylusShape; overload;
    {class} function init(width: Double; height: Double; rotation: Double): DNRectangleStylusShape; overload;

  end;

  [DNTypeName('System.Windows.Ink.RectangleStylusShape')]
  DNRectangleStylusShape = interface(DNStylusShape)
  ['{7CDF966D-E145-3152-BC34-327E219A3E07}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Rotation: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Rotation: Double read get_Rotation;
  end;

  TDNRectangleStylusShape = class(TDNGenericImport<DNRectangleStylusShapeClass, DNRectangleStylusShape>) end;

  //-------------namespace: System.Windows.Input----------------
  DNAccessKeyManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{535815F1-C5B8-5EBE-8513-EF10C073A64C}']
  { static fields getter & setter } 

   function __fakeFieldGet_AccessKeyPressedEvent: DNRoutedEvent;

  { static fields } 

    {class} property AccessKeyPressedEvent: DNRoutedEvent read __fakeFieldGet_AccessKeyPressedEvent;

  { static methods } 

    {class} procedure &Register(key: string; element: DNIInputElement);
    {class} procedure Unregister(key: string; element: DNIInputElement);
    {class} function IsKeyRegistered(scope: DDN.mscorlib.DNObject; key: string): Boolean;
    {class} function ProcessKey(scope: DDN.mscorlib.DNObject; key: string; isMultiple: Boolean): Boolean;
    {class} procedure AddAccessKeyPressedHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNAccessKeyPressedEventHandler);
    {class} procedure RemoveAccessKeyPressedHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNAccessKeyPressedEventHandler);

  end;

  [DNTypeName('System.Windows.Input.AccessKeyManager')]
  DNAccessKeyManager = interface(DDN.mscorlib.DNObject)
  ['{6ADF9870-F629-3DBC-9C20-C3936D2A6F53}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAccessKeyManager = class(TDNGenericImport<DNAccessKeyManagerClass, DNAccessKeyManager>) end;

  //-------------namespace: System.Windows.Input----------------
  DNApplicationCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{94ACF32D-5594-54DE-9016-2A5D5E9474C8}']
  { static getter & setter } 

    {class} function get_Cut: DNRoutedUICommand;
    {class} function get_Copy: DNRoutedUICommand;
    {class} function get_Paste: DNRoutedUICommand;
    {class} function get_Delete: DNRoutedUICommand;
    {class} function get_Undo: DNRoutedUICommand;
    {class} function get_Redo: DNRoutedUICommand;
    {class} function get_Find: DNRoutedUICommand;
    {class} function get_Replace: DNRoutedUICommand;
    {class} function get_SelectAll: DNRoutedUICommand;
    {class} function get_Help: DNRoutedUICommand;
    {class} function get_New: DNRoutedUICommand;
    {class} function get_Open: DNRoutedUICommand;
    {class} function get_Close: DNRoutedUICommand;
    {class} function get_Save: DNRoutedUICommand;
    {class} function get_SaveAs: DNRoutedUICommand;
    {class} function get_Print: DNRoutedUICommand;
    {class} function get_CancelPrint: DNRoutedUICommand;
    {class} function get_PrintPreview: DNRoutedUICommand;
    {class} function get_Properties: DNRoutedUICommand;
    {class} function get_ContextMenu: DNRoutedUICommand;
    {class} function get_Stop: DNRoutedUICommand;
    {class} function get_CorrectionList: DNRoutedUICommand;
    {class} function get_NotACommand: DNRoutedUICommand;

  { static propertys } 

    {class} property Cut: DNRoutedUICommand read get_Cut;
    {class} property Copy: DNRoutedUICommand read get_Copy;
    {class} property Paste: DNRoutedUICommand read get_Paste;
    {class} property Delete: DNRoutedUICommand read get_Delete;
    {class} property Undo: DNRoutedUICommand read get_Undo;
    {class} property Redo: DNRoutedUICommand read get_Redo;
    {class} property Find: DNRoutedUICommand read get_Find;
    {class} property Replace: DNRoutedUICommand read get_Replace;
    {class} property SelectAll: DNRoutedUICommand read get_SelectAll;
    {class} property Help: DNRoutedUICommand read get_Help;
    {class} property New: DNRoutedUICommand read get_New;
    {class} property Open: DNRoutedUICommand read get_Open;
    {class} property Close: DNRoutedUICommand read get_Close;
    {class} property Save: DNRoutedUICommand read get_Save;
    {class} property SaveAs: DNRoutedUICommand read get_SaveAs;
    {class} property Print: DNRoutedUICommand read get_Print;
    {class} property CancelPrint: DNRoutedUICommand read get_CancelPrint;
    {class} property PrintPreview: DNRoutedUICommand read get_PrintPreview;
    {class} property Properties: DNRoutedUICommand read get_Properties;
    {class} property ContextMenu: DNRoutedUICommand read get_ContextMenu;
    {class} property Stop: DNRoutedUICommand read get_Stop;
    {class} property CorrectionList: DNRoutedUICommand read get_CorrectionList;
    {class} property NotACommand: DNRoutedUICommand read get_NotACommand;
  end;

  [DNTypeName('System.Windows.Input.ApplicationCommands')]
  DNApplicationCommands = interface(DDN.mscorlib.DNObject)
  ['{996A1C99-8A5C-3B62-8099-4AA834884CC2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNApplicationCommands = class(TDNGenericImport<DNApplicationCommandsClass, DNApplicationCommands>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCommandBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93E7DCB9-B58C-5890-8BDA-0049CB486CF9}']
  { constructors } 

    {class} function init: DNCommandBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand): DNCommandBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand; executed: DNExecutedRoutedEventHandler): DNCommandBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand; executed: DNExecutedRoutedEventHandler; canExecute: DNCanExecuteRoutedEventHandler): DNCommandBinding; overload;

  end;

  [DNTypeName('System.Windows.Input.CommandBinding')]
  DNCommandBinding = interface(DDN.mscorlib.DNObject)
  ['{5F80F0B7-0A17-31D7-9E26-89D1DCC6EC81}']
  { getters & setters } 

    function get_Command: DDN.System.Windows.Common.DNICommand;
    procedure set_Command(value: DDN.System.Windows.Common.DNICommand);

  { events } 

    procedure add_PreviewExecuted(value: DNExecutedRoutedEventHandler);
    procedure remove_PreviewExecuted(value: DNExecutedRoutedEventHandler);
    procedure add_Executed(value: DNExecutedRoutedEventHandler);
    procedure remove_Executed(value: DNExecutedRoutedEventHandler);
    procedure add_PreviewCanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure remove_PreviewCanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure add_CanExecute(value: DNCanExecuteRoutedEventHandler);
    procedure remove_CanExecute(value: DNCanExecuteRoutedEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DDN.System.Windows.Common.DNICommand read get_Command write set_Command;
  end;

  TDNCommandBinding = class(TDNGenericImport<DNCommandBindingClass, DNCommandBinding>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCommandBindingCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC587DC-D91B-5E2C-BC85-F1D09D9AA65D}']
  { constructors } 

    {class} function init: DNCommandBindingCollection; overload;
    {class} function init(commandBindings: DDN.mscorlib.DNIList): DNCommandBindingCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.CommandBindingCollection')]
  DNCommandBindingCollection = interface(DDN.mscorlib.DNObject)
  ['{CECE73B9-FBE8-315E-9C5B-FA571C95A2FD}']
  { getters & setters } 

    function get_Item(index: Int32): DNCommandBinding;
    procedure set_Item(index: Int32; value: DNCommandBinding);
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    function Add(commandBinding: DNCommandBinding): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; commandBinding: DNCommandBinding);
    procedure Remove(commandBinding: DNCommandBinding);
    procedure RemoveAt(index: Int32);
    function &Contains(commandBinding: DNCommandBinding): Boolean;
    procedure CopyTo(commandBindings: TArray<DNCommandBinding>; index: Int32);
    function IndexOf(value: DNCommandBinding): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCommandBinding read get_Item write set_Item; default;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNCommandBindingCollection = class(TDNGenericImport<DNCommandBindingCollectionClass, DNCommandBindingCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCommandManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{769A2D35-08E4-501E-AF55-E72338CCC129}']
  { static fields getter & setter } 

   function __fakeFieldGet_PreviewExecutedEvent: DNRoutedEvent;
   function __fakeFieldGet_ExecutedEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewCanExecuteEvent: DNRoutedEvent;
   function __fakeFieldGet_CanExecuteEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewExecutedEvent: DNRoutedEvent read __fakeFieldGet_PreviewExecutedEvent;
    {class} property ExecutedEvent: DNRoutedEvent read __fakeFieldGet_ExecutedEvent;
    {class} property PreviewCanExecuteEvent: DNRoutedEvent read __fakeFieldGet_PreviewCanExecuteEvent;
    {class} property CanExecuteEvent: DNRoutedEvent read __fakeFieldGet_CanExecuteEvent;

  { static methods } 

    {class} procedure AddPreviewExecutedHandler(element: DNUIElement; handler: DNExecutedRoutedEventHandler);
    {class} procedure RemovePreviewExecutedHandler(element: DNUIElement; handler: DNExecutedRoutedEventHandler);
    {class} procedure AddExecutedHandler(element: DNUIElement; handler: DNExecutedRoutedEventHandler);
    {class} procedure RemoveExecutedHandler(element: DNUIElement; handler: DNExecutedRoutedEventHandler);
    {class} procedure AddPreviewCanExecuteHandler(element: DNUIElement; handler: DNCanExecuteRoutedEventHandler);
    {class} procedure RemovePreviewCanExecuteHandler(element: DNUIElement; handler: DNCanExecuteRoutedEventHandler);
    {class} procedure AddCanExecuteHandler(element: DNUIElement; handler: DNCanExecuteRoutedEventHandler);
    {class} procedure RemoveCanExecuteHandler(element: DNUIElement; handler: DNCanExecuteRoutedEventHandler);
    {class} procedure RegisterClassInputBinding(&type: DDN.mscorlib.DNType; inputBinding: DNInputBinding);
    {class} procedure RegisterClassCommandBinding(&type: DDN.mscorlib.DNType; commandBinding: DNCommandBinding);
    {class} procedure InvalidateRequerySuggested;

  end;

  [DNTypeName('System.Windows.Input.CommandManager')]
  DNCommandManager = interface(DDN.mscorlib.DNObject)
  ['{1AA981E0-2CEE-32A3-AE25-F2055A32EC84}']
  { events } 

    {class} procedure add_RequerySuggested(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_RequerySuggested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCommandManager = class(TDNGenericImport<DNCommandManagerClass, DNCommandManager>) end;

  //-------------namespace: System.Windows.Input----------------
  DNComponentCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{668BA7CD-CD37-53CC-BCA3-C9202A82F415}']
  { static getter & setter } 

    {class} function get_ScrollPageUp: DNRoutedUICommand;
    {class} function get_ScrollPageDown: DNRoutedUICommand;
    {class} function get_ScrollPageLeft: DNRoutedUICommand;
    {class} function get_ScrollPageRight: DNRoutedUICommand;
    {class} function get_ScrollByLine: DNRoutedUICommand;
    {class} function get_MoveLeft: DNRoutedUICommand;
    {class} function get_MoveRight: DNRoutedUICommand;
    {class} function get_MoveUp: DNRoutedUICommand;
    {class} function get_MoveDown: DNRoutedUICommand;
    {class} function get_MoveToHome: DNRoutedUICommand;
    {class} function get_MoveToEnd: DNRoutedUICommand;
    {class} function get_MoveToPageUp: DNRoutedUICommand;
    {class} function get_MoveToPageDown: DNRoutedUICommand;
    {class} function get_ExtendSelectionUp: DNRoutedUICommand;
    {class} function get_ExtendSelectionDown: DNRoutedUICommand;
    {class} function get_ExtendSelectionLeft: DNRoutedUICommand;
    {class} function get_ExtendSelectionRight: DNRoutedUICommand;
    {class} function get_SelectToHome: DNRoutedUICommand;
    {class} function get_SelectToEnd: DNRoutedUICommand;
    {class} function get_SelectToPageUp: DNRoutedUICommand;
    {class} function get_SelectToPageDown: DNRoutedUICommand;
    {class} function get_MoveFocusUp: DNRoutedUICommand;
    {class} function get_MoveFocusDown: DNRoutedUICommand;
    {class} function get_MoveFocusForward: DNRoutedUICommand;
    {class} function get_MoveFocusBack: DNRoutedUICommand;
    {class} function get_MoveFocusPageUp: DNRoutedUICommand;
    {class} function get_MoveFocusPageDown: DNRoutedUICommand;

  { static propertys } 

    {class} property ScrollPageUp: DNRoutedUICommand read get_ScrollPageUp;
    {class} property ScrollPageDown: DNRoutedUICommand read get_ScrollPageDown;
    {class} property ScrollPageLeft: DNRoutedUICommand read get_ScrollPageLeft;
    {class} property ScrollPageRight: DNRoutedUICommand read get_ScrollPageRight;
    {class} property ScrollByLine: DNRoutedUICommand read get_ScrollByLine;
    {class} property MoveLeft: DNRoutedUICommand read get_MoveLeft;
    {class} property MoveRight: DNRoutedUICommand read get_MoveRight;
    {class} property MoveUp: DNRoutedUICommand read get_MoveUp;
    {class} property MoveDown: DNRoutedUICommand read get_MoveDown;
    {class} property MoveToHome: DNRoutedUICommand read get_MoveToHome;
    {class} property MoveToEnd: DNRoutedUICommand read get_MoveToEnd;
    {class} property MoveToPageUp: DNRoutedUICommand read get_MoveToPageUp;
    {class} property MoveToPageDown: DNRoutedUICommand read get_MoveToPageDown;
    {class} property ExtendSelectionUp: DNRoutedUICommand read get_ExtendSelectionUp;
    {class} property ExtendSelectionDown: DNRoutedUICommand read get_ExtendSelectionDown;
    {class} property ExtendSelectionLeft: DNRoutedUICommand read get_ExtendSelectionLeft;
    {class} property ExtendSelectionRight: DNRoutedUICommand read get_ExtendSelectionRight;
    {class} property SelectToHome: DNRoutedUICommand read get_SelectToHome;
    {class} property SelectToEnd: DNRoutedUICommand read get_SelectToEnd;
    {class} property SelectToPageUp: DNRoutedUICommand read get_SelectToPageUp;
    {class} property SelectToPageDown: DNRoutedUICommand read get_SelectToPageDown;
    {class} property MoveFocusUp: DNRoutedUICommand read get_MoveFocusUp;
    {class} property MoveFocusDown: DNRoutedUICommand read get_MoveFocusDown;
    {class} property MoveFocusForward: DNRoutedUICommand read get_MoveFocusForward;
    {class} property MoveFocusBack: DNRoutedUICommand read get_MoveFocusBack;
    {class} property MoveFocusPageUp: DNRoutedUICommand read get_MoveFocusPageUp;
    {class} property MoveFocusPageDown: DNRoutedUICommand read get_MoveFocusPageDown;
  end;

  [DNTypeName('System.Windows.Input.ComponentCommands')]
  DNComponentCommands = interface(DDN.mscorlib.DNObject)
  ['{5232ED2D-2215-3D2B-88FB-B5BEC8BAC2DC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentCommands = class(TDNGenericImport<DNComponentCommandsClass, DNComponentCommands>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCursorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C86D6D15-BEF4-5F22-A7B7-6B33E33D06C1}']
  { constructors } 

    {class} function init(cursorFile: string): DNCursor; overload;
    {class} function init(cursorFile: string; scaleWithDpi: Boolean): DNCursor; overload;
    {class} function init(cursorStream: DDN.mscorlib.DNStream): DNCursor; overload;
    {class} function init(cursorStream: DDN.mscorlib.DNStream; scaleWithDpi: Boolean): DNCursor; overload;

  end;

  [DNTypeName('System.Windows.Input.Cursor')]
  DNCursor = interface(DDN.mscorlib.DNObject)
  ['{2BF4E902-3E22-332A-A540-B6FB76BFE2BC}']
  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNCursor = class(TDNGenericImport<DNCursorClass, DNCursor>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCursorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3858CF83-CBFD-5E45-9B56-712359BAAD6B}']
  { static getter & setter } 

    {class} function get_None: DNCursor;
    {class} function get_No: DNCursor;
    {class} function get_Arrow: DNCursor;
    {class} function get_AppStarting: DNCursor;
    {class} function get_Cross: DNCursor;
    {class} function get_Help: DNCursor;
    {class} function get_IBeam: DNCursor;
    {class} function get_SizeAll: DNCursor;
    {class} function get_SizeNESW: DNCursor;
    {class} function get_SizeNS: DNCursor;
    {class} function get_SizeNWSE: DNCursor;
    {class} function get_SizeWE: DNCursor;
    {class} function get_UpArrow: DNCursor;
    {class} function get_Wait: DNCursor;
    {class} function get_Hand: DNCursor;
    {class} function get_Pen: DNCursor;
    {class} function get_ScrollNS: DNCursor;
    {class} function get_ScrollWE: DNCursor;
    {class} function get_ScrollAll: DNCursor;
    {class} function get_ScrollN: DNCursor;
    {class} function get_ScrollS: DNCursor;
    {class} function get_ScrollW: DNCursor;
    {class} function get_ScrollE: DNCursor;
    {class} function get_ScrollNW: DNCursor;
    {class} function get_ScrollNE: DNCursor;
    {class} function get_ScrollSW: DNCursor;
    {class} function get_ScrollSE: DNCursor;
    {class} function get_ArrowCD: DNCursor;

  { static propertys } 

    {class} property None: DNCursor read get_None;
    {class} property No: DNCursor read get_No;
    {class} property Arrow: DNCursor read get_Arrow;
    {class} property AppStarting: DNCursor read get_AppStarting;
    {class} property Cross: DNCursor read get_Cross;
    {class} property Help: DNCursor read get_Help;
    {class} property IBeam: DNCursor read get_IBeam;
    {class} property SizeAll: DNCursor read get_SizeAll;
    {class} property SizeNESW: DNCursor read get_SizeNESW;
    {class} property SizeNS: DNCursor read get_SizeNS;
    {class} property SizeNWSE: DNCursor read get_SizeNWSE;
    {class} property SizeWE: DNCursor read get_SizeWE;
    {class} property UpArrow: DNCursor read get_UpArrow;
    {class} property Wait: DNCursor read get_Wait;
    {class} property Hand: DNCursor read get_Hand;
    {class} property Pen: DNCursor read get_Pen;
    {class} property ScrollNS: DNCursor read get_ScrollNS;
    {class} property ScrollWE: DNCursor read get_ScrollWE;
    {class} property ScrollAll: DNCursor read get_ScrollAll;
    {class} property ScrollN: DNCursor read get_ScrollN;
    {class} property ScrollS: DNCursor read get_ScrollS;
    {class} property ScrollW: DNCursor read get_ScrollW;
    {class} property ScrollE: DNCursor read get_ScrollE;
    {class} property ScrollNW: DNCursor read get_ScrollNW;
    {class} property ScrollNE: DNCursor read get_ScrollNE;
    {class} property ScrollSW: DNCursor read get_ScrollSW;
    {class} property ScrollSE: DNCursor read get_ScrollSE;
    {class} property ArrowCD: DNCursor read get_ArrowCD;
  end;

  [DNTypeName('System.Windows.Input.Cursors')]
  DNCursors = interface(DDN.mscorlib.DNObject)
  ['{A89421D7-F22D-3052-9289-1B0AC3E4895C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCursors = class(TDNGenericImport<DNCursorsClass, DNCursors>) end;

  //-------------namespace: System.Windows.Input----------------
  DNFocusManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F8664573-F1BF-5599-B01B-4BB885207441}']
  { static fields getter & setter } 

   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_FocusedElementProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsFocusScopeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property FocusedElementProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FocusedElementProperty;
    {class} property IsFocusScopeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFocusScopeProperty;

  { static methods } 

    {class} procedure AddGotFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNRoutedEventHandler);
    {class} procedure RemoveGotFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNRoutedEventHandler);
    {class} procedure AddLostFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNRoutedEventHandler);
    {class} procedure RemoveLostFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNRoutedEventHandler);
    {class} function GetFocusedElement(element: DDN.System.Windows.Common.DNDependencyObject): DNIInputElement;
    {class} procedure SetFocusedElement(element: DDN.System.Windows.Common.DNDependencyObject; value: DNIInputElement);
    {class} function GetIsFocusScope(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetFocusScope(element: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    {class} procedure SetIsFocusScope(element: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);

  end;

  [DNTypeName('System.Windows.Input.FocusManager')]
  DNFocusManager = interface(DDN.mscorlib.DNObject)
  ['{B5841724-2C15-39A4-8A4E-88175DAAFB71}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFocusManager = class(TDNGenericImport<DNFocusManagerClass, DNFocusManager>) end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ICommandSource')]
  DNICommandSource = interface(DDN.mscorlib.DNObject)
  ['{AA1E07A6-6BA6-3E22-94B0-EB015D9199F3}']
  { getters & setters } 

    function get_Command: DDN.System.Windows.Common.DNICommand;
    function get_CommandParameter: DDN.mscorlib.DNObject;
    function get_CommandTarget: DNIInputElement;

  { propertys } 

    property Command: DDN.System.Windows.Common.DNICommand read get_Command;
    property CommandParameter: DDN.mscorlib.DNObject read get_CommandParameter;
    property CommandTarget: DNIInputElement read get_CommandTarget;
  end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.IInputLanguageSource')]
  DNIInputLanguageSource = interface(DDN.mscorlib.DNObject)
  ['{5D570D78-8412-3208-B1ED-65D571CAB476}']
  { getters & setters } 

    function get_CurrentInputLanguage: DDN.mscorlib.DNCultureInfo;
    procedure set_CurrentInputLanguage(value: DDN.mscorlib.DNCultureInfo);
    function get_InputLanguageList: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Initialize;
    procedure Uninitialize;

  { propertys } 

    property CurrentInputLanguage: DDN.mscorlib.DNCultureInfo read get_CurrentInputLanguage write set_CurrentInputLanguage;
    property InputLanguageList: DDN.mscorlib.DNIEnumerable read get_InputLanguageList;
  end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.IManipulator')]
  DNIManipulator = interface(DDN.mscorlib.DNObject)
  ['{4F34DD59-0697-3CE1-AE1B-EF60DE6AF3A3}']
  { getters & setters } 

    function get_Id: Int32;

  { events } 

    procedure add_Updated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Updated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    procedure ManipulationEnded(cancel: Boolean);

  { propertys } 

    property Id: Int32 read get_Id;
  end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaExpansionBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{226B78FC-6417-586A-ACE6-F342BD86FC65}']
  { constructors } 

    {class} function init: DNInertiaExpansionBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaExpansionBehavior')]
  DNInertiaExpansionBehavior = interface(DDN.mscorlib.DNObject)
  ['{37E680F3-41DD-3609-B7EE-1B13BDF66B9D}']
  { getters & setters } 

    function get_InitialVelocity: DDN.System.Windows.Common.DNVector;
    procedure set_InitialVelocity(value: DDN.System.Windows.Common.DNVector);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredExpansion: DDN.System.Windows.Common.DNVector;
    procedure set_DesiredExpansion(value: DDN.System.Windows.Common.DNVector);
    function get_InitialRadius: Double;
    procedure set_InitialRadius(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: DDN.System.Windows.Common.DNVector read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredExpansion: DDN.System.Windows.Common.DNVector read get_DesiredExpansion write set_DesiredExpansion;
    property InitialRadius: Double read get_InitialRadius write set_InitialRadius;
  end;

  TDNInertiaExpansionBehavior = class(TDNGenericImport<DNInertiaExpansionBehaviorClass, DNInertiaExpansionBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaRotationBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{343F250F-1AF2-5088-83C2-0112A09558AC}']
  { constructors } 

    {class} function init: DNInertiaRotationBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaRotationBehavior')]
  DNInertiaRotationBehavior = interface(DDN.mscorlib.DNObject)
  ['{05D3BF22-89BC-32BC-A644-2F846FAFEA89}']
  { getters & setters } 

    function get_InitialVelocity: Double;
    procedure set_InitialVelocity(value: Double);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredRotation: Double;
    procedure set_DesiredRotation(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: Double read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredRotation: Double read get_DesiredRotation write set_DesiredRotation;
  end;

  TDNInertiaRotationBehavior = class(TDNGenericImport<DNInertiaRotationBehaviorClass, DNInertiaRotationBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInertiaTranslationBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0370E3AF-93D6-5EA6-BED2-FB098FAE1719}']
  { constructors } 

    {class} function init: DNInertiaTranslationBehavior;

  end;

  [DNTypeName('System.Windows.Input.InertiaTranslationBehavior')]
  DNInertiaTranslationBehavior = interface(DDN.mscorlib.DNObject)
  ['{CA6370BE-CEE1-3A91-A321-842A551328AB}']
  { getters & setters } 

    function get_InitialVelocity: DDN.System.Windows.Common.DNVector;
    procedure set_InitialVelocity(value: DDN.System.Windows.Common.DNVector);
    function get_DesiredDeceleration: Double;
    procedure set_DesiredDeceleration(value: Double);
    function get_DesiredDisplacement: Double;
    procedure set_DesiredDisplacement(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialVelocity: DDN.System.Windows.Common.DNVector read get_InitialVelocity write set_InitialVelocity;
    property DesiredDeceleration: Double read get_DesiredDeceleration write set_DesiredDeceleration;
    property DesiredDisplacement: Double read get_DesiredDisplacement write set_DesiredDisplacement;
  end;

  TDNInertiaTranslationBehavior = class(TDNGenericImport<DNInertiaTranslationBehaviorClass, DNInertiaTranslationBehavior>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputBindingCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8ECEB0D-20B0-5697-99F9-BB8C46BF757A}']
  { constructors } 

    {class} function init: DNInputBindingCollection; overload;
    {class} function init(inputBindings: DDN.mscorlib.DNIList): DNInputBindingCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.InputBindingCollection')]
  DNInputBindingCollection = interface(DDN.mscorlib.DNObject)
  ['{F03B5403-1481-3B80-9459-193B635F4F51}']
  { getters & setters } 

    function get_Item(index: Int32): DNInputBinding;
    procedure set_Item(index: Int32; value: DNInputBinding);
    function get_IsSynchronized: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Add(inputBinding: DNInputBinding): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; inputBinding: DNInputBinding);
    procedure Remove(inputBinding: DNInputBinding);
    procedure RemoveAt(index: Int32);
    function &Contains(key: DNInputBinding): Boolean;
    procedure CopyTo(inputBindings: TArray<DNInputBinding>; index: Int32);
    function IndexOf(value: DNInputBinding): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNInputBinding read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNInputBindingCollection = class(TDNGenericImport<DNInputBindingCollectionClass, DNInputBindingCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputGestureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E0610158-853A-5D6B-9E05-5A4C4050CD00}']
  end;

  [DNTypeName('System.Windows.Input.InputGesture')]
  DNInputGesture = interface(DDN.mscorlib.DNObject)
  ['{774B4468-0C4D-3B33-BA17-8165C7294397}']
  { methods } 

    function Matches(targetElement: DDN.mscorlib.DNObject; inputEventArgs: DNInputEventArgs): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInputGesture = class(TDNGenericImport<DNInputGestureClass, DNInputGesture>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyGestureClass = interface(DNInputGestureClass)
  ['{56F86A61-9B15-50FA-A00B-0793802E010F}']
  { constructors } 

    {class} function init(key: DDN.System.Windows.Common.DNKey): DNKeyGesture; overload;
    {class} function init(key: DDN.System.Windows.Common.DNKey; modifiers: DDN.System.Windows.Common.DNModifierKeys): DNKeyGesture; overload;
    {class} function init(key: DDN.System.Windows.Common.DNKey; modifiers: DDN.System.Windows.Common.DNModifierKeys; displayString: string): DNKeyGesture; overload;

  end;

  [DNTypeName('System.Windows.Input.KeyGesture')]
  DNKeyGesture = interface(DNInputGesture)
  ['{B05E78C1-80CE-3F2D-A163-6A5C2DCEB1C9}']
  { getters & setters } 

    function get_Modifiers: DDN.System.Windows.Common.DNModifierKeys;
    function get_Key: DDN.System.Windows.Common.DNKey;
    function get_DisplayString: string;

  { methods } 

    function GetDisplayStringForCulture(culture: DDN.mscorlib.DNCultureInfo): string;
    function Matches(targetElement: DDN.mscorlib.DNObject; inputEventArgs: DNInputEventArgs): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Modifiers: DDN.System.Windows.Common.DNModifierKeys read get_Modifiers;
    property Key: DDN.System.Windows.Common.DNKey read get_Key;
    property DisplayString: string read get_DisplayString;
  end;

  TDNKeyGesture = class(TDNGenericImport<DNKeyGestureClass, DNKeyGesture>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseGestureClass = interface(DNInputGestureClass)
  ['{7B0570E4-5CA1-5488-83E9-90AF32FB1905}']
  { constructors } 

    {class} function init: DNMouseGesture; overload;
    {class} function init(mouseAction: DNMouseAction): DNMouseGesture; overload;
    {class} function init(mouseAction: DNMouseAction; modifiers: DDN.System.Windows.Common.DNModifierKeys): DNMouseGesture; overload;

  end;

  [DNTypeName('System.Windows.Input.MouseGesture')]
  DNMouseGesture = interface(DNInputGesture)
  ['{FAED2CC5-6E56-359F-A958-2E7CF275D0F1}']
  { getters & setters } 

    function get_MouseAction: DNMouseAction;
    procedure set_MouseAction(value: DNMouseAction);
    function get_Modifiers: DDN.System.Windows.Common.DNModifierKeys;
    procedure set_Modifiers(value: DDN.System.Windows.Common.DNModifierKeys);

  { methods } 

    function Matches(targetElement: DDN.mscorlib.DNObject; inputEventArgs: DNInputEventArgs): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MouseAction: DNMouseAction read get_MouseAction write set_MouseAction;
    property Modifiers: DDN.System.Windows.Common.DNModifierKeys read get_Modifiers write set_Modifiers;
  end;

  TDNMouseGesture = class(TDNGenericImport<DNMouseGestureClass, DNMouseGesture>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputGestureCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{863CAFFF-B375-592A-AE8C-5929F381676B}']
  { constructors } 

    {class} function init: DNInputGestureCollection; overload;
    {class} function init(inputGestures: DDN.mscorlib.DNIList): DNInputGestureCollection; overload;

  end;

  [DNTypeName('System.Windows.Input.InputGestureCollection')]
  DNInputGestureCollection = interface(DDN.mscorlib.DNObject)
  ['{3BECDBC3-6B0C-3958-A8B8-9BDFA769EDA2}']
  { getters & setters } 

    function get_Item(index: Int32): DNInputGesture;
    procedure set_Item(index: Int32; value: DNInputGesture);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function Add(inputGesture: DNInputGesture): Int32;
    procedure AddRange(collection: DDN.mscorlib.DNICollection);
    procedure Insert(index: Int32; inputGesture: DNInputGesture);
    procedure Remove(inputGesture: DNInputGesture);
    function &Contains(key: DNInputGesture): Boolean;
    procedure CopyTo(inputGestures: TArray<DNInputGesture>; index: Int32);
    procedure Seal;
    function IndexOf(value: DNInputGesture): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNInputGesture read get_Item write set_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
  end;

  TDNInputGestureCollection = class(TDNGenericImport<DNInputGestureCollectionClass, DNInputGestureCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93EB1A15-F457-5930-8EEE-E181DF0544B4}']
  { constructors } 

    {class} function init: DNInputScope;

  end;

  [DNTypeName('System.Windows.Input.InputScope')]
  DNInputScope = interface(DDN.mscorlib.DNObject)
  ['{49D19BEF-B167-350B-803E-F36F268ED92B}']
  { getters & setters } 

    function get_Names: DDN.mscorlib.DNIList;
    function get_SrgsMarkup: string;
    procedure set_SrgsMarkup(value: string);
    function get_RegularExpression: string;
    procedure set_RegularExpression(value: string);
    function get_PhraseList: DDN.mscorlib.DNIList;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Names: DDN.mscorlib.DNIList read get_Names;
    property SrgsMarkup: string read get_SrgsMarkup write set_SrgsMarkup;
    property RegularExpression: string read get_RegularExpression write set_RegularExpression;
    property PhraseList: DDN.mscorlib.DNIList read get_PhraseList;
  end;

  TDNInputScope = class(TDNGenericImport<DNInputScopeClass, DNInputScope>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50F7E020-9ECF-5EE8-B4CD-2BE9DFE8FF42}']
  { constructors } 

    {class} function init: DNInputScopeName; overload;
    {class} function init(nameValue: DNInputScopeNameValue): DNInputScopeName; overload;

  end;

  [DNTypeName('System.Windows.Input.InputScopeName')]
  DNInputScopeName = interface(DDN.mscorlib.DNObject)
  ['{5AED6907-AD1B-3B7D-9BEE-D08630FA748B}']
  { getters & setters } 

    function get_NameValue: DNInputScopeNameValue;
    procedure set_NameValue(value: DNInputScopeNameValue);

  { methods } 

    procedure AddChild(value: DDN.mscorlib.DNObject);
    procedure AddText(name: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NameValue: DNInputScopeNameValue read get_NameValue write set_NameValue;
  end;

  TDNInputScopeName = class(TDNGenericImport<DNInputScopeNameClass, DNInputScopeName>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputScopePhraseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{16D97137-E996-5C7F-82E2-03C9DBC93408}']
  { constructors } 

    {class} function init: DNInputScopePhrase; overload;
    {class} function init(name: string): DNInputScopePhrase; overload;

  end;

  [DNTypeName('System.Windows.Input.InputScopePhrase')]
  DNInputScopePhrase = interface(DDN.mscorlib.DNObject)
  ['{03C25B86-DB63-3327-A465-8E28D2FB64A7}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    procedure AddChild(value: DDN.mscorlib.DNObject);
    procedure AddText(name: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
  end;

  TDNInputScopePhrase = class(TDNGenericImport<DNInputScopePhraseClass, DNInputScopePhrase>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC6418D0-EA63-54DA-8D28-C37F76D64FA2}']
  { static getter & setter } 

    {class} function get_FocusedElement: DNIInputElement;
    {class} function get_DefaultRestoreFocusMode: DNRestoreFocusMode;
    {class} procedure set_DefaultRestoreFocusMode(value: DNRestoreFocusMode);
    {class} function get_Modifiers: DDN.System.Windows.Common.DNModifierKeys;
    {class} function get_PrimaryDevice: DNKeyboardDevice;

  { static fields getter & setter } 

   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyboardInputProviderAcquireFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyboardInputProviderAcquireFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property PreviewKeyboardInputProviderAcquireFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyboardInputProviderAcquireFocusEvent;
    {class} property KeyboardInputProviderAcquireFocusEvent: DNRoutedEvent read __fakeFieldGet_KeyboardInputProviderAcquireFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;

  { static methods } 

    {class} procedure AddPreviewKeyDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure RemovePreviewKeyDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure AddKeyDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure RemoveKeyDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure AddPreviewKeyUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure RemovePreviewKeyUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure AddKeyUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure RemoveKeyUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyEventHandler);
    {class} procedure AddPreviewGotKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure RemovePreviewGotKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure AddPreviewKeyboardInputProviderAcquireFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardInputProviderAcquireFocusEventHandler);
    {class} procedure RemovePreviewKeyboardInputProviderAcquireFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardInputProviderAcquireFocusEventHandler);
    {class} procedure AddKeyboardInputProviderAcquireFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardInputProviderAcquireFocusEventHandler);
    {class} procedure RemoveKeyboardInputProviderAcquireFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardInputProviderAcquireFocusEventHandler);
    {class} procedure AddGotKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure RemoveGotKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure AddPreviewLostKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure RemovePreviewLostKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure AddLostKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure RemoveLostKeyboardFocusHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNKeyboardFocusChangedEventHandler);
    {class} procedure ClearFocus;
    {class} function Focus(element: DNIInputElement): DNIInputElement;
    {class} function IsKeyDown(key: DDN.System.Windows.Common.DNKey): Boolean;
    {class} function IsKeyUp(key: DDN.System.Windows.Common.DNKey): Boolean;
    {class} function IsKeyToggled(key: DDN.System.Windows.Common.DNKey): Boolean;
    {class} function GetKeyStates(key: DDN.System.Windows.Common.DNKey): DNKeyStates;

  { static propertys } 

    {class} property FocusedElement: DNIInputElement read get_FocusedElement;
    {class} property DefaultRestoreFocusMode: DNRestoreFocusMode read get_DefaultRestoreFocusMode write set_DefaultRestoreFocusMode;
    {class} property Modifiers: DDN.System.Windows.Common.DNModifierKeys read get_Modifiers;
    {class} property PrimaryDevice: DNKeyboardDevice read get_PrimaryDevice;
  end;

  [DNTypeName('System.Windows.Input.Keyboard')]
  DNKeyboard = interface(DDN.mscorlib.DNObject)
  ['{AA33685E-C4A2-30A1-94D6-EA5CE6D509E4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyboard = class(TDNGenericImport<DNKeyboardClass, DNKeyboard>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{410DBF0F-66DA-5F84-9003-4D596C23642E}']
  { static methods } 

    {class} function IsManipulationActive(element: DNUIElement): Boolean;
    {class} procedure StartInertia(element: DNUIElement);
    {class} procedure CompleteManipulation(element: DNUIElement);
    {class} procedure SetManipulationMode(element: DNUIElement; mode: DNManipulationModes);
    {class} function GetManipulationMode(element: DNUIElement): DNManipulationModes;
    {class} procedure SetManipulationContainer(element: DNUIElement; container: DNIInputElement);
    {class} function GetManipulationContainer(element: DNUIElement): DNIInputElement;
    {class} procedure SetManipulationPivot(element: DNUIElement; pivot: DNManipulationPivot);
    {class} function GetManipulationPivot(element: DNUIElement): DNManipulationPivot;
    {class} procedure AddManipulator(element: DNUIElement; manipulator: DNIManipulator);
    {class} procedure RemoveManipulator(element: DNUIElement; manipulator: DNIManipulator);
    {class} procedure SetManipulationParameter(element: DNUIElement; parameter: DDN.System.Windows.Common.DNManipulationParameters2D);

  end;

  [DNTypeName('System.Windows.Input.Manipulation')]
  DNManipulation = interface(DDN.mscorlib.DNObject)
  ['{8C7171D5-AFD6-3931-B8A7-FC5BD3BFD218}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNManipulation = class(TDNGenericImport<DNManipulationClass, DNManipulation>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationDeltaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07612F26-9AF4-573E-8AE5-D99C45082CC4}']
  { constructors } 

    {class} function init(translation: DDN.System.Windows.Common.DNVector; rotation: Double; scale: DDN.System.Windows.Common.DNVector; expansion: DDN.System.Windows.Common.DNVector): DNManipulationDelta;

  end;

  [DNTypeName('System.Windows.Input.ManipulationDelta')]
  DNManipulationDelta = interface(DDN.mscorlib.DNObject)
  ['{B2B6CDF4-128E-3AF4-9E1E-FF8F1C3ADE03}']
  { getters & setters } 

    function get_Translation: DDN.System.Windows.Common.DNVector;
    function get_Rotation: Double;
    function get_Scale: DDN.System.Windows.Common.DNVector;
    function get_Expansion: DDN.System.Windows.Common.DNVector;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Translation: DDN.System.Windows.Common.DNVector read get_Translation;
    property Rotation: Double read get_Rotation;
    property Scale: DDN.System.Windows.Common.DNVector read get_Scale;
    property Expansion: DDN.System.Windows.Common.DNVector read get_Expansion;
  end;

  TDNManipulationDelta = class(TDNGenericImport<DNManipulationDeltaClass, DNManipulationDelta>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationPivotClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C01D1081-6AC8-51D3-A2EF-4E5CA964AFCB}']
  { constructors } 

    {class} function init: DNManipulationPivot; overload;
    {class} function init(center: DDN.System.Windows.Common.DNPoint; radius: Double): DNManipulationPivot; overload;

  end;

  [DNTypeName('System.Windows.Input.ManipulationPivot')]
  DNManipulationPivot = interface(DDN.mscorlib.DNObject)
  ['{52C1848C-41B3-3B40-8B44-1A851ED1BCEA}']
  { getters & setters } 

    function get_Center: DDN.System.Windows.Common.DNPoint;
    procedure set_Center(value: DDN.System.Windows.Common.DNPoint);
    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Center: DDN.System.Windows.Common.DNPoint read get_Center write set_Center;
    property Radius: Double read get_Radius write set_Radius;
  end;

  TDNManipulationPivot = class(TDNGenericImport<DNManipulationPivotClass, DNManipulationPivot>) end;

  //-------------namespace: System.Windows.Input----------------
  DNManipulationVelocitiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3B8A4CE-37F6-5BEB-ACDD-EA332CA13CD4}']
  { constructors } 

    {class} function init(linearVelocity: DDN.System.Windows.Common.DNVector; angularVelocity: Double; expansionVelocity: DDN.System.Windows.Common.DNVector): DNManipulationVelocities;

  end;

  [DNTypeName('System.Windows.Input.ManipulationVelocities')]
  DNManipulationVelocities = interface(DDN.mscorlib.DNObject)
  ['{A1C58042-F68B-305B-BB33-738C09716379}']
  { getters & setters } 

    function get_LinearVelocity: DDN.System.Windows.Common.DNVector;
    function get_AngularVelocity: Double;
    function get_ExpansionVelocity: DDN.System.Windows.Common.DNVector;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinearVelocity: DDN.System.Windows.Common.DNVector read get_LinearVelocity;
    property AngularVelocity: Double read get_AngularVelocity;
    property ExpansionVelocity: DDN.System.Windows.Common.DNVector read get_ExpansionVelocity;
  end;

  TDNManipulationVelocities = class(TDNGenericImport<DNManipulationVelocitiesClass, DNManipulationVelocities>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMediaCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A01EBA24-F014-5875-96DC-3B4CF94CDE34}']
  { static getter & setter } 

    {class} function get_Play: DNRoutedUICommand;
    {class} function get_Pause: DNRoutedUICommand;
    {class} function get_Stop: DNRoutedUICommand;
    {class} function get_Record: DNRoutedUICommand;
    {class} function get_NextTrack: DNRoutedUICommand;
    {class} function get_PreviousTrack: DNRoutedUICommand;
    {class} function get_FastForward: DNRoutedUICommand;
    {class} function get_Rewind: DNRoutedUICommand;
    {class} function get_ChannelUp: DNRoutedUICommand;
    {class} function get_ChannelDown: DNRoutedUICommand;
    {class} function get_TogglePlayPause: DNRoutedUICommand;
    {class} function get_Select: DNRoutedUICommand;
    {class} function get_IncreaseVolume: DNRoutedUICommand;
    {class} function get_DecreaseVolume: DNRoutedUICommand;
    {class} function get_MuteVolume: DNRoutedUICommand;
    {class} function get_IncreaseTreble: DNRoutedUICommand;
    {class} function get_DecreaseTreble: DNRoutedUICommand;
    {class} function get_IncreaseBass: DNRoutedUICommand;
    {class} function get_DecreaseBass: DNRoutedUICommand;
    {class} function get_BoostBass: DNRoutedUICommand;
    {class} function get_IncreaseMicrophoneVolume: DNRoutedUICommand;
    {class} function get_DecreaseMicrophoneVolume: DNRoutedUICommand;
    {class} function get_MuteMicrophoneVolume: DNRoutedUICommand;
    {class} function get_ToggleMicrophoneOnOff: DNRoutedUICommand;

  { static propertys } 

    {class} property Play: DNRoutedUICommand read get_Play;
    {class} property Pause: DNRoutedUICommand read get_Pause;
    {class} property Stop: DNRoutedUICommand read get_Stop;
    {class} property &Record: DNRoutedUICommand read get_Record;
    {class} property NextTrack: DNRoutedUICommand read get_NextTrack;
    {class} property PreviousTrack: DNRoutedUICommand read get_PreviousTrack;
    {class} property FastForward: DNRoutedUICommand read get_FastForward;
    {class} property Rewind: DNRoutedUICommand read get_Rewind;
    {class} property ChannelUp: DNRoutedUICommand read get_ChannelUp;
    {class} property ChannelDown: DNRoutedUICommand read get_ChannelDown;
    {class} property TogglePlayPause: DNRoutedUICommand read get_TogglePlayPause;
    {class} property Select: DNRoutedUICommand read get_Select;
    {class} property IncreaseVolume: DNRoutedUICommand read get_IncreaseVolume;
    {class} property DecreaseVolume: DNRoutedUICommand read get_DecreaseVolume;
    {class} property MuteVolume: DNRoutedUICommand read get_MuteVolume;
    {class} property IncreaseTreble: DNRoutedUICommand read get_IncreaseTreble;
    {class} property DecreaseTreble: DNRoutedUICommand read get_DecreaseTreble;
    {class} property IncreaseBass: DNRoutedUICommand read get_IncreaseBass;
    {class} property DecreaseBass: DNRoutedUICommand read get_DecreaseBass;
    {class} property BoostBass: DNRoutedUICommand read get_BoostBass;
    {class} property IncreaseMicrophoneVolume: DNRoutedUICommand read get_IncreaseMicrophoneVolume;
    {class} property DecreaseMicrophoneVolume: DNRoutedUICommand read get_DecreaseMicrophoneVolume;
    {class} property MuteMicrophoneVolume: DNRoutedUICommand read get_MuteMicrophoneVolume;
    {class} property ToggleMicrophoneOnOff: DNRoutedUICommand read get_ToggleMicrophoneOnOff;
  end;

  [DNTypeName('System.Windows.Input.MediaCommands')]
  DNMediaCommands = interface(DDN.mscorlib.DNObject)
  ['{D0CF5BE3-24EB-3547-B06A-2B635A0C16E7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaCommands = class(TDNGenericImport<DNMediaCommandsClass, DNMediaCommands>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FC65DC6-4813-573B-9315-D49F85685ECD}']
  { static getter & setter } 

    {class} function get_DirectlyOver: DNIInputElement;
    {class} function get_Captured: DNIInputElement;
    {class} function get_OverrideCursor: DNCursor;
    {class} procedure set_OverrideCursor(value: DNCursor);
    {class} function get_LeftButton: DNMouseButtonState;
    {class} function get_RightButton: DNMouseButtonState;
    {class} function get_MiddleButton: DNMouseButtonState;
    {class} function get_XButton1: DNMouseButtonState;
    {class} function get_XButton2: DNMouseButtonState;
    {class} function get_PrimaryDevice: DNMouseDevice;

  { static fields getter & setter } 

   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseDownOutsideCapturedElementEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpOutsideCapturedElementEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelDeltaForOneLine: Int32;

  { static fields } 

    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseDownOutsideCapturedElementEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownOutsideCapturedElementEvent;
    {class} property PreviewMouseUpOutsideCapturedElementEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpOutsideCapturedElementEvent;
    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property MouseWheelDeltaForOneLine: Int32 read __fakeFieldGet_MouseWheelDeltaForOneLine;

  { static methods } 

    {class} procedure AddPreviewMouseMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemovePreviewMouseMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddMouseMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemoveMouseMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddPreviewMouseDownOutsideCapturedElementHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemovePreviewMouseDownOutsideCapturedElementHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddPreviewMouseUpOutsideCapturedElementHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemovePreviewMouseUpOutsideCapturedElementHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddPreviewMouseDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemovePreviewMouseDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddMouseDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemoveMouseDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddPreviewMouseUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemovePreviewMouseUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddMouseUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure RemoveMouseUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseButtonEventHandler);
    {class} procedure AddPreviewMouseWheelHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseWheelEventHandler);
    {class} procedure RemovePreviewMouseWheelHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseWheelEventHandler);
    {class} procedure AddMouseWheelHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseWheelEventHandler);
    {class} procedure RemoveMouseWheelHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseWheelEventHandler);
    {class} procedure AddMouseEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemoveMouseEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddMouseLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemoveMouseLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddGotMouseCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemoveGotMouseCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddLostMouseCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure RemoveLostMouseCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNMouseEventHandler);
    {class} procedure AddQueryCursorHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryCursorEventHandler);
    {class} procedure RemoveQueryCursorHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNQueryCursorEventHandler);
    {class} function Capture(element: DNIInputElement): Boolean; overload;
    {class} function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    {class} function GetIntermediatePoints(relativeTo: DNIInputElement; points: TArray<DDN.System.Windows.Common.DNPoint>): Int32;
    {class} function SetCursor(cursor: DNCursor): Boolean;
    {class} function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    {class} procedure Synchronize;
    {class} procedure UpdateCursor;

  { static propertys } 

    {class} property DirectlyOver: DNIInputElement read get_DirectlyOver;
    {class} property Captured: DNIInputElement read get_Captured;
    {class} property OverrideCursor: DNCursor read get_OverrideCursor write set_OverrideCursor;
    {class} property LeftButton: DNMouseButtonState read get_LeftButton;
    {class} property RightButton: DNMouseButtonState read get_RightButton;
    {class} property MiddleButton: DNMouseButtonState read get_MiddleButton;
    {class} property XButton1: DNMouseButtonState read get_XButton1;
    {class} property XButton2: DNMouseButtonState read get_XButton2;
    {class} property PrimaryDevice: DNMouseDevice read get_PrimaryDevice;
  end;

  [DNTypeName('System.Windows.Input.Mouse')]
  DNMouse = interface(DDN.mscorlib.DNObject)
  ['{52932A8E-854B-3C72-B527-3623244A6B47}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMouse = class(TDNGenericImport<DNMouseClass, DNMouse>)
  public const
   MouseWheelDeltaForOneLine = 120;
  end;

  //-------------namespace: System.Windows.Input----------------
  DNNavigationCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C322B36B-12A5-50F4-8295-AB65A700EAB1}']
  { static getter & setter } 

    {class} function get_BrowseBack: DNRoutedUICommand;
    {class} function get_BrowseForward: DNRoutedUICommand;
    {class} function get_BrowseHome: DNRoutedUICommand;
    {class} function get_BrowseStop: DNRoutedUICommand;
    {class} function get_Refresh: DNRoutedUICommand;
    {class} function get_Favorites: DNRoutedUICommand;
    {class} function get_Search: DNRoutedUICommand;
    {class} function get_IncreaseZoom: DNRoutedUICommand;
    {class} function get_DecreaseZoom: DNRoutedUICommand;
    {class} function get_Zoom: DNRoutedUICommand;
    {class} function get_NextPage: DNRoutedUICommand;
    {class} function get_PreviousPage: DNRoutedUICommand;
    {class} function get_FirstPage: DNRoutedUICommand;
    {class} function get_LastPage: DNRoutedUICommand;
    {class} function get_GoToPage: DNRoutedUICommand;
    {class} function get_NavigateJournal: DNRoutedUICommand;

  { static propertys } 

    {class} property BrowseBack: DNRoutedUICommand read get_BrowseBack;
    {class} property BrowseForward: DNRoutedUICommand read get_BrowseForward;
    {class} property BrowseHome: DNRoutedUICommand read get_BrowseHome;
    {class} property BrowseStop: DNRoutedUICommand read get_BrowseStop;
    {class} property Refresh: DNRoutedUICommand read get_Refresh;
    {class} property Favorites: DNRoutedUICommand read get_Favorites;
    {class} property Search: DNRoutedUICommand read get_Search;
    {class} property IncreaseZoom: DNRoutedUICommand read get_IncreaseZoom;
    {class} property DecreaseZoom: DNRoutedUICommand read get_DecreaseZoom;
    {class} property Zoom: DNRoutedUICommand read get_Zoom;
    {class} property NextPage: DNRoutedUICommand read get_NextPage;
    {class} property PreviousPage: DNRoutedUICommand read get_PreviousPage;
    {class} property FirstPage: DNRoutedUICommand read get_FirstPage;
    {class} property LastPage: DNRoutedUICommand read get_LastPage;
    {class} property GoToPage: DNRoutedUICommand read get_GoToPage;
    {class} property NavigateJournal: DNRoutedUICommand read get_NavigateJournal;
  end;

  [DNTypeName('System.Windows.Input.NavigationCommands')]
  DNNavigationCommands = interface(DDN.mscorlib.DNObject)
  ['{F92FBFA5-5C99-38FE-8C64-7101362C5306}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNavigationCommands = class(TDNGenericImport<DNNavigationCommandsClass, DNNavigationCommands>) end;

  //-------------namespace: System.Windows.Input----------------
  DNRoutedCommandClass = interface(DDN.mscorlib.DNObjectClass)
  ['{40A08F71-6D7C-522B-82A0-53E2A9FABEBF}']
  { constructors } 

    {class} function init: DNRoutedCommand; overload;
    {class} function init(name: string; ownerType: DDN.mscorlib.DNType): DNRoutedCommand; overload;
    {class} function init(name: string; ownerType: DDN.mscorlib.DNType; inputGestures: DNInputGestureCollection): DNRoutedCommand; overload;

  end;

  [DNTypeName('System.Windows.Input.RoutedCommand')]
  DNRoutedCommand = interface(DDN.mscorlib.DNObject)
  ['{1FC3D874-3517-3248-84A3-77C56D4481B2}']
  { getters & setters } 

    function get_Name: string;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_InputGestures: DNInputGestureCollection;

  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    property InputGestures: DNInputGestureCollection read get_InputGestures;
  end;

  TDNRoutedCommand = class(TDNGenericImport<DNRoutedCommandClass, DNRoutedCommand>) end;

  //-------------namespace: System.Windows.Input----------------
  DNRoutedUICommandClass = interface(DNRoutedCommandClass)
  ['{25763247-A920-567A-94CF-0D16766871AE}']
  { constructors } 

    {class} function init: DNRoutedUICommand; overload;
    {class} function init(text: string; name: string; ownerType: DDN.mscorlib.DNType): DNRoutedUICommand; overload;
    {class} function init(text: string; name: string; ownerType: DDN.mscorlib.DNType; inputGestures: DNInputGestureCollection): DNRoutedUICommand; overload;

  end;

  [DNTypeName('System.Windows.Input.RoutedUICommand')]
  DNRoutedUICommand = interface(DNRoutedCommand)
  ['{CF38A5B5-80C8-385D-BA40-8E85793A7448}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Name: string;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_InputGestures: DNInputGestureCollection;

  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject; target: DNIInputElement);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Name: string read get_Name;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    property InputGestures: DNInputGestureCollection read get_InputGestures;
  end;

  TDNRoutedUICommand = class(TDNGenericImport<DNRoutedUICommandClass, DNRoutedUICommand>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStagingAreaInputItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69FCDE57-B0C9-53E5-BCAD-8051C22589D2}']
  end;

  [DNTypeName('System.Windows.Input.StagingAreaInputItem')]
  DNStagingAreaInputItem = interface(DDN.mscorlib.DNObject)
  ['{853F066B-2C7F-3BC5-8070-C80BFCB9BA47}']
  { getters & setters } 

    function get_Input: DNInputEventArgs;

  { methods } 

    function GetData(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetData(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNInputEventArgs read get_Input;
  end;

  TDNStagingAreaInputItem = class(TDNGenericImport<DNStagingAreaInputItemClass, DNStagingAreaInputItem>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusClass = interface(DDN.mscorlib.DNObjectClass)
  ['{94C0C0E8-8244-5931-BE92-40BDEF0C170D}']
  { static getter & setter } 

    {class} function get_DirectlyOver: DNIInputElement;
    {class} function get_Captured: DNIInputElement;
    {class} function get_CurrentStylusDevice: DNStylusDevice;

  { static fields getter & setter } 

   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_IsPressAndHoldEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsFlicksEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsTapFeedbackEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsTouchFeedbackEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property IsPressAndHoldEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsPressAndHoldEnabledProperty;
    {class} property IsFlicksEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFlicksEnabledProperty;
    {class} property IsTapFeedbackEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsTapFeedbackEnabledProperty;
    {class} property IsTouchFeedbackEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsTouchFeedbackEnabledProperty;

  { static methods } 

    {class} procedure AddPreviewStylusDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusDownEventHandler);
    {class} procedure RemovePreviewStylusDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusDownEventHandler);
    {class} procedure AddStylusDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusDownEventHandler);
    {class} procedure RemoveStylusDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusDownEventHandler);
    {class} procedure AddPreviewStylusUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemovePreviewStylusUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddPreviewStylusMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemovePreviewStylusMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddPreviewStylusInAirMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemovePreviewStylusInAirMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusInAirMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusInAirMoveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusEnterHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusLeaveHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddPreviewStylusInRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemovePreviewStylusInRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusInRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusInRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddPreviewStylusOutOfRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemovePreviewStylusOutOfRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusOutOfRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveStylusOutOfRangeHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddPreviewStylusSystemGestureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusSystemGestureEventHandler);
    {class} procedure RemovePreviewStylusSystemGestureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusSystemGestureEventHandler);
    {class} procedure AddStylusSystemGestureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusSystemGestureEventHandler);
    {class} procedure RemoveStylusSystemGestureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusSystemGestureEventHandler);
    {class} procedure AddGotStylusCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveGotStylusCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddLostStylusCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure RemoveLostStylusCaptureHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusEventHandler);
    {class} procedure AddStylusButtonDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure RemoveStylusButtonDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure AddStylusButtonUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure RemoveStylusButtonUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure AddPreviewStylusButtonDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure RemovePreviewStylusButtonDownHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure AddPreviewStylusButtonUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} procedure RemovePreviewStylusButtonUpHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNStylusButtonEventHandler);
    {class} function GetIsPressAndHoldEnabled(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsFlicksEnabled(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsTapFeedbackEnabled(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsTouchFeedbackEnabled(element: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function Capture(element: DNIInputElement): Boolean; overload;
    {class} function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    {class} procedure Synchronize;
    {class} procedure SetIsPressAndHoldEnabled(element: DDN.System.Windows.Common.DNDependencyObject; enabled: Boolean);
    {class} procedure SetIsFlicksEnabled(element: DDN.System.Windows.Common.DNDependencyObject; enabled: Boolean);
    {class} procedure SetIsTapFeedbackEnabled(element: DDN.System.Windows.Common.DNDependencyObject; enabled: Boolean);
    {class} procedure SetIsTouchFeedbackEnabled(element: DDN.System.Windows.Common.DNDependencyObject; enabled: Boolean);

  { static propertys } 

    {class} property DirectlyOver: DNIInputElement read get_DirectlyOver;
    {class} property Captured: DNIInputElement read get_Captured;
    {class} property CurrentStylusDevice: DNStylusDevice read get_CurrentStylusDevice;
  end;

  [DNTypeName('System.Windows.Input.Stylus')]
  DNStylus = interface(DDN.mscorlib.DNObject)
  ['{6778C0D4-D304-3A72-98FC-BEBDAA09568F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStylus = class(TDNGenericImport<DNStylusClass, DNStylus>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusButtonClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0DB43040-9A06-59D8-871F-CD5718258251}']
  end;

  [DNTypeName('System.Windows.Input.StylusButton')]
  DNStylusButton = interface(DDN.mscorlib.DNObject)
  ['{6A821801-B038-3029-A91E-3690A0003D20}']
  { getters & setters } 

    function get_Guid: DDN.mscorlib.DNGuid;
    function get_StylusButtonState: DNStylusButtonState;
    function get_Name: string;
    function get_StylusDevice: DNStylusDevice;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Guid: DDN.mscorlib.DNGuid read get_Guid;
    property StylusButtonState: DNStylusButtonState read get_StylusButtonState;
    property Name: string read get_Name;
    property StylusDevice: DNStylusDevice read get_StylusDevice;
  end;

  TDNStylusButton = class(TDNGenericImport<DNStylusButtonClass, DNStylusButton>) end;

  //-------------namespace: System.Windows.Input.StylusPlugIns----------------
  DNRawStylusInputClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D3AAC32-7A5C-5DFC-AE98-45F02DEA882B}']
  end;

  [DNTypeName('System.Windows.Input.StylusPlugIns.RawStylusInput')]
  DNRawStylusInput = interface(DDN.mscorlib.DNObject)
  ['{0082F4F9-238F-3339-B5AF-F30EC73405EC}']
  { getters & setters } 

    function get_StylusDeviceId: Int32;
    function get_TabletDeviceId: Int32;
    function get_Timestamp: Int32;

  { methods } 

    function GetStylusPoints: DNStylusPointCollection;
    procedure SetStylusPoints(stylusPoints: DNStylusPointCollection);
    procedure NotifyWhenProcessed(callbackData: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StylusDeviceId: Int32 read get_StylusDeviceId;
    property TabletDeviceId: Int32 read get_TabletDeviceId;
    property Timestamp: Int32 read get_Timestamp;
  end;

  TDNRawStylusInput = class(TDNGenericImport<DNRawStylusInputClass, DNRawStylusInput>) end;

  //-------------namespace: System.Windows.Input.StylusPlugIns----------------
  DNStylusPlugInClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F0A1700-59ED-5C5E-863A-BD26D636E291}']
  end;

  [DNTypeName('System.Windows.Input.StylusPlugIns.StylusPlugIn')]
  DNStylusPlugIn = interface(DDN.mscorlib.DNObject)
  ['{2EB414FC-168B-3864-9C07-8DAE5E341CA8}']
  { getters & setters } 

    function get_Element: DNUIElement;
    function get_ElementBounds: DDN.System.Windows.Common.DNRect;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsActiveForInput: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Element: DNUIElement read get_Element;
    property ElementBounds: DDN.System.Windows.Common.DNRect read get_ElementBounds;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsActiveForInput: Boolean read get_IsActiveForInput;
  end;

  TDNStylusPlugIn = class(TDNGenericImport<DNStylusPlugInClass, DNStylusPlugIn>) end;

  //-------------namespace: System.Windows.Input.StylusPlugIns----------------
  DNDynamicRendererClass = interface(DNStylusPlugInClass)
  ['{8A6B17E3-0E6E-53C0-B178-A6D239BBD113}']
  { constructors } 

    {class} function init: DNDynamicRenderer;

  end;

  [DNTypeName('System.Windows.Input.StylusPlugIns.DynamicRenderer')]
  DNDynamicRenderer = interface(DNStylusPlugIn)
  ['{59D07F9E-D5CE-3DE5-A436-1D577ECAD344}']
  { getters & setters } 

    function get_RootVisual: DNVisual;
    function get_DrawingAttributes: DNDrawingAttributes;
    procedure set_DrawingAttributes(value: DNDrawingAttributes);
    function get_Element: DNUIElement;
    function get_ElementBounds: DDN.System.Windows.Common.DNRect;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsActiveForInput: Boolean;

  { methods } 

    procedure Reset(stylusDevice: DNStylusDevice; stylusPoints: DNStylusPointCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RootVisual: DNVisual read get_RootVisual;
    property DrawingAttributes: DNDrawingAttributes read get_DrawingAttributes write set_DrawingAttributes;
    property Element: DNUIElement read get_Element;
    property ElementBounds: DDN.System.Windows.Common.DNRect read get_ElementBounds;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsActiveForInput: Boolean read get_IsActiveForInput;
  end;

  TDNDynamicRenderer = class(TDNGenericImport<DNDynamicRendererClass, DNDynamicRenderer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BFDE9B3-786F-531E-BC78-F441ADDC0840}']
  { constructors } 

    {class} function init: DNStylusPointDescription; overload;
    {class} function init(stylusPointPropertyInfos: DDN.mscorlib.DNIEnumerable<DNStylusPointPropertyInfo>): DNStylusPointDescription; overload;

  { static methods } 

    {class} function AreCompatible(stylusPointDescription1: DNStylusPointDescription; stylusPointDescription2: DNStylusPointDescription): Boolean;
    {class} function GetCommonDescription(stylusPointDescription: DNStylusPointDescription; stylusPointDescriptionPreserveInfo: DNStylusPointDescription): DNStylusPointDescription;

  end;

  [DNTypeName('System.Windows.Input.StylusPointDescription')]
  DNStylusPointDescription = interface(DDN.mscorlib.DNObject)
  ['{63E67F2F-9E93-32A1-92B8-2550C3DBB018}']
  { getters & setters } 

    function get_PropertyCount: Int32;

  { methods } 

    function HasProperty(stylusPointProperty: DNStylusPointProperty): Boolean;
    function GetPropertyInfo(stylusPointProperty: DNStylusPointProperty): DNStylusPointPropertyInfo;
    function IsSubsetOf(stylusPointDescriptionSuperset: DNStylusPointDescription): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyCount: Int32 read get_PropertyCount;
  end;

  TDNStylusPointDescription = class(TDNGenericImport<DNStylusPointDescriptionClass, DNStylusPointDescription>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA47DDB4-0D47-5F59-9B23-73119A88C106}']
  { static fields getter & setter } 

   function __fakeFieldGet_X: DNStylusPointProperty;
   function __fakeFieldGet_Y: DNStylusPointProperty;
   function __fakeFieldGet_Z: DNStylusPointProperty;
   function __fakeFieldGet_Width: DNStylusPointProperty;
   function __fakeFieldGet_Height: DNStylusPointProperty;
   function __fakeFieldGet_SystemTouch: DNStylusPointProperty;
   function __fakeFieldGet_PacketStatus: DNStylusPointProperty;
   function __fakeFieldGet_SerialNumber: DNStylusPointProperty;
   function __fakeFieldGet_NormalPressure: DNStylusPointProperty;
   function __fakeFieldGet_TangentPressure: DNStylusPointProperty;
   function __fakeFieldGet_ButtonPressure: DNStylusPointProperty;
   function __fakeFieldGet_XTiltOrientation: DNStylusPointProperty;
   function __fakeFieldGet_YTiltOrientation: DNStylusPointProperty;
   function __fakeFieldGet_AzimuthOrientation: DNStylusPointProperty;
   function __fakeFieldGet_AltitudeOrientation: DNStylusPointProperty;
   function __fakeFieldGet_TwistOrientation: DNStylusPointProperty;
   function __fakeFieldGet_PitchRotation: DNStylusPointProperty;
   function __fakeFieldGet_RollRotation: DNStylusPointProperty;
   function __fakeFieldGet_YawRotation: DNStylusPointProperty;
   function __fakeFieldGet_TipButton: DNStylusPointProperty;
   function __fakeFieldGet_BarrelButton: DNStylusPointProperty;
   function __fakeFieldGet_SecondaryTipButton: DNStylusPointProperty;

  { static fields } 

    {class} property X: DNStylusPointProperty read __fakeFieldGet_X;
    {class} property Y: DNStylusPointProperty read __fakeFieldGet_Y;
    {class} property Z: DNStylusPointProperty read __fakeFieldGet_Z;
    {class} property Width: DNStylusPointProperty read __fakeFieldGet_Width;
    {class} property Height: DNStylusPointProperty read __fakeFieldGet_Height;
    {class} property SystemTouch: DNStylusPointProperty read __fakeFieldGet_SystemTouch;
    {class} property PacketStatus: DNStylusPointProperty read __fakeFieldGet_PacketStatus;
    {class} property SerialNumber: DNStylusPointProperty read __fakeFieldGet_SerialNumber;
    {class} property NormalPressure: DNStylusPointProperty read __fakeFieldGet_NormalPressure;
    {class} property TangentPressure: DNStylusPointProperty read __fakeFieldGet_TangentPressure;
    {class} property ButtonPressure: DNStylusPointProperty read __fakeFieldGet_ButtonPressure;
    {class} property XTiltOrientation: DNStylusPointProperty read __fakeFieldGet_XTiltOrientation;
    {class} property YTiltOrientation: DNStylusPointProperty read __fakeFieldGet_YTiltOrientation;
    {class} property AzimuthOrientation: DNStylusPointProperty read __fakeFieldGet_AzimuthOrientation;
    {class} property AltitudeOrientation: DNStylusPointProperty read __fakeFieldGet_AltitudeOrientation;
    {class} property TwistOrientation: DNStylusPointProperty read __fakeFieldGet_TwistOrientation;
    {class} property PitchRotation: DNStylusPointProperty read __fakeFieldGet_PitchRotation;
    {class} property RollRotation: DNStylusPointProperty read __fakeFieldGet_RollRotation;
    {class} property YawRotation: DNStylusPointProperty read __fakeFieldGet_YawRotation;
    {class} property TipButton: DNStylusPointProperty read __fakeFieldGet_TipButton;
    {class} property BarrelButton: DNStylusPointProperty read __fakeFieldGet_BarrelButton;
    {class} property SecondaryTipButton: DNStylusPointProperty read __fakeFieldGet_SecondaryTipButton;

  end;

  [DNTypeName('System.Windows.Input.StylusPointProperties')]
  DNStylusPointProperties = interface(DDN.mscorlib.DNObject)
  ['{0B45343A-E2F7-3144-855C-BD199FF4EEDE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStylusPointProperties = class(TDNGenericImport<DNStylusPointPropertiesClass, DNStylusPointProperties>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F38D09D0-3B70-53BA-BC4E-D16F80A2EAF6}']
  { constructors } 

    {class} function init(identifier: DDN.mscorlib.DNGuid; isButton: Boolean): DNStylusPointProperty;

  end;

  [DNTypeName('System.Windows.Input.StylusPointProperty')]
  DNStylusPointProperty = interface(DDN.mscorlib.DNObject)
  ['{450B2ECD-099B-315E-B078-C34B903E7070}']
  { getters & setters } 

    function get_Id: DDN.mscorlib.DNGuid;
    function get_IsButton: Boolean;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Id: DDN.mscorlib.DNGuid read get_Id;
    property IsButton: Boolean read get_IsButton;
  end;

  TDNStylusPointProperty = class(TDNGenericImport<DNStylusPointPropertyClass, DNStylusPointProperty>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusPointPropertyInfoClass = interface(DNStylusPointPropertyClass)
  ['{A81F0D1D-CCF3-5354-8FFA-34F80C44E764}']
  { constructors } 

    {class} function init(stylusPointProperty: DNStylusPointProperty): DNStylusPointPropertyInfo; overload;
    {class} function init(stylusPointProperty: DNStylusPointProperty; minimum: Int32; maximum: Int32; &unit: DNStylusPointPropertyUnit; resolution: Single): DNStylusPointPropertyInfo; overload;

  end;

  [DNTypeName('System.Windows.Input.StylusPointPropertyInfo')]
  DNStylusPointPropertyInfo = interface(DNStylusPointProperty)
  ['{D2CE1899-B30E-39A3-BDDB-B66FEFD36850}']
  { getters & setters } 

    function get_Minimum: Int32;
    function get_Maximum: Int32;
    function get_Resolution: Single;
    function get_Unit: DNStylusPointPropertyUnit;
    function get_Id: DDN.mscorlib.DNGuid;
    function get_IsButton: Boolean;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Minimum: Int32 read get_Minimum;
    property Maximum: Int32 read get_Maximum;
    property Resolution: Single read get_Resolution;
    property &Unit: DNStylusPointPropertyUnit read get_Unit;
    property Id: DDN.mscorlib.DNGuid read get_Id;
    property IsButton: Boolean read get_IsButton;
  end;

  TDNStylusPointPropertyInfo = class(TDNGenericImport<DNStylusPointPropertyInfoClass, DNStylusPointPropertyInfo>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTabletClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90436028-FD12-5F08-974F-7EEEF37675F1}']
  { static getter & setter } 

    {class} function get_CurrentTabletDevice: DNTabletDevice;
    {class} function get_TabletDevices: DNTabletDeviceCollection;

  { static propertys } 

    {class} property CurrentTabletDevice: DNTabletDevice read get_CurrentTabletDevice;
    {class} property TabletDevices: DNTabletDeviceCollection read get_TabletDevices;
  end;

  [DNTypeName('System.Windows.Input.Tablet')]
  DNTablet = interface(DDN.mscorlib.DNObject)
  ['{B0510391-B5BD-3D27-9ED4-6A820A2446DB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTablet = class(TDNGenericImport<DNTabletClass, DNTablet>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTabletDeviceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{655D2833-5B0C-5C60-A035-848374E30ED8}']
  { constructors } 

    {class} function init: DNTabletDeviceCollection;

  end;

  [DNTypeName('System.Windows.Input.TabletDeviceCollection')]
  DNTabletDeviceCollection = interface(DDN.mscorlib.DNObject)
  ['{3F036E7F-B5F3-302F-A76C-471170A49262}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTabletDevice;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure CopyTo(&array: TArray<DNTabletDevice>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabletDevice read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNTabletDeviceCollection = class(TDNGenericImport<DNTabletDeviceCollectionClass, DNTabletDeviceCollection>) end;

  //-------------namespace: System.Windows.Input.StylusWisp----------------
  DNWispTabletDeviceCollectionClass = interface(DNTabletDeviceCollectionClass)
  ['{C1F7BA34-5FE4-53D7-B9D7-EC0FE6049469}']
  end;

  [DNTypeName('System.Windows.Input.StylusWisp.WispTabletDeviceCollection')]
  DNWispTabletDeviceCollection = interface(DNTabletDeviceCollection)
  ['{93686A0A-3D71-370A-AB2F-D381E80ED917}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTabletDevice;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure CopyTo(&array: TArray<DNTabletDevice>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabletDevice read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNWispTabletDeviceCollection = class(TDNGenericImport<DNWispTabletDeviceCollectionClass, DNWispTabletDeviceCollection>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{964A6332-A844-5834-8693-C381D36E37CD}']
  end;

  [DNTypeName('System.Windows.Input.Touch')]
  DNTouch = interface(DDN.mscorlib.DNObject)
  ['{5C5A5BBC-B007-3743-BE16-D7C17E132659}']
  { events } 

    {class} procedure add_FrameReported(value: DNTouchFrameEventHandler);
    {class} procedure remove_FrameReported(value: DNTouchFrameEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTouch = class(TDNGenericImport<DNTouchClass, DNTouch>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{739C0239-F84E-564C-8C95-45772EC3F760}']
  { constructors } 

    {class} function init(device: DNTouchDevice; position: DDN.System.Windows.Common.DNPoint; bounds: DDN.System.Windows.Common.DNRect; action: DNTouchAction): DNTouchPoint;

  end;

  [DNTypeName('System.Windows.Input.TouchPoint')]
  DNTouchPoint = interface(DDN.mscorlib.DNObject)
  ['{CBA83065-3FEF-3873-9841-96DF4C6009BF}']
  { getters & setters } 

    function get_TouchDevice: DNTouchDevice;
    function get_Position: DDN.System.Windows.Common.DNPoint;
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_Size: DDN.System.Windows.Common.DNSize;
    function get_Action: DNTouchAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TouchDevice: DNTouchDevice read get_TouchDevice;
    property Position: DDN.System.Windows.Common.DNPoint read get_Position;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property Size: DDN.System.Windows.Common.DNSize read get_Size;
    property Action: DNTouchAction read get_Action;
  end;

  TDNTouchPoint = class(TDNGenericImport<DNTouchPointClass, DNTouchPoint>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNCursorInteropHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B227B109-D1F4-50EB-BBA1-FBC73D2F3997}']
  { static methods } 

    {class} function Create(cursorHandle: DDN.mscorlib.DNSafeHandle): DNCursor;

  end;

  [DNTypeName('System.Windows.Interop.CursorInteropHelper')]
  DNCursorInteropHelper = interface(DDN.mscorlib.DNObject)
  ['{17FB80B4-755E-339B-BDA6-97FBC92AC9C5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCursorInteropHelper = class(TDNGenericImport<DNCursorInteropHelperClass, DNCursorInteropHelper>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNImagingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F02A7A49-AA2B-5ACB-8571-E48126F52BFA}']
  { static methods } 

    {class} function CreateBitmapSourceFromHBitmap(bitmap: IntPtr; palette: IntPtr; sourceRect: DDN.System.Windows.Common.DNInt32Rect; sizeOptions: DNBitmapSizeOptions): DNBitmapSource;
    {class} function CreateBitmapSourceFromHIcon(icon: IntPtr; sourceRect: DDN.System.Windows.Common.DNInt32Rect; sizeOptions: DNBitmapSizeOptions): DNBitmapSource;
    {class} function CreateBitmapSourceFromMemorySection(section: IntPtr; pixelWidth: Int32; pixelHeight: Int32; format: DNPixelFormat; stride: Int32; offset: Int32): DNBitmapSource;

  end;

  [DNTypeName('System.Windows.Interop.Imaging')]
  DNImaging = interface(DDN.mscorlib.DNObject)
  ['{148784E0-C3D5-3987-B158-59101974FD7D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImaging = class(TDNGenericImport<DNImagingClass, DNImaging>) end;

  //-------------namespace: System.Windows.Interop----------------
  [DNTypeName('System.Windows.Interop.IWin32Window')]
  DNIWin32Window = interface(DDN.mscorlib.DNObject)
  ['{E282EE00-5D52-3A4F-8C00-2E23D39F17BB}']
  { getters & setters } 

    function get_Handle: IntPtr;

  { propertys } 

    property Handle: IntPtr read get_Handle;
  end;

  //-------------namespace: System.Windows.Markup----------------
  [DNTypeName('System.Windows.Markup.IAddChild')]
  DNIAddChild = interface(DDN.mscorlib.DNObject)
  ['{E920EB8D-5B70-3172-8B26-59D6FEBC5C6A}']
  { methods } 

    procedure AddChild(value: DDN.mscorlib.DNObject);
    procedure AddText(text: string);

  end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyGestureValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{EE514861-B764-5C85-AD21-5192EBE4A9AA}']
  { constructors } 

    {class} function init: DNKeyGestureValueSerializer;

  end;

  [DNTypeName('System.Windows.Input.KeyGestureValueSerializer')]
  DNKeyGestureValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{51F53BF0-143E-36D8-884A-F74725F34732}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyGestureValueSerializer = class(TDNGenericImport<DNKeyGestureValueSerializerClass, DNKeyGestureValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseActionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{D884AA4D-B632-53BA-91DD-6B97C46A5365}']
  { constructors } 

    {class} function init: DNMouseActionValueSerializer;

  end;

  [DNTypeName('System.Windows.Input.MouseActionValueSerializer')]
  DNMouseActionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{85DC8C31-BC94-3321-AFCE-7E53567D65DC}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMouseActionValueSerializer = class(TDNGenericImport<DNMouseActionValueSerializerClass, DNMouseActionValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseGestureValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{71D5D49B-B0A5-59D7-A441-7E5D0C125FC3}']
  { constructors } 

    {class} function init: DNMouseGestureValueSerializer;

  end;

  [DNTypeName('System.Windows.Input.MouseGestureValueSerializer')]
  DNMouseGestureValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{558DCDAB-9843-3D81-AB72-F901D5B4247B}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMouseGestureValueSerializer = class(TDNGenericImport<DNMouseGestureValueSerializerClass, DNMouseGestureValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNBrushValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{45A6FBE7-CD73-5B09-A8F9-AC333CEC6B97}']
  { constructors } 

    {class} function init: DNBrushValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.BrushValueSerializer')]
  DNBrushValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{5671A218-9398-3028-8A64-0717377270BB}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushValueSerializer = class(TDNGenericImport<DNBrushValueSerializerClass, DNBrushValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNCacheModeValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{1EFEAEC7-884E-55D4-96A4-6A47819E2DD6}']
  { constructors } 

    {class} function init: DNCacheModeValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.CacheModeValueSerializer')]
  DNCacheModeValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{DA1D73D1-96DC-34C3-B299-59B3042BE38D}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCacheModeValueSerializer = class(TDNGenericImport<DNCacheModeValueSerializerClass, DNCacheModeValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNDoubleCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{FABAAEC4-2C9F-5F34-8E78-155CAB137E26}']
  { constructors } 

    {class} function init: DNDoubleCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.DoubleCollectionValueSerializer')]
  DNDoubleCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{C0CDE25D-0E40-30B1-B9C2-D473D8C291DE}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDoubleCollectionValueSerializer = class(TDNGenericImport<DNDoubleCollectionValueSerializerClass, DNDoubleCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNGeometryValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{37EB41EE-A20D-5FEC-A12C-3FEF4A563517}']
  { constructors } 

    {class} function init: DNGeometryValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.GeometryValueSerializer')]
  DNGeometryValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{DB29EEA2-D2B1-3315-A966-4231CE9E3E0D}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGeometryValueSerializer = class(TDNGenericImport<DNGeometryValueSerializerClass, DNGeometryValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNInt32CollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{16CA8B63-3111-585D-ADA8-79477345D8C4}']
  { constructors } 

    {class} function init: DNInt32CollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.Int32CollectionValueSerializer')]
  DNInt32CollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{13995E6F-5EFD-3FF5-92FF-7661393A6CB8}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32CollectionValueSerializer = class(TDNGenericImport<DNInt32CollectionValueSerializerClass, DNInt32CollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNPathFigureCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{48F6A688-8C66-5EC4-9074-57E6D485B261}']
  { constructors } 

    {class} function init: DNPathFigureCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.PathFigureCollectionValueSerializer')]
  DNPathFigureCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{6BCCC7DF-73A0-33A0-A9E9-751811E50633}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPathFigureCollectionValueSerializer = class(TDNGenericImport<DNPathFigureCollectionValueSerializerClass, DNPathFigureCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNPointCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{FE7436DC-F9AA-51D9-8AF7-9C654694F86C}']
  { constructors } 

    {class} function init: DNPointCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.PointCollectionValueSerializer')]
  DNPointCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{415B7F38-2AE6-335B-83CB-6F8187D69CE6}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointCollectionValueSerializer = class(TDNGenericImport<DNPointCollectionValueSerializerClass, DNPointCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNTransformValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{F04DDD2D-8B4F-5A1F-BE6F-A9B41CFC4E49}']
  { constructors } 

    {class} function init: DNTransformValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.TransformValueSerializer')]
  DNTransformValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{11028AEB-DD0B-31D9-A9EF-703A5080A651}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransformValueSerializer = class(TDNGenericImport<DNTransformValueSerializerClass, DNTransformValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNVectorCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{0D89FD4D-AE7E-5E72-BD88-61A0B1AD09FF}']
  { constructors } 

    {class} function init: DNVectorCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Converters.VectorCollectionValueSerializer')]
  DNVectorCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{C80CCC1E-BA31-3928-B55D-B4D5A7765C8A}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorCollectionValueSerializer = class(TDNGenericImport<DNVectorCollectionValueSerializerClass, DNVectorCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{FD0C4FCC-7B10-54C2-A788-95A2DC73F558}']
  { constructors } 

    {class} function init: DNFontFamilyValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.FontFamilyValueSerializer')]
  DNFontFamilyValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{101A1CF8-7084-3F5F-8B95-69A1EFAC5EE7}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontFamilyValueSerializer = class(TDNGenericImport<DNFontFamilyValueSerializerClass, DNFontFamilyValueSerializer>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageSourceValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{0221CA56-C1AE-522E-ABA9-EAE8E056578E}']
  { constructors } 

    {class} function init: DNImageSourceValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.ImageSourceValueSerializer')]
  DNImageSourceValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{F630627C-EAA1-3FEC-AC44-0E0A1D531B38}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageSourceValueSerializer = class(TDNGenericImport<DNImageSourceValueSerializerClass, DNImageSourceValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNMatrix3DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{AD65FDC0-8CE3-509B-A073-0362BDD5113F}']
  { constructors } 

    {class} function init: DNMatrix3DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer')]
  DNMatrix3DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{587D8C98-4875-324D-8172-430E514C2D16}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrix3DValueSerializer = class(TDNGenericImport<DNMatrix3DValueSerializerClass, DNMatrix3DValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNPoint3DCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{BB816743-075A-5E9B-BDC5-3A54F78CCD52}']
  { constructors } 

    {class} function init: DNPoint3DCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer')]
  DNPoint3DCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{109E3FC4-194F-38B8-9878-EE4936BA53D2}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint3DCollectionValueSerializer = class(TDNGenericImport<DNPoint3DCollectionValueSerializerClass, DNPoint3DCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNPoint3DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{C9430D85-AB11-5E8F-9E3F-8F8256E17847}']
  { constructors } 

    {class} function init: DNPoint3DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Point3DValueSerializer')]
  DNPoint3DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{144CE08C-DF56-3DD4-873B-A34CFE55A1F7}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint3DValueSerializer = class(TDNGenericImport<DNPoint3DValueSerializerClass, DNPoint3DValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNPoint4DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{CAA0AD7A-D9BE-5C2A-82C0-E55A1EACD79B}']
  { constructors } 

    {class} function init: DNPoint4DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Point4DValueSerializer')]
  DNPoint4DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{7774047D-761C-3F04-9D2D-40DFC00AC0E1}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPoint4DValueSerializer = class(TDNGenericImport<DNPoint4DValueSerializerClass, DNPoint4DValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNQuaternionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{56C373AD-8DCD-51FD-A3F9-CDA698E6FB66}']
  { constructors } 

    {class} function init: DNQuaternionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.QuaternionValueSerializer')]
  DNQuaternionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{683F09D3-05CB-3871-8D4B-4A5612746608}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQuaternionValueSerializer = class(TDNGenericImport<DNQuaternionValueSerializerClass, DNQuaternionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNRect3DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{E06FB115-34DD-59AA-943B-48D516CEAD5C}']
  { constructors } 

    {class} function init: DNRect3DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Rect3DValueSerializer')]
  DNRect3DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{160E47C9-1752-3243-B877-3C2D2133898F}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRect3DValueSerializer = class(TDNGenericImport<DNRect3DValueSerializerClass, DNRect3DValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNSize3DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{1D5F0A08-177B-5A73-B308-E993BE18D3F8}']
  { constructors } 

    {class} function init: DNSize3DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Size3DValueSerializer')]
  DNSize3DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{E490386E-C013-350B-9D06-0AB6604B982D}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSize3DValueSerializer = class(TDNGenericImport<DNSize3DValueSerializerClass, DNSize3DValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNVector3DCollectionValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{FE3AEB98-9C0A-5F29-A971-8A531830371F}']
  { constructors } 

    {class} function init: DNVector3DCollectionValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer')]
  DNVector3DCollectionValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{4B8B5F70-5C36-355F-81E4-E0917F0DA649}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVector3DCollectionValueSerializer = class(TDNGenericImport<DNVector3DCollectionValueSerializerClass, DNVector3DCollectionValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Media3D.Converters----------------
  DNVector3DValueSerializerClass = interface(DDN.System.Windows.Common.DNValueSerializerClass)
  ['{36343C2D-BB51-580B-A53E-86F6C32B6429}']
  { constructors } 

    {class} function init: DNVector3DValueSerializer;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Converters.Vector3DValueSerializer')]
  DNVector3DValueSerializer = interface(DDN.System.Windows.Common.DNValueSerializer)
  ['{29CF902E-3AAD-3D93-BCE9-940234D1A94D}']
  { methods } 

    function CanConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): Boolean;
    function ConvertFromString(value: string; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Windows.Common.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVector3DValueSerializer = class(TDNGenericImport<DNVector3DValueSerializerClass, DNVector3DValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlLanguageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C2553D5F-CF68-5D3E-8D19-E686AFB03BFC}']
  { static getter & setter } 

    {class} function get_Empty: DNXmlLanguage;

  { static methods } 

    {class} function GetLanguage(ietfLanguageTag: string): DNXmlLanguage;

  { static propertys } 

    {class} property Empty: DNXmlLanguage read get_Empty;
  end;

  [DNTypeName('System.Windows.Markup.XmlLanguage')]
  DNXmlLanguage = interface(DDN.mscorlib.DNObject)
  ['{E2D5D25A-E421-3078-931E-AAD300FF3294}']
  { getters & setters } 

    function get_IetfLanguageTag: string;

  { methods } 

    function ToString: string;
    function GetEquivalentCulture: DDN.mscorlib.DNCultureInfo;
    function GetSpecificCulture: DDN.mscorlib.DNCultureInfo;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IetfLanguageTag: string read get_IetfLanguageTag;
  end;

  TDNXmlLanguage = class(TDNGenericImport<DNXmlLanguageClass, DNXmlLanguage>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{745C1321-7EFA-59C6-AC6C-4CBCF49ACE2D}']
  { static methods } 

    {class} function Equals(objA: DNClockCollection; objB: DNClockCollection): Boolean; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.ClockCollection')]
  DNClockCollection = interface(DDN.mscorlib.DNICollection<DNClock>)
  ['{87A56F8C-EDA4-3E6E-A699-A28E900EA327}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNClock;

  { methods } 

    function &Contains(item: DNClock): Boolean;
    procedure CopyTo(&array: TArray<DNClock>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNClock read get_Item; default;
  end;

  TDNClockCollection = class(TDNGenericImport<DNClockCollectionClass, DNClockCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.IAnimatable')]
  DNIAnimatable = interface(DDN.mscorlib.DNObject)
  ['{8F1C61A2-F6A0-3465-92DC-BB57780C0605}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;

  { methods } 

    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
  end;

  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.IEasingFunction')]
  DNIEasingFunction = interface(DDN.mscorlib.DNObject)
  ['{677EE4F0-B92B-3094-B722-7C9DE2A27815}']
  { methods } 

    function Ease(normalizedTime: Double): Double;

  end;

  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.IKeyFrame')]
  DNIKeyFrame = interface(DDN.mscorlib.DNObject)
  ['{6EBFC951-09F2-3650-A496-1728FD79184A}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Windows.Media.Animation----------------
  [DNTypeName('System.Windows.Media.Animation.IKeyFrameAnimation')]
  DNIKeyFrameAnimation = interface(DDN.mscorlib.DNObject)
  ['{FAE8E7DE-D559-3A9C-860C-FD1D1060DC85}']
  { getters & setters } 

    function get_KeyFrames: DDN.mscorlib.DNIList;
    procedure set_KeyFrames(value: DDN.mscorlib.DNIList);

  { propertys } 

    property KeyFrames: DDN.mscorlib.DNIList read get_KeyFrames write set_KeyFrames;
  end;

  //-------------namespace: System.Windows.Media----------------
  DNBrushesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86094CC6-AC09-5255-A440-9644CD08A06E}']
  { static getter & setter } 

    {class} function get_AliceBlue: DNSolidColorBrush;
    {class} function get_AntiqueWhite: DNSolidColorBrush;
    {class} function get_Aqua: DNSolidColorBrush;
    {class} function get_Aquamarine: DNSolidColorBrush;
    {class} function get_Azure: DNSolidColorBrush;
    {class} function get_Beige: DNSolidColorBrush;
    {class} function get_Bisque: DNSolidColorBrush;
    {class} function get_Black: DNSolidColorBrush;
    {class} function get_BlanchedAlmond: DNSolidColorBrush;
    {class} function get_Blue: DNSolidColorBrush;
    {class} function get_BlueViolet: DNSolidColorBrush;
    {class} function get_Brown: DNSolidColorBrush;
    {class} function get_BurlyWood: DNSolidColorBrush;
    {class} function get_CadetBlue: DNSolidColorBrush;
    {class} function get_Chartreuse: DNSolidColorBrush;
    {class} function get_Chocolate: DNSolidColorBrush;
    {class} function get_Coral: DNSolidColorBrush;
    {class} function get_CornflowerBlue: DNSolidColorBrush;
    {class} function get_Cornsilk: DNSolidColorBrush;
    {class} function get_Crimson: DNSolidColorBrush;
    {class} function get_Cyan: DNSolidColorBrush;
    {class} function get_DarkBlue: DNSolidColorBrush;
    {class} function get_DarkCyan: DNSolidColorBrush;
    {class} function get_DarkGoldenrod: DNSolidColorBrush;
    {class} function get_DarkGray: DNSolidColorBrush;
    {class} function get_DarkGreen: DNSolidColorBrush;
    {class} function get_DarkKhaki: DNSolidColorBrush;
    {class} function get_DarkMagenta: DNSolidColorBrush;
    {class} function get_DarkOliveGreen: DNSolidColorBrush;
    {class} function get_DarkOrange: DNSolidColorBrush;
    {class} function get_DarkOrchid: DNSolidColorBrush;
    {class} function get_DarkRed: DNSolidColorBrush;
    {class} function get_DarkSalmon: DNSolidColorBrush;
    {class} function get_DarkSeaGreen: DNSolidColorBrush;
    {class} function get_DarkSlateBlue: DNSolidColorBrush;
    {class} function get_DarkSlateGray: DNSolidColorBrush;
    {class} function get_DarkTurquoise: DNSolidColorBrush;
    {class} function get_DarkViolet: DNSolidColorBrush;
    {class} function get_DeepPink: DNSolidColorBrush;
    {class} function get_DeepSkyBlue: DNSolidColorBrush;
    {class} function get_DimGray: DNSolidColorBrush;
    {class} function get_DodgerBlue: DNSolidColorBrush;
    {class} function get_Firebrick: DNSolidColorBrush;
    {class} function get_FloralWhite: DNSolidColorBrush;
    {class} function get_ForestGreen: DNSolidColorBrush;
    {class} function get_Fuchsia: DNSolidColorBrush;
    {class} function get_Gainsboro: DNSolidColorBrush;
    {class} function get_GhostWhite: DNSolidColorBrush;
    {class} function get_Gold: DNSolidColorBrush;
    {class} function get_Goldenrod: DNSolidColorBrush;
    {class} function get_Gray: DNSolidColorBrush;
    {class} function get_Green: DNSolidColorBrush;
    {class} function get_GreenYellow: DNSolidColorBrush;
    {class} function get_Honeydew: DNSolidColorBrush;
    {class} function get_HotPink: DNSolidColorBrush;
    {class} function get_IndianRed: DNSolidColorBrush;
    {class} function get_Indigo: DNSolidColorBrush;
    {class} function get_Ivory: DNSolidColorBrush;
    {class} function get_Khaki: DNSolidColorBrush;
    {class} function get_Lavender: DNSolidColorBrush;
    {class} function get_LavenderBlush: DNSolidColorBrush;
    {class} function get_LawnGreen: DNSolidColorBrush;
    {class} function get_LemonChiffon: DNSolidColorBrush;
    {class} function get_LightBlue: DNSolidColorBrush;
    {class} function get_LightCoral: DNSolidColorBrush;
    {class} function get_LightCyan: DNSolidColorBrush;
    {class} function get_LightGoldenrodYellow: DNSolidColorBrush;
    {class} function get_LightGray: DNSolidColorBrush;
    {class} function get_LightGreen: DNSolidColorBrush;
    {class} function get_LightPink: DNSolidColorBrush;
    {class} function get_LightSalmon: DNSolidColorBrush;
    {class} function get_LightSeaGreen: DNSolidColorBrush;
    {class} function get_LightSkyBlue: DNSolidColorBrush;
    {class} function get_LightSlateGray: DNSolidColorBrush;
    {class} function get_LightSteelBlue: DNSolidColorBrush;
    {class} function get_LightYellow: DNSolidColorBrush;
    {class} function get_Lime: DNSolidColorBrush;
    {class} function get_LimeGreen: DNSolidColorBrush;
    {class} function get_Linen: DNSolidColorBrush;
    {class} function get_Magenta: DNSolidColorBrush;
    {class} function get_Maroon: DNSolidColorBrush;
    {class} function get_MediumAquamarine: DNSolidColorBrush;
    {class} function get_MediumBlue: DNSolidColorBrush;
    {class} function get_MediumOrchid: DNSolidColorBrush;
    {class} function get_MediumPurple: DNSolidColorBrush;
    {class} function get_MediumSeaGreen: DNSolidColorBrush;
    {class} function get_MediumSlateBlue: DNSolidColorBrush;
    {class} function get_MediumSpringGreen: DNSolidColorBrush;
    {class} function get_MediumTurquoise: DNSolidColorBrush;
    {class} function get_MediumVioletRed: DNSolidColorBrush;
    {class} function get_MidnightBlue: DNSolidColorBrush;
    {class} function get_MintCream: DNSolidColorBrush;
    {class} function get_MistyRose: DNSolidColorBrush;
    {class} function get_Moccasin: DNSolidColorBrush;
    {class} function get_NavajoWhite: DNSolidColorBrush;
    {class} function get_Navy: DNSolidColorBrush;
    {class} function get_OldLace: DNSolidColorBrush;
    {class} function get_Olive: DNSolidColorBrush;
    {class} function get_OliveDrab: DNSolidColorBrush;
    {class} function get_Orange: DNSolidColorBrush;
    {class} function get_OrangeRed: DNSolidColorBrush;
    {class} function get_Orchid: DNSolidColorBrush;
    {class} function get_PaleGoldenrod: DNSolidColorBrush;
    {class} function get_PaleGreen: DNSolidColorBrush;
    {class} function get_PaleTurquoise: DNSolidColorBrush;
    {class} function get_PaleVioletRed: DNSolidColorBrush;
    {class} function get_PapayaWhip: DNSolidColorBrush;
    {class} function get_PeachPuff: DNSolidColorBrush;
    {class} function get_Peru: DNSolidColorBrush;
    {class} function get_Pink: DNSolidColorBrush;
    {class} function get_Plum: DNSolidColorBrush;
    {class} function get_PowderBlue: DNSolidColorBrush;
    {class} function get_Purple: DNSolidColorBrush;
    {class} function get_Red: DNSolidColorBrush;
    {class} function get_RosyBrown: DNSolidColorBrush;
    {class} function get_RoyalBlue: DNSolidColorBrush;
    {class} function get_SaddleBrown: DNSolidColorBrush;
    {class} function get_Salmon: DNSolidColorBrush;
    {class} function get_SandyBrown: DNSolidColorBrush;
    {class} function get_SeaGreen: DNSolidColorBrush;
    {class} function get_SeaShell: DNSolidColorBrush;
    {class} function get_Sienna: DNSolidColorBrush;
    {class} function get_Silver: DNSolidColorBrush;
    {class} function get_SkyBlue: DNSolidColorBrush;
    {class} function get_SlateBlue: DNSolidColorBrush;
    {class} function get_SlateGray: DNSolidColorBrush;
    {class} function get_Snow: DNSolidColorBrush;
    {class} function get_SpringGreen: DNSolidColorBrush;
    {class} function get_SteelBlue: DNSolidColorBrush;
    {class} function get_Tan: DNSolidColorBrush;
    {class} function get_Teal: DNSolidColorBrush;
    {class} function get_Thistle: DNSolidColorBrush;
    {class} function get_Tomato: DNSolidColorBrush;
    {class} function get_Transparent: DNSolidColorBrush;
    {class} function get_Turquoise: DNSolidColorBrush;
    {class} function get_Violet: DNSolidColorBrush;
    {class} function get_Wheat: DNSolidColorBrush;
    {class} function get_White: DNSolidColorBrush;
    {class} function get_WhiteSmoke: DNSolidColorBrush;
    {class} function get_Yellow: DNSolidColorBrush;
    {class} function get_YellowGreen: DNSolidColorBrush;

  { static propertys } 

    {class} property AliceBlue: DNSolidColorBrush read get_AliceBlue;
    {class} property AntiqueWhite: DNSolidColorBrush read get_AntiqueWhite;
    {class} property Aqua: DNSolidColorBrush read get_Aqua;
    {class} property Aquamarine: DNSolidColorBrush read get_Aquamarine;
    {class} property Azure: DNSolidColorBrush read get_Azure;
    {class} property Beige: DNSolidColorBrush read get_Beige;
    {class} property Bisque: DNSolidColorBrush read get_Bisque;
    {class} property Black: DNSolidColorBrush read get_Black;
    {class} property BlanchedAlmond: DNSolidColorBrush read get_BlanchedAlmond;
    {class} property Blue: DNSolidColorBrush read get_Blue;
    {class} property BlueViolet: DNSolidColorBrush read get_BlueViolet;
    {class} property Brown: DNSolidColorBrush read get_Brown;
    {class} property BurlyWood: DNSolidColorBrush read get_BurlyWood;
    {class} property CadetBlue: DNSolidColorBrush read get_CadetBlue;
    {class} property Chartreuse: DNSolidColorBrush read get_Chartreuse;
    {class} property Chocolate: DNSolidColorBrush read get_Chocolate;
    {class} property Coral: DNSolidColorBrush read get_Coral;
    {class} property CornflowerBlue: DNSolidColorBrush read get_CornflowerBlue;
    {class} property Cornsilk: DNSolidColorBrush read get_Cornsilk;
    {class} property Crimson: DNSolidColorBrush read get_Crimson;
    {class} property Cyan: DNSolidColorBrush read get_Cyan;
    {class} property DarkBlue: DNSolidColorBrush read get_DarkBlue;
    {class} property DarkCyan: DNSolidColorBrush read get_DarkCyan;
    {class} property DarkGoldenrod: DNSolidColorBrush read get_DarkGoldenrod;
    {class} property DarkGray: DNSolidColorBrush read get_DarkGray;
    {class} property DarkGreen: DNSolidColorBrush read get_DarkGreen;
    {class} property DarkKhaki: DNSolidColorBrush read get_DarkKhaki;
    {class} property DarkMagenta: DNSolidColorBrush read get_DarkMagenta;
    {class} property DarkOliveGreen: DNSolidColorBrush read get_DarkOliveGreen;
    {class} property DarkOrange: DNSolidColorBrush read get_DarkOrange;
    {class} property DarkOrchid: DNSolidColorBrush read get_DarkOrchid;
    {class} property DarkRed: DNSolidColorBrush read get_DarkRed;
    {class} property DarkSalmon: DNSolidColorBrush read get_DarkSalmon;
    {class} property DarkSeaGreen: DNSolidColorBrush read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNSolidColorBrush read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNSolidColorBrush read get_DarkSlateGray;
    {class} property DarkTurquoise: DNSolidColorBrush read get_DarkTurquoise;
    {class} property DarkViolet: DNSolidColorBrush read get_DarkViolet;
    {class} property DeepPink: DNSolidColorBrush read get_DeepPink;
    {class} property DeepSkyBlue: DNSolidColorBrush read get_DeepSkyBlue;
    {class} property DimGray: DNSolidColorBrush read get_DimGray;
    {class} property DodgerBlue: DNSolidColorBrush read get_DodgerBlue;
    {class} property Firebrick: DNSolidColorBrush read get_Firebrick;
    {class} property FloralWhite: DNSolidColorBrush read get_FloralWhite;
    {class} property ForestGreen: DNSolidColorBrush read get_ForestGreen;
    {class} property Fuchsia: DNSolidColorBrush read get_Fuchsia;
    {class} property Gainsboro: DNSolidColorBrush read get_Gainsboro;
    {class} property GhostWhite: DNSolidColorBrush read get_GhostWhite;
    {class} property Gold: DNSolidColorBrush read get_Gold;
    {class} property Goldenrod: DNSolidColorBrush read get_Goldenrod;
    {class} property Gray: DNSolidColorBrush read get_Gray;
    {class} property Green: DNSolidColorBrush read get_Green;
    {class} property GreenYellow: DNSolidColorBrush read get_GreenYellow;
    {class} property Honeydew: DNSolidColorBrush read get_Honeydew;
    {class} property HotPink: DNSolidColorBrush read get_HotPink;
    {class} property IndianRed: DNSolidColorBrush read get_IndianRed;
    {class} property Indigo: DNSolidColorBrush read get_Indigo;
    {class} property Ivory: DNSolidColorBrush read get_Ivory;
    {class} property Khaki: DNSolidColorBrush read get_Khaki;
    {class} property Lavender: DNSolidColorBrush read get_Lavender;
    {class} property LavenderBlush: DNSolidColorBrush read get_LavenderBlush;
    {class} property LawnGreen: DNSolidColorBrush read get_LawnGreen;
    {class} property LemonChiffon: DNSolidColorBrush read get_LemonChiffon;
    {class} property LightBlue: DNSolidColorBrush read get_LightBlue;
    {class} property LightCoral: DNSolidColorBrush read get_LightCoral;
    {class} property LightCyan: DNSolidColorBrush read get_LightCyan;
    {class} property LightGoldenrodYellow: DNSolidColorBrush read get_LightGoldenrodYellow;
    {class} property LightGray: DNSolidColorBrush read get_LightGray;
    {class} property LightGreen: DNSolidColorBrush read get_LightGreen;
    {class} property LightPink: DNSolidColorBrush read get_LightPink;
    {class} property LightSalmon: DNSolidColorBrush read get_LightSalmon;
    {class} property LightSeaGreen: DNSolidColorBrush read get_LightSeaGreen;
    {class} property LightSkyBlue: DNSolidColorBrush read get_LightSkyBlue;
    {class} property LightSlateGray: DNSolidColorBrush read get_LightSlateGray;
    {class} property LightSteelBlue: DNSolidColorBrush read get_LightSteelBlue;
    {class} property LightYellow: DNSolidColorBrush read get_LightYellow;
    {class} property Lime: DNSolidColorBrush read get_Lime;
    {class} property LimeGreen: DNSolidColorBrush read get_LimeGreen;
    {class} property Linen: DNSolidColorBrush read get_Linen;
    {class} property Magenta: DNSolidColorBrush read get_Magenta;
    {class} property Maroon: DNSolidColorBrush read get_Maroon;
    {class} property MediumAquamarine: DNSolidColorBrush read get_MediumAquamarine;
    {class} property MediumBlue: DNSolidColorBrush read get_MediumBlue;
    {class} property MediumOrchid: DNSolidColorBrush read get_MediumOrchid;
    {class} property MediumPurple: DNSolidColorBrush read get_MediumPurple;
    {class} property MediumSeaGreen: DNSolidColorBrush read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNSolidColorBrush read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNSolidColorBrush read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNSolidColorBrush read get_MediumTurquoise;
    {class} property MediumVioletRed: DNSolidColorBrush read get_MediumVioletRed;
    {class} property MidnightBlue: DNSolidColorBrush read get_MidnightBlue;
    {class} property MintCream: DNSolidColorBrush read get_MintCream;
    {class} property MistyRose: DNSolidColorBrush read get_MistyRose;
    {class} property Moccasin: DNSolidColorBrush read get_Moccasin;
    {class} property NavajoWhite: DNSolidColorBrush read get_NavajoWhite;
    {class} property Navy: DNSolidColorBrush read get_Navy;
    {class} property OldLace: DNSolidColorBrush read get_OldLace;
    {class} property Olive: DNSolidColorBrush read get_Olive;
    {class} property OliveDrab: DNSolidColorBrush read get_OliveDrab;
    {class} property Orange: DNSolidColorBrush read get_Orange;
    {class} property OrangeRed: DNSolidColorBrush read get_OrangeRed;
    {class} property Orchid: DNSolidColorBrush read get_Orchid;
    {class} property PaleGoldenrod: DNSolidColorBrush read get_PaleGoldenrod;
    {class} property PaleGreen: DNSolidColorBrush read get_PaleGreen;
    {class} property PaleTurquoise: DNSolidColorBrush read get_PaleTurquoise;
    {class} property PaleVioletRed: DNSolidColorBrush read get_PaleVioletRed;
    {class} property PapayaWhip: DNSolidColorBrush read get_PapayaWhip;
    {class} property PeachPuff: DNSolidColorBrush read get_PeachPuff;
    {class} property Peru: DNSolidColorBrush read get_Peru;
    {class} property Pink: DNSolidColorBrush read get_Pink;
    {class} property Plum: DNSolidColorBrush read get_Plum;
    {class} property PowderBlue: DNSolidColorBrush read get_PowderBlue;
    {class} property Purple: DNSolidColorBrush read get_Purple;
    {class} property Red: DNSolidColorBrush read get_Red;
    {class} property RosyBrown: DNSolidColorBrush read get_RosyBrown;
    {class} property RoyalBlue: DNSolidColorBrush read get_RoyalBlue;
    {class} property SaddleBrown: DNSolidColorBrush read get_SaddleBrown;
    {class} property Salmon: DNSolidColorBrush read get_Salmon;
    {class} property SandyBrown: DNSolidColorBrush read get_SandyBrown;
    {class} property SeaGreen: DNSolidColorBrush read get_SeaGreen;
    {class} property SeaShell: DNSolidColorBrush read get_SeaShell;
    {class} property Sienna: DNSolidColorBrush read get_Sienna;
    {class} property Silver: DNSolidColorBrush read get_Silver;
    {class} property SkyBlue: DNSolidColorBrush read get_SkyBlue;
    {class} property SlateBlue: DNSolidColorBrush read get_SlateBlue;
    {class} property SlateGray: DNSolidColorBrush read get_SlateGray;
    {class} property Snow: DNSolidColorBrush read get_Snow;
    {class} property SpringGreen: DNSolidColorBrush read get_SpringGreen;
    {class} property SteelBlue: DNSolidColorBrush read get_SteelBlue;
    {class} property Tan: DNSolidColorBrush read get_Tan;
    {class} property Teal: DNSolidColorBrush read get_Teal;
    {class} property Thistle: DNSolidColorBrush read get_Thistle;
    {class} property Tomato: DNSolidColorBrush read get_Tomato;
    {class} property Transparent: DNSolidColorBrush read get_Transparent;
    {class} property Turquoise: DNSolidColorBrush read get_Turquoise;
    {class} property Violet: DNSolidColorBrush read get_Violet;
    {class} property Wheat: DNSolidColorBrush read get_Wheat;
    {class} property White: DNSolidColorBrush read get_White;
    {class} property WhiteSmoke: DNSolidColorBrush read get_WhiteSmoke;
    {class} property Yellow: DNSolidColorBrush read get_Yellow;
    {class} property YellowGreen: DNSolidColorBrush read get_YellowGreen;
  end;

  [DNTypeName('System.Windows.Media.Brushes')]
  DNBrushes = interface(DDN.mscorlib.DNObject)
  ['{A9EC31F5-A752-3018-B62A-CB6E45CCACF7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrushes = class(TDNGenericImport<DNBrushesClass, DNBrushes>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCharacterMetricsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7C4028D-A79B-5952-BFDD-AE52D4B416FA}']
  { constructors } 

    {class} function init: DNCharacterMetrics; overload;
    {class} function init(metrics: string): DNCharacterMetrics; overload;

  end;

  [DNTypeName('System.Windows.Media.CharacterMetrics')]
  DNCharacterMetrics = interface(DDN.mscorlib.DNObject)
  ['{A4DFDF32-26B6-328B-AEF9-64A6CA9BCF6A}']
  { getters & setters } 

    function get_Metrics: string;
    procedure set_Metrics(value: string);
    function get_BlackBoxWidth: Double;
    function get_BlackBoxHeight: Double;
    function get_Baseline: Double;
    function get_LeftSideBearing: Double;
    function get_RightSideBearing: Double;
    function get_TopSideBearing: Double;
    function get_BottomSideBearing: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Metrics: string read get_Metrics write set_Metrics;
    property BlackBoxWidth: Double read get_BlackBoxWidth;
    property BlackBoxHeight: Double read get_BlackBoxHeight;
    property Baseline: Double read get_Baseline;
    property LeftSideBearing: Double read get_LeftSideBearing;
    property RightSideBearing: Double read get_RightSideBearing;
    property TopSideBearing: Double read get_TopSideBearing;
    property BottomSideBearing: Double read get_BottomSideBearing;
  end;

  TDNCharacterMetrics = class(TDNGenericImport<DNCharacterMetricsClass, DNCharacterMetrics>) end;

  //-------------namespace: System.Windows.Media----------------
  DNColorContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BFE2E51B-0942-51B2-AF12-A8C384B56500}']
  { constructors } 

    {class} function init(profileUri: DDN.System.Windows.Common.DNUri): DNColorContext; overload;
    {class} function init(pixelFormat: DNPixelFormat): DNColorContext; overload;

  end;

  [DNTypeName('System.Windows.Media.ColorContext')]
  DNColorContext = interface(DDN.mscorlib.DNObject)
  ['{5AE6C082-A088-3B23-AD15-3912EBA923FB}']
  { getters & setters } 

    function get_ProfileUri: DDN.System.Windows.Common.DNUri;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function OpenProfileStream: DDN.mscorlib.DNStream;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProfileUri: DDN.System.Windows.Common.DNUri read get_ProfileUri;
  end;

  TDNColorContext = class(TDNGenericImport<DNColorContextClass, DNColorContext>) end;

  //-------------namespace: System.Windows.Media----------------
  DNColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB78E79F-0CE0-53F5-9795-7FD42470C740}']
  { static getter & setter } 

    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Transparent: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { static propertys } 

    {class} property AliceBlue: DNColor read get_AliceBlue;
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    {class} property Aqua: DNColor read get_Aqua;
    {class} property Aquamarine: DNColor read get_Aquamarine;
    {class} property Azure: DNColor read get_Azure;
    {class} property Beige: DNColor read get_Beige;
    {class} property Bisque: DNColor read get_Bisque;
    {class} property Black: DNColor read get_Black;
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    {class} property Blue: DNColor read get_Blue;
    {class} property BlueViolet: DNColor read get_BlueViolet;
    {class} property Brown: DNColor read get_Brown;
    {class} property BurlyWood: DNColor read get_BurlyWood;
    {class} property CadetBlue: DNColor read get_CadetBlue;
    {class} property Chartreuse: DNColor read get_Chartreuse;
    {class} property Chocolate: DNColor read get_Chocolate;
    {class} property Coral: DNColor read get_Coral;
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    {class} property Cornsilk: DNColor read get_Cornsilk;
    {class} property Crimson: DNColor read get_Crimson;
    {class} property Cyan: DNColor read get_Cyan;
    {class} property DarkBlue: DNColor read get_DarkBlue;
    {class} property DarkCyan: DNColor read get_DarkCyan;
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    {class} property DarkGray: DNColor read get_DarkGray;
    {class} property DarkGreen: DNColor read get_DarkGreen;
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    {class} property DarkOrange: DNColor read get_DarkOrange;
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    {class} property DarkRed: DNColor read get_DarkRed;
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    {class} property DarkViolet: DNColor read get_DarkViolet;
    {class} property DeepPink: DNColor read get_DeepPink;
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    {class} property DimGray: DNColor read get_DimGray;
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    {class} property Firebrick: DNColor read get_Firebrick;
    {class} property FloralWhite: DNColor read get_FloralWhite;
    {class} property ForestGreen: DNColor read get_ForestGreen;
    {class} property Fuchsia: DNColor read get_Fuchsia;
    {class} property Gainsboro: DNColor read get_Gainsboro;
    {class} property GhostWhite: DNColor read get_GhostWhite;
    {class} property Gold: DNColor read get_Gold;
    {class} property Goldenrod: DNColor read get_Goldenrod;
    {class} property Gray: DNColor read get_Gray;
    {class} property Green: DNColor read get_Green;
    {class} property GreenYellow: DNColor read get_GreenYellow;
    {class} property Honeydew: DNColor read get_Honeydew;
    {class} property HotPink: DNColor read get_HotPink;
    {class} property IndianRed: DNColor read get_IndianRed;
    {class} property Indigo: DNColor read get_Indigo;
    {class} property Ivory: DNColor read get_Ivory;
    {class} property Khaki: DNColor read get_Khaki;
    {class} property Lavender: DNColor read get_Lavender;
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    {class} property LawnGreen: DNColor read get_LawnGreen;
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    {class} property LightBlue: DNColor read get_LightBlue;
    {class} property LightCoral: DNColor read get_LightCoral;
    {class} property LightCyan: DNColor read get_LightCyan;
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    {class} property LightGray: DNColor read get_LightGray;
    {class} property LightGreen: DNColor read get_LightGreen;
    {class} property LightPink: DNColor read get_LightPink;
    {class} property LightSalmon: DNColor read get_LightSalmon;
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    {class} property LightYellow: DNColor read get_LightYellow;
    {class} property Lime: DNColor read get_Lime;
    {class} property LimeGreen: DNColor read get_LimeGreen;
    {class} property Linen: DNColor read get_Linen;
    {class} property Magenta: DNColor read get_Magenta;
    {class} property Maroon: DNColor read get_Maroon;
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    {class} property MediumBlue: DNColor read get_MediumBlue;
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    {class} property MediumPurple: DNColor read get_MediumPurple;
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    {class} property MintCream: DNColor read get_MintCream;
    {class} property MistyRose: DNColor read get_MistyRose;
    {class} property Moccasin: DNColor read get_Moccasin;
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    {class} property Navy: DNColor read get_Navy;
    {class} property OldLace: DNColor read get_OldLace;
    {class} property Olive: DNColor read get_Olive;
    {class} property OliveDrab: DNColor read get_OliveDrab;
    {class} property Orange: DNColor read get_Orange;
    {class} property OrangeRed: DNColor read get_OrangeRed;
    {class} property Orchid: DNColor read get_Orchid;
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    {class} property PaleGreen: DNColor read get_PaleGreen;
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    {class} property PeachPuff: DNColor read get_PeachPuff;
    {class} property Peru: DNColor read get_Peru;
    {class} property Pink: DNColor read get_Pink;
    {class} property Plum: DNColor read get_Plum;
    {class} property PowderBlue: DNColor read get_PowderBlue;
    {class} property Purple: DNColor read get_Purple;
    {class} property Red: DNColor read get_Red;
    {class} property RosyBrown: DNColor read get_RosyBrown;
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    {class} property Salmon: DNColor read get_Salmon;
    {class} property SandyBrown: DNColor read get_SandyBrown;
    {class} property SeaGreen: DNColor read get_SeaGreen;
    {class} property SeaShell: DNColor read get_SeaShell;
    {class} property Sienna: DNColor read get_Sienna;
    {class} property Silver: DNColor read get_Silver;
    {class} property SkyBlue: DNColor read get_SkyBlue;
    {class} property SlateBlue: DNColor read get_SlateBlue;
    {class} property SlateGray: DNColor read get_SlateGray;
    {class} property Snow: DNColor read get_Snow;
    {class} property SpringGreen: DNColor read get_SpringGreen;
    {class} property SteelBlue: DNColor read get_SteelBlue;
    {class} property Tan: DNColor read get_Tan;
    {class} property Teal: DNColor read get_Teal;
    {class} property Thistle: DNColor read get_Thistle;
    {class} property Tomato: DNColor read get_Tomato;
    {class} property Transparent: DNColor read get_Transparent;
    {class} property Turquoise: DNColor read get_Turquoise;
    {class} property Violet: DNColor read get_Violet;
    {class} property Wheat: DNColor read get_Wheat;
    {class} property White: DNColor read get_White;
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    {class} property Yellow: DNColor read get_Yellow;
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  [DNTypeName('System.Windows.Media.Colors')]
  DNColors = interface(DDN.mscorlib.DNObject)
  ['{BBA7EDA6-C859-312C-9ABA-5BA80377BD6E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColors = class(TDNGenericImport<DNColorsClass, DNColors>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDashStylesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2CEC2BC3-6BBE-565D-A694-B9C572CB206A}']
  { static getter & setter } 

    {class} function get_Solid: DNDashStyle;
    {class} function get_Dash: DNDashStyle;
    {class} function get_Dot: DNDashStyle;
    {class} function get_DashDot: DNDashStyle;
    {class} function get_DashDotDot: DNDashStyle;

  { static propertys } 

    {class} property Solid: DNDashStyle read get_Solid;
    {class} property Dash: DNDashStyle read get_Dash;
    {class} property Dot: DNDashStyle read get_Dot;
    {class} property DashDot: DNDashStyle read get_DashDot;
    {class} property DashDotDot: DNDashStyle read get_DashDotDot;
  end;

  [DNTypeName('System.Windows.Media.DashStyles')]
  DNDashStyles = interface(DDN.mscorlib.DNObject)
  ['{6A55FE80-2FAA-3B33-ABA4-CB514DEF1CE8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDashStyles = class(TDNGenericImport<DNDashStylesClass, DNDashStyles>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFamilyTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ADDD2140-E685-5DBA-AF18-3349099F4E2C}']
  { constructors } 

    {class} function init: DNFamilyTypeface;

  end;

  [DNTypeName('System.Windows.Media.FamilyTypeface')]
  DNFamilyTypeface = interface(DDN.mscorlib.DNObject)
  ['{239B589A-AB41-3CAF-B9F2-12294B93BA20}']
  { getters & setters } 

    function get_Style: DNFontStyle;
    procedure set_Style(value: DNFontStyle);
    function get_Weight: DNFontWeight;
    procedure set_Weight(value: DNFontWeight);
    function get_Stretch: DNFontStretch;
    procedure set_Stretch(value: DNFontStretch);
    function get_UnderlinePosition: Double;
    procedure set_UnderlinePosition(value: Double);
    function get_UnderlineThickness: Double;
    procedure set_UnderlineThickness(value: Double);
    function get_StrikethroughPosition: Double;
    procedure set_StrikethroughPosition(value: Double);
    function get_StrikethroughThickness: Double;
    procedure set_StrikethroughThickness(value: Double);
    function get_CapsHeight: Double;
    procedure set_CapsHeight(value: Double);
    function get_XHeight: Double;
    procedure set_XHeight(value: Double);
    function get_AdjustedFaceNames: DDN.mscorlib.DNIDictionary<DNXmlLanguage, string>;
    function get_DeviceFontName: string;
    procedure set_DeviceFontName(value: string);

  { methods } 

    function Equals(typeface: DNFamilyTypeface): Boolean; overload;
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Style: DNFontStyle read get_Style write set_Style;
    property Weight: DNFontWeight read get_Weight write set_Weight;
    property Stretch: DNFontStretch read get_Stretch write set_Stretch;
    property UnderlinePosition: Double read get_UnderlinePosition write set_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness write set_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition write set_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness write set_StrikethroughThickness;
    property CapsHeight: Double read get_CapsHeight write set_CapsHeight;
    property XHeight: Double read get_XHeight write set_XHeight;
    property AdjustedFaceNames: DDN.mscorlib.DNIDictionary<DNXmlLanguage, string> read get_AdjustedFaceNames;
    property DeviceFontName: string read get_DeviceFontName write set_DeviceFontName;
  end;

  TDNFamilyTypeface = class(TDNGenericImport<DNFamilyTypefaceClass, DNFamilyTypeface>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFamilyTypefaceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F684DFA-4946-5975-ADE0-01D9D4C18090}']
  end;

  [DNTypeName('System.Windows.Media.FamilyTypefaceCollection')]
  DNFamilyTypefaceCollection = interface(DDN.mscorlib.DNObject)
  ['{0B6A11AD-0B7C-3469-B91D-33320AFF66D6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(item: DNFamilyTypeface): Boolean;
    procedure CopyTo(&array: TArray<DNFamilyTypeface>; index: Int32);
    function IndexOf(item: DNFamilyTypeface): Int32;
    procedure Insert(index: Int32; item: DNFamilyTypeface);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNFamilyTypefaceCollection = class(TDNGenericImport<DNFamilyTypefaceCollectionClass, DNFamilyTypefaceCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontEmbeddingManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E7A129E-20D4-591C-9AAC-7ED91F473806}']
  { constructors } 

    {class} function init: DNFontEmbeddingManager;

  end;

  [DNTypeName('System.Windows.Media.FontEmbeddingManager')]
  DNFontEmbeddingManager = interface(DDN.mscorlib.DNObject)
  ['{7B74FF54-EA02-34A3-A608-771E1B67C2A4}']
  { getters & setters } 

    function get_GlyphTypefaceUris: DDN.mscorlib.DNICollection<DDN.System.Windows.Common.DNUri>;

  { methods } 

    procedure RecordUsage(glyphRun: DNGlyphRun);
    function GetUsedGlyphs(glyphTypeface: DDN.System.Windows.Common.DNUri): DDN.mscorlib.DNICollection<UInt16>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlyphTypefaceUris: DDN.mscorlib.DNICollection<DDN.System.Windows.Common.DNUri> read get_GlyphTypefaceUris;
  end;

  TDNFontEmbeddingManager = class(TDNGenericImport<DNFontEmbeddingManagerClass, DNFontEmbeddingManager>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10CF9719-07D1-5F0F-AFB2-F0B73ECA909B}']
  { constructors } 

    {class} function init(familyName: string): DNFontFamily; overload;
    {class} function init(baseUri: DDN.System.Windows.Common.DNUri; familyName: string): DNFontFamily; overload;
    {class} function init: DNFontFamily; overload;

  end;

  [DNTypeName('System.Windows.Media.FontFamily')]
  DNFontFamily = interface(DDN.mscorlib.DNObject)
  ['{D166D80B-B80F-31C2-A29C-728C1B860FE8}']
  { getters & setters } 

    function get_FamilyNames: DNLanguageSpecificStringDictionary;
    function get_FamilyTypefaces: DNFamilyTypefaceCollection;
    function get_FamilyMaps: DNFontFamilyMapCollection;
    function get_Source: string;
    function get_BaseUri: DDN.System.Windows.Common.DNUri;
    function get_Baseline: Double;
    procedure set_Baseline(value: Double);
    function get_LineSpacing: Double;
    procedure set_LineSpacing(value: Double);

  { methods } 

    function ToString: string;
    function GetTypefaces: DDN.mscorlib.DNICollection<DNTypeface>;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FamilyNames: DNLanguageSpecificStringDictionary read get_FamilyNames;
    property FamilyTypefaces: DNFamilyTypefaceCollection read get_FamilyTypefaces;
    property FamilyMaps: DNFontFamilyMapCollection read get_FamilyMaps;
    property Source: string read get_Source;
    property BaseUri: DDN.System.Windows.Common.DNUri read get_BaseUri;
    property Baseline: Double read get_Baseline write set_Baseline;
    property LineSpacing: Double read get_LineSpacing write set_LineSpacing;
  end;

  TDNFontFamily = class(TDNGenericImport<DNFontFamilyClass, DNFontFamily>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB67F5EB-F741-57E2-AF30-35D349815720}']
  { constructors } 

    {class} function init: DNFontFamilyMap;

  end;

  [DNTypeName('System.Windows.Media.FontFamilyMap')]
  DNFontFamilyMap = interface(DDN.mscorlib.DNObject)
  ['{05B6B73A-E6D8-37DC-BC45-825D7A62CC60}']
  { getters & setters } 

    function get_Unicode: string;
    procedure set_Unicode(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Unicode: string read get_Unicode write set_Unicode;
    property Target: string read get_Target write set_Target;
    property Scale: Double read get_Scale write set_Scale;
    property Language: DNXmlLanguage read get_Language write set_Language;
  end;

  TDNFontFamilyMap = class(TDNGenericImport<DNFontFamilyMapClass, DNFontFamilyMap>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontFamilyMapCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED28A253-3827-5B70-8552-876B1AF8F977}']
  end;

  [DNTypeName('System.Windows.Media.FontFamilyMapCollection')]
  DNFontFamilyMapCollection = interface(DDN.mscorlib.DNObject)
  ['{378C5830-C108-3190-B967-CEE0B7214397}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(item: DNFontFamilyMap): Boolean;
    function IndexOf(item: DNFontFamilyMap): Int32;
    procedure Insert(index: Int32; item: DNFontFamilyMap);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNFontFamilyMap>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNFontFamilyMapCollection = class(TDNGenericImport<DNFontFamilyMapCollectionClass, DNFontFamilyMapCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03C91968-291B-51AA-92CB-C5236640EE7D}']
  { static getter & setter } 

    {class} function get_SystemFontFamilies: DDN.mscorlib.DNICollection<DNFontFamily>;
    {class} function get_SystemTypefaces: DDN.mscorlib.DNICollection<DNTypeface>;

  { static methods } 

    {class} function GetFontFamilies(location: string): DDN.mscorlib.DNICollection<DNFontFamily>; overload;
    {class} function GetFontFamilies(baseUri: DDN.System.Windows.Common.DNUri): DDN.mscorlib.DNICollection<DNFontFamily>; overload;
    {class} function GetTypefaces(location: string): DDN.mscorlib.DNICollection<DNTypeface>; overload;
    {class} function GetTypefaces(baseUri: DDN.System.Windows.Common.DNUri): DDN.mscorlib.DNICollection<DNTypeface>; overload;
    {class} function GetTypefaces(baseUri: DDN.System.Windows.Common.DNUri; location: string): DDN.mscorlib.DNICollection<DNTypeface>; overload;
    {class} function GetFontFamilies(baseUri: DDN.System.Windows.Common.DNUri; location: string): DDN.mscorlib.DNICollection<DNFontFamily>; overload;

  { static propertys } 

    {class} property SystemFontFamilies: DDN.mscorlib.DNICollection<DNFontFamily> read get_SystemFontFamilies;
    {class} property SystemTypefaces: DDN.mscorlib.DNICollection<DNTypeface> read get_SystemTypefaces;
  end;

  [DNTypeName('System.Windows.Media.Fonts')]
  DNFonts = interface(DDN.mscorlib.DNObject)
  ['{FF6F99DB-4FA3-37AB-AFFE-3ECD8A46E271}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFonts = class(TDNGenericImport<DNFontsClass, DNFonts>) end;

  //-------------namespace: System.Windows.Media----------------
  DNFormattedTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0CCEFB5-369C-5401-93C6-07009F688475}']
  { constructors } 

    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; pixelsPerDip: Double): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; pixelsPerDip: Double): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; textFormattingMode: DNTextFormattingMode): DNFormattedText; overload;
    {class} function init(textToFormat: string; culture: DDN.mscorlib.DNCultureInfo; flowDirection: DNFlowDirection; typeface: DNTypeface; emSize: Double; foreground: DNBrush; numberSubstitution: DNNumberSubstitution; textFormattingMode: DNTextFormattingMode; pixelsPerDip: Double): DNFormattedText; overload;

  end;

  [DNTypeName('System.Windows.Media.FormattedText')]
  DNFormattedText = interface(DDN.mscorlib.DNObject)
  ['{9949C94F-AC98-3503-A101-40E5B4F55276}']
  { getters & setters } 

    function get_Text: string;
    function get_PixelsPerDip: Double;
    procedure set_PixelsPerDip(value: Double);
    function get_FlowDirection: DNFlowDirection;
    procedure set_FlowDirection(value: DNFlowDirection);
    function get_TextAlignment: DNTextAlignment;
    procedure set_TextAlignment(value: DNTextAlignment);
    function get_LineHeight: Double;
    procedure set_LineHeight(value: Double);
    function get_MaxTextWidth: Double;
    procedure set_MaxTextWidth(value: Double);
    function get_MaxTextHeight: Double;
    procedure set_MaxTextHeight(value: Double);
    function get_MaxLineCount: Int32;
    procedure set_MaxLineCount(value: Int32);
    function get_Trimming: DNTextTrimming;
    procedure set_Trimming(value: DNTextTrimming);
    function get_Height: Double;
    function get_Extent: Double;
    function get_Baseline: Double;
    function get_OverhangAfter: Double;
    function get_OverhangLeading: Double;
    function get_OverhangTrailing: Double;
    function get_Width: Double;
    function get_WidthIncludingTrailingWhitespace: Double;
    function get_MinWidth: Double;

  { methods } 

    procedure SetForegroundBrush(foregroundBrush: DNBrush); overload;
    procedure SetFontFamily(fontFamily: string); overload;
    procedure SetFontFamily(fontFamily: string; startIndex: Int32; count: Int32); overload;
    procedure SetFontFamily(fontFamily: DNFontFamily); overload;
    procedure SetFontSize(emSize: Double); overload;
    procedure SetCulture(culture: DDN.mscorlib.DNCultureInfo); overload;
    procedure SetNumberSubstitution(numberSubstitution: DNNumberSubstitution); overload;
    procedure SetFontWeight(weight: DNFontWeight); overload;
    procedure SetFontStyle(style: DNFontStyle); overload;
    procedure SetFontStretch(stretch: DNFontStretch); overload;
    procedure SetFontTypeface(typeface: DNTypeface); overload;
    procedure SetTextDecorations(textDecorations: DNTextDecorationCollection); overload;
    procedure SetMaxTextWidths(maxTextWidths: TArray<Double>);
    function BuildHighlightGeometry(origin: DDN.System.Windows.Common.DNPoint): DNGeometry; overload;
    function BuildGeometry(origin: DDN.System.Windows.Common.DNPoint): DNGeometry;
    function BuildHighlightGeometry(origin: DDN.System.Windows.Common.DNPoint; startIndex: Int32; count: Int32): DNGeometry; overload;
    procedure SetForegroundBrush(foregroundBrush: DNBrush; startIndex: Int32; count: Int32); overload;
    procedure SetFontFamily(fontFamily: DNFontFamily; startIndex: Int32; count: Int32); overload;
    procedure SetFontSize(emSize: Double; startIndex: Int32; count: Int32); overload;
    procedure SetCulture(culture: DDN.mscorlib.DNCultureInfo; startIndex: Int32; count: Int32); overload;
    procedure SetNumberSubstitution(numberSubstitution: DNNumberSubstitution; startIndex: Int32; count: Int32); overload;
    procedure SetFontWeight(weight: DNFontWeight; startIndex: Int32; count: Int32); overload;
    procedure SetFontStyle(style: DNFontStyle; startIndex: Int32; count: Int32); overload;
    procedure SetFontStretch(stretch: DNFontStretch; startIndex: Int32; count: Int32); overload;
    procedure SetFontTypeface(typeface: DNTypeface; startIndex: Int32; count: Int32); overload;
    procedure SetTextDecorations(textDecorations: DNTextDecorationCollection; startIndex: Int32; count: Int32); overload;
    function GetMaxTextWidths: TArray<Double>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property PixelsPerDip: Double read get_PixelsPerDip write set_PixelsPerDip;
    property FlowDirection: DNFlowDirection read get_FlowDirection write set_FlowDirection;
    property TextAlignment: DNTextAlignment read get_TextAlignment write set_TextAlignment;
    property LineHeight: Double read get_LineHeight write set_LineHeight;
    property MaxTextWidth: Double read get_MaxTextWidth write set_MaxTextWidth;
    property MaxTextHeight: Double read get_MaxTextHeight write set_MaxTextHeight;
    property MaxLineCount: Int32 read get_MaxLineCount write set_MaxLineCount;
    property Trimming: DNTextTrimming read get_Trimming write set_Trimming;
    property Height: Double read get_Height;
    property Extent: Double read get_Extent;
    property Baseline: Double read get_Baseline;
    property OverhangAfter: Double read get_OverhangAfter;
    property OverhangLeading: Double read get_OverhangLeading;
    property OverhangTrailing: Double read get_OverhangTrailing;
    property Width: Double read get_Width;
    property WidthIncludingTrailingWhitespace: Double read get_WidthIncludingTrailingWhitespace;
    property MinWidth: Double read get_MinWidth;
  end;

  TDNFormattedText = class(TDNGenericImport<DNFormattedTextClass, DNFormattedText>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGlyphRunClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9D349E1-6D17-51CA-A781-1D94C0BC0B15}']
  { constructors } 

    {class} function init: DNGlyphRun; overload;
    {class} function init(pixelsPerDip: Single): DNGlyphRun; overload;
    {class} function init(glyphTypeface: DNGlyphTypeface; bidiLevel: Int32; isSideways: Boolean; renderingEmSize: Double; pixelsPerDip: Single; glyphIndices: DDN.mscorlib.DNIList<UInt16>; baselineOrigin: DDN.System.Windows.Common.DNPoint; advanceWidths: DDN.mscorlib.DNIList<Double>; glyphOffsets: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>; characters: DDN.mscorlib.DNIList<Char>; deviceFontName: string; clusterMap: DDN.mscorlib.DNIList<UInt16>; caretStops: DDN.mscorlib.DNIList<Boolean>; language: DNXmlLanguage): DNGlyphRun; overload;
    {class} function init(glyphTypeface: DNGlyphTypeface; bidiLevel: Int32; isSideways: Boolean; renderingEmSize: Double; glyphIndices: DDN.mscorlib.DNIList<UInt16>; baselineOrigin: DDN.System.Windows.Common.DNPoint; advanceWidths: DDN.mscorlib.DNIList<Double>; glyphOffsets: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>; characters: DDN.mscorlib.DNIList<Char>; deviceFontName: string; clusterMap: DDN.mscorlib.DNIList<UInt16>; caretStops: DDN.mscorlib.DNIList<Boolean>; language: DNXmlLanguage): DNGlyphRun; overload;

  end;

  [DNTypeName('System.Windows.Media.GlyphRun')]
  DNGlyphRun = interface(DDN.mscorlib.DNObject)
  ['{1095A564-1A22-3109-BE47-E24CB608D6C3}']
  { getters & setters } 

    function get_PixelsPerDip: Single;
    procedure set_PixelsPerDip(value: Single);
    function get_BaselineOrigin: DDN.System.Windows.Common.DNPoint;
    procedure set_BaselineOrigin(value: DDN.System.Windows.Common.DNPoint);
    function get_FontRenderingEmSize: Double;
    procedure set_FontRenderingEmSize(value: Double);
    function get_GlyphTypeface: DNGlyphTypeface;
    procedure set_GlyphTypeface(value: DNGlyphTypeface);
    function get_BidiLevel: Int32;
    procedure set_BidiLevel(value: Int32);
    function get_IsSideways: Boolean;
    procedure set_IsSideways(value: Boolean);
    function get_CaretStops: DDN.mscorlib.DNIList<Boolean>;
    procedure set_CaretStops(value: DDN.mscorlib.DNIList<Boolean>);
    function get_IsHitTestable: Boolean;
    function get_ClusterMap: DDN.mscorlib.DNIList<UInt16>;
    procedure set_ClusterMap(value: DDN.mscorlib.DNIList<UInt16>);
    function get_Characters: DDN.mscorlib.DNIList<Char>;
    procedure set_Characters(value: DDN.mscorlib.DNIList<Char>);
    function get_GlyphIndices: DDN.mscorlib.DNIList<UInt16>;
    procedure set_GlyphIndices(value: DDN.mscorlib.DNIList<UInt16>);
    function get_AdvanceWidths: DDN.mscorlib.DNIList<Double>;
    procedure set_AdvanceWidths(value: DDN.mscorlib.DNIList<Double>);
    function get_GlyphOffsets: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>;
    procedure set_GlyphOffsets(value: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>);
    function get_Language: DNXmlLanguage;
    procedure set_Language(value: DNXmlLanguage);
    function get_DeviceFontName: string;
    procedure set_DeviceFontName(value: string);

  { methods } 

    function ComputeInkBoundingBox: DDN.System.Windows.Common.DNRect;
    function BuildGeometry: DNGeometry;
    function ComputeAlignmentBox: DDN.System.Windows.Common.DNRect;
    function GetDistanceFromCaretCharacterHit(characterHit: DNCharacterHit): Double;
    function GetCaretCharacterHitFromDistance(distance: Double; out isInside: Boolean): DNCharacterHit;
    function GetNextCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function GetPreviousCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PixelsPerDip: Single read get_PixelsPerDip write set_PixelsPerDip;
    property BaselineOrigin: DDN.System.Windows.Common.DNPoint read get_BaselineOrigin write set_BaselineOrigin;
    property FontRenderingEmSize: Double read get_FontRenderingEmSize write set_FontRenderingEmSize;
    property GlyphTypeface: DNGlyphTypeface read get_GlyphTypeface write set_GlyphTypeface;
    property BidiLevel: Int32 read get_BidiLevel write set_BidiLevel;
    property IsSideways: Boolean read get_IsSideways write set_IsSideways;
    property CaretStops: DDN.mscorlib.DNIList<Boolean> read get_CaretStops write set_CaretStops;
    property IsHitTestable: Boolean read get_IsHitTestable;
    property ClusterMap: DDN.mscorlib.DNIList<UInt16> read get_ClusterMap write set_ClusterMap;
    property Characters: DDN.mscorlib.DNIList<Char> read get_Characters write set_Characters;
    property GlyphIndices: DDN.mscorlib.DNIList<UInt16> read get_GlyphIndices write set_GlyphIndices;
    property AdvanceWidths: DDN.mscorlib.DNIList<Double> read get_AdvanceWidths write set_AdvanceWidths;
    property GlyphOffsets: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint> read get_GlyphOffsets write set_GlyphOffsets;
    property Language: DNXmlLanguage read get_Language write set_Language;
    property DeviceFontName: string read get_DeviceFontName write set_DeviceFontName;
  end;

  TDNGlyphRun = class(TDNGenericImport<DNGlyphRunClass, DNGlyphRun>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGlyphTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9D6C755D-26FB-565E-BB7F-263A5B7CFA04}']
  { constructors } 

    {class} function init: DNGlyphTypeface; overload;
    {class} function init(typefaceSource: DDN.System.Windows.Common.DNUri): DNGlyphTypeface; overload;
    {class} function init(typefaceSource: DDN.System.Windows.Common.DNUri; styleSimulations: DNStyleSimulations): DNGlyphTypeface; overload;

  end;

  [DNTypeName('System.Windows.Media.GlyphTypeface')]
  DNGlyphTypeface = interface(DDN.mscorlib.DNObject)
  ['{8719783C-1A2F-3AA7-BF74-E59B490BF3C5}']
  { getters & setters } 

    function get_FontUri: DDN.System.Windows.Common.DNUri;
    procedure set_FontUri(value: DDN.System.Windows.Common.DNUri);
    function get_FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Win32FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Win32FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_VersionStrings: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Copyrights: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_ManufacturerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Trademarks: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_DesignerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Descriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_VendorUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_DesignerUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_LicenseDescriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_SampleTexts: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string>;
    function get_Style: DNFontStyle;
    function get_Weight: DNFontWeight;
    function get_Stretch: DNFontStretch;
    function get_Version: Double;
    function get_Height: Double;
    function get_Baseline: Double;
    function get_CapsHeight: Double;
    function get_XHeight: Double;
    function get_Symbol: Boolean;
    function get_UnderlinePosition: Double;
    function get_UnderlineThickness: Double;
    function get_StrikethroughPosition: Double;
    function get_StrikethroughThickness: Double;
    function get_EmbeddingRights: DNFontEmbeddingRight;
    function get_AdvanceWidths: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_AdvanceHeights: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_LeftSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_RightSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_TopSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_BottomSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_DistancesFromHorizontalBaselineToBlackBoxBottom: DDN.mscorlib.DNIDictionary<UInt16, Double>;
    function get_CharacterToGlyphMap: DDN.mscorlib.DNIDictionary<Int32, UInt16>;
    function get_StyleSimulations: DNStyleSimulations;
    procedure set_StyleSimulations(value: DNStyleSimulations);
    function get_GlyphCount: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetGlyphOutline(glyphIndex: UInt16; renderingEmSize: Double; hintingEmSize: Double): DNGeometry;
    function GetFontStream: DDN.mscorlib.DNStream;
    function ComputeSubset(glyphs: DDN.mscorlib.DNICollection<UInt16>): TArray<Byte>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontUri: DDN.System.Windows.Common.DNUri read get_FontUri write set_FontUri;
    property FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_FamilyNames;
    property FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_FaceNames;
    property Win32FamilyNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Win32FamilyNames;
    property Win32FaceNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Win32FaceNames;
    property VersionStrings: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_VersionStrings;
    property Copyrights: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Copyrights;
    property ManufacturerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_ManufacturerNames;
    property Trademarks: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Trademarks;
    property DesignerNames: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_DesignerNames;
    property Descriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_Descriptions;
    property VendorUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_VendorUrls;
    property DesignerUrls: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_DesignerUrls;
    property LicenseDescriptions: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_LicenseDescriptions;
    property SampleTexts: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNCultureInfo, string> read get_SampleTexts;
    property Style: DNFontStyle read get_Style;
    property Weight: DNFontWeight read get_Weight;
    property Stretch: DNFontStretch read get_Stretch;
    property Version: Double read get_Version;
    property Height: Double read get_Height;
    property Baseline: Double read get_Baseline;
    property CapsHeight: Double read get_CapsHeight;
    property XHeight: Double read get_XHeight;
    property Symbol: Boolean read get_Symbol;
    property UnderlinePosition: Double read get_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness;
    property EmbeddingRights: DNFontEmbeddingRight read get_EmbeddingRights;
    property AdvanceWidths: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_AdvanceWidths;
    property AdvanceHeights: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_AdvanceHeights;
    property LeftSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_LeftSideBearings;
    property RightSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_RightSideBearings;
    property TopSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_TopSideBearings;
    property BottomSideBearings: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_BottomSideBearings;
    property DistancesFromHorizontalBaselineToBlackBoxBottom: DDN.mscorlib.DNIDictionary<UInt16, Double> read get_DistancesFromHorizontalBaselineToBlackBoxBottom;
    property CharacterToGlyphMap: DDN.mscorlib.DNIDictionary<Int32, UInt16> read get_CharacterToGlyphMap;
    property StyleSimulations: DNStyleSimulations read get_StyleSimulations write set_StyleSimulations;
    property GlyphCount: Int32 read get_GlyphCount;
  end;

  TDNGlyphTypeface = class(TDNGenericImport<DNGlyphTypefaceClass, DNGlyphTypeface>) end;

  //-------------namespace: System.Windows.Media----------------
  DNHitTestParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{750D24BC-5EAD-5344-9C23-116A6A9BCCB0}']
  end;

  [DNTypeName('System.Windows.Media.HitTestParameters')]
  DNHitTestParameters = interface(DDN.mscorlib.DNObject)
  ['{01F7CABC-8322-3F58-8600-B74E52FEA2DA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHitTestParameters = class(TDNGenericImport<DNHitTestParametersClass, DNHitTestParameters>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryHitTestParametersClass = interface(DNHitTestParametersClass)
  ['{FB81718F-C9E2-5225-8EFA-94278BBEBFEF}']
  { constructors } 

    {class} function init(geometry: DNGeometry): DNGeometryHitTestParameters;

  end;

  [DNTypeName('System.Windows.Media.GeometryHitTestParameters')]
  DNGeometryHitTestParameters = interface(DNHitTestParameters)
  ['{EBDF750D-E1FA-38BF-9D30-53AADFC616D5}']
  { getters & setters } 

    function get_HitGeometry: DNGeometry;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HitGeometry: DNGeometry read get_HitGeometry;
  end;

  TDNGeometryHitTestParameters = class(TDNGenericImport<DNGeometryHitTestParametersClass, DNGeometryHitTestParameters>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointHitTestParametersClass = interface(DNHitTestParametersClass)
  ['{5EC41C0A-175D-50C4-85B1-7F75EA2C9CDD}']
  { constructors } 

    {class} function init(point: DDN.System.Windows.Common.DNPoint): DNPointHitTestParameters;

  end;

  [DNTypeName('System.Windows.Media.PointHitTestParameters')]
  DNPointHitTestParameters = interface(DNHitTestParameters)
  ['{2754EEFB-2874-3858-9388-BB1D0BB03DB2}']
  { getters & setters } 

    function get_HitPoint: DDN.System.Windows.Common.DNPoint;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HitPoint: DDN.System.Windows.Common.DNPoint read get_HitPoint;
  end;

  TDNPointHitTestParameters = class(TDNGenericImport<DNPointHitTestParametersClass, DNPointHitTestParameters>) end;

  //-------------namespace: System.Windows.Media----------------
  DNHitTestResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9E0C6181-F520-5E1D-B42B-1DE737F0B6D2}']
  end;

  [DNTypeName('System.Windows.Media.HitTestResult')]
  DNHitTestResult = interface(DDN.mscorlib.DNObject)
  ['{7CAC55DC-20BB-34E2-B87C-0C80F3EF254D}']
  { getters & setters } 

    function get_VisualHit: DDN.System.Windows.Common.DNDependencyObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VisualHit: DDN.System.Windows.Common.DNDependencyObject read get_VisualHit;
  end;

  TDNHitTestResult = class(TDNGenericImport<DNHitTestResultClass, DNHitTestResult>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryHitTestResultClass = interface(DNHitTestResultClass)
  ['{AF63DEC0-2AC2-5078-A48F-8FDB40EFA24A}']
  { constructors } 

    {class} function init(visualHit: DNVisual; intersectionDetail: DNIntersectionDetail): DNGeometryHitTestResult;

  end;

  [DNTypeName('System.Windows.Media.GeometryHitTestResult')]
  DNGeometryHitTestResult = interface(DNHitTestResult)
  ['{09097C35-021C-3ACD-A625-205D976F9E92}']
  { getters & setters } 

    function get_IntersectionDetail: DNIntersectionDetail;
    function get_VisualHit: DNVisual;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IntersectionDetail: DNIntersectionDetail read get_IntersectionDetail;
    property VisualHit: DNVisual read get_VisualHit;
  end;

  TDNGeometryHitTestResult = class(TDNGenericImport<DNGeometryHitTestResultClass, DNGeometryHitTestResult>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRayHitTestResultClass = interface(DNHitTestResultClass)
  ['{0B21F869-E87A-5B28-969B-EFBF3179D576}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.RayHitTestResult')]
  DNRayHitTestResult = interface(DNHitTestResult)
  ['{9BA72DBE-6B30-3214-B3A9-731E742427FA}']
  { getters & setters } 

    function get_VisualHit: DNVisual3D;
    function get_ModelHit: DNModel3D;
    function get_PointHit: DNPoint3D;
    function get_DistanceToRayOrigin: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VisualHit: DNVisual3D read get_VisualHit;
    property ModelHit: DNModel3D read get_ModelHit;
    property PointHit: DNPoint3D read get_PointHit;
    property DistanceToRayOrigin: Double read get_DistanceToRayOrigin;
  end;

  TDNRayHitTestResult = class(TDNGenericImport<DNRayHitTestResultClass, DNRayHitTestResult>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRayMeshGeometry3DHitTestResultClass = interface(DNRayHitTestResultClass)
  ['{5A32E580-5499-5509-8C10-336F4D48265D}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult')]
  DNRayMeshGeometry3DHitTestResult = interface(DNRayHitTestResult)
  ['{FFBEF122-E119-30DC-BAD8-D50911062C45}']
  { getters & setters } 

    function get_PointHit: DNPoint3D;
    function get_DistanceToRayOrigin: Double;
    function get_VertexIndex1: Int32;
    function get_VertexIndex2: Int32;
    function get_VertexIndex3: Int32;
    function get_VertexWeight1: Double;
    function get_VertexWeight2: Double;
    function get_VertexWeight3: Double;
    function get_MeshHit: DNMeshGeometry3D;
    function get_VisualHit: DNVisual3D;
    function get_ModelHit: DNModel3D;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PointHit: DNPoint3D read get_PointHit;
    property DistanceToRayOrigin: Double read get_DistanceToRayOrigin;
    property VertexIndex1: Int32 read get_VertexIndex1;
    property VertexIndex2: Int32 read get_VertexIndex2;
    property VertexIndex3: Int32 read get_VertexIndex3;
    property VertexWeight1: Double read get_VertexWeight1;
    property VertexWeight2: Double read get_VertexWeight2;
    property VertexWeight3: Double read get_VertexWeight3;
    property MeshHit: DNMeshGeometry3D read get_MeshHit;
    property VisualHit: DNVisual3D read get_VisualHit;
    property ModelHit: DNModel3D read get_ModelHit;
  end;

  TDNRayMeshGeometry3DHitTestResult = class(TDNGenericImport<DNRayMeshGeometry3DHitTestResultClass, DNRayMeshGeometry3DHitTestResult>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointHitTestResultClass = interface(DNHitTestResultClass)
  ['{3857E1E4-FFE8-535E-86C1-981FCC13C59D}']
  { constructors } 

    {class} function init(visualHit: DNVisual; pointHit: DDN.System.Windows.Common.DNPoint): DNPointHitTestResult;

  end;

  [DNTypeName('System.Windows.Media.PointHitTestResult')]
  DNPointHitTestResult = interface(DNHitTestResult)
  ['{082B7A91-0313-39EE-B6D1-4ABAB9AA5DCD}']
  { getters & setters } 

    function get_PointHit: DDN.System.Windows.Common.DNPoint;
    function get_VisualHit: DNVisual;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PointHit: DDN.System.Windows.Common.DNPoint read get_PointHit;
    property VisualHit: DNVisual read get_VisualHit;
  end;

  TDNPointHitTestResult = class(TDNGenericImport<DNPointHitTestResultClass, DNPointHitTestResult>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapCodecInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7772A388-756D-5E83-8AA2-9D0E8A7182F7}']
  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapCodecInfo')]
  DNBitmapCodecInfo = interface(DDN.mscorlib.DNObject)
  ['{3E46923A-DE12-394A-A681-E64FD677FBCE}']
  { getters & setters } 

    function get_ContainerFormat: DDN.mscorlib.DNGuid;
    function get_Author: string;
    function get_Version: DDN.mscorlib.DNVersion;
    function get_SpecificationVersion: DDN.mscorlib.DNVersion;
    function get_FriendlyName: string;
    function get_DeviceManufacturer: string;
    function get_DeviceModels: string;
    function get_MimeTypes: string;
    function get_FileExtensions: string;
    function get_SupportsAnimation: Boolean;
    function get_SupportsLossless: Boolean;
    function get_SupportsMultipleFrames: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContainerFormat: DDN.mscorlib.DNGuid read get_ContainerFormat;
    property Author: string read get_Author;
    property Version: DDN.mscorlib.DNVersion read get_Version;
    property SpecificationVersion: DDN.mscorlib.DNVersion read get_SpecificationVersion;
    property FriendlyName: string read get_FriendlyName;
    property DeviceManufacturer: string read get_DeviceManufacturer;
    property DeviceModels: string read get_DeviceModels;
    property MimeTypes: string read get_MimeTypes;
    property FileExtensions: string read get_FileExtensions;
    property SupportsAnimation: Boolean read get_SupportsAnimation;
    property SupportsLossless: Boolean read get_SupportsLossless;
    property SupportsMultipleFrames: Boolean read get_SupportsMultipleFrames;
  end;

  TDNBitmapCodecInfo = class(TDNGenericImport<DNBitmapCodecInfoClass, DNBitmapCodecInfo>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapMetadataBlobClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DCD4BD42-3DAA-58DE-A86B-E2C66C3A3694}']
  { constructors } 

    {class} function init(blob: TArray<Byte>): DNBitmapMetadataBlob;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapMetadataBlob')]
  DNBitmapMetadataBlob = interface(DDN.mscorlib.DNObject)
  ['{B2FE853D-0298-3033-A407-4C7FAC2ACCDF}']
  { methods } 

    function GetBlobValue: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBitmapMetadataBlob = class(TDNGenericImport<DNBitmapMetadataBlobClass, DNBitmapMetadataBlob>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapPalettesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60330E5F-238A-5173-B642-11077D21D661}']
  { static getter & setter } 

    {class} function get_BlackAndWhite: DNBitmapPalette;
    {class} function get_BlackAndWhiteTransparent: DNBitmapPalette;
    {class} function get_Halftone8: DNBitmapPalette;
    {class} function get_Halftone8Transparent: DNBitmapPalette;
    {class} function get_Halftone27: DNBitmapPalette;
    {class} function get_Halftone27Transparent: DNBitmapPalette;
    {class} function get_Halftone64: DNBitmapPalette;
    {class} function get_Halftone64Transparent: DNBitmapPalette;
    {class} function get_Halftone125: DNBitmapPalette;
    {class} function get_Halftone125Transparent: DNBitmapPalette;
    {class} function get_Halftone216: DNBitmapPalette;
    {class} function get_Halftone216Transparent: DNBitmapPalette;
    {class} function get_Halftone252: DNBitmapPalette;
    {class} function get_Halftone252Transparent: DNBitmapPalette;
    {class} function get_Halftone256: DNBitmapPalette;
    {class} function get_Halftone256Transparent: DNBitmapPalette;
    {class} function get_Gray4: DNBitmapPalette;
    {class} function get_Gray4Transparent: DNBitmapPalette;
    {class} function get_Gray16: DNBitmapPalette;
    {class} function get_Gray16Transparent: DNBitmapPalette;
    {class} function get_Gray256: DNBitmapPalette;
    {class} function get_Gray256Transparent: DNBitmapPalette;
    {class} function get_WebPalette: DNBitmapPalette;
    {class} function get_WebPaletteTransparent: DNBitmapPalette;

  { static propertys } 

    {class} property BlackAndWhite: DNBitmapPalette read get_BlackAndWhite;
    {class} property BlackAndWhiteTransparent: DNBitmapPalette read get_BlackAndWhiteTransparent;
    {class} property Halftone8: DNBitmapPalette read get_Halftone8;
    {class} property Halftone8Transparent: DNBitmapPalette read get_Halftone8Transparent;
    {class} property Halftone27: DNBitmapPalette read get_Halftone27;
    {class} property Halftone27Transparent: DNBitmapPalette read get_Halftone27Transparent;
    {class} property Halftone64: DNBitmapPalette read get_Halftone64;
    {class} property Halftone64Transparent: DNBitmapPalette read get_Halftone64Transparent;
    {class} property Halftone125: DNBitmapPalette read get_Halftone125;
    {class} property Halftone125Transparent: DNBitmapPalette read get_Halftone125Transparent;
    {class} property Halftone216: DNBitmapPalette read get_Halftone216;
    {class} property Halftone216Transparent: DNBitmapPalette read get_Halftone216Transparent;
    {class} property Halftone252: DNBitmapPalette read get_Halftone252;
    {class} property Halftone252Transparent: DNBitmapPalette read get_Halftone252Transparent;
    {class} property Halftone256: DNBitmapPalette read get_Halftone256;
    {class} property Halftone256Transparent: DNBitmapPalette read get_Halftone256Transparent;
    {class} property Gray4: DNBitmapPalette read get_Gray4;
    {class} property Gray4Transparent: DNBitmapPalette read get_Gray4Transparent;
    {class} property Gray16: DNBitmapPalette read get_Gray16;
    {class} property Gray16Transparent: DNBitmapPalette read get_Gray16Transparent;
    {class} property Gray256: DNBitmapPalette read get_Gray256;
    {class} property Gray256Transparent: DNBitmapPalette read get_Gray256Transparent;
    {class} property WebPalette: DNBitmapPalette read get_WebPalette;
    {class} property WebPaletteTransparent: DNBitmapPalette read get_WebPaletteTransparent;
  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapPalettes')]
  DNBitmapPalettes = interface(DDN.mscorlib.DNObject)
  ['{8510312E-F696-3BFE-AE77-FC42D5093790}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBitmapPalettes = class(TDNGenericImport<DNBitmapPalettesClass, DNBitmapPalettes>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapSizeOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA3A9A2A-52C5-5C0B-9462-B87C809DBCB0}']
  { static methods } 

    {class} function FromEmptyOptions: DNBitmapSizeOptions;
    {class} function FromHeight(pixelHeight: Int32): DNBitmapSizeOptions;
    {class} function FromWidth(pixelWidth: Int32): DNBitmapSizeOptions;
    {class} function FromWidthAndHeight(pixelWidth: Int32; pixelHeight: Int32): DNBitmapSizeOptions;
    {class} function FromRotation(rotation: DNRotation): DNBitmapSizeOptions;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapSizeOptions')]
  DNBitmapSizeOptions = interface(DDN.mscorlib.DNObject)
  ['{194BC85C-EB33-3F41-B99A-9E3DFE2906B0}']
  { getters & setters } 

    function get_PreservesAspectRatio: Boolean;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_Rotation: DNRotation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreservesAspectRatio: Boolean read get_PreservesAspectRatio;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property Rotation: DNRotation read get_Rotation;
  end;

  TDNBitmapSizeOptions = class(TDNGenericImport<DNBitmapSizeOptionsClass, DNBitmapSizeOptions>) end;

  //-------------namespace: System.Windows.Media----------------
  DNLanguageSpecificStringDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{873AF65C-C8A2-5D14-B8D5-772DFB3DD611}']
  end;

  [DNTypeName('System.Windows.Media.LanguageSpecificStringDictionary')]
  DNLanguageSpecificStringDictionary = interface(DDN.mscorlib.DNObject)
  ['{09C534B8-5582-3630-9E67-CBF9384779B7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<DNXmlLanguage>;
    function get_Values: DDN.mscorlib.DNICollection<string>;

  { methods } 

    function TryGetValue(key: DNXmlLanguage; out value: string): Boolean;
    function ContainsKey(key: DNXmlLanguage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection<DNXmlLanguage> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<string> read get_Values;
  end;

  TDNLanguageSpecificStringDictionary = class(TDNGenericImport<DNLanguageSpecificStringDictionaryClass, DNLanguageSpecificStringDictionary>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNHitTestParameters3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{194C7E62-C1DD-56A9-BD57-A49952068F16}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.HitTestParameters3D')]
  DNHitTestParameters3D = interface(DDN.mscorlib.DNObject)
  ['{39149359-0D62-3ECA-BF5B-838FD0D3CD31}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHitTestParameters3D = class(TDNGenericImport<DNHitTestParameters3DClass, DNHitTestParameters3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRayHitTestParametersClass = interface(DNHitTestParameters3DClass)
  ['{5853D6A4-CF07-500F-9C8B-C264C7845617}']
  { constructors } 

    {class} function init(origin: DNPoint3D; direction: DNVector3D): DNRayHitTestParameters;

  end;

  [DNTypeName('System.Windows.Media.Media3D.RayHitTestParameters')]
  DNRayHitTestParameters = interface(DNHitTestParameters3D)
  ['{C3CDB0AB-3FF0-354D-9A16-23C5CFE6AE9D}']
  { getters & setters } 

    function get_Origin: DNPoint3D;
    function get_Direction: DNVector3D;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Origin: DNPoint3D read get_Origin;
    property Direction: DNVector3D read get_Direction;
  end;

  TDNRayHitTestParameters = class(TDNGenericImport<DNRayHitTestParametersClass, DNRayHitTestParameters>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVisual3DCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1564A60-88D6-576A-B608-CB46783B53A3}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3DCollection')]
  DNVisual3DCollection = interface(DDN.mscorlib.DNObject)
  ['{3FA8FCA0-E2CE-3E69-A74C-A28401A56200}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Insert(index: Int32; value: DNVisual3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNVisual3D>; index: Int32);
    function &Contains(value: DNVisual3D): Boolean;
    function IndexOf(value: DNVisual3D): Int32;
    function GetEnumerator: DNMedia3D_Visual3DCollection_Enumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNVisual3DCollection = class(TDNGenericImport<DNVisual3DCollectionClass, DNVisual3DCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNNumberSubstitutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1873EBC6-919A-58D5-99EF-7D093A01DFC1}']
  { constructors } 

    {class} function init: DNNumberSubstitution; overload;
    {class} function init(source: DNNumberCultureSource; cultureOverride: DDN.mscorlib.DNCultureInfo; substitution: DNNumberSubstitutionMethod): DNNumberSubstitution; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_CultureSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CultureOverrideProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SubstitutionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property CultureSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CultureSourceProperty;
    {class} property CultureOverrideProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CultureOverrideProperty;
    {class} property SubstitutionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SubstitutionProperty;

  { static methods } 

    {class} function GetCultureSource(target: DDN.System.Windows.Common.DNDependencyObject): DNNumberCultureSource;
    {class} function GetCultureOverride(target: DDN.System.Windows.Common.DNDependencyObject): DDN.mscorlib.DNCultureInfo;
    {class} function GetSubstitution(target: DDN.System.Windows.Common.DNDependencyObject): DNNumberSubstitutionMethod;
    {class} procedure SetCultureSource(target: DDN.System.Windows.Common.DNDependencyObject; value: DNNumberCultureSource);
    {class} procedure SetCultureOverride(target: DDN.System.Windows.Common.DNDependencyObject; value: DDN.mscorlib.DNCultureInfo);
    {class} procedure SetSubstitution(target: DDN.System.Windows.Common.DNDependencyObject; value: DNNumberSubstitutionMethod);

  end;

  [DNTypeName('System.Windows.Media.NumberSubstitution')]
  DNNumberSubstitution = interface(DDN.mscorlib.DNObject)
  ['{B87D6163-3198-3FB7-9079-21EEDBCB8A97}']
  { getters & setters } 

    function get_CultureSource: DNNumberCultureSource;
    procedure set_CultureSource(value: DNNumberCultureSource);
    function get_CultureOverride: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureOverride(value: DDN.mscorlib.DNCultureInfo);
    function get_Substitution: DNNumberSubstitutionMethod;
    procedure set_Substitution(value: DNNumberSubstitutionMethod);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CultureSource: DNNumberCultureSource read get_CultureSource write set_CultureSource;
    property CultureOverride: DDN.mscorlib.DNCultureInfo read get_CultureOverride write set_CultureOverride;
    property Substitution: DNNumberSubstitutionMethod read get_Substitution write set_Substitution;
  end;

  TDNNumberSubstitution = class(TDNGenericImport<DNNumberSubstitutionClass, DNNumberSubstitution>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPixelFormatsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6FD4AE16-E206-5B93-9D2B-EB54C097FD96}']
  { static getter & setter } 

    {class} function get_Default: DNPixelFormat;
    {class} function get_Indexed1: DNPixelFormat;
    {class} function get_Indexed2: DNPixelFormat;
    {class} function get_Indexed4: DNPixelFormat;
    {class} function get_Indexed8: DNPixelFormat;
    {class} function get_BlackWhite: DNPixelFormat;
    {class} function get_Gray2: DNPixelFormat;
    {class} function get_Gray4: DNPixelFormat;
    {class} function get_Gray8: DNPixelFormat;
    {class} function get_Bgr555: DNPixelFormat;
    {class} function get_Bgr565: DNPixelFormat;
    {class} function get_Rgb128Float: DNPixelFormat;
    {class} function get_Bgr24: DNPixelFormat;
    {class} function get_Rgb24: DNPixelFormat;
    {class} function get_Bgr101010: DNPixelFormat;
    {class} function get_Bgr32: DNPixelFormat;
    {class} function get_Bgra32: DNPixelFormat;
    {class} function get_Pbgra32: DNPixelFormat;
    {class} function get_Rgb48: DNPixelFormat;
    {class} function get_Rgba64: DNPixelFormat;
    {class} function get_Prgba64: DNPixelFormat;
    {class} function get_Gray16: DNPixelFormat;
    {class} function get_Gray32Float: DNPixelFormat;
    {class} function get_Rgba128Float: DNPixelFormat;
    {class} function get_Prgba128Float: DNPixelFormat;
    {class} function get_Cmyk32: DNPixelFormat;

  { static propertys } 

    {class} property &Default: DNPixelFormat read get_Default;
    {class} property Indexed1: DNPixelFormat read get_Indexed1;
    {class} property Indexed2: DNPixelFormat read get_Indexed2;
    {class} property Indexed4: DNPixelFormat read get_Indexed4;
    {class} property Indexed8: DNPixelFormat read get_Indexed8;
    {class} property BlackWhite: DNPixelFormat read get_BlackWhite;
    {class} property Gray2: DNPixelFormat read get_Gray2;
    {class} property Gray4: DNPixelFormat read get_Gray4;
    {class} property Gray8: DNPixelFormat read get_Gray8;
    {class} property Bgr555: DNPixelFormat read get_Bgr555;
    {class} property Bgr565: DNPixelFormat read get_Bgr565;
    {class} property Rgb128Float: DNPixelFormat read get_Rgb128Float;
    {class} property Bgr24: DNPixelFormat read get_Bgr24;
    {class} property Rgb24: DNPixelFormat read get_Rgb24;
    {class} property Bgr101010: DNPixelFormat read get_Bgr101010;
    {class} property Bgr32: DNPixelFormat read get_Bgr32;
    {class} property Bgra32: DNPixelFormat read get_Bgra32;
    {class} property Pbgra32: DNPixelFormat read get_Pbgra32;
    {class} property Rgb48: DNPixelFormat read get_Rgb48;
    {class} property Rgba64: DNPixelFormat read get_Rgba64;
    {class} property Prgba64: DNPixelFormat read get_Prgba64;
    {class} property Gray16: DNPixelFormat read get_Gray16;
    {class} property Gray32Float: DNPixelFormat read get_Gray32Float;
    {class} property Rgba128Float: DNPixelFormat read get_Rgba128Float;
    {class} property Prgba128Float: DNPixelFormat read get_Prgba128Float;
    {class} property Cmyk32: DNPixelFormat read get_Cmyk32;
  end;

  [DNTypeName('System.Windows.Media.PixelFormats')]
  DNPixelFormats = interface(DDN.mscorlib.DNObject)
  ['{276BCCBC-6799-3618-B7D4-254F138399EF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPixelFormats = class(TDNGenericImport<DNPixelFormatsClass, DNPixelFormats>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRenderCapabilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3EC7ED8-6BBB-5BE0-B309-9E78C32F1F79}']
  { static getter & setter } 

    {class} function get_Tier: Int32;
    {class} function get_IsShaderEffectSoftwareRenderingSupported: Boolean;
    {class} function get_MaxHardwareTextureSize: DDN.System.Windows.Common.DNSize;

  { static methods } 

    {class} function IsPixelShaderVersionSupported(majorVersionRequested: Int16; minorVersionRequested: Int16): Boolean;
    {class} function IsPixelShaderVersionSupportedInSoftware(majorVersionRequested: Int16; minorVersionRequested: Int16): Boolean;
    {class} function MaxPixelShaderInstructionSlots(majorVersionRequested: Int16; minorVersionRequested: Int16): Int32;

  { static propertys } 

    {class} property Tier: Int32 read get_Tier;
    {class} property IsShaderEffectSoftwareRenderingSupported: Boolean read get_IsShaderEffectSoftwareRenderingSupported;
    {class} property MaxHardwareTextureSize: DDN.System.Windows.Common.DNSize read get_MaxHardwareTextureSize;
  end;

  [DNTypeName('System.Windows.Media.RenderCapability')]
  DNRenderCapability = interface(DDN.mscorlib.DNObject)
  ['{61941B0F-6329-3F81-B1CF-240CCE4B126B}']
  { events } 

    {class} procedure add_TierChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_TierChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRenderCapability = class(TDNGenericImport<DNRenderCapabilityClass, DNRenderCapability>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRenderOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21396D8A-D947-53E0-A0F1-ACB6D63C9609}']
  { static getter & setter } 

    {class} function get_ProcessRenderMode: DNRenderMode;
    {class} procedure set_ProcessRenderMode(value: DNRenderMode);

  { static fields getter & setter } 

   function __fakeFieldGet_EdgeModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapScalingModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ClearTypeHintProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CachingHintProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CacheInvalidationThresholdMinimumProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CacheInvalidationThresholdMaximumProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EdgeModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EdgeModeProperty;
    {class} property BitmapScalingModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapScalingModeProperty;
    {class} property ClearTypeHintProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ClearTypeHintProperty;
    {class} property CachingHintProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CachingHintProperty;
    {class} property CacheInvalidationThresholdMinimumProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CacheInvalidationThresholdMinimumProperty;
    {class} property CacheInvalidationThresholdMaximumProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CacheInvalidationThresholdMaximumProperty;

  { static methods } 

    {class} function GetEdgeMode(target: DDN.System.Windows.Common.DNDependencyObject): DNEdgeMode;
    {class} procedure SetEdgeMode(target: DDN.System.Windows.Common.DNDependencyObject; edgeMode: DNEdgeMode);
    {class} function GetBitmapScalingMode(target: DDN.System.Windows.Common.DNDependencyObject): DNBitmapScalingMode;
    {class} procedure SetBitmapScalingMode(target: DDN.System.Windows.Common.DNDependencyObject; bitmapScalingMode: DNBitmapScalingMode);
    {class} function GetClearTypeHint(target: DDN.System.Windows.Common.DNDependencyObject): DNClearTypeHint;
    {class} procedure SetClearTypeHint(target: DDN.System.Windows.Common.DNDependencyObject; clearTypeHint: DNClearTypeHint);
    {class} function GetCachingHint(target: DDN.System.Windows.Common.DNDependencyObject): DNCachingHint;
    {class} procedure SetCachingHint(target: DDN.System.Windows.Common.DNDependencyObject; cachingHint: DNCachingHint);
    {class} function GetCacheInvalidationThresholdMinimum(target: DDN.System.Windows.Common.DNDependencyObject): Double;
    {class} procedure SetCacheInvalidationThresholdMinimum(target: DDN.System.Windows.Common.DNDependencyObject; cacheInvalidationThresholdMinimum: Double);
    {class} function GetCacheInvalidationThresholdMaximum(target: DDN.System.Windows.Common.DNDependencyObject): Double;
    {class} procedure SetCacheInvalidationThresholdMaximum(target: DDN.System.Windows.Common.DNDependencyObject; cacheInvalidationThresholdMaximum: Double);

  { static propertys } 

    {class} property ProcessRenderMode: DNRenderMode read get_ProcessRenderMode write set_ProcessRenderMode;
  end;

  [DNTypeName('System.Windows.Media.RenderOptions')]
  DNRenderOptions = interface(DDN.mscorlib.DNObject)
  ['{AC00A2CD-5937-3508-B29B-BE73095EFD70}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRenderOptions = class(TDNGenericImport<DNRenderOptionsClass, DNRenderOptions>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNCultureSpecificCharacterBufferRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF1D2C2D-FCC1-560D-B61D-B1A31299FF72}']
  { constructors } 

    {class} function init(culture: DDN.mscorlib.DNCultureInfo; characterBufferRange: DNCharacterBufferRange): DNCultureSpecificCharacterBufferRange;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange')]
  DNCultureSpecificCharacterBufferRange = interface(DDN.mscorlib.DNObject)
  ['{01664F65-0654-35D1-B104-0809976A7CF5}']
  { getters & setters } 

    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_CharacterBufferRange: DNCharacterBufferRange;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    property CharacterBufferRange: DNCharacterBufferRange read get_CharacterBufferRange;
  end;

  TDNCultureSpecificCharacterBufferRange = class(TDNGenericImport<DNCultureSpecificCharacterBufferRangeClass, DNCultureSpecificCharacterBufferRange>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNIndexedGlyphRunClass = interface(DDN.mscorlib.DNObjectClass)
  ['{139D4933-9896-5A52-AB34-F0BD00F17444}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.IndexedGlyphRun')]
  DNIndexedGlyphRun = interface(DDN.mscorlib.DNObject)
  ['{E0BCEEAE-BDA1-3D59-919B-60077A4F7513}']
  { getters & setters } 

    function get_TextSourceCharacterIndex: Int32;
    function get_TextSourceLength: Int32;
    function get_GlyphRun: DNGlyphRun;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextSourceCharacterIndex: Int32 read get_TextSourceCharacterIndex;
    property TextSourceLength: Int32 read get_TextSourceLength;
    property GlyphRun: DNGlyphRun read get_GlyphRun;
  end;

  TDNIndexedGlyphRun = class(TDNGenericImport<DNIndexedGlyphRunClass, DNIndexedGlyphRun>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextBoundsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F972B4B-B6AA-5CA0-8E0D-39013890A850}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextBounds')]
  DNTextBounds = interface(DDN.mscorlib.DNObject)
  ['{A7CF6BE3-2868-353B-AEB3-ED3FB3BC7A55}']
  { getters & setters } 

    function get_Rectangle: DDN.System.Windows.Common.DNRect;
    function get_TextRunBounds: DDN.mscorlib.DNIList<DNTextRunBounds>;
    function get_FlowDirection: DNFlowDirection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rectangle: DDN.System.Windows.Common.DNRect read get_Rectangle;
    property TextRunBounds: DDN.mscorlib.DNIList<DNTextRunBounds> read get_TextRunBounds;
    property FlowDirection: DNFlowDirection read get_FlowDirection;
  end;

  TDNTextBounds = class(TDNGenericImport<DNTextBoundsClass, DNTextBounds>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextCollapsedRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC594F2E-BE10-5548-9580-D5539CDF4042}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextCollapsedRange')]
  DNTextCollapsedRange = interface(DDN.mscorlib.DNObject)
  ['{3E1403CD-EAE5-315B-B5F3-E5C1D142C689}']
  { getters & setters } 

    function get_TextSourceCharacterIndex: Int32;
    function get_Length: Int32;
    function get_Width: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextSourceCharacterIndex: Int32 read get_TextSourceCharacterIndex;
    property Length: Int32 read get_Length;
    property Width: Double read get_Width;
  end;

  TDNTextCollapsedRange = class(TDNGenericImport<DNTextCollapsedRangeClass, DNTextCollapsedRange>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextCollapsingPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C01C3EE3-2E9C-5EAB-AE54-7A8D2FCA02EE}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextCollapsingProperties')]
  DNTextCollapsingProperties = interface(DDN.mscorlib.DNObject)
  ['{29B320CE-6AF1-3197-A803-EC8F6C0A77C1}']
  { getters & setters } 

    function get_Width: Double;
    function get_Symbol: DNTextRun;
    function get_Style: DNTextCollapsingStyle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Symbol: DNTextRun read get_Symbol;
    property Style: DNTextCollapsingStyle read get_Style;
  end;

  TDNTextCollapsingProperties = class(TDNGenericImport<DNTextCollapsingPropertiesClass, DNTextCollapsingProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextTrailingCharacterEllipsisClass = interface(DNTextCollapsingPropertiesClass)
  ['{A0454978-12F8-5D6F-A3D3-8909AC50DE3D}']
  { constructors } 

    {class} function init(width: Double; textRunProperties: DNTextRunProperties): DNTextTrailingCharacterEllipsis;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis')]
  DNTextTrailingCharacterEllipsis = interface(DNTextCollapsingProperties)
  ['{65024325-1E83-3E3A-8823-3E05741E54E5}']
  { getters & setters } 

    function get_Width: Double;
    function get_Symbol: DNTextRun;
    function get_Style: DNTextCollapsingStyle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Symbol: DNTextRun read get_Symbol;
    property Style: DNTextCollapsingStyle read get_Style;
  end;

  TDNTextTrailingCharacterEllipsis = class(TDNGenericImport<DNTextTrailingCharacterEllipsisClass, DNTextTrailingCharacterEllipsis>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextTrailingWordEllipsisClass = interface(DNTextCollapsingPropertiesClass)
  ['{4E3EC723-7CCC-53BC-A5D5-C2E1E4800A87}']
  { constructors } 

    {class} function init(width: Double; textRunProperties: DNTextRunProperties): DNTextTrailingWordEllipsis;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextTrailingWordEllipsis')]
  DNTextTrailingWordEllipsis = interface(DNTextCollapsingProperties)
  ['{E2AFF7F2-5B30-3197-8080-56F10A248D03}']
  { getters & setters } 

    function get_Width: Double;
    function get_Symbol: DNTextRun;
    function get_Style: DNTextCollapsingStyle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Symbol: DNTextRun read get_Symbol;
    property Style: DNTextCollapsingStyle read get_Style;
  end;

  TDNTextTrailingWordEllipsis = class(TDNGenericImport<DNTextTrailingWordEllipsisClass, DNTextTrailingWordEllipsis>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextEmbeddedObjectMetricsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AB087BE-DCCD-5D90-8F57-DBE00E71537F}']
  { constructors } 

    {class} function init(width: Double; height: Double; baseline: Double): DNTextEmbeddedObjectMetrics;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics')]
  DNTextEmbeddedObjectMetrics = interface(DDN.mscorlib.DNObject)
  ['{4BBD0789-8FFE-3414-A73D-2E996ED2CFEE}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Baseline: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Baseline: Double read get_Baseline;
  end;

  TDNTextEmbeddedObjectMetrics = class(TDNGenericImport<DNTextEmbeddedObjectMetricsClass, DNTextEmbeddedObjectMetrics>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EF39F06-74A7-5517-B04C-1AEA5EF4F230}']
  { static methods } 

    {class} function Create(textFormattingMode: DNTextFormattingMode): DNTextFormatter; overload;
    {class} function Create: DNTextFormatter; overload;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextFormatter')]
  DNTextFormatter = interface(DDN.mscorlib.DNObject)
  ['{39BAB280-D41C-3DE3-A82E-761E1F08670F}']
  { methods } 

    procedure Dispose;
    function FormatLine(textSource: DNTextSource; firstCharIndex: Int32; paragraphWidth: Double; paragraphProperties: DNTextParagraphProperties; previousLineBreak: DNTextLineBreak): DNTextLine; overload;
    function FormatLine(textSource: DNTextSource; firstCharIndex: Int32; paragraphWidth: Double; paragraphProperties: DNTextParagraphProperties; previousLineBreak: DNTextLineBreak; textRunCache: DNTextRunCache): DNTextLine; overload;
    function FormatMinMaxParagraphWidth(textSource: DNTextSource; firstCharIndex: Int32; paragraphProperties: DNTextParagraphProperties): DNMinMaxParagraphWidth; overload;
    function FormatMinMaxParagraphWidth(textSource: DNTextSource; firstCharIndex: Int32; paragraphProperties: DNTextParagraphProperties; textRunCache: DNTextRunCache): DNMinMaxParagraphWidth; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextFormatter = class(TDNGenericImport<DNTextFormatterClass, DNTextFormatter>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2647DD80-E7E2-54EB-8BA0-E10117AC1C9A}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextLine')]
  DNTextLine = interface(DDN.mscorlib.DNObject)
  ['{DE632023-B4A4-338D-A52C-493E7F1BFD61}']
  { getters & setters } 

    function get_PixelsPerDip: Double;
    procedure set_PixelsPerDip(value: Double);
    function get_HasOverflowed: Boolean;
    function get_HasCollapsed: Boolean;
    function get_IsTruncated: Boolean;
    function get_Length: Int32;
    function get_TrailingWhitespaceLength: Int32;
    function get_DependentLength: Int32;
    function get_NewlineLength: Int32;
    function get_Start: Double;
    function get_Width: Double;
    function get_WidthIncludingTrailingWhitespace: Double;
    function get_Height: Double;
    function get_TextHeight: Double;
    function get_Extent: Double;
    function get_Baseline: Double;
    function get_TextBaseline: Double;
    function get_MarkerBaseline: Double;
    function get_MarkerHeight: Double;
    function get_OverhangLeading: Double;
    function get_OverhangTrailing: Double;
    function get_OverhangAfter: Double;

  { methods } 

    procedure Dispose;
    procedure Draw(drawingContext: DNDrawingContext; origin: DDN.System.Windows.Common.DNPoint; inversion: DNInvertAxes);
    function Collapse(collapsingPropertiesList: TArray<DNTextCollapsingProperties>): DNTextLine;
    function GetTextCollapsedRanges: DDN.mscorlib.DNIList<DNTextCollapsedRange>;
    function GetCharacterHitFromDistance(distance: Double): DNCharacterHit;
    function GetDistanceFromCharacterHit(characterHit: DNCharacterHit): Double;
    function GetNextCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function GetPreviousCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function GetBackspaceCaretCharacterHit(characterHit: DNCharacterHit): DNCharacterHit;
    function GetTextBounds(firstTextSourceCharacterIndex: Int32; textLength: Int32): DDN.mscorlib.DNIList<DNTextBounds>;
    function GetIndexedGlyphRuns: DDN.mscorlib.DNIEnumerable<DNIndexedGlyphRun>;
    function GetTextLineBreak: DNTextLineBreak;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PixelsPerDip: Double read get_PixelsPerDip write set_PixelsPerDip;
    property HasOverflowed: Boolean read get_HasOverflowed;
    property HasCollapsed: Boolean read get_HasCollapsed;
    property IsTruncated: Boolean read get_IsTruncated;
    property Length: Int32 read get_Length;
    property TrailingWhitespaceLength: Int32 read get_TrailingWhitespaceLength;
    property DependentLength: Int32 read get_DependentLength;
    property NewlineLength: Int32 read get_NewlineLength;
    property Start: Double read get_Start;
    property Width: Double read get_Width;
    property WidthIncludingTrailingWhitespace: Double read get_WidthIncludingTrailingWhitespace;
    property Height: Double read get_Height;
    property TextHeight: Double read get_TextHeight;
    property Extent: Double read get_Extent;
    property Baseline: Double read get_Baseline;
    property TextBaseline: Double read get_TextBaseline;
    property MarkerBaseline: Double read get_MarkerBaseline;
    property MarkerHeight: Double read get_MarkerHeight;
    property OverhangLeading: Double read get_OverhangLeading;
    property OverhangTrailing: Double read get_OverhangTrailing;
    property OverhangAfter: Double read get_OverhangAfter;
  end;

  TDNTextLine = class(TDNGenericImport<DNTextLineClass, DNTextLine>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextLineBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{036B61B5-41AD-5212-9962-DA4ACD0ACA6D}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextLineBreak')]
  DNTextLineBreak = interface(DDN.mscorlib.DNObject)
  ['{6E111B6C-355A-31CB-BEEA-C43CE49A2EA9}']
  { methods } 

    procedure Dispose;
    function Clone: DNTextLineBreak;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextLineBreak = class(TDNGenericImport<DNTextLineBreakClass, DNTextLineBreak>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextMarkerPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0B707FD-422F-53A8-AD24-F242B020A327}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextMarkerProperties')]
  DNTextMarkerProperties = interface(DDN.mscorlib.DNObject)
  ['{C692E8ED-8C68-3517-AC97-9F6A975A0A76}']
  { getters & setters } 

    function get_Offset: Double;
    function get_TextSource: DNTextSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Offset: Double read get_Offset;
    property TextSource: DNTextSource read get_TextSource;
  end;

  TDNTextMarkerProperties = class(TDNGenericImport<DNTextMarkerPropertiesClass, DNTextMarkerProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextSimpleMarkerPropertiesClass = interface(DNTextMarkerPropertiesClass)
  ['{977D9C00-C313-53FB-801F-A65B2277993C}']
  { constructors } 

    {class} function init(style: DNTextMarkerStyle; offset: Double; autoNumberingIndex: Int32; textParagraphProperties: DNTextParagraphProperties): DNTextSimpleMarkerProperties;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextSimpleMarkerProperties')]
  DNTextSimpleMarkerProperties = interface(DNTextMarkerProperties)
  ['{AE55BA52-E334-30B4-818B-536D57BDF4D5}']
  { getters & setters } 

    function get_Offset: Double;
    function get_TextSource: DNTextSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Offset: Double read get_Offset;
    property TextSource: DNTextSource read get_TextSource;
  end;

  TDNTextSimpleMarkerProperties = class(TDNGenericImport<DNTextSimpleMarkerPropertiesClass, DNTextSimpleMarkerProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextParagraphPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F9E06D88-5571-5AA2-9E94-CB70360AB3E1}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextParagraphProperties')]
  DNTextParagraphProperties = interface(DDN.mscorlib.DNObject)
  ['{6D23179A-D13F-31C4-BE88-73F3D221BD80}']
  { getters & setters } 

    function get_FlowDirection: DNFlowDirection;
    function get_TextAlignment: DNTextAlignment;
    function get_LineHeight: Double;
    function get_FirstLineInParagraph: Boolean;
    function get_AlwaysCollapsible: Boolean;
    function get_DefaultTextRunProperties: DNTextRunProperties;
    function get_TextDecorations: DNTextDecorationCollection;
    function get_TextWrapping: DNTextWrapping;
    function get_TextMarkerProperties: DNTextMarkerProperties;
    function get_Indent: Double;
    function get_ParagraphIndent: Double;
    function get_DefaultIncrementalTab: Double;
    function get_Tabs: DDN.mscorlib.DNIList<DNTextTabProperties>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FlowDirection: DNFlowDirection read get_FlowDirection;
    property TextAlignment: DNTextAlignment read get_TextAlignment;
    property LineHeight: Double read get_LineHeight;
    property FirstLineInParagraph: Boolean read get_FirstLineInParagraph;
    property AlwaysCollapsible: Boolean read get_AlwaysCollapsible;
    property DefaultTextRunProperties: DNTextRunProperties read get_DefaultTextRunProperties;
    property TextDecorations: DNTextDecorationCollection read get_TextDecorations;
    property TextWrapping: DNTextWrapping read get_TextWrapping;
    property TextMarkerProperties: DNTextMarkerProperties read get_TextMarkerProperties;
    property Indent: Double read get_Indent;
    property ParagraphIndent: Double read get_ParagraphIndent;
    property DefaultIncrementalTab: Double read get_DefaultIncrementalTab;
    property Tabs: DDN.mscorlib.DNIList<DNTextTabProperties> read get_Tabs;
  end;

  TDNTextParagraphProperties = class(TDNGenericImport<DNTextParagraphPropertiesClass, DNTextParagraphProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextRunClass = interface(DDN.mscorlib.DNObjectClass)
  ['{813F3D70-9D9C-52B5-BA2B-4F3D1133FF83}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextRun')]
  DNTextRun = interface(DDN.mscorlib.DNObject)
  ['{DA7F8984-316E-3B97-AA4F-B844D450A052}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextRun = class(TDNGenericImport<DNTextRunClass, DNTextRun>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextCharactersClass = interface(DNTextRunClass)
  ['{DF2D9D0F-A6BC-50D7-BA82-FCAA3B5E619E}']
  { constructors } 

    {class} function init(characterArray: TArray<Char>; offsetToFirstChar: Int32; length: Int32; textRunProperties: DNTextRunProperties): DNTextCharacters; overload;
    {class} function init(characterString: string; textRunProperties: DNTextRunProperties): DNTextCharacters; overload;
    {class} function init(characterString: string; offsetToFirstChar: Int32; length: Int32; textRunProperties: DNTextRunProperties): DNTextCharacters; overload;
    {class} function init(unsafeCharacterString: PChar; length: Int32; textRunProperties: DNTextRunProperties): DNTextCharacters; overload;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextCharacters')]
  DNTextCharacters = interface(DNTextRun)
  ['{FC4442C3-7FFC-383E-ACC6-A26207C53643}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextCharacters = class(TDNGenericImport<DNTextCharactersClass, DNTextCharacters>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextEmbeddedObjectClass = interface(DNTextRunClass)
  ['{00C12266-4030-5919-B4CD-61BA6EEF5ECC}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextEmbeddedObject')]
  DNTextEmbeddedObject = interface(DNTextRun)
  ['{513DF41F-51E9-3729-8CD6-6A21F44AF9BA}']
  { getters & setters } 

    function get_BreakBefore: DNLineBreakCondition;
    function get_BreakAfter: DNLineBreakCondition;
    function get_HasFixedSize: Boolean;
    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Format(remainingParagraphWidth: Double): DNTextEmbeddedObjectMetrics;
    function ComputeBoundingBox(rightToLeft: Boolean; sideways: Boolean): DDN.System.Windows.Common.DNRect;
    procedure Draw(drawingContext: DNDrawingContext; origin: DDN.System.Windows.Common.DNPoint; rightToLeft: Boolean; sideways: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BreakBefore: DNLineBreakCondition read get_BreakBefore;
    property BreakAfter: DNLineBreakCondition read get_BreakAfter;
    property HasFixedSize: Boolean read get_HasFixedSize;
    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextEmbeddedObject = class(TDNGenericImport<DNTextEmbeddedObjectClass, DNTextEmbeddedObject>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextEndOfLineClass = interface(DNTextRunClass)
  ['{25D73814-1C26-5050-88D1-B99C331C696E}']
  { constructors } 

    {class} function init(length: Int32): DNTextEndOfLine; overload;
    {class} function init(length: Int32; textRunProperties: DNTextRunProperties): DNTextEndOfLine; overload;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextEndOfLine')]
  DNTextEndOfLine = interface(DNTextRun)
  ['{EDB63171-60A9-3E59-8ADB-485FE52882C4}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextEndOfLine = class(TDNGenericImport<DNTextEndOfLineClass, DNTextEndOfLine>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextEndOfParagraphClass = interface(DNTextEndOfLineClass)
  ['{C0EB3735-AB5F-5CFF-8D70-FFE879ED2708}']
  { constructors } 

    {class} function init(length: Int32): DNTextEndOfParagraph; overload;
    {class} function init(length: Int32; textRunProperties: DNTextRunProperties): DNTextEndOfParagraph; overload;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextEndOfParagraph')]
  DNTextEndOfParagraph = interface(DNTextEndOfLine)
  ['{23C81C90-31AB-329C-B861-BF5BBA26DF5A}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextEndOfParagraph = class(TDNGenericImport<DNTextEndOfParagraphClass, DNTextEndOfParagraph>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextEndOfSegmentClass = interface(DNTextRunClass)
  ['{C3911366-F264-5780-A97C-8FFAEC36AC34}']
  { constructors } 

    {class} function init(length: Int32): DNTextEndOfSegment;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextEndOfSegment')]
  DNTextEndOfSegment = interface(DNTextRun)
  ['{26B2CCC5-C07F-33FC-AD75-701995F58E88}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextEndOfSegment = class(TDNGenericImport<DNTextEndOfSegmentClass, DNTextEndOfSegment>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextHiddenClass = interface(DNTextRunClass)
  ['{4FBE0792-770C-55A0-B3A1-60B4058B6527}']
  { constructors } 

    {class} function init(length: Int32): DNTextHidden;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextHidden')]
  DNTextHidden = interface(DNTextRun)
  ['{12FD2585-67A3-363B-9430-176ABDD64943}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextHidden = class(TDNGenericImport<DNTextHiddenClass, DNTextHidden>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextModifierClass = interface(DNTextRunClass)
  ['{85E227C3-FB37-5B0E-AA80-9E9EBADEEDBA}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextModifier')]
  DNTextModifier = interface(DNTextRun)
  ['{24E72060-FB4E-3CC5-8D18-E3928D64B155}']
  { getters & setters } 

    function get_CharacterBufferReference: DNCharacterBufferReference;
    function get_HasDirectionalEmbedding: Boolean;
    function get_FlowDirection: DNFlowDirection;
    function get_Length: Int32;
    function get_Properties: DNTextRunProperties;

  { methods } 

    function ModifyProperties(properties: DNTextRunProperties): DNTextRunProperties;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterBufferReference: DNCharacterBufferReference read get_CharacterBufferReference;
    property HasDirectionalEmbedding: Boolean read get_HasDirectionalEmbedding;
    property FlowDirection: DNFlowDirection read get_FlowDirection;
    property Length: Int32 read get_Length;
    property Properties: DNTextRunProperties read get_Properties;
  end;

  TDNTextModifier = class(TDNGenericImport<DNTextModifierClass, DNTextModifier>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextRunBoundsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1276D022-6F86-5140-84E1-23985D150A63}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextRunBounds')]
  DNTextRunBounds = interface(DDN.mscorlib.DNObject)
  ['{A579960B-62E4-3D7D-8516-E8AA0B8E83A3}']
  { getters & setters } 

    function get_TextSourceCharacterIndex: Int32;
    function get_Length: Int32;
    function get_Rectangle: DDN.System.Windows.Common.DNRect;
    function get_TextRun: DNTextRun;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextSourceCharacterIndex: Int32 read get_TextSourceCharacterIndex;
    property Length: Int32 read get_Length;
    property Rectangle: DDN.System.Windows.Common.DNRect read get_Rectangle;
    property TextRun: DNTextRun read get_TextRun;
  end;

  TDNTextRunBounds = class(TDNGenericImport<DNTextRunBoundsClass, DNTextRunBounds>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextRunCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43E4606C-A9DF-5A57-9FD0-A709D1449AED}']
  { constructors } 

    {class} function init: DNTextRunCache;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextRunCache')]
  DNTextRunCache = interface(DDN.mscorlib.DNObject)
  ['{CBA8B2D0-4FE1-37B6-97D1-1B870F2B87A4}']
  { methods } 

    procedure Change(textSourceCharacterIndex: Int32; addition: Int32; removal: Int32);
    procedure Invalidate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextRunCache = class(TDNGenericImport<DNTextRunCacheClass, DNTextRunCache>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextRunPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E027294-4B55-55C1-A31C-1CD9646160E6}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextRunProperties')]
  DNTextRunProperties = interface(DDN.mscorlib.DNObject)
  ['{3634F421-7FBE-3733-BBC1-AFE81F3E23BB}']
  { getters & setters } 

    function get_Typeface: DNTypeface;
    function get_FontRenderingEmSize: Double;
    function get_FontHintingEmSize: Double;
    function get_TextDecorations: DNTextDecorationCollection;
    function get_ForegroundBrush: DNBrush;
    function get_BackgroundBrush: DNBrush;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_TextEffects: DNTextEffectCollection;
    function get_BaselineAlignment: DNBaselineAlignment;
    function get_TypographyProperties: DNTextRunTypographyProperties;
    function get_NumberSubstitution: DNNumberSubstitution;
    function get_PixelsPerDip: Double;
    procedure set_PixelsPerDip(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Typeface: DNTypeface read get_Typeface;
    property FontRenderingEmSize: Double read get_FontRenderingEmSize;
    property FontHintingEmSize: Double read get_FontHintingEmSize;
    property TextDecorations: DNTextDecorationCollection read get_TextDecorations;
    property ForegroundBrush: DNBrush read get_ForegroundBrush;
    property BackgroundBrush: DNBrush read get_BackgroundBrush;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    property TextEffects: DNTextEffectCollection read get_TextEffects;
    property BaselineAlignment: DNBaselineAlignment read get_BaselineAlignment;
    property TypographyProperties: DNTextRunTypographyProperties read get_TypographyProperties;
    property NumberSubstitution: DNNumberSubstitution read get_NumberSubstitution;
    property PixelsPerDip: Double read get_PixelsPerDip write set_PixelsPerDip;
  end;

  TDNTextRunProperties = class(TDNGenericImport<DNTextRunPropertiesClass, DNTextRunProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextRunTypographyPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A554547-93FC-5848-834E-674DF1D0C45B}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextRunTypographyProperties')]
  DNTextRunTypographyProperties = interface(DDN.mscorlib.DNObject)
  ['{A563671E-ABDD-3D73-8B1B-E3456228961E}']
  { getters & setters } 

    function get_StandardLigatures: Boolean;
    function get_ContextualLigatures: Boolean;
    function get_DiscretionaryLigatures: Boolean;
    function get_HistoricalLigatures: Boolean;
    function get_ContextualAlternates: Boolean;
    function get_HistoricalForms: Boolean;
    function get_Kerning: Boolean;
    function get_CapitalSpacing: Boolean;
    function get_CaseSensitiveForms: Boolean;
    function get_StylisticSet1: Boolean;
    function get_StylisticSet2: Boolean;
    function get_StylisticSet3: Boolean;
    function get_StylisticSet4: Boolean;
    function get_StylisticSet5: Boolean;
    function get_StylisticSet6: Boolean;
    function get_StylisticSet7: Boolean;
    function get_StylisticSet8: Boolean;
    function get_StylisticSet9: Boolean;
    function get_StylisticSet10: Boolean;
    function get_StylisticSet11: Boolean;
    function get_StylisticSet12: Boolean;
    function get_StylisticSet13: Boolean;
    function get_StylisticSet14: Boolean;
    function get_StylisticSet15: Boolean;
    function get_StylisticSet16: Boolean;
    function get_StylisticSet17: Boolean;
    function get_StylisticSet18: Boolean;
    function get_StylisticSet19: Boolean;
    function get_StylisticSet20: Boolean;
    function get_SlashedZero: Boolean;
    function get_MathematicalGreek: Boolean;
    function get_EastAsianExpertForms: Boolean;
    function get_Variants: DNFontVariants;
    function get_Capitals: DNFontCapitals;
    function get_Fraction: DNFontFraction;
    function get_NumeralStyle: DNFontNumeralStyle;
    function get_NumeralAlignment: DNFontNumeralAlignment;
    function get_EastAsianWidths: DNFontEastAsianWidths;
    function get_EastAsianLanguage: DNFontEastAsianLanguage;
    function get_StandardSwashes: Int32;
    function get_ContextualSwashes: Int32;
    function get_StylisticAlternates: Int32;
    function get_AnnotationAlternates: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StandardLigatures: Boolean read get_StandardLigatures;
    property ContextualLigatures: Boolean read get_ContextualLigatures;
    property DiscretionaryLigatures: Boolean read get_DiscretionaryLigatures;
    property HistoricalLigatures: Boolean read get_HistoricalLigatures;
    property ContextualAlternates: Boolean read get_ContextualAlternates;
    property HistoricalForms: Boolean read get_HistoricalForms;
    property Kerning: Boolean read get_Kerning;
    property CapitalSpacing: Boolean read get_CapitalSpacing;
    property CaseSensitiveForms: Boolean read get_CaseSensitiveForms;
    property StylisticSet1: Boolean read get_StylisticSet1;
    property StylisticSet2: Boolean read get_StylisticSet2;
    property StylisticSet3: Boolean read get_StylisticSet3;
    property StylisticSet4: Boolean read get_StylisticSet4;
    property StylisticSet5: Boolean read get_StylisticSet5;
    property StylisticSet6: Boolean read get_StylisticSet6;
    property StylisticSet7: Boolean read get_StylisticSet7;
    property StylisticSet8: Boolean read get_StylisticSet8;
    property StylisticSet9: Boolean read get_StylisticSet9;
    property StylisticSet10: Boolean read get_StylisticSet10;
    property StylisticSet11: Boolean read get_StylisticSet11;
    property StylisticSet12: Boolean read get_StylisticSet12;
    property StylisticSet13: Boolean read get_StylisticSet13;
    property StylisticSet14: Boolean read get_StylisticSet14;
    property StylisticSet15: Boolean read get_StylisticSet15;
    property StylisticSet16: Boolean read get_StylisticSet16;
    property StylisticSet17: Boolean read get_StylisticSet17;
    property StylisticSet18: Boolean read get_StylisticSet18;
    property StylisticSet19: Boolean read get_StylisticSet19;
    property StylisticSet20: Boolean read get_StylisticSet20;
    property SlashedZero: Boolean read get_SlashedZero;
    property MathematicalGreek: Boolean read get_MathematicalGreek;
    property EastAsianExpertForms: Boolean read get_EastAsianExpertForms;
    property Variants: DNFontVariants read get_Variants;
    property Capitals: DNFontCapitals read get_Capitals;
    property Fraction: DNFontFraction read get_Fraction;
    property NumeralStyle: DNFontNumeralStyle read get_NumeralStyle;
    property NumeralAlignment: DNFontNumeralAlignment read get_NumeralAlignment;
    property EastAsianWidths: DNFontEastAsianWidths read get_EastAsianWidths;
    property EastAsianLanguage: DNFontEastAsianLanguage read get_EastAsianLanguage;
    property StandardSwashes: Int32 read get_StandardSwashes;
    property ContextualSwashes: Int32 read get_ContextualSwashes;
    property StylisticAlternates: Int32 read get_StylisticAlternates;
    property AnnotationAlternates: Int32 read get_AnnotationAlternates;
  end;

  TDNTextRunTypographyProperties = class(TDNGenericImport<DNTextRunTypographyPropertiesClass, DNTextRunTypographyProperties>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3CD8AFFC-2DB9-5FCE-B86A-CB25513E9F3F}']
  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextSource')]
  DNTextSource = interface(DDN.mscorlib.DNObject)
  ['{FE74F283-4F36-39CE-B6D1-B687C964A9BF}']
  { getters & setters } 

    function get_PixelsPerDip: Double;
    procedure set_PixelsPerDip(value: Double);

  { methods } 

    function GetTextRun(textSourceCharacterIndex: Int32): DNTextRun;
    function GetTextEffectCharacterIndexFromTextSourceCharacterIndex(textSourceCharacterIndex: Int32): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PixelsPerDip: Double read get_PixelsPerDip write set_PixelsPerDip;
  end;

  TDNTextSource = class(TDNGenericImport<DNTextSourceClass, DNTextSource>) end;

  //-------------namespace: System.Windows.Media.TextFormatting----------------
  DNTextTabPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F60A0BFF-4A9C-5F9C-B8CA-168370B64267}']
  { constructors } 

    {class} function init(alignment: DNTextTabAlignment; location: Double; tabLeader: Int32; aligningChar: Int32): DNTextTabProperties;

  end;

  [DNTypeName('System.Windows.Media.TextFormatting.TextTabProperties')]
  DNTextTabProperties = interface(DDN.mscorlib.DNObject)
  ['{5FD42896-BCB6-3869-9CA9-582F0F1F7F00}']
  { getters & setters } 

    function get_Alignment: DNTextTabAlignment;
    function get_Location: Double;
    function get_TabLeader: Int32;
    function get_AligningCharacter: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alignment: DNTextTabAlignment read get_Alignment;
    property Location: Double read get_Location;
    property TabLeader: Int32 read get_TabLeader;
    property AligningCharacter: Int32 read get_AligningCharacter;
  end;

  TDNTextTabProperties = class(TDNGenericImport<DNTextTabPropertiesClass, DNTextTabProperties>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTypefaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86BFFD4C-0DED-51DA-987E-95E6E2D74CE5}']
  { constructors } 

    {class} function init(typefaceName: string): DNTypeface; overload;
    {class} function init(fontFamily: DNFontFamily; style: DNFontStyle; weight: DNFontWeight; stretch: DNFontStretch): DNTypeface; overload;
    {class} function init(fontFamily: DNFontFamily; style: DNFontStyle; weight: DNFontWeight; stretch: DNFontStretch; fallbackFontFamily: DNFontFamily): DNTypeface; overload;

  end;

  [DNTypeName('System.Windows.Media.Typeface')]
  DNTypeface = interface(DDN.mscorlib.DNObject)
  ['{6A5398DC-ED15-3788-BE7B-F5B88AC2EEC6}']
  { getters & setters } 

    function get_FontFamily: DNFontFamily;
    function get_Weight: DNFontWeight;
    function get_Style: DNFontStyle;
    function get_Stretch: DNFontStretch;
    function get_IsObliqueSimulated: Boolean;
    function get_IsBoldSimulated: Boolean;
    function get_XHeight: Double;
    function get_CapsHeight: Double;
    function get_UnderlinePosition: Double;
    function get_UnderlineThickness: Double;
    function get_StrikethroughPosition: Double;
    function get_StrikethroughThickness: Double;
    function get_FaceNames: DNLanguageSpecificStringDictionary;

  { methods } 

    function TryGetGlyphTypeface(out glyphTypeface: DNGlyphTypeface): Boolean;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFamily: DNFontFamily read get_FontFamily;
    property Weight: DNFontWeight read get_Weight;
    property Style: DNFontStyle read get_Style;
    property Stretch: DNFontStretch read get_Stretch;
    property IsObliqueSimulated: Boolean read get_IsObliqueSimulated;
    property IsBoldSimulated: Boolean read get_IsBoldSimulated;
    property XHeight: Double read get_XHeight;
    property CapsHeight: Double read get_CapsHeight;
    property UnderlinePosition: Double read get_UnderlinePosition;
    property UnderlineThickness: Double read get_UnderlineThickness;
    property StrikethroughPosition: Double read get_StrikethroughPosition;
    property StrikethroughThickness: Double read get_StrikethroughThickness;
    property FaceNames: DNLanguageSpecificStringDictionary read get_FaceNames;
  end;

  TDNTypeface = class(TDNGenericImport<DNTypefaceClass, DNTypeface>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85B07BFF-B8B8-55C4-A557-1F6DA9721635}']
  { constructors } 

    {class} function init(parent: DNVisual): DNVisualCollection;

  end;

  [DNTypeName('System.Windows.Media.VisualCollection')]
  DNVisualCollection = interface(DDN.mscorlib.DNObject)
  ['{73E03E0D-92FF-31FB-8B15-488D22E31B96}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Item(index: Int32): DNVisual;
    procedure set_Item(index: Int32; value: DNVisual);

  { methods } 

    function Add(visual: DNVisual): Int32;
    function IndexOf(visual: DNVisual): Int32;
    procedure Clear;
    procedure Insert(index: Int32; visual: DNVisual);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNVisual>; index: Int32); overload;
    procedure Remove(visual: DNVisual);
    function &Contains(visual: DNVisual): Boolean;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DNMedia_VisualCollection_Enumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Item[index: Int32]: DNVisual read get_Item write set_Item; default;
  end;

  TDNVisualCollection = class(TDNGenericImport<DNVisualCollectionClass, DNVisualCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualTreeHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59D03906-0009-5839-AF7A-1AEB6474A006}']
  { static methods } 

    {class} function GetChildrenCount(reference: DDN.System.Windows.Common.DNDependencyObject): Int32;
    {class} function GetChild(reference: DDN.System.Windows.Common.DNDependencyObject; childIndex: Int32): DDN.System.Windows.Common.DNDependencyObject;
    {class} function GetDpi(visual: DNVisual): DNDpiScale;
    {class} procedure SetRootDpi(visual: DNVisual; dpiInfo: DNDpiScale);
    {class} function GetParent(reference: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    {class} function GetClip(reference: DNVisual): DNGeometry;
    {class} function GetOpacity(reference: DNVisual): Double;
    {class} function GetOpacityMask(reference: DNVisual): DNBrush;
    {class} function GetOffset(reference: DNVisual): DDN.System.Windows.Common.DNVector;
    {class} function GetTransform(reference: DNVisual): DNTransform;
    {class} function GetXSnappingGuidelines(reference: DNVisual): DNDoubleCollection;
    {class} function GetYSnappingGuidelines(reference: DNVisual): DNDoubleCollection;
    {class} function GetDrawing(reference: DNVisual): DNDrawingGroup;
    {class} function GetContentBounds(reference: DNVisual): DDN.System.Windows.Common.DNRect; overload;
    {class} function GetContentBounds(reference: DNVisual3D): DNRect3D; overload;
    {class} function GetDescendantBounds(reference: DNVisual): DDN.System.Windows.Common.DNRect; overload;
    {class} function GetDescendantBounds(reference: DNVisual3D): DNRect3D; overload;
    {class} function GetBitmapEffect(reference: DNVisual): DNBitmapEffect;
    {class} function GetBitmapEffectInput(reference: DNVisual): DNBitmapEffectInput;
    {class} function GetEffect(reference: DNVisual): DNEffect;
    {class} function GetCacheMode(reference: DNVisual): DNCacheMode;
    {class} function GetEdgeMode(reference: DNVisual): DNEdgeMode;
    {class} function HitTest(reference: DNVisual; point: DDN.System.Windows.Common.DNPoint): DNHitTestResult; overload;
    {class} procedure HitTest(reference: DNVisual; filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters); overload;
    {class} procedure HitTest(reference: DNVisual3D; filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters3D); overload;

  end;

  [DNTypeName('System.Windows.Media.VisualTreeHelper')]
  DNVisualTreeHelper = interface(DDN.mscorlib.DNObject)
  ['{16840275-FBF5-39C4-86FD-3CFCE2D8297E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVisualTreeHelper = class(TDNGenericImport<DNVisualTreeHelperClass, DNVisualTreeHelper>) end;

  //-------------namespace: System.Windows.Navigation----------------
  DNBaseUriHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{700C40F1-C737-5990-AF0E-EA486A6C7B85}']
  { static fields getter & setter } 

   function __fakeFieldGet_BaseUriProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property BaseUriProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BaseUriProperty;

  { static methods } 

    {class} function GetBaseUri(element: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNUri;

  end;

  [DNTypeName('System.Windows.Navigation.BaseUriHelper')]
  DNBaseUriHelper = interface(DDN.mscorlib.DNObject)
  ['{16D8E196-664F-3F85-BD63-5EE4DBABC62D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseUriHelper = class(TDNGenericImport<DNBaseUriHelperClass, DNBaseUriHelper>) end;

  //-------------namespace: System.Windows----------------
  DNUIPropertyMetadataClass = interface(DDN.System.Windows.Common.DNPropertyMetadataClass)
  ['{1D217E7D-883D-5331-BBFD-BC5CFE9B7465}']
  { constructors } 

    {class} function init: DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject): DNUIPropertyMetadata; overload;
    {class} function init(propertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback; coerceValueCallback: DDN.System.Windows.Common.DNCoerceValueCallback): DNUIPropertyMetadata; overload;
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback; coerceValueCallback: DDN.System.Windows.Common.DNCoerceValueCallback; isAnimationProhibited: Boolean): DNUIPropertyMetadata; overload;

  end;

  [DNTypeName('System.Windows.UIPropertyMetadata')]
  DNUIPropertyMetadata = interface(DDN.System.Windows.Common.DNPropertyMetadata)
  ['{E3B1B5B0-D312-31D0-8E9E-3F5F383A7A2E}']
  { getters & setters } 

    function get_IsAnimationProhibited: Boolean;
    procedure set_IsAnimationProhibited(value: Boolean);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback;
    procedure set_PropertyChangedCallback(value: DDN.System.Windows.Common.DNPropertyChangedCallback);
    function get_CoerceValueCallback: DDN.System.Windows.Common.DNCoerceValueCallback;
    procedure set_CoerceValueCallback(value: DDN.System.Windows.Common.DNCoerceValueCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAnimationProhibited: Boolean read get_IsAnimationProhibited write set_IsAnimationProhibited;
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    property PropertyChangedCallback: DDN.System.Windows.Common.DNPropertyChangedCallback read get_PropertyChangedCallback write set_PropertyChangedCallback;
    property CoerceValueCallback: DDN.System.Windows.Common.DNCoerceValueCallback read get_CoerceValueCallback write set_CoerceValueCallback;
  end;

  TDNUIPropertyMetadata = class(TDNGenericImport<DNUIPropertyMetadataClass, DNUIPropertyMetadata>) end;

  //-------------namespace: System.Windows----------------
  DNRoutedEventClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BDFC7D5F-A089-5A30-92B7-09F1C5D165DB}']
  end;

  [DNTypeName('System.Windows.RoutedEvent')]
  DNRoutedEvent = interface(DDN.mscorlib.DNObject)
  ['{77E2C525-390F-3E16-8518-34BDBE378F3F}']
  { getters & setters } 

    function get_Name: string;
    function get_RoutingStrategy: DNRoutingStrategy;
    function get_HandlerType: DDN.mscorlib.DNType;
    function get_OwnerType: DDN.mscorlib.DNType;

  { methods } 

    function AddOwner(ownerType: DDN.mscorlib.DNType): DNRoutedEvent;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property RoutingStrategy: DNRoutingStrategy read get_RoutingStrategy;
    property HandlerType: DDN.mscorlib.DNType read get_HandlerType;
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
  end;

  TDNRoutedEvent = class(TDNGenericImport<DNRoutedEventClass, DNRoutedEvent>) end;

  //-------------namespace: System.Windows----------------
  DNSizeChangedInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7533764A-EDBB-568C-BC0F-C27A37CB2FB4}']
  { constructors } 

    {class} function init(element: DNUIElement; previousSize: DDN.System.Windows.Common.DNSize; widthChanged: Boolean; heightChanged: Boolean): DNSizeChangedInfo;

  end;

  [DNTypeName('System.Windows.SizeChangedInfo')]
  DNSizeChangedInfo = interface(DDN.mscorlib.DNObject)
  ['{4AF47089-32A8-37C0-A674-0CB7B2EB6129}']
  { getters & setters } 

    function get_PreviousSize: DDN.System.Windows.Common.DNSize;
    function get_NewSize: DDN.System.Windows.Common.DNSize;
    function get_WidthChanged: Boolean;
    function get_HeightChanged: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreviousSize: DDN.System.Windows.Common.DNSize read get_PreviousSize;
    property NewSize: DDN.System.Windows.Common.DNSize read get_NewSize;
    property WidthChanged: Boolean read get_WidthChanged;
    property HeightChanged: Boolean read get_HeightChanged;
  end;

  TDNSizeChangedInfo = class(TDNGenericImport<DNSizeChangedInfoClass, DNSizeChangedInfo>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D24D693-D236-595C-B929-04170025E436}']
  { static getter & setter } 

    {class} function get_Underline: DNTextDecorationCollection;
    {class} function get_Strikethrough: DNTextDecorationCollection;
    {class} function get_OverLine: DNTextDecorationCollection;
    {class} function get_Baseline: DNTextDecorationCollection;

  { static propertys } 

    {class} property Underline: DNTextDecorationCollection read get_Underline;
    {class} property Strikethrough: DNTextDecorationCollection read get_Strikethrough;
    {class} property OverLine: DNTextDecorationCollection read get_OverLine;
    {class} property Baseline: DNTextDecorationCollection read get_Baseline;
  end;

  [DNTypeName('System.Windows.TextDecorations')]
  DNTextDecorations = interface(DDN.mscorlib.DNObject)
  ['{2EB8CE66-098A-3010-A1CD-195FD7C4044B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextDecorations = class(TDNGenericImport<DNTextDecorationsClass, DNTextDecorations>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNAutomationPeerClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{879DFDCA-FE0A-5C3A-A8C3-1755F6604B25}']
  { static methods } 

    {class} function ListenerExists(eventId: DNAutomationEvents): Boolean;

  end;

  [DNTypeName('System.Windows.Automation.Peers.AutomationPeer')]
  DNAutomationPeer = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{287B816B-C94E-3ED7-80DB-C4879C2A312D}']
  { getters & setters } 

    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure InvalidatePeer;
    function GetBoundingRectangle: DDN.System.Windows.Common.DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DDN.System.Windows.Common.DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DDN.System.Windows.Common.DNPoint): DNAutomationPeer;
    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure RaiseAsyncContentLoadedEvent(args: DDN.System.Windows.Common.DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DDN.System.Windows.Common.DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAutomationPeer = class(TDNGenericImport<DNAutomationPeerClass, DNAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNContentElementAutomationPeerClass = interface(DNAutomationPeerClass)
  ['{24E680DC-FAE8-597B-8A78-8B4CE30DFDBA}']
  { constructors } 

    {class} function init(owner: DNContentElement): DNContentElementAutomationPeer;

  { static methods } 

    {class} function CreatePeerForElement(element: DNContentElement): DNAutomationPeer;
    {class} function FromElement(element: DNContentElement): DNAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.ContentElementAutomationPeer')]
  DNContentElementAutomationPeer = interface(DNAutomationPeer)
  ['{1E1B0E11-E027-3F4D-82BD-7640CCBA1EF8}']
  { getters & setters } 

    function get_Owner: DNContentElement;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DDN.System.Windows.Common.DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DDN.System.Windows.Common.DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DDN.System.Windows.Common.DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DDN.System.Windows.Common.DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DDN.System.Windows.Common.DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNContentElement read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNContentElementAutomationPeer = class(TDNGenericImport<DNContentElementAutomationPeerClass, DNContentElementAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNUIElement3DAutomationPeerClass = interface(DNAutomationPeerClass)
  ['{6AF82D73-6635-53C3-8C52-49004547722F}']
  { constructors } 

    {class} function init(owner: DNUIElement3D): DNUIElement3DAutomationPeer;

  { static methods } 

    {class} function CreatePeerForElement(element: DNUIElement3D): DNAutomationPeer;
    {class} function FromElement(element: DNUIElement3D): DNAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.UIElement3DAutomationPeer')]
  DNUIElement3DAutomationPeer = interface(DNAutomationPeer)
  ['{F9022EDD-761A-34CB-9398-D313F1290111}']
  { getters & setters } 

    function get_Owner: DNUIElement3D;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DDN.System.Windows.Common.DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DDN.System.Windows.Common.DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DDN.System.Windows.Common.DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DDN.System.Windows.Common.DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DDN.System.Windows.Common.DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNUIElement3D read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNUIElement3DAutomationPeer = class(TDNGenericImport<DNUIElement3DAutomationPeerClass, DNUIElement3DAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNUIElementAutomationPeerClass = interface(DNAutomationPeerClass)
  ['{89489423-7B6B-5FFC-BCC9-787A4E3B8A1F}']
  { constructors } 

    {class} function init(owner: DNUIElement): DNUIElementAutomationPeer;

  { static methods } 

    {class} function CreatePeerForElement(element: DNUIElement): DNAutomationPeer;
    {class} function FromElement(element: DNUIElement): DNAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.UIElementAutomationPeer')]
  DNUIElementAutomationPeer = interface(DNAutomationPeer)
  ['{64F59179-4DC4-3CBD-AA3A-99FD53AF700E}']
  { getters & setters } 

    function get_Owner: DNUIElement;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DDN.System.Windows.Common.DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DDN.System.Windows.Common.DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DDN.System.Windows.Common.DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DDN.System.Windows.Common.DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DDN.System.Windows.Common.DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNUIElement read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNUIElementAutomationPeer = class(TDNGenericImport<DNUIElementAutomationPeerClass, DNUIElementAutomationPeer>) end;

  //-------------namespace: System.Windows.Automation.Peers----------------
  DNGenericRootAutomationPeerClass = interface(DNUIElementAutomationPeerClass)
  ['{8BE597D9-5443-5725-8D37-F7BB7DFEA102}']
  { constructors } 

    {class} function init(owner: DNUIElement): DNGenericRootAutomationPeer;

  end;

  [DNTypeName('System.Windows.Automation.Peers.GenericRootAutomationPeer')]
  DNGenericRootAutomationPeer = interface(DNUIElementAutomationPeer)
  ['{799C13AF-7A42-34D2-93F1-32FAC98A290B}']
  { getters & setters } 

    function get_Owner: DNUIElement;
    function get_EventsSource: DNAutomationPeer;
    procedure set_EventsSource(value: DNAutomationPeer);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function GetPattern(patternInterface: DNPatternInterface): DDN.mscorlib.DNObject;
    procedure InvalidatePeer;
    function GetBoundingRectangle: DDN.System.Windows.Common.DNRect;
    function IsOffscreen: Boolean;
    function GetOrientation: DNAutomationOrientation;
    function GetItemType: string;
    function GetClassName: string;
    function GetItemStatus: string;
    function IsRequiredForForm: Boolean;
    function IsKeyboardFocusable: Boolean;
    function HasKeyboardFocus: Boolean;
    function IsEnabled: Boolean;
    function IsPassword: Boolean;
    function GetAutomationId: string;
    function GetName: string;
    function GetAutomationControlType: DNAutomationControlType;
    function GetLocalizedControlType: string;
    function IsContentElement: Boolean;
    function IsControlElement: Boolean;
    function GetLabeledBy: DNAutomationPeer;
    function GetHelpText: string;
    function GetAcceleratorKey: string;
    function GetAccessKey: string;
    function GetClickablePoint: DDN.System.Windows.Common.DNPoint;
    procedure SetFocus;
    function GetLiveSetting: DNAutomationLiveSetting;
    function GetSizeOfSet: Int32;
    function GetPositionInSet: Int32;
    function GetParent: DNAutomationPeer;
    procedure ResetChildrenCache;
    function GetPeerFromPoint(point: DDN.System.Windows.Common.DNPoint): DNAutomationPeer;
    procedure RaiseAsyncContentLoadedEvent(args: DDN.System.Windows.Common.DNAsyncContentLoadedEventArgs);
    procedure RaiseAutomationEvent(eventId: DNAutomationEvents);
    procedure RaisePropertyChangedEvent(&property: DDN.System.Windows.Common.DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNUIElement read get_Owner;
    property EventsSource: DNAutomationPeer read get_EventsSource write set_EventsSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGenericRootAutomationPeer = class(TDNGenericImport<DNGenericRootAutomationPeerClass, DNGenericRootAutomationPeer>) end;

  //-------------namespace: System.Windows----------------
  DNContentElementClass = interface(DDN.System.Windows.Common.DNDependencyObjectClass)
  ['{7831DE26-A612-5D8A-A797-D5C74967B8DE}']
  { constructors } 

    {class} function init: DNContentElement;

  { static fields getter & setter } 

   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_GotTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFocusedProperty;
    {class} property IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsEnabledProperty;
    {class} property FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FocusableProperty;
    {class} property AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AllowDropProperty;
    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonDownEvent;
    {class} property MouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonDownEvent;
    {class} property PreviewMouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonUpEvent;
    {class} property MouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonUpEvent;
    {class} property PreviewMouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonDownEvent;
    {class} property MouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonDownEvent;
    {class} property PreviewMouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonUpEvent;
    {class} property MouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonUpEvent;
    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;
    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;
    {class} property PreviewTouchDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchDownEvent;
    {class} property TouchDownEvent: DNRoutedEvent read __fakeFieldGet_TouchDownEvent;
    {class} property PreviewTouchMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchMoveEvent;
    {class} property TouchMoveEvent: DNRoutedEvent read __fakeFieldGet_TouchMoveEvent;
    {class} property PreviewTouchUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchUpEvent;
    {class} property TouchUpEvent: DNRoutedEvent read __fakeFieldGet_TouchUpEvent;
    {class} property GotTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotTouchCaptureEvent;
    {class} property LostTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostTouchCaptureEvent;
    {class} property TouchEnterEvent: DNRoutedEvent read __fakeFieldGet_TouchEnterEvent;
    {class} property TouchLeaveEvent: DNRoutedEvent read __fakeFieldGet_TouchLeaveEvent;
    {class} property IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseDirectlyOverProperty;
    {class} property IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseOverProperty;
    {class} property IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusOverProperty;
    {class} property IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusWithinProperty;
    {class} property IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCapturedProperty;
    {class} property IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCaptureWithinProperty;
    {class} property IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusDirectlyOverProperty;
    {class} property IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCapturedProperty;
    {class} property IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCaptureWithinProperty;
    {class} property IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusedProperty;
    {class} property AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesDirectlyOverProperty;
    {class} property AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesOverProperty;
    {class} property AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedProperty;
    {class} property AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedWithinProperty;

  end;

  [DNTypeName('System.Windows.ContentElement')]
  DNContentElement = interface(DDN.System.Windows.Common.DNDependencyObject)
  ['{C2E56300-E925-3C79-85B8-AE518B94BACB}']
  { getters & setters } 

    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_IsInputMethodEnabled: Boolean;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);

  { methods } 

    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DDN.System.Windows.Common.DNTraversalRequest): Boolean;
    function PredictFocus(direction: DDN.System.Windows.Common.DNFocusNavigationDirection): DDN.System.Windows.Common.DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNContentElement = class(TDNGenericImport<DNContentElementClass, DNContentElement>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputBindingClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{28CA1A6F-3A6A-5CD0-959A-CA3EAA0A0E63}']
  { constructors } 

    {class} function init(command: DDN.System.Windows.Common.DNICommand; gesture: DNInputGesture): DNInputBinding;

  { static fields getter & setter } 

   function __fakeFieldGet_CommandProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CommandParameterProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CommandTargetProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property CommandProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CommandProperty;
    {class} property CommandParameterProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CommandParameterProperty;
    {class} property CommandTargetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CommandTargetProperty;

  end;

  [DNTypeName('System.Windows.Input.InputBinding')]
  DNInputBinding = interface(DDN.System.Windows.Common.DNFreezable)
  ['{375D0C74-A8B7-3326-84E1-21577F5008E2}']
  { getters & setters } 

    function get_Command: DDN.System.Windows.Common.DNICommand;
    procedure set_Command(value: DDN.System.Windows.Common.DNICommand);
    function get_CommandParameter: DDN.mscorlib.DNObject;
    procedure set_CommandParameter(value: DDN.mscorlib.DNObject);
    function get_CommandTarget: DNIInputElement;
    procedure set_CommandTarget(value: DNIInputElement);
    function get_Gesture: DNInputGesture;
    procedure set_Gesture(value: DNInputGesture);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DDN.System.Windows.Common.DNICommand read get_Command write set_Command;
    property CommandParameter: DDN.mscorlib.DNObject read get_CommandParameter write set_CommandParameter;
    property CommandTarget: DNIInputElement read get_CommandTarget write set_CommandTarget;
    property Gesture: DNInputGesture read get_Gesture write set_Gesture;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInputBinding = class(TDNGenericImport<DNInputBindingClass, DNInputBinding>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyBindingClass = interface(DNInputBindingClass)
  ['{75CF71AE-72B7-504E-A142-56494E03A38C}']
  { constructors } 

    {class} function init: DNKeyBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand; gesture: DNKeyGesture): DNKeyBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand; key: DDN.System.Windows.Common.DNKey; modifiers: DDN.System.Windows.Common.DNModifierKeys): DNKeyBinding; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ModifiersProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_KeyProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ModifiersProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ModifiersProperty;
    {class} property KeyProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyProperty;

  end;

  [DNTypeName('System.Windows.Input.KeyBinding')]
  DNKeyBinding = interface(DNInputBinding)
  ['{9599D377-F87C-3D1A-97F5-2DB49ADA2ED5}']
  { getters & setters } 

    function get_Gesture: DNInputGesture;
    procedure set_Gesture(value: DNInputGesture);
    function get_Modifiers: DDN.System.Windows.Common.DNModifierKeys;
    procedure set_Modifiers(value: DDN.System.Windows.Common.DNModifierKeys);
    function get_Key: DDN.System.Windows.Common.DNKey;
    procedure set_Key(value: DDN.System.Windows.Common.DNKey);
    function get_Command: DDN.System.Windows.Common.DNICommand;
    procedure set_Command(value: DDN.System.Windows.Common.DNICommand);
    function get_CommandParameter: DDN.mscorlib.DNObject;
    procedure set_CommandParameter(value: DDN.mscorlib.DNObject);
    function get_CommandTarget: DNIInputElement;
    procedure set_CommandTarget(value: DNIInputElement);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Gesture: DNInputGesture read get_Gesture write set_Gesture;
    property Modifiers: DDN.System.Windows.Common.DNModifierKeys read get_Modifiers write set_Modifiers;
    property Key: DDN.System.Windows.Common.DNKey read get_Key write set_Key;
    property Command: DDN.System.Windows.Common.DNICommand read get_Command write set_Command;
    property CommandParameter: DDN.mscorlib.DNObject read get_CommandParameter write set_CommandParameter;
    property CommandTarget: DNIInputElement read get_CommandTarget write set_CommandTarget;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNKeyBinding = class(TDNGenericImport<DNKeyBindingClass, DNKeyBinding>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseBindingClass = interface(DNInputBindingClass)
  ['{5BE0695F-A000-5B7F-9B92-13CE5ECFACD5}']
  { constructors } 

    {class} function init: DNMouseBinding; overload;
    {class} function init(command: DDN.System.Windows.Common.DNICommand; gesture: DNMouseGesture): DNMouseBinding; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MouseActionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property MouseActionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MouseActionProperty;

  end;

  [DNTypeName('System.Windows.Input.MouseBinding')]
  DNMouseBinding = interface(DNInputBinding)
  ['{049AE462-848C-3F66-AAE5-535B9A7523EB}']
  { getters & setters } 

    function get_Gesture: DNInputGesture;
    procedure set_Gesture(value: DNInputGesture);
    function get_MouseAction: DNMouseAction;
    procedure set_MouseAction(value: DNMouseAction);
    function get_Command: DDN.System.Windows.Common.DNICommand;
    procedure set_Command(value: DDN.System.Windows.Common.DNICommand);
    function get_CommandParameter: DDN.mscorlib.DNObject;
    procedure set_CommandParameter(value: DDN.mscorlib.DNObject);
    function get_CommandTarget: DNIInputElement;
    procedure set_CommandTarget(value: DNIInputElement);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Gesture: DNInputGesture read get_Gesture write set_Gesture;
    property MouseAction: DNMouseAction read get_MouseAction write set_MouseAction;
    property Command: DDN.System.Windows.Common.DNICommand read get_Command write set_Command;
    property CommandParameter: DDN.mscorlib.DNObject read get_CommandParameter write set_CommandParameter;
    property CommandTarget: DNIInputElement read get_CommandTarget write set_CommandTarget;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMouseBinding = class(TDNGenericImport<DNMouseBindingClass, DNMouseBinding>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimatableClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{A7D16937-AFF8-5FBE-9252-5923B3480EDC}']
  { static methods } 

    {class} function ShouldSerializeStoredWeakReference(target: DDN.System.Windows.Common.DNDependencyObject): Boolean;

  end;

  [DNTypeName('System.Windows.Media.Animation.Animatable')]
  DNAnimatable = interface(DDN.System.Windows.Common.DNFreezable)
  ['{44ED8723-0A8A-32EA-BDEE-B3BA13144C0D}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAnimatable;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAnimatable = class(TDNGenericImport<DNAnimatableClass, DNAnimatable>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineClass = interface(DNAnimatableClass)
  ['{7EC91793-FD7A-5260-ABDF-F73D1E45E701}']
  { static fields getter & setter } 

   function __fakeFieldGet_AccelerationRatioProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AutoReverseProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BeginTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DecelerationRatioProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DesiredFrameRateProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DurationProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FillBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_NameProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RepeatBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SpeedRatioProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AccelerationRatioProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AccelerationRatioProperty;
    {class} property AutoReverseProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AutoReverseProperty;
    {class} property BeginTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BeginTimeProperty;
    {class} property DecelerationRatioProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DecelerationRatioProperty;
    {class} property DesiredFrameRateProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DesiredFrameRateProperty;
    {class} property DurationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DurationProperty;
    {class} property FillBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FillBehaviorProperty;
    {class} property NameProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NameProperty;
    {class} property RepeatBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RepeatBehaviorProperty;
    {class} property SpeedRatioProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SpeedRatioProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Timeline')]
  DNTimeline = interface(DNAnimatable)
  ['{BF94DBD7-BC88-3C19-B031-7CA7DCDF6B79}']
  { getters & setters } 

    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimeline;
    function CloneCurrentValue: DNTimeline;
    function CreateClock: DNClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTimeline = class(TDNGenericImport<DNTimelineClass, DNTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimationTimelineClass = interface(DNTimelineClass)
  ['{72DA1519-F0BB-5EB1-B8FD-F34346A1144F}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsAdditiveProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property IsAdditiveProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsAdditiveProperty;
    {class} property IsCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsCumulativeProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.AnimationTimeline')]
  DNAnimationTimeline = interface(DNTimeline)
  ['{0C2B4F62-1B4B-35FE-9858-410ECEA6CF96}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAnimationTimeline;
    function CreateClock: DNAnimationClock; overload;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAnimationTimeline = class(TDNGenericImport<DNAnimationTimelineClass, DNAnimationTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBooleanAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{DA3756BE-59BC-5CF2-B846-FB6365DFF7FE}']
  end;

  [DNTypeName('System.Windows.Media.Animation.BooleanAnimationBase')]
  DNBooleanAnimationBase = interface(DNAnimationTimeline)
  ['{59A27D53-95E0-3E68-8F4D-ED394D1ACC07}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBooleanAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Boolean; defaultDestinationValue: Boolean; animationClock: DNAnimationClock): Boolean; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBooleanAnimationBase = class(TDNGenericImport<DNBooleanAnimationBaseClass, DNBooleanAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBooleanAnimationUsingKeyFramesClass = interface(DNBooleanAnimationBaseClass)
  ['{B763C6B5-60E9-5F5E-A769-08CCCB243F0F}']
  { constructors } 

    {class} function init: DNBooleanAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames')]
  DNBooleanAnimationUsingKeyFrames = interface(DNBooleanAnimationBase)
  ['{F23EEEA1-8D55-38A5-AB90-07C1351E8C3B}']
  { getters & setters } 

    function get_KeyFrames: DNBooleanKeyFrameCollection;
    procedure set_KeyFrames(value: DNBooleanKeyFrameCollection);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBooleanAnimationUsingKeyFrames;
    function CloneCurrentValue: DNBooleanAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Boolean; defaultDestinationValue: Boolean; animationClock: DNAnimationClock): Boolean; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNBooleanKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBooleanAnimationUsingKeyFrames = class(TDNGenericImport<DNBooleanAnimationUsingKeyFramesClass, DNBooleanAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNByteAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{4FF4E95B-7905-5D0E-844C-AC5AC49B72D4}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ByteAnimationBase')]
  DNByteAnimationBase = interface(DNAnimationTimeline)
  ['{09700FD0-378F-3F60-AE31-785EDB250D1F}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNByteAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Byte; defaultDestinationValue: Byte; animationClock: DNAnimationClock): Byte; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNByteAnimationBase = class(TDNGenericImport<DNByteAnimationBaseClass, DNByteAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNByteAnimationClass = interface(DNByteAnimationBaseClass)
  ['{7ADC890E-19EC-5278-8C92-3376389A8F14}']
  { constructors } 

    {class} function init: DNByteAnimation; overload;
    {class} function init(toValue: Byte; duration: DNDuration): DNByteAnimation; overload;
    {class} function init(toValue: Byte; duration: DNDuration; fillBehavior: DNFillBehavior): DNByteAnimation; overload;
    {class} function init(fromValue: Byte; toValue: Byte; duration: DNDuration): DNByteAnimation; overload;
    {class} function init(fromValue: Byte; toValue: Byte; duration: DNDuration; fillBehavior: DNFillBehavior): DNByteAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ByteAnimation')]
  DNByteAnimation = interface(DNByteAnimationBase)
  ['{924F1051-1562-38A1-8804-021AFFEF034D}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNByteAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Byte; defaultDestinationValue: Byte; animationClock: DNAnimationClock): Byte; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNByteAnimation = class(TDNGenericImport<DNByteAnimationClass, DNByteAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNByteAnimationUsingKeyFramesClass = interface(DNByteAnimationBaseClass)
  ['{78F4595C-CF44-55E0-9C7F-D51B377DA1A9}']
  { constructors } 

    {class} function init: DNByteAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.ByteAnimationUsingKeyFrames')]
  DNByteAnimationUsingKeyFrames = interface(DNByteAnimationBase)
  ['{F70F348B-9E9D-3BE8-BA92-E98F9F943E09}']
  { getters & setters } 

    function get_KeyFrames: DNByteKeyFrameCollection;
    procedure set_KeyFrames(value: DNByteKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNByteAnimationUsingKeyFrames;
    function CloneCurrentValue: DNByteAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Byte; defaultDestinationValue: Byte; animationClock: DNAnimationClock): Byte; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNByteKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNByteAnimationUsingKeyFrames = class(TDNGenericImport<DNByteAnimationUsingKeyFramesClass, DNByteAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCharAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{18342B03-C9B7-565F-B744-5C86F7DC0CE0}']
  end;

  [DNTypeName('System.Windows.Media.Animation.CharAnimationBase')]
  DNCharAnimationBase = interface(DNAnimationTimeline)
  ['{19A9DA64-8811-3DE6-8B1A-8B1FFBD7FB7E}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCharAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Char; defaultDestinationValue: Char; animationClock: DNAnimationClock): Char; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCharAnimationBase = class(TDNGenericImport<DNCharAnimationBaseClass, DNCharAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCharAnimationUsingKeyFramesClass = interface(DNCharAnimationBaseClass)
  ['{43F1AEA8-F6AB-5B5A-A6D1-AA2859AE93CB}']
  { constructors } 

    {class} function init: DNCharAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.CharAnimationUsingKeyFrames')]
  DNCharAnimationUsingKeyFrames = interface(DNCharAnimationBase)
  ['{ABEDE542-1EA9-3486-B515-025EC9D467B2}']
  { getters & setters } 

    function get_KeyFrames: DNCharKeyFrameCollection;
    procedure set_KeyFrames(value: DNCharKeyFrameCollection);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCharAnimationUsingKeyFrames;
    function CloneCurrentValue: DNCharAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Char; defaultDestinationValue: Char; animationClock: DNAnimationClock): Char; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNCharKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCharAnimationUsingKeyFrames = class(TDNGenericImport<DNCharAnimationUsingKeyFramesClass, DNCharAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNColorAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{EE19C049-D164-52D8-9831-359361EFE269}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ColorAnimationBase')]
  DNColorAnimationBase = interface(DNAnimationTimeline)
  ['{2930A35B-8615-33F3-A0FC-808DBF4B5185}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNColorAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNColor; defaultDestinationValue: DNColor; animationClock: DNAnimationClock): DNColor; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorAnimationBase = class(TDNGenericImport<DNColorAnimationBaseClass, DNColorAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNColorAnimationClass = interface(DNColorAnimationBaseClass)
  ['{B4B99D38-DF4F-5440-9286-E01DE1544882}']
  { constructors } 

    {class} function init: DNColorAnimation; overload;
    {class} function init(toValue: DNColor; duration: DNDuration): DNColorAnimation; overload;
    {class} function init(toValue: DNColor; duration: DNDuration; fillBehavior: DNFillBehavior): DNColorAnimation; overload;
    {class} function init(fromValue: DNColor; toValue: DNColor; duration: DNDuration): DNColorAnimation; overload;
    {class} function init(fromValue: DNColor; toValue: DNColor; duration: DNDuration; fillBehavior: DNFillBehavior): DNColorAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ColorAnimation')]
  DNColorAnimation = interface(DNColorAnimationBase)
  ['{6D68548F-569A-3329-8952-A7EAB60C5DD1}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNColorAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNColor; defaultDestinationValue: DNColor; animationClock: DNAnimationClock): DNColor; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorAnimation = class(TDNGenericImport<DNColorAnimationClass, DNColorAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNColorAnimationUsingKeyFramesClass = interface(DNColorAnimationBaseClass)
  ['{30C6E7C1-F93E-59D7-A91C-F1416B4ED36D}']
  { constructors } 

    {class} function init: DNColorAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.ColorAnimationUsingKeyFrames')]
  DNColorAnimationUsingKeyFrames = interface(DNColorAnimationBase)
  ['{1E3E9822-DB3D-30B3-AECE-02B0D0CABC33}']
  { getters & setters } 

    function get_KeyFrames: DNColorKeyFrameCollection;
    procedure set_KeyFrames(value: DNColorKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNColorAnimationUsingKeyFrames;
    function CloneCurrentValue: DNColorAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNColor; defaultDestinationValue: DNColor; animationClock: DNAnimationClock): DNColor; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNColorKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorAnimationUsingKeyFrames = class(TDNGenericImport<DNColorAnimationUsingKeyFramesClass, DNColorAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDecimalAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{2BBEE9D1-4928-5286-B98C-08A4F86BB2CB}']
  end;

  [DNTypeName('System.Windows.Media.Animation.DecimalAnimationBase')]
  DNDecimalAnimationBase = interface(DNAnimationTimeline)
  ['{37618257-F01B-31FB-8635-E97498156C79}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDecimalAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNDecimal; defaultDestinationValue: DDN.mscorlib.DNDecimal; animationClock: DNAnimationClock): DDN.mscorlib.DNDecimal; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDecimalAnimationBase = class(TDNGenericImport<DNDecimalAnimationBaseClass, DNDecimalAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDecimalAnimationClass = interface(DNDecimalAnimationBaseClass)
  ['{AF7AF610-2D14-5389-9B4C-46DFBAE60FFC}']
  { constructors } 

    {class} function init: DNDecimalAnimation; overload;
    {class} function init(toValue: DDN.mscorlib.DNDecimal; duration: DNDuration): DNDecimalAnimation; overload;
    {class} function init(toValue: DDN.mscorlib.DNDecimal; duration: DNDuration; fillBehavior: DNFillBehavior): DNDecimalAnimation; overload;
    {class} function init(fromValue: DDN.mscorlib.DNDecimal; toValue: DDN.mscorlib.DNDecimal; duration: DNDuration): DNDecimalAnimation; overload;
    {class} function init(fromValue: DDN.mscorlib.DNDecimal; toValue: DDN.mscorlib.DNDecimal; duration: DNDuration; fillBehavior: DNFillBehavior): DNDecimalAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.DecimalAnimation')]
  DNDecimalAnimation = interface(DNDecimalAnimationBase)
  ['{382ADB2C-B6F8-3345-9A06-981F57BCA02B}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDecimalAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNDecimal; defaultDestinationValue: DDN.mscorlib.DNDecimal; animationClock: DNAnimationClock): DDN.mscorlib.DNDecimal; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDecimalAnimation = class(TDNGenericImport<DNDecimalAnimationClass, DNDecimalAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDecimalAnimationUsingKeyFramesClass = interface(DNDecimalAnimationBaseClass)
  ['{53B8E90B-A413-51C6-A442-97F1EED563DE}']
  { constructors } 

    {class} function init: DNDecimalAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames')]
  DNDecimalAnimationUsingKeyFrames = interface(DNDecimalAnimationBase)
  ['{11A38071-B6E5-35C9-9042-759B3CE24E9C}']
  { getters & setters } 

    function get_KeyFrames: DNDecimalKeyFrameCollection;
    procedure set_KeyFrames(value: DNDecimalKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDecimalAnimationUsingKeyFrames;
    function CloneCurrentValue: DNDecimalAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNDecimal; defaultDestinationValue: DDN.mscorlib.DNDecimal; animationClock: DNAnimationClock): DDN.mscorlib.DNDecimal; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNDecimalKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDecimalAnimationUsingKeyFrames = class(TDNGenericImport<DNDecimalAnimationUsingKeyFramesClass, DNDecimalAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{B11FEC0B-8919-5B0F-9B82-E8AB1205BAA8}']
  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleAnimationBase')]
  DNDoubleAnimationBase = interface(DNAnimationTimeline)
  ['{68C00FD2-112B-32C6-B2D8-CB295E35F49C}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Double; defaultDestinationValue: Double; animationClock: DNAnimationClock): Double; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleAnimationBase = class(TDNGenericImport<DNDoubleAnimationBaseClass, DNDoubleAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleAnimationClass = interface(DNDoubleAnimationBaseClass)
  ['{859C573E-3C7E-56C3-9E19-5610B58F3DF3}']
  { constructors } 

    {class} function init: DNDoubleAnimation; overload;
    {class} function init(toValue: Double; duration: DNDuration): DNDoubleAnimation; overload;
    {class} function init(toValue: Double; duration: DNDuration; fillBehavior: DNFillBehavior): DNDoubleAnimation; overload;
    {class} function init(fromValue: Double; toValue: Double; duration: DNDuration): DNDoubleAnimation; overload;
    {class} function init(fromValue: Double; toValue: Double; duration: DNDuration; fillBehavior: DNFillBehavior): DNDoubleAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleAnimation')]
  DNDoubleAnimation = interface(DNDoubleAnimationBase)
  ['{2D1D0C4E-99AB-3998-8BC8-7C5E7F11053E}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Double; defaultDestinationValue: Double; animationClock: DNAnimationClock): Double; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleAnimation = class(TDNGenericImport<DNDoubleAnimationClass, DNDoubleAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleAnimationUsingKeyFramesClass = interface(DNDoubleAnimationBaseClass)
  ['{C54B1F4E-E163-59C3-98CF-FFA460438A24}']
  { constructors } 

    {class} function init: DNDoubleAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames')]
  DNDoubleAnimationUsingKeyFrames = interface(DNDoubleAnimationBase)
  ['{2AF5EFAB-340C-39FF-9808-B95812506686}']
  { getters & setters } 

    function get_KeyFrames: DNDoubleKeyFrameCollection;
    procedure set_KeyFrames(value: DNDoubleKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleAnimationUsingKeyFrames;
    function CloneCurrentValue: DNDoubleAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Double; defaultDestinationValue: Double; animationClock: DNAnimationClock): Double; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNDoubleKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleAnimationUsingKeyFrames = class(TDNGenericImport<DNDoubleAnimationUsingKeyFramesClass, DNDoubleAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleAnimationUsingPathClass = interface(DNDoubleAnimationBaseClass)
  ['{A81A1070-A9F5-57D9-81EC-BEEBAB194ED6}']
  { constructors } 

    {class} function init: DNDoubleAnimationUsingPath;

  { static fields getter & setter } 

   function __fakeFieldGet_PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PathGeometryProperty;
    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleAnimationUsingPath')]
  DNDoubleAnimationUsingPath = interface(DNDoubleAnimationBase)
  ['{A920BAF6-F6A3-3F0A-BC31-7FEE11D1693D}']
  { getters & setters } 

    function get_PathGeometry: DNPathGeometry;
    procedure set_PathGeometry(value: DNPathGeometry);
    function get_Source: DNPathAnimationSource;
    procedure set_Source(value: DNPathAnimationSource);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleAnimationUsingPath;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Double; defaultDestinationValue: Double; animationClock: DNAnimationClock): Double; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PathGeometry: DNPathGeometry read get_PathGeometry write set_PathGeometry;
    property Source: DNPathAnimationSource read get_Source write set_Source;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleAnimationUsingPath = class(TDNGenericImport<DNDoubleAnimationUsingPathClass, DNDoubleAnimationUsingPath>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt16AnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{3BF2FFC4-5E85-5127-A1C5-1E42C6133F2A}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Int16AnimationBase')]
  DNInt16AnimationBase = interface(DNAnimationTimeline)
  ['{C0441FD6-82E7-3384-9993-D3CDAC8F0028}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt16AnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int16; defaultDestinationValue: Int16; animationClock: DNAnimationClock): Int16; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt16AnimationBase = class(TDNGenericImport<DNInt16AnimationBaseClass, DNInt16AnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt16AnimationClass = interface(DNInt16AnimationBaseClass)
  ['{6BE1856F-1EFD-59FF-BF8A-DC6AE64FB263}']
  { constructors } 

    {class} function init: DNInt16Animation; overload;
    {class} function init(toValue: Int16; duration: DNDuration): DNInt16Animation; overload;
    {class} function init(toValue: Int16; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt16Animation; overload;
    {class} function init(fromValue: Int16; toValue: Int16; duration: DNDuration): DNInt16Animation; overload;
    {class} function init(fromValue: Int16; toValue: Int16; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt16Animation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int16Animation')]
  DNInt16Animation = interface(DNInt16AnimationBase)
  ['{A4A457E3-FBFC-334B-84A1-CB085FB78933}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt16Animation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int16; defaultDestinationValue: Int16; animationClock: DNAnimationClock): Int16; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt16Animation = class(TDNGenericImport<DNInt16AnimationClass, DNInt16Animation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt16AnimationUsingKeyFramesClass = interface(DNInt16AnimationBaseClass)
  ['{3BD02D8F-953F-5DBD-82AE-04E1D5BDD295}']
  { constructors } 

    {class} function init: DNInt16AnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int16AnimationUsingKeyFrames')]
  DNInt16AnimationUsingKeyFrames = interface(DNInt16AnimationBase)
  ['{6CD1CFCF-BEE0-3CCC-9BA9-3625B0FB9240}']
  { getters & setters } 

    function get_KeyFrames: DNInt16KeyFrameCollection;
    procedure set_KeyFrames(value: DNInt16KeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt16AnimationUsingKeyFrames;
    function CloneCurrentValue: DNInt16AnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int16; defaultDestinationValue: Int16; animationClock: DNAnimationClock): Int16; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNInt16KeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt16AnimationUsingKeyFrames = class(TDNGenericImport<DNInt16AnimationUsingKeyFramesClass, DNInt16AnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt32AnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{7696F413-7991-5742-8E2B-4F7C7F104BD6}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Int32AnimationBase')]
  DNInt32AnimationBase = interface(DNAnimationTimeline)
  ['{3FD7D51B-D0B4-3F3C-ADA8-B91F583C164C}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt32AnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int32; defaultDestinationValue: Int32; animationClock: DNAnimationClock): Int32; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32AnimationBase = class(TDNGenericImport<DNInt32AnimationBaseClass, DNInt32AnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt32AnimationClass = interface(DNInt32AnimationBaseClass)
  ['{A9A7FFC3-D517-5D39-956C-612EB82E95F5}']
  { constructors } 

    {class} function init: DNInt32Animation; overload;
    {class} function init(toValue: Int32; duration: DNDuration): DNInt32Animation; overload;
    {class} function init(toValue: Int32; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt32Animation; overload;
    {class} function init(fromValue: Int32; toValue: Int32; duration: DNDuration): DNInt32Animation; overload;
    {class} function init(fromValue: Int32; toValue: Int32; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt32Animation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int32Animation')]
  DNInt32Animation = interface(DNInt32AnimationBase)
  ['{D9211F38-1AD0-3CA3-A106-C9C0104FCB5F}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt32Animation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int32; defaultDestinationValue: Int32; animationClock: DNAnimationClock): Int32; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32Animation = class(TDNGenericImport<DNInt32AnimationClass, DNInt32Animation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt32AnimationUsingKeyFramesClass = interface(DNInt32AnimationBaseClass)
  ['{C9EE6CAE-47FF-58F3-846C-DE9D006170CF}']
  { constructors } 

    {class} function init: DNInt32AnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int32AnimationUsingKeyFrames')]
  DNInt32AnimationUsingKeyFrames = interface(DNInt32AnimationBase)
  ['{03A70AE2-3FEA-3870-BFC1-CEEC8DBF9A36}']
  { getters & setters } 

    function get_KeyFrames: DNInt32KeyFrameCollection;
    procedure set_KeyFrames(value: DNInt32KeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt32AnimationUsingKeyFrames;
    function CloneCurrentValue: DNInt32AnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int32; defaultDestinationValue: Int32; animationClock: DNAnimationClock): Int32; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNInt32KeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32AnimationUsingKeyFrames = class(TDNGenericImport<DNInt32AnimationUsingKeyFramesClass, DNInt32AnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt64AnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{1869AA01-52D9-5556-8240-81FF7CD01FB7}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Int64AnimationBase')]
  DNInt64AnimationBase = interface(DNAnimationTimeline)
  ['{FF75D5D6-A0D3-3D8C-B7EC-43C0BFE33400}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt64AnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int64; defaultDestinationValue: Int64; animationClock: DNAnimationClock): Int64; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt64AnimationBase = class(TDNGenericImport<DNInt64AnimationBaseClass, DNInt64AnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt64AnimationClass = interface(DNInt64AnimationBaseClass)
  ['{252A5168-6269-5614-86CD-631DAD073422}']
  { constructors } 

    {class} function init: DNInt64Animation; overload;
    {class} function init(toValue: Int64; duration: DNDuration): DNInt64Animation; overload;
    {class} function init(toValue: Int64; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt64Animation; overload;
    {class} function init(fromValue: Int64; toValue: Int64; duration: DNDuration): DNInt64Animation; overload;
    {class} function init(fromValue: Int64; toValue: Int64; duration: DNDuration; fillBehavior: DNFillBehavior): DNInt64Animation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int64Animation')]
  DNInt64Animation = interface(DNInt64AnimationBase)
  ['{EF369439-C397-390B-9A58-21BC0CA5B2AD}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt64Animation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int64; defaultDestinationValue: Int64; animationClock: DNAnimationClock): Int64; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt64Animation = class(TDNGenericImport<DNInt64AnimationClass, DNInt64Animation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt64AnimationUsingKeyFramesClass = interface(DNInt64AnimationBaseClass)
  ['{4F345B72-9719-5F73-B019-3ECFA6C1D200}']
  { constructors } 

    {class} function init: DNInt64AnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int64AnimationUsingKeyFrames')]
  DNInt64AnimationUsingKeyFrames = interface(DNInt64AnimationBase)
  ['{CD6B8A2A-7163-332F-AE39-38AE18929CED}']
  { getters & setters } 

    function get_KeyFrames: DNInt64KeyFrameCollection;
    procedure set_KeyFrames(value: DNInt64KeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt64AnimationUsingKeyFrames;
    function CloneCurrentValue: DNInt64AnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Int64; defaultDestinationValue: Int64; animationClock: DNAnimationClock): Int64; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNInt64KeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt64AnimationUsingKeyFrames = class(TDNGenericImport<DNInt64AnimationUsingKeyFramesClass, DNInt64AnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNMatrixAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{E35D300F-C2A4-5EDC-AC50-408DB29C1004}']
  end;

  [DNTypeName('System.Windows.Media.Animation.MatrixAnimationBase')]
  DNMatrixAnimationBase = interface(DNAnimationTimeline)
  ['{26D00B13-B1AA-3D28-8CDA-6A21F2DF0D89}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNMatrix; defaultDestinationValue: DDN.System.Windows.Common.DNMatrix; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNMatrix; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixAnimationBase = class(TDNGenericImport<DNMatrixAnimationBaseClass, DNMatrixAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNMatrixAnimationUsingKeyFramesClass = interface(DNMatrixAnimationBaseClass)
  ['{063547E9-2AA0-5514-8672-0DFE146F0D54}']
  { constructors } 

    {class} function init: DNMatrixAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames')]
  DNMatrixAnimationUsingKeyFrames = interface(DNMatrixAnimationBase)
  ['{F00F52C5-1B99-3C38-9512-7FD338500C0C}']
  { getters & setters } 

    function get_KeyFrames: DNMatrixKeyFrameCollection;
    procedure set_KeyFrames(value: DNMatrixKeyFrameCollection);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixAnimationUsingKeyFrames;
    function CloneCurrentValue: DNMatrixAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNMatrix; defaultDestinationValue: DDN.System.Windows.Common.DNMatrix; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNMatrix; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNMatrixKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixAnimationUsingKeyFrames = class(TDNGenericImport<DNMatrixAnimationUsingKeyFramesClass, DNMatrixAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNMatrixAnimationUsingPathClass = interface(DNMatrixAnimationBaseClass)
  ['{B45F3293-1DC7-5047-8FB0-44EDF99487B0}']
  { constructors } 

    {class} function init: DNMatrixAnimationUsingPath;

  { static fields getter & setter } 

   function __fakeFieldGet_DoesRotateWithTangentProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsAngleCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsOffsetCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property DoesRotateWithTangentProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DoesRotateWithTangentProperty;
    {class} property IsAngleCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsAngleCumulativeProperty;
    {class} property IsOffsetCumulativeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsOffsetCumulativeProperty;
    {class} property PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PathGeometryProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.MatrixAnimationUsingPath')]
  DNMatrixAnimationUsingPath = interface(DNMatrixAnimationBase)
  ['{A83BC7CD-ADD0-3BAF-9C6A-5BBEB8CA1BA0}']
  { getters & setters } 

    function get_DoesRotateWithTangent: Boolean;
    procedure set_DoesRotateWithTangent(value: Boolean);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsAngleCumulative: Boolean;
    procedure set_IsAngleCumulative(value: Boolean);
    function get_IsOffsetCumulative: Boolean;
    procedure set_IsOffsetCumulative(value: Boolean);
    function get_PathGeometry: DNPathGeometry;
    procedure set_PathGeometry(value: DNPathGeometry);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixAnimationUsingPath;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNMatrix; defaultDestinationValue: DDN.System.Windows.Common.DNMatrix; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNMatrix; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DoesRotateWithTangent: Boolean read get_DoesRotateWithTangent write set_DoesRotateWithTangent;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsAngleCumulative: Boolean read get_IsAngleCumulative write set_IsAngleCumulative;
    property IsOffsetCumulative: Boolean read get_IsOffsetCumulative write set_IsOffsetCumulative;
    property PathGeometry: DNPathGeometry read get_PathGeometry write set_PathGeometry;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixAnimationUsingPath = class(TDNGenericImport<DNMatrixAnimationUsingPathClass, DNMatrixAnimationUsingPath>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNObjectAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{35CE2C99-3475-5B8C-B3EB-F51D8EBCB62A}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ObjectAnimationBase')]
  DNObjectAnimationBase = interface(DNAnimationTimeline)
  ['{2361DBA1-F640-304F-8C6E-C5ADF566F2C3}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNObjectAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNObjectAnimationBase = class(TDNGenericImport<DNObjectAnimationBaseClass, DNObjectAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNObjectAnimationUsingKeyFramesClass = interface(DNObjectAnimationBaseClass)
  ['{4CA9E195-D60A-531B-89EB-FECB36AF69EC}']
  { constructors } 

    {class} function init: DNObjectAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames')]
  DNObjectAnimationUsingKeyFrames = interface(DNObjectAnimationBase)
  ['{318575A1-42C2-3E7A-B616-475314AA68B7}']
  { getters & setters } 

    function get_KeyFrames: DNObjectKeyFrameCollection;
    procedure set_KeyFrames(value: DNObjectKeyFrameCollection);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNObjectAnimationUsingKeyFrames;
    function CloneCurrentValue: DNObjectAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNObjectKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNObjectAnimationUsingKeyFrames = class(TDNGenericImport<DNObjectAnimationUsingKeyFramesClass, DNObjectAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPoint3DAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{12E1D4A3-14D5-5472-806A-E340EBCDFB15}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Point3DAnimationBase')]
  DNPoint3DAnimationBase = interface(DNAnimationTimeline)
  ['{76192FE7-E917-30B7-B292-D82A5EB67AE7}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPoint3DAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNPoint3D; defaultDestinationValue: DNPoint3D; animationClock: DNAnimationClock): DNPoint3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DAnimationBase = class(TDNGenericImport<DNPoint3DAnimationBaseClass, DNPoint3DAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPoint3DAnimationClass = interface(DNPoint3DAnimationBaseClass)
  ['{D8EB315F-0B1A-5C6E-840D-9C4AE40252C8}']
  { constructors } 

    {class} function init: DNPoint3DAnimation; overload;
    {class} function init(toValue: DNPoint3D; duration: DNDuration): DNPoint3DAnimation; overload;
    {class} function init(toValue: DNPoint3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNPoint3DAnimation; overload;
    {class} function init(fromValue: DNPoint3D; toValue: DNPoint3D; duration: DNDuration): DNPoint3DAnimation; overload;
    {class} function init(fromValue: DNPoint3D; toValue: DNPoint3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNPoint3DAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Point3DAnimation')]
  DNPoint3DAnimation = interface(DNPoint3DAnimationBase)
  ['{25EF372E-E3EE-3BAD-AD7C-267B7D6AD736}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPoint3DAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNPoint3D; defaultDestinationValue: DNPoint3D; animationClock: DNAnimationClock): DNPoint3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DAnimation = class(TDNGenericImport<DNPoint3DAnimationClass, DNPoint3DAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPoint3DAnimationUsingKeyFramesClass = interface(DNPoint3DAnimationBaseClass)
  ['{7580A6FE-9E46-54E1-811B-D378BDEE4A47}']
  { constructors } 

    {class} function init: DNPoint3DAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames')]
  DNPoint3DAnimationUsingKeyFrames = interface(DNPoint3DAnimationBase)
  ['{380D08AD-A814-3C86-8916-F978F2A4F0F4}']
  { getters & setters } 

    function get_KeyFrames: DNPoint3DKeyFrameCollection;
    procedure set_KeyFrames(value: DNPoint3DKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPoint3DAnimationUsingKeyFrames;
    function CloneCurrentValue: DNPoint3DAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNPoint3D; defaultDestinationValue: DNPoint3D; animationClock: DNAnimationClock): DNPoint3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNPoint3DKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DAnimationUsingKeyFrames = class(TDNGenericImport<DNPoint3DAnimationUsingKeyFramesClass, DNPoint3DAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{1E8EC10B-76BC-532B-9EB7-0DF7E7391A60}']
  end;

  [DNTypeName('System.Windows.Media.Animation.PointAnimationBase')]
  DNPointAnimationBase = interface(DNAnimationTimeline)
  ['{7023FF99-7C81-3310-A08C-6FBF7C69694C}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNPoint; defaultDestinationValue: DDN.System.Windows.Common.DNPoint; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNPoint; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointAnimationBase = class(TDNGenericImport<DNPointAnimationBaseClass, DNPointAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointAnimationClass = interface(DNPointAnimationBaseClass)
  ['{544C9150-88F7-5E48-850F-7F285FB68643}']
  { constructors } 

    {class} function init: DNPointAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNPoint; duration: DNDuration): DNPointAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNPoint; duration: DNDuration; fillBehavior: DNFillBehavior): DNPointAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNPoint; toValue: DDN.System.Windows.Common.DNPoint; duration: DNDuration): DNPointAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNPoint; toValue: DDN.System.Windows.Common.DNPoint; duration: DNDuration; fillBehavior: DNFillBehavior): DNPointAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.PointAnimation')]
  DNPointAnimation = interface(DNPointAnimationBase)
  ['{48D05E2D-E026-3BBD-9473-0DF8F2D5D4B5}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNPoint; defaultDestinationValue: DDN.System.Windows.Common.DNPoint; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNPoint; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointAnimation = class(TDNGenericImport<DNPointAnimationClass, DNPointAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointAnimationUsingKeyFramesClass = interface(DNPointAnimationBaseClass)
  ['{CE78FA29-9D16-5662-9BD4-9D07F90C1BA6}']
  { constructors } 

    {class} function init: DNPointAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.PointAnimationUsingKeyFrames')]
  DNPointAnimationUsingKeyFrames = interface(DNPointAnimationBase)
  ['{F31350D8-42F9-3B96-A233-A586ED6D99BC}']
  { getters & setters } 

    function get_KeyFrames: DNPointKeyFrameCollection;
    procedure set_KeyFrames(value: DNPointKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointAnimationUsingKeyFrames;
    function CloneCurrentValue: DNPointAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNPoint; defaultDestinationValue: DDN.System.Windows.Common.DNPoint; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNPoint; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNPointKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointAnimationUsingKeyFrames = class(TDNGenericImport<DNPointAnimationUsingKeyFramesClass, DNPointAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointAnimationUsingPathClass = interface(DNPointAnimationBaseClass)
  ['{9C1C0E6E-BEC6-5361-BDEF-C6B52BAC66AD}']
  { constructors } 

    {class} function init: DNPointAnimationUsingPath;

  { static fields getter & setter } 

   function __fakeFieldGet_PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PathGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PathGeometryProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.PointAnimationUsingPath')]
  DNPointAnimationUsingPath = interface(DNPointAnimationBase)
  ['{93F2F9A6-EB79-3CF6-879F-9443936D5FA5}']
  { getters & setters } 

    function get_PathGeometry: DNPathGeometry;
    procedure set_PathGeometry(value: DNPathGeometry);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointAnimationUsingPath;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNPoint; defaultDestinationValue: DDN.System.Windows.Common.DNPoint; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNPoint; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PathGeometry: DNPathGeometry read get_PathGeometry write set_PathGeometry;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointAnimationUsingPath = class(TDNGenericImport<DNPointAnimationUsingPathClass, DNPointAnimationUsingPath>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuaternionAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{9698C634-AEE2-5F1E-8B1F-5B041A678073}']
  end;

  [DNTypeName('System.Windows.Media.Animation.QuaternionAnimationBase')]
  DNQuaternionAnimationBase = interface(DNAnimationTimeline)
  ['{67A2275E-CB2F-3CA1-918F-58270F635334}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNQuaternionAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNQuaternion; defaultDestinationValue: DNQuaternion; animationClock: DNAnimationClock): DNQuaternion; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionAnimationBase = class(TDNGenericImport<DNQuaternionAnimationBaseClass, DNQuaternionAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuaternionAnimationClass = interface(DNQuaternionAnimationBaseClass)
  ['{D1A73CC5-4647-53F1-B90A-9826F0BC4FA3}']
  { constructors } 

    {class} function init: DNQuaternionAnimation; overload;
    {class} function init(toValue: DNQuaternion; duration: DNDuration): DNQuaternionAnimation; overload;
    {class} function init(toValue: DNQuaternion; duration: DNDuration; fillBehavior: DNFillBehavior): DNQuaternionAnimation; overload;
    {class} function init(fromValue: DNQuaternion; toValue: DNQuaternion; duration: DNDuration): DNQuaternionAnimation; overload;
    {class} function init(fromValue: DNQuaternion; toValue: DNQuaternion; duration: DNDuration; fillBehavior: DNFillBehavior): DNQuaternionAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;
    {class} property UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UseShortestPathProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuaternionAnimation')]
  DNQuaternionAnimation = interface(DNQuaternionAnimationBase)
  ['{3A664E1C-91B1-3041-8716-F5851B161FA9}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_UseShortestPath: Boolean;
    procedure set_UseShortestPath(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNQuaternionAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNQuaternion; defaultDestinationValue: DNQuaternion; animationClock: DNAnimationClock): DNQuaternion; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property UseShortestPath: Boolean read get_UseShortestPath write set_UseShortestPath;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionAnimation = class(TDNGenericImport<DNQuaternionAnimationClass, DNQuaternionAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuaternionAnimationUsingKeyFramesClass = interface(DNQuaternionAnimationBaseClass)
  ['{71CAD4ED-4212-5BAB-B249-216BF28F5212}']
  { constructors } 

    {class} function init: DNQuaternionAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames')]
  DNQuaternionAnimationUsingKeyFrames = interface(DNQuaternionAnimationBase)
  ['{BBE171CE-25B8-3BED-B4F2-F7E2A57F9340}']
  { getters & setters } 

    function get_KeyFrames: DNQuaternionKeyFrameCollection;
    procedure set_KeyFrames(value: DNQuaternionKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNQuaternionAnimationUsingKeyFrames;
    function CloneCurrentValue: DNQuaternionAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNQuaternion; defaultDestinationValue: DNQuaternion; animationClock: DNAnimationClock): DNQuaternion; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNQuaternionKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionAnimationUsingKeyFrames = class(TDNGenericImport<DNQuaternionAnimationUsingKeyFramesClass, DNQuaternionAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRectAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{DAD58E3E-076B-50DF-A3C4-D2029DA039D5}']
  end;

  [DNTypeName('System.Windows.Media.Animation.RectAnimationBase')]
  DNRectAnimationBase = interface(DNAnimationTimeline)
  ['{59D0E2C1-90FA-3C77-BA56-2C20D6A55306}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRectAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNRect; defaultDestinationValue: DDN.System.Windows.Common.DNRect; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNRect; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectAnimationBase = class(TDNGenericImport<DNRectAnimationBaseClass, DNRectAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRectAnimationClass = interface(DNRectAnimationBaseClass)
  ['{7063EE38-2ABD-573E-A574-35F1E61406D7}']
  { constructors } 

    {class} function init: DNRectAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNRect; duration: DNDuration): DNRectAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNRect; duration: DNDuration; fillBehavior: DNFillBehavior): DNRectAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNRect; toValue: DDN.System.Windows.Common.DNRect; duration: DNDuration): DNRectAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNRect; toValue: DDN.System.Windows.Common.DNRect; duration: DNDuration; fillBehavior: DNFillBehavior): DNRectAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.RectAnimation')]
  DNRectAnimation = interface(DNRectAnimationBase)
  ['{673661F6-D1C9-38B2-BEC4-287C9035821A}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRectAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNRect; defaultDestinationValue: DDN.System.Windows.Common.DNRect; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNRect; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectAnimation = class(TDNGenericImport<DNRectAnimationClass, DNRectAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRectAnimationUsingKeyFramesClass = interface(DNRectAnimationBaseClass)
  ['{AE85F061-55E7-556A-9B0A-04FB2FA9DFF8}']
  { constructors } 

    {class} function init: DNRectAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.RectAnimationUsingKeyFrames')]
  DNRectAnimationUsingKeyFrames = interface(DNRectAnimationBase)
  ['{F418C064-4F8C-34D3-B2EB-2E1D1F0F63DB}']
  { getters & setters } 

    function get_KeyFrames: DNRectKeyFrameCollection;
    procedure set_KeyFrames(value: DNRectKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRectAnimationUsingKeyFrames;
    function CloneCurrentValue: DNRectAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNRect; defaultDestinationValue: DDN.System.Windows.Common.DNRect; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNRect; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNRectKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectAnimationUsingKeyFrames = class(TDNGenericImport<DNRectAnimationUsingKeyFramesClass, DNRectAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRotation3DAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{CEB27AE6-AB56-59EB-A53E-439384034429}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Rotation3DAnimationBase')]
  DNRotation3DAnimationBase = interface(DNAnimationTimeline)
  ['{4203FCB1-0EDE-305F-B197-D9D02C163426}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotation3DAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNRotation3D; defaultDestinationValue: DNRotation3D; animationClock: DNAnimationClock): DNRotation3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3DAnimationBase = class(TDNGenericImport<DNRotation3DAnimationBaseClass, DNRotation3DAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRotation3DAnimationClass = interface(DNRotation3DAnimationBaseClass)
  ['{91478AAA-C82E-5438-8E3D-39BD81889657}']
  { constructors } 

    {class} function init: DNRotation3DAnimation; overload;
    {class} function init(toValue: DNRotation3D; duration: DNDuration): DNRotation3DAnimation; overload;
    {class} function init(toValue: DNRotation3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNRotation3DAnimation; overload;
    {class} function init(fromValue: DNRotation3D; toValue: DNRotation3D; duration: DNDuration): DNRotation3DAnimation; overload;
    {class} function init(fromValue: DNRotation3D; toValue: DNRotation3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNRotation3DAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Rotation3DAnimation')]
  DNRotation3DAnimation = interface(DNRotation3DAnimationBase)
  ['{CD4151D6-95FE-3127-8790-637699052A9F}']
  { getters & setters } 

    function get_From: DNRotation3D;
    procedure set_From(value: DNRotation3D);
    function get_To: DNRotation3D;
    procedure set_To(value: DNRotation3D);
    function get_By: DNRotation3D;
    procedure set_By(value: DNRotation3D);
    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotation3DAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNRotation3D; defaultDestinationValue: DNRotation3D; animationClock: DNAnimationClock): DNRotation3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: DNRotation3D read get_From write set_From;
    property &To: DNRotation3D read get_To write set_To;
    property By: DNRotation3D read get_By write set_By;
    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3DAnimation = class(TDNGenericImport<DNRotation3DAnimationClass, DNRotation3DAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRotation3DAnimationUsingKeyFramesClass = interface(DNRotation3DAnimationBaseClass)
  ['{963C631C-8AE5-5551-BB12-7E3F6B34282F}']
  { constructors } 

    {class} function init: DNRotation3DAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames')]
  DNRotation3DAnimationUsingKeyFrames = interface(DNRotation3DAnimationBase)
  ['{1AA1601B-3097-3992-84DC-10FF760062EC}']
  { getters & setters } 

    function get_KeyFrames: DNRotation3DKeyFrameCollection;
    procedure set_KeyFrames(value: DNRotation3DKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotation3DAnimationUsingKeyFrames;
    function CloneCurrentValue: DNRotation3DAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNRotation3D; defaultDestinationValue: DNRotation3D; animationClock: DNAnimationClock): DNRotation3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNRotation3DKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3DAnimationUsingKeyFrames = class(TDNGenericImport<DNRotation3DAnimationUsingKeyFramesClass, DNRotation3DAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSingleAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{2B7CDB4A-E4D7-596F-94D8-596F54A036C7}']
  end;

  [DNTypeName('System.Windows.Media.Animation.SingleAnimationBase')]
  DNSingleAnimationBase = interface(DNAnimationTimeline)
  ['{93E7F496-F686-3CFB-B76C-9D5BFCBD58A1}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSingleAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Single; defaultDestinationValue: Single; animationClock: DNAnimationClock): Single; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSingleAnimationBase = class(TDNGenericImport<DNSingleAnimationBaseClass, DNSingleAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSingleAnimationClass = interface(DNSingleAnimationBaseClass)
  ['{158F77F0-617C-51E8-AED1-A1C00EC4E530}']
  { constructors } 

    {class} function init: DNSingleAnimation; overload;
    {class} function init(toValue: Single; duration: DNDuration): DNSingleAnimation; overload;
    {class} function init(toValue: Single; duration: DNDuration; fillBehavior: DNFillBehavior): DNSingleAnimation; overload;
    {class} function init(fromValue: Single; toValue: Single; duration: DNDuration): DNSingleAnimation; overload;
    {class} function init(fromValue: Single; toValue: Single; duration: DNDuration; fillBehavior: DNFillBehavior): DNSingleAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SingleAnimation')]
  DNSingleAnimation = interface(DNSingleAnimationBase)
  ['{5783A7CF-E818-3098-85F6-9335EFB5F361}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSingleAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Single; defaultDestinationValue: Single; animationClock: DNAnimationClock): Single; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSingleAnimation = class(TDNGenericImport<DNSingleAnimationClass, DNSingleAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSingleAnimationUsingKeyFramesClass = interface(DNSingleAnimationBaseClass)
  ['{4CBE224B-AFE6-5877-A558-81BFBFD4E5F3}']
  { constructors } 

    {class} function init: DNSingleAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.SingleAnimationUsingKeyFrames')]
  DNSingleAnimationUsingKeyFrames = interface(DNSingleAnimationBase)
  ['{63718393-77BA-3EDB-8EEB-160ED077A7D2}']
  { getters & setters } 

    function get_KeyFrames: DNSingleKeyFrameCollection;
    procedure set_KeyFrames(value: DNSingleKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSingleAnimationUsingKeyFrames;
    function CloneCurrentValue: DNSingleAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: Single; defaultDestinationValue: Single; animationClock: DNAnimationClock): Single; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNSingleKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSingleAnimationUsingKeyFrames = class(TDNGenericImport<DNSingleAnimationUsingKeyFramesClass, DNSingleAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSizeAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{2B1E3EF5-EA84-593E-82C3-03AAF36D3F7E}']
  end;

  [DNTypeName('System.Windows.Media.Animation.SizeAnimationBase')]
  DNSizeAnimationBase = interface(DNAnimationTimeline)
  ['{42BA4E72-8367-3177-8FC9-B946012AA47D}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSizeAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNSize; defaultDestinationValue: DDN.System.Windows.Common.DNSize; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNSize; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSizeAnimationBase = class(TDNGenericImport<DNSizeAnimationBaseClass, DNSizeAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSizeAnimationClass = interface(DNSizeAnimationBaseClass)
  ['{98D20C4D-1BDF-55BA-ADBC-FB6D47FD7BCB}']
  { constructors } 

    {class} function init: DNSizeAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNSize; duration: DNDuration): DNSizeAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNSize; duration: DNDuration; fillBehavior: DNFillBehavior): DNSizeAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNSize; toValue: DDN.System.Windows.Common.DNSize; duration: DNDuration): DNSizeAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNSize; toValue: DDN.System.Windows.Common.DNSize; duration: DNDuration; fillBehavior: DNFillBehavior): DNSizeAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SizeAnimation')]
  DNSizeAnimation = interface(DNSizeAnimationBase)
  ['{6056D04A-1BE9-3BBD-AE5B-A4DDB8E625B9}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSizeAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNSize; defaultDestinationValue: DDN.System.Windows.Common.DNSize; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNSize; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSizeAnimation = class(TDNGenericImport<DNSizeAnimationClass, DNSizeAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSizeAnimationUsingKeyFramesClass = interface(DNSizeAnimationBaseClass)
  ['{21E46CC2-1F9B-5D89-BC16-F733A55B99AC}']
  { constructors } 

    {class} function init: DNSizeAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.SizeAnimationUsingKeyFrames')]
  DNSizeAnimationUsingKeyFrames = interface(DNSizeAnimationBase)
  ['{28107000-8124-3A58-B681-7BBDA3DDF90F}']
  { getters & setters } 

    function get_KeyFrames: DNSizeKeyFrameCollection;
    procedure set_KeyFrames(value: DNSizeKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSizeAnimationUsingKeyFrames;
    function CloneCurrentValue: DNSizeAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNSize; defaultDestinationValue: DDN.System.Windows.Common.DNSize; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNSize; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNSizeKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSizeAnimationUsingKeyFrames = class(TDNGenericImport<DNSizeAnimationUsingKeyFramesClass, DNSizeAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNStringAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{3BFFBA69-2A24-5464-A832-CEE734665DF9}']
  end;

  [DNTypeName('System.Windows.Media.Animation.StringAnimationBase')]
  DNStringAnimationBase = interface(DNAnimationTimeline)
  ['{A1FD4CB5-83C7-3E54-91A0-59FE15EF4265}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStringAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: string; defaultDestinationValue: string; animationClock: DNAnimationClock): string; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStringAnimationBase = class(TDNGenericImport<DNStringAnimationBaseClass, DNStringAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNStringAnimationUsingKeyFramesClass = interface(DNStringAnimationBaseClass)
  ['{7C8ED0D6-B76E-5F11-A64E-8D2D0D8266AC}']
  { constructors } 

    {class} function init: DNStringAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.StringAnimationUsingKeyFrames')]
  DNStringAnimationUsingKeyFrames = interface(DNStringAnimationBase)
  ['{9DC02865-0742-39E8-AC9E-4634845A38CC}']
  { getters & setters } 

    function get_KeyFrames: DNStringKeyFrameCollection;
    procedure set_KeyFrames(value: DNStringKeyFrameCollection);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStringAnimationUsingKeyFrames;
    function CloneCurrentValue: DNStringAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: string; defaultDestinationValue: string; animationClock: DNAnimationClock): string; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNStringKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStringAnimationUsingKeyFrames = class(TDNGenericImport<DNStringAnimationUsingKeyFramesClass, DNStringAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVector3DAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{6A63DD7E-2016-5341-8FE2-974A6E0713E3}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Vector3DAnimationBase')]
  DNVector3DAnimationBase = interface(DNAnimationTimeline)
  ['{28263CE2-0DDC-3972-A429-8DF51521624C}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVector3DAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNVector3D; defaultDestinationValue: DNVector3D; animationClock: DNAnimationClock): DNVector3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DAnimationBase = class(TDNGenericImport<DNVector3DAnimationBaseClass, DNVector3DAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVector3DAnimationClass = interface(DNVector3DAnimationBaseClass)
  ['{5AD34632-7E4C-58B0-9F20-0C290116F0A5}']
  { constructors } 

    {class} function init: DNVector3DAnimation; overload;
    {class} function init(toValue: DNVector3D; duration: DNDuration): DNVector3DAnimation; overload;
    {class} function init(toValue: DNVector3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNVector3DAnimation; overload;
    {class} function init(fromValue: DNVector3D; toValue: DNVector3D; duration: DNDuration): DNVector3DAnimation; overload;
    {class} function init(fromValue: DNVector3D; toValue: DNVector3D; duration: DNDuration; fillBehavior: DNFillBehavior): DNVector3DAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Vector3DAnimation')]
  DNVector3DAnimation = interface(DNVector3DAnimationBase)
  ['{F89B6DD2-0008-39F8-9CE6-C2F7688B417A}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVector3DAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNVector3D; defaultDestinationValue: DNVector3D; animationClock: DNAnimationClock): DNVector3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DAnimation = class(TDNGenericImport<DNVector3DAnimationClass, DNVector3DAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVector3DAnimationUsingKeyFramesClass = interface(DNVector3DAnimationBaseClass)
  ['{E51734AD-9F20-560D-975F-2A274B130334}']
  { constructors } 

    {class} function init: DNVector3DAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames')]
  DNVector3DAnimationUsingKeyFrames = interface(DNVector3DAnimationBase)
  ['{03030B45-350C-3315-B45B-E98A08C6941D}']
  { getters & setters } 

    function get_KeyFrames: DNVector3DKeyFrameCollection;
    procedure set_KeyFrames(value: DNVector3DKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVector3DAnimationUsingKeyFrames;
    function CloneCurrentValue: DNVector3DAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DNVector3D; defaultDestinationValue: DNVector3D; animationClock: DNAnimationClock): DNVector3D; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNVector3DKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DAnimationUsingKeyFrames = class(TDNGenericImport<DNVector3DAnimationUsingKeyFramesClass, DNVector3DAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVectorAnimationBaseClass = interface(DNAnimationTimelineClass)
  ['{EF61E76C-2545-5EBD-87D5-ACC931D2B307}']
  end;

  [DNTypeName('System.Windows.Media.Animation.VectorAnimationBase')]
  DNVectorAnimationBase = interface(DNAnimationTimeline)
  ['{0FD18F96-A71E-33F7-8DDF-E980F7849FF4}']
  { getters & setters } 

    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVectorAnimationBase;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNVector; defaultDestinationValue: DDN.System.Windows.Common.DNVector; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNVector; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorAnimationBase = class(TDNGenericImport<DNVectorAnimationBaseClass, DNVectorAnimationBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVectorAnimationClass = interface(DNVectorAnimationBaseClass)
  ['{C7861434-2DD4-5363-AF3C-BDFA02587AA5}']
  { constructors } 

    {class} function init: DNVectorAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNVector; duration: DNDuration): DNVectorAnimation; overload;
    {class} function init(toValue: DDN.System.Windows.Common.DNVector; duration: DNDuration; fillBehavior: DNFillBehavior): DNVectorAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNVector; toValue: DDN.System.Windows.Common.DNVector; duration: DNDuration): DNVectorAnimation; overload;
    {class} function init(fromValue: DDN.System.Windows.Common.DNVector; toValue: DDN.System.Windows.Common.DNVector; duration: DNDuration; fillBehavior: DNFillBehavior): DNVectorAnimation; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FromProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ToProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ByProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FromProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FromProperty;
    {class} property ToProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ToProperty;
    {class} property ByProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ByProperty;
    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.VectorAnimation')]
  DNVectorAnimation = interface(DNVectorAnimationBase)
  ['{FE4E8448-8E44-3724-BF9C-AEFE163E661A}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVectorAnimation;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNVector; defaultDestinationValue: DDN.System.Windows.Common.DNVector; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNVector; overload;
    function CreateClock: DNAnimationClock; overload;
    function CloneCurrentValue: DNTimeline;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorAnimation = class(TDNGenericImport<DNVectorAnimationClass, DNVectorAnimation>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVectorAnimationUsingKeyFramesClass = interface(DNVectorAnimationBaseClass)
  ['{075A6C2C-B399-5389-B1F1-486620DD5094}']
  { constructors } 

    {class} function init: DNVectorAnimationUsingKeyFrames;

  end;

  [DNTypeName('System.Windows.Media.Animation.VectorAnimationUsingKeyFrames')]
  DNVectorAnimationUsingKeyFrames = interface(DNVectorAnimationBase)
  ['{C61FF4B1-A904-3B60-941B-930B1F6B630B}']
  { getters & setters } 

    function get_KeyFrames: DNVectorKeyFrameCollection;
    procedure set_KeyFrames(value: DNVectorKeyFrameCollection);
    function get_IsAdditive: Boolean;
    procedure set_IsAdditive(value: Boolean);
    function get_IsCumulative: Boolean;
    procedure set_IsCumulative(value: Boolean);
    function get_TargetPropertyType: DDN.mscorlib.DNType;
    function get_IsDestinationDefault: Boolean;
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVectorAnimationUsingKeyFrames;
    function CloneCurrentValue: DNVectorAnimationUsingKeyFrames;
    function ShouldSerializeKeyFrames: Boolean;
    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject; animationClock: DNAnimationClock): DDN.mscorlib.DNObject; overload;
    function GetCurrentValue(defaultOriginValue: DDN.System.Windows.Common.DNVector; defaultDestinationValue: DDN.System.Windows.Common.DNVector; animationClock: DNAnimationClock): DDN.System.Windows.Common.DNVector; overload;
    function CreateClock: DNAnimationClock; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyFrames: DNVectorKeyFrameCollection read get_KeyFrames write set_KeyFrames;
    property IsAdditive: Boolean read get_IsAdditive write set_IsAdditive;
    property IsCumulative: Boolean read get_IsCumulative write set_IsCumulative;
    property TargetPropertyType: DDN.mscorlib.DNType read get_TargetPropertyType;
    property IsDestinationDefault: Boolean read get_IsDestinationDefault;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorAnimationUsingKeyFrames = class(TDNGenericImport<DNVectorAnimationUsingKeyFramesClass, DNVectorAnimationUsingKeyFrames>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineGroupClass = interface(DNTimelineClass)
  ['{84FD6893-0DB9-5A6B-B197-832297B57A58}']
  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineGroup')]
  DNTimelineGroup = interface(DNTimeline)
  ['{2C7CBD7B-CBD5-39AC-B174-04B850F3875A}']
  { getters & setters } 

    function get_Children: DNTimelineCollection;
    procedure set_Children(value: DNTimelineCollection);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimelineGroup;
    function CloneCurrentValue: DNTimelineGroup;
    function CreateClock: DNClockGroup; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNTimelineCollection read get_Children write set_Children;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTimelineGroup = class(TDNGenericImport<DNTimelineGroupClass, DNTimelineGroup>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNParallelTimelineClass = interface(DNTimelineGroupClass)
  ['{55188F37-015B-512D-AB36-B6F96FDC39E4}']
  { constructors } 

    {class} function init: DNParallelTimeline; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SlipBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SlipBehaviorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SlipBehaviorProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ParallelTimeline')]
  DNParallelTimeline = interface(DNTimelineGroup)
  ['{79BAD5D7-2579-32FD-91AE-398E01ACD3BC}']
  { getters & setters } 

    function get_SlipBehavior: DNSlipBehavior;
    procedure set_SlipBehavior(value: DNSlipBehavior);
    function get_Children: DNTimelineCollection;
    procedure set_Children(value: DNTimelineCollection);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNParallelTimeline;
    function CloneCurrentValue: DNParallelTimeline;
    function CreateClock: DNClockGroup; overload;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlipBehavior: DNSlipBehavior read get_SlipBehavior write set_SlipBehavior;
    property Children: DNTimelineCollection read get_Children write set_Children;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNParallelTimeline = class(TDNGenericImport<DNParallelTimelineClass, DNParallelTimeline>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaTimelineClass = interface(DNTimelineClass)
  ['{40DDFD1E-D30D-5432-B8CF-598F93BB1B53}']
  { constructors } 

    {class} function init(source: DDN.System.Windows.Common.DNUri): DNMediaTimeline; overload;
    {class} function init: DNMediaTimeline; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;

  end;

  [DNTypeName('System.Windows.Media.MediaTimeline')]
  DNMediaTimeline = interface(DNTimeline)
  ['{D3965125-2629-3A3F-9063-858E67264E0B}']
  { getters & setters } 

    function get_Source: DDN.System.Windows.Common.DNUri;
    procedure set_Source(value: DDN.System.Windows.Common.DNUri);
    function get_AccelerationRatio: Double;
    procedure set_AccelerationRatio(value: Double);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_DecelerationRatio: Double;
    procedure set_DecelerationRatio(value: Double);
    function get_Duration: DNDuration;
    procedure set_Duration(value: DNDuration);
    function get_FillBehavior: DNFillBehavior;
    procedure set_FillBehavior(value: DNFillBehavior);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RepeatBehavior: DNRepeatBehavior;
    procedure set_RepeatBehavior(value: DNRepeatBehavior);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMediaTimeline;
    function CloneCurrentValue: DNMediaTimeline;
    function CreateClock: DNMediaClock; overload;
    function ToString: string;
    function CreateClock(hasControllableRoot: Boolean): DNClock; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DDN.System.Windows.Common.DNUri read get_Source write set_Source;
    property AccelerationRatio: Double read get_AccelerationRatio write set_AccelerationRatio;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property DecelerationRatio: Double read get_DecelerationRatio write set_DecelerationRatio;
    property Duration: DNDuration read get_Duration write set_Duration;
    property FillBehavior: DNFillBehavior read get_FillBehavior write set_FillBehavior;
    property Name: string read get_Name write set_Name;
    property RepeatBehavior: DNRepeatBehavior read get_RepeatBehavior write set_RepeatBehavior;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMediaTimeline = class(TDNGenericImport<DNMediaTimelineClass, DNMediaTimeline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNTimelineCollectionClass = interface(DNAnimatableClass)
  ['{49EB12F7-7EF1-5C60-A9F7-1243C41F5A28}']
  { constructors } 

    {class} function init: DNTimelineCollection; overload;
    {class} function init(capacity: Int32): DNTimelineCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTimeline>): DNTimelineCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.TimelineCollection')]
  DNTimelineCollection = interface(DNAnimatable)
  ['{DBF2DCD0-8474-3962-92E3-21DE6CE33008}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTimelineCollection;
    function CloneCurrentValue: DNTimelineCollection;
    function &Contains(value: DNTimeline): Boolean;
    function IndexOf(value: DNTimeline): Int32;
    procedure Insert(index: Int32; value: DNTimeline);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTimeline>; index: Int32);
    function GetEnumerator: DNAnimation_TimelineCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTimelineCollection = class(TDNGenericImport<DNTimelineCollectionClass, DNTimelineCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBrushClass = interface(DNAnimatableClass)
  ['{51E31CBE-288A-55E5-8B89-DD503F5C8384}']
  { static fields getter & setter } 

   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RelativeTransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;
    {class} property RelativeTransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RelativeTransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Brush')]
  DNBrush = interface(DNAnimatable)
  ['{D8CADDAB-B01F-35D6-9613-F7B39F5BF701}']
  { getters & setters } 

    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBrush;
    function CloneCurrentValue: DNBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBrush = class(TDNGenericImport<DNBrushClass, DNBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBitmapCacheBrushClass = interface(DNBrushClass)
  ['{61C885E6-4E39-505E-9966-4214D8F30C74}']
  { constructors } 

    {class} function init: DNBitmapCacheBrush; overload;
    {class} function init(visual: DNVisual): DNBitmapCacheBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TargetProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapCacheProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AutoLayoutContentProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TargetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TargetProperty;
    {class} property BitmapCacheProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapCacheProperty;
    {class} property AutoLayoutContentProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AutoLayoutContentProperty;

  end;

  [DNTypeName('System.Windows.Media.BitmapCacheBrush')]
  DNBitmapCacheBrush = interface(DNBrush)
  ['{125B4290-64FB-3130-AFA9-58D2DAEB5AFA}']
  { getters & setters } 

    function get_Target: DNVisual;
    procedure set_Target(value: DNVisual);
    function get_BitmapCache: DNBitmapCache;
    procedure set_BitmapCache(value: DNBitmapCache);
    function get_AutoLayoutContent: Boolean;
    procedure set_AutoLayoutContent(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapCacheBrush;
    function CloneCurrentValue: DNBitmapCacheBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Target: DNVisual read get_Target write set_Target;
    property BitmapCache: DNBitmapCache read get_BitmapCache write set_BitmapCache;
    property AutoLayoutContent: Boolean read get_AutoLayoutContent write set_AutoLayoutContent;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapCacheBrush = class(TDNGenericImport<DNBitmapCacheBrushClass, DNBitmapCacheBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGradientBrushClass = interface(DNBrushClass)
  ['{DF689599-2401-5FB8-985A-E9A4946A9A2C}']
  { static fields getter & setter } 

   function __fakeFieldGet_ColorInterpolationModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_MappingModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SpreadMethodProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GradientStopsProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorInterpolationModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorInterpolationModeProperty;
    {class} property MappingModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MappingModeProperty;
    {class} property SpreadMethodProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SpreadMethodProperty;
    {class} property GradientStopsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GradientStopsProperty;

  end;

  [DNTypeName('System.Windows.Media.GradientBrush')]
  DNGradientBrush = interface(DNBrush)
  ['{5F7755D2-2C83-37FD-ACA5-B1AD76394193}']
  { getters & setters } 

    function get_ColorInterpolationMode: DNColorInterpolationMode;
    procedure set_ColorInterpolationMode(value: DNColorInterpolationMode);
    function get_MappingMode: DNBrushMappingMode;
    procedure set_MappingMode(value: DNBrushMappingMode);
    function get_SpreadMethod: DNGradientSpreadMethod;
    procedure set_SpreadMethod(value: DNGradientSpreadMethod);
    function get_GradientStops: DNGradientStopCollection;
    procedure set_GradientStops(value: DNGradientStopCollection);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGradientBrush;
    function CloneCurrentValue: DNGradientBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ColorInterpolationMode: DNColorInterpolationMode read get_ColorInterpolationMode write set_ColorInterpolationMode;
    property MappingMode: DNBrushMappingMode read get_MappingMode write set_MappingMode;
    property SpreadMethod: DNGradientSpreadMethod read get_SpreadMethod write set_SpreadMethod;
    property GradientStops: DNGradientStopCollection read get_GradientStops write set_GradientStops;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGradientBrush = class(TDNGenericImport<DNGradientBrushClass, DNGradientBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNLinearGradientBrushClass = interface(DNGradientBrushClass)
  ['{4CCA0CE9-9FFC-52BC-90F6-15812EC05905}']
  { constructors } 

    {class} function init: DNLinearGradientBrush; overload;
    {class} function init(startColor: DNColor; endColor: DNColor; angle: Double): DNLinearGradientBrush; overload;
    {class} function init(startColor: DNColor; endColor: DNColor; startPoint: DDN.System.Windows.Common.DNPoint; endPoint: DDN.System.Windows.Common.DNPoint): DNLinearGradientBrush; overload;
    {class} function init(gradientStopCollection: DNGradientStopCollection): DNLinearGradientBrush; overload;
    {class} function init(gradientStopCollection: DNGradientStopCollection; angle: Double): DNLinearGradientBrush; overload;
    {class} function init(gradientStopCollection: DNGradientStopCollection; startPoint: DDN.System.Windows.Common.DNPoint; endPoint: DDN.System.Windows.Common.DNPoint): DNLinearGradientBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EndPointProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StartPointProperty;
    {class} property EndPointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EndPointProperty;

  end;

  [DNTypeName('System.Windows.Media.LinearGradientBrush')]
  DNLinearGradientBrush = interface(DNGradientBrush)
  ['{9D0E5026-69DD-3383-910E-C49E14AF2949}']
  { getters & setters } 

    function get_StartPoint: DDN.System.Windows.Common.DNPoint;
    procedure set_StartPoint(value: DDN.System.Windows.Common.DNPoint);
    function get_EndPoint: DDN.System.Windows.Common.DNPoint;
    procedure set_EndPoint(value: DDN.System.Windows.Common.DNPoint);
    function get_ColorInterpolationMode: DNColorInterpolationMode;
    procedure set_ColorInterpolationMode(value: DNColorInterpolationMode);
    function get_MappingMode: DNBrushMappingMode;
    procedure set_MappingMode(value: DNBrushMappingMode);
    function get_SpreadMethod: DNGradientSpreadMethod;
    procedure set_SpreadMethod(value: DNGradientSpreadMethod);
    function get_GradientStops: DNGradientStopCollection;
    procedure set_GradientStops(value: DNGradientStopCollection);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNLinearGradientBrush;
    function CloneCurrentValue: DNLinearGradientBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StartPoint: DDN.System.Windows.Common.DNPoint read get_StartPoint write set_StartPoint;
    property EndPoint: DDN.System.Windows.Common.DNPoint read get_EndPoint write set_EndPoint;
    property ColorInterpolationMode: DNColorInterpolationMode read get_ColorInterpolationMode write set_ColorInterpolationMode;
    property MappingMode: DNBrushMappingMode read get_MappingMode write set_MappingMode;
    property SpreadMethod: DNGradientSpreadMethod read get_SpreadMethod write set_SpreadMethod;
    property GradientStops: DNGradientStopCollection read get_GradientStops write set_GradientStops;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearGradientBrush = class(TDNGenericImport<DNLinearGradientBrushClass, DNLinearGradientBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRadialGradientBrushClass = interface(DNGradientBrushClass)
  ['{0A49346C-F495-5A99-B053-D9D895E47497}']
  { constructors } 

    {class} function init: DNRadialGradientBrush; overload;
    {class} function init(startColor: DNColor; endColor: DNColor): DNRadialGradientBrush; overload;
    {class} function init(gradientStopCollection: DNGradientStopCollection): DNRadialGradientBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_CenterProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GradientOriginProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property CenterProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterProperty;
    {class} property RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusXProperty;
    {class} property RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusYProperty;
    {class} property GradientOriginProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GradientOriginProperty;

  end;

  [DNTypeName('System.Windows.Media.RadialGradientBrush')]
  DNRadialGradientBrush = interface(DNGradientBrush)
  ['{6C671C7B-4D44-334F-9904-16E6E3BA65BC}']
  { getters & setters } 

    function get_Center: DDN.System.Windows.Common.DNPoint;
    procedure set_Center(value: DDN.System.Windows.Common.DNPoint);
    function get_RadiusX: Double;
    procedure set_RadiusX(value: Double);
    function get_RadiusY: Double;
    procedure set_RadiusY(value: Double);
    function get_GradientOrigin: DDN.System.Windows.Common.DNPoint;
    procedure set_GradientOrigin(value: DDN.System.Windows.Common.DNPoint);
    function get_ColorInterpolationMode: DNColorInterpolationMode;
    procedure set_ColorInterpolationMode(value: DNColorInterpolationMode);
    function get_MappingMode: DNBrushMappingMode;
    procedure set_MappingMode(value: DNBrushMappingMode);
    function get_SpreadMethod: DNGradientSpreadMethod;
    procedure set_SpreadMethod(value: DNGradientSpreadMethod);
    function get_GradientStops: DNGradientStopCollection;
    procedure set_GradientStops(value: DNGradientStopCollection);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRadialGradientBrush;
    function CloneCurrentValue: DNRadialGradientBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Center: DDN.System.Windows.Common.DNPoint read get_Center write set_Center;
    property RadiusX: Double read get_RadiusX write set_RadiusX;
    property RadiusY: Double read get_RadiusY write set_RadiusY;
    property GradientOrigin: DDN.System.Windows.Common.DNPoint read get_GradientOrigin write set_GradientOrigin;
    property ColorInterpolationMode: DNColorInterpolationMode read get_ColorInterpolationMode write set_ColorInterpolationMode;
    property MappingMode: DNBrushMappingMode read get_MappingMode write set_MappingMode;
    property SpreadMethod: DNGradientSpreadMethod read get_SpreadMethod write set_SpreadMethod;
    property GradientStops: DNGradientStopCollection read get_GradientStops write set_GradientStops;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRadialGradientBrush = class(TDNGenericImport<DNRadialGradientBrushClass, DNRadialGradientBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNSolidColorBrushClass = interface(DNBrushClass)
  ['{8B5A74A7-51FE-5278-BB21-83E4CB04CE3A}']
  { constructors } 

    {class} function init: DNSolidColorBrush; overload;
    {class} function init(color: DNColor): DNSolidColorBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;

  { static methods } 

    {class} function DeserializeFrom(reader: DDN.mscorlib.DNBinaryReader): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Windows.Media.SolidColorBrush')]
  DNSolidColorBrush = interface(DNBrush)
  ['{476C883D-7F67-3472-B350-15D5E524537A}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSolidColorBrush;
    function CloneCurrentValue: DNSolidColorBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSolidColorBrush = class(TDNGenericImport<DNSolidColorBrushClass, DNSolidColorBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTileBrushClass = interface(DNBrushClass)
  ['{0F96CA25-B68A-5F4F-A242-553FDCFDC93E}']
  { static fields getter & setter } 

   function __fakeFieldGet_ViewportUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ViewboxUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ViewportProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ViewboxProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_StretchProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TileModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AlignmentXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AlignmentYProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ViewportUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewportUnitsProperty;
    {class} property ViewboxUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewboxUnitsProperty;
    {class} property ViewportProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewportProperty;
    {class} property ViewboxProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewboxProperty;
    {class} property StretchProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StretchProperty;
    {class} property TileModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TileModeProperty;
    {class} property AlignmentXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AlignmentXProperty;
    {class} property AlignmentYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AlignmentYProperty;

  end;

  [DNTypeName('System.Windows.Media.TileBrush')]
  DNTileBrush = interface(DNBrush)
  ['{6CD74827-448A-394F-9D38-6DB34BAA261B}']
  { getters & setters } 

    function get_ViewportUnits: DNBrushMappingMode;
    procedure set_ViewportUnits(value: DNBrushMappingMode);
    function get_ViewboxUnits: DNBrushMappingMode;
    procedure set_ViewboxUnits(value: DNBrushMappingMode);
    function get_Viewport: DDN.System.Windows.Common.DNRect;
    procedure set_Viewport(value: DDN.System.Windows.Common.DNRect);
    function get_Viewbox: DDN.System.Windows.Common.DNRect;
    procedure set_Viewbox(value: DDN.System.Windows.Common.DNRect);
    function get_Stretch: DNStretch;
    procedure set_Stretch(value: DNStretch);
    function get_TileMode: DNTileMode;
    procedure set_TileMode(value: DNTileMode);
    function get_AlignmentX: DNAlignmentX;
    procedure set_AlignmentX(value: DNAlignmentX);
    function get_AlignmentY: DNAlignmentY;
    procedure set_AlignmentY(value: DNAlignmentY);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTileBrush;
    function CloneCurrentValue: DNTileBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ViewportUnits: DNBrushMappingMode read get_ViewportUnits write set_ViewportUnits;
    property ViewboxUnits: DNBrushMappingMode read get_ViewboxUnits write set_ViewboxUnits;
    property Viewport: DDN.System.Windows.Common.DNRect read get_Viewport write set_Viewport;
    property Viewbox: DDN.System.Windows.Common.DNRect read get_Viewbox write set_Viewbox;
    property Stretch: DNStretch read get_Stretch write set_Stretch;
    property TileMode: DNTileMode read get_TileMode write set_TileMode;
    property AlignmentX: DNAlignmentX read get_AlignmentX write set_AlignmentX;
    property AlignmentY: DNAlignmentY read get_AlignmentY write set_AlignmentY;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTileBrush = class(TDNGenericImport<DNTileBrushClass, DNTileBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingBrushClass = interface(DNTileBrushClass)
  ['{CA443BC1-7A7B-5185-AD1B-FCBF8C49F9DA}']
  { constructors } 

    {class} function init: DNDrawingBrush; overload;
    {class} function init(drawing: DNDrawing): DNDrawingBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DrawingProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property DrawingProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DrawingProperty;

  end;

  [DNTypeName('System.Windows.Media.DrawingBrush')]
  DNDrawingBrush = interface(DNTileBrush)
  ['{EA8B238E-D1E9-3E57-B7E6-E68D4C896126}']
  { getters & setters } 

    function get_Drawing: DNDrawing;
    procedure set_Drawing(value: DNDrawing);
    function get_ViewportUnits: DNBrushMappingMode;
    procedure set_ViewportUnits(value: DNBrushMappingMode);
    function get_ViewboxUnits: DNBrushMappingMode;
    procedure set_ViewboxUnits(value: DNBrushMappingMode);
    function get_Viewport: DDN.System.Windows.Common.DNRect;
    procedure set_Viewport(value: DDN.System.Windows.Common.DNRect);
    function get_Viewbox: DDN.System.Windows.Common.DNRect;
    procedure set_Viewbox(value: DDN.System.Windows.Common.DNRect);
    function get_Stretch: DNStretch;
    procedure set_Stretch(value: DNStretch);
    function get_TileMode: DNTileMode;
    procedure set_TileMode(value: DNTileMode);
    function get_AlignmentX: DNAlignmentX;
    procedure set_AlignmentX(value: DNAlignmentX);
    function get_AlignmentY: DNAlignmentY;
    procedure set_AlignmentY(value: DNAlignmentY);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDrawingBrush;
    function CloneCurrentValue: DNDrawingBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Drawing: DNDrawing read get_Drawing write set_Drawing;
    property ViewportUnits: DNBrushMappingMode read get_ViewportUnits write set_ViewportUnits;
    property ViewboxUnits: DNBrushMappingMode read get_ViewboxUnits write set_ViewboxUnits;
    property Viewport: DDN.System.Windows.Common.DNRect read get_Viewport write set_Viewport;
    property Viewbox: DDN.System.Windows.Common.DNRect read get_Viewbox write set_Viewbox;
    property Stretch: DNStretch read get_Stretch write set_Stretch;
    property TileMode: DNTileMode read get_TileMode write set_TileMode;
    property AlignmentX: DNAlignmentX read get_AlignmentX write set_AlignmentX;
    property AlignmentY: DNAlignmentY read get_AlignmentY write set_AlignmentY;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingBrush = class(TDNGenericImport<DNDrawingBrushClass, DNDrawingBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageBrushClass = interface(DNTileBrushClass)
  ['{20CE2D13-0E8C-5FD6-B75D-66DF315B0D73}']
  { constructors } 

    {class} function init: DNImageBrush; overload;
    {class} function init(image: DNImageSource): DNImageBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ImageSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ImageSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ImageSourceProperty;

  end;

  [DNTypeName('System.Windows.Media.ImageBrush')]
  DNImageBrush = interface(DNTileBrush)
  ['{A8691E5D-BF2A-3773-93B4-74E87A095F81}']
  { getters & setters } 

    function get_ImageSource: DNImageSource;
    procedure set_ImageSource(value: DNImageSource);
    function get_ViewportUnits: DNBrushMappingMode;
    procedure set_ViewportUnits(value: DNBrushMappingMode);
    function get_ViewboxUnits: DNBrushMappingMode;
    procedure set_ViewboxUnits(value: DNBrushMappingMode);
    function get_Viewport: DDN.System.Windows.Common.DNRect;
    procedure set_Viewport(value: DDN.System.Windows.Common.DNRect);
    function get_Viewbox: DDN.System.Windows.Common.DNRect;
    procedure set_Viewbox(value: DDN.System.Windows.Common.DNRect);
    function get_Stretch: DNStretch;
    procedure set_Stretch(value: DNStretch);
    function get_TileMode: DNTileMode;
    procedure set_TileMode(value: DNTileMode);
    function get_AlignmentX: DNAlignmentX;
    procedure set_AlignmentX(value: DNAlignmentX);
    function get_AlignmentY: DNAlignmentY;
    procedure set_AlignmentY(value: DNAlignmentY);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNImageBrush;
    function Clone: DNImageBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ImageSource: DNImageSource read get_ImageSource write set_ImageSource;
    property ViewportUnits: DNBrushMappingMode read get_ViewportUnits write set_ViewportUnits;
    property ViewboxUnits: DNBrushMappingMode read get_ViewboxUnits write set_ViewboxUnits;
    property Viewport: DDN.System.Windows.Common.DNRect read get_Viewport write set_Viewport;
    property Viewbox: DDN.System.Windows.Common.DNRect read get_Viewbox write set_Viewbox;
    property Stretch: DNStretch read get_Stretch write set_Stretch;
    property TileMode: DNTileMode read get_TileMode write set_TileMode;
    property AlignmentX: DNAlignmentX read get_AlignmentX write set_AlignmentX;
    property AlignmentY: DNAlignmentY read get_AlignmentY write set_AlignmentY;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNImageBrush = class(TDNGenericImport<DNImageBrushClass, DNImageBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualBrushClass = interface(DNTileBrushClass)
  ['{8C3B0B83-FADD-510F-AF1F-CD612D26B9D2}']
  { constructors } 

    {class} function init: DNVisualBrush; overload;
    {class} function init(visual: DNVisual): DNVisualBrush; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_VisualProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AutoLayoutContentProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property VisualProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_VisualProperty;
    {class} property AutoLayoutContentProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AutoLayoutContentProperty;

  end;

  [DNTypeName('System.Windows.Media.VisualBrush')]
  DNVisualBrush = interface(DNTileBrush)
  ['{693CC895-4425-3ACA-8AB4-B310D7F80029}']
  { getters & setters } 

    function get_Visual: DNVisual;
    procedure set_Visual(value: DNVisual);
    function get_AutoLayoutContent: Boolean;
    procedure set_AutoLayoutContent(value: Boolean);
    function get_ViewportUnits: DNBrushMappingMode;
    procedure set_ViewportUnits(value: DNBrushMappingMode);
    function get_ViewboxUnits: DNBrushMappingMode;
    procedure set_ViewboxUnits(value: DNBrushMappingMode);
    function get_Viewport: DDN.System.Windows.Common.DNRect;
    procedure set_Viewport(value: DDN.System.Windows.Common.DNRect);
    function get_Viewbox: DDN.System.Windows.Common.DNRect;
    procedure set_Viewbox(value: DDN.System.Windows.Common.DNRect);
    function get_Stretch: DNStretch;
    procedure set_Stretch(value: DNStretch);
    function get_TileMode: DNTileMode;
    procedure set_TileMode(value: DNTileMode);
    function get_AlignmentX: DNAlignmentX;
    procedure set_AlignmentX(value: DNAlignmentX);
    function get_AlignmentY: DNAlignmentY;
    procedure set_AlignmentY(value: DNAlignmentY);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_RelativeTransform: DNTransform;
    procedure set_RelativeTransform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNVisualBrush;
    function Clone: DNVisualBrush;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Visual: DNVisual read get_Visual write set_Visual;
    property AutoLayoutContent: Boolean read get_AutoLayoutContent write set_AutoLayoutContent;
    property ViewportUnits: DNBrushMappingMode read get_ViewportUnits write set_ViewportUnits;
    property ViewboxUnits: DNBrushMappingMode read get_ViewboxUnits write set_ViewboxUnits;
    property Viewport: DDN.System.Windows.Common.DNRect read get_Viewport write set_Viewport;
    property Viewbox: DDN.System.Windows.Common.DNRect read get_Viewbox write set_Viewbox;
    property Stretch: DNStretch read get_Stretch write set_Stretch;
    property TileMode: DNTileMode read get_TileMode write set_TileMode;
    property AlignmentX: DNAlignmentX read get_AlignmentX write set_AlignmentX;
    property AlignmentY: DNAlignmentY read get_AlignmentY write set_AlignmentY;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Transform: DNTransform read get_Transform write set_Transform;
    property RelativeTransform: DNTransform read get_RelativeTransform write set_RelativeTransform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVisualBrush = class(TDNGenericImport<DNVisualBrushClass, DNVisualBrush>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCacheModeClass = interface(DNAnimatableClass)
  ['{104A6004-7F95-5404-84B9-214188A22651}']
  end;

  [DNTypeName('System.Windows.Media.CacheMode')]
  DNCacheMode = interface(DNAnimatable)
  ['{049FCAFD-1AE4-3A90-BB1B-BCED576B9F86}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCacheMode;
    function CloneCurrentValue: DNCacheMode;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCacheMode = class(TDNGenericImport<DNCacheModeClass, DNCacheMode>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBitmapCacheClass = interface(DNCacheModeClass)
  ['{C03B6622-09A5-5318-A443-3FFAADC10E99}']
  { constructors } 

    {class} function init: DNBitmapCache; overload;
    {class} function init(renderAtScale: Double): DNBitmapCache; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_RenderAtScaleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SnapsToDevicePixelsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EnableClearTypeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property RenderAtScaleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RenderAtScaleProperty;
    {class} property SnapsToDevicePixelsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SnapsToDevicePixelsProperty;
    {class} property EnableClearTypeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EnableClearTypeProperty;

  end;

  [DNTypeName('System.Windows.Media.BitmapCache')]
  DNBitmapCache = interface(DNCacheMode)
  ['{E404F59B-E543-301D-BC83-AC6FBCCA18AF}']
  { getters & setters } 

    function get_RenderAtScale: Double;
    procedure set_RenderAtScale(value: Double);
    function get_SnapsToDevicePixels: Boolean;
    procedure set_SnapsToDevicePixels(value: Boolean);
    function get_EnableClearType: Boolean;
    procedure set_EnableClearType(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapCache;
    function CloneCurrentValue: DNBitmapCache;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RenderAtScale: Double read get_RenderAtScale write set_RenderAtScale;
    property SnapsToDevicePixels: Boolean read get_SnapsToDevicePixels write set_SnapsToDevicePixels;
    property EnableClearType: Boolean read get_EnableClearType write set_EnableClearType;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapCache = class(TDNGenericImport<DNBitmapCacheClass, DNBitmapCache>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDashStyleClass = interface(DNAnimatableClass)
  ['{EA96CA26-A35F-56B1-8AAE-7311430EB8B1}']
  { constructors } 

    {class} function init: DNDashStyle; overload;
    {class} function init(dashes: DDN.mscorlib.DNIEnumerable<Double>; offset: Double): DNDashStyle; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_OffsetProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DashesProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property OffsetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OffsetProperty;
    {class} property DashesProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DashesProperty;

  end;

  [DNTypeName('System.Windows.Media.DashStyle')]
  DNDashStyle = interface(DNAnimatable)
  ['{1094D971-1115-3BF5-9E8C-81AFB7A8E0CB}']
  { getters & setters } 

    function get_Offset: Double;
    procedure set_Offset(value: Double);
    function get_Dashes: DNDoubleCollection;
    procedure set_Dashes(value: DNDoubleCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDashStyle;
    function CloneCurrentValue: DNDashStyle;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Offset: Double read get_Offset write set_Offset;
    property Dashes: DNDoubleCollection read get_Dashes write set_Dashes;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDashStyle = class(TDNGenericImport<DNDashStyleClass, DNDashStyle>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingClass = interface(DNAnimatableClass)
  ['{5697036B-60AD-58EB-8FE4-89A1AD9BAA7C}']
  end;

  [DNTypeName('System.Windows.Media.Drawing')]
  DNDrawing = interface(DNAnimatable)
  ['{12A408FA-B483-3BD2-9711-FDAD56252500}']
  { getters & setters } 

    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNDrawing;
    function Clone: DNDrawing;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawing = class(TDNGenericImport<DNDrawingClass, DNDrawing>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingGroupClass = interface(DNDrawingClass)
  ['{FC64BAA9-8731-5B0D-963E-322A43E0099B}']
  { constructors } 

    {class} function init: DNDrawingGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ClipGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityMaskProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GuidelineSetProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectInputProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;
    {class} property ClipGeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ClipGeometryProperty;
    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property OpacityMaskProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityMaskProperty;
    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;
    {class} property GuidelineSetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GuidelineSetProperty;
    {class} property BitmapEffectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapEffectProperty;
    {class} property BitmapEffectInputProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapEffectInputProperty;

  end;

  [DNTypeName('System.Windows.Media.DrawingGroup')]
  DNDrawingGroup = interface(DNDrawing)
  ['{17FC7A27-E4D6-3515-8BD6-786EB2DB2FF5}']
  { getters & setters } 

    function get_Children: DNDrawingCollection;
    procedure set_Children(value: DNDrawingCollection);
    function get_ClipGeometry: DNGeometry;
    procedure set_ClipGeometry(value: DNGeometry);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_GuidelineSet: DNGuidelineSet;
    procedure set_GuidelineSet(value: DNGuidelineSet);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Open: DNDrawingContext;
    function CloneCurrentValue: DNDrawingGroup;
    function Append: DNDrawingContext;
    function Clone: DNDrawingGroup;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNDrawingCollection read get_Children write set_Children;
    property ClipGeometry: DNGeometry read get_ClipGeometry write set_ClipGeometry;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property Transform: DNTransform read get_Transform write set_Transform;
    property GuidelineSet: DNGuidelineSet read get_GuidelineSet write set_GuidelineSet;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingGroup = class(TDNGenericImport<DNDrawingGroupClass, DNDrawingGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryDrawingClass = interface(DNDrawingClass)
  ['{9B30E6F0-2AAD-5F3A-9195-09A6F8D53060}']
  { constructors } 

    {class} function init: DNGeometryDrawing; overload;
    {class} function init(brush: DNBrush; pen: DNPen; geometry: DNGeometry): DNGeometryDrawing; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_BrushProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PenProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property BrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BrushProperty;
    {class} property PenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PenProperty;
    {class} property GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GeometryProperty;

  end;

  [DNTypeName('System.Windows.Media.GeometryDrawing')]
  DNGeometryDrawing = interface(DNDrawing)
  ['{1BFBEC79-C3FF-3B35-B816-C6E338FC8E3C}']
  { getters & setters } 

    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_Pen: DNPen;
    procedure set_Pen(value: DNPen);
    function get_Geometry: DNGeometry;
    procedure set_Geometry(value: DNGeometry);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometryDrawing;
    function CloneCurrentValue: DNGeometryDrawing;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Brush: DNBrush read get_Brush write set_Brush;
    property Pen: DNPen read get_Pen write set_Pen;
    property Geometry: DNGeometry read get_Geometry write set_Geometry;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometryDrawing = class(TDNGenericImport<DNGeometryDrawingClass, DNGeometryDrawing>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGlyphRunDrawingClass = interface(DNDrawingClass)
  ['{266F3860-9598-58EF-8C88-F259AC4E42E0}']
  { constructors } 

    {class} function init: DNGlyphRunDrawing; overload;
    {class} function init(foregroundBrush: DNBrush; glyphRun: DNGlyphRun): DNGlyphRunDrawing; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_GlyphRunProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ForegroundBrushProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GlyphRunProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GlyphRunProperty;
    {class} property ForegroundBrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ForegroundBrushProperty;

  end;

  [DNTypeName('System.Windows.Media.GlyphRunDrawing')]
  DNGlyphRunDrawing = interface(DNDrawing)
  ['{59839FFB-65F0-3F13-B6E7-726F6EEB138B}']
  { getters & setters } 

    function get_GlyphRun: DNGlyphRun;
    procedure set_GlyphRun(value: DNGlyphRun);
    function get_ForegroundBrush: DNBrush;
    procedure set_ForegroundBrush(value: DNBrush);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGlyphRunDrawing;
    function CloneCurrentValue: DNGlyphRunDrawing;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlyphRun: DNGlyphRun read get_GlyphRun write set_GlyphRun;
    property ForegroundBrush: DNBrush read get_ForegroundBrush write set_ForegroundBrush;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGlyphRunDrawing = class(TDNGenericImport<DNGlyphRunDrawingClass, DNGlyphRunDrawing>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageDrawingClass = interface(DNDrawingClass)
  ['{692BF488-3A2D-5E1E-9AB2-4AEA75C138E7}']
  { constructors } 

    {class} function init: DNImageDrawing; overload;
    {class} function init(imageSource: DNImageSource; rect: DDN.System.Windows.Common.DNRect): DNImageDrawing; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ImageSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RectProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ImageSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ImageSourceProperty;
    {class} property RectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RectProperty;

  end;

  [DNTypeName('System.Windows.Media.ImageDrawing')]
  DNImageDrawing = interface(DNDrawing)
  ['{127D9232-83C5-364B-A4E1-54597EC4AA64}']
  { getters & setters } 

    function get_ImageSource: DNImageSource;
    procedure set_ImageSource(value: DNImageSource);
    function get_Rect: DDN.System.Windows.Common.DNRect;
    procedure set_Rect(value: DDN.System.Windows.Common.DNRect);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNImageDrawing;
    function CloneCurrentValue: DNImageDrawing;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageSource: DNImageSource read get_ImageSource write set_ImageSource;
    property Rect: DDN.System.Windows.Common.DNRect read get_Rect write set_Rect;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNImageDrawing = class(TDNGenericImport<DNImageDrawingClass, DNImageDrawing>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVideoDrawingClass = interface(DNDrawingClass)
  ['{8A6C9885-4A4F-5171-8EAE-11B45BCBBAD1}']
  { constructors } 

    {class} function init: DNVideoDrawing;

  { static fields getter & setter } 

   function __fakeFieldGet_PlayerProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RectProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PlayerProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PlayerProperty;
    {class} property RectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RectProperty;

  end;

  [DNTypeName('System.Windows.Media.VideoDrawing')]
  DNVideoDrawing = interface(DNDrawing)
  ['{980B1D3F-7185-3CB1-977F-0D97BE27240D}']
  { getters & setters } 

    function get_Player: DNMediaPlayer;
    procedure set_Player(value: DNMediaPlayer);
    function get_Rect: DDN.System.Windows.Common.DNRect;
    procedure set_Rect(value: DDN.System.Windows.Common.DNRect);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVideoDrawing;
    function CloneCurrentValue: DNVideoDrawing;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Player: DNMediaPlayer read get_Player write set_Player;
    property Rect: DDN.System.Windows.Common.DNRect read get_Rect write set_Rect;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVideoDrawing = class(TDNGenericImport<DNVideoDrawingClass, DNVideoDrawing>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingCollectionClass = interface(DNAnimatableClass)
  ['{3F52C5DC-A06F-5C55-99B5-C5C4BE50C459}']
  { constructors } 

    {class} function init: DNDrawingCollection; overload;
    {class} function init(capacity: Int32): DNDrawingCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNDrawing>): DNDrawingCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.DrawingCollection')]
  DNDrawingCollection = interface(DNAnimatable)
  ['{4EC30FB4-E305-3D7A-8D80-999EF4734635}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDrawingCollection;
    function CloneCurrentValue: DNDrawingCollection;
    function &Contains(value: DNDrawing): Boolean;
    function IndexOf(value: DNDrawing): Int32;
    procedure Insert(index: Int32; value: DNDrawing);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNDrawing>; index: Int32);
    function GetEnumerator: DNMedia_DrawingCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingCollection = class(TDNGenericImport<DNDrawingCollectionClass, DNDrawingCollection>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectClass = interface(DNAnimatableClass)
  ['{EBE1C1EB-CEA9-56E8-AFDD-35C79C5DAB1D}']
  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffect')]
  DNBitmapEffect = interface(DNAnimatable)
  ['{1040B749-8E2A-3B33-BD11-41D0252EAC13}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    function Clone: DNBitmapEffect;
    function CloneCurrentValue: DNBitmapEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffect = class(TDNGenericImport<DNBitmapEffectClass, DNBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBevelBitmapEffectClass = interface(DNBitmapEffectClass)
  ['{EC858C73-00C8-5FF6-815B-22C2237ECFBF}']
  { constructors } 

    {class} function init: DNBevelBitmapEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_BevelWidthProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ReliefProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LightAngleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SmoothnessProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EdgeProfileProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property BevelWidthProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BevelWidthProperty;
    {class} property ReliefProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ReliefProperty;
    {class} property LightAngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LightAngleProperty;
    {class} property SmoothnessProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SmoothnessProperty;
    {class} property EdgeProfileProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EdgeProfileProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.BevelBitmapEffect')]
  DNBevelBitmapEffect = interface(DNBitmapEffect)
  ['{1ECE7C67-335B-38C7-AEF8-BEF8579FE605}']
  { getters & setters } 

    function get_BevelWidth: Double;
    procedure set_BevelWidth(value: Double);
    function get_Relief: Double;
    procedure set_Relief(value: Double);
    function get_LightAngle: Double;
    procedure set_LightAngle(value: Double);
    function get_Smoothness: Double;
    procedure set_Smoothness(value: Double);
    function get_EdgeProfile: DNEdgeProfile;
    procedure set_EdgeProfile(value: DNEdgeProfile);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBevelBitmapEffect;
    function CloneCurrentValue: DNBevelBitmapEffect;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BevelWidth: Double read get_BevelWidth write set_BevelWidth;
    property Relief: Double read get_Relief write set_Relief;
    property LightAngle: Double read get_LightAngle write set_LightAngle;
    property Smoothness: Double read get_Smoothness write set_Smoothness;
    property EdgeProfile: DNEdgeProfile read get_EdgeProfile write set_EdgeProfile;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBevelBitmapEffect = class(TDNGenericImport<DNBevelBitmapEffectClass, DNBevelBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectGroupClass = interface(DNBitmapEffectClass)
  ['{53FF8042-354B-5CB9-8FBB-6A046BA76B59}']
  { constructors } 

    {class} function init: DNBitmapEffectGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffectGroup')]
  DNBitmapEffectGroup = interface(DNBitmapEffect)
  ['{4EFC09E1-08C2-372B-864C-070159634805}']
  { getters & setters } 

    function get_Children: DNBitmapEffectCollection;
    procedure set_Children(value: DNBitmapEffectCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapEffectGroup;
    function CloneCurrentValue: DNBitmapEffectGroup;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNBitmapEffectCollection read get_Children write set_Children;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffectGroup = class(TDNGenericImport<DNBitmapEffectGroupClass, DNBitmapEffectGroup>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBlurBitmapEffectClass = interface(DNBitmapEffectClass)
  ['{B8196D67-A1C7-5B69-BE0F-F10AF66D8184}']
  { constructors } 

    {class} function init: DNBlurBitmapEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_RadiusProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_KernelTypeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property RadiusProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusProperty;
    {class} property KernelTypeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KernelTypeProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.BlurBitmapEffect')]
  DNBlurBitmapEffect = interface(DNBitmapEffect)
  ['{9118F7E4-2DC7-36AC-939C-918C070EAEC3}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_KernelType: DNKernelType;
    procedure set_KernelType(value: DNKernelType);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBlurBitmapEffect;
    function CloneCurrentValue: DNBlurBitmapEffect;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property KernelType: DNKernelType read get_KernelType write set_KernelType;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBlurBitmapEffect = class(TDNGenericImport<DNBlurBitmapEffectClass, DNBlurBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNDropShadowBitmapEffectClass = interface(DNBitmapEffectClass)
  ['{B88A38AE-C11F-5D7C-BB45-D73B966C2E93}']
  { constructors } 

    {class} function init: DNDropShadowBitmapEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_ShadowDepthProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_NoiseProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SoftnessProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ShadowDepthProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ShadowDepthProperty;
    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DirectionProperty;
    {class} property NoiseProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NoiseProperty;
    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property SoftnessProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SoftnessProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.DropShadowBitmapEffect')]
  DNDropShadowBitmapEffect = interface(DNBitmapEffect)
  ['{45FFE0DD-6F79-3148-A4E7-AF3AF6B904E0}']
  { getters & setters } 

    function get_ShadowDepth: Double;
    procedure set_ShadowDepth(value: Double);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Direction: Double;
    procedure set_Direction(value: Double);
    function get_Noise: Double;
    procedure set_Noise(value: Double);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Softness: Double;
    procedure set_Softness(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDropShadowBitmapEffect;
    function CloneCurrentValue: DNDropShadowBitmapEffect;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShadowDepth: Double read get_ShadowDepth write set_ShadowDepth;
    property Color: DNColor read get_Color write set_Color;
    property Direction: Double read get_Direction write set_Direction;
    property Noise: Double read get_Noise write set_Noise;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Softness: Double read get_Softness write set_Softness;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDropShadowBitmapEffect = class(TDNGenericImport<DNDropShadowBitmapEffectClass, DNDropShadowBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNEmbossBitmapEffectClass = interface(DNBitmapEffectClass)
  ['{912BCC9D-C567-53B1-8B5E-6BAC37AD019F}']
  { constructors } 

    {class} function init: DNEmbossBitmapEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_LightAngleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ReliefProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property LightAngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LightAngleProperty;
    {class} property ReliefProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ReliefProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.EmbossBitmapEffect')]
  DNEmbossBitmapEffect = interface(DNBitmapEffect)
  ['{DC5019EB-0EC7-3A43-ACF7-E83B87107425}']
  { getters & setters } 

    function get_LightAngle: Double;
    procedure set_LightAngle(value: Double);
    function get_Relief: Double;
    procedure set_Relief(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNEmbossBitmapEffect;
    function CloneCurrentValue: DNEmbossBitmapEffect;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LightAngle: Double read get_LightAngle write set_LightAngle;
    property Relief: Double read get_Relief write set_Relief;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEmbossBitmapEffect = class(TDNGenericImport<DNEmbossBitmapEffectClass, DNEmbossBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNOuterGlowBitmapEffectClass = interface(DNBitmapEffectClass)
  ['{68F64E3C-FD18-5967-8F5A-27D5F1731D42}']
  { constructors } 

    {class} function init: DNOuterGlowBitmapEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_GlowColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GlowSizeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_NoiseProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GlowColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GlowColorProperty;
    {class} property GlowSizeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GlowSizeProperty;
    {class} property NoiseProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NoiseProperty;
    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.OuterGlowBitmapEffect')]
  DNOuterGlowBitmapEffect = interface(DNBitmapEffect)
  ['{17BFE3C8-14A1-334A-B521-81BDA095D7EC}']
  { getters & setters } 

    function get_GlowColor: DNColor;
    procedure set_GlowColor(value: DNColor);
    function get_GlowSize: Double;
    procedure set_GlowSize(value: Double);
    function get_Noise: Double;
    procedure set_Noise(value: Double);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNOuterGlowBitmapEffect;
    function CloneCurrentValue: DNOuterGlowBitmapEffect;
    function GetOutput(input: DNBitmapEffectInput): DNBitmapSource;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlowColor: DNColor read get_GlowColor write set_GlowColor;
    property GlowSize: Double read get_GlowSize write set_GlowSize;
    property Noise: Double read get_Noise write set_Noise;
    property Opacity: Double read get_Opacity write set_Opacity;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNOuterGlowBitmapEffect = class(TDNGenericImport<DNOuterGlowBitmapEffectClass, DNOuterGlowBitmapEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectCollectionClass = interface(DNAnimatableClass)
  ['{9EA86D3B-2D40-594F-BF5E-F3FEC8C9625F}']
  { constructors } 

    {class} function init: DNBitmapEffectCollection; overload;
    {class} function init(capacity: Int32): DNBitmapEffectCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNBitmapEffect>): DNBitmapEffectCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffectCollection')]
  DNBitmapEffectCollection = interface(DNAnimatable)
  ['{375A243A-BDC1-3884-B163-A8E76617741B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapEffectCollection;
    function CloneCurrentValue: DNBitmapEffectCollection;
    function &Contains(value: DNBitmapEffect): Boolean;
    function IndexOf(value: DNBitmapEffect): Int32;
    procedure Insert(index: Int32; value: DNBitmapEffect);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNBitmapEffect>; index: Int32);
    function GetEnumerator: DNEffects_BitmapEffectCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffectCollection = class(TDNGenericImport<DNBitmapEffectCollectionClass, DNBitmapEffectCollection>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBitmapEffectInputClass = interface(DNAnimatableClass)
  ['{3FE6A869-6489-53C3-B958-4F7543DB1C09}']
  { static getter & setter } 

    {class} function get_ContextInputSource: DNBitmapSource;

  { constructors } 

    {class} function init: DNBitmapEffectInput; overload;
    {class} function init(input: DNBitmapSource): DNBitmapEffectInput; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InputProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreaToApplyEffectUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreaToApplyEffectProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property InputProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_InputProperty;
    {class} property AreaToApplyEffectUnitsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreaToApplyEffectUnitsProperty;
    {class} property AreaToApplyEffectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreaToApplyEffectProperty;

  { static propertys } 

    {class} property ContextInputSource: DNBitmapSource read get_ContextInputSource;
  end;

  [DNTypeName('System.Windows.Media.Effects.BitmapEffectInput')]
  DNBitmapEffectInput = interface(DNAnimatable)
  ['{E2EB304D-FAA9-3E1B-B1FD-37755DF24EA5}']
  { getters & setters } 

    function get_Input: DNBitmapSource;
    procedure set_Input(value: DNBitmapSource);
    function get_AreaToApplyEffectUnits: DNBrushMappingMode;
    procedure set_AreaToApplyEffectUnits(value: DNBrushMappingMode);
    function get_AreaToApplyEffect: DDN.System.Windows.Common.DNRect;
    procedure set_AreaToApplyEffect(value: DDN.System.Windows.Common.DNRect);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ShouldSerializeInput: Boolean;
    function Clone: DNBitmapEffectInput;
    function CloneCurrentValue: DNBitmapEffectInput;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNBitmapSource read get_Input write set_Input;
    property AreaToApplyEffectUnits: DNBrushMappingMode read get_AreaToApplyEffectUnits write set_AreaToApplyEffectUnits;
    property AreaToApplyEffect: DDN.System.Windows.Common.DNRect read get_AreaToApplyEffect write set_AreaToApplyEffect;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEffectInput = class(TDNGenericImport<DNBitmapEffectInputClass, DNBitmapEffectInput>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNEffectClass = interface(DNAnimatableClass)
  ['{F0C20F8A-17D2-5096-8771-CD121E3A340A}']
  { static getter & setter } 

    {class} function get_ImplicitInput: DNBrush;

  { static propertys } 

    {class} property ImplicitInput: DNBrush read get_ImplicitInput;
  end;

  [DNTypeName('System.Windows.Media.Effects.Effect')]
  DNEffect = interface(DNAnimatable)
  ['{A6D18183-5E9E-362B-B3D9-EAE2FE03B1E2}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNEffect;
    function CloneCurrentValue: DNEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEffect = class(TDNGenericImport<DNEffectClass, DNEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNBlurEffectClass = interface(DNEffectClass)
  ['{1382E535-E480-59F3-ADD8-DC58E750E98E}']
  { constructors } 

    {class} function init: DNBlurEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_RadiusProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_KernelTypeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RenderingBiasProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property RadiusProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusProperty;
    {class} property KernelTypeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KernelTypeProperty;
    {class} property RenderingBiasProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RenderingBiasProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.BlurEffect')]
  DNBlurEffect = interface(DNEffect)
  ['{50628442-56F2-3124-AE6C-0E0928737574}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_KernelType: DNKernelType;
    procedure set_KernelType(value: DNKernelType);
    function get_RenderingBias: DNRenderingBias;
    procedure set_RenderingBias(value: DNRenderingBias);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBlurEffect;
    function CloneCurrentValue: DNBlurEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property KernelType: DNKernelType read get_KernelType write set_KernelType;
    property RenderingBias: DNRenderingBias read get_RenderingBias write set_RenderingBias;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBlurEffect = class(TDNGenericImport<DNBlurEffectClass, DNBlurEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNDropShadowEffectClass = interface(DNEffectClass)
  ['{6008EA59-6FF1-581A-B4CA-CFDAD852EC59}']
  { constructors } 

    {class} function init: DNDropShadowEffect;

  { static fields getter & setter } 

   function __fakeFieldGet_ShadowDepthProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BlurRadiusProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RenderingBiasProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ShadowDepthProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ShadowDepthProperty;
    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DirectionProperty;
    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property BlurRadiusProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BlurRadiusProperty;
    {class} property RenderingBiasProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RenderingBiasProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.DropShadowEffect')]
  DNDropShadowEffect = interface(DNEffect)
  ['{FDB4CDB9-F6C9-3361-A14F-E66DF57EB59C}']
  { getters & setters } 

    function get_ShadowDepth: Double;
    procedure set_ShadowDepth(value: Double);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Direction: Double;
    procedure set_Direction(value: Double);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_RenderingBias: DNRenderingBias;
    procedure set_RenderingBias(value: DNRenderingBias);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDropShadowEffect;
    function CloneCurrentValue: DNDropShadowEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShadowDepth: Double read get_ShadowDepth write set_ShadowDepth;
    property Color: DNColor read get_Color write set_Color;
    property Direction: Double read get_Direction write set_Direction;
    property Opacity: Double read get_Opacity write set_Opacity;
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property RenderingBias: DNRenderingBias read get_RenderingBias write set_RenderingBias;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDropShadowEffect = class(TDNGenericImport<DNDropShadowEffectClass, DNDropShadowEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNShaderEffectClass = interface(DNEffectClass)
  ['{BD89CB57-3191-5B0A-9B5B-29DD082550D5}']
  end;

  [DNTypeName('System.Windows.Media.Effects.ShaderEffect')]
  DNShaderEffect = interface(DNEffect)
  ['{36C4707E-172B-36DD-BC95-59C507141542}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNShaderEffect;
    function CloneCurrentValue: DNShaderEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNShaderEffect = class(TDNGenericImport<DNShaderEffectClass, DNShaderEffect>) end;

  //-------------namespace: System.Windows.Media.Effects----------------
  DNPixelShaderClass = interface(DNAnimatableClass)
  ['{76C4BD5C-28ED-5260-A290-6711450CDC0B}']
  { constructors } 

    {class} function init: DNPixelShader;

  { static fields getter & setter } 

   function __fakeFieldGet_UriSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ShaderRenderModeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property UriSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UriSourceProperty;
    {class} property ShaderRenderModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ShaderRenderModeProperty;

  end;

  [DNTypeName('System.Windows.Media.Effects.PixelShader')]
  DNPixelShader = interface(DNAnimatable)
  ['{585A631D-2EC4-3507-ADB2-95343F0473FE}']
  { getters & setters } 

    function get_UriSource: DDN.System.Windows.Common.DNUri;
    procedure set_UriSource(value: DDN.System.Windows.Common.DNUri);
    function get_ShaderRenderMode: DNShaderRenderMode;
    procedure set_ShaderRenderMode(value: DNShaderRenderMode);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    {class} procedure add_InvalidPixelShaderEncountered(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_InvalidPixelShaderEncountered(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SetStreamSource(source: DDN.mscorlib.DNStream);
    function Clone: DNPixelShader;
    function CloneCurrentValue: DNPixelShader;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UriSource: DDN.System.Windows.Common.DNUri read get_UriSource write set_UriSource;
    property ShaderRenderMode: DNShaderRenderMode read get_ShaderRenderMode write set_ShaderRenderMode;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPixelShader = class(TDNGenericImport<DNPixelShaderClass, DNPixelShader>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeneralTransformClass = interface(DNAnimatableClass)
  ['{B308C8E0-DFD5-594F-8F06-82E8CC72548C}']
  end;

  [DNTypeName('System.Windows.Media.GeneralTransform')]
  DNGeneralTransform = interface(DNAnimatable)
  ['{69850262-B8A6-3393-B8D0-48A672E10AAA}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Clone: DNGeneralTransform;
    function CloneCurrentValue: DNGeneralTransform;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform = class(TDNGenericImport<DNGeneralTransformClass, DNGeneralTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeneralTransformGroupClass = interface(DNGeneralTransformClass)
  ['{743B2EA2-2688-5391-94DB-BB37B90730B5}']
  { constructors } 

    {class} function init: DNGeneralTransformGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.GeneralTransformGroup')]
  DNGeneralTransformGroup = interface(DNGeneralTransform)
  ['{A5F696B8-38ED-32D0-B5AD-37D90A2BA73A}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform;
    function get_Children: DNGeneralTransformCollection;
    procedure set_Children(value: DNGeneralTransformCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Clone: DNGeneralTransformGroup;
    function CloneCurrentValue: DNGeneralTransformGroup;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform read get_Inverse;
    property Children: DNGeneralTransformCollection read get_Children write set_Children;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransformGroup = class(TDNGenericImport<DNGeneralTransformGroupClass, DNGeneralTransformGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTransformClass = interface(DNGeneralTransformClass)
  ['{53E4131D-CA00-55F7-96CA-48D1CD21244B}']
  { static getter & setter } 

    {class} function get_Identity: DNTransform;

  { static methods } 

    {class} function Parse(source: string): DNTransform;

  { static propertys } 

    {class} property Identity: DNTransform read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Transform')]
  DNTransform = interface(DNGeneralTransform)
  ['{741ABB34-3B1F-3A53-9278-B372D93DAC83}']
  { getters & setters } 

    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTransform;
    function CloneCurrentValue: DNTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransform = class(TDNGenericImport<DNTransformClass, DNTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixTransformClass = interface(DNTransformClass)
  ['{34FA999F-B6CD-5527-8507-C903679E6F57}']
  { constructors } 

    {class} function init: DNMatrixTransform; overload;
    {class} function init(m11: Double; m12: Double; m21: Double; m22: Double; offsetX: Double; offsetY: Double): DNMatrixTransform; overload;
    {class} function init(matrix: DDN.System.Windows.Common.DNMatrix): DNMatrixTransform; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MatrixProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property MatrixProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MatrixProperty;

  end;

  [DNTypeName('System.Windows.Media.MatrixTransform')]
  DNMatrixTransform = interface(DNTransform)
  ['{0C1E4BB4-8C9E-31CB-B8BF-B32DA7BEBB12}']
  { getters & setters } 

    function get_Matrix: DDN.System.Windows.Common.DNMatrix;
    procedure set_Matrix(value: DDN.System.Windows.Common.DNMatrix);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixTransform;
    function CloneCurrentValue: DNMatrixTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Matrix: DDN.System.Windows.Common.DNMatrix read get_Matrix write set_Matrix;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixTransform = class(TDNGenericImport<DNMatrixTransformClass, DNMatrixTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRotateTransformClass = interface(DNTransformClass)
  ['{F0640307-DD15-5FF3-BE9B-766BCECBB121}']
  { constructors } 

    {class} function init: DNRotateTransform; overload;
    {class} function init(angle: Double): DNRotateTransform; overload;
    {class} function init(angle: Double; centerX: Double; centerY: Double): DNRotateTransform; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_AngleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AngleProperty;
    {class} property CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterXProperty;
    {class} property CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterYProperty;

  end;

  [DNTypeName('System.Windows.Media.RotateTransform')]
  DNRotateTransform = interface(DNTransform)
  ['{96DD4102-874C-3D7C-BFD2-50CE889CBC86}']
  { getters & setters } 

    function get_Angle: Double;
    procedure set_Angle(value: Double);
    function get_CenterX: Double;
    procedure set_CenterX(value: Double);
    function get_CenterY: Double;
    procedure set_CenterY(value: Double);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotateTransform;
    function CloneCurrentValue: DNRotateTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Angle: Double read get_Angle write set_Angle;
    property CenterX: Double read get_CenterX write set_CenterX;
    property CenterY: Double read get_CenterY write set_CenterY;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotateTransform = class(TDNGenericImport<DNRotateTransformClass, DNRotateTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNScaleTransformClass = interface(DNTransformClass)
  ['{D0BA8711-CD37-59ED-916C-A381174F5A1D}']
  { constructors } 

    {class} function init: DNScaleTransform; overload;
    {class} function init(scaleX: Double; scaleY: Double): DNScaleTransform; overload;
    {class} function init(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double): DNScaleTransform; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ScaleXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ScaleYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ScaleXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ScaleXProperty;
    {class} property ScaleYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ScaleYProperty;
    {class} property CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterXProperty;
    {class} property CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterYProperty;

  end;

  [DNTypeName('System.Windows.Media.ScaleTransform')]
  DNScaleTransform = interface(DNTransform)
  ['{A0C35584-D997-3A9B-9CD9-AF0FDDF37786}']
  { getters & setters } 

    function get_ScaleX: Double;
    procedure set_ScaleX(value: Double);
    function get_ScaleY: Double;
    procedure set_ScaleY(value: Double);
    function get_CenterX: Double;
    procedure set_CenterX(value: Double);
    function get_CenterY: Double;
    procedure set_CenterY(value: Double);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNScaleTransform;
    function CloneCurrentValue: DNScaleTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ScaleX: Double read get_ScaleX write set_ScaleX;
    property ScaleY: Double read get_ScaleY write set_ScaleY;
    property CenterX: Double read get_CenterX write set_CenterX;
    property CenterY: Double read get_CenterY write set_CenterY;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNScaleTransform = class(TDNGenericImport<DNScaleTransformClass, DNScaleTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNSkewTransformClass = interface(DNTransformClass)
  ['{835069BC-0257-5713-AA6C-9CCF0F106BDA}']
  { constructors } 

    {class} function init: DNSkewTransform; overload;
    {class} function init(angleX: Double; angleY: Double): DNSkewTransform; overload;
    {class} function init(angleX: Double; angleY: Double; centerX: Double; centerY: Double): DNSkewTransform; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_AngleXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AngleYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AngleXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AngleXProperty;
    {class} property AngleYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AngleYProperty;
    {class} property CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterXProperty;
    {class} property CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterYProperty;

  end;

  [DNTypeName('System.Windows.Media.SkewTransform')]
  DNSkewTransform = interface(DNTransform)
  ['{FC2AED34-985A-3CB5-94E9-DF88FA2B440F}']
  { getters & setters } 

    function get_AngleX: Double;
    procedure set_AngleX(value: Double);
    function get_AngleY: Double;
    procedure set_AngleY(value: Double);
    function get_CenterX: Double;
    procedure set_CenterX(value: Double);
    function get_CenterY: Double;
    procedure set_CenterY(value: Double);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSkewTransform;
    function CloneCurrentValue: DNSkewTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AngleX: Double read get_AngleX write set_AngleX;
    property AngleY: Double read get_AngleY write set_AngleY;
    property CenterX: Double read get_CenterX write set_CenterX;
    property CenterY: Double read get_CenterY write set_CenterY;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSkewTransform = class(TDNGenericImport<DNSkewTransformClass, DNSkewTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTransformGroupClass = interface(DNTransformClass)
  ['{F7CA30F6-121D-5615-B12C-88DB33FCC771}']
  { constructors } 

    {class} function init: DNTransformGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.TransformGroup')]
  DNTransformGroup = interface(DNTransform)
  ['{6ADCA658-D23E-328E-917A-5E37A4D3F473}']
  { getters & setters } 

    function get_Children: DNTransformCollection;
    procedure set_Children(value: DNTransformCollection);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNTransformGroup;
    function Clone: DNTransformGroup;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Children: DNTransformCollection read get_Children write set_Children;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransformGroup = class(TDNGenericImport<DNTransformGroupClass, DNTransformGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTranslateTransformClass = interface(DNTransformClass)
  ['{9229EF9D-AD31-5DA4-AA85-5138725F9973}']
  { constructors } 

    {class} function init: DNTranslateTransform; overload;
    {class} function init(offsetX: Double; offsetY: Double): DNTranslateTransform; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_XProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_YProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property XProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_XProperty;
    {class} property YProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_YProperty;

  end;

  [DNTypeName('System.Windows.Media.TranslateTransform')]
  DNTranslateTransform = interface(DNTransform)
  ['{860D70C1-3257-3B05-B331-B2CD8AE1F4D8}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    function get_Inverse: DNGeneralTransform;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTranslateTransform;
    function CloneCurrentValue: DNTranslateTransform;
    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function TransformBounds(rect: DDN.System.Windows.Common.DNRect): DDN.System.Windows.Common.DNRect;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value;
    property Inverse: DNGeneralTransform read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTranslateTransform = class(TDNGenericImport<DNTranslateTransformClass, DNTranslateTransform>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeneralTransformCollectionClass = interface(DNAnimatableClass)
  ['{08A5DC6A-D861-570C-AB63-5D3E4B2C8EF3}']
  { constructors } 

    {class} function init: DNGeneralTransformCollection; overload;
    {class} function init(capacity: Int32): DNGeneralTransformCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNGeneralTransform>): DNGeneralTransformCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.GeneralTransformCollection')]
  DNGeneralTransformCollection = interface(DNAnimatable)
  ['{4484187E-7F70-3C2D-A306-70EEE35A4591}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeneralTransformCollection;
    function CloneCurrentValue: DNGeneralTransformCollection;
    function &Contains(value: DNGeneralTransform): Boolean;
    function IndexOf(value: DNGeneralTransform): Int32;
    procedure Insert(index: Int32; value: DNGeneralTransform);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNGeneralTransform>; index: Int32);
    function GetEnumerator: DNMedia_GeneralTransformCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransformCollection = class(TDNGenericImport<DNGeneralTransformCollectionClass, DNGeneralTransformCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryClass = interface(DNAnimatableClass)
  ['{2B6443AD-0AFF-54FB-9455-61F2B0A24348}']
  { static getter & setter } 

    {class} function get_Empty: DNGeometry;
    {class} function get_StandardFlatteningTolerance: Double;

  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  { static methods } 

    {class} function Combine(geometry1: DNGeometry; geometry2: DNGeometry; mode: DNGeometryCombineMode; transform: DNTransform; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    {class} function Combine(geometry1: DNGeometry; geometry2: DNGeometry; mode: DNGeometryCombineMode; transform: DNTransform): DNPathGeometry; overload;
    {class} function Parse(source: string): DNGeometry;

  { static propertys } 

    {class} property Empty: DNGeometry read get_Empty;
    {class} property StandardFlatteningTolerance: Double read get_StandardFlatteningTolerance;
  end;

  [DNTypeName('System.Windows.Media.Geometry')]
  DNGeometry = interface(DNAnimatable)
  ['{F1421B1F-467C-31E8-8DCF-A3B9AF494C6A}']
  { getters & setters } 

    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometry;
    function CloneCurrentValue: DNGeometry;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Transform: DNTransform read get_Transform write set_Transform;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometry = class(TDNGenericImport<DNGeometryClass, DNGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCombinedGeometryClass = interface(DNGeometryClass)
  ['{CDC272D4-F031-5C80-830B-492DF76E6E0F}']
  { constructors } 

    {class} function init: DNCombinedGeometry; overload;
    {class} function init(geometry1: DNGeometry; geometry2: DNGeometry): DNCombinedGeometry; overload;
    {class} function init(geometryCombineMode: DNGeometryCombineMode; geometry1: DNGeometry; geometry2: DNGeometry): DNCombinedGeometry; overload;
    {class} function init(geometryCombineMode: DNGeometryCombineMode; geometry1: DNGeometry; geometry2: DNGeometry; transform: DNTransform): DNCombinedGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_GeometryCombineModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_Geometry1Property: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_Geometry2Property: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GeometryCombineModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GeometryCombineModeProperty;
    {class} property Geometry1Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Geometry1Property;
    {class} property Geometry2Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Geometry2Property;

  end;

  [DNTypeName('System.Windows.Media.CombinedGeometry')]
  DNCombinedGeometry = interface(DNGeometry)
  ['{AD7F6E0F-61CB-3705-B311-3FC30B24D0DC}']
  { getters & setters } 

    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_GeometryCombineMode: DNGeometryCombineMode;
    procedure set_GeometryCombineMode(value: DNGeometryCombineMode);
    function get_Geometry1: DNGeometry;
    procedure set_Geometry1(value: DNGeometry);
    function get_Geometry2: DNGeometry;
    procedure set_Geometry2(value: DNGeometry);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function MayHaveCurves: Boolean;
    function CloneCurrentValue: DNCombinedGeometry;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function IsEmpty: Boolean;
    function Clone: DNCombinedGeometry;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property GeometryCombineMode: DNGeometryCombineMode read get_GeometryCombineMode write set_GeometryCombineMode;
    property Geometry1: DNGeometry read get_Geometry1 write set_Geometry1;
    property Geometry2: DNGeometry read get_Geometry2 write set_Geometry2;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCombinedGeometry = class(TDNGenericImport<DNCombinedGeometryClass, DNCombinedGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNEllipseGeometryClass = interface(DNGeometryClass)
  ['{4A91C9DF-EBCA-57E4-89E1-C703B08A2D66}']
  { constructors } 

    {class} function init: DNEllipseGeometry; overload;
    {class} function init(rect: DDN.System.Windows.Common.DNRect): DNEllipseGeometry; overload;
    {class} function init(center: DDN.System.Windows.Common.DNPoint; radiusX: Double; radiusY: Double): DNEllipseGeometry; overload;
    {class} function init(center: DDN.System.Windows.Common.DNPoint; radiusX: Double; radiusY: Double; transform: DNTransform): DNEllipseGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusXProperty;
    {class} property RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusYProperty;
    {class} property CenterProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterProperty;

  end;

  [DNTypeName('System.Windows.Media.EllipseGeometry')]
  DNEllipseGeometry = interface(DNGeometry)
  ['{05811E52-7442-3D99-AB8A-378CD8A17A8D}']
  { getters & setters } 

    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_RadiusX: Double;
    procedure set_RadiusX(value: Double);
    function get_RadiusY: Double;
    procedure set_RadiusY(value: Double);
    function get_Center: DDN.System.Windows.Common.DNPoint;
    procedure set_Center(value: DDN.System.Windows.Common.DNPoint);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function MayHaveCurves: Boolean;
    function CloneCurrentValue: DNEllipseGeometry;
    function IsEmpty: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function Clone: DNEllipseGeometry;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property RadiusX: Double read get_RadiusX write set_RadiusX;
    property RadiusY: Double read get_RadiusY write set_RadiusY;
    property Center: DDN.System.Windows.Common.DNPoint read get_Center write set_Center;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEllipseGeometry = class(TDNGenericImport<DNEllipseGeometryClass, DNEllipseGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryGroupClass = interface(DNGeometryClass)
  ['{D400A992-2C55-5FE6-9550-AE0A4EA02AF5}']
  { constructors } 

    {class} function init: DNGeometryGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FillRuleProperty;
    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.GeometryGroup')]
  DNGeometryGroup = interface(DNGeometry)
  ['{80B05D3B-C8D2-3997-8F7F-D7311CAF681F}']
  { getters & setters } 

    function get_FillRule: DNFillRule;
    procedure set_FillRule(value: DNFillRule);
    function get_Children: DNGeometryCollection;
    procedure set_Children(value: DNGeometryCollection);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometryGroup;
    function CloneCurrentValue: DNGeometryGroup;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FillRule: DNFillRule read get_FillRule write set_FillRule;
    property Children: DNGeometryCollection read get_Children write set_Children;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometryGroup = class(TDNGenericImport<DNGeometryGroupClass, DNGeometryGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNLineGeometryClass = interface(DNGeometryClass)
  ['{A754D15E-7932-5E6F-B368-AD96EEE2F0E9}']
  { constructors } 

    {class} function init: DNLineGeometry; overload;
    {class} function init(startPoint: DDN.System.Windows.Common.DNPoint; endPoint: DDN.System.Windows.Common.DNPoint): DNLineGeometry; overload;
    {class} function init(startPoint: DDN.System.Windows.Common.DNPoint; endPoint: DDN.System.Windows.Common.DNPoint; transform: DNTransform): DNLineGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EndPointProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StartPointProperty;
    {class} property EndPointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EndPointProperty;

  end;

  [DNTypeName('System.Windows.Media.LineGeometry')]
  DNLineGeometry = interface(DNGeometry)
  ['{89607064-7F28-39AD-B4E9-E1579686BE48}']
  { getters & setters } 

    function get_StartPoint: DDN.System.Windows.Common.DNPoint;
    procedure set_StartPoint(value: DDN.System.Windows.Common.DNPoint);
    function get_EndPoint: DDN.System.Windows.Common.DNPoint;
    procedure set_EndPoint(value: DDN.System.Windows.Common.DNPoint);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNLineGeometry;
    function CloneCurrentValue: DNLineGeometry;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StartPoint: DDN.System.Windows.Common.DNPoint read get_StartPoint write set_StartPoint;
    property EndPoint: DDN.System.Windows.Common.DNPoint read get_EndPoint write set_EndPoint;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLineGeometry = class(TDNGenericImport<DNLineGeometryClass, DNLineGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathGeometryClass = interface(DNGeometryClass)
  ['{C53F7A7E-8CE8-5CE0-9C9A-C18D238014DC}']
  { constructors } 

    {class} function init: DNPathGeometry; overload;
    {class} function init(figures: DDN.mscorlib.DNIEnumerable<DNPathFigure>): DNPathGeometry; overload;
    {class} function init(figures: DDN.mscorlib.DNIEnumerable<DNPathFigure>; fillRule: DNFillRule; transform: DNTransform): DNPathGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FiguresProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FillRuleProperty;
    {class} property FiguresProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FiguresProperty;

  { static methods } 

    {class} function CreateFromGeometry(geometry: DNGeometry): DNPathGeometry;

  end;

  [DNTypeName('System.Windows.Media.PathGeometry')]
  DNPathGeometry = interface(DNGeometry)
  ['{2FA421AD-F697-3C75-B872-BB382377BB68}']
  { getters & setters } 

    function get_FillRule: DNFillRule;
    procedure set_FillRule(value: DNFillRule);
    function get_Figures: DNPathFigureCollection;
    procedure set_Figures(value: DNPathFigureCollection);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathGeometry;
    function CloneCurrentValue: DNPathGeometry;
    procedure AddGeometry(geometry: DNGeometry);
    procedure GetPointAtFractionLength(progress: Double; out point: DDN.System.Windows.Common.DNPoint; out tangent: DDN.System.Windows.Common.DNPoint);
    procedure Clear;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FillRule: DNFillRule read get_FillRule write set_FillRule;
    property Figures: DNPathFigureCollection read get_Figures write set_Figures;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPathGeometry = class(TDNGenericImport<DNPathGeometryClass, DNPathGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNRectangleGeometryClass = interface(DNGeometryClass)
  ['{7773097D-B1D4-533A-9D1F-E4B593D0BDBE}']
  { constructors } 

    {class} function init: DNRectangleGeometry; overload;
    {class} function init(rect: DDN.System.Windows.Common.DNRect): DNRectangleGeometry; overload;
    {class} function init(rect: DDN.System.Windows.Common.DNRect; radiusX: Double; radiusY: Double): DNRectangleGeometry; overload;
    {class} function init(rect: DDN.System.Windows.Common.DNRect; radiusX: Double; radiusY: Double; transform: DNTransform): DNRectangleGeometry; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RectProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property RadiusXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusXProperty;
    {class} property RadiusYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RadiusYProperty;
    {class} property RectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RectProperty;

  end;

  [DNTypeName('System.Windows.Media.RectangleGeometry')]
  DNRectangleGeometry = interface(DNGeometry)
  ['{E8DB775E-7EA3-31B0-8C3E-409289AB7116}']
  { getters & setters } 

    function get_RadiusX: Double;
    procedure set_RadiusX(value: Double);
    function get_RadiusY: Double;
    procedure set_RadiusY(value: Double);
    function get_Rect: DDN.System.Windows.Common.DNRect;
    procedure set_Rect(value: DDN.System.Windows.Common.DNRect);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRectangleGeometry;
    function CloneCurrentValue: DNRectangleGeometry;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RadiusX: Double read get_RadiusX write set_RadiusX;
    property RadiusY: Double read get_RadiusY write set_RadiusY;
    property Rect: DDN.System.Windows.Common.DNRect read get_Rect write set_Rect;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectangleGeometry = class(TDNGenericImport<DNRectangleGeometryClass, DNRectangleGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNStreamGeometryClass = interface(DNGeometryClass)
  ['{DFCDE32A-B351-5620-BB61-A1E910371EDA}']
  { constructors } 

    {class} function init: DNStreamGeometry;

  { static fields getter & setter } 

   function __fakeFieldGet_FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FillRuleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FillRuleProperty;

  end;

  [DNTypeName('System.Windows.Media.StreamGeometry')]
  DNStreamGeometry = interface(DNGeometry)
  ['{D6122E8B-7C0F-39BD-AA06-D30DD7B2C329}']
  { getters & setters } 

    function get_FillRule: DNFillRule;
    procedure set_FillRule(value: DNFillRule);
    function get_Bounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNStreamGeometry;
    function IsEmpty: Boolean;
    function MayHaveCurves: Boolean;
    function Clone: DNStreamGeometry;
    function Open: DNStreamGeometryContext;
    procedure Clear;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetRenderBounds(pen: DNPen; tolerance: Double; &type: DNToleranceType): DDN.System.Windows.Common.DNRect; overload;
    function GetRenderBounds(pen: DNPen): DDN.System.Windows.Common.DNRect; overload;
    function ShouldSerializeTransform: Boolean;
    function GetArea(tolerance: Double; &type: DNToleranceType): Double; overload;
    function GetArea: Double; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function StrokeContains(pen: DNPen; hitPoint: DDN.System.Windows.Common.DNPoint): Boolean; overload;
    function FillContains(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): Boolean; overload;
    function FillContains(geometry: DNGeometry): Boolean; overload;
    function FillContainsWithDetail(geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function FillContainsWithDetail(geometry: DNGeometry): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry; tolerance: Double; &type: DNToleranceType): DNIntersectionDetail; overload;
    function StrokeContainsWithDetail(pen: DNPen; geometry: DNGeometry): DNIntersectionDetail; overload;
    function GetFlattenedPathGeometry: DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen): DNPathGeometry; overload;
    function GetOutlinedPathGeometry: DNPathGeometry; overload;
    function GetFlattenedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetWidenedPathGeometry(pen: DNPen; tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    function GetOutlinedPathGeometry(tolerance: Double; &type: DNToleranceType): DNPathGeometry; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FillRule: DNFillRule read get_FillRule write set_FillRule;
    property Bounds: DDN.System.Windows.Common.DNRect read get_Bounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStreamGeometry = class(TDNGenericImport<DNStreamGeometryClass, DNStreamGeometry>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGeometryCollectionClass = interface(DNAnimatableClass)
  ['{B6AB7A39-BBA1-5D98-8C56-8DF3D8946BE4}']
  { constructors } 

    {class} function init: DNGeometryCollection; overload;
    {class} function init(capacity: Int32): DNGeometryCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNGeometry>): DNGeometryCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.GeometryCollection')]
  DNGeometryCollection = interface(DNAnimatable)
  ['{273B2A1B-C3AF-3342-9708-06934C4C8D0A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometryCollection;
    function CloneCurrentValue: DNGeometryCollection;
    function &Contains(value: DNGeometry): Boolean;
    function IndexOf(value: DNGeometry): Int32;
    procedure Insert(index: Int32; value: DNGeometry);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNGeometry>; index: Int32);
    function GetEnumerator: DNMedia_GeometryCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometryCollection = class(TDNGenericImport<DNGeometryCollectionClass, DNGeometryCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGradientStopClass = interface(DNAnimatableClass)
  ['{1D1F4157-91E1-5A6D-82B0-D8008E6B69B9}']
  { constructors } 

    {class} function init: DNGradientStop; overload;
    {class} function init(color: DNColor; offset: Double): DNGradientStop; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OffsetProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property OffsetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OffsetProperty;

  end;

  [DNTypeName('System.Windows.Media.GradientStop')]
  DNGradientStop = interface(DNAnimatable)
  ['{4707502F-A00F-3BBB-B9EC-922844286C55}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Offset: Double;
    procedure set_Offset(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGradientStop;
    function CloneCurrentValue: DNGradientStop;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Offset: Double read get_Offset write set_Offset;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGradientStop = class(TDNGenericImport<DNGradientStopClass, DNGradientStop>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGradientStopCollectionClass = interface(DNAnimatableClass)
  ['{8B85EC12-231F-5038-BD7F-01F21C6EFE5A}']
  { constructors } 

    {class} function init: DNGradientStopCollection; overload;
    {class} function init(capacity: Int32): DNGradientStopCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNGradientStop>): DNGradientStopCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNGradientStopCollection;

  end;

  [DNTypeName('System.Windows.Media.GradientStopCollection')]
  DNGradientStopCollection = interface(DNAnimatable)
  ['{87DC6E18-616D-3B49-BF19-70CDBF2615BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGradientStopCollection;
    function CloneCurrentValue: DNGradientStopCollection;
    function &Contains(value: DNGradientStop): Boolean;
    function IndexOf(value: DNGradientStop): Int32;
    procedure Insert(index: Int32; value: DNGradientStop);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNGradientStop>; index: Int32);
    function GetEnumerator: DNMedia_GradientStopCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGradientStopCollection = class(TDNGenericImport<DNGradientStopCollectionClass, DNGradientStopCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNGuidelineSetClass = interface(DNAnimatableClass)
  ['{66D84254-E1F2-5827-B016-C5C232EBCDF9}']
  { constructors } 

    {class} function init: DNGuidelineSet; overload;
    {class} function init(guidelinesX: TArray<Double>; guidelinesY: TArray<Double>): DNGuidelineSet; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_GuidelinesXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GuidelinesYProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GuidelinesXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GuidelinesXProperty;
    {class} property GuidelinesYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GuidelinesYProperty;

  end;

  [DNTypeName('System.Windows.Media.GuidelineSet')]
  DNGuidelineSet = interface(DNAnimatable)
  ['{B304C5C7-EE52-334D-AB3C-D29A32639007}']
  { getters & setters } 

    function get_GuidelinesX: DNDoubleCollection;
    procedure set_GuidelinesX(value: DNDoubleCollection);
    function get_GuidelinesY: DNDoubleCollection;
    procedure set_GuidelinesY(value: DNDoubleCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGuidelineSet;
    function CloneCurrentValue: DNGuidelineSet;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GuidelinesX: DNDoubleCollection read get_GuidelinesX write set_GuidelinesX;
    property GuidelinesY: DNDoubleCollection read get_GuidelinesY write set_GuidelinesY;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGuidelineSet = class(TDNGenericImport<DNGuidelineSetClass, DNGuidelineSet>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageSourceClass = interface(DNAnimatableClass)
  ['{905EBAB0-528A-52AD-BB41-FAFD1DC96A02}']
  end;

  [DNTypeName('System.Windows.Media.ImageSource')]
  DNImageSource = interface(DNAnimatable)
  ['{ACD31F23-A250-35DC-865C-41A054C36954}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNImageSource;
    function CloneCurrentValue: DNImageSource;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNImageSource = class(TDNGenericImport<DNImageSourceClass, DNImageSource>) end;

  //-------------namespace: System.Windows.Interop----------------
  DND3DImageClass = interface(DNImageSourceClass)
  ['{D653D8DA-DEB8-5C94-B430-216B363B69C3}']
  { constructors } 

    {class} function init: DND3DImage; overload;
    {class} function init(dpiX: Double; dpiY: Double): DND3DImage; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_IsFrontBufferAvailableProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property IsFrontBufferAvailableProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFrontBufferAvailableProperty;

  end;

  [DNTypeName('System.Windows.Interop.D3DImage')]
  DND3DImage = interface(DNImageSource)
  ['{ADC01A01-59E7-3EE6-8D10-4AFE8704DB33}']
  { getters & setters } 

    function get_IsFrontBufferAvailable: Boolean;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_IsFrontBufferAvailableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsFrontBufferAvailableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SetBackBuffer(backBufferType: DND3DResourceType; backBuffer: IntPtr); overload;
    procedure SetBackBuffer(backBufferType: DND3DResourceType; backBuffer: IntPtr; enableSoftwareFallback: Boolean); overload;
    procedure Lock;
    function TryLock(timeout: DNDuration): Boolean;
    procedure Unlock;
    function Clone: DND3DImage;
    function CloneCurrentValue: DND3DImage;
    procedure AddDirtyRect(dirtyRect: DDN.System.Windows.Common.DNInt32Rect);
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsFrontBufferAvailable: Boolean read get_IsFrontBufferAvailable;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDND3DImage = class(TDNGenericImport<DND3DImageClass, DND3DImage>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingImageClass = interface(DNImageSourceClass)
  ['{B621E516-938E-5674-AB32-43501CA0FE7E}']
  { constructors } 

    {class} function init: DNDrawingImage; overload;
    {class} function init(drawing: DNDrawing): DNDrawingImage; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DrawingProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property DrawingProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DrawingProperty;

  end;

  [DNTypeName('System.Windows.Media.DrawingImage')]
  DNDrawingImage = interface(DNImageSource)
  ['{FB33F00C-4174-3939-81DC-712CF8923FF1}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_Drawing: DNDrawing;
    procedure set_Drawing(value: DNDrawing);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNDrawingImage;
    function Clone: DNDrawingImage;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property Drawing: DNDrawing read get_Drawing write set_Drawing;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingImage = class(TDNGenericImport<DNDrawingImageClass, DNDrawingImage>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapSourceClass = interface(DNImageSourceClass)
  ['{665FFF33-F714-5E7F-9D68-129697FE8480}']
  { static methods } 

    {class} function Create(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat; palette: DNBitmapPalette; pixels: DDN.mscorlib.DNArray; stride: Int32): DNBitmapSource; overload;
    {class} function Create(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat; palette: DNBitmapPalette; buffer: IntPtr; bufferSize: Int32; stride: Int32): DNBitmapSource; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapSource')]
  DNBitmapSource = interface(DNImageSource)
  ['{2C85DC8C-C6F4-3894-8BE0-9FF2A5B547CD}']
  { getters & setters } 

    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapSource;
    function CloneCurrentValue: DNBitmapSource;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapSource = class(TDNGenericImport<DNBitmapSourceClass, DNBitmapSource>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNInteropBitmapClass = interface(DNBitmapSourceClass)
  ['{B9D17049-7784-5F53-A8AC-4AF5FD2375A8}']
  end;

  [DNTypeName('System.Windows.Interop.InteropBitmap')]
  DNInteropBitmap = interface(DNBitmapSource)
  ['{1E4FA11E-9613-3F47-B3E2-D05FA622B1D9}']
  { getters & setters } 

    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Invalidate;
    function Clone: DNBitmapSource;
    function CloneCurrentValue: DNBitmapSource;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInteropBitmap = class(TDNGenericImport<DNInteropBitmapClass, DNInteropBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapFrameClass = interface(DNBitmapSourceClass)
  ['{04D1E615-33CC-5C4D-8DD8-7A8CCECC28EA}']
  { static methods } 

    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri): DNBitmapFrame; overload;
    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri; uriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy): DNBitmapFrame; overload;
    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBitmapFrame; overload;
    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption; uriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy): DNBitmapFrame; overload;
    {class} function Create(bitmapStream: DDN.mscorlib.DNStream): DNBitmapFrame; overload;
    {class} function Create(source: DNBitmapSource; thumbnail: DNBitmapSource): DNBitmapFrame; overload;
    {class} function Create(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBitmapFrame; overload;
    {class} function Create(source: DNBitmapSource): DNBitmapFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapFrame')]
  DNBitmapFrame = interface(DNBitmapSource)
  ['{2FFF267B-DA89-37DC-BBCE-00562A5B77EE}']
  { getters & setters } 

    function get_BaseUri: DDN.System.Windows.Common.DNUri;
    procedure set_BaseUri(value: DDN.System.Windows.Common.DNUri);
    function get_Thumbnail: DNBitmapSource;
    function get_Decoder: DNBitmapDecoder;
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function Clone: DNBitmapSource;
    function CloneCurrentValue: DNBitmapSource;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BaseUri: DDN.System.Windows.Common.DNUri read get_BaseUri write set_BaseUri;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Decoder: DNBitmapDecoder read get_Decoder;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapFrame = class(TDNGenericImport<DNBitmapFrameClass, DNBitmapFrame>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapImageClass = interface(DNBitmapSourceClass)
  ['{8EDD1682-120E-54B6-A905-E2A6351C69F7}']
  { constructors } 

    {class} function init: DNBitmapImage; overload;
    {class} function init(uriSource: DDN.System.Windows.Common.DNUri): DNBitmapImage; overload;
    {class} function init(uriSource: DDN.System.Windows.Common.DNUri; uriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy): DNBitmapImage; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_UriCachePolicyProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UriSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_StreamSourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DecodePixelWidthProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DecodePixelHeightProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RotationProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SourceRectProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CreateOptionsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CacheOptionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property UriCachePolicyProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UriCachePolicyProperty;
    {class} property UriSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UriSourceProperty;
    {class} property StreamSourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StreamSourceProperty;
    {class} property DecodePixelWidthProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DecodePixelWidthProperty;
    {class} property DecodePixelHeightProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DecodePixelHeightProperty;
    {class} property RotationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RotationProperty;
    {class} property SourceRectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceRectProperty;
    {class} property CreateOptionsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CreateOptionsProperty;
    {class} property CacheOptionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CacheOptionProperty;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapImage')]
  DNBitmapImage = interface(DNBitmapSource)
  ['{506A40EC-119C-396D-992F-F0DB241685D0}']
  { getters & setters } 

    function get_BaseUri: DDN.System.Windows.Common.DNUri;
    procedure set_BaseUri(value: DDN.System.Windows.Common.DNUri);
    function get_IsDownloading: Boolean;
    function get_Metadata: DNImageMetadata;
    function get_UriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy;
    procedure set_UriCachePolicy(value: DDN.System.Windows.Common.DNRequestCachePolicy);
    function get_UriSource: DDN.System.Windows.Common.DNUri;
    procedure set_UriSource(value: DDN.System.Windows.Common.DNUri);
    function get_StreamSource: DDN.mscorlib.DNStream;
    procedure set_StreamSource(value: DDN.mscorlib.DNStream);
    function get_DecodePixelWidth: Int32;
    procedure set_DecodePixelWidth(value: Int32);
    function get_DecodePixelHeight: Int32;
    procedure set_DecodePixelHeight(value: Int32);
    function get_Rotation: DNRotation;
    procedure set_Rotation(value: DNRotation);
    function get_SourceRect: DDN.System.Windows.Common.DNInt32Rect;
    procedure set_SourceRect(value: DDN.System.Windows.Common.DNInt32Rect);
    function get_CreateOptions: DNBitmapCreateOptions;
    procedure set_CreateOptions(value: DNBitmapCreateOptions);
    function get_CacheOption: DNBitmapCacheOption;
    procedure set_CacheOption(value: DNBitmapCacheOption);
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_Width: Double;
    function get_Height: Double;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function Clone: DNBitmapImage;
    function CloneCurrentValue: DNBitmapImage;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BaseUri: DDN.System.Windows.Common.DNUri read get_BaseUri write set_BaseUri;
    property IsDownloading: Boolean read get_IsDownloading;
    property Metadata: DNImageMetadata read get_Metadata;
    property UriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy read get_UriCachePolicy write set_UriCachePolicy;
    property UriSource: DDN.System.Windows.Common.DNUri read get_UriSource write set_UriSource;
    property StreamSource: DDN.mscorlib.DNStream read get_StreamSource write set_StreamSource;
    property DecodePixelWidth: Int32 read get_DecodePixelWidth write set_DecodePixelWidth;
    property DecodePixelHeight: Int32 read get_DecodePixelHeight write set_DecodePixelHeight;
    property Rotation: DNRotation read get_Rotation write set_Rotation;
    property SourceRect: DDN.System.Windows.Common.DNInt32Rect read get_SourceRect write set_SourceRect;
    property CreateOptions: DNBitmapCreateOptions read get_CreateOptions write set_CreateOptions;
    property CacheOption: DNBitmapCacheOption read get_CacheOption write set_CacheOption;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapImage = class(TDNGenericImport<DNBitmapImageClass, DNBitmapImage>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNCachedBitmapClass = interface(DNBitmapSourceClass)
  ['{1296C4F5-5D1E-5DFE-A0AD-C915C7ED7D84}']
  { constructors } 

    {class} function init(source: DNBitmapSource; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNCachedBitmap;

  end;

  [DNTypeName('System.Windows.Media.Imaging.CachedBitmap')]
  DNCachedBitmap = interface(DNBitmapSource)
  ['{B948A63A-D9AD-3D6C-A71C-FECF315BB665}']
  { getters & setters } 

    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCachedBitmap;
    function CloneCurrentValue: DNCachedBitmap;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCachedBitmap = class(TDNGenericImport<DNCachedBitmapClass, DNCachedBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNColorConvertedBitmapClass = interface(DNBitmapSourceClass)
  ['{1893E721-7534-596C-9CC3-C1251061F94B}']
  { constructors } 

    {class} function init: DNColorConvertedBitmap; overload;
    {class} function init(source: DNBitmapSource; sourceColorContext: DNColorContext; destinationColorContext: DNColorContext; format: DNPixelFormat): DNColorConvertedBitmap; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SourceColorContextProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DestinationColorContextProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DestinationFormatProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;
    {class} property SourceColorContextProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceColorContextProperty;
    {class} property DestinationColorContextProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DestinationColorContextProperty;
    {class} property DestinationFormatProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DestinationFormatProperty;

  end;

  [DNTypeName('System.Windows.Media.Imaging.ColorConvertedBitmap')]
  DNColorConvertedBitmap = interface(DNBitmapSource)
  ['{87A93C6A-376C-3404-90B3-9A5A8424C708}']
  { getters & setters } 

    function get_Source: DNBitmapSource;
    procedure set_Source(value: DNBitmapSource);
    function get_SourceColorContext: DNColorContext;
    procedure set_SourceColorContext(value: DNColorContext);
    function get_DestinationColorContext: DNColorContext;
    procedure set_DestinationColorContext(value: DNColorContext);
    function get_DestinationFormat: DNPixelFormat;
    procedure set_DestinationFormat(value: DNPixelFormat);
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function Clone: DNColorConvertedBitmap;
    function CloneCurrentValue: DNColorConvertedBitmap;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DNBitmapSource read get_Source write set_Source;
    property SourceColorContext: DNColorContext read get_SourceColorContext write set_SourceColorContext;
    property DestinationColorContext: DNColorContext read get_DestinationColorContext write set_DestinationColorContext;
    property DestinationFormat: DNPixelFormat read get_DestinationFormat write set_DestinationFormat;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorConvertedBitmap = class(TDNGenericImport<DNColorConvertedBitmapClass, DNColorConvertedBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNCroppedBitmapClass = interface(DNBitmapSourceClass)
  ['{FF829434-027D-59F8-B23C-42CABEBDB77F}']
  { constructors } 

    {class} function init: DNCroppedBitmap; overload;
    {class} function init(source: DNBitmapSource; sourceRect: DDN.System.Windows.Common.DNInt32Rect): DNCroppedBitmap; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SourceRectProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;
    {class} property SourceRectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceRectProperty;

  end;

  [DNTypeName('System.Windows.Media.Imaging.CroppedBitmap')]
  DNCroppedBitmap = interface(DNBitmapSource)
  ['{72771740-D2CE-3588-AA10-A78AF39139B6}']
  { getters & setters } 

    function get_Source: DNBitmapSource;
    procedure set_Source(value: DNBitmapSource);
    function get_SourceRect: DDN.System.Windows.Common.DNInt32Rect;
    procedure set_SourceRect(value: DDN.System.Windows.Common.DNInt32Rect);
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function Clone: DNCroppedBitmap;
    function CloneCurrentValue: DNCroppedBitmap;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DNBitmapSource read get_Source write set_Source;
    property SourceRect: DDN.System.Windows.Common.DNInt32Rect read get_SourceRect write set_SourceRect;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCroppedBitmap = class(TDNGenericImport<DNCroppedBitmapClass, DNCroppedBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNFormatConvertedBitmapClass = interface(DNBitmapSourceClass)
  ['{183AFA83-1598-596B-A43B-9BB67B20E8B1}']
  { constructors } 

    {class} function init: DNFormatConvertedBitmap; overload;
    {class} function init(source: DNBitmapSource; destinationFormat: DNPixelFormat; destinationPalette: DNBitmapPalette; alphaThreshold: Double): DNFormatConvertedBitmap; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DestinationFormatProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DestinationPaletteProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AlphaThresholdProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;
    {class} property DestinationFormatProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DestinationFormatProperty;
    {class} property DestinationPaletteProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DestinationPaletteProperty;
    {class} property AlphaThresholdProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AlphaThresholdProperty;

  end;

  [DNTypeName('System.Windows.Media.Imaging.FormatConvertedBitmap')]
  DNFormatConvertedBitmap = interface(DNBitmapSource)
  ['{B32B52A6-1430-3478-A33A-0814FDD41F6B}']
  { getters & setters } 

    function get_Source: DNBitmapSource;
    procedure set_Source(value: DNBitmapSource);
    function get_DestinationFormat: DNPixelFormat;
    procedure set_DestinationFormat(value: DNPixelFormat);
    function get_DestinationPalette: DNBitmapPalette;
    procedure set_DestinationPalette(value: DNBitmapPalette);
    function get_AlphaThreshold: Double;
    procedure set_AlphaThreshold(value: Double);
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function Clone: DNFormatConvertedBitmap;
    function CloneCurrentValue: DNFormatConvertedBitmap;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DNBitmapSource read get_Source write set_Source;
    property DestinationFormat: DNPixelFormat read get_DestinationFormat write set_DestinationFormat;
    property DestinationPalette: DNBitmapPalette read get_DestinationPalette write set_DestinationPalette;
    property AlphaThreshold: Double read get_AlphaThreshold write set_AlphaThreshold;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNFormatConvertedBitmap = class(TDNGenericImport<DNFormatConvertedBitmapClass, DNFormatConvertedBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNRenderTargetBitmapClass = interface(DNBitmapSourceClass)
  ['{1656CB21-AEBB-5EA5-B9B3-5840AB40978A}']
  { constructors } 

    {class} function init(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat): DNRenderTargetBitmap;

  end;

  [DNTypeName('System.Windows.Media.Imaging.RenderTargetBitmap')]
  DNRenderTargetBitmap = interface(DNBitmapSource)
  ['{4C43F74E-BDB0-3236-8714-EF62F16027AB}']
  { getters & setters } 

    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Render(visual: DNVisual);
    procedure Clear;
    function Clone: DNBitmapSource;
    function CloneCurrentValue: DNBitmapSource;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRenderTargetBitmap = class(TDNGenericImport<DNRenderTargetBitmapClass, DNRenderTargetBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNTransformedBitmapClass = interface(DNBitmapSourceClass)
  ['{E6170759-74D8-5F63-88BB-124C171B8535}']
  { constructors } 

    {class} function init: DNTransformedBitmap; overload;
    {class} function init(source: DNBitmapSource; newTransform: DNTransform): DNTransformedBitmap; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SourceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property SourceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SourceProperty;
    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Imaging.TransformedBitmap')]
  DNTransformedBitmap = interface(DNBitmapSource)
  ['{68E3C097-328B-3ABA-8717-1D4CE2606049}']
  { getters & setters } 

    function get_Source: DNBitmapSource;
    procedure set_Source(value: DNBitmapSource);
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function Clone: DNTransformedBitmap;
    function CloneCurrentValue: DNTransformedBitmap;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Source: DNBitmapSource read get_Source write set_Source;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransformedBitmap = class(TDNGenericImport<DNTransformedBitmapClass, DNTransformedBitmap>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNWriteableBitmapClass = interface(DNBitmapSourceClass)
  ['{DF2B5DEF-C44C-5407-A883-C9AA34EE20AD}']
  { constructors } 

    {class} function init(source: DNBitmapSource): DNWriteableBitmap; overload;
    {class} function init(pixelWidth: Int32; pixelHeight: Int32; dpiX: Double; dpiY: Double; pixelFormat: DNPixelFormat; palette: DNBitmapPalette): DNWriteableBitmap; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.WriteableBitmap')]
  DNWriteableBitmap = interface(DNBitmapSource)
  ['{5802921B-8F79-3749-B5C3-0AAA8937F424}']
  { getters & setters } 

    function get_BackBuffer: IntPtr;
    function get_BackBufferStride: Int32;
    function get_Format: DNPixelFormat;
    function get_PixelWidth: Int32;
    function get_PixelHeight: Int32;
    function get_DpiX: Double;
    function get_DpiY: Double;
    function get_Palette: DNBitmapPalette;
    function get_IsDownloading: Boolean;
    function get_Width: Double;
    function get_Height: Double;
    function get_Metadata: DNImageMetadata;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNWriteableBitmap;
    function CloneCurrentValue: DNWriteableBitmap;
    procedure Lock;
    procedure WritePixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; sourceBuffer: IntPtr; sourceBufferSize: Int32; sourceBufferStride: Int32; destinationX: Int32; destinationY: Int32); overload;
    procedure WritePixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; sourceBuffer: DDN.mscorlib.DNArray; sourceBufferStride: Int32; destinationX: Int32; destinationY: Int32); overload;
    procedure AddDirtyRect(dirtyRect: DDN.System.Windows.Common.DNInt32Rect);
    function TryLock(timeout: DNDuration): Boolean;
    procedure Unlock;
    procedure WritePixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    procedure WritePixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(pixels: DDN.mscorlib.DNArray; stride: Int32; offset: Int32); overload;
    procedure CopyPixels(sourceRect: DDN.System.Windows.Common.DNInt32Rect; buffer: IntPtr; bufferSize: Int32; stride: Int32); overload;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackBuffer: IntPtr read get_BackBuffer;
    property BackBufferStride: Int32 read get_BackBufferStride;
    property Format: DNPixelFormat read get_Format;
    property PixelWidth: Int32 read get_PixelWidth;
    property PixelHeight: Int32 read get_PixelHeight;
    property DpiX: Double read get_DpiX;
    property DpiY: Double read get_DpiY;
    property Palette: DNBitmapPalette read get_Palette;
    property IsDownloading: Boolean read get_IsDownloading;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property Metadata: DNImageMetadata read get_Metadata;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNWriteableBitmap = class(TDNGenericImport<DNWriteableBitmapClass, DNWriteableBitmap>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNCameraClass = interface(DNAnimatableClass)
  ['{56D29D31-E32D-564E-B155-6BC84E4BE32C}']
  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Camera')]
  DNCamera = interface(DNAnimatable)
  ['{33E67798-77BC-31C7-BCEB-0732C7265617}']
  { getters & setters } 

    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCamera;
    function CloneCurrentValue: DNCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCamera = class(TDNGenericImport<DNCameraClass, DNCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMatrixCameraClass = interface(DNCameraClass)
  ['{7191A321-5293-5CC1-B6FF-9C78CDC4AB31}']
  { constructors } 

    {class} function init: DNMatrixCamera; overload;
    {class} function init(viewMatrix: DNMatrix3D; projectionMatrix: DNMatrix3D): DNMatrixCamera; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ViewMatrixProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ProjectionMatrixProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ViewMatrixProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewMatrixProperty;
    {class} property ProjectionMatrixProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ProjectionMatrixProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.MatrixCamera')]
  DNMatrixCamera = interface(DNCamera)
  ['{23C2EB99-16AD-3D4A-A8B4-2463E5C8BB3A}']
  { getters & setters } 

    function get_ViewMatrix: DNMatrix3D;
    procedure set_ViewMatrix(value: DNMatrix3D);
    function get_ProjectionMatrix: DNMatrix3D;
    procedure set_ProjectionMatrix(value: DNMatrix3D);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixCamera;
    function CloneCurrentValue: DNMatrixCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ViewMatrix: DNMatrix3D read get_ViewMatrix write set_ViewMatrix;
    property ProjectionMatrix: DNMatrix3D read get_ProjectionMatrix write set_ProjectionMatrix;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixCamera = class(TDNGenericImport<DNMatrixCameraClass, DNMatrixCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNProjectionCameraClass = interface(DNCameraClass)
  ['{DEA169EB-DB75-5746-BD95-4CBEA3395A38}']
  { static fields getter & setter } 

   function __fakeFieldGet_NearPlaneDistanceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FarPlaneDistanceProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PositionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LookDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UpDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property NearPlaneDistanceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NearPlaneDistanceProperty;
    {class} property FarPlaneDistanceProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FarPlaneDistanceProperty;
    {class} property PositionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionProperty;
    {class} property LookDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LookDirectionProperty;
    {class} property UpDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UpDirectionProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.ProjectionCamera')]
  DNProjectionCamera = interface(DNCamera)
  ['{32DE8556-8B69-3FC5-A09B-469C4DD8C0F3}']
  { getters & setters } 

    function get_NearPlaneDistance: Double;
    procedure set_NearPlaneDistance(value: Double);
    function get_FarPlaneDistance: Double;
    procedure set_FarPlaneDistance(value: Double);
    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_LookDirection: DNVector3D;
    procedure set_LookDirection(value: DNVector3D);
    function get_UpDirection: DNVector3D;
    procedure set_UpDirection(value: DNVector3D);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNProjectionCamera;
    function CloneCurrentValue: DNProjectionCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NearPlaneDistance: Double read get_NearPlaneDistance write set_NearPlaneDistance;
    property FarPlaneDistance: Double read get_FarPlaneDistance write set_FarPlaneDistance;
    property Position: DNPoint3D read get_Position write set_Position;
    property LookDirection: DNVector3D read get_LookDirection write set_LookDirection;
    property UpDirection: DNVector3D read get_UpDirection write set_UpDirection;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNProjectionCamera = class(TDNGenericImport<DNProjectionCameraClass, DNProjectionCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNOrthographicCameraClass = interface(DNProjectionCameraClass)
  ['{709C7B7B-9D79-5D54-A4BB-7ADC792EB295}']
  { constructors } 

    {class} function init: DNOrthographicCamera; overload;
    {class} function init(position: DNPoint3D; lookDirection: DNVector3D; upDirection: DNVector3D; width: Double): DNOrthographicCamera; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_WidthProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property WidthProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_WidthProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.OrthographicCamera')]
  DNOrthographicCamera = interface(DNProjectionCamera)
  ['{CCC7A6EB-428D-3A85-AEE6-B8A86D3B88B7}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_NearPlaneDistance: Double;
    procedure set_NearPlaneDistance(value: Double);
    function get_FarPlaneDistance: Double;
    procedure set_FarPlaneDistance(value: Double);
    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_LookDirection: DNVector3D;
    procedure set_LookDirection(value: DNVector3D);
    function get_UpDirection: DNVector3D;
    procedure set_UpDirection(value: DNVector3D);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNOrthographicCamera;
    function CloneCurrentValue: DNOrthographicCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property NearPlaneDistance: Double read get_NearPlaneDistance write set_NearPlaneDistance;
    property FarPlaneDistance: Double read get_FarPlaneDistance write set_FarPlaneDistance;
    property Position: DNPoint3D read get_Position write set_Position;
    property LookDirection: DNVector3D read get_LookDirection write set_LookDirection;
    property UpDirection: DNVector3D read get_UpDirection write set_UpDirection;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNOrthographicCamera = class(TDNGenericImport<DNOrthographicCameraClass, DNOrthographicCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPerspectiveCameraClass = interface(DNProjectionCameraClass)
  ['{EC10DB84-B7B4-57AA-A601-33CDFE4294C3}']
  { constructors } 

    {class} function init: DNPerspectiveCamera; overload;
    {class} function init(position: DNPoint3D; lookDirection: DNVector3D; upDirection: DNVector3D; fieldOfView: Double): DNPerspectiveCamera; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_FieldOfViewProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property FieldOfViewProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FieldOfViewProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.PerspectiveCamera')]
  DNPerspectiveCamera = interface(DNProjectionCamera)
  ['{1370FDE2-279B-3C45-8DCC-D69F2B9E165F}']
  { getters & setters } 

    function get_FieldOfView: Double;
    procedure set_FieldOfView(value: Double);
    function get_NearPlaneDistance: Double;
    procedure set_NearPlaneDistance(value: Double);
    function get_FarPlaneDistance: Double;
    procedure set_FarPlaneDistance(value: Double);
    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_LookDirection: DNVector3D;
    procedure set_LookDirection(value: DNVector3D);
    function get_UpDirection: DNVector3D;
    procedure set_UpDirection(value: DNVector3D);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPerspectiveCamera;
    function CloneCurrentValue: DNPerspectiveCamera;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FieldOfView: Double read get_FieldOfView write set_FieldOfView;
    property NearPlaneDistance: Double read get_NearPlaneDistance write set_NearPlaneDistance;
    property FarPlaneDistance: Double read get_FarPlaneDistance write set_FarPlaneDistance;
    property Position: DNPoint3D read get_Position write set_Position;
    property LookDirection: DNVector3D read get_LookDirection write set_LookDirection;
    property UpDirection: DNVector3D read get_UpDirection write set_UpDirection;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPerspectiveCamera = class(TDNGenericImport<DNPerspectiveCameraClass, DNPerspectiveCamera>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DClass = interface(DNAnimatableClass)
  ['{B0A16199-623A-5184-A408-87F569FF0AF4}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3D')]
  DNGeneralTransform3D = interface(DNAnimatable)
  ['{041F21DC-81B8-3E52-BB4E-E1FBB74FD719}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DNPoint3D): DNPoint3D;
    function Clone: DNGeneralTransform3D;
    function CloneCurrentValue: DNGeneralTransform3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3D = class(TDNGenericImport<DNGeneralTransform3DClass, DNGeneralTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DGroupClass = interface(DNGeneralTransform3DClass)
  ['{7251FF87-E0AA-56D3-A9AA-2F12FD95025C}']
  { constructors } 

    {class} function init: DNGeneralTransform3DGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3DGroup')]
  DNGeneralTransform3DGroup = interface(DNGeneralTransform3D)
  ['{55F0F24E-EA3D-3F86-B295-5EC659EC8AE0}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform3D;
    function get_Children: DNGeneralTransform3DCollection;
    procedure set_Children(value: DNGeneralTransform3DCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function Clone: DNGeneralTransform3DGroup;
    function CloneCurrentValue: DNGeneralTransform3DGroup;
    function Transform(point: DNPoint3D): DNPoint3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform3D read get_Inverse;
    property Children: DNGeneralTransform3DCollection read get_Children write set_Children;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3DGroup = class(TDNGenericImport<DNGeneralTransform3DGroupClass, DNGeneralTransform3DGroup>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNTransform3DClass = interface(DNGeneralTransform3DClass)
  ['{8DD66813-EC97-57F1-8189-22344271159B}']
  { static getter & setter } 

    {class} function get_Identity: DNTransform3D;

  { static propertys } 

    {class} property Identity: DNTransform3D read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Transform3D')]
  DNTransform3D = interface(DNGeneralTransform3D)
  ['{0E9DAFC3-1919-36DB-8461-AC3B824875F7}']
  { getters & setters } 

    function get_Inverse: DNGeneralTransform3D;
    function get_IsAffine: Boolean;
    function get_Value: DNMatrix3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function Clone: DNTransform3D;
    function CloneCurrentValue: DNTransform3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Inverse: DNGeneralTransform3D read get_Inverse;
    property IsAffine: Boolean read get_IsAffine;
    property Value: DNMatrix3D read get_Value;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransform3D = class(TDNGenericImport<DNTransform3DClass, DNTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNAffineTransform3DClass = interface(DNTransform3DClass)
  ['{4D79BED6-3611-5993-9834-F6B2B0A4EA79}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.AffineTransform3D')]
  DNAffineTransform3D = interface(DNTransform3D)
  ['{72F4574D-9C55-3577-BE7C-E472CA7885B1}']
  { getters & setters } 

    function get_IsAffine: Boolean;
    function get_Inverse: DNGeneralTransform3D;
    function get_Value: DNMatrix3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAffineTransform3D;
    function CloneCurrentValue: DNAffineTransform3D;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsAffine: Boolean read get_IsAffine;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property Value: DNMatrix3D read get_Value;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAffineTransform3D = class(TDNGenericImport<DNAffineTransform3DClass, DNAffineTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRotateTransform3DClass = interface(DNAffineTransform3DClass)
  ['{3EF77D34-4076-5753-ADDD-E86328D34403}']
  { constructors } 

    {class} function init: DNRotateTransform3D; overload;
    {class} function init(rotation: DNRotation3D): DNRotateTransform3D; overload;
    {class} function init(rotation: DNRotation3D; center: DNPoint3D): DNRotateTransform3D; overload;
    {class} function init(rotation: DNRotation3D; centerX: Double; centerY: Double; centerZ: Double): DNRotateTransform3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterZProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RotationProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterXProperty;
    {class} property CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterYProperty;
    {class} property CenterZProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterZProperty;
    {class} property RotationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RotationProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.RotateTransform3D')]
  DNRotateTransform3D = interface(DNAffineTransform3D)
  ['{EC8411C6-E2B6-3263-B393-C36B53820FC6}']
  { getters & setters } 

    function get_Value: DNMatrix3D;
    function get_CenterX: Double;
    procedure set_CenterX(value: Double);
    function get_CenterY: Double;
    procedure set_CenterY(value: Double);
    function get_CenterZ: Double;
    procedure set_CenterZ(value: Double);
    function get_Rotation: DNRotation3D;
    procedure set_Rotation(value: DNRotation3D);
    function get_IsAffine: Boolean;
    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotateTransform3D;
    function CloneCurrentValue: DNRotateTransform3D;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix3D read get_Value;
    property CenterX: Double read get_CenterX write set_CenterX;
    property CenterY: Double read get_CenterY write set_CenterY;
    property CenterZ: Double read get_CenterZ write set_CenterZ;
    property Rotation: DNRotation3D read get_Rotation write set_Rotation;
    property IsAffine: Boolean read get_IsAffine;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotateTransform3D = class(TDNGenericImport<DNRotateTransform3DClass, DNRotateTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNScaleTransform3DClass = interface(DNAffineTransform3DClass)
  ['{E83C7AC5-3FB4-538E-8790-DB633F194DA6}']
  { constructors } 

    {class} function init: DNScaleTransform3D; overload;
    {class} function init(scale: DNVector3D): DNScaleTransform3D; overload;
    {class} function init(scaleX: Double; scaleY: Double; scaleZ: Double): DNScaleTransform3D; overload;
    {class} function init(scale: DNVector3D; center: DNPoint3D): DNScaleTransform3D; overload;
    {class} function init(scaleX: Double; scaleY: Double; scaleZ: Double; centerX: Double; centerY: Double; centerZ: Double): DNScaleTransform3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ScaleXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ScaleYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ScaleZProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CenterZProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ScaleXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ScaleXProperty;
    {class} property ScaleYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ScaleYProperty;
    {class} property ScaleZProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ScaleZProperty;
    {class} property CenterXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterXProperty;
    {class} property CenterYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterYProperty;
    {class} property CenterZProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CenterZProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.ScaleTransform3D')]
  DNScaleTransform3D = interface(DNAffineTransform3D)
  ['{62CA4391-FA71-34AC-A035-4D86072FF47F}']
  { getters & setters } 

    function get_Value: DNMatrix3D;
    function get_ScaleX: Double;
    procedure set_ScaleX(value: Double);
    function get_ScaleY: Double;
    procedure set_ScaleY(value: Double);
    function get_ScaleZ: Double;
    procedure set_ScaleZ(value: Double);
    function get_CenterX: Double;
    procedure set_CenterX(value: Double);
    function get_CenterY: Double;
    procedure set_CenterY(value: Double);
    function get_CenterZ: Double;
    procedure set_CenterZ(value: Double);
    function get_IsAffine: Boolean;
    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNScaleTransform3D;
    function CloneCurrentValue: DNScaleTransform3D;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix3D read get_Value;
    property ScaleX: Double read get_ScaleX write set_ScaleX;
    property ScaleY: Double read get_ScaleY write set_ScaleY;
    property ScaleZ: Double read get_ScaleZ write set_ScaleZ;
    property CenterX: Double read get_CenterX write set_CenterX;
    property CenterY: Double read get_CenterY write set_CenterY;
    property CenterZ: Double read get_CenterZ write set_CenterZ;
    property IsAffine: Boolean read get_IsAffine;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNScaleTransform3D = class(TDNGenericImport<DNScaleTransform3DClass, DNScaleTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNTranslateTransform3DClass = interface(DNAffineTransform3DClass)
  ['{34BD69F5-6818-5C81-9A48-D7F9FBDE452B}']
  { constructors } 

    {class} function init: DNTranslateTransform3D; overload;
    {class} function init(offset: DNVector3D): DNTranslateTransform3D; overload;
    {class} function init(offsetX: Double; offsetY: Double; offsetZ: Double): DNTranslateTransform3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_OffsetXProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OffsetYProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OffsetZProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property OffsetXProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OffsetXProperty;
    {class} property OffsetYProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OffsetYProperty;
    {class} property OffsetZProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OffsetZProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.TranslateTransform3D')]
  DNTranslateTransform3D = interface(DNAffineTransform3D)
  ['{6D36B0E0-FDC9-3E23-BAFA-5299F3B67227}']
  { getters & setters } 

    function get_Value: DNMatrix3D;
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);
    function get_OffsetZ: Double;
    procedure set_OffsetZ(value: Double);
    function get_IsAffine: Boolean;
    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTranslateTransform3D;
    function CloneCurrentValue: DNTranslateTransform3D;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix3D read get_Value;
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    property OffsetY: Double read get_OffsetY write set_OffsetY;
    property OffsetZ: Double read get_OffsetZ write set_OffsetZ;
    property IsAffine: Boolean read get_IsAffine;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTranslateTransform3D = class(TDNGenericImport<DNTranslateTransform3DClass, DNTranslateTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMatrixTransform3DClass = interface(DNTransform3DClass)
  ['{28130769-39D5-5792-A257-B02AFD36496F}']
  { constructors } 

    {class} function init: DNMatrixTransform3D; overload;
    {class} function init(matrix: DNMatrix3D): DNMatrixTransform3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MatrixProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property MatrixProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MatrixProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.MatrixTransform3D')]
  DNMatrixTransform3D = interface(DNTransform3D)
  ['{61FDC65D-29F7-3C52-B654-EE3C7BAC3247}']
  { getters & setters } 

    function get_Value: DNMatrix3D;
    function get_IsAffine: Boolean;
    function get_Matrix: DNMatrix3D;
    procedure set_Matrix(value: DNMatrix3D);
    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixTransform3D;
    function CloneCurrentValue: DNMatrixTransform3D;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix3D read get_Value;
    property IsAffine: Boolean read get_IsAffine;
    property Matrix: DNMatrix3D read get_Matrix write set_Matrix;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixTransform3D = class(TDNGenericImport<DNMatrixTransform3DClass, DNMatrixTransform3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNTransform3DGroupClass = interface(DNTransform3DClass)
  ['{D229A222-2742-578B-A480-68A35417791A}']
  { constructors } 

    {class} function init: DNTransform3DGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Transform3DGroup')]
  DNTransform3DGroup = interface(DNTransform3D)
  ['{D1C86A0F-F2AA-3FA5-9844-03F494B3ADCC}']
  { getters & setters } 

    function get_Value: DNMatrix3D;
    function get_IsAffine: Boolean;
    function get_Children: DNTransform3DCollection;
    procedure set_Children(value: DNTransform3DCollection);
    function get_Inverse: DNGeneralTransform3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTransform3DGroup;
    function CloneCurrentValue: DNTransform3DGroup;
    function Transform(point: DNPoint3D): DNPoint3D; overload;
    function Transform(vector: DNVector3D): DNVector3D; overload;
    function Transform(point: DNPoint4D): DNPoint4D; overload;
    procedure Transform(points: TArray<DNPoint3D>); overload;
    procedure Transform(vectors: TArray<DNVector3D>); overload;
    procedure Transform(points: TArray<DNPoint4D>); overload;
    function TryTransform(inPoint: DNPoint3D; out result: DNPoint3D): Boolean;
    function TransformBounds(rect: DNRect3D): DNRect3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Value: DNMatrix3D read get_Value;
    property IsAffine: Boolean read get_IsAffine;
    property Children: DNTransform3DCollection read get_Children write set_Children;
    property Inverse: DNGeneralTransform3D read get_Inverse;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransform3DGroup = class(TDNGenericImport<DNTransform3DGroupClass, DNTransform3DGroup>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DCollectionClass = interface(DNAnimatableClass)
  ['{C207D0F2-C826-55C4-ABC4-AB78AAE29FE5}']
  { constructors } 

    {class} function init: DNGeneralTransform3DCollection; overload;
    {class} function init(capacity: Int32): DNGeneralTransform3DCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNGeneralTransform3D>): DNGeneralTransform3DCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3DCollection')]
  DNGeneralTransform3DCollection = interface(DNAnimatable)
  ['{44B424DF-0B20-3070-A715-F8D3A31B60A0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeneralTransform3DCollection;
    function CloneCurrentValue: DNGeneralTransform3DCollection;
    function &Contains(value: DNGeneralTransform3D): Boolean;
    function IndexOf(value: DNGeneralTransform3D): Int32;
    procedure Insert(index: Int32; value: DNGeneralTransform3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNGeneralTransform3D>; index: Int32);
    function GetEnumerator: DNMedia3D_GeneralTransform3DCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3DCollection = class(TDNGenericImport<DNGeneralTransform3DCollectionClass, DNGeneralTransform3DCollection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeometry3DClass = interface(DNAnimatableClass)
  ['{3477BAB1-4FAA-52C3-832D-26FC444AAB31}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Geometry3D')]
  DNGeometry3D = interface(DNAnimatable)
  ['{0C4552F0-8C5E-320E-96D1-0A747E3624BB}']
  { getters & setters } 

    function get_Bounds: DNRect3D;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometry3D;
    function CloneCurrentValue: DNGeometry3D;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounds: DNRect3D read get_Bounds;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometry3D = class(TDNGenericImport<DNGeometry3DClass, DNGeometry3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMeshGeometry3DClass = interface(DNGeometry3DClass)
  ['{7BBA660E-F478-5255-9CDA-A106F17BBED3}']
  { constructors } 

    {class} function init: DNMeshGeometry3D;

  { static fields getter & setter } 

   function __fakeFieldGet_PositionsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_NormalsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TextureCoordinatesProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TriangleIndicesProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PositionsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionsProperty;
    {class} property NormalsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_NormalsProperty;
    {class} property TextureCoordinatesProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TextureCoordinatesProperty;
    {class} property TriangleIndicesProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TriangleIndicesProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.MeshGeometry3D')]
  DNMeshGeometry3D = interface(DNGeometry3D)
  ['{1E2A9DEB-F49C-397C-B8A3-2335BE6B3EF9}']
  { getters & setters } 

    function get_Bounds: DNRect3D;
    function get_Positions: DNPoint3DCollection;
    procedure set_Positions(value: DNPoint3DCollection);
    function get_Normals: DNVector3DCollection;
    procedure set_Normals(value: DNVector3DCollection);
    function get_TextureCoordinates: DNPointCollection;
    procedure set_TextureCoordinates(value: DNPointCollection);
    function get_TriangleIndices: DNInt32Collection;
    procedure set_TriangleIndices(value: DNInt32Collection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMeshGeometry3D;
    function CloneCurrentValue: DNMeshGeometry3D;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounds: DNRect3D read get_Bounds;
    property Positions: DNPoint3DCollection read get_Positions write set_Positions;
    property Normals: DNVector3DCollection read get_Normals write set_Normals;
    property TextureCoordinates: DNPointCollection read get_TextureCoordinates write set_TextureCoordinates;
    property TriangleIndices: DNInt32Collection read get_TriangleIndices write set_TriangleIndices;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMeshGeometry3D = class(TDNGenericImport<DNMeshGeometry3DClass, DNMeshGeometry3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMaterialClass = interface(DNAnimatableClass)
  ['{EB08FD27-8019-587C-A5C8-41B9AFDDB4A0}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.Material')]
  DNMaterial = interface(DNAnimatable)
  ['{47FE95C1-BEC7-3909-BE94-7BFA001629A3}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMaterial;
    function CloneCurrentValue: DNMaterial;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMaterial = class(TDNGenericImport<DNMaterialClass, DNMaterial>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNDiffuseMaterialClass = interface(DNMaterialClass)
  ['{0349883F-D9E3-522F-A0CA-B711FEFEFCDC}']
  { constructors } 

    {class} function init: DNDiffuseMaterial; overload;
    {class} function init(brush: DNBrush): DNDiffuseMaterial; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AmbientColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BrushProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property AmbientColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AmbientColorProperty;
    {class} property BrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BrushProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.DiffuseMaterial')]
  DNDiffuseMaterial = interface(DNMaterial)
  ['{9B564D2A-5888-378A-953E-7009B7938C08}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_AmbientColor: DNColor;
    procedure set_AmbientColor(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDiffuseMaterial;
    function CloneCurrentValue: DNDiffuseMaterial;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property AmbientColor: DNColor read get_AmbientColor write set_AmbientColor;
    property Brush: DNBrush read get_Brush write set_Brush;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiffuseMaterial = class(TDNGenericImport<DNDiffuseMaterialClass, DNDiffuseMaterial>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNEmissiveMaterialClass = interface(DNMaterialClass)
  ['{69FEC879-8626-5612-BA9E-F10DC097CFC3}']
  { constructors } 

    {class} function init: DNEmissiveMaterial; overload;
    {class} function init(brush: DNBrush): DNEmissiveMaterial; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BrushProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property BrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BrushProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.EmissiveMaterial')]
  DNEmissiveMaterial = interface(DNMaterial)
  ['{4A2640AB-575B-3D4B-92D2-C655F23FE3D2}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNEmissiveMaterial;
    function CloneCurrentValue: DNEmissiveMaterial;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Brush: DNBrush read get_Brush write set_Brush;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEmissiveMaterial = class(TDNGenericImport<DNEmissiveMaterialClass, DNEmissiveMaterial>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMaterialGroupClass = interface(DNMaterialClass)
  ['{DB7DFCD4-366E-5391-BDF3-5E806EE30BC0}']
  { constructors } 

    {class} function init: DNMaterialGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.MaterialGroup')]
  DNMaterialGroup = interface(DNMaterial)
  ['{940B7EE5-BC76-3F52-9622-03E0A4712090}']
  { getters & setters } 

    function get_Children: DNMaterialCollection;
    procedure set_Children(value: DNMaterialCollection);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMaterialGroup;
    function CloneCurrentValue: DNMaterialGroup;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Children: DNMaterialCollection read get_Children write set_Children;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMaterialGroup = class(TDNGenericImport<DNMaterialGroupClass, DNMaterialGroup>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNSpecularMaterialClass = interface(DNMaterialClass)
  ['{4CA0FD55-CC7F-57DB-AE67-26FD8F1C78A0}']
  { constructors } 

    {class} function init: DNSpecularMaterial; overload;
    {class} function init(brush: DNBrush; specularPower: Double): DNSpecularMaterial; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BrushProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SpecularPowerProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;
    {class} property BrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BrushProperty;
    {class} property SpecularPowerProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SpecularPowerProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.SpecularMaterial')]
  DNSpecularMaterial = interface(DNMaterial)
  ['{B3135E03-3D09-373F-B369-8C007BA7AA14}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_SpecularPower: Double;
    procedure set_SpecularPower(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSpecularMaterial;
    function CloneCurrentValue: DNSpecularMaterial;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Brush: DNBrush read get_Brush write set_Brush;
    property SpecularPower: Double read get_SpecularPower write set_SpecularPower;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSpecularMaterial = class(TDNGenericImport<DNSpecularMaterialClass, DNSpecularMaterial>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNMaterialCollectionClass = interface(DNAnimatableClass)
  ['{745AD89C-1194-5068-8B69-A1856A92D1A2}']
  { constructors } 

    {class} function init: DNMaterialCollection; overload;
    {class} function init(capacity: Int32): DNMaterialCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNMaterial>): DNMaterialCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.MaterialCollection')]
  DNMaterialCollection = interface(DNAnimatable)
  ['{A82E71CA-641D-36CE-8385-39F748B8763F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMaterialCollection;
    function CloneCurrentValue: DNMaterialCollection;
    function &Contains(value: DNMaterial): Boolean;
    function IndexOf(value: DNMaterial): Int32;
    procedure Insert(index: Int32; value: DNMaterial);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNMaterial>; index: Int32);
    function GetEnumerator: DNMedia3D_MaterialCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMaterialCollection = class(TDNGenericImport<DNMaterialCollectionClass, DNMaterialCollection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNModel3DClass = interface(DNAnimatableClass)
  ['{39A7D8C8-2942-57F4-8E0E-7F82E36FBFBC}']
  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Model3D')]
  DNModel3D = interface(DNAnimatable)
  ['{A9B01871-77A0-385F-BA9B-359D24C7EC20}']
  { getters & setters } 

    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNModel3D;
    function CloneCurrentValue: DNModel3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNModel3D = class(TDNGenericImport<DNModel3DClass, DNModel3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeometryModel3DClass = interface(DNModel3DClass)
  ['{6B7E0395-3607-56D2-8970-E61C75080D7A}']
  { constructors } 

    {class} function init: DNGeometryModel3D; overload;
    {class} function init(geometry: DNGeometry3D; material: DNMaterial): DNGeometryModel3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_MaterialProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BackMaterialProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GeometryProperty;
    {class} property MaterialProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MaterialProperty;
    {class} property BackMaterialProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BackMaterialProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.GeometryModel3D')]
  DNGeometryModel3D = interface(DNModel3D)
  ['{1170E2DB-8C56-3725-A6B1-E2596A21E4E5}']
  { getters & setters } 

    function get_Geometry: DNGeometry3D;
    procedure set_Geometry(value: DNGeometry3D);
    function get_Material: DNMaterial;
    procedure set_Material(value: DNMaterial);
    function get_BackMaterial: DNMaterial;
    procedure set_BackMaterial(value: DNMaterial);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNGeometryModel3D;
    function CloneCurrentValue: DNGeometryModel3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Geometry: DNGeometry3D read get_Geometry write set_Geometry;
    property Material: DNMaterial read get_Material write set_Material;
    property BackMaterial: DNMaterial read get_BackMaterial write set_BackMaterial;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeometryModel3D = class(TDNGenericImport<DNGeometryModel3DClass, DNGeometryModel3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNLightClass = interface(DNModel3DClass)
  ['{05910BD8-B69E-5965-A365-66D3538FB742}']
  { static fields getter & setter } 

   function __fakeFieldGet_ColorProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ColorProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ColorProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Light')]
  DNLight = interface(DNModel3D)
  ['{069EF429-9876-374C-9FEA-7834733497F9}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNLight;
    function CloneCurrentValue: DNLight;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLight = class(TDNGenericImport<DNLightClass, DNLight>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNAmbientLightClass = interface(DNLightClass)
  ['{3EC9615B-CA7D-58FF-B110-8DC4952B2F3F}']
  { constructors } 

    {class} function init: DNAmbientLight; overload;
    {class} function init(ambientColor: DNColor): DNAmbientLight; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.AmbientLight')]
  DNAmbientLight = interface(DNLight)
  ['{D1ED96F0-A9D0-3751-B308-65067421E852}']
  { getters & setters } 

    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAmbientLight;
    function CloneCurrentValue: DNAmbientLight;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAmbientLight = class(TDNGenericImport<DNAmbientLightClass, DNAmbientLight>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNDirectionalLightClass = interface(DNLightClass)
  ['{0DC8BAAA-155E-5FFE-883D-93075F9AA255}']
  { constructors } 

    {class} function init: DNDirectionalLight; overload;
    {class} function init(diffuseColor: DNColor; direction: DNVector3D): DNDirectionalLight; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DirectionProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.DirectionalLight')]
  DNDirectionalLight = interface(DNLight)
  ['{45798379-A518-35F5-9F01-1C0E7355DC90}']
  { getters & setters } 

    function get_Direction: DNVector3D;
    procedure set_Direction(value: DNVector3D);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDirectionalLight;
    function CloneCurrentValue: DNDirectionalLight;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Direction: DNVector3D read get_Direction write set_Direction;
    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDirectionalLight = class(TDNGenericImport<DNDirectionalLightClass, DNDirectionalLight>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPointLightBaseClass = interface(DNLightClass)
  ['{F2CA93CD-26CB-57E3-9F18-BDABFF7E06D1}']
  { static fields getter & setter } 

   function __fakeFieldGet_PositionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RangeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ConstantAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LinearAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_QuadraticAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PositionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionProperty;
    {class} property RangeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RangeProperty;
    {class} property ConstantAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ConstantAttenuationProperty;
    {class} property LinearAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LinearAttenuationProperty;
    {class} property QuadraticAttenuationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_QuadraticAttenuationProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.PointLightBase')]
  DNPointLightBase = interface(DNLight)
  ['{EE9F9878-762A-3B60-9FFE-D1B38FC08C7B}']
  { getters & setters } 

    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_Range: Double;
    procedure set_Range(value: Double);
    function get_ConstantAttenuation: Double;
    procedure set_ConstantAttenuation(value: Double);
    function get_LinearAttenuation: Double;
    procedure set_LinearAttenuation(value: Double);
    function get_QuadraticAttenuation: Double;
    procedure set_QuadraticAttenuation(value: Double);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointLightBase;
    function CloneCurrentValue: DNPointLightBase;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Position: DNPoint3D read get_Position write set_Position;
    property Range: Double read get_Range write set_Range;
    property ConstantAttenuation: Double read get_ConstantAttenuation write set_ConstantAttenuation;
    property LinearAttenuation: Double read get_LinearAttenuation write set_LinearAttenuation;
    property QuadraticAttenuation: Double read get_QuadraticAttenuation write set_QuadraticAttenuation;
    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointLightBase = class(TDNGenericImport<DNPointLightBaseClass, DNPointLightBase>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPointLightClass = interface(DNPointLightBaseClass)
  ['{DC107EEA-9C66-5CA6-A24B-400B1AAAA0F1}']
  { constructors } 

    {class} function init: DNPointLight; overload;
    {class} function init(diffuseColor: DNColor; position: DNPoint3D): DNPointLight; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.PointLight')]
  DNPointLight = interface(DNPointLightBase)
  ['{B669E74A-064A-326D-83A1-E00070CDA45C}']
  { getters & setters } 

    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_Range: Double;
    procedure set_Range(value: Double);
    function get_ConstantAttenuation: Double;
    procedure set_ConstantAttenuation(value: Double);
    function get_LinearAttenuation: Double;
    procedure set_LinearAttenuation(value: Double);
    function get_QuadraticAttenuation: Double;
    procedure set_QuadraticAttenuation(value: Double);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointLight;
    function CloneCurrentValue: DNPointLight;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Position: DNPoint3D read get_Position write set_Position;
    property Range: Double read get_Range write set_Range;
    property ConstantAttenuation: Double read get_ConstantAttenuation write set_ConstantAttenuation;
    property LinearAttenuation: Double read get_LinearAttenuation write set_LinearAttenuation;
    property QuadraticAttenuation: Double read get_QuadraticAttenuation write set_QuadraticAttenuation;
    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointLight = class(TDNGenericImport<DNPointLightClass, DNPointLight>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNSpotLightClass = interface(DNPointLightBaseClass)
  ['{A4154797-4EC3-5755-8A78-8FA142E68AB3}']
  { constructors } 

    {class} function init(diffuseColor: DNColor; position: DNPoint3D; direction: DNVector3D; outerConeAngle: Double; innerConeAngle: Double): DNSpotLight; overload;
    {class} function init: DNSpotLight; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OuterConeAngleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_InnerConeAngleProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property DirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DirectionProperty;
    {class} property OuterConeAngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OuterConeAngleProperty;
    {class} property InnerConeAngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_InnerConeAngleProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.SpotLight')]
  DNSpotLight = interface(DNPointLightBase)
  ['{03B41132-52C0-3BFB-882C-AD9F2AEAA730}']
  { getters & setters } 

    function get_Direction: DNVector3D;
    procedure set_Direction(value: DNVector3D);
    function get_OuterConeAngle: Double;
    procedure set_OuterConeAngle(value: Double);
    function get_InnerConeAngle: Double;
    procedure set_InnerConeAngle(value: Double);
    function get_Position: DNPoint3D;
    procedure set_Position(value: DNPoint3D);
    function get_Range: Double;
    procedure set_Range(value: Double);
    function get_ConstantAttenuation: Double;
    procedure set_ConstantAttenuation(value: Double);
    function get_LinearAttenuation: Double;
    procedure set_LinearAttenuation(value: Double);
    function get_QuadraticAttenuation: Double;
    procedure set_QuadraticAttenuation(value: Double);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSpotLight;
    function CloneCurrentValue: DNSpotLight;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Direction: DNVector3D read get_Direction write set_Direction;
    property OuterConeAngle: Double read get_OuterConeAngle write set_OuterConeAngle;
    property InnerConeAngle: Double read get_InnerConeAngle write set_InnerConeAngle;
    property Position: DNPoint3D read get_Position write set_Position;
    property Range: Double read get_Range write set_Range;
    property ConstantAttenuation: Double read get_ConstantAttenuation write set_ConstantAttenuation;
    property LinearAttenuation: Double read get_LinearAttenuation write set_LinearAttenuation;
    property QuadraticAttenuation: Double read get_QuadraticAttenuation write set_QuadraticAttenuation;
    property Color: DNColor read get_Color write set_Color;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSpotLight = class(TDNGenericImport<DNSpotLightClass, DNSpotLight>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNModel3DGroupClass = interface(DNModel3DClass)
  ['{4EE3B5BF-1167-523B-964A-50408B565CF4}']
  { constructors } 

    {class} function init: DNModel3DGroup;

  { static fields getter & setter } 

   function __fakeFieldGet_ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ChildrenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ChildrenProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Model3DGroup')]
  DNModel3DGroup = interface(DNModel3D)
  ['{126BDF4E-A010-38B4-9161-D6A235394F25}']
  { getters & setters } 

    function get_Children: DNModel3DCollection;
    procedure set_Children(value: DNModel3DCollection);
    function get_Bounds: DNRect3D;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNModel3DGroup;
    function CloneCurrentValue: DNModel3DGroup;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Children: DNModel3DCollection read get_Children write set_Children;
    property Bounds: DNRect3D read get_Bounds;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNModel3DGroup = class(TDNGenericImport<DNModel3DGroupClass, DNModel3DGroup>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNModel3DCollectionClass = interface(DNAnimatableClass)
  ['{D08AEF2A-CA1D-51BA-8372-5401D652E717}']
  { constructors } 

    {class} function init: DNModel3DCollection; overload;
    {class} function init(capacity: Int32): DNModel3DCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNModel3D>): DNModel3DCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Model3DCollection')]
  DNModel3DCollection = interface(DNAnimatable)
  ['{62732C5C-E990-39F4-8330-EAA3E64299DA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNModel3DCollection;
    function CloneCurrentValue: DNModel3DCollection;
    function &Contains(value: DNModel3D): Boolean;
    function IndexOf(value: DNModel3D): Int32;
    procedure Insert(index: Int32; value: DNModel3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNModel3D>; index: Int32);
    function GetEnumerator: DNMedia3D_Model3DCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNModel3DCollection = class(TDNGenericImport<DNModel3DCollectionClass, DNModel3DCollection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNRotation3DClass = interface(DNAnimatableClass)
  ['{7E9149E0-D21A-54A7-BBDC-1DC9A78452D3}']
  { static getter & setter } 

    {class} function get_Identity: DNRotation3D;

  { static propertys } 

    {class} property Identity: DNRotation3D read get_Identity;
  end;

  [DNTypeName('System.Windows.Media.Media3D.Rotation3D')]
  DNRotation3D = interface(DNAnimatable)
  ['{D6ED06C4-4567-30D3-BC82-1F57B79207C4}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNRotation3D;
    function Clone: DNRotation3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3D = class(TDNGenericImport<DNRotation3DClass, DNRotation3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNAxisAngleRotation3DClass = interface(DNRotation3DClass)
  ['{0335180F-2863-58E2-B3C2-74F72EC7BC6B}']
  { constructors } 

    {class} function init: DNAxisAngleRotation3D; overload;
    {class} function init(axis: DNVector3D; angle: Double): DNAxisAngleRotation3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_AxisProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AngleProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AxisProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AxisProperty;
    {class} property AngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AngleProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.AxisAngleRotation3D')]
  DNAxisAngleRotation3D = interface(DNRotation3D)
  ['{05280053-19DF-3A78-859D-A190B60E0C62}']
  { getters & setters } 

    function get_Axis: DNVector3D;
    procedure set_Axis(value: DNVector3D);
    function get_Angle: Double;
    procedure set_Angle(value: Double);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNAxisAngleRotation3D;
    function CloneCurrentValue: DNAxisAngleRotation3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Axis: DNVector3D read get_Axis write set_Axis;
    property Angle: Double read get_Angle write set_Angle;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAxisAngleRotation3D = class(TDNGenericImport<DNAxisAngleRotation3DClass, DNAxisAngleRotation3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNQuaternionRotation3DClass = interface(DNRotation3DClass)
  ['{F8350EE3-46E2-5A6C-A78C-6FBE566AEF5B}']
  { constructors } 

    {class} function init: DNQuaternionRotation3D; overload;
    {class} function init(quaternion: DNQuaternion): DNQuaternionRotation3D; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_QuaternionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property QuaternionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_QuaternionProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.QuaternionRotation3D')]
  DNQuaternionRotation3D = interface(DNRotation3D)
  ['{A84D7EC5-5038-343C-A26A-7C117C02227A}']
  { getters & setters } 

    function get_Quaternion: DNQuaternion;
    procedure set_Quaternion(value: DNQuaternion);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNQuaternionRotation3D;
    function Clone: DNQuaternionRotation3D;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Quaternion: DNQuaternion read get_Quaternion write set_Quaternion;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionRotation3D = class(TDNGenericImport<DNQuaternionRotation3DClass, DNQuaternionRotation3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNTransform3DCollectionClass = interface(DNAnimatableClass)
  ['{11AFFC1D-34CC-5E62-AF5C-51E8E78A9B98}']
  { constructors } 

    {class} function init: DNTransform3DCollection; overload;
    {class} function init(capacity: Int32): DNTransform3DCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTransform3D>): DNTransform3DCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Transform3DCollection')]
  DNTransform3DCollection = interface(DNAnimatable)
  ['{31475C64-D30D-3F4D-A78B-3D831FF54D09}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTransform3DCollection;
    function CloneCurrentValue: DNTransform3DCollection;
    function &Contains(value: DNTransform3D): Boolean;
    function IndexOf(value: DNTransform3D): Int32;
    procedure Insert(index: Int32; value: DNTransform3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTransform3D>; index: Int32);
    function GetEnumerator: DNMedia3D_Transform3DCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransform3DCollection = class(TDNGenericImport<DNTransform3DCollectionClass, DNTransform3DCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaPlayerClass = interface(DNAnimatableClass)
  ['{641784FC-8AB7-5311-8FCD-B4E01C582B40}']
  { constructors } 

    {class} function init: DNMediaPlayer;

  end;

  [DNTypeName('System.Windows.Media.MediaPlayer')]
  DNMediaPlayer = interface(DNAnimatable)
  ['{1692BA44-74B0-3A9F-B2A7-724B7976C357}']
  { getters & setters } 

    function get_IsBuffering: Boolean;
    function get_CanPause: Boolean;
    function get_DownloadProgress: Double;
    function get_BufferingProgress: Double;
    function get_NaturalVideoHeight: Int32;
    function get_NaturalVideoWidth: Int32;
    function get_HasAudio: Boolean;
    function get_HasVideo: Boolean;
    function get_Source: DDN.System.Windows.Common.DNUri;
    function get_Volume: Double;
    procedure set_Volume(value: Double);
    function get_Balance: Double;
    procedure set_Balance(value: Double);
    function get_ScrubbingEnabled: Boolean;
    procedure set_ScrubbingEnabled(value: Boolean);
    function get_IsMuted: Boolean;
    procedure set_IsMuted(value: Boolean);
    function get_NaturalDuration: DNDuration;
    function get_Position: DDN.mscorlib.DNTimeSpan;
    procedure set_Position(value: DDN.mscorlib.DNTimeSpan);
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_Clock: DNMediaClock;
    procedure set_Clock(value: DNMediaClock);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_MediaOpened(value: DDN.mscorlib.DNEventHandler);
    procedure remove_MediaOpened(value: DDN.mscorlib.DNEventHandler);
    procedure add_MediaEnded(value: DDN.mscorlib.DNEventHandler);
    procedure remove_MediaEnded(value: DDN.mscorlib.DNEventHandler);
    procedure add_BufferingStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_BufferingStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_BufferingEnded(value: DDN.mscorlib.DNEventHandler);
    procedure remove_BufferingEnded(value: DDN.mscorlib.DNEventHandler);
    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Open(source: DDN.System.Windows.Common.DNUri);
    procedure Play;
    procedure Pause;
    procedure Stop;
    procedure Close;
    function Clone: DNAnimatable;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBuffering: Boolean read get_IsBuffering;
    property CanPause: Boolean read get_CanPause;
    property DownloadProgress: Double read get_DownloadProgress;
    property BufferingProgress: Double read get_BufferingProgress;
    property NaturalVideoHeight: Int32 read get_NaturalVideoHeight;
    property NaturalVideoWidth: Int32 read get_NaturalVideoWidth;
    property HasAudio: Boolean read get_HasAudio;
    property HasVideo: Boolean read get_HasVideo;
    property Source: DDN.System.Windows.Common.DNUri read get_Source;
    property Volume: Double read get_Volume write set_Volume;
    property Balance: Double read get_Balance write set_Balance;
    property ScrubbingEnabled: Boolean read get_ScrubbingEnabled write set_ScrubbingEnabled;
    property IsMuted: Boolean read get_IsMuted write set_IsMuted;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Position: DDN.mscorlib.DNTimeSpan read get_Position write set_Position;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property Clock: DNMediaClock read get_Clock write set_Clock;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMediaPlayer = class(TDNGenericImport<DNMediaPlayerClass, DNMediaPlayer>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureClass = interface(DNAnimatableClass)
  ['{3DFE0F27-533A-515B-A032-37783F8B476C}']
  { constructors } 

    {class} function init: DNPathFigure; overload;
    {class} function init(start: DDN.System.Windows.Common.DNPoint; segments: DDN.mscorlib.DNIEnumerable<DNPathSegment>; closed: Boolean): DNPathFigure; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsFilledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SegmentsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsClosedProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property StartPointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StartPointProperty;
    {class} property IsFilledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFilledProperty;
    {class} property SegmentsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SegmentsProperty;
    {class} property IsClosedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsClosedProperty;

  end;

  [DNTypeName('System.Windows.Media.PathFigure')]
  DNPathFigure = interface(DNAnimatable)
  ['{1EB598DC-FFA4-3096-8CAC-1CD09C7E0AE7}']
  { getters & setters } 

    function get_StartPoint: DDN.System.Windows.Common.DNPoint;
    procedure set_StartPoint(value: DDN.System.Windows.Common.DNPoint);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_Segments: DNPathSegmentCollection;
    procedure set_Segments(value: DNPathSegmentCollection);
    function get_IsClosed: Boolean;
    procedure set_IsClosed(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathFigure;
    function CloneCurrentValue: DNPathFigure;
    function GetFlattenedPathFigure(tolerance: Double; &type: DNToleranceType): DNPathFigure; overload;
    function GetFlattenedPathFigure: DNPathFigure; overload;
    function MayHaveCurves: Boolean;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StartPoint: DDN.System.Windows.Common.DNPoint read get_StartPoint write set_StartPoint;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property Segments: DNPathSegmentCollection read get_Segments write set_Segments;
    property IsClosed: Boolean read get_IsClosed write set_IsClosed;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPathFigure = class(TDNGenericImport<DNPathFigureClass, DNPathFigure>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathFigureCollectionClass = interface(DNAnimatableClass)
  ['{9D8E1809-8828-5F22-B5CB-DF2BD60E491C}']
  { constructors } 

    {class} function init: DNPathFigureCollection; overload;
    {class} function init(capacity: Int32): DNPathFigureCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPathFigure>): DNPathFigureCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNPathFigureCollection;

  end;

  [DNTypeName('System.Windows.Media.PathFigureCollection')]
  DNPathFigureCollection = interface(DNAnimatable)
  ['{59CC3F0B-C6AB-37F4-A5F3-59F0F1626E83}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathFigureCollection;
    function CloneCurrentValue: DNPathFigureCollection;
    function &Contains(value: DNPathFigure): Boolean;
    function IndexOf(value: DNPathFigure): Int32;
    procedure Insert(index: Int32; value: DNPathFigure);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNPathFigure>; index: Int32);
    function GetEnumerator: DNMedia_PathFigureCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPathFigureCollection = class(TDNGenericImport<DNPathFigureCollectionClass, DNPathFigureCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathSegmentClass = interface(DNAnimatableClass)
  ['{F381A562-B086-5C36-805B-58C1A9FB3C4C}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsStrokedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsSmoothJoinProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property IsStrokedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStrokedProperty;
    {class} property IsSmoothJoinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsSmoothJoinProperty;

  end;

  [DNTypeName('System.Windows.Media.PathSegment')]
  DNPathSegment = interface(DNAnimatable)
  ['{26C4B46D-37A1-34D8-944B-172DB11FDA09}']
  { getters & setters } 

    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNPathSegment;
    function Clone: DNPathSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPathSegment = class(TDNGenericImport<DNPathSegmentClass, DNPathSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNArcSegmentClass = interface(DNPathSegmentClass)
  ['{438D9105-E9B6-577E-A300-1140C0B9A365}']
  { constructors } 

    {class} function init: DNArcSegment; overload;
    {class} function init(point: DDN.System.Windows.Common.DNPoint; size: DDN.System.Windows.Common.DNSize; rotationAngle: Double; isLargeArc: Boolean; sweepDirection: DNSweepDirection; isStroked: Boolean): DNArcSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PointProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SizeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RotationAngleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsLargeArcProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SweepDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PointProperty;
    {class} property SizeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SizeProperty;
    {class} property RotationAngleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RotationAngleProperty;
    {class} property IsLargeArcProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsLargeArcProperty;
    {class} property SweepDirectionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SweepDirectionProperty;

  end;

  [DNTypeName('System.Windows.Media.ArcSegment')]
  DNArcSegment = interface(DNPathSegment)
  ['{E86DC6A5-78CE-3440-9463-49C0C7E7AEFA}']
  { getters & setters } 

    function get_Point: DDN.System.Windows.Common.DNPoint;
    procedure set_Point(value: DDN.System.Windows.Common.DNPoint);
    function get_Size: DDN.System.Windows.Common.DNSize;
    procedure set_Size(value: DDN.System.Windows.Common.DNSize);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_IsLargeArc: Boolean;
    procedure set_IsLargeArc(value: Boolean);
    function get_SweepDirection: DNSweepDirection;
    procedure set_SweepDirection(value: DNSweepDirection);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNArcSegment;
    function Clone: DNArcSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Point: DDN.System.Windows.Common.DNPoint read get_Point write set_Point;
    property Size: DDN.System.Windows.Common.DNSize read get_Size write set_Size;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property IsLargeArc: Boolean read get_IsLargeArc write set_IsLargeArc;
    property SweepDirection: DNSweepDirection read get_SweepDirection write set_SweepDirection;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNArcSegment = class(TDNGenericImport<DNArcSegmentClass, DNArcSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNBezierSegmentClass = interface(DNPathSegmentClass)
  ['{EB64BB3F-19EB-5079-9452-8546DDFFD989}']
  { constructors } 

    {class} function init: DNBezierSegment; overload;
    {class} function init(point1: DDN.System.Windows.Common.DNPoint; point2: DDN.System.Windows.Common.DNPoint; point3: DDN.System.Windows.Common.DNPoint; isStroked: Boolean): DNBezierSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Point1Property: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_Point2Property: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_Point3Property: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property Point1Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Point1Property;
    {class} property Point2Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Point2Property;
    {class} property Point3Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Point3Property;

  end;

  [DNTypeName('System.Windows.Media.BezierSegment')]
  DNBezierSegment = interface(DNPathSegment)
  ['{F951EB5B-B4BE-3F97-BE9B-F5D0B2FA3436}']
  { getters & setters } 

    function get_Point1: DDN.System.Windows.Common.DNPoint;
    procedure set_Point1(value: DDN.System.Windows.Common.DNPoint);
    function get_Point2: DDN.System.Windows.Common.DNPoint;
    procedure set_Point2(value: DDN.System.Windows.Common.DNPoint);
    function get_Point3: DDN.System.Windows.Common.DNPoint;
    procedure set_Point3(value: DDN.System.Windows.Common.DNPoint);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBezierSegment;
    function CloneCurrentValue: DNBezierSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Point1: DDN.System.Windows.Common.DNPoint read get_Point1 write set_Point1;
    property Point2: DDN.System.Windows.Common.DNPoint read get_Point2 write set_Point2;
    property Point3: DDN.System.Windows.Common.DNPoint read get_Point3 write set_Point3;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBezierSegment = class(TDNGenericImport<DNBezierSegmentClass, DNBezierSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNLineSegmentClass = interface(DNPathSegmentClass)
  ['{F85F05E8-CBC9-5E3F-A6AE-DED390DCAF6F}']
  { constructors } 

    {class} function init: DNLineSegment; overload;
    {class} function init(point: DDN.System.Windows.Common.DNPoint; isStroked: Boolean): DNLineSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PointProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PointProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PointProperty;

  end;

  [DNTypeName('System.Windows.Media.LineSegment')]
  DNLineSegment = interface(DNPathSegment)
  ['{FF2EB201-E7F8-3946-971F-C0140E7F447B}']
  { getters & setters } 

    function get_Point: DDN.System.Windows.Common.DNPoint;
    procedure set_Point(value: DDN.System.Windows.Common.DNPoint);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNLineSegment;
    function CloneCurrentValue: DNLineSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Point: DDN.System.Windows.Common.DNPoint read get_Point write set_Point;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLineSegment = class(TDNGenericImport<DNLineSegmentClass, DNLineSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPolyBezierSegmentClass = interface(DNPathSegmentClass)
  ['{2A451E32-DC52-5D00-B483-7D089A0694EB}']
  { constructors } 

    {class} function init: DNPolyBezierSegment; overload;
    {class} function init(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean): DNPolyBezierSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PointsProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PointsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PointsProperty;

  end;

  [DNTypeName('System.Windows.Media.PolyBezierSegment')]
  DNPolyBezierSegment = interface(DNPathSegment)
  ['{D0E14857-1EC5-30E8-B461-2640368D7263}']
  { getters & setters } 

    function get_Points: DNPointCollection;
    procedure set_Points(value: DNPointCollection);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNPolyBezierSegment;
    function Clone: DNPolyBezierSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: DNPointCollection read get_Points write set_Points;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPolyBezierSegment = class(TDNGenericImport<DNPolyBezierSegmentClass, DNPolyBezierSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPolyLineSegmentClass = interface(DNPathSegmentClass)
  ['{F8E05A63-C31C-5550-99A8-2164EC6427ED}']
  { constructors } 

    {class} function init: DNPolyLineSegment; overload;
    {class} function init(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean): DNPolyLineSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PointsProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PointsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PointsProperty;

  end;

  [DNTypeName('System.Windows.Media.PolyLineSegment')]
  DNPolyLineSegment = interface(DNPathSegment)
  ['{7EEA5448-DA22-33ED-B44A-717FEE02426C}']
  { getters & setters } 

    function get_Points: DNPointCollection;
    procedure set_Points(value: DNPointCollection);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNPolyLineSegment;
    function Clone: DNPolyLineSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: DNPointCollection read get_Points write set_Points;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPolyLineSegment = class(TDNGenericImport<DNPolyLineSegmentClass, DNPolyLineSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPolyQuadraticBezierSegmentClass = interface(DNPathSegmentClass)
  ['{0F354B0B-9160-5F95-B4FD-277ACE36AC39}']
  { constructors } 

    {class} function init: DNPolyQuadraticBezierSegment; overload;
    {class} function init(points: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean): DNPolyQuadraticBezierSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PointsProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PointsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PointsProperty;

  end;

  [DNTypeName('System.Windows.Media.PolyQuadraticBezierSegment')]
  DNPolyQuadraticBezierSegment = interface(DNPathSegment)
  ['{AF33006D-1E73-3577-9A0C-7A17A87F1066}']
  { getters & setters } 

    function get_Points: DNPointCollection;
    procedure set_Points(value: DNPointCollection);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPolyQuadraticBezierSegment;
    function CloneCurrentValue: DNPolyQuadraticBezierSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: DNPointCollection read get_Points write set_Points;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPolyQuadraticBezierSegment = class(TDNGenericImport<DNPolyQuadraticBezierSegmentClass, DNPolyQuadraticBezierSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNQuadraticBezierSegmentClass = interface(DNPathSegmentClass)
  ['{729695D5-B97B-5B17-94E6-85C22B3F6E62}']
  { constructors } 

    {class} function init: DNQuadraticBezierSegment; overload;
    {class} function init(point1: DDN.System.Windows.Common.DNPoint; point2: DDN.System.Windows.Common.DNPoint; isStroked: Boolean): DNQuadraticBezierSegment; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Point1Property: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_Point2Property: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property Point1Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Point1Property;
    {class} property Point2Property: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_Point2Property;

  end;

  [DNTypeName('System.Windows.Media.QuadraticBezierSegment')]
  DNQuadraticBezierSegment = interface(DNPathSegment)
  ['{C3CD7C49-73E1-3DF5-90F9-50F2FB528749}']
  { getters & setters } 

    function get_Point1: DDN.System.Windows.Common.DNPoint;
    procedure set_Point1(value: DDN.System.Windows.Common.DNPoint);
    function get_Point2: DDN.System.Windows.Common.DNPoint;
    procedure set_Point2(value: DDN.System.Windows.Common.DNPoint);
    function get_IsStroked: Boolean;
    procedure set_IsStroked(value: Boolean);
    function get_IsSmoothJoin: Boolean;
    procedure set_IsSmoothJoin(value: Boolean);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNQuadraticBezierSegment;
    function CloneCurrentValue: DNQuadraticBezierSegment;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Point1: DDN.System.Windows.Common.DNPoint read get_Point1 write set_Point1;
    property Point2: DDN.System.Windows.Common.DNPoint read get_Point2 write set_Point2;
    property IsStroked: Boolean read get_IsStroked write set_IsStroked;
    property IsSmoothJoin: Boolean read get_IsSmoothJoin write set_IsSmoothJoin;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuadraticBezierSegment = class(TDNGenericImport<DNQuadraticBezierSegmentClass, DNQuadraticBezierSegment>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPathSegmentCollectionClass = interface(DNAnimatableClass)
  ['{61C7F33F-3F30-5A4A-8546-AC40B6BFE9BC}']
  { constructors } 

    {class} function init: DNPathSegmentCollection; overload;
    {class} function init(capacity: Int32): DNPathSegmentCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPathSegment>): DNPathSegmentCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.PathSegmentCollection')]
  DNPathSegmentCollection = interface(DNAnimatable)
  ['{C75B0044-5748-3AA0-99FC-4D9CFE7EBD0F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPathSegmentCollection;
    function CloneCurrentValue: DNPathSegmentCollection;
    function &Contains(value: DNPathSegment): Boolean;
    function IndexOf(value: DNPathSegment): Int32;
    procedure Insert(index: Int32; value: DNPathSegment);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNPathSegment>; index: Int32);
    function GetEnumerator: DNMedia_PathSegmentCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPathSegmentCollection = class(TDNGenericImport<DNPathSegmentCollectionClass, DNPathSegmentCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPenClass = interface(DNAnimatableClass)
  ['{8C4504AA-3CBF-51A6-A3D0-54BC48AC197C}']
  { constructors } 

    {class} function init: DNPen; overload;
    {class} function init(brush: DNBrush; thickness: Double): DNPen; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_BrushProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ThicknessProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_StartLineCapProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EndLineCapProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DashCapProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LineJoinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_MiterLimitProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_DashStyleProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property BrushProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BrushProperty;
    {class} property ThicknessProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ThicknessProperty;
    {class} property StartLineCapProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_StartLineCapProperty;
    {class} property EndLineCapProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EndLineCapProperty;
    {class} property DashCapProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DashCapProperty;
    {class} property LineJoinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LineJoinProperty;
    {class} property MiterLimitProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MiterLimitProperty;
    {class} property DashStyleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_DashStyleProperty;

  end;

  [DNTypeName('System.Windows.Media.Pen')]
  DNPen = interface(DNAnimatable)
  ['{9A3B6F90-CFA7-3BA4-8C84-E3A1303E62A6}']
  { getters & setters } 

    function get_Brush: DNBrush;
    procedure set_Brush(value: DNBrush);
    function get_Thickness: Double;
    procedure set_Thickness(value: Double);
    function get_StartLineCap: DNPenLineCap;
    procedure set_StartLineCap(value: DNPenLineCap);
    function get_EndLineCap: DNPenLineCap;
    procedure set_EndLineCap(value: DNPenLineCap);
    function get_DashCap: DNPenLineCap;
    procedure set_DashCap(value: DNPenLineCap);
    function get_LineJoin: DNPenLineJoin;
    procedure set_LineJoin(value: DNPenLineJoin);
    function get_MiterLimit: Double;
    procedure set_MiterLimit(value: Double);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPen;
    function CloneCurrentValue: DNPen;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Brush: DNBrush read get_Brush write set_Brush;
    property Thickness: Double read get_Thickness write set_Thickness;
    property StartLineCap: DNPenLineCap read get_StartLineCap write set_StartLineCap;
    property EndLineCap: DNPenLineCap read get_EndLineCap write set_EndLineCap;
    property DashCap: DNPenLineCap read get_DashCap write set_DashCap;
    property LineJoin: DNPenLineJoin read get_LineJoin write set_LineJoin;
    property MiterLimit: Double read get_MiterLimit write set_MiterLimit;
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPen = class(TDNGenericImport<DNPenClass, DNPen>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTextEffectClass = interface(DNAnimatableClass)
  ['{086008F1-9659-54D4-B701-86EAB804E752}']
  { constructors } 

    {class} function init(transform: DNTransform; foreground: DNBrush; clip: DNGeometry; positionStart: Int32; positionCount: Int32): DNTextEffect; overload;
    {class} function init: DNTextEffect; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ClipProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ForegroundProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PositionStartProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PositionCountProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;
    {class} property ClipProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ClipProperty;
    {class} property ForegroundProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ForegroundProperty;
    {class} property PositionStartProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionStartProperty;
    {class} property PositionCountProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PositionCountProperty;

  end;

  [DNTypeName('System.Windows.Media.TextEffect')]
  DNTextEffect = interface(DNAnimatable)
  ['{8D894F25-A058-35EB-B6D4-4B9AF9FE9CD8}']
  { getters & setters } 

    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Foreground: DNBrush;
    procedure set_Foreground(value: DNBrush);
    function get_PositionStart: Int32;
    procedure set_PositionStart(value: Int32);
    function get_PositionCount: Int32;
    procedure set_PositionCount(value: Int32);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTextEffect;
    function CloneCurrentValue: DNTextEffect;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transform: DNTransform read get_Transform write set_Transform;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Foreground: DNBrush read get_Foreground write set_Foreground;
    property PositionStart: Int32 read get_PositionStart write set_PositionStart;
    property PositionCount: Int32 read get_PositionCount write set_PositionCount;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextEffect = class(TDNGenericImport<DNTextEffectClass, DNTextEffect>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTextEffectCollectionClass = interface(DNAnimatableClass)
  ['{C0AEAFEE-2547-56D4-9403-FDFDBBEE9573}']
  { constructors } 

    {class} function init: DNTextEffectCollection; overload;
    {class} function init(capacity: Int32): DNTextEffectCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTextEffect>): DNTextEffectCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.TextEffectCollection')]
  DNTextEffectCollection = interface(DNAnimatable)
  ['{362F0B0E-6841-3BF8-BFA3-33AF0F061F79}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNTextEffectCollection;
    function CloneCurrentValue: DNTextEffectCollection;
    function &Contains(value: DNTextEffect): Boolean;
    function IndexOf(value: DNTextEffect): Int32;
    procedure Insert(index: Int32; value: DNTextEffect);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTextEffect>; index: Int32);
    function GetEnumerator: DNMedia_TextEffectCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextEffectCollection = class(TDNGenericImport<DNTextEffectCollectionClass, DNTextEffectCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNTransformCollectionClass = interface(DNAnimatableClass)
  ['{0FA8049B-DFB4-543F-AACA-49C777EF8FDA}']
  { constructors } 

    {class} function init: DNTransformCollection; overload;
    {class} function init(capacity: Int32): DNTransformCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTransform>): DNTransformCollection; overload;

  end;

  [DNTypeName('System.Windows.Media.TransformCollection')]
  DNTransformCollection = interface(DNAnimatable)
  ['{BEEDE321-5244-37FE-A77C-40B8F012EC5C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNTransformCollection;
    function Clone: DNTransformCollection;
    function &Contains(value: DNTransform): Boolean;
    function IndexOf(value: DNTransform): Int32;
    procedure Insert(index: Int32; value: DNTransform);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTransform>; index: Int32);
    function GetEnumerator: DNMedia_TransformCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTransformCollection = class(TDNGenericImport<DNTransformCollectionClass, DNTransformCollection>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationClass = interface(DNAnimatableClass)
  ['{40C47789-F2CB-5825-9D65-7C382A51C352}']
  { constructors } 

    {class} function init: DNTextDecoration; overload;
    {class} function init(location: DNTextDecorationLocation; pen: DNPen; penOffset: Double; penOffsetUnit: DNTextDecorationUnit; penThicknessUnit: DNTextDecorationUnit): DNTextDecoration; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PenProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PenOffsetProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PenOffsetUnitProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PenThicknessUnitProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_LocationProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PenProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PenProperty;
    {class} property PenOffsetProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PenOffsetProperty;
    {class} property PenOffsetUnitProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PenOffsetUnitProperty;
    {class} property PenThicknessUnitProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PenThicknessUnitProperty;
    {class} property LocationProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_LocationProperty;

  end;

  [DNTypeName('System.Windows.TextDecoration')]
  DNTextDecoration = interface(DNAnimatable)
  ['{4C637899-C808-3723-A5D5-B346DD2D0383}']
  { getters & setters } 

    function get_Pen: DNPen;
    procedure set_Pen(value: DNPen);
    function get_PenOffset: Double;
    procedure set_PenOffset(value: Double);
    function get_PenOffsetUnit: DNTextDecorationUnit;
    procedure set_PenOffsetUnit(value: DNTextDecorationUnit);
    function get_PenThicknessUnit: DNTextDecorationUnit;
    procedure set_PenThicknessUnit(value: DNTextDecorationUnit);
    function get_Location: DNTextDecorationLocation;
    procedure set_Location(value: DNTextDecorationLocation);
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloneCurrentValue: DNTextDecoration;
    function Clone: DNTextDecoration;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pen: DNPen read get_Pen write set_Pen;
    property PenOffset: Double read get_PenOffset write set_PenOffset;
    property PenOffsetUnit: DNTextDecorationUnit read get_PenOffsetUnit write set_PenOffsetUnit;
    property PenThicknessUnit: DNTextDecorationUnit read get_PenThicknessUnit write set_PenThicknessUnit;
    property Location: DNTextDecorationLocation read get_Location write set_Location;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextDecoration = class(TDNGenericImport<DNTextDecorationClass, DNTextDecoration>) end;

  //-------------namespace: System.Windows----------------
  DNTextDecorationCollectionClass = interface(DNAnimatableClass)
  ['{14FA1CF8-F01B-5AA1-86A6-A837E1C8E436}']
  { constructors } 

    {class} function init: DNTextDecorationCollection; overload;
    {class} function init(capacity: Int32): DNTextDecorationCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNTextDecoration>): DNTextDecorationCollection; overload;

  end;

  [DNTypeName('System.Windows.TextDecorationCollection')]
  DNTextDecorationCollection = interface(DNAnimatable)
  ['{0F6B3A3A-51C1-370B-9276-B64D41AD5A79}']
  { getters & setters } 

    function get_Count: Int32;
    function get_HasAnimatedProperties: Boolean;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(textDecorations: DDN.mscorlib.DNIEnumerable<DNTextDecoration>);
    function TryRemove(textDecorations: DDN.mscorlib.DNIEnumerable<DNTextDecoration>; out result: DNTextDecorationCollection): Boolean;
    function Clone: DNTextDecorationCollection;
    function CloneCurrentValue: DNTextDecorationCollection;
    function &Contains(value: DNTextDecoration): Boolean;
    function IndexOf(value: DNTextDecoration): Int32;
    procedure Insert(index: Int32; value: DNTextDecoration);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNTextDecoration>; index: Int32);
    function GetEnumerator: DNWindows_TextDecorationCollection_Enumerator;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextDecorationCollection = class(TDNGenericImport<DNTextDecorationCollectionClass, DNTextDecorationCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBooleanKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{09C5D761-F747-53B3-90B9-EF19F7BD6126}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.BooleanKeyFrame')]
  DNBooleanKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{C56175FC-5A9B-369A-AEA7-6096A17E9EEF}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Boolean; keyFrameProgress: Double): Boolean;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Boolean read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBooleanKeyFrame = class(TDNGenericImport<DNBooleanKeyFrameClass, DNBooleanKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteBooleanKeyFrameClass = interface(DNBooleanKeyFrameClass)
  ['{FA91CECB-2816-5C95-A932-CC63723DE6AE}']
  { constructors } 

    {class} function init: DNDiscreteBooleanKeyFrame; overload;
    {class} function init(value: Boolean): DNDiscreteBooleanKeyFrame; overload;
    {class} function init(value: Boolean; keyTime: DNKeyTime): DNDiscreteBooleanKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteBooleanKeyFrame')]
  DNDiscreteBooleanKeyFrame = interface(DNBooleanKeyFrame)
  ['{C4E6BBF9-A4E5-3A59-AEDC-99C300AC0916}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Boolean; keyFrameProgress: Double): Boolean;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Boolean read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteBooleanKeyFrame = class(TDNGenericImport<DNDiscreteBooleanKeyFrameClass, DNDiscreteBooleanKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBooleanKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{2DF4133D-834E-5F35-A281-B7B0AAE96BA6}']
  { static getter & setter } 

    {class} function get_Empty: DNBooleanKeyFrameCollection;

  { constructors } 

    {class} function init: DNBooleanKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNBooleanKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.BooleanKeyFrameCollection')]
  DNBooleanKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{412D39D8-55A1-3B1B-8EB0-1B138567EBF2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNBooleanKeyFrame;
    procedure set_Item(index: Int32; value: DNBooleanKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBooleanKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNBooleanKeyFrame>; index: Int32);
    function Add(keyFrame: DNBooleanKeyFrame): Int32;
    function &Contains(keyFrame: DNBooleanKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNBooleanKeyFrame);
    procedure Remove(keyFrame: DNBooleanKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNBooleanKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNBooleanKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBooleanKeyFrameCollection = class(TDNGenericImport<DNBooleanKeyFrameCollectionClass, DNBooleanKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNByteKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{98A13606-DCFD-5E82-8AAA-0EB59D319F92}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ByteKeyFrame')]
  DNByteKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{21DA7581-A2A7-38A5-A08A-20008F7D4F04}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Byte;
    procedure set_Value(value: Byte);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Byte; keyFrameProgress: Double): Byte;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Byte read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNByteKeyFrame = class(TDNGenericImport<DNByteKeyFrameClass, DNByteKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteByteKeyFrameClass = interface(DNByteKeyFrameClass)
  ['{21379D0C-82C6-52D2-99E0-29F5A1484D2D}']
  { constructors } 

    {class} function init: DNDiscreteByteKeyFrame; overload;
    {class} function init(value: Byte): DNDiscreteByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime): DNDiscreteByteKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteByteKeyFrame')]
  DNDiscreteByteKeyFrame = interface(DNByteKeyFrame)
  ['{57FB0855-F76A-3AF4-9601-B99648CA10F3}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Byte;
    procedure set_Value(value: Byte);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Byte; keyFrameProgress: Double): Byte;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Byte read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteByteKeyFrame = class(TDNGenericImport<DNDiscreteByteKeyFrameClass, DNDiscreteByteKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingByteKeyFrameClass = interface(DNByteKeyFrameClass)
  ['{0C775115-3A67-5766-80A8-54043D7D1121}']
  { constructors } 

    {class} function init: DNEasingByteKeyFrame; overload;
    {class} function init(value: Byte): DNEasingByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime): DNEasingByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingByteKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingByteKeyFrame')]
  DNEasingByteKeyFrame = interface(DNByteKeyFrame)
  ['{9719E29C-123D-3851-BD1E-67D5B7249563}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Byte;
    procedure set_Value(value: Byte);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Byte; keyFrameProgress: Double): Byte;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Byte read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingByteKeyFrame = class(TDNGenericImport<DNEasingByteKeyFrameClass, DNEasingByteKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearByteKeyFrameClass = interface(DNByteKeyFrameClass)
  ['{429BBDC7-5AA2-5BD8-9EDE-2D23C6783F18}']
  { constructors } 

    {class} function init: DNLinearByteKeyFrame; overload;
    {class} function init(value: Byte): DNLinearByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime): DNLinearByteKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearByteKeyFrame')]
  DNLinearByteKeyFrame = interface(DNByteKeyFrame)
  ['{394CF067-210D-307A-AA98-09CAC54AD3DC}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Byte;
    procedure set_Value(value: Byte);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Byte; keyFrameProgress: Double): Byte;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Byte read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearByteKeyFrame = class(TDNGenericImport<DNLinearByteKeyFrameClass, DNLinearByteKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineByteKeyFrameClass = interface(DNByteKeyFrameClass)
  ['{A9983748-B997-5A3E-B247-970B72041B8F}']
  { constructors } 

    {class} function init: DNSplineByteKeyFrame; overload;
    {class} function init(value: Byte): DNSplineByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime): DNSplineByteKeyFrame; overload;
    {class} function init(value: Byte; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineByteKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineByteKeyFrame')]
  DNSplineByteKeyFrame = interface(DNByteKeyFrame)
  ['{339BE13E-2E85-3FEB-9BF5-96F1D1992518}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Byte;
    procedure set_Value(value: Byte);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Byte; keyFrameProgress: Double): Byte;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Byte read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineByteKeyFrame = class(TDNGenericImport<DNSplineByteKeyFrameClass, DNSplineByteKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNByteKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{8F1E8988-BFA5-5C8D-8556-F8FA6CB05434}']
  { static getter & setter } 

    {class} function get_Empty: DNByteKeyFrameCollection;

  { constructors } 

    {class} function init: DNByteKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNByteKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.ByteKeyFrameCollection')]
  DNByteKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{408CA44C-08F4-3F92-9F6C-F2AB69E8C6DB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNByteKeyFrame;
    procedure set_Item(index: Int32; value: DNByteKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNByteKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNByteKeyFrame>; index: Int32);
    function Add(keyFrame: DNByteKeyFrame): Int32;
    function &Contains(keyFrame: DNByteKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNByteKeyFrame);
    procedure Remove(keyFrame: DNByteKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNByteKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNByteKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNByteKeyFrameCollection = class(TDNGenericImport<DNByteKeyFrameCollectionClass, DNByteKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCharKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{C5FD6BE6-8F07-58A4-9BF5-F5E6C906A3A8}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.CharKeyFrame')]
  DNCharKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{3D4E2E81-EEE1-3B3C-8CE0-DB127EEB425F}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Char;
    procedure set_Value(value: Char);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Char; keyFrameProgress: Double): Char;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Char read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCharKeyFrame = class(TDNGenericImport<DNCharKeyFrameClass, DNCharKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteCharKeyFrameClass = interface(DNCharKeyFrameClass)
  ['{7BB44225-F6B1-5EB1-AA86-3FE21E81DBED}']
  { constructors } 

    {class} function init: DNDiscreteCharKeyFrame; overload;
    {class} function init(value: Char): DNDiscreteCharKeyFrame; overload;
    {class} function init(value: Char; keyTime: DNKeyTime): DNDiscreteCharKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteCharKeyFrame')]
  DNDiscreteCharKeyFrame = interface(DNCharKeyFrame)
  ['{21B5DE22-6ECD-3564-BC80-D6E2DD949C9A}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Char;
    procedure set_Value(value: Char);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Char; keyFrameProgress: Double): Char;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Char read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteCharKeyFrame = class(TDNGenericImport<DNDiscreteCharKeyFrameClass, DNDiscreteCharKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCharKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{C7FB299B-BC3F-5789-B4B8-6FEF4975903D}']
  { static getter & setter } 

    {class} function get_Empty: DNCharKeyFrameCollection;

  { constructors } 

    {class} function init: DNCharKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNCharKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.CharKeyFrameCollection')]
  DNCharKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{14B4BA7F-280F-3FBC-BA66-199D0E472095}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNCharKeyFrame;
    procedure set_Item(index: Int32; value: DNCharKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNCharKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNCharKeyFrame>; index: Int32);
    function Add(keyFrame: DNCharKeyFrame): Int32;
    function &Contains(keyFrame: DNCharKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNCharKeyFrame);
    procedure Remove(keyFrame: DNCharKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNCharKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNCharKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCharKeyFrameCollection = class(TDNGenericImport<DNCharKeyFrameCollectionClass, DNCharKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNColorKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{71C9D3F1-8EAD-5C86-9F50-A6DC8364BA5C}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ColorKeyFrame')]
  DNColorKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{222C8447-0D3B-3AF9-BD28-54D9245C5E9E}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNColor;
    procedure set_Value(value: DNColor);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNColor; keyFrameProgress: Double): DNColor;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNColor read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorKeyFrame = class(TDNGenericImport<DNColorKeyFrameClass, DNColorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteColorKeyFrameClass = interface(DNColorKeyFrameClass)
  ['{DB5FC3AA-FD21-5C3D-8863-841190CD6CDD}']
  { constructors } 

    {class} function init: DNDiscreteColorKeyFrame; overload;
    {class} function init(value: DNColor): DNDiscreteColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime): DNDiscreteColorKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteColorKeyFrame')]
  DNDiscreteColorKeyFrame = interface(DNColorKeyFrame)
  ['{AAE392D9-08C6-31A1-AA27-E45787277731}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNColor;
    procedure set_Value(value: DNColor);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNColor; keyFrameProgress: Double): DNColor;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNColor read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteColorKeyFrame = class(TDNGenericImport<DNDiscreteColorKeyFrameClass, DNDiscreteColorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingColorKeyFrameClass = interface(DNColorKeyFrameClass)
  ['{368A2C62-7B6F-5360-A033-179CB29F39B4}']
  { constructors } 

    {class} function init: DNEasingColorKeyFrame; overload;
    {class} function init(value: DNColor): DNEasingColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime): DNEasingColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingColorKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingColorKeyFrame')]
  DNEasingColorKeyFrame = interface(DNColorKeyFrame)
  ['{D76EE14F-8F5D-303A-B56C-F28304BC9297}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNColor;
    procedure set_Value(value: DNColor);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNColor; keyFrameProgress: Double): DNColor;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNColor read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingColorKeyFrame = class(TDNGenericImport<DNEasingColorKeyFrameClass, DNEasingColorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearColorKeyFrameClass = interface(DNColorKeyFrameClass)
  ['{3ED068E5-5DF8-53FD-BFBE-F88C32262E30}']
  { constructors } 

    {class} function init: DNLinearColorKeyFrame; overload;
    {class} function init(value: DNColor): DNLinearColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime): DNLinearColorKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearColorKeyFrame')]
  DNLinearColorKeyFrame = interface(DNColorKeyFrame)
  ['{E0B9F3AA-E3A3-3054-82F6-A902F5B9DC47}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNColor;
    procedure set_Value(value: DNColor);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNColor; keyFrameProgress: Double): DNColor;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNColor read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearColorKeyFrame = class(TDNGenericImport<DNLinearColorKeyFrameClass, DNLinearColorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineColorKeyFrameClass = interface(DNColorKeyFrameClass)
  ['{EEA38F0F-CF0C-553D-9797-2353EDA99F0C}']
  { constructors } 

    {class} function init: DNSplineColorKeyFrame; overload;
    {class} function init(value: DNColor): DNSplineColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime): DNSplineColorKeyFrame; overload;
    {class} function init(value: DNColor; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineColorKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineColorKeyFrame')]
  DNSplineColorKeyFrame = interface(DNColorKeyFrame)
  ['{558BC33E-2C7B-37CC-BB9C-9A1251C3A394}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNColor;
    procedure set_Value(value: DNColor);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNColor; keyFrameProgress: Double): DNColor;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNColor read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineColorKeyFrame = class(TDNGenericImport<DNSplineColorKeyFrameClass, DNSplineColorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNColorKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{DBBE4021-96B6-5F05-AE1C-8140D5665683}']
  { static getter & setter } 

    {class} function get_Empty: DNColorKeyFrameCollection;

  { constructors } 

    {class} function init: DNColorKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNColorKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.ColorKeyFrameCollection')]
  DNColorKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{DEC4BC4B-ED64-391C-9DC3-9AF750D5B690}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNColorKeyFrame;
    procedure set_Item(index: Int32; value: DNColorKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNColorKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNColorKeyFrame>; index: Int32);
    function Add(keyFrame: DNColorKeyFrame): Int32;
    function &Contains(keyFrame: DNColorKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNColorKeyFrame);
    procedure Remove(keyFrame: DNColorKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNColorKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNColorKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNColorKeyFrameCollection = class(TDNGenericImport<DNColorKeyFrameCollectionClass, DNColorKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDecimalKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{FF70F679-3990-5306-9B93-40CA8C68306E}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.DecimalKeyFrame')]
  DNDecimalKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{AD57E651-15CE-3011-88F0-209CD414FB61}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNDecimal;
    procedure set_Value(value: DDN.mscorlib.DNDecimal);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNDecimal; keyFrameProgress: Double): DDN.mscorlib.DNDecimal;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNDecimal read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDecimalKeyFrame = class(TDNGenericImport<DNDecimalKeyFrameClass, DNDecimalKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteDecimalKeyFrameClass = interface(DNDecimalKeyFrameClass)
  ['{4A2DAF04-7ED6-5C2C-9D4B-9FF37693B7B8}']
  { constructors } 

    {class} function init: DNDiscreteDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal): DNDiscreteDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime): DNDiscreteDecimalKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteDecimalKeyFrame')]
  DNDiscreteDecimalKeyFrame = interface(DNDecimalKeyFrame)
  ['{4BD8362C-549F-3F49-B48A-4F70C92CF191}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNDecimal;
    procedure set_Value(value: DDN.mscorlib.DNDecimal);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNDecimal; keyFrameProgress: Double): DDN.mscorlib.DNDecimal;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNDecimal read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteDecimalKeyFrame = class(TDNGenericImport<DNDiscreteDecimalKeyFrameClass, DNDiscreteDecimalKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingDecimalKeyFrameClass = interface(DNDecimalKeyFrameClass)
  ['{99D3CB2A-9707-57E5-9659-73664B53782A}']
  { constructors } 

    {class} function init: DNEasingDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal): DNEasingDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime): DNEasingDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingDecimalKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingDecimalKeyFrame')]
  DNEasingDecimalKeyFrame = interface(DNDecimalKeyFrame)
  ['{64351BB2-D00C-3537-AABD-15A2E95A333E}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNDecimal;
    procedure set_Value(value: DDN.mscorlib.DNDecimal);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNDecimal; keyFrameProgress: Double): DDN.mscorlib.DNDecimal;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNDecimal read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingDecimalKeyFrame = class(TDNGenericImport<DNEasingDecimalKeyFrameClass, DNEasingDecimalKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearDecimalKeyFrameClass = interface(DNDecimalKeyFrameClass)
  ['{D3A3E284-2AAA-5270-AAE7-2B16920B37C8}']
  { constructors } 

    {class} function init: DNLinearDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal): DNLinearDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime): DNLinearDecimalKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearDecimalKeyFrame')]
  DNLinearDecimalKeyFrame = interface(DNDecimalKeyFrame)
  ['{ED62010C-5BCD-3870-9C35-0084964DBC8A}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNDecimal;
    procedure set_Value(value: DDN.mscorlib.DNDecimal);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNDecimal; keyFrameProgress: Double): DDN.mscorlib.DNDecimal;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNDecimal read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearDecimalKeyFrame = class(TDNGenericImport<DNLinearDecimalKeyFrameClass, DNLinearDecimalKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineDecimalKeyFrameClass = interface(DNDecimalKeyFrameClass)
  ['{4764AEA1-EBE5-5190-8B80-D8A890DD7ED5}']
  { constructors } 

    {class} function init: DNSplineDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal): DNSplineDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime): DNSplineDecimalKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNDecimal; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineDecimalKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineDecimalKeyFrame')]
  DNSplineDecimalKeyFrame = interface(DNDecimalKeyFrame)
  ['{97AC5476-67BF-3452-892F-B1A214B6DF92}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNDecimal;
    procedure set_Value(value: DDN.mscorlib.DNDecimal);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNDecimal; keyFrameProgress: Double): DDN.mscorlib.DNDecimal;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNDecimal read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineDecimalKeyFrame = class(TDNGenericImport<DNSplineDecimalKeyFrameClass, DNSplineDecimalKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDecimalKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{3020920A-0B57-526F-AB75-C18727F2D76A}']
  { static getter & setter } 

    {class} function get_Empty: DNDecimalKeyFrameCollection;

  { constructors } 

    {class} function init: DNDecimalKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNDecimalKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.DecimalKeyFrameCollection')]
  DNDecimalKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{7E41482A-2B1D-3792-ADCB-47E600F97B47}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNDecimalKeyFrame;
    procedure set_Item(index: Int32; value: DNDecimalKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDecimalKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNDecimalKeyFrame>; index: Int32);
    function Add(keyFrame: DNDecimalKeyFrame): Int32;
    function &Contains(keyFrame: DNDecimalKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNDecimalKeyFrame);
    procedure Remove(keyFrame: DNDecimalKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNDecimalKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNDecimalKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDecimalKeyFrameCollection = class(TDNGenericImport<DNDecimalKeyFrameCollectionClass, DNDecimalKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{7EA4E260-9AF1-50C2-969F-3327A129F316}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleKeyFrame')]
  DNDoubleKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{4C8E78BB-A917-3DDB-B04E-C573DBF259F3}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Double; keyFrameProgress: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Double read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleKeyFrame = class(TDNGenericImport<DNDoubleKeyFrameClass, DNDoubleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteDoubleKeyFrameClass = interface(DNDoubleKeyFrameClass)
  ['{E0DEB5B0-95E7-5B82-B8EF-C9D014852BBB}']
  { constructors } 

    {class} function init: DNDiscreteDoubleKeyFrame; overload;
    {class} function init(value: Double): DNDiscreteDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime): DNDiscreteDoubleKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteDoubleKeyFrame')]
  DNDiscreteDoubleKeyFrame = interface(DNDoubleKeyFrame)
  ['{CE2DCD41-1A5F-3042-9E7F-DB1AE30C8F9E}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Double; keyFrameProgress: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Double read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteDoubleKeyFrame = class(TDNGenericImport<DNDiscreteDoubleKeyFrameClass, DNDiscreteDoubleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingDoubleKeyFrameClass = interface(DNDoubleKeyFrameClass)
  ['{A9BA6C5C-8268-5E0B-BE0E-CE6AB628EB00}']
  { constructors } 

    {class} function init: DNEasingDoubleKeyFrame; overload;
    {class} function init(value: Double): DNEasingDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime): DNEasingDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingDoubleKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingDoubleKeyFrame')]
  DNEasingDoubleKeyFrame = interface(DNDoubleKeyFrame)
  ['{514AEB7C-1B7F-3B9A-8F14-220FCBD84866}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Double; keyFrameProgress: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Double read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingDoubleKeyFrame = class(TDNGenericImport<DNEasingDoubleKeyFrameClass, DNEasingDoubleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearDoubleKeyFrameClass = interface(DNDoubleKeyFrameClass)
  ['{C47AB221-846B-5979-A5C3-24BFDA276698}']
  { constructors } 

    {class} function init: DNLinearDoubleKeyFrame; overload;
    {class} function init(value: Double): DNLinearDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime): DNLinearDoubleKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearDoubleKeyFrame')]
  DNLinearDoubleKeyFrame = interface(DNDoubleKeyFrame)
  ['{C496DD18-EC28-3970-846B-DADBC4BA0932}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Double; keyFrameProgress: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Double read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearDoubleKeyFrame = class(TDNGenericImport<DNLinearDoubleKeyFrameClass, DNLinearDoubleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineDoubleKeyFrameClass = interface(DNDoubleKeyFrameClass)
  ['{ADD77BCA-CA7C-58AA-A401-158B2DCC90A8}']
  { constructors } 

    {class} function init: DNSplineDoubleKeyFrame; overload;
    {class} function init(value: Double): DNSplineDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime): DNSplineDoubleKeyFrame; overload;
    {class} function init(value: Double; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineDoubleKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineDoubleKeyFrame')]
  DNSplineDoubleKeyFrame = interface(DNDoubleKeyFrame)
  ['{C91FF456-8BD5-3CC6-84A5-91C03BF268B6}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Double; keyFrameProgress: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Double read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineDoubleKeyFrame = class(TDNGenericImport<DNSplineDoubleKeyFrameClass, DNSplineDoubleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDoubleKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{3F5D30A1-00D0-5144-A4F7-E3CBEAEBEE72}']
  { static getter & setter } 

    {class} function get_Empty: DNDoubleKeyFrameCollection;

  { constructors } 

    {class} function init: DNDoubleKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNDoubleKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.DoubleKeyFrameCollection')]
  DNDoubleKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{38CF2B9A-114F-3540-8354-D012DEB0B0F3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNDoubleKeyFrame;
    procedure set_Item(index: Int32; value: DNDoubleKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Add(keyFrame: DNDoubleKeyFrame): Int32;
    function Clone: DNDoubleKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNDoubleKeyFrame>; index: Int32);
    function &Contains(keyFrame: DNDoubleKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNDoubleKeyFrame);
    procedure Remove(keyFrame: DNDoubleKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNDoubleKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNDoubleKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleKeyFrameCollection = class(TDNGenericImport<DNDoubleKeyFrameCollectionClass, DNDoubleKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingFunctionBaseClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{DE4B5581-5DD2-5E49-9CE0-56C6AAB13390}']
  { static fields getter & setter } 

   function __fakeFieldGet_EasingModeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingModeProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingFunctionBase')]
  DNEasingFunctionBase = interface(DDN.System.Windows.Common.DNFreezable)
  ['{AEFE8A59-2932-398F-8440-88F51425FBC8}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingFunctionBase = class(TDNGenericImport<DNEasingFunctionBaseClass, DNEasingFunctionBase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBackEaseClass = interface(DNEasingFunctionBaseClass)
  ['{125030F7-42D3-55E7-8831-94DDA10E59FC}']
  { constructors } 

    {class} function init: DNBackEase;

  { static fields getter & setter } 

   function __fakeFieldGet_AmplitudeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property AmplitudeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AmplitudeProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.BackEase')]
  DNBackEase = interface(DNEasingFunctionBase)
  ['{05D0B56A-8CCF-338F-BC5F-4056344AD0E1}']
  { getters & setters } 

    function get_Amplitude: Double;
    procedure set_Amplitude(value: Double);
    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Amplitude: Double read get_Amplitude write set_Amplitude;
    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBackEase = class(TDNGenericImport<DNBackEaseClass, DNBackEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNBounceEaseClass = interface(DNEasingFunctionBaseClass)
  ['{76DFEC4B-4C12-5EED-B9CD-1029874650E6}']
  { constructors } 

    {class} function init: DNBounceEase;

  { static fields getter & setter } 

   function __fakeFieldGet_BouncesProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BouncinessProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property BouncesProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BouncesProperty;
    {class} property BouncinessProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BouncinessProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.BounceEase')]
  DNBounceEase = interface(DNEasingFunctionBase)
  ['{A69CECFE-F57F-31AF-A395-C5E138D0A2A5}']
  { getters & setters } 

    function get_Bounces: Int32;
    procedure set_Bounces(value: Int32);
    function get_Bounciness: Double;
    procedure set_Bounciness(value: Double);
    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bounces: Int32 read get_Bounces write set_Bounces;
    property Bounciness: Double read get_Bounciness write set_Bounciness;
    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBounceEase = class(TDNGenericImport<DNBounceEaseClass, DNBounceEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCircleEaseClass = interface(DNEasingFunctionBaseClass)
  ['{992B75C8-6281-529C-8E2D-F2C68B8A8ABE}']
  { constructors } 

    {class} function init: DNCircleEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.CircleEase')]
  DNCircleEase = interface(DNEasingFunctionBase)
  ['{ABCAB3B8-8376-35B4-83F7-84074AE81813}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCircleEase = class(TDNGenericImport<DNCircleEaseClass, DNCircleEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNCubicEaseClass = interface(DNEasingFunctionBaseClass)
  ['{0507ACA4-9339-5126-B78C-55D219A5383F}']
  { constructors } 

    {class} function init: DNCubicEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.CubicEase')]
  DNCubicEase = interface(DNEasingFunctionBase)
  ['{3CDF1BDA-1F10-3415-995D-6FBB5F27A2BB}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCubicEase = class(TDNGenericImport<DNCubicEaseClass, DNCubicEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNElasticEaseClass = interface(DNEasingFunctionBaseClass)
  ['{EEFD74B4-CDB2-5F01-8ABD-815C20C4050A}']
  { constructors } 

    {class} function init: DNElasticEase;

  { static fields getter & setter } 

   function __fakeFieldGet_OscillationsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SpringinessProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property OscillationsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OscillationsProperty;
    {class} property SpringinessProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SpringinessProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ElasticEase')]
  DNElasticEase = interface(DNEasingFunctionBase)
  ['{214CE2FF-1B72-3D3A-8702-0D6F96F522B0}']
  { getters & setters } 

    function get_Oscillations: Int32;
    procedure set_Oscillations(value: Int32);
    function get_Springiness: Double;
    procedure set_Springiness(value: Double);
    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Oscillations: Int32 read get_Oscillations write set_Oscillations;
    property Springiness: Double read get_Springiness write set_Springiness;
    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNElasticEase = class(TDNGenericImport<DNElasticEaseClass, DNElasticEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNExponentialEaseClass = interface(DNEasingFunctionBaseClass)
  ['{D0F4ABDA-2C09-5EE3-8FC1-584208F20FA0}']
  { constructors } 

    {class} function init: DNExponentialEase;

  { static fields getter & setter } 

   function __fakeFieldGet_ExponentProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ExponentProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ExponentProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ExponentialEase')]
  DNExponentialEase = interface(DNEasingFunctionBase)
  ['{00389161-9294-3D56-B1B4-CDD37ADC412A}']
  { getters & setters } 

    function get_Exponent: Double;
    procedure set_Exponent(value: Double);
    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exponent: Double read get_Exponent write set_Exponent;
    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNExponentialEase = class(TDNGenericImport<DNExponentialEaseClass, DNExponentialEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPowerEaseClass = interface(DNEasingFunctionBaseClass)
  ['{66C2799A-AEB3-5F47-B674-7828209EA41B}']
  { constructors } 

    {class} function init: DNPowerEase;

  { static fields getter & setter } 

   function __fakeFieldGet_PowerProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PowerProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PowerProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.PowerEase')]
  DNPowerEase = interface(DNEasingFunctionBase)
  ['{D9AE708D-3BBC-3902-9B4B-CEACFB015E74}']
  { getters & setters } 

    function get_Power: Double;
    procedure set_Power(value: Double);
    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Power: Double read get_Power write set_Power;
    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPowerEase = class(TDNGenericImport<DNPowerEaseClass, DNPowerEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuadraticEaseClass = interface(DNEasingFunctionBaseClass)
  ['{115A2CF6-8BF0-5525-BDE3-4F37878A29F0}']
  { constructors } 

    {class} function init: DNQuadraticEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuadraticEase')]
  DNQuadraticEase = interface(DNEasingFunctionBase)
  ['{D49E71EC-B6FD-3791-B568-04FB9BBA5FAE}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuadraticEase = class(TDNGenericImport<DNQuadraticEaseClass, DNQuadraticEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuarticEaseClass = interface(DNEasingFunctionBaseClass)
  ['{6F2C4967-4DD1-5A20-A84C-59B4B68214AC}']
  { constructors } 

    {class} function init: DNQuarticEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuarticEase')]
  DNQuarticEase = interface(DNEasingFunctionBase)
  ['{2E27DF7D-453A-33C9-81F9-A012DB15E2CB}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuarticEase = class(TDNGenericImport<DNQuarticEaseClass, DNQuarticEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuinticEaseClass = interface(DNEasingFunctionBaseClass)
  ['{380006AA-DF2A-59C0-A97A-4C047ED063BB}']
  { constructors } 

    {class} function init: DNQuinticEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuinticEase')]
  DNQuinticEase = interface(DNEasingFunctionBase)
  ['{E14F1F9E-BDB5-37B3-B0E9-15CACBC11132}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuinticEase = class(TDNGenericImport<DNQuinticEaseClass, DNQuinticEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSineEaseClass = interface(DNEasingFunctionBaseClass)
  ['{C6ABC2C0-DA62-5373-A9C4-7DD3B45A513B}']
  { constructors } 

    {class} function init: DNSineEase;

  end;

  [DNTypeName('System.Windows.Media.Animation.SineEase')]
  DNSineEase = interface(DNEasingFunctionBase)
  ['{E11422B8-281C-30C9-BEC1-9F445624447C}']
  { getters & setters } 

    function get_EasingMode: DNEasingMode;
    procedure set_EasingMode(value: DNEasingMode);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Ease(normalizedTime: Double): Double;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingMode: DNEasingMode read get_EasingMode write set_EasingMode;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSineEase = class(TDNGenericImport<DNSineEaseClass, DNSineEase>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt16KeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{EA25AEC1-4E20-5CA3-8CAE-B09DB8F41319}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int16KeyFrame')]
  DNInt16KeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{72E3C176-C0AC-3627-A10E-705E8321E0FC}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int16;
    procedure set_Value(value: Int16);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int16; keyFrameProgress: Double): Int16;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int16 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt16KeyFrame = class(TDNGenericImport<DNInt16KeyFrameClass, DNInt16KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteInt16KeyFrameClass = interface(DNInt16KeyFrameClass)
  ['{214E723D-35D7-579F-BE14-131F1D9C726F}']
  { constructors } 

    {class} function init: DNDiscreteInt16KeyFrame; overload;
    {class} function init(value: Int16): DNDiscreteInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime): DNDiscreteInt16KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteInt16KeyFrame')]
  DNDiscreteInt16KeyFrame = interface(DNInt16KeyFrame)
  ['{A715F9B5-B180-3442-BF04-9EFB1D80A444}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int16;
    procedure set_Value(value: Int16);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int16; keyFrameProgress: Double): Int16;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int16 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteInt16KeyFrame = class(TDNGenericImport<DNDiscreteInt16KeyFrameClass, DNDiscreteInt16KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingInt16KeyFrameClass = interface(DNInt16KeyFrameClass)
  ['{EDA6283D-B2D0-585D-9C02-78BE22DBA5CE}']
  { constructors } 

    {class} function init: DNEasingInt16KeyFrame; overload;
    {class} function init(value: Int16): DNEasingInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime): DNEasingInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingInt16KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingInt16KeyFrame')]
  DNEasingInt16KeyFrame = interface(DNInt16KeyFrame)
  ['{6F9DEC63-92DF-3A98-B8C1-D95A30262C49}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int16;
    procedure set_Value(value: Int16);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int16; keyFrameProgress: Double): Int16;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int16 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingInt16KeyFrame = class(TDNGenericImport<DNEasingInt16KeyFrameClass, DNEasingInt16KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearInt16KeyFrameClass = interface(DNInt16KeyFrameClass)
  ['{7BE8ADAC-13F0-54F2-8C63-72E022544EEB}']
  { constructors } 

    {class} function init: DNLinearInt16KeyFrame; overload;
    {class} function init(value: Int16): DNLinearInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime): DNLinearInt16KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearInt16KeyFrame')]
  DNLinearInt16KeyFrame = interface(DNInt16KeyFrame)
  ['{98802441-5EB8-3840-994A-F056D013E200}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int16;
    procedure set_Value(value: Int16);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int16; keyFrameProgress: Double): Int16;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int16 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearInt16KeyFrame = class(TDNGenericImport<DNLinearInt16KeyFrameClass, DNLinearInt16KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineInt16KeyFrameClass = interface(DNInt16KeyFrameClass)
  ['{A2C196CE-575B-5E1B-AF25-1B677C6F700C}']
  { constructors } 

    {class} function init: DNSplineInt16KeyFrame; overload;
    {class} function init(value: Int16): DNSplineInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime): DNSplineInt16KeyFrame; overload;
    {class} function init(value: Int16; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineInt16KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineInt16KeyFrame')]
  DNSplineInt16KeyFrame = interface(DNInt16KeyFrame)
  ['{9032EF33-CFFA-3AAC-B968-77416D9A8E30}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int16;
    procedure set_Value(value: Int16);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int16; keyFrameProgress: Double): Int16;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int16 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineInt16KeyFrame = class(TDNGenericImport<DNSplineInt16KeyFrameClass, DNSplineInt16KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt16KeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{6E76C233-E75A-5F19-BAE8-9F3A636C27CC}']
  { static getter & setter } 

    {class} function get_Empty: DNInt16KeyFrameCollection;

  { constructors } 

    {class} function init: DNInt16KeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNInt16KeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Int16KeyFrameCollection')]
  DNInt16KeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{D69BB85B-1E06-30F4-84EB-A53DBEDBBE5A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNInt16KeyFrame;
    procedure set_Item(index: Int32; value: DNInt16KeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt16KeyFrameCollection;
    procedure CopyTo(&array: TArray<DNInt16KeyFrame>; index: Int32);
    function Add(keyFrame: DNInt16KeyFrame): Int32;
    function &Contains(keyFrame: DNInt16KeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNInt16KeyFrame);
    procedure Remove(keyFrame: DNInt16KeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNInt16KeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNInt16KeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt16KeyFrameCollection = class(TDNGenericImport<DNInt16KeyFrameCollectionClass, DNInt16KeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt32KeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{0AC8C7C4-9690-5B15-97D6-895A2F4C8CEA}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int32KeyFrame')]
  DNInt32KeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{C2E15673-EE4D-3136-9A45-FC5F628BF70B}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int32;
    procedure set_Value(value: Int32);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int32; keyFrameProgress: Double): Int32;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int32 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32KeyFrame = class(TDNGenericImport<DNInt32KeyFrameClass, DNInt32KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteInt32KeyFrameClass = interface(DNInt32KeyFrameClass)
  ['{1BB0A144-7C88-5322-8F89-E1C5F177F6D6}']
  { constructors } 

    {class} function init: DNDiscreteInt32KeyFrame; overload;
    {class} function init(value: Int32): DNDiscreteInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime): DNDiscreteInt32KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteInt32KeyFrame')]
  DNDiscreteInt32KeyFrame = interface(DNInt32KeyFrame)
  ['{46EE5CED-3E46-3B86-8F13-2ACC1A02FC7B}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int32;
    procedure set_Value(value: Int32);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int32; keyFrameProgress: Double): Int32;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int32 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteInt32KeyFrame = class(TDNGenericImport<DNDiscreteInt32KeyFrameClass, DNDiscreteInt32KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingInt32KeyFrameClass = interface(DNInt32KeyFrameClass)
  ['{BD3AC816-9D99-5DEA-96B8-59C4F01629B8}']
  { constructors } 

    {class} function init: DNEasingInt32KeyFrame; overload;
    {class} function init(value: Int32): DNEasingInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime): DNEasingInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingInt32KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingInt32KeyFrame')]
  DNEasingInt32KeyFrame = interface(DNInt32KeyFrame)
  ['{A1DFF0F6-C741-34D2-AB43-632562CD5481}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int32;
    procedure set_Value(value: Int32);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int32; keyFrameProgress: Double): Int32;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int32 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingInt32KeyFrame = class(TDNGenericImport<DNEasingInt32KeyFrameClass, DNEasingInt32KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearInt32KeyFrameClass = interface(DNInt32KeyFrameClass)
  ['{07F3451E-E169-5F25-8ECB-275C5068E5DA}']
  { constructors } 

    {class} function init: DNLinearInt32KeyFrame; overload;
    {class} function init(value: Int32): DNLinearInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime): DNLinearInt32KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearInt32KeyFrame')]
  DNLinearInt32KeyFrame = interface(DNInt32KeyFrame)
  ['{32281361-3A0F-3FF7-8107-A4A3C0AEC7AC}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int32;
    procedure set_Value(value: Int32);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int32; keyFrameProgress: Double): Int32;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int32 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearInt32KeyFrame = class(TDNGenericImport<DNLinearInt32KeyFrameClass, DNLinearInt32KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineInt32KeyFrameClass = interface(DNInt32KeyFrameClass)
  ['{7FDF5782-A2F7-532A-900A-FBD54D0B9952}']
  { constructors } 

    {class} function init: DNSplineInt32KeyFrame; overload;
    {class} function init(value: Int32): DNSplineInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime): DNSplineInt32KeyFrame; overload;
    {class} function init(value: Int32; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineInt32KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineInt32KeyFrame')]
  DNSplineInt32KeyFrame = interface(DNInt32KeyFrame)
  ['{20104910-C262-379F-A3D3-E4F55F9AAAC2}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int32;
    procedure set_Value(value: Int32);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int32; keyFrameProgress: Double): Int32;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int32 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineInt32KeyFrame = class(TDNGenericImport<DNSplineInt32KeyFrameClass, DNSplineInt32KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt32KeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{BE4A5DAA-C8BE-52D7-A2D3-D862856EDAF1}']
  { static getter & setter } 

    {class} function get_Empty: DNInt32KeyFrameCollection;

  { constructors } 

    {class} function init: DNInt32KeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNInt32KeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Int32KeyFrameCollection')]
  DNInt32KeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{83606CC4-C5B1-3DFA-814C-6DD06E164C2E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNInt32KeyFrame;
    procedure set_Item(index: Int32; value: DNInt32KeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt32KeyFrameCollection;
    procedure CopyTo(&array: TArray<DNInt32KeyFrame>; index: Int32);
    function Add(keyFrame: DNInt32KeyFrame): Int32;
    function &Contains(keyFrame: DNInt32KeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNInt32KeyFrame);
    procedure Remove(keyFrame: DNInt32KeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNInt32KeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNInt32KeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32KeyFrameCollection = class(TDNGenericImport<DNInt32KeyFrameCollectionClass, DNInt32KeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt64KeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{F788B69F-CD22-5AF1-A6DB-7DD4E2626296}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Int64KeyFrame')]
  DNInt64KeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{0051C02A-CA00-3AAE-940D-AA69F88EAD98}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int64; keyFrameProgress: Double): Int64;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int64 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt64KeyFrame = class(TDNGenericImport<DNInt64KeyFrameClass, DNInt64KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteInt64KeyFrameClass = interface(DNInt64KeyFrameClass)
  ['{0790AF19-63DC-5843-92E5-DE1AE5FDB5A8}']
  { constructors } 

    {class} function init: DNDiscreteInt64KeyFrame; overload;
    {class} function init(value: Int64): DNDiscreteInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime): DNDiscreteInt64KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteInt64KeyFrame')]
  DNDiscreteInt64KeyFrame = interface(DNInt64KeyFrame)
  ['{CB5617C4-C708-30C4-87A5-1582D90717EC}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int64; keyFrameProgress: Double): Int64;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int64 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteInt64KeyFrame = class(TDNGenericImport<DNDiscreteInt64KeyFrameClass, DNDiscreteInt64KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingInt64KeyFrameClass = interface(DNInt64KeyFrameClass)
  ['{CBADE8F5-78AA-5B5F-A35F-12F9F60D3140}']
  { constructors } 

    {class} function init: DNEasingInt64KeyFrame; overload;
    {class} function init(value: Int64): DNEasingInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime): DNEasingInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingInt64KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingInt64KeyFrame')]
  DNEasingInt64KeyFrame = interface(DNInt64KeyFrame)
  ['{9D6BB15F-B3FF-35FC-AC7F-4522605C28E3}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int64; keyFrameProgress: Double): Int64;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int64 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingInt64KeyFrame = class(TDNGenericImport<DNEasingInt64KeyFrameClass, DNEasingInt64KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearInt64KeyFrameClass = interface(DNInt64KeyFrameClass)
  ['{5141F73B-3858-50D8-88CD-13C17FEF1C3B}']
  { constructors } 

    {class} function init: DNLinearInt64KeyFrame; overload;
    {class} function init(value: Int64): DNLinearInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime): DNLinearInt64KeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearInt64KeyFrame')]
  DNLinearInt64KeyFrame = interface(DNInt64KeyFrame)
  ['{10E965DD-5EEC-30D4-A17C-FD83C0E8B0EF}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int64; keyFrameProgress: Double): Int64;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int64 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearInt64KeyFrame = class(TDNGenericImport<DNLinearInt64KeyFrameClass, DNLinearInt64KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineInt64KeyFrameClass = interface(DNInt64KeyFrameClass)
  ['{45BAFDFA-7050-52F8-A4D6-517AEE56CD2B}']
  { constructors } 

    {class} function init: DNSplineInt64KeyFrame; overload;
    {class} function init(value: Int64): DNSplineInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime): DNSplineInt64KeyFrame; overload;
    {class} function init(value: Int64; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineInt64KeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineInt64KeyFrame')]
  DNSplineInt64KeyFrame = interface(DNInt64KeyFrame)
  ['{586D690B-5CE5-38ED-B64E-A9702FE9CC2F}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Int64; keyFrameProgress: Double): Int64;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Int64 read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineInt64KeyFrame = class(TDNGenericImport<DNSplineInt64KeyFrameClass, DNSplineInt64KeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNInt64KeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{8D8073EE-FC54-5DAF-95EF-9AF9AE51A4ED}']
  { static getter & setter } 

    {class} function get_Empty: DNInt64KeyFrameCollection;

  { constructors } 

    {class} function init: DNInt64KeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNInt64KeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Int64KeyFrameCollection')]
  DNInt64KeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{7D20A00D-E760-38D5-8839-855E1DC8643B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNInt64KeyFrame;
    procedure set_Item(index: Int32; value: DNInt64KeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt64KeyFrameCollection;
    procedure CopyTo(&array: TArray<DNInt64KeyFrame>; index: Int32);
    function Add(keyFrame: DNInt64KeyFrame): Int32;
    function &Contains(keyFrame: DNInt64KeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNInt64KeyFrame);
    procedure Remove(keyFrame: DNInt64KeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNInt64KeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNInt64KeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt64KeyFrameCollection = class(TDNGenericImport<DNInt64KeyFrameCollectionClass, DNInt64KeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNKeySplineClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{617FBF63-FF49-5A2A-BDF2-540188A802C4}']
  { constructors } 

    {class} function init: DNKeySpline; overload;
    {class} function init(x1: Double; y1: Double; x2: Double; y2: Double): DNKeySpline; overload;
    {class} function init(controlPoint1: DDN.System.Windows.Common.DNPoint; controlPoint2: DDN.System.Windows.Common.DNPoint): DNKeySpline; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.KeySpline')]
  DNKeySpline = interface(DDN.System.Windows.Common.DNFreezable)
  ['{A1F78F82-5A09-32A1-ADA4-19E3742E8025}']
  { getters & setters } 

    function get_ControlPoint1: DDN.System.Windows.Common.DNPoint;
    procedure set_ControlPoint1(value: DDN.System.Windows.Common.DNPoint);
    function get_ControlPoint2: DDN.System.Windows.Common.DNPoint;
    procedure set_ControlPoint2(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetSplineProgress(linearProgress: Double): Double;
    function ToString: string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ControlPoint1: DDN.System.Windows.Common.DNPoint read get_ControlPoint1 write set_ControlPoint1;
    property ControlPoint2: DDN.System.Windows.Common.DNPoint read get_ControlPoint2 write set_ControlPoint2;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNKeySpline = class(TDNGenericImport<DNKeySplineClass, DNKeySpline>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNMatrixKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{E70A6814-3FA0-5599-B3B7-0C21EA811868}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.MatrixKeyFrame')]
  DNMatrixKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{394CD355-1BF6-3968-995F-C1F1087FD9EA}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    procedure set_Value(value: DDN.System.Windows.Common.DNMatrix);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNMatrix; keyFrameProgress: Double): DDN.System.Windows.Common.DNMatrix;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixKeyFrame = class(TDNGenericImport<DNMatrixKeyFrameClass, DNMatrixKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteMatrixKeyFrameClass = interface(DNMatrixKeyFrameClass)
  ['{95BB0064-D930-500A-AD0E-A3B46BF4EED5}']
  { constructors } 

    {class} function init: DNDiscreteMatrixKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNMatrix): DNDiscreteMatrixKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNMatrix; keyTime: DNKeyTime): DNDiscreteMatrixKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteMatrixKeyFrame')]
  DNDiscreteMatrixKeyFrame = interface(DNMatrixKeyFrame)
  ['{A973536A-4071-3370-8A59-649927E5864D}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNMatrix;
    procedure set_Value(value: DDN.System.Windows.Common.DNMatrix);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNMatrix; keyFrameProgress: Double): DDN.System.Windows.Common.DNMatrix;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNMatrix read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteMatrixKeyFrame = class(TDNGenericImport<DNDiscreteMatrixKeyFrameClass, DNDiscreteMatrixKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNMatrixKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{0B7EBAE6-42E0-5690-81CB-DCBEE3ABBDB6}']
  { static getter & setter } 

    {class} function get_Empty: DNMatrixKeyFrameCollection;

  { constructors } 

    {class} function init: DNMatrixKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNMatrixKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.MatrixKeyFrameCollection')]
  DNMatrixKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{DE51C723-D167-3EC2-A9CE-4F9CF2E11CB0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNMatrixKeyFrame;
    procedure set_Item(index: Int32; value: DNMatrixKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNMatrixKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNMatrixKeyFrame>; index: Int32);
    function Add(keyFrame: DNMatrixKeyFrame): Int32;
    function &Contains(keyFrame: DNMatrixKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNMatrixKeyFrame);
    procedure Remove(keyFrame: DNMatrixKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNMatrixKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNMatrixKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMatrixKeyFrameCollection = class(TDNGenericImport<DNMatrixKeyFrameCollectionClass, DNMatrixKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNObjectKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{B3749EB7-DC0E-5170-8739-4C6ED6584035}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.ObjectKeyFrame')]
  DNObjectKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{EA6E7EBB-CA53-3679-855B-9B3DF632478F}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNObject; keyFrameProgress: Double): DDN.mscorlib.DNObject;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNObjectKeyFrame = class(TDNGenericImport<DNObjectKeyFrameClass, DNObjectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteObjectKeyFrameClass = interface(DNObjectKeyFrameClass)
  ['{2E7C91E4-D82C-5249-833B-D799A88AE4A4}']
  { constructors } 

    {class} function init: DNDiscreteObjectKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNObject): DNDiscreteObjectKeyFrame; overload;
    {class} function init(value: DDN.mscorlib.DNObject; keyTime: DNKeyTime): DNDiscreteObjectKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteObjectKeyFrame')]
  DNDiscreteObjectKeyFrame = interface(DNObjectKeyFrame)
  ['{B3A5D71E-25B0-38ED-86F7-9B8C1056FE8B}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.mscorlib.DNObject; keyFrameProgress: Double): DDN.mscorlib.DNObject;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteObjectKeyFrame = class(TDNGenericImport<DNDiscreteObjectKeyFrameClass, DNDiscreteObjectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNObjectKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{936BDEA8-87CD-54BC-BB1C-C70383B6AADB}']
  { static getter & setter } 

    {class} function get_Empty: DNObjectKeyFrameCollection;

  { constructors } 

    {class} function init: DNObjectKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNObjectKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.ObjectKeyFrameCollection')]
  DNObjectKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{AF690337-237A-3FB7-8E80-D7BAC2865A7E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNObjectKeyFrame;
    procedure set_Item(index: Int32; value: DNObjectKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNObjectKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNObjectKeyFrame>; index: Int32);
    function Add(keyFrame: DNObjectKeyFrame): Int32;
    function &Contains(keyFrame: DNObjectKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNObjectKeyFrame);
    procedure Remove(keyFrame: DNObjectKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNObjectKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNObjectKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNObjectKeyFrameCollection = class(TDNGenericImport<DNObjectKeyFrameCollectionClass, DNObjectKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPoint3DKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{7DB8A182-C7B0-5270-8D37-1D08500A4936}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Point3DKeyFrame')]
  DNPoint3DKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{389826D5-402D-3D38-AB89-85A1E3ADEF29}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNPoint3D;
    procedure set_Value(value: DNPoint3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNPoint3D; keyFrameProgress: Double): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNPoint3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DKeyFrame = class(TDNGenericImport<DNPoint3DKeyFrameClass, DNPoint3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscretePoint3DKeyFrameClass = interface(DNPoint3DKeyFrameClass)
  ['{BFF26A1A-4792-5DE5-83DF-1BFE22E09FB9}']
  { constructors } 

    {class} function init: DNDiscretePoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D): DNDiscretePoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime): DNDiscretePoint3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscretePoint3DKeyFrame')]
  DNDiscretePoint3DKeyFrame = interface(DNPoint3DKeyFrame)
  ['{DAAF6515-062A-3D40-9081-FFA3EFB78C7D}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNPoint3D;
    procedure set_Value(value: DNPoint3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNPoint3D; keyFrameProgress: Double): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNPoint3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscretePoint3DKeyFrame = class(TDNGenericImport<DNDiscretePoint3DKeyFrameClass, DNDiscretePoint3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingPoint3DKeyFrameClass = interface(DNPoint3DKeyFrameClass)
  ['{7761E5B3-76BF-500B-A13B-CD52E8E5570D}']
  { constructors } 

    {class} function init: DNEasingPoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D): DNEasingPoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime): DNEasingPoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingPoint3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingPoint3DKeyFrame')]
  DNEasingPoint3DKeyFrame = interface(DNPoint3DKeyFrame)
  ['{BC42B955-DE43-3A8C-A3FA-8B76E3BD89F6}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNPoint3D;
    procedure set_Value(value: DNPoint3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNPoint3D; keyFrameProgress: Double): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNPoint3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingPoint3DKeyFrame = class(TDNGenericImport<DNEasingPoint3DKeyFrameClass, DNEasingPoint3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearPoint3DKeyFrameClass = interface(DNPoint3DKeyFrameClass)
  ['{CE8F4C00-86A9-5510-BEF3-0538952BCA01}']
  { constructors } 

    {class} function init: DNLinearPoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D): DNLinearPoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime): DNLinearPoint3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearPoint3DKeyFrame')]
  DNLinearPoint3DKeyFrame = interface(DNPoint3DKeyFrame)
  ['{FD5F5789-1A64-3304-B6CE-D85119EC17D0}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNPoint3D;
    procedure set_Value(value: DNPoint3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNPoint3D; keyFrameProgress: Double): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNPoint3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearPoint3DKeyFrame = class(TDNGenericImport<DNLinearPoint3DKeyFrameClass, DNLinearPoint3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplinePoint3DKeyFrameClass = interface(DNPoint3DKeyFrameClass)
  ['{12295FC5-4B13-5E3A-A018-71B043D72F33}']
  { constructors } 

    {class} function init: DNSplinePoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D): DNSplinePoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime): DNSplinePoint3DKeyFrame; overload;
    {class} function init(value: DNPoint3D; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplinePoint3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplinePoint3DKeyFrame')]
  DNSplinePoint3DKeyFrame = interface(DNPoint3DKeyFrame)
  ['{53BB3A35-DDBF-3F57-9818-5E1EF6E31E05}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNPoint3D;
    procedure set_Value(value: DNPoint3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNPoint3D; keyFrameProgress: Double): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNPoint3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplinePoint3DKeyFrame = class(TDNGenericImport<DNSplinePoint3DKeyFrameClass, DNSplinePoint3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPoint3DKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{4B7A6200-5BBF-5B7D-AAD2-CEA87B33D025}']
  { static getter & setter } 

    {class} function get_Empty: DNPoint3DKeyFrameCollection;

  { constructors } 

    {class} function init: DNPoint3DKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNPoint3DKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Point3DKeyFrameCollection')]
  DNPoint3DKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{EBF4E3C5-6AB7-3D9D-BD28-1BCA17E17E6A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPoint3DKeyFrame;
    procedure set_Item(index: Int32; value: DNPoint3DKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPoint3DKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNPoint3DKeyFrame>; index: Int32);
    function Add(keyFrame: DNPoint3DKeyFrame): Int32;
    function &Contains(keyFrame: DNPoint3DKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNPoint3DKeyFrame);
    procedure Remove(keyFrame: DNPoint3DKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNPoint3DKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPoint3DKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DKeyFrameCollection = class(TDNGenericImport<DNPoint3DKeyFrameCollectionClass, DNPoint3DKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{8C60CD94-FC55-5645-A78F-A89D6C19A379}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.PointKeyFrame')]
  DNPointKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{9697DDF6-71B6-3797-8CEA-71BD9035D270}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNPoint;
    procedure set_Value(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNPoint; keyFrameProgress: Double): DDN.System.Windows.Common.DNPoint;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNPoint read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointKeyFrame = class(TDNGenericImport<DNPointKeyFrameClass, DNPointKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscretePointKeyFrameClass = interface(DNPointKeyFrameClass)
  ['{08924872-EBBC-592F-931F-2657557C613B}']
  { constructors } 

    {class} function init: DNDiscretePointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint): DNDiscretePointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime): DNDiscretePointKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscretePointKeyFrame')]
  DNDiscretePointKeyFrame = interface(DNPointKeyFrame)
  ['{CF213FCF-86DE-3CA4-848A-F7482AD2A544}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNPoint;
    procedure set_Value(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNPoint; keyFrameProgress: Double): DDN.System.Windows.Common.DNPoint;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNPoint read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscretePointKeyFrame = class(TDNGenericImport<DNDiscretePointKeyFrameClass, DNDiscretePointKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingPointKeyFrameClass = interface(DNPointKeyFrameClass)
  ['{CC87FBF1-E488-55E8-AC31-2183F633E250}']
  { constructors } 

    {class} function init: DNEasingPointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint): DNEasingPointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime): DNEasingPointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingPointKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingPointKeyFrame')]
  DNEasingPointKeyFrame = interface(DNPointKeyFrame)
  ['{713E0B2E-FA82-3C2E-BF14-7A217119A0B4}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNPoint;
    procedure set_Value(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNPoint; keyFrameProgress: Double): DDN.System.Windows.Common.DNPoint;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNPoint read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingPointKeyFrame = class(TDNGenericImport<DNEasingPointKeyFrameClass, DNEasingPointKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearPointKeyFrameClass = interface(DNPointKeyFrameClass)
  ['{8A361410-4611-5760-B931-AF78789D0675}']
  { constructors } 

    {class} function init: DNLinearPointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint): DNLinearPointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime): DNLinearPointKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearPointKeyFrame')]
  DNLinearPointKeyFrame = interface(DNPointKeyFrame)
  ['{4DD6F9C3-B284-3A6C-A0F4-083730D0755C}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNPoint;
    procedure set_Value(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNPoint; keyFrameProgress: Double): DDN.System.Windows.Common.DNPoint;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNPoint read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearPointKeyFrame = class(TDNGenericImport<DNLinearPointKeyFrameClass, DNLinearPointKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplinePointKeyFrameClass = interface(DNPointKeyFrameClass)
  ['{55FFFC32-E73F-58E0-BD86-D4CF1490E115}']
  { constructors } 

    {class} function init: DNSplinePointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint): DNSplinePointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime): DNSplinePointKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNPoint; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplinePointKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplinePointKeyFrame')]
  DNSplinePointKeyFrame = interface(DNPointKeyFrame)
  ['{88BC2C5E-0A14-3228-B9CE-C0961718813C}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNPoint;
    procedure set_Value(value: DDN.System.Windows.Common.DNPoint);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNPoint; keyFrameProgress: Double): DDN.System.Windows.Common.DNPoint;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNPoint read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplinePointKeyFrame = class(TDNGenericImport<DNSplinePointKeyFrameClass, DNSplinePointKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNPointKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{BFB4E17B-A20E-5C91-9780-58AD7DD2D674}']
  { static getter & setter } 

    {class} function get_Empty: DNPointKeyFrameCollection;

  { constructors } 

    {class} function init: DNPointKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNPointKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.PointKeyFrameCollection')]
  DNPointKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{4CF054EA-28E6-3273-9A1C-6C89719C642E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPointKeyFrame;
    procedure set_Item(index: Int32; value: DNPointKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPointKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNPointKeyFrame>; index: Int32);
    function Add(keyFrame: DNPointKeyFrame): Int32;
    function &Contains(keyFrame: DNPointKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNPointKeyFrame);
    procedure Remove(keyFrame: DNPointKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNPointKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPointKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointKeyFrameCollection = class(TDNGenericImport<DNPointKeyFrameCollectionClass, DNPointKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuaternionKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{62D3CEE4-B65C-5C09-99EC-F4F358C93C2B}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.QuaternionKeyFrame')]
  DNQuaternionKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{466428BF-DBB8-3F85-828E-899F836DF27C}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNQuaternion;
    procedure set_Value(value: DNQuaternion);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNQuaternion; keyFrameProgress: Double): DNQuaternion;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNQuaternion read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionKeyFrame = class(TDNGenericImport<DNQuaternionKeyFrameClass, DNQuaternionKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteQuaternionKeyFrameClass = interface(DNQuaternionKeyFrameClass)
  ['{1844A493-40EA-51BD-958E-004837013CF9}']
  { constructors } 

    {class} function init: DNDiscreteQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion): DNDiscreteQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime): DNDiscreteQuaternionKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteQuaternionKeyFrame')]
  DNDiscreteQuaternionKeyFrame = interface(DNQuaternionKeyFrame)
  ['{58E01279-223D-3D1A-A45B-C06E7A4191C6}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNQuaternion;
    procedure set_Value(value: DNQuaternion);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNQuaternion; keyFrameProgress: Double): DNQuaternion;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNQuaternion read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteQuaternionKeyFrame = class(TDNGenericImport<DNDiscreteQuaternionKeyFrameClass, DNDiscreteQuaternionKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingQuaternionKeyFrameClass = interface(DNQuaternionKeyFrameClass)
  ['{53EB344F-FF81-52EC-9025-0F881FA26A3C}']
  { constructors } 

    {class} function init: DNEasingQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion): DNEasingQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime): DNEasingQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingQuaternionKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;
    {class} property UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UseShortestPathProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingQuaternionKeyFrame')]
  DNEasingQuaternionKeyFrame = interface(DNQuaternionKeyFrame)
  ['{9A28894F-AB4C-3914-85A9-4ABE0D0784F2}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_UseShortestPath: Boolean;
    procedure set_UseShortestPath(value: Boolean);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNQuaternion;
    procedure set_Value(value: DNQuaternion);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNQuaternion; keyFrameProgress: Double): DNQuaternion;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property UseShortestPath: Boolean read get_UseShortestPath write set_UseShortestPath;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNQuaternion read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingQuaternionKeyFrame = class(TDNGenericImport<DNEasingQuaternionKeyFrameClass, DNEasingQuaternionKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearQuaternionKeyFrameClass = interface(DNQuaternionKeyFrameClass)
  ['{16047038-3942-545A-A7F7-5DD19D9A1B1A}']
  { constructors } 

    {class} function init: DNLinearQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion): DNLinearQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime): DNLinearQuaternionKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UseShortestPathProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearQuaternionKeyFrame')]
  DNLinearQuaternionKeyFrame = interface(DNQuaternionKeyFrame)
  ['{2478CF3E-B1D3-3201-930F-7C82353D1B64}']
  { getters & setters } 

    function get_UseShortestPath: Boolean;
    procedure set_UseShortestPath(value: Boolean);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNQuaternion;
    procedure set_Value(value: DNQuaternion);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNQuaternion; keyFrameProgress: Double): DNQuaternion;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseShortestPath: Boolean read get_UseShortestPath write set_UseShortestPath;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNQuaternion read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearQuaternionKeyFrame = class(TDNGenericImport<DNLinearQuaternionKeyFrameClass, DNLinearQuaternionKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineQuaternionKeyFrameClass = interface(DNQuaternionKeyFrameClass)
  ['{AA86DCDC-F702-51C2-BF17-48C9D7A314FF}']
  { constructors } 

    {class} function init: DNSplineQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion): DNSplineQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime): DNSplineQuaternionKeyFrame; overload;
    {class} function init(value: DNQuaternion; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineQuaternionKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;
    {class} property UseShortestPathProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UseShortestPathProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineQuaternionKeyFrame')]
  DNSplineQuaternionKeyFrame = interface(DNQuaternionKeyFrame)
  ['{9FF014D8-085F-3D4C-8069-37BCBE5E72AF}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_UseShortestPath: Boolean;
    procedure set_UseShortestPath(value: Boolean);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNQuaternion;
    procedure set_Value(value: DNQuaternion);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNQuaternion; keyFrameProgress: Double): DNQuaternion;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property UseShortestPath: Boolean read get_UseShortestPath write set_UseShortestPath;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNQuaternion read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineQuaternionKeyFrame = class(TDNGenericImport<DNSplineQuaternionKeyFrameClass, DNSplineQuaternionKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNQuaternionKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{4E348277-2EC4-5FD5-A2D7-DFB1D6EA53A3}']
  { static getter & setter } 

    {class} function get_Empty: DNQuaternionKeyFrameCollection;

  { constructors } 

    {class} function init: DNQuaternionKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNQuaternionKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.QuaternionKeyFrameCollection')]
  DNQuaternionKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{B478530A-86BD-37E5-92D7-F8027870BEA8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNQuaternionKeyFrame;
    procedure set_Item(index: Int32; value: DNQuaternionKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNQuaternionKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNQuaternionKeyFrame>; index: Int32);
    function Add(keyFrame: DNQuaternionKeyFrame): Int32;
    function &Contains(keyFrame: DNQuaternionKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNQuaternionKeyFrame);
    procedure Remove(keyFrame: DNQuaternionKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNQuaternionKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNQuaternionKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNQuaternionKeyFrameCollection = class(TDNGenericImport<DNQuaternionKeyFrameCollectionClass, DNQuaternionKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRectKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{89832537-8515-525C-913D-9CE492662195}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.RectKeyFrame')]
  DNRectKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{0359769D-93E7-3617-8297-5B05084F70D3}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNRect;
    procedure set_Value(value: DDN.System.Windows.Common.DNRect);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNRect; keyFrameProgress: Double): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNRect read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectKeyFrame = class(TDNGenericImport<DNRectKeyFrameClass, DNRectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteRectKeyFrameClass = interface(DNRectKeyFrameClass)
  ['{AE876E47-435C-5957-9E08-E9F6D174801F}']
  { constructors } 

    {class} function init: DNDiscreteRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect): DNDiscreteRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime): DNDiscreteRectKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteRectKeyFrame')]
  DNDiscreteRectKeyFrame = interface(DNRectKeyFrame)
  ['{7FB32474-ED16-3640-A384-9A383FCD9EAE}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNRect;
    procedure set_Value(value: DDN.System.Windows.Common.DNRect);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNRect; keyFrameProgress: Double): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNRect read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteRectKeyFrame = class(TDNGenericImport<DNDiscreteRectKeyFrameClass, DNDiscreteRectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingRectKeyFrameClass = interface(DNRectKeyFrameClass)
  ['{D558BF1D-C19C-5742-B015-50A265A0A457}']
  { constructors } 

    {class} function init: DNEasingRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect): DNEasingRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime): DNEasingRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingRectKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingRectKeyFrame')]
  DNEasingRectKeyFrame = interface(DNRectKeyFrame)
  ['{4A26AD22-74AA-3CB4-8579-2954BCF33C0E}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNRect;
    procedure set_Value(value: DDN.System.Windows.Common.DNRect);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNRect; keyFrameProgress: Double): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNRect read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingRectKeyFrame = class(TDNGenericImport<DNEasingRectKeyFrameClass, DNEasingRectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearRectKeyFrameClass = interface(DNRectKeyFrameClass)
  ['{83AE2478-938B-56D1-9C7D-711F3453E7A6}']
  { constructors } 

    {class} function init: DNLinearRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect): DNLinearRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime): DNLinearRectKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearRectKeyFrame')]
  DNLinearRectKeyFrame = interface(DNRectKeyFrame)
  ['{182BFF6E-9AC9-36D2-B94E-8B34F061774C}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNRect;
    procedure set_Value(value: DDN.System.Windows.Common.DNRect);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNRect; keyFrameProgress: Double): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNRect read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearRectKeyFrame = class(TDNGenericImport<DNLinearRectKeyFrameClass, DNLinearRectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineRectKeyFrameClass = interface(DNRectKeyFrameClass)
  ['{1A0F95D6-C908-51E2-BFD6-D5CD27A87884}']
  { constructors } 

    {class} function init: DNSplineRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect): DNSplineRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime): DNSplineRectKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNRect; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineRectKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineRectKeyFrame')]
  DNSplineRectKeyFrame = interface(DNRectKeyFrame)
  ['{021999B5-DB82-3A90-A9D7-DF827A840A15}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNRect;
    procedure set_Value(value: DDN.System.Windows.Common.DNRect);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNRect; keyFrameProgress: Double): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNRect read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineRectKeyFrame = class(TDNGenericImport<DNSplineRectKeyFrameClass, DNSplineRectKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRectKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{231229A1-AB20-560A-A8F2-B741AE598346}']
  { static getter & setter } 

    {class} function get_Empty: DNRectKeyFrameCollection;

  { constructors } 

    {class} function init: DNRectKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNRectKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.RectKeyFrameCollection')]
  DNRectKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{9BF543A3-FCA0-3AA0-A3A7-170CB77FF5C0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNRectKeyFrame;
    procedure set_Item(index: Int32; value: DNRectKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRectKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNRectKeyFrame>; index: Int32);
    function Add(keyFrame: DNRectKeyFrame): Int32;
    function &Contains(keyFrame: DNRectKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNRectKeyFrame);
    procedure Remove(keyFrame: DNRectKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNRectKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNRectKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRectKeyFrameCollection = class(TDNGenericImport<DNRectKeyFrameCollectionClass, DNRectKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRotation3DKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{7C874588-DD5E-5F3B-B60B-243F124D7097}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Rotation3DKeyFrame')]
  DNRotation3DKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{5CEBDB92-B65A-37DD-B954-D7393A34D2F5}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNRotation3D;
    procedure set_Value(value: DNRotation3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNRotation3D; keyFrameProgress: Double): DNRotation3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNRotation3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3DKeyFrame = class(TDNGenericImport<DNRotation3DKeyFrameClass, DNRotation3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteRotation3DKeyFrameClass = interface(DNRotation3DKeyFrameClass)
  ['{E169AD10-6AE5-5F6F-90DA-7A4BC3637FF6}']
  { constructors } 

    {class} function init: DNDiscreteRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D): DNDiscreteRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime): DNDiscreteRotation3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteRotation3DKeyFrame')]
  DNDiscreteRotation3DKeyFrame = interface(DNRotation3DKeyFrame)
  ['{7B8A85E9-1903-3ABB-A29C-EAD821702BD5}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNRotation3D;
    procedure set_Value(value: DNRotation3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNRotation3D; keyFrameProgress: Double): DNRotation3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNRotation3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteRotation3DKeyFrame = class(TDNGenericImport<DNDiscreteRotation3DKeyFrameClass, DNDiscreteRotation3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingRotation3DKeyFrameClass = interface(DNRotation3DKeyFrameClass)
  ['{E675A867-9C4C-5FA4-BBD3-2F6D158056CA}']
  { constructors } 

    {class} function init: DNEasingRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D): DNEasingRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime): DNEasingRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingRotation3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingRotation3DKeyFrame')]
  DNEasingRotation3DKeyFrame = interface(DNRotation3DKeyFrame)
  ['{DE419074-9845-3A13-9C48-FFFF55B40DAC}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNRotation3D;
    procedure set_Value(value: DNRotation3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNRotation3D; keyFrameProgress: Double): DNRotation3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNRotation3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingRotation3DKeyFrame = class(TDNGenericImport<DNEasingRotation3DKeyFrameClass, DNEasingRotation3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearRotation3DKeyFrameClass = interface(DNRotation3DKeyFrameClass)
  ['{0C8ECDA9-735F-55EC-9FED-CC71B689D551}']
  { constructors } 

    {class} function init: DNLinearRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D): DNLinearRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime): DNLinearRotation3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearRotation3DKeyFrame')]
  DNLinearRotation3DKeyFrame = interface(DNRotation3DKeyFrame)
  ['{7EF7076E-E2D7-3797-9E5F-A56CACD734FB}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNRotation3D;
    procedure set_Value(value: DNRotation3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNRotation3D; keyFrameProgress: Double): DNRotation3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNRotation3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearRotation3DKeyFrame = class(TDNGenericImport<DNLinearRotation3DKeyFrameClass, DNLinearRotation3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineRotation3DKeyFrameClass = interface(DNRotation3DKeyFrameClass)
  ['{3789DC38-1F97-5C6E-858B-EF91F6EB15CC}']
  { constructors } 

    {class} function init: DNSplineRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D): DNSplineRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime): DNSplineRotation3DKeyFrame; overload;
    {class} function init(value: DNRotation3D; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineRotation3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineRotation3DKeyFrame')]
  DNSplineRotation3DKeyFrame = interface(DNRotation3DKeyFrame)
  ['{B92FC4D3-6D0D-3093-983D-D6D50C90EEE9}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNRotation3D;
    procedure set_Value(value: DNRotation3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNRotation3D; keyFrameProgress: Double): DNRotation3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNRotation3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineRotation3DKeyFrame = class(TDNGenericImport<DNSplineRotation3DKeyFrameClass, DNSplineRotation3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNRotation3DKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{C99A04DB-E70E-5B51-953A-67DB24BC4B90}']
  { static getter & setter } 

    {class} function get_Empty: DNRotation3DKeyFrameCollection;

  { constructors } 

    {class} function init: DNRotation3DKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNRotation3DKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Rotation3DKeyFrameCollection')]
  DNRotation3DKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{A104A9DA-B33A-315C-87BD-A172C999999C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNRotation3DKeyFrame;
    procedure set_Item(index: Int32; value: DNRotation3DKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNRotation3DKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNRotation3DKeyFrame>; index: Int32);
    function Add(keyFrame: DNRotation3DKeyFrame): Int32;
    function &Contains(keyFrame: DNRotation3DKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNRotation3DKeyFrame);
    procedure Remove(keyFrame: DNRotation3DKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNRotation3DKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNRotation3DKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNRotation3DKeyFrameCollection = class(TDNGenericImport<DNRotation3DKeyFrameCollectionClass, DNRotation3DKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSingleKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{95E45E41-1E84-57DD-B55B-FF359C575EF5}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SingleKeyFrame')]
  DNSingleKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{10EA4B6B-4CE1-3C4B-B12D-69F789028574}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Single; keyFrameProgress: Double): Single;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Single read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSingleKeyFrame = class(TDNGenericImport<DNSingleKeyFrameClass, DNSingleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteSingleKeyFrameClass = interface(DNSingleKeyFrameClass)
  ['{B318EB42-C7D1-5A2E-A243-20900B662D5D}']
  { constructors } 

    {class} function init: DNDiscreteSingleKeyFrame; overload;
    {class} function init(value: Single): DNDiscreteSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime): DNDiscreteSingleKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteSingleKeyFrame')]
  DNDiscreteSingleKeyFrame = interface(DNSingleKeyFrame)
  ['{D5C511C7-1217-385C-AE27-61BDA2C958DD}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Single; keyFrameProgress: Double): Single;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Single read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteSingleKeyFrame = class(TDNGenericImport<DNDiscreteSingleKeyFrameClass, DNDiscreteSingleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingSingleKeyFrameClass = interface(DNSingleKeyFrameClass)
  ['{D3A25D53-BEE5-5742-83AE-9B2827580C10}']
  { constructors } 

    {class} function init: DNEasingSingleKeyFrame; overload;
    {class} function init(value: Single): DNEasingSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime): DNEasingSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingSingleKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingSingleKeyFrame')]
  DNEasingSingleKeyFrame = interface(DNSingleKeyFrame)
  ['{64E54916-2D92-3D9E-9171-6933AD518F0C}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Single; keyFrameProgress: Double): Single;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Single read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingSingleKeyFrame = class(TDNGenericImport<DNEasingSingleKeyFrameClass, DNEasingSingleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearSingleKeyFrameClass = interface(DNSingleKeyFrameClass)
  ['{06E3058B-9FF3-5E96-8D5C-F11F09ED5C29}']
  { constructors } 

    {class} function init: DNLinearSingleKeyFrame; overload;
    {class} function init(value: Single): DNLinearSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime): DNLinearSingleKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearSingleKeyFrame')]
  DNLinearSingleKeyFrame = interface(DNSingleKeyFrame)
  ['{5892276A-0065-3921-A0D5-B31BA5B6C729}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Single; keyFrameProgress: Double): Single;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Single read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearSingleKeyFrame = class(TDNGenericImport<DNLinearSingleKeyFrameClass, DNLinearSingleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineSingleKeyFrameClass = interface(DNSingleKeyFrameClass)
  ['{D64C5884-16F7-598A-8B58-00325F34602B}']
  { constructors } 

    {class} function init: DNSplineSingleKeyFrame; overload;
    {class} function init(value: Single): DNSplineSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime): DNSplineSingleKeyFrame; overload;
    {class} function init(value: Single; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineSingleKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineSingleKeyFrame')]
  DNSplineSingleKeyFrame = interface(DNSingleKeyFrame)
  ['{58A29B20-8D87-374E-AD39-B27AAE332399}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: Single; keyFrameProgress: Double): Single;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: Single read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineSingleKeyFrame = class(TDNGenericImport<DNSplineSingleKeyFrameClass, DNSplineSingleKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSingleKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{A09328F4-A214-5845-AF6E-8EA5E7666971}']
  { static getter & setter } 

    {class} function get_Empty: DNSingleKeyFrameCollection;

  { constructors } 

    {class} function init: DNSingleKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNSingleKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.SingleKeyFrameCollection')]
  DNSingleKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{BEBC3890-3322-3CC6-86D7-F2C02C93DC2D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNSingleKeyFrame;
    procedure set_Item(index: Int32; value: DNSingleKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSingleKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNSingleKeyFrame>; index: Int32);
    function Add(keyFrame: DNSingleKeyFrame): Int32;
    function &Contains(keyFrame: DNSingleKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNSingleKeyFrame);
    procedure Remove(keyFrame: DNSingleKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNSingleKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNSingleKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSingleKeyFrameCollection = class(TDNGenericImport<DNSingleKeyFrameCollectionClass, DNSingleKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSizeKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{F2D4460F-E29B-53AE-896D-BA34097EACC3}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SizeKeyFrame')]
  DNSizeKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{53B03A6E-E57C-3BBA-802E-A2AEA97BCD4E}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNSize;
    procedure set_Value(value: DDN.System.Windows.Common.DNSize);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNSize; keyFrameProgress: Double): DDN.System.Windows.Common.DNSize;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNSize read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSizeKeyFrame = class(TDNGenericImport<DNSizeKeyFrameClass, DNSizeKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteSizeKeyFrameClass = interface(DNSizeKeyFrameClass)
  ['{97AF7642-32B1-5322-B829-A6D3757A37A1}']
  { constructors } 

    {class} function init: DNDiscreteSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize): DNDiscreteSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime): DNDiscreteSizeKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteSizeKeyFrame')]
  DNDiscreteSizeKeyFrame = interface(DNSizeKeyFrame)
  ['{D2C149CE-9763-3C5B-B85D-EDA965787ACB}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNSize;
    procedure set_Value(value: DDN.System.Windows.Common.DNSize);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNSize; keyFrameProgress: Double): DDN.System.Windows.Common.DNSize;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNSize read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteSizeKeyFrame = class(TDNGenericImport<DNDiscreteSizeKeyFrameClass, DNDiscreteSizeKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingSizeKeyFrameClass = interface(DNSizeKeyFrameClass)
  ['{51E0017D-9FE8-5BF9-B919-1637E3838917}']
  { constructors } 

    {class} function init: DNEasingSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize): DNEasingSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime): DNEasingSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingSizeKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingSizeKeyFrame')]
  DNEasingSizeKeyFrame = interface(DNSizeKeyFrame)
  ['{6890DA91-4C24-37BF-A0B3-9BFBEDDAD11B}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNSize;
    procedure set_Value(value: DDN.System.Windows.Common.DNSize);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNSize; keyFrameProgress: Double): DDN.System.Windows.Common.DNSize;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNSize read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingSizeKeyFrame = class(TDNGenericImport<DNEasingSizeKeyFrameClass, DNEasingSizeKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearSizeKeyFrameClass = interface(DNSizeKeyFrameClass)
  ['{F74CAE75-102D-57E3-A01E-54967CA8910E}']
  { constructors } 

    {class} function init: DNLinearSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize): DNLinearSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime): DNLinearSizeKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearSizeKeyFrame')]
  DNLinearSizeKeyFrame = interface(DNSizeKeyFrame)
  ['{17CB19DD-9157-3A9C-991D-14E9ACD05787}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNSize;
    procedure set_Value(value: DDN.System.Windows.Common.DNSize);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNSize; keyFrameProgress: Double): DDN.System.Windows.Common.DNSize;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNSize read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearSizeKeyFrame = class(TDNGenericImport<DNLinearSizeKeyFrameClass, DNLinearSizeKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineSizeKeyFrameClass = interface(DNSizeKeyFrameClass)
  ['{F16871BD-FE0A-5B18-8523-D4F4E022C24E}']
  { constructors } 

    {class} function init: DNSplineSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize): DNSplineSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime): DNSplineSizeKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNSize; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineSizeKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineSizeKeyFrame')]
  DNSplineSizeKeyFrame = interface(DNSizeKeyFrame)
  ['{58AE4FBE-8912-3B61-91F8-4C7C1757EBBE}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNSize;
    procedure set_Value(value: DDN.System.Windows.Common.DNSize);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNSize; keyFrameProgress: Double): DDN.System.Windows.Common.DNSize;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNSize read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineSizeKeyFrame = class(TDNGenericImport<DNSplineSizeKeyFrameClass, DNSplineSizeKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSizeKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{91790943-B59C-5331-9C53-790437D73CC3}']
  { static getter & setter } 

    {class} function get_Empty: DNSizeKeyFrameCollection;

  { constructors } 

    {class} function init: DNSizeKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNSizeKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.SizeKeyFrameCollection')]
  DNSizeKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{097F3427-B140-37B3-B464-B415687960EA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNSizeKeyFrame;
    procedure set_Item(index: Int32; value: DNSizeKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNSizeKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNSizeKeyFrame>; index: Int32);
    function Add(keyFrame: DNSizeKeyFrame): Int32;
    function &Contains(keyFrame: DNSizeKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNSizeKeyFrame);
    procedure Remove(keyFrame: DNSizeKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNSizeKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNSizeKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSizeKeyFrameCollection = class(TDNGenericImport<DNSizeKeyFrameCollectionClass, DNSizeKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNStringKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{B9A40845-1375-5662-986D-BC5DB4F8345A}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.StringKeyFrame')]
  DNStringKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{B29B72B1-653E-34F7-93EE-05D1F87C35FB}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: string; keyFrameProgress: Double): string;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: string read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStringKeyFrame = class(TDNGenericImport<DNStringKeyFrameClass, DNStringKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteStringKeyFrameClass = interface(DNStringKeyFrameClass)
  ['{CD57B00C-2C11-5A28-82B0-BA3AECBD7D42}']
  { constructors } 

    {class} function init: DNDiscreteStringKeyFrame; overload;
    {class} function init(value: string): DNDiscreteStringKeyFrame; overload;
    {class} function init(value: string; keyTime: DNKeyTime): DNDiscreteStringKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteStringKeyFrame')]
  DNDiscreteStringKeyFrame = interface(DNStringKeyFrame)
  ['{D4B5E37A-4FA4-3017-A490-07AE9C984430}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: string; keyFrameProgress: Double): string;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: string read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteStringKeyFrame = class(TDNGenericImport<DNDiscreteStringKeyFrameClass, DNDiscreteStringKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNStringKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{0BD14D6A-A83B-5611-B1ED-0A0ABA514275}']
  { static getter & setter } 

    {class} function get_Empty: DNStringKeyFrameCollection;

  { constructors } 

    {class} function init: DNStringKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNStringKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.StringKeyFrameCollection')]
  DNStringKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{85F0779C-A37B-3A4F-B1CE-EB38A915C2A7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNStringKeyFrame;
    procedure set_Item(index: Int32; value: DNStringKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNStringKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNStringKeyFrame>; index: Int32);
    function Add(keyFrame: DNStringKeyFrame): Int32;
    function &Contains(keyFrame: DNStringKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNStringKeyFrame);
    procedure Remove(keyFrame: DNStringKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNStringKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNStringKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStringKeyFrameCollection = class(TDNGenericImport<DNStringKeyFrameCollectionClass, DNStringKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVector3DKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{ADF30300-BCD1-5332-8230-296C7FDA997F}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.Vector3DKeyFrame')]
  DNVector3DKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{C1C3B065-A307-3682-9873-95E0EBBCFC57}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNVector3D;
    procedure set_Value(value: DNVector3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNVector3D; keyFrameProgress: Double): DNVector3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNVector3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DKeyFrame = class(TDNGenericImport<DNVector3DKeyFrameClass, DNVector3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteVector3DKeyFrameClass = interface(DNVector3DKeyFrameClass)
  ['{F4222DE2-F81E-5BF5-AB74-BEA353E33FF4}']
  { constructors } 

    {class} function init: DNDiscreteVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D): DNDiscreteVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime): DNDiscreteVector3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteVector3DKeyFrame')]
  DNDiscreteVector3DKeyFrame = interface(DNVector3DKeyFrame)
  ['{92E6D4F0-96A9-370A-A42E-E6A1E4028A6C}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNVector3D;
    procedure set_Value(value: DNVector3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNVector3D; keyFrameProgress: Double): DNVector3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNVector3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteVector3DKeyFrame = class(TDNGenericImport<DNDiscreteVector3DKeyFrameClass, DNDiscreteVector3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingVector3DKeyFrameClass = interface(DNVector3DKeyFrameClass)
  ['{D7196E5C-9642-592C-9F01-2B6C02E32871}']
  { constructors } 

    {class} function init: DNEasingVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D): DNEasingVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime): DNEasingVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingVector3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingVector3DKeyFrame')]
  DNEasingVector3DKeyFrame = interface(DNVector3DKeyFrame)
  ['{22845A46-F62E-355B-B3AB-29004F6BE92C}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNVector3D;
    procedure set_Value(value: DNVector3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNVector3D; keyFrameProgress: Double): DNVector3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNVector3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingVector3DKeyFrame = class(TDNGenericImport<DNEasingVector3DKeyFrameClass, DNEasingVector3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearVector3DKeyFrameClass = interface(DNVector3DKeyFrameClass)
  ['{A21DC5D3-7920-5727-92FE-ADA90961A3FA}']
  { constructors } 

    {class} function init: DNLinearVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D): DNLinearVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime): DNLinearVector3DKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearVector3DKeyFrame')]
  DNLinearVector3DKeyFrame = interface(DNVector3DKeyFrame)
  ['{1F3204C4-1714-31F6-89E2-06172D96AB84}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNVector3D;
    procedure set_Value(value: DNVector3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNVector3D; keyFrameProgress: Double): DNVector3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNVector3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearVector3DKeyFrame = class(TDNGenericImport<DNLinearVector3DKeyFrameClass, DNLinearVector3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineVector3DKeyFrameClass = interface(DNVector3DKeyFrameClass)
  ['{F561D238-4797-5842-A387-760DF8DA77C2}']
  { constructors } 

    {class} function init: DNSplineVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D): DNSplineVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime): DNSplineVector3DKeyFrame; overload;
    {class} function init(value: DNVector3D; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineVector3DKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineVector3DKeyFrame')]
  DNSplineVector3DKeyFrame = interface(DNVector3DKeyFrame)
  ['{1CE0B4AD-1D54-3182-ABFB-FF719872040A}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DNVector3D;
    procedure set_Value(value: DNVector3D);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DNVector3D; keyFrameProgress: Double): DNVector3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DNVector3D read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineVector3DKeyFrame = class(TDNGenericImport<DNSplineVector3DKeyFrameClass, DNSplineVector3DKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVector3DKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{33FAB4DC-6189-59F4-828E-945C28E61FD6}']
  { static getter & setter } 

    {class} function get_Empty: DNVector3DKeyFrameCollection;

  { constructors } 

    {class} function init: DNVector3DKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNVector3DKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.Vector3DKeyFrameCollection')]
  DNVector3DKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{42F8FC2E-3137-3EA4-A7CE-983F3025D172}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNVector3DKeyFrame;
    procedure set_Item(index: Int32; value: DNVector3DKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVector3DKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNVector3DKeyFrame>; index: Int32);
    function Add(keyFrame: DNVector3DKeyFrame): Int32;
    function &Contains(keyFrame: DNVector3DKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNVector3DKeyFrame);
    procedure Remove(keyFrame: DNVector3DKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNVector3DKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNVector3DKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DKeyFrameCollection = class(TDNGenericImport<DNVector3DKeyFrameCollectionClass, DNVector3DKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVectorKeyFrameClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{2ECC1172-F5E0-55A0-8326-4859F45768AD}']
  { static fields getter & setter } 

   function __fakeFieldGet_KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ValueProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeyTimeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeyTimeProperty;
    {class} property ValueProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ValueProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.VectorKeyFrame')]
  DNVectorKeyFrame = interface(DDN.System.Windows.Common.DNFreezable)
  ['{B5363F89-59E3-3C57-87B1-0FB0A75C790E}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNVector;
    procedure set_Value(value: DDN.System.Windows.Common.DNVector);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNVector; keyFrameProgress: Double): DDN.System.Windows.Common.DNVector;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNVector read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorKeyFrame = class(TDNGenericImport<DNVectorKeyFrameClass, DNVectorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNDiscreteVectorKeyFrameClass = interface(DNVectorKeyFrameClass)
  ['{97AB5948-CA22-55B9-B38D-DB3B69FF50B3}']
  { constructors } 

    {class} function init: DNDiscreteVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector): DNDiscreteVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime): DNDiscreteVectorKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.DiscreteVectorKeyFrame')]
  DNDiscreteVectorKeyFrame = interface(DNVectorKeyFrame)
  ['{96DF2EE4-7341-33C8-B664-25A4AF3FCCC2}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNVector;
    procedure set_Value(value: DDN.System.Windows.Common.DNVector);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNVector; keyFrameProgress: Double): DDN.System.Windows.Common.DNVector;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNVector read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDiscreteVectorKeyFrame = class(TDNGenericImport<DNDiscreteVectorKeyFrameClass, DNDiscreteVectorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNEasingVectorKeyFrameClass = interface(DNVectorKeyFrameClass)
  ['{96671E35-D915-51FB-8927-9EFAC18743A9}']
  { constructors } 

    {class} function init: DNEasingVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector): DNEasingVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime): DNEasingVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime; easingFunction: DNIEasingFunction): DNEasingVectorKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property EasingFunctionProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EasingFunctionProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.EasingVectorKeyFrame')]
  DNEasingVectorKeyFrame = interface(DNVectorKeyFrame)
  ['{20FEF489-82EE-3A32-A944-E429CFBC782B}']
  { getters & setters } 

    function get_EasingFunction: DNIEasingFunction;
    procedure set_EasingFunction(value: DNIEasingFunction);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNVector;
    procedure set_Value(value: DDN.System.Windows.Common.DNVector);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNVector; keyFrameProgress: Double): DDN.System.Windows.Common.DNVector;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EasingFunction: DNIEasingFunction read get_EasingFunction write set_EasingFunction;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNVector read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNEasingVectorKeyFrame = class(TDNGenericImport<DNEasingVectorKeyFrameClass, DNEasingVectorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNLinearVectorKeyFrameClass = interface(DNVectorKeyFrameClass)
  ['{091BDB2E-6F7B-505D-A655-1472979192A2}']
  { constructors } 

    {class} function init: DNLinearVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector): DNLinearVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime): DNLinearVectorKeyFrame; overload;

  end;

  [DNTypeName('System.Windows.Media.Animation.LinearVectorKeyFrame')]
  DNLinearVectorKeyFrame = interface(DNVectorKeyFrame)
  ['{B56B7145-CFED-3EF6-85B6-987BBA6DA5BB}']
  { getters & setters } 

    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNVector;
    procedure set_Value(value: DDN.System.Windows.Common.DNVector);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNVector; keyFrameProgress: Double): DDN.System.Windows.Common.DNVector;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNVector read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLinearVectorKeyFrame = class(TDNGenericImport<DNLinearVectorKeyFrameClass, DNLinearVectorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNSplineVectorKeyFrameClass = interface(DNVectorKeyFrameClass)
  ['{E7828101-E973-56AE-A29F-922D76154A6F}']
  { constructors } 

    {class} function init: DNSplineVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector): DNSplineVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime): DNSplineVectorKeyFrame; overload;
    {class} function init(value: DDN.System.Windows.Common.DNVector; keyTime: DNKeyTime; keySpline: DNKeySpline): DNSplineVectorKeyFrame; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property KeySplineProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_KeySplineProperty;

  end;

  [DNTypeName('System.Windows.Media.Animation.SplineVectorKeyFrame')]
  DNSplineVectorKeyFrame = interface(DNVectorKeyFrame)
  ['{09210E90-7A06-3D8D-96CA-A6D157C6778D}']
  { getters & setters } 

    function get_KeySpline: DNKeySpline;
    procedure set_KeySpline(value: DNKeySpline);
    function get_KeyTime: DNKeyTime;
    procedure set_KeyTime(value: DNKeyTime);
    function get_Value: DDN.System.Windows.Common.DNVector;
    procedure set_Value(value: DDN.System.Windows.Common.DNVector);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InterpolateValue(baseValue: DDN.System.Windows.Common.DNVector; keyFrameProgress: Double): DDN.System.Windows.Common.DNVector;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeySpline: DNKeySpline read get_KeySpline write set_KeySpline;
    property KeyTime: DNKeyTime read get_KeyTime write set_KeyTime;
    property Value: DDN.System.Windows.Common.DNVector read get_Value write set_Value;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNSplineVectorKeyFrame = class(TDNGenericImport<DNSplineVectorKeyFrameClass, DNSplineVectorKeyFrame>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNVectorKeyFrameCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{9FE11EDE-22A6-5E29-91A7-0783C578E7D1}']
  { static getter & setter } 

    {class} function get_Empty: DNVectorKeyFrameCollection;

  { constructors } 

    {class} function init: DNVectorKeyFrameCollection;

  { static propertys } 

    {class} property Empty: DNVectorKeyFrameCollection read get_Empty;
  end;

  [DNTypeName('System.Windows.Media.Animation.VectorKeyFrameCollection')]
  DNVectorKeyFrameCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{6A40D417-1C6A-32BE-9B65-0654B538D2D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNVectorKeyFrame;
    procedure set_Item(index: Int32; value: DNVectorKeyFrame);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVectorKeyFrameCollection;
    procedure CopyTo(&array: TArray<DNVectorKeyFrame>; index: Int32);
    function Add(keyFrame: DNVectorKeyFrame): Int32;
    function &Contains(keyFrame: DNVectorKeyFrame): Boolean;
    procedure Insert(index: Int32; keyFrame: DNVectorKeyFrame);
    procedure Remove(keyFrame: DNVectorKeyFrame);
    procedure RemoveAt(index: Int32);
    function IndexOf(keyFrame: DNVectorKeyFrame): Int32;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNVectorKeyFrame read get_Item write set_Item; default;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorKeyFrameCollection = class(TDNGenericImport<DNVectorKeyFrameCollectionClass, DNVectorKeyFrameCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDoubleCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{07EE537F-CD55-5899-AB5C-3BEE0B85086B}']
  { constructors } 

    {class} function init: DNDoubleCollection; overload;
    {class} function init(capacity: Int32): DNDoubleCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<Double>): DNDoubleCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNDoubleCollection;

  end;

  [DNTypeName('System.Windows.Media.DoubleCollection')]
  DNDoubleCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{DA2C6912-B60C-3A40-94FF-DAF8E6258145}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNDoubleCollection;
    function CloneCurrentValue: DNDoubleCollection;
    function &Contains(value: Double): Boolean;
    function IndexOf(value: Double): Int32;
    procedure Insert(index: Int32; value: Double);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<Double>; index: Int32);
    function GetEnumerator: DNMedia_DoubleCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDoubleCollection = class(TDNGenericImport<DNDoubleCollectionClass, DNDoubleCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNImageMetadataClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{2CF2594C-86C1-56F6-B32B-A4FB02D93DA4}']
  end;

  [DNTypeName('System.Windows.Media.ImageMetadata')]
  DNImageMetadata = interface(DDN.System.Windows.Common.DNFreezable)
  ['{AFF212DC-9510-3375-B431-03E3894113EC}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNImageMetadata;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNImageMetadata = class(TDNGenericImport<DNImageMetadataClass, DNImageMetadata>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapMetadataClass = interface(DNImageMetadataClass)
  ['{B88C4BAE-0040-501E-8976-D75DDAE2DFFC}']
  { constructors } 

    {class} function init(containerFormat: string): DNBitmapMetadata;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapMetadata')]
  DNBitmapMetadata = interface(DNImageMetadata)
  ['{3891AD10-47A9-3C79-A518-A5FEB49487C3}']
  { getters & setters } 

    function get_Format: string;
    function get_Location: string;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Rating: Int32;
    procedure set_Rating(value: Int32);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_DateTaken: string;
    procedure set_DateTaken(value: string);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Copyright: string;
    procedure set_Copyright(value: string);
    function get_CameraManufacturer: string;
    procedure set_CameraManufacturer(value: string);
    function get_CameraModel: string;
    procedure set_CameraModel(value: string);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNBitmapMetadata;
    procedure SetQuery(query: string; value: DDN.mscorlib.DNObject);
    function GetQuery(query: string): DDN.mscorlib.DNObject;
    procedure RemoveQuery(query: string);
    function ContainsQuery(query: string): Boolean;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: string read get_Format;
    property Location: string read get_Location;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Title: string read get_Title write set_Title;
    property Rating: Int32 read get_Rating write set_Rating;
    property Subject: string read get_Subject write set_Subject;
    property Comment: string read get_Comment write set_Comment;
    property DateTaken: string read get_DateTaken write set_DateTaken;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Copyright: string read get_Copyright write set_Copyright;
    property CameraManufacturer: string read get_CameraManufacturer write set_CameraManufacturer;
    property CameraModel: string read get_CameraModel write set_CameraModel;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapMetadata = class(TDNGenericImport<DNBitmapMetadataClass, DNBitmapMetadata>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNInPlaceBitmapMetadataWriterClass = interface(DNBitmapMetadataClass)
  ['{29610F97-1F35-5201-AF93-786DF3CFDE05}']
  end;

  [DNTypeName('System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter')]
  DNInPlaceBitmapMetadataWriter = interface(DNBitmapMetadata)
  ['{E442D6AB-F913-3EA4-AE04-33E7A5A630B6}']
  { getters & setters } 

    function get_Format: string;
    function get_Location: string;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Rating: Int32;
    procedure set_Rating(value: Int32);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_DateTaken: string;
    procedure set_DateTaken(value: string);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Copyright: string;
    procedure set_Copyright(value: string);
    function get_CameraManufacturer: string;
    procedure set_CameraManufacturer(value: string);
    function get_CameraModel: string;
    procedure set_CameraModel(value: string);
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TrySave: Boolean;
    function Clone: DNInPlaceBitmapMetadataWriter;
    procedure SetQuery(query: string; value: DDN.mscorlib.DNObject);
    function GetQuery(query: string): DDN.mscorlib.DNObject;
    procedure RemoveQuery(query: string);
    function ContainsQuery(query: string): Boolean;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: string read get_Format;
    property Location: string read get_Location;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Title: string read get_Title write set_Title;
    property Rating: Int32 read get_Rating write set_Rating;
    property Subject: string read get_Subject write set_Subject;
    property Comment: string read get_Comment write set_Comment;
    property DateTaken: string read get_DateTaken write set_DateTaken;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Copyright: string read get_Copyright write set_Copyright;
    property CameraManufacturer: string read get_CameraManufacturer write set_CameraManufacturer;
    property CameraModel: string read get_CameraModel write set_CameraModel;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInPlaceBitmapMetadataWriter = class(TDNGenericImport<DNInPlaceBitmapMetadataWriterClass, DNInPlaceBitmapMetadataWriter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNInt32CollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{57C3EB6A-1203-54E9-8772-4E8E29D2F405}']
  { constructors } 

    {class} function init: DNInt32Collection; overload;
    {class} function init(capacity: Int32): DNInt32Collection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<Int32>): DNInt32Collection; overload;

  { static methods } 

    {class} function Parse(source: string): DNInt32Collection;

  end;

  [DNTypeName('System.Windows.Media.Int32Collection')]
  DNInt32Collection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{6388C578-154A-3D71-9D5D-9654E0389ECC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNInt32Collection;
    function CloneCurrentValue: DNInt32Collection;
    function &Contains(value: Int32): Boolean;
    function IndexOf(value: Int32): Int32;
    procedure Insert(index: Int32; value: Int32);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<Int32>; index: Int32);
    function GetEnumerator: DNMedia_Int32Collection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInt32Collection = class(TDNGenericImport<DNInt32CollectionClass, DNInt32Collection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform2DTo3DClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{FF03B4C2-F644-538D-B1D8-94D70D9621D0}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform2DTo3D')]
  DNGeneralTransform2DTo3D = interface(DDN.System.Windows.Common.DNFreezable)
  ['{7B68BE2D-0D08-3ECE-B674-EAA625FD077E}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DDN.System.Windows.Common.DNPoint; out result: DNPoint3D): Boolean;
    function Transform(point: DDN.System.Windows.Common.DNPoint): DNPoint3D;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform2DTo3D = class(TDNGenericImport<DNGeneralTransform2DTo3DClass, DNGeneralTransform2DTo3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNGeneralTransform3DTo2DClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{28AC0F64-5AB1-51B0-AA42-A437E3AF31BE}']
  end;

  [DNTypeName('System.Windows.Media.Media3D.GeneralTransform3DTo2D')]
  DNGeneralTransform3DTo2D = interface(DDN.System.Windows.Common.DNFreezable)
  ['{98B49F46-9948-3578-B360-D07A0E735CF4}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function TryTransform(inPoint: DNPoint3D; out result: DDN.System.Windows.Common.DNPoint): Boolean;
    function Transform(point: DNPoint3D): DDN.System.Windows.Common.DNPoint;
    function TransformBounds(rect3D: DNRect3D): DDN.System.Windows.Common.DNRect;
    function Clone: DDN.System.Windows.Common.DNFreezable;
    function CloneCurrentValue: DDN.System.Windows.Common.DNFreezable;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGeneralTransform3DTo2D = class(TDNGenericImport<DNGeneralTransform3DTo2DClass, DNGeneralTransform3DTo2D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNPoint3DCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{FF47FC0A-743F-5FB0-ACED-9DADCF67460B}']
  { constructors } 

    {class} function init: DNPoint3DCollection; overload;
    {class} function init(capacity: Int32): DNPoint3DCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNPoint3D>): DNPoint3DCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNPoint3DCollection;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Point3DCollection')]
  DNPoint3DCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{CBF7E23A-5E12-3881-BBF4-BBBEDFE27E0D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNPoint3DCollection;
    function CloneCurrentValue: DNPoint3DCollection;
    function &Contains(value: DNPoint3D): Boolean;
    function IndexOf(value: DNPoint3D): Int32;
    procedure Insert(index: Int32; value: DNPoint3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNPoint3D>; index: Int32);
    function GetEnumerator: DNMedia3D_Point3DCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPoint3DCollection = class(TDNGenericImport<DNPoint3DCollectionClass, DNPoint3DCollection>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVector3DCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{AEDF2793-777E-5291-8CC0-109235AE3592}']
  { constructors } 

    {class} function init: DNVector3DCollection; overload;
    {class} function init(capacity: Int32): DNVector3DCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DNVector3D>): DNVector3DCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNVector3DCollection;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Vector3DCollection')]
  DNVector3DCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{B22AC619-BEB6-3ED9-8546-E72D4503BDF6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVector3DCollection;
    function CloneCurrentValue: DNVector3DCollection;
    function &Contains(value: DNVector3D): Boolean;
    function IndexOf(value: DNVector3D): Int32;
    procedure Insert(index: Int32; value: DNVector3D);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNVector3D>; index: Int32);
    function GetEnumerator: DNMedia3D_Vector3DCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVector3DCollection = class(TDNGenericImport<DNVector3DCollectionClass, DNVector3DCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNPointCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{739D9B4E-CFE6-5E51-9A0F-5331596805FD}']
  { constructors } 

    {class} function init: DNPointCollection; overload;
    {class} function init(capacity: Int32): DNPointCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNPoint>): DNPointCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNPointCollection;

  end;

  [DNTypeName('System.Windows.Media.PointCollection')]
  DNPointCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{4B4689A8-9559-37BE-AB1C-D52EC2AF1D27}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyTo(&array: TArray<DDN.System.Windows.Common.DNPoint>; index: Int32);
    function Clone: DNPointCollection;
    function CloneCurrentValue: DNPointCollection;
    function &Contains(value: DDN.System.Windows.Common.DNPoint): Boolean;
    function IndexOf(value: DDN.System.Windows.Common.DNPoint): Int32;
    procedure Insert(index: Int32; value: DDN.System.Windows.Common.DNPoint);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DNMedia_PointCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPointCollection = class(TDNGenericImport<DNPointCollectionClass, DNPointCollection>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVectorCollectionClass = interface(DDN.System.Windows.Common.DNFreezableClass)
  ['{A865B601-5ED6-5FB7-A69F-DC78595A3F00}']
  { constructors } 

    {class} function init: DNVectorCollection; overload;
    {class} function init(capacity: Int32): DNVectorCollection; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNVector>): DNVectorCollection; overload;

  { static methods } 

    {class} function Parse(source: string): DNVectorCollection;

  end;

  [DNTypeName('System.Windows.Media.VectorCollection')]
  DNVectorCollection = interface(DDN.System.Windows.Common.DNFreezable)
  ['{D5A8600A-A911-3F56-80D2-A8D6ECC4B623}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Clone: DNVectorCollection;
    function CloneCurrentValue: DNVectorCollection;
    function &Contains(value: DDN.System.Windows.Common.DNVector): Boolean;
    function IndexOf(value: DDN.System.Windows.Common.DNVector): Int32;
    procedure Insert(index: Int32; value: DDN.System.Windows.Common.DNVector);
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DDN.System.Windows.Common.DNVector>; index: Int32);
    function GetEnumerator: DNMedia_VectorCollection_Enumerator;
    function ToString: string; overload;
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetAsFrozen: DDN.System.Windows.Common.DNFreezable;
    function GetCurrentValueAsFrozen: DDN.System.Windows.Common.DNFreezable;
    procedure Freeze;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property CanFreeze: Boolean read get_CanFreeze;
    property IsFrozen: Boolean read get_IsFrozen;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVectorCollection = class(TDNGenericImport<DNVectorCollectionClass, DNVectorCollection>) end;

  //-------------namespace: System.Windows.Ink----------------
  DNGestureRecognizerClass = interface(DDN.System.Windows.Common.DNDependencyObjectClass)
  ['{EED9A77F-8F95-56EF-9014-030B8D47F746}']
  { constructors } 

    {class} function init: DNGestureRecognizer; overload;
    {class} function init(enabledApplicationGestures: DDN.mscorlib.DNIEnumerable<DNApplicationGesture>): DNGestureRecognizer; overload;

  end;

  [DNTypeName('System.Windows.Ink.GestureRecognizer')]
  DNGestureRecognizer = interface(DDN.System.Windows.Common.DNDependencyObject)
  ['{45A947B5-82F6-3D22-9872-2AB431708EEE}']
  { getters & setters } 

    function get_IsRecognizerAvailable: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure SetEnabledGestures(applicationGestures: DDN.mscorlib.DNIEnumerable<DNApplicationGesture>);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRecognizerAvailable: Boolean read get_IsRecognizerAvailable;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGestureRecognizer = class(TDNGenericImport<DNGestureRecognizerClass, DNGestureRecognizer>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNVisual3DClass = interface(DDN.System.Windows.Common.DNDependencyObjectClass)
  ['{B50C8E5C-B2B7-520A-9961-A10326CFC2F8}']
  { static fields getter & setter } 

   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Visual3D')]
  DNVisual3D = interface(DDN.System.Windows.Common.DNDependencyObject)
  ['{0347186A-1C4F-3B9A-BCBB-8E05DE293561}']
  { getters & setters } 

    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVisual3D = class(TDNGenericImport<DNVisual3DClass, DNVisual3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNModelVisual3DClass = interface(DNVisual3DClass)
  ['{D7B3E3AD-BA2A-5452-B011-F036F1922307}']
  { constructors } 

    {class} function init: DNModelVisual3D;

  { static fields getter & setter } 

   function __fakeFieldGet_ContentProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_TransformProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ContentProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ContentProperty;
    {class} property TransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_TransformProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.ModelVisual3D')]
  DNModelVisual3D = interface(DNVisual3D)
  ['{220F30C1-7FE6-3518-BA6D-65F72E5B7DF9}']
  { getters & setters } 

    function get_Children: DNVisual3DCollection;
    function get_Content: DNModel3D;
    procedure set_Content(value: DNModel3D);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNVisual3DCollection read get_Children;
    property Content: DNModel3D read get_Content write set_Content;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNModelVisual3D = class(TDNGenericImport<DNModelVisual3DClass, DNModelVisual3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNViewport2DVisual3DClass = interface(DNVisual3DClass)
  ['{2F3AF7D6-058C-5F39-A188-931A24D90972}']
  { constructors } 

    {class} function init: DNViewport2DVisual3D;

  { static fields getter & setter } 

   function __fakeFieldGet_VisualProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_MaterialProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsVisualHostMaterialProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CacheModeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property VisualProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_VisualProperty;
    {class} property GeometryProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_GeometryProperty;
    {class} property MaterialProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_MaterialProperty;
    {class} property IsVisualHostMaterialProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsVisualHostMaterialProperty;
    {class} property CacheModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CacheModeProperty;

  { static methods } 

    {class} function GetIsVisualHostMaterial(element: DNMaterial): Boolean;
    {class} procedure SetIsVisualHostMaterial(element: DNMaterial; value: Boolean);

  end;

  [DNTypeName('System.Windows.Media.Media3D.Viewport2DVisual3D')]
  DNViewport2DVisual3D = interface(DNVisual3D)
  ['{251FCDF5-AE22-3464-A35A-F37B25866B64}']
  { getters & setters } 

    function get_Visual: DNVisual;
    procedure set_Visual(value: DNVisual);
    function get_Geometry: DNGeometry3D;
    procedure set_Geometry(value: DNGeometry3D);
    function get_Material: DNMaterial;
    procedure set_Material(value: DNMaterial);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Visual: DNVisual read get_Visual write set_Visual;
    property Geometry: DNGeometry3D read get_Geometry write set_Geometry;
    property Material: DNMaterial read get_Material write set_Material;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNViewport2DVisual3D = class(TDNGenericImport<DNViewport2DVisual3DClass, DNViewport2DVisual3D>) end;

  //-------------namespace: System.Windows----------------
  DNUIElement3DClass = interface(DNVisual3DClass)
  ['{09424859-26BC-5E22-A3F1-BF6B82943125}']
  { static fields getter & setter } 

   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_GotTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_VisibilityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsHitTestVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonDownEvent;
    {class} property MouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonDownEvent;
    {class} property PreviewMouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonUpEvent;
    {class} property MouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonUpEvent;
    {class} property PreviewMouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonDownEvent;
    {class} property MouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonDownEvent;
    {class} property PreviewMouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonUpEvent;
    {class} property MouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonUpEvent;
    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;
    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;
    {class} property PreviewTouchDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchDownEvent;
    {class} property TouchDownEvent: DNRoutedEvent read __fakeFieldGet_TouchDownEvent;
    {class} property PreviewTouchMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchMoveEvent;
    {class} property TouchMoveEvent: DNRoutedEvent read __fakeFieldGet_TouchMoveEvent;
    {class} property PreviewTouchUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchUpEvent;
    {class} property TouchUpEvent: DNRoutedEvent read __fakeFieldGet_TouchUpEvent;
    {class} property GotTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotTouchCaptureEvent;
    {class} property LostTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostTouchCaptureEvent;
    {class} property TouchEnterEvent: DNRoutedEvent read __fakeFieldGet_TouchEnterEvent;
    {class} property TouchLeaveEvent: DNRoutedEvent read __fakeFieldGet_TouchLeaveEvent;
    {class} property IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseDirectlyOverProperty;
    {class} property IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseOverProperty;
    {class} property IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusOverProperty;
    {class} property IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusWithinProperty;
    {class} property IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCapturedProperty;
    {class} property IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCaptureWithinProperty;
    {class} property IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusDirectlyOverProperty;
    {class} property IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCapturedProperty;
    {class} property IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCaptureWithinProperty;
    {class} property IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusedProperty;
    {class} property AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesDirectlyOverProperty;
    {class} property AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesOverProperty;
    {class} property AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedProperty;
    {class} property AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedWithinProperty;
    {class} property AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AllowDropProperty;
    {class} property VisibilityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_VisibilityProperty;
    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFocusedProperty;
    {class} property IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsEnabledProperty;
    {class} property IsHitTestVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsHitTestVisibleProperty;
    {class} property IsVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsVisibleProperty;
    {class} property FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FocusableProperty;

  end;

  [DNTypeName('System.Windows.UIElement3D')]
  DNUIElement3D = interface(DNVisual3D)
  ['{E9AF1DF8-77DA-399C-AB53-60418F04E23C}']
  { getters & setters } 

    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DDN.System.Windows.Common.DNTraversalRequest): Boolean;
    function PredictFocus(direction: DDN.System.Windows.Common.DNFocusNavigationDirection): DDN.System.Windows.Common.DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure InvalidateModel;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNUIElement3D = class(TDNGenericImport<DNUIElement3DClass, DNUIElement3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNContainerUIElement3DClass = interface(DNUIElement3DClass)
  ['{C047F1E2-618F-5327-BAEF-933BB095DB0D}']
  { constructors } 

    {class} function init: DNContainerUIElement3D;

  end;

  [DNTypeName('System.Windows.Media.Media3D.ContainerUIElement3D')]
  DNContainerUIElement3D = interface(DNUIElement3D)
  ['{EE05A9D2-9947-34EA-81FF-9DD13DC281B9}']
  { getters & setters } 

    function get_Children: DNVisual3DCollection;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DDN.System.Windows.Common.DNTraversalRequest): Boolean;
    function PredictFocus(direction: DDN.System.Windows.Common.DNFocusNavigationDirection): DDN.System.Windows.Common.DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure InvalidateModel;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNVisual3DCollection read get_Children;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNContainerUIElement3D = class(TDNGenericImport<DNContainerUIElement3DClass, DNContainerUIElement3D>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNModelUIElement3DClass = interface(DNUIElement3DClass)
  ['{3D07CB35-7F1C-5877-8714-19D6C0EFFF03}']
  { constructors } 

    {class} function init: DNModelUIElement3D;

  { static fields getter & setter } 

   function __fakeFieldGet_ModelProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property ModelProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ModelProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.ModelUIElement3D')]
  DNModelUIElement3D = interface(DNUIElement3D)
  ['{03D33A6B-04BB-3FA2-9D75-66C8689FC02D}']
  { getters & setters } 

    function get_Model: DNModel3D;
    procedure set_Model(value: DNModel3D);
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_Transform: DNTransform3D;
    procedure set_Transform(value: DNTransform3D);
    function get_HasAnimatedProperties: Boolean;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);

  { methods } 

    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DDN.System.Windows.Common.DNTraversalRequest): Boolean;
    function PredictFocus(direction: DDN.System.Windows.Common.DNFocusNavigationDirection): DDN.System.Windows.Common.DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure InvalidateModel;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform3D; overload;
    function TransformToDescendant(descendant: DNVisual3D): DNGeneralTransform3D;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform3DTo2D; overload;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Model: DNModel3D read get_Model write set_Model;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property Transform: DNTransform3D read get_Transform write set_Transform;
    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNModelUIElement3D = class(TDNGenericImport<DNModelUIElement3DClass, DNModelUIElement3D>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualClass = interface(DDN.System.Windows.Common.DNDependencyObjectClass)
  ['{6EA45E0D-0B28-51A7-9787-88A86CEE0601}']
  end;

  [DNTypeName('System.Windows.Media.Visual')]
  DNVisual = interface(DDN.System.Windows.Common.DNDependencyObject)
  ['{58DE4D0B-96E1-3B59-91F8-CC815D32C404}']
  { getters & setters } 

    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVisual = class(TDNGenericImport<DNVisualClass, DNVisual>) end;

  //-------------namespace: System.Windows.Media----------------
  DNContainerVisualClass = interface(DNVisualClass)
  ['{F2BD9CB7-31D5-59D9-98CD-855B2D454176}']
  { constructors } 

    {class} function init: DNContainerVisual;

  end;

  [DNTypeName('System.Windows.Media.ContainerVisual')]
  DNContainerVisual = interface(DNVisual)
  ['{DE057282-21B8-3939-9365-AF9EBF80ADB8}']
  { getters & setters } 

    function get_Children: DNVisualCollection;
    function get_Parent: DDN.System.Windows.Common.DNDependencyObject;
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_XSnappingGuidelines: DNDoubleCollection;
    procedure set_XSnappingGuidelines(value: DNDoubleCollection);
    function get_YSnappingGuidelines: DNDoubleCollection;
    procedure set_YSnappingGuidelines(value: DNDoubleCollection);
    function get_ContentBounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Offset: DDN.System.Windows.Common.DNVector;
    procedure set_Offset(value: DDN.System.Windows.Common.DNVector);
    function get_DescendantBounds: DDN.System.Windows.Common.DNRect;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function HitTest(point: DDN.System.Windows.Common.DNPoint): DNHitTestResult; overload;
    procedure HitTest(filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters); overload;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNVisualCollection read get_Children;
    property Parent: DDN.System.Windows.Common.DNDependencyObject read get_Parent;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property Effect: DNEffect read get_Effect write set_Effect;
    property XSnappingGuidelines: DNDoubleCollection read get_XSnappingGuidelines write set_XSnappingGuidelines;
    property YSnappingGuidelines: DNDoubleCollection read get_YSnappingGuidelines write set_YSnappingGuidelines;
    property ContentBounds: DDN.System.Windows.Common.DNRect read get_ContentBounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Offset: DDN.System.Windows.Common.DNVector read get_Offset write set_Offset;
    property DescendantBounds: DDN.System.Windows.Common.DNRect read get_DescendantBounds;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNContainerVisual = class(TDNGenericImport<DNContainerVisualClass, DNContainerVisual>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingVisualClass = interface(DNContainerVisualClass)
  ['{82A6C7F8-F2F2-56F5-B9EE-72DCADE66A94}']
  { constructors } 

    {class} function init: DNDrawingVisual;

  end;

  [DNTypeName('System.Windows.Media.DrawingVisual')]
  DNDrawingVisual = interface(DNContainerVisual)
  ['{270909F0-5A99-3185-A3A2-B219CBA26349}']
  { getters & setters } 

    function get_Drawing: DNDrawingGroup;
    function get_Children: DNVisualCollection;
    function get_Parent: DDN.System.Windows.Common.DNDependencyObject;
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_XSnappingGuidelines: DNDoubleCollection;
    procedure set_XSnappingGuidelines(value: DNDoubleCollection);
    function get_YSnappingGuidelines: DNDoubleCollection;
    procedure set_YSnappingGuidelines(value: DNDoubleCollection);
    function get_ContentBounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Offset: DDN.System.Windows.Common.DNVector;
    procedure set_Offset(value: DDN.System.Windows.Common.DNVector);
    function get_DescendantBounds: DDN.System.Windows.Common.DNRect;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function RenderOpen: DNDrawingContext;
    function HitTest(point: DDN.System.Windows.Common.DNPoint): DNHitTestResult; overload;
    procedure HitTest(filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters); overload;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Drawing: DNDrawingGroup read get_Drawing;
    property Children: DNVisualCollection read get_Children;
    property Parent: DDN.System.Windows.Common.DNDependencyObject read get_Parent;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property Effect: DNEffect read get_Effect write set_Effect;
    property XSnappingGuidelines: DNDoubleCollection read get_XSnappingGuidelines write set_XSnappingGuidelines;
    property YSnappingGuidelines: DNDoubleCollection read get_YSnappingGuidelines write set_YSnappingGuidelines;
    property ContentBounds: DDN.System.Windows.Common.DNRect read get_ContentBounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Offset: DDN.System.Windows.Common.DNVector read get_Offset write set_Offset;
    property DescendantBounds: DDN.System.Windows.Common.DNRect read get_DescendantBounds;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingVisual = class(TDNGenericImport<DNDrawingVisualClass, DNDrawingVisual>) end;

  //-------------namespace: System.Windows.Media----------------
  DNHostVisualClass = interface(DNContainerVisualClass)
  ['{AF151DA2-17F1-568A-ACEF-754A70D21913}']
  { constructors } 

    {class} function init: DNHostVisual;

  end;

  [DNTypeName('System.Windows.Media.HostVisual')]
  DNHostVisual = interface(DNContainerVisual)
  ['{5AC62F5A-661F-3E9E-8893-BB4C1F244570}']
  { getters & setters } 

    function get_Children: DNVisualCollection;
    function get_Parent: DDN.System.Windows.Common.DNDependencyObject;
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_XSnappingGuidelines: DNDoubleCollection;
    procedure set_XSnappingGuidelines(value: DNDoubleCollection);
    function get_YSnappingGuidelines: DNDoubleCollection;
    procedure set_YSnappingGuidelines(value: DNDoubleCollection);
    function get_ContentBounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Offset: DDN.System.Windows.Common.DNVector;
    procedure set_Offset(value: DDN.System.Windows.Common.DNVector);
    function get_DescendantBounds: DDN.System.Windows.Common.DNRect;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function HitTest(point: DDN.System.Windows.Common.DNPoint): DNHitTestResult; overload;
    procedure HitTest(filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters); overload;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DNVisualCollection read get_Children;
    property Parent: DDN.System.Windows.Common.DNDependencyObject read get_Parent;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property Effect: DNEffect read get_Effect write set_Effect;
    property XSnappingGuidelines: DNDoubleCollection read get_XSnappingGuidelines write set_XSnappingGuidelines;
    property YSnappingGuidelines: DNDoubleCollection read get_YSnappingGuidelines write set_YSnappingGuidelines;
    property ContentBounds: DDN.System.Windows.Common.DNRect read get_ContentBounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Offset: DDN.System.Windows.Common.DNVector read get_Offset write set_Offset;
    property DescendantBounds: DDN.System.Windows.Common.DNRect read get_DescendantBounds;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNHostVisual = class(TDNGenericImport<DNHostVisualClass, DNHostVisual>) end;

  //-------------namespace: System.Windows.Media.Media3D----------------
  DNViewport3DVisualClass = interface(DNVisualClass)
  ['{39F23652-1420-508B-B7F2-AB09BD49528B}']
  { constructors } 

    {class} function init: DNViewport3DVisual;

  { static fields getter & setter } 

   function __fakeFieldGet_CameraProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ViewportProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property CameraProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CameraProperty;
    {class} property ViewportProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ViewportProperty;

  end;

  [DNTypeName('System.Windows.Media.Media3D.Viewport3DVisual')]
  DNViewport3DVisual = interface(DNVisual)
  ['{488F6F96-B3A9-31A6-A57B-ED2BAAA99181}']
  { getters & setters } 

    function get_Parent: DDN.System.Windows.Common.DNDependencyObject;
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_ContentBounds: DDN.System.Windows.Common.DNRect;
    function get_Transform: DNTransform;
    procedure set_Transform(value: DNTransform);
    function get_Offset: DDN.System.Windows.Common.DNVector;
    procedure set_Offset(value: DDN.System.Windows.Common.DNVector);
    function get_DescendantBounds: DDN.System.Windows.Common.DNRect;
    function get_Camera: DNCamera;
    procedure set_Camera(value: DNCamera);
    function get_Viewport: DDN.System.Windows.Common.DNRect;
    procedure set_Viewport(value: DDN.System.Windows.Common.DNRect);
    function get_Children: DNVisual3DCollection;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function HitTest(point: DDN.System.Windows.Common.DNPoint): DNHitTestResult; overload;
    procedure HitTest(filterCallback: DNHitTestFilterCallback; resultCallback: DNHitTestResultCallback; hitTestParameters: DNHitTestParameters); overload;
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Parent: DDN.System.Windows.Common.DNDependencyObject read get_Parent;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property ContentBounds: DDN.System.Windows.Common.DNRect read get_ContentBounds;
    property Transform: DNTransform read get_Transform write set_Transform;
    property Offset: DDN.System.Windows.Common.DNVector read get_Offset write set_Offset;
    property DescendantBounds: DDN.System.Windows.Common.DNRect read get_DescendantBounds;
    property Camera: DNCamera read get_Camera write set_Camera;
    property Viewport: DDN.System.Windows.Common.DNRect read get_Viewport write set_Viewport;
    property Children: DNVisual3DCollection read get_Children;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNViewport3DVisual = class(TDNGenericImport<DNViewport3DVisualClass, DNViewport3DVisual>) end;

  //-------------namespace: System.Windows----------------
  DNUIElementClass = interface(DNVisualClass)
  ['{ABF71CB6-F07B-5B0F-90C6-072C3D8160D5}']
  { constructors } 

    {class} function init: DNUIElement;

  { static fields getter & setter } 

   function __fakeFieldGet_PreviewMouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeftButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseRightButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewMouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseWheelEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_MouseLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_GotMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostMouseCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryCursorEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInAirMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusInRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusOutOfRangeEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusSystemGestureEvent: DNRoutedEvent;
   function __fakeFieldGet_GotStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostStylusCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_StylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewStylusButtonUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewKeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_KeyUpEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_GotKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewLostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostKeyboardFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewQueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_QueryContinueDragEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewGiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_GiveFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_DragEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_DragOverEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_DragLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewDropEvent: DNRoutedEvent;
   function __fakeFieldGet_DropEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchDownEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchMoveEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchUpEvent: DNRoutedEvent;
   function __fakeFieldGet_GotTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_LostTouchCaptureEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchEnterEvent: DNRoutedEvent;
   function __fakeFieldGet_TouchLeaveEvent: DNRoutedEvent;
   function __fakeFieldGet_IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RenderTransformProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RenderTransformOriginProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_OpacityMaskProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_EffectProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_BitmapEffectInputProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_CacheModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_UidProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_VisibilityProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ClipToBoundsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ClipProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_SnapsToDevicePixelsProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_GotFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_LostFocusEvent: DNRoutedEvent;
   function __fakeFieldGet_IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsHitTestVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsManipulationEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_ManipulationStartingEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationStartedEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationDeltaEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationInertiaStartingEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationBoundaryFeedbackEvent: DNRoutedEvent;
   function __fakeFieldGet_ManipulationCompletedEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewMouseDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseDownEvent;
    {class} property MouseDownEvent: DNRoutedEvent read __fakeFieldGet_MouseDownEvent;
    {class} property PreviewMouseUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseUpEvent;
    {class} property MouseUpEvent: DNRoutedEvent read __fakeFieldGet_MouseUpEvent;
    {class} property PreviewMouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonDownEvent;
    {class} property MouseLeftButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonDownEvent;
    {class} property PreviewMouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseLeftButtonUpEvent;
    {class} property MouseLeftButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseLeftButtonUpEvent;
    {class} property PreviewMouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonDownEvent;
    {class} property MouseRightButtonDownEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonDownEvent;
    {class} property PreviewMouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseRightButtonUpEvent;
    {class} property MouseRightButtonUpEvent: DNRoutedEvent read __fakeFieldGet_MouseRightButtonUpEvent;
    {class} property PreviewMouseMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseMoveEvent;
    {class} property MouseMoveEvent: DNRoutedEvent read __fakeFieldGet_MouseMoveEvent;
    {class} property PreviewMouseWheelEvent: DNRoutedEvent read __fakeFieldGet_PreviewMouseWheelEvent;
    {class} property MouseWheelEvent: DNRoutedEvent read __fakeFieldGet_MouseWheelEvent;
    {class} property MouseEnterEvent: DNRoutedEvent read __fakeFieldGet_MouseEnterEvent;
    {class} property MouseLeaveEvent: DNRoutedEvent read __fakeFieldGet_MouseLeaveEvent;
    {class} property GotMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotMouseCaptureEvent;
    {class} property LostMouseCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostMouseCaptureEvent;
    {class} property QueryCursorEvent: DNRoutedEvent read __fakeFieldGet_QueryCursorEvent;
    {class} property PreviewStylusDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusDownEvent;
    {class} property StylusDownEvent: DNRoutedEvent read __fakeFieldGet_StylusDownEvent;
    {class} property PreviewStylusUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusUpEvent;
    {class} property StylusUpEvent: DNRoutedEvent read __fakeFieldGet_StylusUpEvent;
    {class} property PreviewStylusMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusMoveEvent;
    {class} property StylusMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusMoveEvent;
    {class} property PreviewStylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInAirMoveEvent;
    {class} property StylusInAirMoveEvent: DNRoutedEvent read __fakeFieldGet_StylusInAirMoveEvent;
    {class} property StylusEnterEvent: DNRoutedEvent read __fakeFieldGet_StylusEnterEvent;
    {class} property StylusLeaveEvent: DNRoutedEvent read __fakeFieldGet_StylusLeaveEvent;
    {class} property PreviewStylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusInRangeEvent;
    {class} property StylusInRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusInRangeEvent;
    {class} property PreviewStylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusOutOfRangeEvent;
    {class} property StylusOutOfRangeEvent: DNRoutedEvent read __fakeFieldGet_StylusOutOfRangeEvent;
    {class} property PreviewStylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusSystemGestureEvent;
    {class} property StylusSystemGestureEvent: DNRoutedEvent read __fakeFieldGet_StylusSystemGestureEvent;
    {class} property GotStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotStylusCaptureEvent;
    {class} property LostStylusCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostStylusCaptureEvent;
    {class} property StylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonDownEvent;
    {class} property StylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_StylusButtonUpEvent;
    {class} property PreviewStylusButtonDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonDownEvent;
    {class} property PreviewStylusButtonUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewStylusButtonUpEvent;
    {class} property PreviewKeyDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyDownEvent;
    {class} property KeyDownEvent: DNRoutedEvent read __fakeFieldGet_KeyDownEvent;
    {class} property PreviewKeyUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewKeyUpEvent;
    {class} property KeyUpEvent: DNRoutedEvent read __fakeFieldGet_KeyUpEvent;
    {class} property PreviewGotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewGotKeyboardFocusEvent;
    {class} property GotKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_GotKeyboardFocusEvent;
    {class} property PreviewLostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_PreviewLostKeyboardFocusEvent;
    {class} property LostKeyboardFocusEvent: DNRoutedEvent read __fakeFieldGet_LostKeyboardFocusEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;
    {class} property PreviewQueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_PreviewQueryContinueDragEvent;
    {class} property QueryContinueDragEvent: DNRoutedEvent read __fakeFieldGet_QueryContinueDragEvent;
    {class} property PreviewGiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_PreviewGiveFeedbackEvent;
    {class} property GiveFeedbackEvent: DNRoutedEvent read __fakeFieldGet_GiveFeedbackEvent;
    {class} property PreviewDragEnterEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragEnterEvent;
    {class} property DragEnterEvent: DNRoutedEvent read __fakeFieldGet_DragEnterEvent;
    {class} property PreviewDragOverEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragOverEvent;
    {class} property DragOverEvent: DNRoutedEvent read __fakeFieldGet_DragOverEvent;
    {class} property PreviewDragLeaveEvent: DNRoutedEvent read __fakeFieldGet_PreviewDragLeaveEvent;
    {class} property DragLeaveEvent: DNRoutedEvent read __fakeFieldGet_DragLeaveEvent;
    {class} property PreviewDropEvent: DNRoutedEvent read __fakeFieldGet_PreviewDropEvent;
    {class} property DropEvent: DNRoutedEvent read __fakeFieldGet_DropEvent;
    {class} property PreviewTouchDownEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchDownEvent;
    {class} property TouchDownEvent: DNRoutedEvent read __fakeFieldGet_TouchDownEvent;
    {class} property PreviewTouchMoveEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchMoveEvent;
    {class} property TouchMoveEvent: DNRoutedEvent read __fakeFieldGet_TouchMoveEvent;
    {class} property PreviewTouchUpEvent: DNRoutedEvent read __fakeFieldGet_PreviewTouchUpEvent;
    {class} property TouchUpEvent: DNRoutedEvent read __fakeFieldGet_TouchUpEvent;
    {class} property GotTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_GotTouchCaptureEvent;
    {class} property LostTouchCaptureEvent: DNRoutedEvent read __fakeFieldGet_LostTouchCaptureEvent;
    {class} property TouchEnterEvent: DNRoutedEvent read __fakeFieldGet_TouchEnterEvent;
    {class} property TouchLeaveEvent: DNRoutedEvent read __fakeFieldGet_TouchLeaveEvent;
    {class} property IsMouseDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseDirectlyOverProperty;
    {class} property IsMouseOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseOverProperty;
    {class} property IsStylusOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusOverProperty;
    {class} property IsKeyboardFocusWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusWithinProperty;
    {class} property IsMouseCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCapturedProperty;
    {class} property IsMouseCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsMouseCaptureWithinProperty;
    {class} property IsStylusDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusDirectlyOverProperty;
    {class} property IsStylusCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCapturedProperty;
    {class} property IsStylusCaptureWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsStylusCaptureWithinProperty;
    {class} property IsKeyboardFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsKeyboardFocusedProperty;
    {class} property AreAnyTouchesDirectlyOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesDirectlyOverProperty;
    {class} property AreAnyTouchesOverProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesOverProperty;
    {class} property AreAnyTouchesCapturedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedProperty;
    {class} property AreAnyTouchesCapturedWithinProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AreAnyTouchesCapturedWithinProperty;
    {class} property AllowDropProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_AllowDropProperty;
    {class} property RenderTransformProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RenderTransformProperty;
    {class} property RenderTransformOriginProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RenderTransformOriginProperty;
    {class} property OpacityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityProperty;
    {class} property OpacityMaskProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_OpacityMaskProperty;
    {class} property BitmapEffectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapEffectProperty;
    {class} property EffectProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_EffectProperty;
    {class} property BitmapEffectInputProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_BitmapEffectInputProperty;
    {class} property CacheModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_CacheModeProperty;
    {class} property UidProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_UidProperty;
    {class} property VisibilityProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_VisibilityProperty;
    {class} property ClipToBoundsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ClipToBoundsProperty;
    {class} property ClipProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_ClipProperty;
    {class} property SnapsToDevicePixelsProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_SnapsToDevicePixelsProperty;
    {class} property GotFocusEvent: DNRoutedEvent read __fakeFieldGet_GotFocusEvent;
    {class} property LostFocusEvent: DNRoutedEvent read __fakeFieldGet_LostFocusEvent;
    {class} property IsFocusedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsFocusedProperty;
    {class} property IsEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsEnabledProperty;
    {class} property IsHitTestVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsHitTestVisibleProperty;
    {class} property IsVisibleProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsVisibleProperty;
    {class} property FocusableProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_FocusableProperty;
    {class} property IsManipulationEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsManipulationEnabledProperty;
    {class} property ManipulationStartingEvent: DNRoutedEvent read __fakeFieldGet_ManipulationStartingEvent;
    {class} property ManipulationStartedEvent: DNRoutedEvent read __fakeFieldGet_ManipulationStartedEvent;
    {class} property ManipulationDeltaEvent: DNRoutedEvent read __fakeFieldGet_ManipulationDeltaEvent;
    {class} property ManipulationInertiaStartingEvent: DNRoutedEvent read __fakeFieldGet_ManipulationInertiaStartingEvent;
    {class} property ManipulationBoundaryFeedbackEvent: DNRoutedEvent read __fakeFieldGet_ManipulationBoundaryFeedbackEvent;
    {class} property ManipulationCompletedEvent: DNRoutedEvent read __fakeFieldGet_ManipulationCompletedEvent;

  end;

  [DNTypeName('System.Windows.UIElement')]
  DNUIElement = interface(DNVisual)
  ['{6BAD4A5D-0F75-3EE6-B42E-1BF2E395AA8E}']
  { getters & setters } 

    function get_HasAnimatedProperties: Boolean;
    function get_InputBindings: DNInputBindingCollection;
    function get_CommandBindings: DNCommandBindingCollection;
    function get_AllowDrop: Boolean;
    procedure set_AllowDrop(value: Boolean);
    function get_DesiredSize: DDN.System.Windows.Common.DNSize;
    function get_IsMeasureValid: Boolean;
    function get_IsArrangeValid: Boolean;
    function get_RenderSize: DDN.System.Windows.Common.DNSize;
    procedure set_RenderSize(value: DDN.System.Windows.Common.DNSize);
    function get_RenderTransform: DNTransform;
    procedure set_RenderTransform(value: DNTransform);
    function get_RenderTransformOrigin: DDN.System.Windows.Common.DNPoint;
    procedure set_RenderTransformOrigin(value: DDN.System.Windows.Common.DNPoint);
    function get_IsMouseDirectlyOver: Boolean;
    function get_IsMouseOver: Boolean;
    function get_IsStylusOver: Boolean;
    function get_IsKeyboardFocusWithin: Boolean;
    function get_IsMouseCaptured: Boolean;
    function get_IsMouseCaptureWithin: Boolean;
    function get_IsStylusDirectlyOver: Boolean;
    function get_IsStylusCaptured: Boolean;
    function get_IsStylusCaptureWithin: Boolean;
    function get_IsKeyboardFocused: Boolean;
    function get_IsInputMethodEnabled: Boolean;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OpacityMask: DNBrush;
    procedure set_OpacityMask(value: DNBrush);
    function get_BitmapEffect: DNBitmapEffect;
    procedure set_BitmapEffect(value: DNBitmapEffect);
    function get_Effect: DNEffect;
    procedure set_Effect(value: DNEffect);
    function get_BitmapEffectInput: DNBitmapEffectInput;
    procedure set_BitmapEffectInput(value: DNBitmapEffectInput);
    function get_CacheMode: DNCacheMode;
    procedure set_CacheMode(value: DNCacheMode);
    function get_Uid: string;
    procedure set_Uid(value: string);
    function get_Visibility: DNVisibility;
    procedure set_Visibility(value: DNVisibility);
    function get_ClipToBounds: Boolean;
    procedure set_ClipToBounds(value: Boolean);
    function get_Clip: DNGeometry;
    procedure set_Clip(value: DNGeometry);
    function get_SnapsToDevicePixels: Boolean;
    procedure set_SnapsToDevicePixels(value: Boolean);
    function get_IsFocused: Boolean;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsHitTestVisible: Boolean;
    procedure set_IsHitTestVisible(value: Boolean);
    function get_IsVisible: Boolean;
    function get_Focusable: Boolean;
    procedure set_Focusable(value: Boolean);
    function get_PersistId: Int32;
    function get_IsManipulationEnabled: Boolean;
    procedure set_IsManipulationEnabled(value: Boolean);
    function get_AreAnyTouchesOver: Boolean;
    function get_AreAnyTouchesDirectlyOver: Boolean;
    function get_AreAnyTouchesCapturedWithin: Boolean;
    function get_AreAnyTouchesCaptured: Boolean;
    function get_TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice>;
    function get_DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseDown(value: DNMouseButtonEventHandler);
    procedure add_MouseDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseUp(value: DNMouseButtonEventHandler);
    procedure add_MouseUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseLeftButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonDown(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_PreviewMouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure remove_MouseRightButtonUp(value: DNMouseButtonEventHandler);
    procedure add_PreviewMouseMove(value: DNMouseEventHandler);
    procedure remove_PreviewMouseMove(value: DNMouseEventHandler);
    procedure add_MouseMove(value: DNMouseEventHandler);
    procedure remove_MouseMove(value: DNMouseEventHandler);
    procedure add_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_PreviewMouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseWheel(value: DNMouseWheelEventHandler);
    procedure remove_MouseWheel(value: DNMouseWheelEventHandler);
    procedure add_MouseEnter(value: DNMouseEventHandler);
    procedure remove_MouseEnter(value: DNMouseEventHandler);
    procedure add_MouseLeave(value: DNMouseEventHandler);
    procedure remove_MouseLeave(value: DNMouseEventHandler);
    procedure add_GotMouseCapture(value: DNMouseEventHandler);
    procedure remove_GotMouseCapture(value: DNMouseEventHandler);
    procedure add_LostMouseCapture(value: DNMouseEventHandler);
    procedure remove_LostMouseCapture(value: DNMouseEventHandler);
    procedure add_QueryCursor(value: DNQueryCursorEventHandler);
    procedure remove_QueryCursor(value: DNQueryCursorEventHandler);
    procedure add_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure remove_PreviewStylusDown(value: DNStylusDownEventHandler);
    procedure add_StylusDown(value: DNStylusDownEventHandler);
    procedure remove_StylusDown(value: DNStylusDownEventHandler);
    procedure add_PreviewStylusUp(value: DNStylusEventHandler);
    procedure remove_PreviewStylusUp(value: DNStylusEventHandler);
    procedure add_StylusUp(value: DNStylusEventHandler);
    procedure remove_StylusUp(value: DNStylusEventHandler);
    procedure add_PreviewStylusMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusMove(value: DNStylusEventHandler);
    procedure add_StylusMove(value: DNStylusEventHandler);
    procedure remove_StylusMove(value: DNStylusEventHandler);
    procedure add_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusInAirMove(value: DNStylusEventHandler);
    procedure remove_StylusInAirMove(value: DNStylusEventHandler);
    procedure add_StylusEnter(value: DNStylusEventHandler);
    procedure remove_StylusEnter(value: DNStylusEventHandler);
    procedure add_StylusLeave(value: DNStylusEventHandler);
    procedure remove_StylusLeave(value: DNStylusEventHandler);
    procedure add_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusInRange(value: DNStylusEventHandler);
    procedure add_StylusInRange(value: DNStylusEventHandler);
    procedure remove_StylusInRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_PreviewStylusOutOfRange(value: DNStylusEventHandler);
    procedure add_StylusOutOfRange(value: DNStylusEventHandler);
    procedure remove_StylusOutOfRange(value: DNStylusEventHandler);
    procedure add_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_PreviewStylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure remove_StylusSystemGesture(value: DNStylusSystemGestureEventHandler);
    procedure add_GotStylusCapture(value: DNStylusEventHandler);
    procedure remove_GotStylusCapture(value: DNStylusEventHandler);
    procedure add_LostStylusCapture(value: DNStylusEventHandler);
    procedure remove_LostStylusCapture(value: DNStylusEventHandler);
    procedure add_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_StylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonDown(value: DNStylusButtonEventHandler);
    procedure add_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure remove_PreviewStylusButtonUp(value: DNStylusButtonEventHandler);
    procedure add_PreviewKeyDown(value: DNKeyEventHandler);
    procedure remove_PreviewKeyDown(value: DNKeyEventHandler);
    procedure add_KeyDown(value: DNKeyEventHandler);
    procedure remove_KeyDown(value: DNKeyEventHandler);
    procedure add_PreviewKeyUp(value: DNKeyEventHandler);
    procedure remove_PreviewKeyUp(value: DNKeyEventHandler);
    procedure add_KeyUp(value: DNKeyEventHandler);
    procedure remove_KeyUp(value: DNKeyEventHandler);
    procedure add_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewGotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_GotKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_PreviewLostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure remove_LostKeyboardFocus(value: DNKeyboardFocusChangedEventHandler);
    procedure add_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure remove_PreviewTextInput(value: DNTextCompositionEventHandler);
    procedure add_TextInput(value: DNTextCompositionEventHandler);
    procedure remove_TextInput(value: DNTextCompositionEventHandler);
    procedure add_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_PreviewQueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure remove_QueryContinueDrag(value: DNQueryContinueDragEventHandler);
    procedure add_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_PreviewGiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure remove_GiveFeedback(value: DNGiveFeedbackEventHandler);
    procedure add_PreviewDragEnter(value: DNDragEventHandler);
    procedure remove_PreviewDragEnter(value: DNDragEventHandler);
    procedure add_DragEnter(value: DNDragEventHandler);
    procedure remove_DragEnter(value: DNDragEventHandler);
    procedure add_PreviewDragOver(value: DNDragEventHandler);
    procedure remove_PreviewDragOver(value: DNDragEventHandler);
    procedure add_DragOver(value: DNDragEventHandler);
    procedure remove_DragOver(value: DNDragEventHandler);
    procedure add_PreviewDragLeave(value: DNDragEventHandler);
    procedure remove_PreviewDragLeave(value: DNDragEventHandler);
    procedure add_DragLeave(value: DNDragEventHandler);
    procedure remove_DragLeave(value: DNDragEventHandler);
    procedure add_PreviewDrop(value: DNDragEventHandler);
    procedure remove_PreviewDrop(value: DNDragEventHandler);
    procedure add_Drop(value: DNDragEventHandler);
    procedure remove_Drop(value: DNDragEventHandler);
    procedure add_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsMouseCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusDirectlyOverChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCapturedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsStylusCaptureWithinChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsKeyboardFocusedChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LayoutUpdated(value: DDN.mscorlib.DNEventHandler);
    procedure add_GotFocus(value: DNRoutedEventHandler);
    procedure remove_GotFocus(value: DNRoutedEventHandler);
    procedure add_LostFocus(value: DNRoutedEventHandler);
    procedure remove_LostFocus(value: DNRoutedEventHandler);
    procedure add_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsEnabledChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsHitTestVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_IsVisibleChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure add_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);
    procedure remove_FocusableChanged(value: DDN.System.Windows.Common.DNDependencyPropertyChangedEventHandler);

  { methods } 

    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline); overload;
    function GetAnimationBaseValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function ShouldSerializeInputBindings: Boolean;
    function ShouldSerializeCommandBindings: Boolean;
    procedure RaiseEvent(e: DNRoutedEventArgs);
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate); overload;
    procedure AddHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate; handledEventsToo: Boolean); overload;
    procedure RemoveHandler(routedEvent: DNRoutedEvent; handler: DDN.mscorlib.DNDelegate);
    procedure AddToEventRoute(route: DNEventRoute; e: DNRoutedEventArgs);
    procedure InvalidateArrange;
    procedure InvalidateVisual;
    procedure UpdateLayout;
    function TranslatePoint(point: DDN.System.Windows.Common.DNPoint; relativeTo: DNUIElement): DDN.System.Windows.Common.DNPoint;
    function InputHitTest(point: DDN.System.Windows.Common.DNPoint): DNIInputElement;
    function CaptureMouse: Boolean;
    procedure ReleaseMouseCapture;
    function CaptureStylus: Boolean;
    procedure ReleaseStylusCapture;
    function Focus: Boolean;
    function MoveFocus(request: DDN.System.Windows.Common.DNTraversalRequest): Boolean;
    function PredictFocus(direction: DDN.System.Windows.Common.DNFocusNavigationDirection): DDN.System.Windows.Common.DNDependencyObject;
    function CaptureTouch(touchDevice: DNTouchDevice): Boolean;
    function ReleaseTouchCapture(touchDevice: DNTouchDevice): Boolean;
    procedure ReleaseAllTouchCaptures;
    procedure ApplyAnimationClock(dp: DDN.System.Windows.Common.DNDependencyProperty; clock: DNAnimationClock; handoffBehavior: DNHandoffBehavior); overload;
    procedure BeginAnimation(dp: DDN.System.Windows.Common.DNDependencyProperty; animation: DNAnimationTimeline; handoffBehavior: DNHandoffBehavior); overload;
    procedure InvalidateMeasure;
    procedure Measure(availableSize: DDN.System.Windows.Common.DNSize);
    procedure Arrange(finalRect: DDN.System.Windows.Common.DNRect);
    function IsAncestorOf(descendant: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function IsDescendantOf(ancestor: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    function FindCommonVisualAncestor(otherVisual: DDN.System.Windows.Common.DNDependencyObject): DDN.System.Windows.Common.DNDependencyObject;
    function TransformToAncestor(ancestor: DNVisual): DNGeneralTransform; overload;
    function TransformToAncestor(ancestor: DNVisual3D): DNGeneralTransform2DTo3D; overload;
    function TransformToDescendant(descendant: DNVisual): DNGeneralTransform;
    function TransformToVisual(visual: DNVisual): DNGeneralTransform;
    function PointToScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function PointFromScreen(point: DDN.System.Windows.Common.DNPoint): DDN.System.Windows.Common.DNPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    procedure SetValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    procedure SetCurrentValue(dp: DDN.System.Windows.Common.DNDependencyProperty; value: DDN.mscorlib.DNObject);
    procedure SetValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    procedure ClearValue(dp: DDN.System.Windows.Common.DNDependencyProperty); overload;
    procedure ClearValue(key: DDN.System.Windows.Common.DNDependencyPropertyKey); overload;
    procedure CoerceValue(dp: DDN.System.Windows.Common.DNDependencyProperty);
    procedure InvalidateProperty(dp: DDN.System.Windows.Common.DNDependencyProperty);
    function ReadLocalValue(dp: DDN.System.Windows.Common.DNDependencyProperty): DDN.mscorlib.DNObject;
    function GetLocalValueEnumerator: DDN.System.Windows.Common.DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasAnimatedProperties: Boolean read get_HasAnimatedProperties;
    property InputBindings: DNInputBindingCollection read get_InputBindings;
    property CommandBindings: DNCommandBindingCollection read get_CommandBindings;
    property AllowDrop: Boolean read get_AllowDrop write set_AllowDrop;
    property DesiredSize: DDN.System.Windows.Common.DNSize read get_DesiredSize;
    property IsMeasureValid: Boolean read get_IsMeasureValid;
    property IsArrangeValid: Boolean read get_IsArrangeValid;
    property RenderSize: DDN.System.Windows.Common.DNSize read get_RenderSize write set_RenderSize;
    property RenderTransform: DNTransform read get_RenderTransform write set_RenderTransform;
    property RenderTransformOrigin: DDN.System.Windows.Common.DNPoint read get_RenderTransformOrigin write set_RenderTransformOrigin;
    property IsMouseDirectlyOver: Boolean read get_IsMouseDirectlyOver;
    property IsMouseOver: Boolean read get_IsMouseOver;
    property IsStylusOver: Boolean read get_IsStylusOver;
    property IsKeyboardFocusWithin: Boolean read get_IsKeyboardFocusWithin;
    property IsMouseCaptured: Boolean read get_IsMouseCaptured;
    property IsMouseCaptureWithin: Boolean read get_IsMouseCaptureWithin;
    property IsStylusDirectlyOver: Boolean read get_IsStylusDirectlyOver;
    property IsStylusCaptured: Boolean read get_IsStylusCaptured;
    property IsStylusCaptureWithin: Boolean read get_IsStylusCaptureWithin;
    property IsKeyboardFocused: Boolean read get_IsKeyboardFocused;
    property IsInputMethodEnabled: Boolean read get_IsInputMethodEnabled;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OpacityMask: DNBrush read get_OpacityMask write set_OpacityMask;
    property BitmapEffect: DNBitmapEffect read get_BitmapEffect write set_BitmapEffect;
    property Effect: DNEffect read get_Effect write set_Effect;
    property BitmapEffectInput: DNBitmapEffectInput read get_BitmapEffectInput write set_BitmapEffectInput;
    property CacheMode: DNCacheMode read get_CacheMode write set_CacheMode;
    property Uid: string read get_Uid write set_Uid;
    property Visibility: DNVisibility read get_Visibility write set_Visibility;
    property ClipToBounds: Boolean read get_ClipToBounds write set_ClipToBounds;
    property Clip: DNGeometry read get_Clip write set_Clip;
    property SnapsToDevicePixels: Boolean read get_SnapsToDevicePixels write set_SnapsToDevicePixels;
    property IsFocused: Boolean read get_IsFocused;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsHitTestVisible: Boolean read get_IsHitTestVisible write set_IsHitTestVisible;
    property IsVisible: Boolean read get_IsVisible;
    property Focusable: Boolean read get_Focusable write set_Focusable;
    property PersistId: Int32 read get_PersistId;
    property IsManipulationEnabled: Boolean read get_IsManipulationEnabled write set_IsManipulationEnabled;
    property AreAnyTouchesOver: Boolean read get_AreAnyTouchesOver;
    property AreAnyTouchesDirectlyOver: Boolean read get_AreAnyTouchesDirectlyOver;
    property AreAnyTouchesCapturedWithin: Boolean read get_AreAnyTouchesCapturedWithin;
    property AreAnyTouchesCaptured: Boolean read get_AreAnyTouchesCaptured;
    property TouchesCaptured: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCaptured;
    property TouchesCapturedWithin: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesCapturedWithin;
    property TouchesOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesOver;
    property TouchesDirectlyOver: DDN.mscorlib.DNIEnumerable<DNTouchDevice> read get_TouchesDirectlyOver;
    property DependencyObjectType: DDN.System.Windows.Common.DNDependencyObjectType read get_DependencyObjectType;
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNUIElement = class(TDNGenericImport<DNUIElementClass, DNUIElement>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputDeviceClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{A384A56F-F40C-5D51-927C-46F2891716FA}']
  end;

  [DNTypeName('System.Windows.Input.InputDevice')]
  DNInputDevice = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{AB953F5A-CDBC-35B3-B562-BD19196CEA73}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInputDevice = class(TDNGenericImport<DNInputDeviceClass, DNInputDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyboardDeviceClass = interface(DNInputDeviceClass)
  ['{89A31AB0-1069-52E2-A63C-2B9C6E6B979B}']
  end;

  [DNTypeName('System.Windows.Input.KeyboardDevice')]
  DNKeyboardDevice = interface(DNInputDevice)
  ['{1DC6163B-7861-3946-BDBB-94C10B28B7C6}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DefaultRestoreFocusMode: DNRestoreFocusMode;
    procedure set_DefaultRestoreFocusMode(value: DNRestoreFocusMode);
    function get_FocusedElement: DNIInputElement;
    function get_Modifiers: DDN.System.Windows.Common.DNModifierKeys;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function Focus(element: DNIInputElement): DNIInputElement;
    procedure ClearFocus;
    function IsKeyDown(key: DDN.System.Windows.Common.DNKey): Boolean;
    function IsKeyUp(key: DDN.System.Windows.Common.DNKey): Boolean;
    function IsKeyToggled(key: DDN.System.Windows.Common.DNKey): Boolean;
    function GetKeyStates(key: DDN.System.Windows.Common.DNKey): DNKeyStates;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DefaultRestoreFocusMode: DNRestoreFocusMode read get_DefaultRestoreFocusMode write set_DefaultRestoreFocusMode;
    property FocusedElement: DNIInputElement read get_FocusedElement;
    property Modifiers: DDN.System.Windows.Common.DNModifierKeys read get_Modifiers;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNKeyboardDevice = class(TDNGenericImport<DNKeyboardDeviceClass, DNKeyboardDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNMouseDeviceClass = interface(DNInputDeviceClass)
  ['{7F02437E-4CA8-56D8-9353-2D3E2285737F}']
  end;

  [DNTypeName('System.Windows.Input.MouseDevice')]
  DNMouseDevice = interface(DNInputDevice)
  ['{BBE65E9A-5F8B-35FD-A1B6-80A86DFC5CAB}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_OverrideCursor: DNCursor;
    procedure set_OverrideCursor(value: DNCursor);
    function get_LeftButton: DNMouseButtonState;
    function get_RightButton: DNMouseButtonState;
    function get_MiddleButton: DNMouseButtonState;
    function get_XButton1: DNMouseButtonState;
    function get_XButton2: DNMouseButtonState;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function SetCursor(cursor: DNCursor): Boolean;
    procedure UpdateCursor;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property OverrideCursor: DNCursor read get_OverrideCursor write set_OverrideCursor;
    property LeftButton: DNMouseButtonState read get_LeftButton;
    property RightButton: DNMouseButtonState read get_RightButton;
    property MiddleButton: DNMouseButtonState read get_MiddleButton;
    property XButton1: DNMouseButtonState read get_XButton1;
    property XButton2: DNMouseButtonState read get_XButton2;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMouseDevice = class(TDNGenericImport<DNMouseDeviceClass, DNMouseDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNStylusDeviceClass = interface(DNInputDeviceClass)
  ['{70F80906-DD54-5B6D-8E04-A8BC477E1E32}']
  end;

  [DNTypeName('System.Windows.Input.StylusDevice')]
  DNStylusDevice = interface(DNInputDevice)
  ['{B5D16184-3EEC-3C5A-A206-370B75D52BC4}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_IsValid: Boolean;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_TabletDevice: DNTabletDevice;
    function get_Name: string;
    function get_Id: Int32;
    function get_StylusButtons: DNStylusButtonCollection;
    function get_InAir: Boolean;
    function get_Inverted: Boolean;
    function get_InRange: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function GetStylusPoints(relativeTo: DNIInputElement): DNStylusPointCollection; overload;
    function GetStylusPoints(relativeTo: DNIInputElement; subsetToReformatTo: DNStylusPointDescription): DNStylusPointCollection; overload;
    function GetPosition(relativeTo: DNIInputElement): DDN.System.Windows.Common.DNPoint;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property IsValid: Boolean read get_IsValid;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property TabletDevice: DNTabletDevice read get_TabletDevice;
    property Name: string read get_Name;
    property Id: Int32 read get_Id;
    property StylusButtons: DNStylusButtonCollection read get_StylusButtons;
    property InAir: Boolean read get_InAir;
    property Inverted: Boolean read get_Inverted;
    property InRange: Boolean read get_InRange;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStylusDevice = class(TDNGenericImport<DNStylusDeviceClass, DNStylusDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTabletDeviceClass = interface(DNInputDeviceClass)
  ['{8CED1802-09D2-5BA9-8084-22AA3BCE49FC}']
  end;

  [DNTypeName('System.Windows.Input.TabletDevice')]
  DNTabletDevice = interface(DNInputDevice)
  ['{F8FB90C1-315B-34EE-A3D3-9F0479A5A1F0}']
  { getters & setters } 

    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_Id: Int32;
    function get_Name: string;
    function get_ProductId: string;
    function get_TabletHardwareCapabilities: DNTabletHardwareCapabilities;
    function get_Type: DNTabletDeviceType;
    function get_StylusDevices: DNStylusDeviceCollection;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property Id: Int32 read get_Id;
    property Name: string read get_Name;
    property ProductId: string read get_ProductId;
    property TabletHardwareCapabilities: DNTabletHardwareCapabilities read get_TabletHardwareCapabilities;
    property &Type: DNTabletDeviceType read get_Type;
    property StylusDevices: DNStylusDeviceCollection read get_StylusDevices;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTabletDevice = class(TDNGenericImport<DNTabletDeviceClass, DNTabletDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTouchDeviceClass = interface(DNInputDeviceClass)
  ['{6F8E0640-AAA1-5C1F-9B01-6C528E95BE5C}']
  end;

  [DNTypeName('System.Windows.Input.TouchDevice')]
  DNTouchDevice = interface(DNInputDevice)
  ['{F2CFF1F3-959A-3792-A7CF-33D6A0CA251B}']
  { getters & setters } 

    function get_Id: Int32;
    function get_IsActive: Boolean;
    function get_Target: DNIInputElement;
    function get_ActiveSource: DNPresentationSource;
    function get_DirectlyOver: DNIInputElement;
    function get_Captured: DNIInputElement;
    function get_CaptureMode: DNCaptureMode;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Updated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Updated(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Capture(element: DNIInputElement): Boolean; overload;
    procedure Synchronize;
    function GetTouchPoint(relativeTo: DNIInputElement): DNTouchPoint;
    function GetIntermediateTouchPoints(relativeTo: DNIInputElement): DNTouchPointCollection;
    function Capture(element: DNIInputElement; captureMode: DNCaptureMode): Boolean; overload;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property IsActive: Boolean read get_IsActive;
    property Target: DNIInputElement read get_Target;
    property ActiveSource: DNPresentationSource read get_ActiveSource;
    property DirectlyOver: DNIInputElement read get_DirectlyOver;
    property Captured: DNIInputElement read get_Captured;
    property CaptureMode: DNCaptureMode read get_CaptureMode;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTouchDevice = class(TDNGenericImport<DNTouchDeviceClass, DNTouchDevice>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputLanguageManagerClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{E656DF1C-46BB-5414-872E-394B8F9CB146}']
  { static getter & setter } 

    {class} function get_Current: DNInputLanguageManager;

  { static fields getter & setter } 

   function __fakeFieldGet_InputLanguageProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_RestoreInputLanguageProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property InputLanguageProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_InputLanguageProperty;
    {class} property RestoreInputLanguageProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_RestoreInputLanguageProperty;

  { static methods } 

    {class} procedure SetInputLanguage(target: DDN.System.Windows.Common.DNDependencyObject; inputLanguage: DDN.mscorlib.DNCultureInfo);
    {class} function GetInputLanguage(target: DDN.System.Windows.Common.DNDependencyObject): DDN.mscorlib.DNCultureInfo;
    {class} function GetRestoreInputLanguage(target: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} procedure SetRestoreInputLanguage(target: DDN.System.Windows.Common.DNDependencyObject; restore: Boolean);

  { static propertys } 

    {class} property Current: DNInputLanguageManager read get_Current;
  end;

  [DNTypeName('System.Windows.Input.InputLanguageManager')]
  DNInputLanguageManager = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{2A054CC9-3BFD-3E9A-A884-C8296E797164}']
  { getters & setters } 

    function get_CurrentInputLanguage: DDN.mscorlib.DNCultureInfo;
    procedure set_CurrentInputLanguage(value: DDN.mscorlib.DNCultureInfo);
    function get_AvailableInputLanguages: DDN.mscorlib.DNIEnumerable;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_InputLanguageChanged(value: DNInputLanguageEventHandler);
    procedure remove_InputLanguageChanged(value: DNInputLanguageEventHandler);
    procedure add_InputLanguageChanging(value: DNInputLanguageEventHandler);
    procedure remove_InputLanguageChanging(value: DNInputLanguageEventHandler);

  { methods } 

    procedure RegisterInputLanguageSource(inputLanguageSource: DNIInputLanguageSource);
    procedure ReportInputLanguageChanged(newLanguageId: DDN.mscorlib.DNCultureInfo; previousLanguageId: DDN.mscorlib.DNCultureInfo);
    function ReportInputLanguageChanging(newLanguageId: DDN.mscorlib.DNCultureInfo; previousLanguageId: DDN.mscorlib.DNCultureInfo): Boolean;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentInputLanguage: DDN.mscorlib.DNCultureInfo read get_CurrentInputLanguage write set_CurrentInputLanguage;
    property AvailableInputLanguages: DDN.mscorlib.DNIEnumerable read get_AvailableInputLanguages;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInputLanguageManager = class(TDNGenericImport<DNInputLanguageManagerClass, DNInputLanguageManager>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputManagerClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{378EA036-2A36-585C-8884-DA6EBABE9104}']
  { static getter & setter } 

    {class} function get_Current: DNInputManager;

  { static propertys } 

    {class} property Current: DNInputManager read get_Current;
  end;

  [DNTypeName('System.Windows.Input.InputManager')]
  DNInputManager = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{2B41B8E0-C2AD-3AA3-8FA8-05E1D81B314D}']
  { getters & setters } 

    function get_InputProviders: DDN.mscorlib.DNICollection;
    function get_PrimaryKeyboardDevice: DNKeyboardDevice;
    function get_PrimaryMouseDevice: DNMouseDevice;
    function get_MostRecentInputDevice: DNInputDevice;
    function get_IsInMenuMode: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_PreProcessInput(value: DNPreProcessInputEventHandler);
    procedure remove_PreProcessInput(value: DNPreProcessInputEventHandler);
    procedure add_PreNotifyInput(value: DNNotifyInputEventHandler);
    procedure remove_PreNotifyInput(value: DNNotifyInputEventHandler);
    procedure add_PostNotifyInput(value: DNNotifyInputEventHandler);
    procedure remove_PostNotifyInput(value: DNNotifyInputEventHandler);
    procedure add_PostProcessInput(value: DNProcessInputEventHandler);
    procedure remove_PostProcessInput(value: DNProcessInputEventHandler);
    procedure add_EnterMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure remove_EnterMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure add_LeaveMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LeaveMenuMode(value: DDN.mscorlib.DNEventHandler);
    procedure add_HitTestInvalidatedAsync(value: DDN.mscorlib.DNEventHandler);
    procedure remove_HitTestInvalidatedAsync(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure PushMenuMode(menuSite: DNPresentationSource);
    procedure PopMenuMode(menuSite: DNPresentationSource);
    function ProcessInput(input: DNInputEventArgs): Boolean;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputProviders: DDN.mscorlib.DNICollection read get_InputProviders;
    property PrimaryKeyboardDevice: DNKeyboardDevice read get_PrimaryKeyboardDevice;
    property PrimaryMouseDevice: DNMouseDevice read get_PrimaryMouseDevice;
    property MostRecentInputDevice: DNInputDevice read get_MostRecentInputDevice;
    property IsInMenuMode: Boolean read get_IsInMenuMode;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInputManager = class(TDNGenericImport<DNInputManagerClass, DNInputManager>) end;

  //-------------namespace: System.Windows.Input----------------
  DNInputMethodClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{08B05BCE-7B28-5F99-816E-117565E066DB}']
  { static getter & setter } 

    {class} function get_Current: DNInputMethod;

  { static fields getter & setter } 

   function __fakeFieldGet_IsInputMethodEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_IsInputMethodSuspendedProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PreferredImeStateProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PreferredImeConversionModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_PreferredImeSentenceModeProperty: DDN.System.Windows.Common.DNDependencyProperty;
   function __fakeFieldGet_InputScopeProperty: DDN.System.Windows.Common.DNDependencyProperty;

  { static fields } 

    {class} property IsInputMethodEnabledProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsInputMethodEnabledProperty;
    {class} property IsInputMethodSuspendedProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_IsInputMethodSuspendedProperty;
    {class} property PreferredImeStateProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PreferredImeStateProperty;
    {class} property PreferredImeConversionModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PreferredImeConversionModeProperty;
    {class} property PreferredImeSentenceModeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_PreferredImeSentenceModeProperty;
    {class} property InputScopeProperty: DDN.System.Windows.Common.DNDependencyProperty read __fakeFieldGet_InputScopeProperty;

  { static methods } 

    {class} function GetIsInputMethodEnabled(target: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} function GetIsInputMethodSuspended(target: DDN.System.Windows.Common.DNDependencyObject): Boolean;
    {class} procedure SetPreferredImeState(target: DDN.System.Windows.Common.DNDependencyObject; value: DNInputMethodState);
    {class} function GetPreferredImeState(target: DDN.System.Windows.Common.DNDependencyObject): DNInputMethodState;
    {class} procedure SetPreferredImeConversionMode(target: DDN.System.Windows.Common.DNDependencyObject; value: DNImeConversionModeValues);
    {class} function GetPreferredImeConversionMode(target: DDN.System.Windows.Common.DNDependencyObject): DNImeConversionModeValues;
    {class} procedure SetPreferredImeSentenceMode(target: DDN.System.Windows.Common.DNDependencyObject; value: DNImeSentenceModeValues);
    {class} function GetPreferredImeSentenceMode(target: DDN.System.Windows.Common.DNDependencyObject): DNImeSentenceModeValues;
    {class} procedure SetInputScope(target: DDN.System.Windows.Common.DNDependencyObject; value: DNInputScope);
    {class} function GetInputScope(target: DDN.System.Windows.Common.DNDependencyObject): DNInputScope;
    {class} procedure SetIsInputMethodEnabled(target: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);
    {class} procedure SetIsInputMethodSuspended(target: DDN.System.Windows.Common.DNDependencyObject; value: Boolean);

  { static propertys } 

    {class} property Current: DNInputMethod read get_Current;
  end;

  [DNTypeName('System.Windows.Input.InputMethod')]
  DNInputMethod = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{A586D8C5-9C2A-3B00-A062-2110F0C0477C}']
  { getters & setters } 

    function get_ImeState: DNInputMethodState;
    procedure set_ImeState(value: DNInputMethodState);
    function get_MicrophoneState: DNInputMethodState;
    procedure set_MicrophoneState(value: DNInputMethodState);
    function get_HandwritingState: DNInputMethodState;
    procedure set_HandwritingState(value: DNInputMethodState);
    function get_SpeechMode: DNSpeechMode;
    procedure set_SpeechMode(value: DNSpeechMode);
    function get_ImeConversionMode: DNImeConversionModeValues;
    procedure set_ImeConversionMode(value: DNImeConversionModeValues);
    function get_ImeSentenceMode: DNImeSentenceModeValues;
    procedure set_ImeSentenceMode(value: DNImeSentenceModeValues);
    function get_CanShowConfigurationUI: Boolean;
    function get_CanShowRegisterWordUI: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_StateChanged(value: DNInputMethodStateChangedEventHandler);
    procedure remove_StateChanged(value: DNInputMethodStateChangedEventHandler);

  { methods } 

    procedure ShowConfigureUI; overload;
    procedure ShowConfigureUI(element: DNUIElement); overload;
    procedure ShowRegisterWordUI; overload;
    procedure ShowRegisterWordUI(registeredText: string); overload;
    procedure ShowRegisterWordUI(element: DNUIElement; registeredText: string); overload;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImeState: DNInputMethodState read get_ImeState write set_ImeState;
    property MicrophoneState: DNInputMethodState read get_MicrophoneState write set_MicrophoneState;
    property HandwritingState: DNInputMethodState read get_HandwritingState write set_HandwritingState;
    property SpeechMode: DNSpeechMode read get_SpeechMode write set_SpeechMode;
    property ImeConversionMode: DNImeConversionModeValues read get_ImeConversionMode write set_ImeConversionMode;
    property ImeSentenceMode: DNImeSentenceModeValues read get_ImeSentenceMode write set_ImeSentenceMode;
    property CanShowConfigurationUI: Boolean read get_CanShowConfigurationUI;
    property CanShowRegisterWordUI: Boolean read get_CanShowRegisterWordUI;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNInputMethod = class(TDNGenericImport<DNInputMethodClass, DNInputMethod>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTextCompositionClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{C742BCBF-E820-5E45-B598-0FB70485F7BA}']
  { constructors } 

    {class} function init(inputManager: DNInputManager; source: DNIInputElement; resultText: string): DNTextComposition; overload;
    {class} function init(inputManager: DNInputManager; source: DNIInputElement; resultText: string; autoComplete: DNTextCompositionAutoComplete): DNTextComposition; overload;

  end;

  [DNTypeName('System.Windows.Input.TextComposition')]
  DNTextComposition = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{8DF0ECBC-1B24-35AD-8F62-71FC274CD32C}']
  { getters & setters } 

    function get_Text: string;
    function get_CompositionText: string;
    function get_SystemText: string;
    function get_ControlText: string;
    function get_SystemCompositionText: string;
    function get_AutoComplete: DNTextCompositionAutoComplete;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Complete;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property CompositionText: string read get_CompositionText;
    property SystemText: string read get_SystemText;
    property ControlText: string read get_ControlText;
    property SystemCompositionText: string read get_SystemCompositionText;
    property AutoComplete: DNTextCompositionAutoComplete read get_AutoComplete;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextComposition = class(TDNGenericImport<DNTextCompositionClass, DNTextComposition>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTextCompositionManagerClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{684A5EA8-BEE1-597D-AC2C-0E9A8C87D848}']
  { static fields getter & setter } 

   function __fakeFieldGet_PreviewTextInputStartEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputStartEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputUpdateEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputUpdateEvent: DNRoutedEvent;
   function __fakeFieldGet_PreviewTextInputEvent: DNRoutedEvent;
   function __fakeFieldGet_TextInputEvent: DNRoutedEvent;

  { static fields } 

    {class} property PreviewTextInputStartEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputStartEvent;
    {class} property TextInputStartEvent: DNRoutedEvent read __fakeFieldGet_TextInputStartEvent;
    {class} property PreviewTextInputUpdateEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputUpdateEvent;
    {class} property TextInputUpdateEvent: DNRoutedEvent read __fakeFieldGet_TextInputUpdateEvent;
    {class} property PreviewTextInputEvent: DNRoutedEvent read __fakeFieldGet_PreviewTextInputEvent;
    {class} property TextInputEvent: DNRoutedEvent read __fakeFieldGet_TextInputEvent;

  { static methods } 

    {class} procedure AddPreviewTextInputStartHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemovePreviewTextInputStartHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure AddTextInputStartHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemoveTextInputStartHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure AddPreviewTextInputUpdateHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemovePreviewTextInputUpdateHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure AddTextInputUpdateHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemoveTextInputUpdateHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure AddPreviewTextInputHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemovePreviewTextInputHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure AddTextInputHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} procedure RemoveTextInputHandler(element: DDN.System.Windows.Common.DNDependencyObject; handler: DNTextCompositionEventHandler);
    {class} function StartComposition(composition: DNTextComposition): Boolean;
    {class} function UpdateComposition(composition: DNTextComposition): Boolean;
    {class} function CompleteComposition(composition: DNTextComposition): Boolean;

  end;

  [DNTypeName('System.Windows.Input.TextCompositionManager')]
  DNTextCompositionManager = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{32D5D824-2098-3D48-981E-E4D6AA0430A3}']
  { getters & setters } 

    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTextCompositionManager = class(TDNGenericImport<DNTextCompositionManagerClass, DNTextCompositionManager>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{7A82B412-11C2-5A7A-9A8C-134E04A718D8}']
  end;

  [DNTypeName('System.Windows.Media.Animation.Clock')]
  DNClock = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{A502912F-F5A0-3BA0-A5DE-DE1560F9534D}']
  { getters & setters } 

    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Timeline: DNTimeline;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Timeline: DNTimeline read get_Timeline;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNClock = class(TDNGenericImport<DNClockClass, DNClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNAnimationClockClass = interface(DNClockClass)
  ['{864DD4E0-A282-5966-9AE0-BF40A6326546}']
  end;

  [DNTypeName('System.Windows.Media.Animation.AnimationClock')]
  DNAnimationClock = interface(DNClock)
  ['{9A8534FF-1D1F-3528-A972-3E63C463E614}']
  { getters & setters } 

    function get_Timeline: DNAnimationTimeline;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetCurrentValue(defaultOriginValue: DDN.mscorlib.DNObject; defaultDestinationValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNAnimationTimeline read get_Timeline;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNAnimationClock = class(TDNGenericImport<DNAnimationClockClass, DNAnimationClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockGroupClass = interface(DNClockClass)
  ['{62EE6B59-4AF8-5365-B8AD-449F91B3FBB4}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ClockGroup')]
  DNClockGroup = interface(DNClock)
  ['{CF10F3AB-0E66-385F-A87D-84C0937AFE0F}']
  { getters & setters } 

    function get_Timeline: DNTimelineGroup;
    function get_Children: DNClockCollection;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNTimelineGroup read get_Timeline;
    property Children: DNClockCollection read get_Children;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNClockGroup = class(TDNGenericImport<DNClockGroupClass, DNClockGroup>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMediaClockClass = interface(DNClockClass)
  ['{75F257F6-A0A1-5E88-BBEA-23B435FD3DB3}']
  end;

  [DNTypeName('System.Windows.Media.MediaClock')]
  DNMediaClock = interface(DNClock)
  ['{E83B37F5-869E-3EA8-B42C-7DCD426DC861}']
  { getters & setters } 

    function get_Timeline: DNMediaTimeline;
    function get_Controller: DNClockController;
    function get_CurrentState: DNClockState;
    function get_HasControllableRoot: Boolean;
    function get_IsPaused: Boolean;
    function get_NaturalDuration: DNDuration;
    function get_Parent: DNClock;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentGlobalSpeedInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentStateInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentTimeInvalidated(value: DDN.mscorlib.DNEventHandler);
    procedure add_RemoveRequested(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RemoveRequested(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Timeline: DNMediaTimeline read get_Timeline;
    property Controller: DNClockController read get_Controller;
    property CurrentState: DNClockState read get_CurrentState;
    property HasControllableRoot: Boolean read get_HasControllableRoot;
    property IsPaused: Boolean read get_IsPaused;
    property NaturalDuration: DNDuration read get_NaturalDuration;
    property Parent: DNClock read get_Parent;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNMediaClock = class(TDNGenericImport<DNMediaClockClass, DNMediaClock>) end;

  //-------------namespace: System.Windows.Media.Animation----------------
  DNClockControllerClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{360E8080-E225-5A00-8C83-448986AB67DC}']
  end;

  [DNTypeName('System.Windows.Media.Animation.ClockController')]
  DNClockController = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{E72C8D7A-2DBB-3E83-8DDA-414186359E4B}']
  { getters & setters } 

    function get_Clock: DNClock;
    function get_SpeedRatio: Double;
    procedure set_SpeedRatio(value: Double);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure &Begin;
    procedure SkipToFill;
    procedure Pause;
    procedure Resume;
    procedure Stop;
    procedure Remove;
    procedure Seek(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin);
    procedure SeekAlignedToLastTick(offset: DDN.mscorlib.DNTimeSpan; origin: DNTimeSeekOrigin);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Clock: DNClock read get_Clock;
    property SpeedRatio: Double read get_SpeedRatio write set_SpeedRatio;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNClockController = class(TDNGenericImport<DNClockControllerClass, DNClockController>) end;

  //-------------namespace: System.Windows.Media----------------
  DNCompositionTargetClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{F7BE6EC5-A5EC-5202-8B8D-B442E78DD625}']
  end;

  [DNTypeName('System.Windows.Media.CompositionTarget')]
  DNCompositionTarget = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{2215B681-63F2-396D-9ABD-FCAC754CB5F9}']
  { getters & setters } 

    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_TransformToDevice: DDN.System.Windows.Common.DNMatrix;
    function get_TransformFromDevice: DDN.System.Windows.Common.DNMatrix;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    {class} procedure add_Rendering(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_Rendering(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property TransformToDevice: DDN.System.Windows.Common.DNMatrix read get_TransformToDevice;
    property TransformFromDevice: DDN.System.Windows.Common.DNMatrix read get_TransformFromDevice;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCompositionTarget = class(TDNGenericImport<DNCompositionTargetClass, DNCompositionTarget>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNHwndTargetClass = interface(DNCompositionTargetClass)
  ['{CC976B8A-5839-5F00-B277-A9E1AB379F8C}']
  { static getter & setter } 

    procedure set_RootVisual(value: DNVisual);

  { constructors } 

    {class} function init(hwnd: IntPtr): DNHwndTarget;

  { static propertys } 

    {class} property RootVisual: DNVisual write set_RootVisual;
  end;

  [DNTypeName('System.Windows.Interop.HwndTarget')]
  DNHwndTarget = interface(DNCompositionTarget)
  ['{1613DE3E-14DA-3DD6-AD42-D4155FD62E75}']
  { getters & setters } 

    function get_RenderMode: DNRenderMode;
    procedure set_RenderMode(value: DNRenderMode);
    procedure set_RootVisual(value: DNVisual);
    function get_TransformToDevice: DDN.System.Windows.Common.DNMatrix;
    function get_TransformFromDevice: DDN.System.Windows.Common.DNMatrix;
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_UsesPerPixelOpacity: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Dispose;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RenderMode: DNRenderMode read get_RenderMode write set_RenderMode;
    property RootVisual: DNVisual write set_RootVisual;
    property TransformToDevice: DDN.System.Windows.Common.DNMatrix read get_TransformToDevice;
    property TransformFromDevice: DDN.System.Windows.Common.DNMatrix read get_TransformFromDevice;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property UsesPerPixelOpacity: Boolean read get_UsesPerPixelOpacity;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNHwndTarget = class(TDNGenericImport<DNHwndTargetClass, DNHwndTarget>) end;

  //-------------namespace: System.Windows.Media----------------
  DNVisualTargetClass = interface(DNCompositionTargetClass)
  ['{A48B8B1C-9061-5915-8A89-C647784376FD}']
  { constructors } 

    {class} function init(hostVisual: DNHostVisual): DNVisualTarget;

  end;

  [DNTypeName('System.Windows.Media.VisualTarget')]
  DNVisualTarget = interface(DNCompositionTarget)
  ['{8573D8CB-D9F3-3C6F-8B1E-1FB17D854122}']
  { getters & setters } 

    function get_TransformToDevice: DDN.System.Windows.Common.DNMatrix;
    function get_TransformFromDevice: DDN.System.Windows.Common.DNMatrix;
    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Dispose;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransformToDevice: DDN.System.Windows.Common.DNMatrix read get_TransformToDevice;
    property TransformFromDevice: DDN.System.Windows.Common.DNMatrix read get_TransformFromDevice;
    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNVisualTarget = class(TDNGenericImport<DNVisualTargetClass, DNVisualTarget>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDrawingContextClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{8D0F97D5-AA70-552E-8767-7073637B32F0}']
  end;

  [DNTypeName('System.Windows.Media.DrawingContext')]
  DNDrawingContext = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{EB8C26FB-3BB9-3C66-B290-E18E4CEFFF76}']
  { getters & setters } 

    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure DrawText(formattedText: DNFormattedText; origin: DDN.System.Windows.Common.DNPoint);
    procedure Close;
    procedure DrawLine(pen: DNPen; point0: DDN.System.Windows.Common.DNPoint; point1: DDN.System.Windows.Common.DNPoint); overload;
    procedure DrawLine(pen: DNPen; point0: DDN.System.Windows.Common.DNPoint; point0Animations: DNAnimationClock; point1: DDN.System.Windows.Common.DNPoint; point1Animations: DNAnimationClock); overload;
    procedure DrawRectangle(brush: DNBrush; pen: DNPen; rectangle: DDN.System.Windows.Common.DNRect); overload;
    procedure DrawRectangle(brush: DNBrush; pen: DNPen; rectangle: DDN.System.Windows.Common.DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure DrawRoundedRectangle(brush: DNBrush; pen: DNPen; rectangle: DDN.System.Windows.Common.DNRect; radiusX: Double; radiusY: Double); overload;
    procedure DrawRoundedRectangle(brush: DNBrush; pen: DNPen; rectangle: DDN.System.Windows.Common.DNRect; rectangleAnimations: DNAnimationClock; radiusX: Double; radiusXAnimations: DNAnimationClock; radiusY: Double; radiusYAnimations: DNAnimationClock); overload;
    procedure DrawEllipse(brush: DNBrush; pen: DNPen; center: DDN.System.Windows.Common.DNPoint; radiusX: Double; radiusY: Double); overload;
    procedure DrawEllipse(brush: DNBrush; pen: DNPen; center: DDN.System.Windows.Common.DNPoint; centerAnimations: DNAnimationClock; radiusX: Double; radiusXAnimations: DNAnimationClock; radiusY: Double; radiusYAnimations: DNAnimationClock); overload;
    procedure DrawGeometry(brush: DNBrush; pen: DNPen; geometry: DNGeometry);
    procedure DrawImage(imageSource: DNImageSource; rectangle: DDN.System.Windows.Common.DNRect); overload;
    procedure DrawImage(imageSource: DNImageSource; rectangle: DDN.System.Windows.Common.DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure DrawGlyphRun(foregroundBrush: DNBrush; glyphRun: DNGlyphRun);
    procedure DrawDrawing(drawing: DNDrawing);
    procedure DrawVideo(player: DNMediaPlayer; rectangle: DDN.System.Windows.Common.DNRect); overload;
    procedure DrawVideo(player: DNMediaPlayer; rectangle: DDN.System.Windows.Common.DNRect; rectangleAnimations: DNAnimationClock); overload;
    procedure PushClip(clipGeometry: DNGeometry);
    procedure PushOpacityMask(opacityMask: DNBrush);
    procedure PushOpacity(opacity: Double); overload;
    procedure PushOpacity(opacity: Double; opacityAnimations: DNAnimationClock); overload;
    procedure PushTransform(transform: DNTransform);
    procedure PushGuidelineSet(guidelines: DNGuidelineSet);
    procedure PushEffect(effect: DNBitmapEffect; effectInput: DNBitmapEffectInput);
    procedure Pop;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNDrawingContext = class(TDNGenericImport<DNDrawingContextClass, DNDrawingContext>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapDecoderClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{D1B77B1A-B477-5AA8-BA32-3EE3F130A32E}']
  { static methods } 

    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBitmapDecoder; overload;
    {class} function Create(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption; uriCachePolicy: DDN.System.Windows.Common.DNRequestCachePolicy): DNBitmapDecoder; overload;
    {class} function Create(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapDecoder')]
  DNBitmapDecoder = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{C1805C5B-A297-378C-BA8B-977317364627}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapDecoder = class(TDNGenericImport<DNBitmapDecoderClass, DNBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBmpBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{F2759203-F5F9-5D49-86AC-33B49001B4E9}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBmpBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNBmpBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BmpBitmapDecoder')]
  DNBmpBitmapDecoder = interface(DNBitmapDecoder)
  ['{A17240DD-7B59-3A63-ABA6-3662F9BA89A6}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBmpBitmapDecoder = class(TDNGenericImport<DNBmpBitmapDecoderClass, DNBmpBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNGifBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{35AAFCF8-5210-52D3-A530-0527A5C98815}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNGifBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNGifBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.GifBitmapDecoder')]
  DNGifBitmapDecoder = interface(DNBitmapDecoder)
  ['{57412E87-C011-3085-BD4B-1FCFB235E1A9}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGifBitmapDecoder = class(TDNGenericImport<DNGifBitmapDecoderClass, DNGifBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNIconBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{9D187785-668F-580A-AF2B-B32264224B25}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNIconBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNIconBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.IconBitmapDecoder')]
  DNIconBitmapDecoder = interface(DNBitmapDecoder)
  ['{DDAC3976-BA3D-3493-ADCC-11BA98433BA6}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNIconBitmapDecoder = class(TDNGenericImport<DNIconBitmapDecoderClass, DNIconBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNJpegBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{23E8F534-2C43-552E-9E2D-8AB8E189BCF4}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNJpegBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNJpegBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.JpegBitmapDecoder')]
  DNJpegBitmapDecoder = interface(DNBitmapDecoder)
  ['{CA5A9487-F2CD-32DE-98E5-40A6D308CBC4}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNJpegBitmapDecoder = class(TDNGenericImport<DNJpegBitmapDecoderClass, DNJpegBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNLateBoundBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{5936334A-2D2C-5655-B803-5D3575114B88}']
  end;

  [DNTypeName('System.Windows.Media.Imaging.LateBoundBitmapDecoder')]
  DNLateBoundBitmapDecoder = interface(DNBitmapDecoder)
  ['{4B401D9F-2E89-3408-B87A-B407FB25632F}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_Decoder: DNBitmapDecoder;
    function get_IsDownloading: Boolean;
    function get_Metadata: DNBitmapMetadata;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property Decoder: DNBitmapDecoder read get_Decoder;
    property IsDownloading: Boolean read get_IsDownloading;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNLateBoundBitmapDecoder = class(TDNGenericImport<DNLateBoundBitmapDecoderClass, DNLateBoundBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNPngBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{C8B05B4A-0700-5E39-AEEC-0A34DEBE7EBE}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNPngBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNPngBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.PngBitmapDecoder')]
  DNPngBitmapDecoder = interface(DNBitmapDecoder)
  ['{15EC9E2D-A782-34E6-9F87-8761F115386C}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPngBitmapDecoder = class(TDNGenericImport<DNPngBitmapDecoderClass, DNPngBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNTiffBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{E0883B2D-6602-58D6-A196-0E3D57339CE3}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNTiffBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNTiffBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.TiffBitmapDecoder')]
  DNTiffBitmapDecoder = interface(DNBitmapDecoder)
  ['{CD2EB0AD-52FA-3077-8487-56047D86A406}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTiffBitmapDecoder = class(TDNGenericImport<DNTiffBitmapDecoderClass, DNTiffBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNWmpBitmapDecoderClass = interface(DNBitmapDecoderClass)
  ['{254F908D-EE05-5C05-8494-8798C48BE0C6}']
  { constructors } 

    {class} function init(bitmapUri: DDN.System.Windows.Common.DNUri; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNWmpBitmapDecoder; overload;
    {class} function init(bitmapStream: DDN.mscorlib.DNStream; createOptions: DNBitmapCreateOptions; cacheOption: DNBitmapCacheOption): DNWmpBitmapDecoder; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.WmpBitmapDecoder')]
  DNWmpBitmapDecoder = interface(DNBitmapDecoder)
  ['{DDC65EDD-62E2-38DC-9DCF-DC31F6E6BF24}']
  { getters & setters } 

    function get_Palette: DNBitmapPalette;
    function get_Thumbnail: DNBitmapSource;
    function get_Metadata: DNBitmapMetadata;
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Preview: DNBitmapSource;
    function get_IsDownloading: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DownloadCompleted(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateInPlaceBitmapMetadataWriter: DNInPlaceBitmapMetadataWriter;
    function ToString: string;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Palette: DNBitmapPalette read get_Palette;
    property Thumbnail: DNBitmapSource read get_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Preview: DNBitmapSource read get_Preview;
    property IsDownloading: Boolean read get_IsDownloading;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNWmpBitmapDecoder = class(TDNGenericImport<DNWmpBitmapDecoderClass, DNWmpBitmapDecoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapEncoderClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{EE5F89BD-4A4A-598B-9112-959088AB103A}']
  { static methods } 

    {class} function Create(containerFormat: DDN.mscorlib.DNGuid): DNBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapEncoder')]
  DNBitmapEncoder = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{20249CAE-216F-30C0-A84C-5BCB05D8FA33}']
  { getters & setters } 

    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapEncoder = class(TDNGenericImport<DNBitmapEncoderClass, DNBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBmpBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{26BFD3BC-5FD3-5B6E-90C8-22E02A4C54BF}']
  { constructors } 

    {class} function init: DNBmpBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BmpBitmapEncoder')]
  DNBmpBitmapEncoder = interface(DNBitmapEncoder)
  ['{FA475ACE-146C-3FAC-9D67-E2E708CE0F7B}']
  { getters & setters } 

    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBmpBitmapEncoder = class(TDNGenericImport<DNBmpBitmapEncoderClass, DNBmpBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNGifBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{054E086D-B866-5257-9EAB-2ECD0C9156AF}']
  { constructors } 

    {class} function init: DNGifBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.GifBitmapEncoder')]
  DNGifBitmapEncoder = interface(DNBitmapEncoder)
  ['{D32DBCE0-070C-390B-93D4-74F321230EBC}']
  { getters & setters } 

    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNGifBitmapEncoder = class(TDNGenericImport<DNGifBitmapEncoderClass, DNGifBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNJpegBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{199F2B4B-FF09-5679-81BB-8F5C9024B5E0}']
  { constructors } 

    {class} function init: DNJpegBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.JpegBitmapEncoder')]
  DNJpegBitmapEncoder = interface(DNBitmapEncoder)
  ['{0DB51572-40F3-36D9-A74A-DDBEE707D73F}']
  { getters & setters } 

    function get_QualityLevel: Int32;
    procedure set_QualityLevel(value: Int32);
    function get_Rotation: DNRotation;
    procedure set_Rotation(value: DNRotation);
    function get_FlipHorizontal: Boolean;
    procedure set_FlipHorizontal(value: Boolean);
    function get_FlipVertical: Boolean;
    procedure set_FlipVertical(value: Boolean);
    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property QualityLevel: Int32 read get_QualityLevel write set_QualityLevel;
    property Rotation: DNRotation read get_Rotation write set_Rotation;
    property FlipHorizontal: Boolean read get_FlipHorizontal write set_FlipHorizontal;
    property FlipVertical: Boolean read get_FlipVertical write set_FlipVertical;
    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNJpegBitmapEncoder = class(TDNGenericImport<DNJpegBitmapEncoderClass, DNJpegBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNPngBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{737294BA-FA88-55C8-BAB7-26156F8B7CA9}']
  { constructors } 

    {class} function init: DNPngBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.PngBitmapEncoder')]
  DNPngBitmapEncoder = interface(DNBitmapEncoder)
  ['{7C8A5EDD-F783-350C-B90B-C5BE6FD58A79}']
  { getters & setters } 

    function get_Interlace: DNPngInterlaceOption;
    procedure set_Interlace(value: DNPngInterlaceOption);
    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Interlace: DNPngInterlaceOption read get_Interlace write set_Interlace;
    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPngBitmapEncoder = class(TDNGenericImport<DNPngBitmapEncoderClass, DNPngBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNTiffBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{7675218E-D337-5DA6-B918-5EC32A0FC184}']
  { constructors } 

    {class} function init: DNTiffBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.TiffBitmapEncoder')]
  DNTiffBitmapEncoder = interface(DNBitmapEncoder)
  ['{EAF8C91C-BD3A-3022-A62E-BEF971BE9F23}']
  { getters & setters } 

    function get_Compression: DNTiffCompressOption;
    procedure set_Compression(value: DNTiffCompressOption);
    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Compression: DNTiffCompressOption read get_Compression write set_Compression;
    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNTiffBitmapEncoder = class(TDNGenericImport<DNTiffBitmapEncoderClass, DNTiffBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNWmpBitmapEncoderClass = interface(DNBitmapEncoderClass)
  ['{7B0A7957-C6B2-578E-BC3D-B736F27E8777}']
  { constructors } 

    {class} function init: DNWmpBitmapEncoder;

  end;

  [DNTypeName('System.Windows.Media.Imaging.WmpBitmapEncoder')]
  DNWmpBitmapEncoder = interface(DNBitmapEncoder)
  ['{8CA8D152-2D4C-3F1E-8E54-B59C48AEEA9C}']
  { getters & setters } 

    function get_ImageQualityLevel: Single;
    procedure set_ImageQualityLevel(value: Single);
    function get_Lossless: Boolean;
    procedure set_Lossless(value: Boolean);
    function get_Rotation: DNRotation;
    procedure set_Rotation(value: DNRotation);
    function get_FlipHorizontal: Boolean;
    procedure set_FlipHorizontal(value: Boolean);
    function get_FlipVertical: Boolean;
    procedure set_FlipVertical(value: Boolean);
    function get_UseCodecOptions: Boolean;
    procedure set_UseCodecOptions(value: Boolean);
    function get_QualityLevel: Byte;
    procedure set_QualityLevel(value: Byte);
    function get_SubsamplingLevel: Byte;
    procedure set_SubsamplingLevel(value: Byte);
    function get_OverlapLevel: Byte;
    procedure set_OverlapLevel(value: Byte);
    function get_HorizontalTileSlices: Int16;
    procedure set_HorizontalTileSlices(value: Int16);
    function get_VerticalTileSlices: Int16;
    procedure set_VerticalTileSlices(value: Int16);
    function get_FrequencyOrder: Boolean;
    procedure set_FrequencyOrder(value: Boolean);
    function get_InterleavedAlpha: Boolean;
    procedure set_InterleavedAlpha(value: Boolean);
    function get_AlphaQualityLevel: Byte;
    procedure set_AlphaQualityLevel(value: Byte);
    function get_CompressedDomainTranscode: Boolean;
    procedure set_CompressedDomainTranscode(value: Boolean);
    function get_ImageDataDiscardLevel: Byte;
    procedure set_ImageDataDiscardLevel(value: Byte);
    function get_AlphaDataDiscardLevel: Byte;
    procedure set_AlphaDataDiscardLevel(value: Byte);
    function get_IgnoreOverlap: Boolean;
    procedure set_IgnoreOverlap(value: Boolean);
    function get_Thumbnail: DNBitmapSource;
    procedure set_Thumbnail(value: DNBitmapSource);
    function get_Metadata: DNBitmapMetadata;
    procedure set_Metadata(value: DNBitmapMetadata);
    function get_Preview: DNBitmapSource;
    procedure set_Preview(value: DNBitmapSource);
    function get_CodecInfo: DNBitmapCodecInfo;
    function get_Palette: DNBitmapPalette;
    procedure set_Palette(value: DNBitmapPalette);
    function get_Frames: DDN.mscorlib.DNIList<DNBitmapFrame>;
    procedure set_Frames(value: DDN.mscorlib.DNIList<DNBitmapFrame>);
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageQualityLevel: Single read get_ImageQualityLevel write set_ImageQualityLevel;
    property Lossless: Boolean read get_Lossless write set_Lossless;
    property Rotation: DNRotation read get_Rotation write set_Rotation;
    property FlipHorizontal: Boolean read get_FlipHorizontal write set_FlipHorizontal;
    property FlipVertical: Boolean read get_FlipVertical write set_FlipVertical;
    property UseCodecOptions: Boolean read get_UseCodecOptions write set_UseCodecOptions;
    property QualityLevel: Byte read get_QualityLevel write set_QualityLevel;
    property SubsamplingLevel: Byte read get_SubsamplingLevel write set_SubsamplingLevel;
    property OverlapLevel: Byte read get_OverlapLevel write set_OverlapLevel;
    property HorizontalTileSlices: Int16 read get_HorizontalTileSlices write set_HorizontalTileSlices;
    property VerticalTileSlices: Int16 read get_VerticalTileSlices write set_VerticalTileSlices;
    property FrequencyOrder: Boolean read get_FrequencyOrder write set_FrequencyOrder;
    property InterleavedAlpha: Boolean read get_InterleavedAlpha write set_InterleavedAlpha;
    property AlphaQualityLevel: Byte read get_AlphaQualityLevel write set_AlphaQualityLevel;
    property CompressedDomainTranscode: Boolean read get_CompressedDomainTranscode write set_CompressedDomainTranscode;
    property ImageDataDiscardLevel: Byte read get_ImageDataDiscardLevel write set_ImageDataDiscardLevel;
    property AlphaDataDiscardLevel: Byte read get_AlphaDataDiscardLevel write set_AlphaDataDiscardLevel;
    property IgnoreOverlap: Boolean read get_IgnoreOverlap write set_IgnoreOverlap;
    property Thumbnail: DNBitmapSource read get_Thumbnail write set_Thumbnail;
    property Metadata: DNBitmapMetadata read get_Metadata write set_Metadata;
    property Preview: DNBitmapSource read get_Preview write set_Preview;
    property CodecInfo: DNBitmapCodecInfo read get_CodecInfo;
    property Palette: DNBitmapPalette read get_Palette write set_Palette;
    property Frames: DDN.mscorlib.DNIList<DNBitmapFrame> read get_Frames write set_Frames;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNWmpBitmapEncoder = class(TDNGenericImport<DNWmpBitmapEncoderClass, DNWmpBitmapEncoder>) end;

  //-------------namespace: System.Windows.Media.Imaging----------------
  DNBitmapPaletteClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{691D3366-B52F-5D49-8D62-33718138F8DD}']
  { constructors } 

    {class} function init(colors: DDN.mscorlib.DNIList<DNColor>): DNBitmapPalette; overload;
    {class} function init(bitmapSource: DNBitmapSource; maxColorCount: Int32): DNBitmapPalette; overload;

  end;

  [DNTypeName('System.Windows.Media.Imaging.BitmapPalette')]
  DNBitmapPalette = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{68601938-3221-3DF3-A7C1-8CA5C08E3BDE}']
  { getters & setters } 

    function get_Colors: DDN.mscorlib.DNIList<DNColor>;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Colors: DDN.mscorlib.DNIList<DNColor> read get_Colors;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNBitmapPalette = class(TDNGenericImport<DNBitmapPaletteClass, DNBitmapPalette>) end;

  //-------------namespace: System.Windows.Media----------------
  DNStreamGeometryContextClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{6A74663D-7AC3-53F6-AA87-E0B865FC6E17}']
  end;

  [DNTypeName('System.Windows.Media.StreamGeometryContext')]
  DNStreamGeometryContext = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{253D2003-5F71-3DDC-947A-7D0C12DBCFCF}']
  { getters & setters } 

    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    procedure Close;
    procedure BeginFigure(startPoint: DDN.System.Windows.Common.DNPoint; isFilled: Boolean; isClosed: Boolean);
    procedure LineTo(point: DDN.System.Windows.Common.DNPoint; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure QuadraticBezierTo(point1: DDN.System.Windows.Common.DNPoint; point2: DDN.System.Windows.Common.DNPoint; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure BezierTo(point1: DDN.System.Windows.Common.DNPoint; point2: DDN.System.Windows.Common.DNPoint; point3: DDN.System.Windows.Common.DNPoint; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure PolyLineTo(points: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure PolyQuadraticBezierTo(points: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure PolyBezierTo(points: DDN.mscorlib.DNIList<DDN.System.Windows.Common.DNPoint>; isStroked: Boolean; isSmoothJoin: Boolean);
    procedure ArcTo(point: DDN.System.Windows.Common.DNPoint; size: DDN.System.Windows.Common.DNSize; rotationAngle: Double; isLargeArc: Boolean; sweepDirection: DNSweepDirection; isStroked: Boolean; isSmoothJoin: Boolean);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNStreamGeometryContext = class(TDNGenericImport<DNStreamGeometryContextClass, DNStreamGeometryContext>) end;

  //-------------namespace: System.Windows----------------
  DNPresentationSourceClass = interface(DDN.System.Windows.Common.DNDispatcherObjectClass)
  ['{F80CB59C-8B9F-5B30-90CE-2F16B7062F19}']
  { static getter & setter } 

    {class} function get_CurrentSources: DDN.mscorlib.DNIEnumerable;

  { static methods } 

    {class} function FromVisual(visual: DNVisual): DNPresentationSource;
    {class} function FromDependencyObject(dependencyObject: DDN.System.Windows.Common.DNDependencyObject): DNPresentationSource;
    {class} procedure RemoveSourceChangedHandler(e: DNIInputElement; handler: DNSourceChangedEventHandler);
    {class} procedure AddSourceChangedHandler(element: DNIInputElement; handler: DNSourceChangedEventHandler);

  { static propertys } 

    {class} property CurrentSources: DDN.mscorlib.DNIEnumerable read get_CurrentSources;
  end;

  [DNTypeName('System.Windows.PresentationSource')]
  DNPresentationSource = interface(DDN.System.Windows.Common.DNDispatcherObject)
  ['{2748833D-7C0C-3496-9673-B36C0D44B609}']
  { getters & setters } 

    function get_CompositionTarget: DNCompositionTarget;
    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_IsDisposed: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_ContentRendered(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ContentRendered(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompositionTarget: DNCompositionTarget read get_CompositionTarget;
    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property IsDisposed: Boolean read get_IsDisposed;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNPresentationSource = class(TDNGenericImport<DNPresentationSourceClass, DNPresentationSource>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNHwndSourceClass = interface(DNPresentationSourceClass)
  ['{B90952A2-88CC-5525-93FE-047C3338F516}']
  { static getter & setter } 

    {class} function get_DefaultAcquireHwndFocusInMenuMode: Boolean;
    {class} procedure set_DefaultAcquireHwndFocusInMenuMode(value: Boolean);

  { constructors } 

    {class} function init(classStyle: Int32; style: Int32; exStyle: Int32; x: Int32; y: Int32; name: string; parent: IntPtr): DNHwndSource; overload;
    {class} function init(classStyle: Int32; style: Int32; exStyle: Int32; x: Int32; y: Int32; width: Int32; height: Int32; name: string; parent: IntPtr; adjustSizingForNonClientArea: Boolean): DNHwndSource; overload;
    {class} function init(classStyle: Int32; style: Int32; exStyle: Int32; x: Int32; y: Int32; width: Int32; height: Int32; name: string; parent: IntPtr): DNHwndSource; overload;
    {class} function init(parameters: DNHwndSourceParameters): DNHwndSource; overload;

  { static methods } 

    {class} function FromHwnd(hwnd: IntPtr): DNHwndSource;

  { static propertys } 

    {class} property DefaultAcquireHwndFocusInMenuMode: Boolean read get_DefaultAcquireHwndFocusInMenuMode write set_DefaultAcquireHwndFocusInMenuMode;
  end;

  [DNTypeName('System.Windows.Interop.HwndSource')]
  DNHwndSource = interface(DNPresentationSource)
  ['{26E1D39F-63C5-38E9-947B-D3C8B62D52C8}']
  { getters & setters } 

    function get_IsDisposed: Boolean;
    function get_RootVisual: DNVisual;
    procedure set_RootVisual(value: DNVisual);
    function get_ChildKeyboardInputSinks: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNIKeyboardInputSink>;
    function get_CompositionTarget: DNHwndTarget;
    function get_Handle: IntPtr;
    function get_SizeToContent: DNSizeToContent;
    procedure set_SizeToContent(value: DNSizeToContent);
    function get_UsesPerPixelOpacity: Boolean;
    function get_RestoreFocusMode: DNRestoreFocusMode;
    function get_AcquireHwndFocusInMenuMode: Boolean;
    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_SizeToContentChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SizeToContentChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_DpiChanged(value: DNHwndDpiChangedEventHandler);
    procedure remove_DpiChanged(value: DNHwndDpiChangedEventHandler);
    procedure add_AutoResized(value: DNAutoResizedEventHandler);
    procedure remove_AutoResized(value: DNAutoResizedEventHandler);
    procedure add_ContentRendered(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ContentRendered(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    procedure RemoveHook(hook: DNHwndSourceHook);
    function CreateHandleRef: DDN.mscorlib.DNHandleRef;
    procedure AddHook(hook: DNHwndSourceHook);
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDisposed: Boolean read get_IsDisposed;
    property RootVisual: DNVisual read get_RootVisual write set_RootVisual;
    property ChildKeyboardInputSinks: DDN.mscorlib.DNIEnumerable<DDN.System.Windows.Common.DNIKeyboardInputSink> read get_ChildKeyboardInputSinks;
    property CompositionTarget: DNHwndTarget read get_CompositionTarget;
    property Handle: IntPtr read get_Handle;
    property SizeToContent: DNSizeToContent read get_SizeToContent write set_SizeToContent;
    property UsesPerPixelOpacity: Boolean read get_UsesPerPixelOpacity;
    property RestoreFocusMode: DNRestoreFocusMode read get_RestoreFocusMode;
    property AcquireHwndFocusInMenuMode: Boolean read get_AcquireHwndFocusInMenuMode;
    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNHwndSource = class(TDNGenericImport<DNHwndSourceClass, DNHwndSource>) end;

  //-------------namespace: System.Windows.Input----------------
  DNCanExecuteChangedEventManagerClass = interface(DDN.System.Windows.Common.DNWeakEventManagerClass)
  ['{61F37C1A-1926-5C1E-9CED-02396ABA81D9}']
  end;

  [DNTypeName('System.Windows.Input.CanExecuteChangedEventManager')]
  DNCanExecuteChangedEventManager = interface(DDN.System.Windows.Common.DNWeakEventManager)
  ['{8EB1CF35-A6B3-3290-9AC5-05219A62F148}']
  { getters & setters } 

    function get_Dispatcher: DDN.System.Windows.Common.DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DDN.System.Windows.Common.DNDispatcher read get_Dispatcher;
  end;

  TDNCanExecuteChangedEventManager = class(TDNGenericImport<DNCanExecuteChangedEventManagerClass, DNCanExecuteChangedEventManager>) end;


implementation


initialization
  LoadAssemblyModule('WPF\PresentationCore.dll', True);

finalization

end.
