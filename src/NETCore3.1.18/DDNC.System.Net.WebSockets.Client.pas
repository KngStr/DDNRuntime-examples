//----------------------------------------------------------------------------
//  System.Net.WebSockets.Client.dll: System.Net.WebSockets.Client, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Net.WebSockets.Client
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMNETWEBSOCKETSCLIENT}
unit DDNC.System.Net.WebSockets.Client;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Net.Primitives,
  DDNC.System.Security.Cryptography.X509Certificates,
  DDNC.System.Net.Security,
  DDNC.System.Net.WebSockets,
  DDNC.System.Private.Uri;

type


{ declares }

  DNClientWebSocketOptions = interface; // type: System.Net.WebSockets.ClientWebSocketOptions, namespace: System.Net.WebSockets
  DNClientWebSocket = interface; // type: System.Net.WebSockets.ClientWebSocket, namespace: System.Net.WebSockets


{ objects }

  //-------------namespace: System.Net.WebSockets----------------
  DNClientWebSocketOptionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{52A78598-49BD-52FD-97E8-E3F8BFDBD055}']
  end;

  [DNTypeName('System.Net.WebSockets.ClientWebSocketOptions')]
  DNClientWebSocketOptions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AAE24790-108E-3004-917D-0946135FF253}']
  { getters & setters } 

    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Credentials: DDNC.System.Net.Primitives.DNICredentials;
    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentials);
    function get_Proxy: DDNC.System.Net.Primitives.DNIWebProxy;
    procedure set_Proxy(value: DDNC.System.Net.Primitives.DNIWebProxy);
    function get_ClientCertificates: DDNC.System.Security.Cryptography.X509Certificates.DNX509CertificateCollection;
    procedure set_ClientCertificates(value: DDNC.System.Security.Cryptography.X509Certificates.DNX509CertificateCollection);
    function get_RemoteCertificateValidationCallback: DDNC.System.Net.Security.DNRemoteCertificateValidationCallback;
    procedure set_RemoteCertificateValidationCallback(value: DDNC.System.Net.Security.DNRemoteCertificateValidationCallback);
    function get_Cookies: DDNC.System.Net.Primitives.DNCookieContainer;
    procedure set_Cookies(value: DDNC.System.Net.Primitives.DNCookieContainer);
    function get_KeepAliveInterval: DDNC.System.Private.CoreLib.DNTimeSpan;
    procedure set_KeepAliveInterval(value: DDNC.System.Private.CoreLib.DNTimeSpan);

  { methods } 

    procedure SetRequestHeader(headerName: string; headerValue: string);
    procedure AddSubProtocol(subProtocol: string);
    procedure SetBuffer(receiveBufferSize: Int32; sendBufferSize: Int32); overload;
    procedure SetBuffer(receiveBufferSize: Int32; sendBufferSize: Int32; buffer: DDNC.System.Private.CoreLib.DNArraySegment<Byte>); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Credentials: DDNC.System.Net.Primitives.DNICredentials read get_Credentials write set_Credentials;
    property Proxy: DDNC.System.Net.Primitives.DNIWebProxy read get_Proxy write set_Proxy;
    property ClientCertificates: DDNC.System.Security.Cryptography.X509Certificates.DNX509CertificateCollection read get_ClientCertificates write set_ClientCertificates;
    property RemoteCertificateValidationCallback: DDNC.System.Net.Security.DNRemoteCertificateValidationCallback read get_RemoteCertificateValidationCallback write set_RemoteCertificateValidationCallback;
    property Cookies: DDNC.System.Net.Primitives.DNCookieContainer read get_Cookies write set_Cookies;
    property KeepAliveInterval: DDNC.System.Private.CoreLib.DNTimeSpan read get_KeepAliveInterval write set_KeepAliveInterval;
  end;

  TDNClientWebSocketOptions = class(TDNGenericImport<DNClientWebSocketOptionsClass, DNClientWebSocketOptions>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNClientWebSocketClass = interface(DNObjectClass)
  ['{AA5DF8ED-F8FB-5649-A78C-FA333929F428}']
  { constructors } 

    {class} function init: DNClientWebSocket;

  end;

  [DNTypeName('System.Net.WebSockets.ClientWebSocket')]
  DNClientWebSocket = interface(DNObject)
  ['{86C3E1F5-0D7D-375B-82DE-1E1C4D2C4D1F}']
  { getters & setters } 

    function get_Options: DNClientWebSocketOptions;
    function get_CloseStatus: DDNC.System.Private.CoreLib.DNNullable<DDNC.System.Net.WebSockets.DNWebSocketCloseStatus>;
    function get_CloseStatusDescription: string;
    function get_SubProtocol: string;
    function get_State: DDNC.System.Net.WebSockets.DNWebSocketState;

  { methods } 

    function ConnectAsync(uri: DDNC.System.Private.Uri.DNUri; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    function SendAsync(buffer: DDNC.System.Private.CoreLib.DNArraySegment<Byte>; messageType: DDNC.System.Net.WebSockets.DNWebSocketMessageType; endOfMessage: Boolean; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function SendAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Byte>; messageType: DDNC.System.Net.WebSockets.DNWebSocketMessageType; endOfMessage: Boolean; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask; overload;
    function ReceiveAsync(buffer: DDNC.System.Private.CoreLib.DNArraySegment<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DDNC.System.Net.WebSockets.DNWebSocketReceiveResult>; overload;
    function ReceiveAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<DDNC.System.Net.WebSockets.DNValueWebSocketReceiveResult>; overload;
    function CloseAsync(closeStatus: DDNC.System.Net.WebSockets.DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    function CloseOutputAsync(closeStatus: DDNC.System.Net.WebSockets.DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure &Abort;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Options: DNClientWebSocketOptions read get_Options;
    property CloseStatus: DDNC.System.Private.CoreLib.DNNullable<DDNC.System.Net.WebSockets.DNWebSocketCloseStatus> read get_CloseStatus;
    property CloseStatusDescription: string read get_CloseStatusDescription;
    property SubProtocol: string read get_SubProtocol;
    property State: DDNC.System.Net.WebSockets.DNWebSocketState read get_State;
  end;

  TDNClientWebSocket = class(TDNGenericImport<DNClientWebSocketClass, DNClientWebSocket>) end;


implementation


initialization
  LoadAssemblyModule('System.Net.WebSockets.Client.dll', True, 'System.Net.WebSockets.Client, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
