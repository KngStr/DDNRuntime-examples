//----------------------------------------------------------------------------
//  System.Private.Xml.Linq.dll: System.Private.Xml.Linq, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Private.Xml.Linq
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMPRIVATEXMLLINQ}
unit DDNC.System.Private.Xml.Linq;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Private.Xml;

type

{ enums }

  //-------------namespace: System.Xml.Linq----------------
  [DNTypeName('System.Xml.Linq.LoadOptions')]
  DNLoadOptions = type Integer;
  DNLoadOptionsHelper = record helper for DNLoadOptions
  public const
    None = 0;
    PreserveWhitespace = 1;
    SetBaseUri = 2;
    SetLineInfo = 4;
  end;


  //-------------namespace: System.Xml.Linq----------------
  [DNTypeName('System.Xml.Linq.ReaderOptions')]
  DNReaderOptions = type Integer;
  DNReaderOptionsHelper = record helper for DNReaderOptions
  public const
    None = 0;
    OmitDuplicateNamespaces = 1;
  end;


  //-------------namespace: System.Xml.Linq----------------
  [DNTypeName('System.Xml.Linq.SaveOptions')]
  DNSaveOptions = type Integer;
  DNSaveOptionsHelper = record helper for DNSaveOptions
  public const
    None = 0;
    DisableFormatting = 1;
    OmitDuplicateNamespaces = 2;
  end;


  //-------------namespace: System.Xml.Linq----------------
  [DNTypeName('System.Xml.Linq.XObjectChange')]
  DNXObjectChange = type Integer;
  DNXObjectChangeHelper = record helper for DNXObjectChange
  public const
    Add = 0;
    Remove = 1;
    Name = 2;
    Value = 3;
  end;




type


{ declares }

  DNXObjectChangeEventArgs = interface; // type: System.Xml.Linq.XObjectChangeEventArgs, namespace: System.Xml.Linq
  DNLinq_Extensions = interface; // type: System.Xml.Linq.Extensions, namespace: System.Xml.Linq
  DNXDeclaration = interface; // type: System.Xml.Linq.XDeclaration, namespace: System.Xml.Linq
  DNXName = interface; // type: System.Xml.Linq.XName, namespace: System.Xml.Linq
  DNXNamespace = interface; // type: System.Xml.Linq.XNamespace, namespace: System.Xml.Linq
  DNXNodeDocumentOrderComparer = interface; // type: System.Xml.Linq.XNodeDocumentOrderComparer, namespace: System.Xml.Linq
  DNXNodeEqualityComparer = interface; // type: System.Xml.Linq.XNodeEqualityComparer, namespace: System.Xml.Linq
  DNXObject = interface; // type: System.Xml.Linq.XObject, namespace: System.Xml.Linq
  DNXAttribute = interface; // type: System.Xml.Linq.XAttribute, namespace: System.Xml.Linq
  DNXNode = interface; // type: System.Xml.Linq.XNode, namespace: System.Xml.Linq
  DNXComment = interface; // type: System.Xml.Linq.XComment, namespace: System.Xml.Linq
  DNXContainer = interface; // type: System.Xml.Linq.XContainer, namespace: System.Xml.Linq
  DNXDocument = interface; // type: System.Xml.Linq.XDocument, namespace: System.Xml.Linq
  DNXElement = interface; // type: System.Xml.Linq.XElement, namespace: System.Xml.Linq
  DNXDocumentType = interface; // type: System.Xml.Linq.XDocumentType, namespace: System.Xml.Linq
  DNXProcessingInstruction = interface; // type: System.Xml.Linq.XProcessingInstruction, namespace: System.Xml.Linq
  DNXText = interface; // type: System.Xml.Linq.XText, namespace: System.Xml.Linq
  DNXCData = interface; // type: System.Xml.Linq.XCData, namespace: System.Xml.Linq
  DNXStreamingElement = interface; // type: System.Xml.Linq.XStreamingElement, namespace: System.Xml.Linq
  DNSchema_Extensions = interface; // type: System.Xml.Schema.Extensions, namespace: System.Xml.Schema
  DNXPath_Extensions = interface; // type: System.Xml.XPath.Extensions, namespace: System.Xml.XPath


{ objects }

  //-------------namespace: System.Xml.Linq----------------
  DNXObjectChangeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{74E79EE2-17D6-5BCB-8D96-93D6865D6605}']
  { constructors } 

    {class} function init(objectChange: DNXObjectChange): DNXObjectChangeEventArgs;

  { static fields getter & setter } 

   function __fakeFieldGet_Add: DNXObjectChangeEventArgs;
   function __fakeFieldGet_Remove: DNXObjectChangeEventArgs;
   function __fakeFieldGet_Name: DNXObjectChangeEventArgs;
   function __fakeFieldGet_Value: DNXObjectChangeEventArgs;

  { static fields } 

    {class} property Add: DNXObjectChangeEventArgs read __fakeFieldGet_Add;
    {class} property Remove: DNXObjectChangeEventArgs read __fakeFieldGet_Remove;
    {class} property Name: DNXObjectChangeEventArgs read __fakeFieldGet_Name;
    {class} property Value: DNXObjectChangeEventArgs read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.Xml.Linq.XObjectChangeEventArgs')]
  DNXObjectChangeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{0BC4E137-A8F4-37E9-AAD8-D7520E392A83}']
  { getters & setters } 

    function get_ObjectChange: DNXObjectChange;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectChange: DNXObjectChange read get_ObjectChange;
  end;

  TDNXObjectChangeEventArgs = class(TDNGenericImport<DNXObjectChangeEventArgsClass, DNXObjectChangeEventArgs>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNLinq_ExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8828149E-B60E-5624-986B-F5B5759F4999}']
  { static methods } 

    {class} function Attributes(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>): DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>; overload;
    {class} function Attributes(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>; overload;
    {class} function AncestorsAndSelf(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    {class} function AncestorsAndSelf(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    {class} function DescendantNodesAndSelf(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>): DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    {class} function DescendantsAndSelf(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    {class} function DescendantsAndSelf(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    {class} procedure Remove(source: DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>); overload;

  end;

  [DNTypeName('System.Xml.Linq.Extensions')]
  DNLinq_Extensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{15AA5925-3950-31EC-9E96-6A318BD511BD}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLinq_Extensions = class(TDNGenericImport<DNLinq_ExtensionsClass, DNLinq_Extensions>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXDeclarationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F5E374BC-DF50-54FA-AFBC-D7AA8BF92F63}']
  { constructors } 

    {class} function init(version: string; encoding: string; standalone: string): DNXDeclaration; overload;
    {class} function init(other: DNXDeclaration): DNXDeclaration; overload;

  end;

  [DNTypeName('System.Xml.Linq.XDeclaration')]
  DNXDeclaration = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{27AAF81B-43E9-3B9A-ABDC-F071F0B902C5}']
  { getters & setters } 

    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Version: string;
    procedure set_Version(value: string);

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Encoding: string read get_Encoding write set_Encoding;
    property Standalone: string read get_Standalone write set_Standalone;
    property Version: string read get_Version write set_Version;
  end;

  TDNXDeclaration = class(TDNGenericImport<DNXDeclarationClass, DNXDeclaration>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXNameClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E0352777-33E7-5A5C-B190-7832AF5F399A}']
  { static methods } 

    {class} function Get(expandedName: string): DNXName; overload;
    {class} function Get(localName: string; namespaceName: string): DNXName; overload;

  end;

  [DNTypeName('System.Xml.Linq.XName')]
  DNXName = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A47338A3-D23C-3410-969E-347ADE68F35E}']
  { getters & setters } 

    function get_LocalName: string;
    function get_Namespace: DNXNamespace;
    function get_NamespaceName: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property LocalName: string read get_LocalName;
    property Namespace: DNXNamespace read get_Namespace;
    property NamespaceName: string read get_NamespaceName;
  end;

  TDNXName = class(TDNGenericImport<DNXNameClass, DNXName>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXNamespaceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EC7ED265-3897-5D12-A4FE-1BFFF4F43FCC}']
  { static getter & setter } 

    {class} function get_None: DNXNamespace;
    {class} function get_Xml: DNXNamespace;
    {class} function get_Xmlns: DNXNamespace;

  { static methods } 

    {class} function Get(namespaceName: string): DNXNamespace;

  { static propertys } 

    {class} property None: DNXNamespace read get_None;
    {class} property Xml: DNXNamespace read get_Xml;
    {class} property Xmlns: DNXNamespace read get_Xmlns;
  end;

  [DNTypeName('System.Xml.Linq.XNamespace')]
  DNXNamespace = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6AA5F25F-1285-3B81-8329-031A355E7008}']
  { getters & setters } 

    function get_NamespaceName: string;

  { methods } 

    function GetName(localName: string): DNXName;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property NamespaceName: string read get_NamespaceName;
  end;

  TDNXNamespace = class(TDNGenericImport<DNXNamespaceClass, DNXNamespace>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXNodeDocumentOrderComparerClass = interface(DNObjectClass)
  ['{A53ECFF8-4480-5AB2-B3AA-D06473A698F3}']
  { constructors } 

    {class} function init: DNXNodeDocumentOrderComparer;

  end;

  [DNTypeName('System.Xml.Linq.XNodeDocumentOrderComparer')]
  DNXNodeDocumentOrderComparer = interface(DDNC.System.Private.CoreLib.DNIComparer)
  ['{49C0F3B1-1489-3E47-8F3B-CAAB590A981A}']
  { methods } 

    function Compare(x: DNXNode; y: DNXNode): Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXNodeDocumentOrderComparer = class(TDNGenericImport<DNXNodeDocumentOrderComparerClass, DNXNodeDocumentOrderComparer>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXNodeEqualityComparerClass = interface(DNObjectClass)
  ['{26BC796D-345E-5206-B9D6-8CEA60119D22}']
  { constructors } 

    {class} function init: DNXNodeEqualityComparer;

  end;

  [DNTypeName('System.Xml.Linq.XNodeEqualityComparer')]
  DNXNodeEqualityComparer = interface(DDNC.System.Private.CoreLib.DNIEqualityComparer)
  ['{62A82C67-4694-30D2-8099-B2E49FCF2816}']
  { methods } 

    function Equals(x: DNXNode; y: DNXNode): Boolean; overload;
    function GetHashCode(obj: DNXNode): Int32; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNXNodeEqualityComparer = class(TDNGenericImport<DNXNodeEqualityComparerClass, DNXNodeEqualityComparer>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXObjectClass = interface(DNObjectClass)
  ['{D1D136E3-A369-5E4B-A0E5-8076DA6AF16E}']
  end;

  [DNTypeName('System.Xml.Linq.XObject')]
  DNXObject = interface(DDNC.System.Private.Xml.DNIXmlLineInfo)
  ['{6FA38B8A-3DB6-3217-9031-A81437DFA677}']
  { getters & setters } 

    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXObject = class(TDNGenericImport<DNXObjectClass, DNXObject>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXAttributeClass = interface(DNXObjectClass)
  ['{9405AFB5-E8B6-5593-A1B8-80D410345AB4}']
  { static getter & setter } 

    {class} function get_EmptySequence: DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>;

  { constructors } 

    {class} function init(name: DNXName; value: DDNC.System.Private.CoreLib.DNObject): DNXAttribute; overload;
    {class} function init(other: DNXAttribute): DNXAttribute; overload;

  { static propertys } 

    {class} property EmptySequence: DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute> read get_EmptySequence;
  end;

  [DNTypeName('System.Xml.Linq.XAttribute')]
  DNXAttribute = interface(DNXObject)
  ['{1F37BB98-1771-3567-AD9A-667A697B6180}']
  { getters & setters } 

    function get_IsNamespaceDeclaration: Boolean;
    function get_Name: DNXName;
    function get_NextAttribute: DNXAttribute;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_PreviousAttribute: DNXAttribute;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure Remove;
    procedure SetValue(value: DDNC.System.Private.CoreLib.DNObject);
    function ToString: string;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsNamespaceDeclaration: Boolean read get_IsNamespaceDeclaration;
    property Name: DNXName read get_Name;
    property NextAttribute: DNXAttribute read get_NextAttribute;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property PreviousAttribute: DNXAttribute read get_PreviousAttribute;
    property Value: string read get_Value write set_Value;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXAttribute = class(TDNGenericImport<DNXAttributeClass, DNXAttribute>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXNodeClass = interface(DNXObjectClass)
  ['{C66E7858-CDA9-539D-81F5-7892D26F34D0}']
  { static getter & setter } 

    {class} function get_DocumentOrderComparer: DNXNodeDocumentOrderComparer;
    {class} function get_EqualityComparer: DNXNodeEqualityComparer;

  { static methods } 

    {class} function CompareDocumentOrder(n1: DNXNode; n2: DNXNode): Int32;
    {class} function ReadFrom(reader: DDNC.System.Private.Xml.DNXmlReader): DNXNode;
    {class} function ReadFromAsync(reader: DDNC.System.Private.Xml.DNXmlReader; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXNode>;
    {class} function DeepEquals(n1: DNXNode; n2: DNXNode): Boolean;

  { static propertys } 

    {class} property DocumentOrderComparer: DNXNodeDocumentOrderComparer read get_DocumentOrderComparer;
    {class} property EqualityComparer: DNXNodeEqualityComparer read get_EqualityComparer;
  end;

  [DNTypeName('System.Xml.Linq.XNode')]
  DNXNode = interface(DNXObject)
  ['{25B5D3E0-AFFB-344D-A90B-0AADA634E560}']
  { getters & setters } 

    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXNode = class(TDNGenericImport<DNXNodeClass, DNXNode>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXCommentClass = interface(DNXNodeClass)
  ['{F7748D70-D767-581D-8112-98F73BD7CB69}']
  { constructors } 

    {class} function init(value: string): DNXComment; overload;
    {class} function init(other: DNXComment): DNXComment; overload;

  end;

  [DNTypeName('System.Xml.Linq.XComment')]
  DNXComment = interface(DNXNode)
  ['{34C6CE7F-ADAB-3281-9EF8-A43F3E112050}']
  { getters & setters } 

    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXComment = class(TDNGenericImport<DNXCommentClass, DNXComment>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXContainerClass = interface(DNXNodeClass)
  ['{C7144D28-BDD1-54EB-8042-D7BD25798633}']
  end;

  [DNTypeName('System.Xml.Linq.XContainer')]
  DNXContainer = interface(DNXNode)
  ['{8FE94A2C-3A69-3330-9CFF-FA958FE2B259}']
  { getters & setters } 

    function get_FirstNode: DNXNode;
    function get_LastNode: DNXNode;
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure Add(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Add(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddFirst(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddFirst(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function CreateWriter: DDNC.System.Private.Xml.DNXmlWriter;
    function DescendantNodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function Descendants: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Descendants(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Element(name: DNXName): DNXElement;
    function Elements: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Elements(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Nodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    procedure RemoveNodes;
    procedure ReplaceNodes(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceNodes(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FirstNode: DNXNode read get_FirstNode;
    property LastNode: DNXNode read get_LastNode;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXContainer = class(TDNGenericImport<DNXContainerClass, DNXContainer>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXDocumentClass = interface(DNXContainerClass)
  ['{C7BF25F8-F3CF-5844-B1C3-35DC4E85F46F}']
  { constructors } 

    {class} function init: DNXDocument; overload;
    {class} function init(content: TArray<DDNC.System.Private.CoreLib.DNObject>): DNXDocument; overload;
    {class} function init(declaration: DNXDeclaration; content: TArray<DDNC.System.Private.CoreLib.DNObject>): DNXDocument; overload;
    {class} function init(other: DNXDocument): DNXDocument; overload;

  { static methods } 

    {class} function Load(uri: string): DNXDocument; overload;
    {class} function Load(uri: string; options: DNLoadOptions): DNXDocument; overload;
    {class} function Load(stream: DDNC.System.Private.CoreLib.DNStream): DNXDocument; overload;
    {class} function Load(stream: DDNC.System.Private.CoreLib.DNStream; options: DNLoadOptions): DNXDocument; overload;
    {class} function LoadAsync(stream: DDNC.System.Private.CoreLib.DNStream; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXDocument>; overload;
    {class} function Load(textReader: DDNC.System.Private.CoreLib.DNTextReader): DNXDocument; overload;
    {class} function Load(textReader: DDNC.System.Private.CoreLib.DNTextReader; options: DNLoadOptions): DNXDocument; overload;
    {class} function LoadAsync(textReader: DDNC.System.Private.CoreLib.DNTextReader; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXDocument>; overload;
    {class} function Load(reader: DDNC.System.Private.Xml.DNXmlReader): DNXDocument; overload;
    {class} function Load(reader: DDNC.System.Private.Xml.DNXmlReader; options: DNLoadOptions): DNXDocument; overload;
    {class} function LoadAsync(reader: DDNC.System.Private.Xml.DNXmlReader; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXDocument>; overload;
    {class} function Parse(text: string): DNXDocument; overload;
    {class} function Parse(text: string; options: DNLoadOptions): DNXDocument; overload;

  end;

  [DNTypeName('System.Xml.Linq.XDocument')]
  DNXDocument = interface(DNXContainer)
  ['{F4F2EC8B-587C-3E09-A3C0-7953EF23AECF}']
  { getters & setters } 

    function get_Declaration: DNXDeclaration;
    procedure set_Declaration(value: DNXDeclaration);
    function get_DocumentType: DNXDocumentType;
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Root: DNXElement;
    function get_FirstNode: DNXNode;
    function get_LastNode: DNXNode;
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream; options: DNSaveOptions); overload;
    function SaveAsync(stream: DDNC.System.Private.CoreLib.DNStream; options: DNSaveOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; options: DNSaveOptions); overload;
    procedure Save(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    function SaveAsync(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; options: DNSaveOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Save(fileName: string); overload;
    function SaveAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Save(fileName: string; options: DNSaveOptions); overload;
    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure Add(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Add(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddFirst(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddFirst(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function CreateWriter: DDNC.System.Private.Xml.DNXmlWriter;
    function DescendantNodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function Descendants: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Descendants(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Element(name: DNXName): DNXElement;
    function Elements: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Elements(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Nodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    procedure RemoveNodes;
    procedure ReplaceNodes(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceNodes(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Declaration: DNXDeclaration read get_Declaration write set_Declaration;
    property DocumentType: DNXDocumentType read get_DocumentType;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Root: DNXElement read get_Root;
    property FirstNode: DNXNode read get_FirstNode;
    property LastNode: DNXNode read get_LastNode;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXDocument = class(TDNGenericImport<DNXDocumentClass, DNXDocument>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXElementClass = interface(DNXContainerClass)
  ['{C2D10F99-BB56-598E-BA74-BFD3BB7CFC67}']
  { static getter & setter } 

    {class} function get_EmptySequence: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>;

  { constructors } 

    {class} function init(name: DNXName): DNXElement; overload;
    {class} function init(name: DNXName; content: DDNC.System.Private.CoreLib.DNObject): DNXElement; overload;
    {class} function init(name: DNXName; content: TArray<DDNC.System.Private.CoreLib.DNObject>): DNXElement; overload;
    {class} function init(other: DNXElement): DNXElement; overload;
    {class} function init(other: DNXStreamingElement): DNXElement; overload;

  { static methods } 

    {class} function Load(uri: string): DNXElement; overload;
    {class} function Load(uri: string; options: DNLoadOptions): DNXElement; overload;
    {class} function Load(stream: DDNC.System.Private.CoreLib.DNStream): DNXElement; overload;
    {class} function Load(stream: DDNC.System.Private.CoreLib.DNStream; options: DNLoadOptions): DNXElement; overload;
    {class} function LoadAsync(stream: DDNC.System.Private.CoreLib.DNStream; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXElement>; overload;
    {class} function Load(textReader: DDNC.System.Private.CoreLib.DNTextReader): DNXElement; overload;
    {class} function Load(textReader: DDNC.System.Private.CoreLib.DNTextReader; options: DNLoadOptions): DNXElement; overload;
    {class} function LoadAsync(textReader: DDNC.System.Private.CoreLib.DNTextReader; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXElement>; overload;
    {class} function Load(reader: DDNC.System.Private.Xml.DNXmlReader): DNXElement; overload;
    {class} function Load(reader: DDNC.System.Private.Xml.DNXmlReader; options: DNLoadOptions): DNXElement; overload;
    {class} function LoadAsync(reader: DDNC.System.Private.Xml.DNXmlReader; options: DNLoadOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<DNXElement>; overload;
    {class} function Parse(text: string): DNXElement; overload;
    {class} function Parse(text: string; options: DNLoadOptions): DNXElement; overload;

  { static propertys } 

    {class} property EmptySequence: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement> read get_EmptySequence;
  end;

  [DNTypeName('System.Xml.Linq.XElement')]
  DNXElement = interface(DNXContainer)
  ['{1C03E9A3-B35A-3867-8D06-56D69D946C6F}']
  { getters & setters } 

    function get_FirstAttribute: DNXAttribute;
    function get_HasAttributes: Boolean;
    function get_HasElements: Boolean;
    function get_IsEmpty: Boolean;
    function get_LastAttribute: DNXAttribute;
    function get_Name: DNXName;
    procedure set_Name(value: DNXName);
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_FirstNode: DNXNode;
    function get_LastNode: DNXNode;
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure Save(fileName: string); overload;
    procedure Save(fileName: string; options: DNSaveOptions); overload;
    function AncestorsAndSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function AncestorsAndSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Attribute(name: DNXName): DNXAttribute;
    function Attributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>; overload;
    function Attributes(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXAttribute>; overload;
    function DescendantNodesAndSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function DescendantsAndSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function DescendantsAndSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function GetDefaultNamespace: DNXNamespace;
    function GetNamespaceOfPrefix(prefix: string): DNXNamespace;
    function GetPrefixOfNamespace(ns: DNXNamespace): string;
    procedure RemoveAll;
    procedure RemoveAttributes;
    procedure ReplaceAll(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceAll(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure ReplaceAttributes(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceAttributes(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream; options: DNSaveOptions); overload;
    function SaveAsync(stream: DDNC.System.Private.CoreLib.DNStream; options: DNSaveOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; options: DNSaveOptions); overload;
    function SaveAsync(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; options: DNSaveOptions; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Save(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    function SaveAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure SetAttributeValue(name: DNXName; value: DDNC.System.Private.CoreLib.DNObject);
    procedure SetElementValue(name: DNXName; value: DDNC.System.Private.CoreLib.DNObject);
    procedure SetValue(value: DDNC.System.Private.CoreLib.DNObject);
    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure Add(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Add(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddFirst(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddFirst(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function CreateWriter: DDNC.System.Private.Xml.DNXmlWriter;
    function DescendantNodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function Descendants: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Descendants(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Element(name: DNXName): DNXElement;
    function Elements: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Elements(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Nodes: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    procedure RemoveNodes;
    procedure ReplaceNodes(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceNodes(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FirstAttribute: DNXAttribute read get_FirstAttribute;
    property HasAttributes: Boolean read get_HasAttributes;
    property HasElements: Boolean read get_HasElements;
    property IsEmpty: Boolean read get_IsEmpty;
    property LastAttribute: DNXAttribute read get_LastAttribute;
    property Name: DNXName read get_Name write set_Name;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property FirstNode: DNXNode read get_FirstNode;
    property LastNode: DNXNode read get_LastNode;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXElement = class(TDNGenericImport<DNXElementClass, DNXElement>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXDocumentTypeClass = interface(DNXNodeClass)
  ['{CAB6C451-4FF3-5128-B2B6-D6B73990DAA0}']
  { constructors } 

    {class} function init(name: string; publicId: string; systemId: string; internalSubset: string): DNXDocumentType; overload;
    {class} function init(other: DNXDocumentType): DNXDocumentType; overload;

  end;

  [DNTypeName('System.Xml.Linq.XDocumentType')]
  DNXDocumentType = interface(DNXNode)
  ['{990CBDAB-BAEF-35BF-B5A5-4D66BFDF9961}']
  { getters & setters } 

    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    property Name: string read get_Name write set_Name;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property PublicId: string read get_PublicId write set_PublicId;
    property SystemId: string read get_SystemId write set_SystemId;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXDocumentType = class(TDNGenericImport<DNXDocumentTypeClass, DNXDocumentType>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXProcessingInstructionClass = interface(DNXNodeClass)
  ['{DFDEC022-6C6F-5511-A714-3DF0E22D756B}']
  { constructors } 

    {class} function init(target: string; data: string): DNXProcessingInstruction; overload;
    {class} function init(other: DNXProcessingInstruction): DNXProcessingInstruction; overload;

  end;

  [DNTypeName('System.Xml.Linq.XProcessingInstruction')]
  DNXProcessingInstruction = interface(DNXNode)
  ['{774D705F-44CE-3D09-BBE4-05D3EE5AD5DF}']
  { getters & setters } 

    function get_Data: string;
    procedure set_Data(value: string);
    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Target: string;
    procedure set_Target(value: string);
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Data: string read get_Data write set_Data;
    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Target: string read get_Target write set_Target;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXProcessingInstruction = class(TDNGenericImport<DNXProcessingInstructionClass, DNXProcessingInstruction>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXTextClass = interface(DNXNodeClass)
  ['{B24FAB9D-A66A-585D-84E8-226F91CBA1C1}']
  { constructors } 

    {class} function init(value: string): DNXText; overload;
    {class} function init(other: DNXText): DNXText; overload;

  end;

  [DNTypeName('System.Xml.Linq.XText')]
  DNXText = interface(DNXNode)
  ['{D7AC91F0-D76E-392E-A790-3F69B015230A}']
  { getters & setters } 

    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXText = class(TDNGenericImport<DNXTextClass, DNXText>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXCDataClass = interface(DNXTextClass)
  ['{9CD93547-3A17-5BD0-A55C-6EB3432ACDEE}']
  { constructors } 

    {class} function init(value: string): DNXCData; overload;
    {class} function init(other: DNXCData): DNXCData; overload;

  end;

  [DNTypeName('System.Xml.Linq.XCData')]
  DNXCData = interface(DNXText)
  ['{F7507B14-BE04-3DB9-8D49-963FEA58B2BC}']
  { getters & setters } 

    function get_NodeType: DDNC.System.Private.Xml.DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NextNode: DNXNode;
    function get_PreviousNode: DNXNode;
    function get_BaseUri: string;
    function get_Document: DNXDocument;
    function get_Parent: DNXElement;

  { events } 

    procedure add_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changed(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure add_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);
    procedure remove_Changing(value: DDNC.System.Private.CoreLib.DNEventHandler<DNXObjectChangeEventArgs>);

  { methods } 

    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function WriteToAsync(writer: DDNC.System.Private.Xml.DNXmlWriter; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask;
    procedure AddAfterSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddAfterSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure AddBeforeSelf(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddBeforeSelf(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function Ancestors: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function Ancestors(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function CreateReader: DDNC.System.Private.Xml.DNXmlReader; overload;
    function CreateReader(readerOptions: DNReaderOptions): DDNC.System.Private.Xml.DNXmlReader; overload;
    function NodesAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function NodesBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXNode>;
    function ElementsAfterSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsAfterSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf: DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function ElementsBeforeSelf(name: DNXName): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    function IsAfter(node: DNXNode): Boolean;
    function IsBefore(node: DNXNode): Boolean;
    procedure Remove;
    procedure ReplaceWith(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure ReplaceWith(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure AddAnnotation(annotation: DDNC.System.Private.CoreLib.DNObject);
    function Annotation(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function Annotations(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNObject>; overload;
    procedure RemoveAnnotations(&type: DDNC.System.Private.CoreLib.DNType); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DDNC.System.Private.Xml.DNXmlNodeType read get_NodeType;
    property Value: string read get_Value write set_Value;
    property NextNode: DNXNode read get_NextNode;
    property PreviousNode: DNXNode read get_PreviousNode;
    property BaseUri: string read get_BaseUri;
    property Document: DNXDocument read get_Document;
    property Parent: DNXElement read get_Parent;
  end;

  TDNXCData = class(TDNGenericImport<DNXCDataClass, DNXCData>) end;

  //-------------namespace: System.Xml.Linq----------------
  DNXStreamingElementClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2F97F6EF-62B6-5FFA-9886-B64516FC19EC}']
  { constructors } 

    {class} function init(name: DNXName): DNXStreamingElement; overload;
    {class} function init(name: DNXName; content: DDNC.System.Private.CoreLib.DNObject): DNXStreamingElement; overload;
    {class} function init(name: DNXName; content: TArray<DDNC.System.Private.CoreLib.DNObject>): DNXStreamingElement; overload;

  end;

  [DNTypeName('System.Xml.Linq.XStreamingElement')]
  DNXStreamingElement = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DBBBA08F-FC5F-3AEA-9A23-0AE8F4EF1D0C}']
  { getters & setters } 

    function get_Name: DNXName;
    procedure set_Name(value: DNXName);

  { methods } 

    procedure Add(content: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Add(content: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream; options: DNSaveOptions); overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    procedure Save(textWriter: DDNC.System.Private.CoreLib.DNTextWriter; options: DNSaveOptions); overload;
    procedure Save(writer: DDNC.System.Private.Xml.DNXmlWriter); overload;
    procedure Save(fileName: string); overload;
    procedure Save(fileName: string; options: DNSaveOptions); overload;
    function ToString: string; overload;
    function ToString(options: DNSaveOptions): string; overload;
    procedure WriteTo(writer: DDNC.System.Private.Xml.DNXmlWriter);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: DNXName read get_Name write set_Name;
  end;

  TDNXStreamingElement = class(TDNGenericImport<DNXStreamingElementClass, DNXStreamingElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNSchema_ExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D266475A-6491-5A18-84E7-DF4FEE322949}']
  { static methods } 

    {class} function GetSchemaInfo(source: DNXElement): DDNC.System.Private.Xml.DNIXmlSchemaInfo; overload;
    {class} function GetSchemaInfo(source: DNXAttribute): DDNC.System.Private.Xml.DNIXmlSchemaInfo; overload;
    {class} procedure Validate(source: DNXDocument; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler); overload;
    {class} procedure Validate(source: DNXDocument; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler; addSchemaInfo: Boolean); overload;
    {class} procedure Validate(source: DNXElement; partialValidationType: DDNC.System.Private.Xml.DNXmlSchemaObject; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler); overload;
    {class} procedure Validate(source: DNXElement; partialValidationType: DDNC.System.Private.Xml.DNXmlSchemaObject; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler; addSchemaInfo: Boolean); overload;
    {class} procedure Validate(source: DNXAttribute; partialValidationType: DDNC.System.Private.Xml.DNXmlSchemaObject; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler); overload;
    {class} procedure Validate(source: DNXAttribute; partialValidationType: DDNC.System.Private.Xml.DNXmlSchemaObject; schemas: DDNC.System.Private.Xml.DNXmlSchemaSet; validationEventHandler: DDNC.System.Private.Xml.DNValidationEventHandler; addSchemaInfo: Boolean); overload;

  end;

  [DNTypeName('System.Xml.Schema.Extensions')]
  DNSchema_Extensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{455383DE-2AA4-3427-B385-729AFCF47638}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSchema_Extensions = class(TDNGenericImport<DNSchema_ExtensionsClass, DNSchema_Extensions>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPath_ExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{60B38FAC-A7FE-5779-9333-43598AD01CD9}']
  { static methods } 

    {class} function CreateNavigator(node: DNXNode): DDNC.System.Private.Xml.DNXPathNavigator; overload;
    {class} function CreateNavigator(node: DNXNode; nameTable: DDNC.System.Private.Xml.DNXmlNameTable): DDNC.System.Private.Xml.DNXPathNavigator; overload;
    {class} function XPathEvaluate(node: DNXNode; expression: string): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function XPathEvaluate(node: DNXNode; expression: string; resolver: DDNC.System.Private.Xml.DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function XPathSelectElement(node: DNXNode; expression: string): DNXElement; overload;
    {class} function XPathSelectElement(node: DNXNode; expression: string; resolver: DDNC.System.Private.Xml.DNIXmlNamespaceResolver): DNXElement; overload;
    {class} function XPathSelectElements(node: DNXNode; expression: string): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;
    {class} function XPathSelectElements(node: DNXNode; expression: string; resolver: DDNC.System.Private.Xml.DNIXmlNamespaceResolver): DDNC.System.Private.CoreLib.DNIEnumerable<DNXElement>; overload;

  end;

  [DNTypeName('System.Xml.XPath.Extensions')]
  DNXPath_Extensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{97F19F34-B6B9-3C8B-A54D-A68C380FCA11}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNXPath_Extensions = class(TDNGenericImport<DNXPath_ExtensionsClass, DNXPath_Extensions>) end;


implementation


initialization
  LoadAssemblyModule('System.Private.Xml.Linq.dll', True, 'System.Private.Xml.Linq, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51');

finalization

end.
