//----------------------------------------------------------------------------
//  UIAutomationTypes.dll: UIAutomationTypes, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.UIAutomationTypes
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.UIAutomationTypes;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib;

type

{ enums }

  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the state of the content being loaded into a content element.</summary>
  [DNTypeName('System.Windows.Automation.AsyncContentLoadedState')]
  DNAsyncContentLoadedState = type Integer;
  DNAsyncContentLoadedStateHelper = record helper for DNAsyncContentLoadedState
  public const
    ///<summary>Specifies that asynchronous loading of the content into the UI Automation element is beginning.</summary>
    Beginning = 0;
    ///<summary>Specifies that asynchronous loading of the content into the UI Automation element is in progress. UI Automation providers should specify the percent complete so that client applications will know how much more content remains.</summary>
    Progress = 1;
    ///<summary>Specifies that asynchronous loading of the content into the UI Automation element is complete.</summary>
    Completed = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the dock position of an object, represented by a <see cref="T:System.Windows.Automation.DockPattern" />
  ///  , within a docking container.</summary>
  [DNTypeName('System.Windows.Automation.DockPosition')]
  DNDockPosition = type Integer;
  DNDockPositionHelper = record helper for DNDockPosition
  public const
    ///<summary>Indicates that the UI Automation element is docked along the top edge of the docking container. </summary>
    Top = 0;
    ///<summary>Indicates that the UI Automation element is docked along the left edge of the docking container. </summary>
    Left = 1;
    ///<summary>Indicates that the UI Automation element is docked along the bottom edge of the docking container. </summary>
    Bottom = 2;
    ///<summary>Indicates that the UI Automation element is docked along the right edge of the docking container. </summary>
    Right = 3;
    ///<summary>Indicates that the UI Automation element is docked along all edges of the docking container and fills all available space within the container. </summary>
    Fill = 4;
    ///<summary>Indicates that the UI Automation element is not docked to any edge of the docking container. </summary>
    None = 5;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the <see cref="T:System.Windows.Automation.ExpandCollapseState" />
  ///  of a UI Automation element.</summary>
  [DNTypeName('System.Windows.Automation.ExpandCollapseState')]
  DNExpandCollapseState = type Integer;
  DNExpandCollapseStateHelper = record helper for DNExpandCollapseState
  public const
    ///<summary>No child nodes, controls, or content of the UI Automation element are displayed. </summary>
    Collapsed = 0;
    ///<summary>All child nodes, controls or content of the UI Automation element are displayed. </summary>
    Expanded = 1;
    ///<summary>Some, but not all, child nodes, controls, or content of the UI Automation element are displayed. </summary>
    PartiallyExpanded = 2;
    ///<summary>The UI Automation element has no child nodes, controls, or content to display. </summary>
    LeafNode = 3;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the orientation of a control.</summary>
  [DNTypeName('System.Windows.Automation.OrientationType')]
  DNOrientationType = type Integer;
  DNOrientationTypeHelper = record helper for DNOrientationType
  public const
    ///<summary>Specifies that the control has no orientation.</summary>
    None = 0;
    ///<summary>Specifies that the control has horizontal orientation.</summary>
    Horizontal = 1;
    ///<summary>Specifies that the control has vertical orientation.</summary>
    Vertical = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify whether data in a table should be read primarily by row or by column.</summary>
  [DNTypeName('System.Windows.Automation.RowOrColumnMajor')]
  DNRowOrColumnMajor = type Integer;
  DNRowOrColumnMajorHelper = record helper for DNRowOrColumnMajor
  public const
    ///<summary>Specifies that data in the table should be read row by row. </summary>
    RowMajor = 0;
    ///<summary>Specifies that data in the table should be read column by column </summary>
    ColumnMajor = 1;
    ///<summary>Specifies that the best way to present the data is indeterminate.</summary>
    Indeterminate = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values used by <see cref="T:System.Windows.Automation.ScrollPattern" />
  ///  to indicate the direction and distance to scroll.</summary>
  [DNTypeName('System.Windows.Automation.ScrollAmount')]
  DNScrollAmount = type Integer;
  DNScrollAmountHelper = record helper for DNScrollAmount
  public const
    ///<summary>Specifies that scrolling is done in large decrements, equivalent to PageUp or clicking on a blank part of a scrollbar. If PageUp is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible window. </summary>
    LargeDecrement = 0;
    ///<summary>Specifies that scrolling is done in small decrements, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    SmallDecrement = 1;
    ///<summary>Specifies that scrolling should not be performed.</summary>
    NoAmount = 2;
    ///<summary>Specifies that scrolling is done in large increments, equivalent to a PageDown or clicking on the track of a scrollbar component. If a PageDown is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible region. </summary>
    LargeIncrement = 3;
    ///<summary>Specifies that scrolling is done in small increments, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    SmallIncrement = 4;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify changes in the structure of the Microsoft UI Automation element tree.</summary>
  [DNTypeName('System.Windows.Automation.StructureChangeType')]
  DNStructureChangeType = type Integer;
  DNStructureChangeTypeHelper = record helper for DNStructureChangeType
  public const
    ///<summary>A child element was added to the UI Automation element tree.</summary>
    ChildAdded = 0;
    ///<summary>A child element was removed from the UI Automation element tree.</summary>
    ChildRemoved = 1;
    ///<summary>Child elements were invalidated in the UI Automation element tree. This might mean that one or more children were added or removed, depending on the UI Automation providers implementation.</summary>
    ChildrenInvalidated = 2;
    ///<summary>Child elements were added to the UI Automation element tree.</summary>
    ChildrenBulkAdded = 3;
    ///<summary>Child elements were removed from the UI Automation element tree.</summary>
    ChildrenBulkRemoved = 4;
    ///<summary>The order of the child elements in the UI Automation element tree changed.</summary>
    ChildrenReordered = 5;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify whether a text provider supports selection and, if so, whether it supports a single, continuous selection or multiple, disjoint selections.</summary>
  [DNTypeName('System.Windows.Automation.SupportedTextSelection')]
  DNSupportedTextSelection = type Integer;
  DNSupportedTextSelectionHelper = record helper for DNSupportedTextSelection
  public const
    ///<summary>Does not support text selections.</summary>
    None = 0;
    ///<summary>Supports a single, continuous text selection.</summary>
    Single = 1;
    ///<summary>Supports multiple, disjoint text selections.</summary>
    Multiple = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the type of synchronized input. </summary>
  [DNTypeName('System.Windows.Automation.SynchronizedInputType')]
  DNSynchronizedInputType = type Integer;
  DNSynchronizedInputTypeHelper = record helper for DNSynchronizedInputType
  public const
    ///<summary>A key has been released.</summary>
    KeyUp = 1;
    ///<summary>A key has been pressed.</summary>
    KeyDown = 2;
    ///<summary>The left mouse button has been released.</summary>
    MouseLeftButtonUp = 4;
    ///<summary>The left mouse button has been pressed.</summary>
    MouseLeftButtonDown = 8;
    ///<summary>The right mouse button has been released.</summary>
    MouseRightButtonUp = 16;
    ///<summary>The right mouse button has been pressed.</summary>
    MouseRightButtonDown = 32;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.Text.AnimationStyle')]
  DNAnimationStyle = type Integer;
  DNAnimationStyleHelper = record helper for DNAnimationStyle
  public const
    ///<summary>Specifies that there is no animation style.</summary>
    None = 0;
    ///<summary>Specifies that the bounding rectangle displays a border of alternating icons of different colors.</summary>
    LasVegasLights = 1;
    ///<summary>Specifies that the font and background alternate between assigned colors and contrasting colors.</summary>
    BlinkingBackground = 2;
    ///<summary>Specifies that the background displays flashing, multi-colored icons.</summary>
    SparkleText = 3;
    ///<summary>Specifies that the bounding rectangle displays moving black dashes.</summary>
    MarchingBlackAnts = 4;
    ///<summary>Specifies that the bounding rectangle displays moving red dashes.</summary>
    MarchingRedAnts = 5;
    ///<summary>Specifies that the font alternates between solid and blurred.</summary>
    Shimmer = 6;
    ///<summary>Specifies that the animation style is one not explicitly itemized in the <see cref="T:System.Windows.Automation.Text.AnimationStyle" />
    ///  enumeration.</summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Values for <see cref="F:System.Windows.Automation.TextPattern.BulletStyleAttribute" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.Text.BulletStyle')]
  DNBulletStyle = type Integer;
  DNBulletStyleHelper = record helper for DNBulletStyle
  public const
    ///<summary>No bullet style. </summary>
    None = 0;
    ///<summary>Hollow round bullets. </summary>
    HollowRoundBullet = 1;
    ///<summary>Solid round bullets.</summary>
    FilledRoundBullet = 2;
    ///<summary>Hollow square bullets.</summary>
    HollowSquareBullet = 3;
    ///<summary>Solid square bullets. </summary>
    FilledSquareBullet = 4;
    ///<summary>Dash bullets. </summary>
    DashBullet = 5;
    ///<summary>Another bullet style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.BulletStyle" />
    ///  enumeration. </summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.CapStyleAttribute" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.Text.CapStyle')]
  DNCapStyle = type Integer;
  DNCapStyleHelper = record helper for DNCapStyle
  public const
    ///<summary>Indicates that there is no capitalization style; uppercase and lowercase letters render normally.</summary>
    None = 0;
    ///<summary>Indicates that the capitalization style is small caps; lowercase letters are replaced with uppercase letters of the same approximate height as the font's x-height.</summary>
    SmallCap = 1;
    ///<summary>Indicates that the capitalization style is all caps; all lowercase letters are replaced with uppercase letters.</summary>
    AllCap = 2;
    ///<summary>Indicates that the capitalization style is all petite caps; uppercase and lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    AllPetiteCaps = 3;
    ///<summary>Indicates that the capitalization style is petite caps; lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    PetiteCaps = 4;
    ///<summary>Indicates that the capitalization style is unicase; uppercase and lowercase letters are rendered in a way determined by the type designer. A unicase alphabet is one that does not specify case for its letters.</summary>
    Unicase = 5;
    ///<summary>Indicates that the capitalization style is title case; uppercase and lowercase letters are rendered with letters specifically designed for titles.</summary>
    Titling = 6;
    ///<summary>Indicates that the capitalization style is a style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.CapStyle" />
    ///  enumeration. </summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Values for <see cref="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.Text.FlowDirections')]
  DNFlowDirections = type Integer;
  DNFlowDirectionsHelper = record helper for DNFlowDirections
  public const
    ///<summary>Top to bottom, left to right, horizontal.</summary>
    Default_ = 0;
    ///<summary>Right to left. </summary>
    RightToLeft = 1;
    ///<summary>Bottom to top. </summary>
    BottomToTop = 2;
    ///<summary>Vertical. </summary>
    Vertical = 4;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Values for <see cref="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute" />
  ///</summary>
  [DNTypeName('System.Windows.Automation.Text.HorizontalTextAlignment')]
  DNHorizontalTextAlignment = type Integer;
  DNHorizontalTextAlignmentHelper = record helper for DNHorizontalTextAlignment
  public const
    ///<summary>Aligned left.</summary>
    Left = 0;
    ///<summary>Centered.</summary>
    Centered = 1;
    ///<summary>Aligned right. </summary>
    Right = 2;
    ///<summary>Justified. </summary>
    Justified = 3;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Values for <see cref="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.Text.OutlineStyles')]
  DNOutlineStyles = type Integer;
  DNOutlineStylesHelper = record helper for DNOutlineStyles
  public const
    ///<summary>No outline style. </summary>
    None = 0;
    ///<summary>Outlined. </summary>
    Outline = 1;
    ///<summary>Shadowed.</summary>
    Shadow = 2;
    ///<summary>Engraved.</summary>
    Engraved = 4;
    ///<summary>Embossed.</summary>
    Embossed = 8;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Values for <see cref="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.Text.TextDecorationLineStyle')]
  DNTextDecorationLineStyle = type Integer;
  DNTextDecorationLineStyleHelper = record helper for DNTextDecorationLineStyle
  public const
    ///<summary>No text decoration line style.</summary>
    None = 0;
    ///<summary>Single line.</summary>
    Single = 1;
    ///<summary>Words only. </summary>
    WordsOnly = 2;
    ///<summary>Double line.</summary>
    Double = 3;
    ///<summary>Dotted line. </summary>
    Dot = 4;
    ///<summary>Dashed line. </summary>
    Dash = 5;
    ///<summary>Alternating dash-dot line. </summary>
    DashDot = 6;
    ///<summary>Alternating dash-dot-dot line. </summary>
    DashDotDot = 7;
    ///<summary>Wavy line. </summary>
    Wavy = 8;
    ///<summary>Thick single line. </summary>
    ThickSingle = 9;
    ///<summary>Double wavy line. </summary>
    DoubleWavy = 11;
    ///<summary>Thick wavy line.</summary>
    ThickWavy = 12;
    ///<summary>Long-dashed line.</summary>
    LongDash = 13;
    ///<summary>Thick dashed line. </summary>
    ThickDash = 14;
    ///<summary>Thick alternating dash-dot line. </summary>
    ThickDashDot = 15;
    ///<summary>Thick alternating dash-dot-dot line.</summary>
    ThickDashDotDot = 16;
    ///<summary>Thick dotted line. </summary>
    ThickDot = 17;
    ///<summary>Thick long-dash line. </summary>
    ThickLongDash = 18;
    ///<summary>Another text decoration line style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  enumeration. </summary>
    Other = -1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Allows the endpoints to be identified when calling methods of <see cref="T:System.Windows.Automation.Text.TextPatternRange" />
  ///  . Each <see cref="T:System.Windows.Automation.Text.TextPatternRange" />
  ///  has two endpoints (<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" />
  ///  and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />
  ///  ). </summary>
  [DNTypeName('System.Windows.Automation.Text.TextPatternRangeEndpoint')]
  DNTextPatternRangeEndpoint = type Integer;
  DNTextPatternRangeEndpointHelper = record helper for DNTextPatternRangeEndpoint
  public const
    ///<summary>Identifies the starting point of the range. </summary>
    Start = 0;
    ///<summary> Identifies the ending point of the range. </summary>
    End_ = 1;
  end;


  //-------------namespace: System.Windows.Automation.Text----------------
  ///<summary>Represents pre-defined units of text for the purposes of navigation within a document. </summary>
  [DNTypeName('System.Windows.Automation.Text.TextUnit')]
  DNTextUnit = type Integer;
  DNTextUnitHelper = record helper for DNTextUnit
  public const
    ///<summary>Specifies that the text unit is one character in length.</summary>
    Character = 0;
    ///<summary>Specifies that the text unit is the length of a single, common format specification, such as bold, italic, or similar.</summary>
    Format = 1;
    ///<summary>Specifies that the text unit is one word in length.</summary>
    Word = 2;
    ///<summary>Specifies that the text unit is one line in length.</summary>
    Line = 3;
    ///<summary>Specifies that the text unit is one paragraph in length.</summary>
    Paragraph = 4;
    ///<summary>Specifies that the text unit is one document-specific page in length.</summary>
    Page = 5;
    ///<summary>Specifies that the text unit is an entire document in length.</summary>
    Document = 6;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" />
  ///  of a UI Automation element.</summary>
  [DNTypeName('System.Windows.Automation.ToggleState')]
  DNToggleState = type Integer;
  DNToggleStateHelper = record helper for DNToggleState
  public const
    ///<summary>The UI Automation element is not selected, checked, marked or otherwise activated.</summary>
    Off = 0;
    ///<summary>The UI Automation element is selected, checked, marked or otherwise activated.</summary>
    On_ = 1;
    ///<summary>The UI Automation element is in an indeterminate state.</summary>
    Indeterminate = 2;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the scope of elements within the UI Automation tree.</summary>
  [DNTypeName('System.Windows.Automation.TreeScope')]
  DNTreeScope = type Integer;
  DNTreeScopeHelper = record helper for DNTreeScope
  public const
    ///<summary>Specifies that the search include the element itself. </summary>
    Element = 1;
    ///<summary>Specifies that the search include the element's immediate children. </summary>
    Children = 2;
    ///<summary>Specifies that the search include the element's descendants, including children.</summary>
    Descendants = 4;
    ///<summary>Specifies that the search include the root of the search and all descendants.</summary>
    Subtree = 7;
    ///<summary>Specifies that the search include the element's parent. Not supported.</summary>
    Parent = 8;
    ///<summary>Specifies that the search include the element's ancestors, including the parent. Not supported.</summary>
    Ancestors = 16;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the current state of the window for purposes of user or programmatic interaction.</summary>
  [DNTypeName('System.Windows.Automation.WindowInteractionState')]
  DNWindowInteractionState = type Integer;
  DNWindowInteractionStateHelper = record helper for DNWindowInteractionState
  public const
    ///<summary>Indicates that the window is running. This does not guarantee that the window is responding or ready for user interaction.</summary>
    Running = 0;
    ///<summary>Indicates that the window is closing. </summary>
    Closing = 1;
    ///<summary>Indicates that the window is ready for user interaction.</summary>
    ReadyForUserInteraction = 2;
    ///<summary>Indicates that the window is blocked by a modal window. </summary>
    BlockedByModalWindow = 3;
    ///<summary>Indicates that the window is not responding. </summary>
    NotResponding = 4;
  end;


  //-------------namespace: System.Windows.Automation----------------
  ///<summary>Contains values that specify the visual state of a window.</summary>
  [DNTypeName('System.Windows.Automation.WindowVisualState')]
  DNWindowVisualState = type Integer;
  DNWindowVisualStateHelper = record helper for DNWindowVisualState
  public const
    ///<summary>Specifies that the window is normal (restored). </summary>
    Normal = 0;
    ///<summary>Specifies that the window is maximized. </summary>
    Maximized = 1;
    ///<summary>Specifies that the window is minimized.</summary>
    Minimized = 2;
  end;




type


{ declares }

  DNAutomationEventArgs = interface; // type: System.Windows.Automation.AutomationEventArgs, namespace: System.Windows.Automation
  DNAsyncContentLoadedEventArgs = interface; // type: System.Windows.Automation.AsyncContentLoadedEventArgs, namespace: System.Windows.Automation
  DNAutomationPropertyChangedEventArgs = interface; // type: System.Windows.Automation.AutomationPropertyChangedEventArgs, namespace: System.Windows.Automation
  DNStructureChangedEventArgs = interface; // type: System.Windows.Automation.StructureChangedEventArgs, namespace: System.Windows.Automation
  DNWindowClosedEventArgs = interface; // type: System.Windows.Automation.WindowClosedEventArgs, namespace: System.Windows.Automation
  DNElementNotEnabledException = interface; // type: System.Windows.Automation.ElementNotEnabledException, namespace: System.Windows.Automation
  DNElementNotAvailableException = interface; // type: System.Windows.Automation.ElementNotAvailableException, namespace: System.Windows.Automation
  DNNoClickablePointException = interface; // type: System.Windows.Automation.NoClickablePointException, namespace: System.Windows.Automation
  DNProxyAssemblyNotLoadedException = interface; // type: System.Windows.Automation.ProxyAssemblyNotLoadedException, namespace: System.Windows.Automation
  DNAutomationElementIdentifiers = interface; // type: System.Windows.Automation.AutomationElementIdentifiers, namespace: System.Windows.Automation
  DNAutomationIdentifier = interface; // type: System.Windows.Automation.AutomationIdentifier, namespace: System.Windows.Automation
  DNAutomationEvent = interface; // type: System.Windows.Automation.AutomationEvent, namespace: System.Windows.Automation
  DNAutomationPattern = interface; // type: System.Windows.Automation.AutomationPattern, namespace: System.Windows.Automation
  DNAutomationProperty = interface; // type: System.Windows.Automation.AutomationProperty, namespace: System.Windows.Automation
  DNAutomationTextAttribute = interface; // type: System.Windows.Automation.AutomationTextAttribute, namespace: System.Windows.Automation
  DNControlType = interface; // type: System.Windows.Automation.ControlType, namespace: System.Windows.Automation
  DNDockPatternIdentifiers = interface; // type: System.Windows.Automation.DockPatternIdentifiers, namespace: System.Windows.Automation
  DNExpandCollapsePatternIdentifiers = interface; // type: System.Windows.Automation.ExpandCollapsePatternIdentifiers, namespace: System.Windows.Automation
  DNGridItemPatternIdentifiers = interface; // type: System.Windows.Automation.GridItemPatternIdentifiers, namespace: System.Windows.Automation
  DNGridPatternIdentifiers = interface; // type: System.Windows.Automation.GridPatternIdentifiers, namespace: System.Windows.Automation
  DNInvokePatternIdentifiers = interface; // type: System.Windows.Automation.InvokePatternIdentifiers, namespace: System.Windows.Automation
  DNItemContainerPatternIdentifiers = interface; // type: System.Windows.Automation.ItemContainerPatternIdentifiers, namespace: System.Windows.Automation
  DNMultipleViewPatternIdentifiers = interface; // type: System.Windows.Automation.MultipleViewPatternIdentifiers, namespace: System.Windows.Automation
  DNRangeValuePatternIdentifiers = interface; // type: System.Windows.Automation.RangeValuePatternIdentifiers, namespace: System.Windows.Automation
  DNScrollItemPatternIdentifiers = interface; // type: System.Windows.Automation.ScrollItemPatternIdentifiers, namespace: System.Windows.Automation
  DNScrollPatternIdentifiers = interface; // type: System.Windows.Automation.ScrollPatternIdentifiers, namespace: System.Windows.Automation
  DNSelectionItemPatternIdentifiers = interface; // type: System.Windows.Automation.SelectionItemPatternIdentifiers, namespace: System.Windows.Automation
  DNSelectionPatternIdentifiers = interface; // type: System.Windows.Automation.SelectionPatternIdentifiers, namespace: System.Windows.Automation
  DNSynchronizedInputPatternIdentifiers = interface; // type: System.Windows.Automation.SynchronizedInputPatternIdentifiers, namespace: System.Windows.Automation
  DNTableItemPatternIdentifiers = interface; // type: System.Windows.Automation.TableItemPatternIdentifiers, namespace: System.Windows.Automation
  DNTablePatternIdentifiers = interface; // type: System.Windows.Automation.TablePatternIdentifiers, namespace: System.Windows.Automation
  DNTextPatternIdentifiers = interface; // type: System.Windows.Automation.TextPatternIdentifiers, namespace: System.Windows.Automation
  DNTogglePatternIdentifiers = interface; // type: System.Windows.Automation.TogglePatternIdentifiers, namespace: System.Windows.Automation
  DNTransformPatternIdentifiers = interface; // type: System.Windows.Automation.TransformPatternIdentifiers, namespace: System.Windows.Automation
  DNValuePatternIdentifiers = interface; // type: System.Windows.Automation.ValuePatternIdentifiers, namespace: System.Windows.Automation
  DNVirtualizedItemPatternIdentifiers = interface; // type: System.Windows.Automation.VirtualizedItemPatternIdentifiers, namespace: System.Windows.Automation
  DNWindowPatternIdentifiers = interface; // type: System.Windows.Automation.WindowPatternIdentifiers, namespace: System.Windows.Automation

{ delegates }

  ///<summary>Represents the method implemented by the UI Automation client application to handle an event raised by a UI Automation provider. </summary>
  ///  <param name="sender">The object that raised the event.</param>
  ///  <param name="e">Information about the event.</param>
  [DNTypeName('System.Windows.Automation.AutomationEventHandler')]
  DNAutomationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAutomationEventArgs) of object;

  ///<summary>Represents the method implemented by the UI Automation client application to handle the event raised by a UI Automation provider when a property has changed.</summary>
  ///  <param name="sender">The object that raised the event.</param>
  ///  <param name="e">Information about the event.</param>
  [DNTypeName('System.Windows.Automation.AutomationPropertyChangedEventHandler')]
  DNAutomationPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAutomationPropertyChangedEventArgs) of object;

  ///<summary>Represents the method implemented by the client application to handle the event raised when the UI Automation tree structure has changed.</summary>
  ///  <param name="sender">The object that raised the event.</param>
  ///  <param name="e">Information about the event.</param>
  [DNTypeName('System.Windows.Automation.StructureChangedEventHandler')]
  DNStructureChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNStructureChangedEventArgs) of object;




{ objects }

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EECFEF76-82E3-5727-A232-36B78B79B13C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationEventArgs" />
    ///  class.</summary>
    ///  <param name="eventId">The event identifier.</param>
    {class} function init(eventId: DNAutomationEvent): DNAutomationEventArgs;

  end;

  ///<summary>Provides data for UI Automation events that are passed to anÂ <see cref="T:System.Windows.Automation.AutomationEventHandler" />
  ///  delegate.</summary>
  [DNTypeName('System.Windows.Automation.AutomationEventArgs')]
  DNAutomationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{ABAEB7E7-A514-352A-80A1-E3DFA09AF111}']
  { getters & setters } 

    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the event identifier.</summary>
    ///<returns>The event identifier.</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAutomationEventArgs = class(TDNGenericImport<DNAutomationEventArgsClass, DNAutomationEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAsyncContentLoadedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{AAF51CED-9DC4-5F65-B70E-DB4F23C532F8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AsyncContentLoadedEventArgs" />
    ///  class.</summary>
    ///  <param name="asyncContentState">The state of content loading.</param>
    ///  <param name="percentComplete">Percentage of content that has been loaded.</param>
    {class} function init(asyncContentState: DNAsyncContentLoadedState; percentComplete: Double): DNAsyncContentLoadedEventArgs;

  end;

  ///<summary>Provides data for a <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.AsyncContentLoadedEventArgs')]
  DNAsyncContentLoadedEventArgs = interface(DNAutomationEventArgs)
  ['{CC63525C-1F7F-3F3B-BA81-7B9EB2FE6FA9}']
  { getters & setters } 

    function get_AsyncContentLoadedState: DNAsyncContentLoadedState;
    function get_PercentComplete: Double;
    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the state of the content loading. </summary>
    ///<returns>One of the <see cref="T:System.Windows.Automation.AsyncContentLoadedState" />
    ///  values.</returns>
    property AsyncContentLoadedState: DNAsyncContentLoadedState read get_AsyncContentLoadedState;
    ///<summary>Gets the percentage of content that has been loaded. </summary>
    ///<returns>The percentage of content that has been loaded.</returns>
    property PercentComplete: Double read get_PercentComplete;
    ///<summary>Gets the event identifier.</summary>
    ///<returns>The event identifier.</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAsyncContentLoadedEventArgs = class(TDNGenericImport<DNAsyncContentLoadedEventArgsClass, DNAsyncContentLoadedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertyChangedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{5F990427-935D-590E-8B89-FEBA12A44395}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationPropertyChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="property">The identifier of the property that has changed.</param>
    ///  <param name="oldValue">The previous value of the property.</param>
    ///  <param name="newValue">The new value of the property.</param>
    {class} function init(&property: DNAutomationProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNAutomationPropertyChangedEventArgs;

  end;

  ///<summary>Provides information about a property-changed event.</summary>
  [DNTypeName('System.Windows.Automation.AutomationPropertyChangedEventArgs')]
  DNAutomationPropertyChangedEventArgs = interface(DNAutomationEventArgs)
  ['{70C95033-A396-3778-9C1B-39228A9C9B3E}']
  { getters & setters } 

    function get_Property: DNAutomationProperty;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_EventId: DNAutomationEvent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an <see cref="T:System.Windows.Automation.AutomationProperty" />
    ///  identifier indicating which property changed.</summary>
    ///<returns>The identifier of the property that has changed.</returns>
    property &Property: DNAutomationProperty read get_Property;
    ///<summary>Gets the old value of a property that has changed.</summary>
    ///<returns>The previous value of the property, or null (<see langword="Nothing" />
    ///  in Microsoft Visual Basic .NET) if the previous value is not readily available.</returns>
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    ///<summary>Gets the new value of a property that has changed.</summary>
    ///<returns>The new value of the property.</returns>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    ///<summary>Gets the event identifier.</summary>
    ///<returns>The event identifier.</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNAutomationPropertyChangedEventArgs = class(TDNGenericImport<DNAutomationPropertyChangedEventArgsClass, DNAutomationPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNStructureChangedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{FA82E66B-09D9-5B3A-850A-9B668E17516E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType" />
    ///  class, specifying the type of change and the identifier (ID) of the element whose structure changed.</summary>
    ///  <param name="structureChangeType">A single value that specifies the type of change.</param>
    ///  <param name="runtimeId">The runtime identifier (ID) of the UI Automation element whose structure changed. See Remarks.</param>
    {class} function init(structureChangeType: DNStructureChangeType; runtimeId: TArray<Int32>): DNStructureChangedEventArgs;

  end;

  ///<summary>Contains information about the event that is raised when the UI Automation tree structure has changed.</summary>
  [DNTypeName('System.Windows.Automation.StructureChangedEventArgs')]
  DNStructureChangedEventArgs = interface(DNAutomationEventArgs)
  ['{D706853C-4F01-357E-90D0-9416ECFDB0F8}']
  { getters & setters } 

    function get_StructureChangeType: DNStructureChangeType;
    function get_EventId: DNAutomationEvent;

  { methods } 

    ///<summary>Retrieves the UI Automation runtime identifier (ID) of the UI Automation element whose structure changed.</summary>
    ///<returns>The runtime ID of the UI Automation element whose structure changed.</returns>
    function GetRuntimeId: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating the type of change that occurred in the UI Automation tree structure.</summary>
    ///<returns>The type of changed that occurred.</returns>
    property StructureChangeType: DNStructureChangeType read get_StructureChangeType;
    ///<summary>Gets the event identifier.</summary>
    ///<returns>The event identifier.</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNStructureChangedEventArgs = class(TDNGenericImport<DNStructureChangedEventArgsClass, DNStructureChangedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNWindowClosedEventArgsClass = interface(DNAutomationEventArgsClass)
  ['{35691F3D-E28B-5A72-856B-97947BE6ADC3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.WindowClosedEventArgs" />
    ///  class.</summary>
    ///  <param name="runtimeId">The runtime identifier of the window that has closed.</param>
    {class} function init(runtimeId: TArray<Int32>): DNWindowClosedEventArgs;

  end;

  ///<summary>Contains information about the event that is raised when a window is closed.</summary>
  [DNTypeName('System.Windows.Automation.WindowClosedEventArgs')]
  DNWindowClosedEventArgs = interface(DNAutomationEventArgs)
  ['{75EA5EC5-6EDE-371D-93F6-84CC754C5A8D}']
  { getters & setters } 

    function get_EventId: DNAutomationEvent;

  { methods } 

    ///<summary>Retrieves the UI Automation runtime identifier (ID) associated with this event.</summary>
    ///<returns>The UI Automation runtime ID of the window on which the event was raised.</returns>
    function GetRuntimeId: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the event identifier.</summary>
    ///<returns>The event identifier.</returns>
    property EventId: DNAutomationEvent read get_EventId;
  end;

  TDNWindowClosedEventArgs = class(TDNGenericImport<DNWindowClosedEventArgsClass, DNWindowClosedEventArgs>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNElementNotEnabledExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{74AF6582-B5F3-5191-B4A8-7297519EB349}']
  { constructors } 

    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  class. </summary>
    {class} function init: DNElementNotEnabledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  class with a specified error message. </summary>
    ///  <param name="message">The description of the error.</param>
    {class} function init(message: string): DNElementNotEnabledException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" />
    ///  class with a specified error message and a reference to the inner exception that caused this exception. </summary>
    ///  <param name="message">The description of the error.</param>
    ///  <param name="innerException">The exception that caused this exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNElementNotEnabledException; overload;

  end;

  ///<summary>Contains information about the exception that is raised when an attempt is made to manipulate a control that is not enabled. </summary>
  [DNTypeName('System.Windows.Automation.ElementNotEnabledException')]
  DNElementNotEnabledException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{54461C84-05F7-3267-A382-9BE8A61974A2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Retrieves data needed to serialize the target object.</summary>
    ///  <param name="info">Data needed to serialize or deserialize the object.</param>
    ///  <param name="context">The destination of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNElementNotEnabledException = class(TDNGenericImport<DNElementNotEnabledExceptionClass, DNElementNotEnabledException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNElementNotAvailableExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{600424F4-1EC9-54AF-AE1E-0021E3FE44C8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  class. </summary>
    {class} function init: DNElementNotAvailableException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  class with a specified error message. </summary>
    ///  <param name="message">The description of the error.</param>
    {class} function init(message: string): DNElementNotAvailableException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  class with a specified error message and a reference to the inner exception that caused this exception. </summary>
    ///  <param name="message">The description of the error.</param>
    ///  <param name="innerException">The exception that caused this exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNElementNotAvailableException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" />
    ///  class with a reference to the inner exception that caused this exception. </summary>
    ///  <param name="innerException">The exception that caused this exception.</param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNElementNotAvailableException; overload;

  end;

  ///<summary>Contains information about the exception that is raised when an attempt is made to access an UI Automation element corresponding to a part of the user interface that is no longer available.</summary>
  [DNTypeName('System.Windows.Automation.ElementNotAvailableException')]
  DNElementNotAvailableException = interface(DDN.mscorlib.DNSystemException)
  ['{C0A2AD64-CFF1-3DBA-A114-43CE9799C73C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Retrieves data needed to serialize the target object. </summary>
    ///  <param name="info">Data needed to serialize or deserialize the object.</param>
    ///  <param name="context">The destination of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNElementNotAvailableException = class(TDNGenericImport<DNElementNotAvailableExceptionClass, DNElementNotAvailableException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNNoClickablePointExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{42BE15EE-689A-5779-B229-6B799B98ADDA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  class.</summary>
    {class} function init: DNNoClickablePointException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  class with a specified error message.</summary>
    ///  <param name="message">The description of the error.</param>
    {class} function init(message: string): DNNoClickablePointException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" />
    ///  class with a specified error message and a reference to the inner exception that caused this exception.</summary>
    ///  <param name="message">The description of the error.</param>
    ///  <param name="innerException">The exception that caused this exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNNoClickablePointException; overload;

  end;

  ///<summary>Contains information about the exception that is raised when <see cref="M:System.Windows.Automation.AutomationElement.GetClickablePoint" />
  ///  is called on a UI Automation element that has no clickable point.</summary>
  [DNTypeName('System.Windows.Automation.NoClickablePointException')]
  DNNoClickablePointException = interface(DDN.mscorlib.DNException)
  ['{8B927203-C5EC-304C-A75B-9412F9750049}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Retrieves data needed to serialize the target object.</summary>
    ///  <param name="info">Data needed to serialize or deserialize the object.</param>
    ///  <param name="context">The destination of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoClickablePointException = class(TDNGenericImport<DNNoClickablePointExceptionClass, DNNoClickablePointException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNProxyAssemblyNotLoadedExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{657ADD66-8561-5F01-A811-016ACC3EE049}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  class. Used internally.</summary>
    {class} function init: DNProxyAssemblyNotLoadedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  class with an error message. Used internally.</summary>
    ///  <param name="message">The description of the error.</param>
    {class} function init(message: string): DNProxyAssemblyNotLoadedException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" />
    ///  class with a specified error message and a reference to the inner exception that caused this exception. Used internally.</summary>
    ///  <param name="message">The description of the error.</param>
    ///  <param name="innerException">The exception that caused this exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNProxyAssemblyNotLoadedException; overload;

  end;

  ///<summary>Contains information about an exception that is raised when there is a problem loading an assembly that contains client-side providers</summary>
  [DNTypeName('System.Windows.Automation.ProxyAssemblyNotLoadedException')]
  DNProxyAssemblyNotLoadedException = interface(DDN.mscorlib.DNException)
  ['{2B8343D1-FBCC-34A3-BE06-B749B7E6641F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Retrieves data needed to serialize the target object. Used internally.</summary>
    ///  <param name="info">Data needed to serialize or deserialize the object.</param>
    ///  <param name="context">The destination of the serialized stream.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNProxyAssemblyNotLoadedException = class(TDNGenericImport<DNProxyAssemblyNotLoadedExceptionClass, DNProxyAssemblyNotLoadedException>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationElementIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{358056A6-6147-5C70-BFA3-AE8C46D18E1A}']
  { static fields getter & setter } 

   function __fakeFieldGet_NotSupported: DDN.mscorlib.DNObject;
   function __fakeFieldGet_IsControlElementProperty: DNAutomationProperty;
   function __fakeFieldGet_ControlTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsContentElementProperty: DNAutomationProperty;
   function __fakeFieldGet_LabeledByProperty: DNAutomationProperty;
   function __fakeFieldGet_NativeWindowHandleProperty: DNAutomationProperty;
   function __fakeFieldGet_AutomationIdProperty: DNAutomationProperty;
   function __fakeFieldGet_ItemTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsPasswordProperty: DNAutomationProperty;
   function __fakeFieldGet_LocalizedControlTypeProperty: DNAutomationProperty;
   function __fakeFieldGet_NameProperty: DNAutomationProperty;
   function __fakeFieldGet_AcceleratorKeyProperty: DNAutomationProperty;
   function __fakeFieldGet_AccessKeyProperty: DNAutomationProperty;
   function __fakeFieldGet_HasKeyboardFocusProperty: DNAutomationProperty;
   function __fakeFieldGet_IsKeyboardFocusableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsEnabledProperty: DNAutomationProperty;
   function __fakeFieldGet_BoundingRectangleProperty: DNAutomationProperty;
   function __fakeFieldGet_ProcessIdProperty: DNAutomationProperty;
   function __fakeFieldGet_RuntimeIdProperty: DNAutomationProperty;
   function __fakeFieldGet_ClassNameProperty: DNAutomationProperty;
   function __fakeFieldGet_HelpTextProperty: DNAutomationProperty;
   function __fakeFieldGet_ClickablePointProperty: DNAutomationProperty;
   function __fakeFieldGet_CultureProperty: DNAutomationProperty;
   function __fakeFieldGet_IsOffscreenProperty: DNAutomationProperty;
   function __fakeFieldGet_OrientationProperty: DNAutomationProperty;
   function __fakeFieldGet_FrameworkIdProperty: DNAutomationProperty;
   function __fakeFieldGet_IsRequiredForFormProperty: DNAutomationProperty;
   function __fakeFieldGet_ItemStatusProperty: DNAutomationProperty;
   function __fakeFieldGet_LiveSettingProperty: DNAutomationProperty;
   function __fakeFieldGet_ControllerForProperty: DNAutomationProperty;
   function __fakeFieldGet_SizeOfSetProperty: DNAutomationProperty;
   function __fakeFieldGet_PositionInSetProperty: DNAutomationProperty;
   function __fakeFieldGet_IsDockPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsExpandCollapsePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsGridItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsGridPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsInvokePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsMultipleViewPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsRangeValuePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsScrollPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsScrollItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSynchronizedInputPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsVirtualizedItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsItemContainerPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTablePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTableItemPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTextPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTogglePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTransformPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsValuePatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_IsWindowPatternAvailableProperty: DNAutomationProperty;
   function __fakeFieldGet_ToolTipOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_ToolTipClosedEvent: DNAutomationEvent;
   function __fakeFieldGet_StructureChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_MenuOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_AutomationPropertyChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_AutomationFocusChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_AsyncContentLoadedEvent: DNAutomationEvent;
   function __fakeFieldGet_MenuClosedEvent: DNAutomationEvent;
   function __fakeFieldGet_LayoutInvalidatedEvent: DNAutomationEvent;
   function __fakeFieldGet_LiveRegionChangedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Indicates that a property is not supported.</summary>
    {class} property NotSupported: DDN.mscorlib.DNObject read __fakeFieldGet_NotSupported;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" />
    ///  property.</summary>
    {class} property IsControlElementProperty: DNAutomationProperty read __fakeFieldGet_IsControlElementProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" />
    ///  property. </summary>
    {class} property ControlTypeProperty: DNAutomationProperty read __fakeFieldGet_ControlTypeProperty;
    ///<summary>Identifies the property that indicates whether the element contains content that is valuable to the end user.</summary>
    {class} property IsContentElementProperty: DNAutomationProperty read __fakeFieldGet_IsContentElementProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" />
    ///  property.</summary>
    {class} property LabeledByProperty: DNAutomationProperty read __fakeFieldGet_LabeledByProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" />
    ///  property.</summary>
    {class} property NativeWindowHandleProperty: DNAutomationProperty read __fakeFieldGet_NativeWindowHandleProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" />
    ///  property.</summary>
    {class} property AutomationIdProperty: DNAutomationProperty read __fakeFieldGet_AutomationIdProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" />
    ///  property.</summary>
    {class} property ItemTypeProperty: DNAutomationProperty read __fakeFieldGet_ItemTypeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" />
    ///  property.</summary>
    {class} property IsPasswordProperty: DNAutomationProperty read __fakeFieldGet_IsPasswordProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" />
    ///  property.</summary>
    {class} property LocalizedControlTypeProperty: DNAutomationProperty read __fakeFieldGet_LocalizedControlTypeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" />
    ///  property.</summary>
    {class} property NameProperty: DNAutomationProperty read __fakeFieldGet_NameProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" />
    ///  property.</summary>
    {class} property AcceleratorKeyProperty: DNAutomationProperty read __fakeFieldGet_AcceleratorKeyProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" />
    ///  property.</summary>
    {class} property AccessKeyProperty: DNAutomationProperty read __fakeFieldGet_AccessKeyProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" />
    ///  property.</summary>
    {class} property HasKeyboardFocusProperty: DNAutomationProperty read __fakeFieldGet_HasKeyboardFocusProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" />
    ///  property.</summary>
    {class} property IsKeyboardFocusableProperty: DNAutomationProperty read __fakeFieldGet_IsKeyboardFocusableProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />
    ///  property, which specifies whether the user interface (UI) item referenced by the <see cref="T:System.Windows.Automation.AutomationElement" />
    ///  is enabled.</summary>
    {class} property IsEnabledProperty: DNAutomationProperty read __fakeFieldGet_IsEnabledProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" />
    ///  property.</summary>
    {class} property BoundingRectangleProperty: DNAutomationProperty read __fakeFieldGet_BoundingRectangleProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" />
    ///  property.</summary>
    {class} property ProcessIdProperty: DNAutomationProperty read __fakeFieldGet_ProcessIdProperty;
    ///<summary>Identifies the property that contains the runtime identifier of the element.</summary>
    {class} property RuntimeIdProperty: DNAutomationProperty read __fakeFieldGet_RuntimeIdProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" />
    ///  property. </summary>
    {class} property ClassNameProperty: DNAutomationProperty read __fakeFieldGet_ClassNameProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" />
    ///  property.</summary>
    {class} property HelpTextProperty: DNAutomationProperty read __fakeFieldGet_HelpTextProperty;
    ///<summary>Identifies the <see cref="F:System.Windows.Automation.AutomationElement.ClickablePointProperty" />
    ///  .</summary>
    {class} property ClickablePointProperty: DNAutomationProperty read __fakeFieldGet_ClickablePointProperty;
    ///<summary>Identifies the culture property.</summary>
    {class} property CultureProperty: DNAutomationProperty read __fakeFieldGet_CultureProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" />
    ///  property, which indicates whether the UI Automation element is visible. </summary>
    {class} property IsOffscreenProperty: DNAutomationProperty read __fakeFieldGet_IsOffscreenProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" />
    ///  property.</summary>
    {class} property OrientationProperty: DNAutomationProperty read __fakeFieldGet_OrientationProperty;
    ///<summary>Identifies the property that contains the underlying framework's name for the element. </summary>
    {class} property FrameworkIdProperty: DNAutomationProperty read __fakeFieldGet_FrameworkIdProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" />
    ///  property.</summary>
    {class} property IsRequiredForFormProperty: DNAutomationProperty read __fakeFieldGet_IsRequiredForFormProperty;
    ///<summary>Identifies the property that specifies the status of the visual representation of a complex item.</summary>
    {class} property ItemStatusProperty: DNAutomationProperty read __fakeFieldGet_ItemStatusProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.AutomationProperties.LiveSetting" />
    ///  property. </summary>
    {class} property LiveSettingProperty: DNAutomationProperty read __fakeFieldGet_LiveSettingProperty;
    {class} property ControllerForProperty: DNAutomationProperty read __fakeFieldGet_ControllerForProperty;
    {class} property SizeOfSetProperty: DNAutomationProperty read __fakeFieldGet_SizeOfSetProperty;
    {class} property PositionInSetProperty: DNAutomationProperty read __fakeFieldGet_PositionInSetProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.DockPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsDockPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsDockPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsExpandCollapsePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsExpandCollapsePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridItemPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsGridItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsGridItemPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsGridPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsGridPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.InvokePattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsInvokePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsInvokePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.MultipleViewPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsMultipleViewPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsMultipleViewPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.RangeValuePattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsRangeValuePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsRangeValuePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionItemPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsSelectionItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionItemPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsSelectionPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsScrollPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsScrollPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollItemPattern" />
    ///  is available for this UI Automation element.</summary>
    {class} property IsScrollItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsScrollItemPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SynchronizedInputPattern" />
    ///  is available for this UI Automation element.</summary>
    {class} property IsSynchronizedInputPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsSynchronizedInputPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.VirtualizedItemPattern" />
    ///  is available for this UI Automation element.</summary>
    {class} property IsVirtualizedItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsVirtualizedItemPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ItemContainerPattern" />
    ///  is available for this UI Automation element.</summary>
    {class} property IsItemContainerPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsItemContainerPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TablePattern" />
    ///  is available on this UI Automation element. </summary>
    {class} property IsTablePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTablePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TableItemPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsTableItemPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTableItemPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TextPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsTextPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTextPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TogglePattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsTogglePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTogglePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TransformPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsTransformPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsTransformPatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ValuePattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsValuePatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsValuePatternAvailableProperty;
    ///<summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.WindowPattern" />
    ///  is available on this UI Automation element.</summary>
    {class} property IsWindowPatternAvailableProperty: DNAutomationProperty read __fakeFieldGet_IsWindowPatternAvailableProperty;
    ///<summary>Identifies the event that is raised when a ToolTip is opened.</summary>
    {class} property ToolTipOpenedEvent: DNAutomationEvent read __fakeFieldGet_ToolTipOpenedEvent;
    ///<summary>Identifies the event that is raised when a ToolTip is closed.</summary>
    {class} property ToolTipClosedEvent: DNAutomationEvent read __fakeFieldGet_ToolTipClosedEvent;
    ///<summary>Identifies the event that is raised when the UI Automation tree structure is changed.</summary>
    {class} property StructureChangedEvent: DNAutomationEvent read __fakeFieldGet_StructureChangedEvent;
    ///<summary>Identifies the event that is raised when a menu is opened.</summary>
    {class} property MenuOpenedEvent: DNAutomationEvent read __fakeFieldGet_MenuOpenedEvent;
    ///<summary>Identifies a property-changed event.</summary>
    {class} property AutomationPropertyChangedEvent: DNAutomationEvent read __fakeFieldGet_AutomationPropertyChangedEvent;
    ///<summary>Identifies an event that is raised when the focus has changed.</summary>
    {class} property AutomationFocusChangedEvent: DNAutomationEvent read __fakeFieldGet_AutomationFocusChangedEvent;
    ///<summary>Identifies an event raised during asynchronous content-loading.</summary>
    {class} property AsyncContentLoadedEvent: DNAutomationEvent read __fakeFieldGet_AsyncContentLoadedEvent;
    ///<summary>Identifies the event that is raised when a menu is closed.</summary>
    {class} property MenuClosedEvent: DNAutomationEvent read __fakeFieldGet_MenuClosedEvent;
    ///<summary>Identifies the event that is raised when the layout is invalidated.</summary>
    {class} property LayoutInvalidatedEvent: DNAutomationEvent read __fakeFieldGet_LayoutInvalidatedEvent;
    ///<summary>Identifies the event that is raised when a live region changes. </summary>
    {class} property LiveRegionChangedEvent: DNAutomationEvent read __fakeFieldGet_LiveRegionChangedEvent;

  end;

  ///<summary>Contains values used as identifiers by UI Automation providers.</summary>
  [DNTypeName('System.Windows.Automation.AutomationElementIdentifiers')]
  DNAutomationElementIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6F443A1A-71A0-3A7A-8C36-008826F3A585}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAutomationElementIdentifiers = class(TDNGenericImport<DNAutomationElementIdentifiersClass, DNAutomationElementIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationIdentifierClass = interface(DNObjectClass)
  ['{0D7EB66B-B138-56F1-85B3-116E2D6125F0}']
  end;

  ///<summary>Base class for types that identify control types, events, patterns, properties, and text attributes in UI Automation.</summary>
  [DNTypeName('System.Windows.Automation.AutomationIdentifier')]
  DNAutomationIdentifier = interface(DDN.mscorlib.DNIComparable)
  ['{C5646318-7D6B-304A-BB44-624BA93BF591}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationIdentifier = class(TDNGenericImport<DNAutomationIdentifierClass, DNAutomationIdentifier>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationEventClass = interface(DNAutomationIdentifierClass)
  ['{4EA86E0E-AF70-5FE1-A8BA-76F76F8981E6}']
  { static methods } 

    ///<summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationEvent" />
    ///  that encapsulates the specified numerical identifier.</summary>
    ///  <param name="id">Identifier of the event.</param>
    ///<returns>An <see cref="T:System.Windows.Automation.AutomationEvent" />
    ///  that encapsulates the specified numerical identifier.</returns>
    {class} function LookupById(id: Int32): DNAutomationEvent;

  end;

  ///<summary>Identifies a UI Automation event.</summary>
  [DNTypeName('System.Windows.Automation.AutomationEvent')]
  DNAutomationEvent = interface(DNAutomationIdentifier)
  ['{B7DF3005-72B1-3CAF-9EE6-D582E0A1FABE}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationEvent = class(TDNGenericImport<DNAutomationEventClass, DNAutomationEvent>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPatternClass = interface(DNAutomationIdentifierClass)
  ['{FD829866-7C1B-5E56-828B-AADF4F34BBA4}']
  { static methods } 

    ///<summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationPattern" />
    ///  that encapsulates a specified numerical identifier.</summary>
    ///  <param name="id">Identifier of the pattern.</param>
    ///<returns>The <see cref="T:System.Windows.Automation.AutomationPattern" />
    ///  specified by <paramref name="id" />
    ///  .</returns>
    {class} function LookupById(id: Int32): DNAutomationPattern;

  end;

  ///<summary>Identifies a control pattern.</summary>
  [DNTypeName('System.Windows.Automation.AutomationPattern')]
  DNAutomationPattern = interface(DNAutomationIdentifier)
  ['{03618C55-1996-32BF-B544-709255179FC8}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationPattern = class(TDNGenericImport<DNAutomationPatternClass, DNAutomationPattern>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationPropertyClass = interface(DNAutomationIdentifierClass)
  ['{66B35539-8814-5C29-A3E3-D343DD75AC84}']
  { static methods } 

    ///<summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationProperty" />
    ///  that encapsulates a specified numerical identifier.</summary>
    ///  <param name="id">The property identifier.</param>
    {class} function LookupById(id: Int32): DNAutomationProperty;

  end;

  ///<summary>Identifies a property of an <see cref="T:System.Windows.Automation.AutomationElement" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.AutomationProperty')]
  DNAutomationProperty = interface(DNAutomationIdentifier)
  ['{76940F1C-2071-3DC4-8046-BEE158CB73DA}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationProperty = class(TDNGenericImport<DNAutomationPropertyClass, DNAutomationProperty>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNAutomationTextAttributeClass = interface(DNAutomationIdentifierClass)
  ['{65866F36-9287-500B-9E27-C2CA3B343A34}']
  { static methods } 

    ///<summary>Retrieves a <see cref="T:System.Windows.Automation.AutomationTextAttribute" />
    ///  that encapsulates a specified numerical identifier.</summary>
    ///  <param name="id">The numerical identifier.</param>
    {class} function LookupById(id: Int32): DNAutomationTextAttribute;

  end;

  ///<summary>Identifies UI Automation text attributes.</summary>
  [DNTypeName('System.Windows.Automation.AutomationTextAttribute')]
  DNAutomationTextAttribute = interface(DNAutomationIdentifier)
  ['{D2F62B56-5209-349B-867C-46847CF7A501}']
  { getters & setters } 

    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNAutomationTextAttribute = class(TDNGenericImport<DNAutomationTextAttributeClass, DNAutomationTextAttribute>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNControlTypeClass = interface(DNAutomationIdentifierClass)
  ['{0A328BF1-38CE-53B9-B21A-96398D7C9F6F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Button: DNControlType;
   function __fakeFieldGet_Calendar: DNControlType;
   function __fakeFieldGet_CheckBox: DNControlType;
   function __fakeFieldGet_ComboBox: DNControlType;
   function __fakeFieldGet_Edit: DNControlType;
   function __fakeFieldGet_Hyperlink: DNControlType;
   function __fakeFieldGet_Image: DNControlType;
   function __fakeFieldGet_ListItem: DNControlType;
   function __fakeFieldGet_List: DNControlType;
   function __fakeFieldGet_Menu: DNControlType;
   function __fakeFieldGet_MenuBar: DNControlType;
   function __fakeFieldGet_MenuItem: DNControlType;
   function __fakeFieldGet_ProgressBar: DNControlType;
   function __fakeFieldGet_RadioButton: DNControlType;
   function __fakeFieldGet_ScrollBar: DNControlType;
   function __fakeFieldGet_Slider: DNControlType;
   function __fakeFieldGet_Spinner: DNControlType;
   function __fakeFieldGet_StatusBar: DNControlType;
   function __fakeFieldGet_Tab: DNControlType;
   function __fakeFieldGet_TabItem: DNControlType;
   function __fakeFieldGet_Text: DNControlType;
   function __fakeFieldGet_ToolBar: DNControlType;
   function __fakeFieldGet_ToolTip: DNControlType;
   function __fakeFieldGet_Tree: DNControlType;
   function __fakeFieldGet_TreeItem: DNControlType;
   function __fakeFieldGet_Custom: DNControlType;
   function __fakeFieldGet_Group: DNControlType;
   function __fakeFieldGet_Thumb: DNControlType;
   function __fakeFieldGet_DataGrid: DNControlType;
   function __fakeFieldGet_DataItem: DNControlType;
   function __fakeFieldGet_Document: DNControlType;
   function __fakeFieldGet_SplitButton: DNControlType;
   function __fakeFieldGet_Window: DNControlType;
   function __fakeFieldGet_Pane: DNControlType;
   function __fakeFieldGet_Header: DNControlType;
   function __fakeFieldGet_HeaderItem: DNControlType;
   function __fakeFieldGet_Table: DNControlType;
   function __fakeFieldGet_TitleBar: DNControlType;
   function __fakeFieldGet_Separator: DNControlType;

  { static fields } 

    ///<summary>Identifies a button control.</summary>
    {class} property Button: DNControlType read __fakeFieldGet_Button;
    ///<summary>Identifies a calendar control, such as a date-picker.</summary>
    {class} property Calendar: DNControlType read __fakeFieldGet_Calendar;
    ///<summary>Identifies a check box control.</summary>
    {class} property CheckBox: DNControlType read __fakeFieldGet_CheckBox;
    ///<summary>Identifies a combo box control.</summary>
    {class} property ComboBox: DNControlType read __fakeFieldGet_ComboBox;
    ///<summary>Identifies an edit control, such as a text box.</summary>
    {class} property Edit: DNControlType read __fakeFieldGet_Edit;
    ///<summary>Identifies a hyperlink control.</summary>
    {class} property Hyperlink: DNControlType read __fakeFieldGet_Hyperlink;
    ///<summary>Identifies an image control. </summary>
    {class} property Image: DNControlType read __fakeFieldGet_Image;
    ///<summary>Identifies a list item control, which is a child item of a list control.  </summary>
    {class} property ListItem: DNControlType read __fakeFieldGet_ListItem;
    ///<summary>Identifies a list control, such as a list box.</summary>
    {class} property List: DNControlType read __fakeFieldGet_List;
    ///<summary>Identifies a menu control, such as a top-level menu in an application window.</summary>
    {class} property Menu: DNControlType read __fakeFieldGet_Menu;
    ///<summary>Identifies a menu bar control, which generally contains a set of top-level menus. </summary>
    {class} property MenuBar: DNControlType read __fakeFieldGet_MenuBar;
    ///<summary>Identifies a menu item control.</summary>
    {class} property MenuItem: DNControlType read __fakeFieldGet_MenuItem;
    ///<summary>Identifies a progress bar control, which visually indicates the progress of a lengthy operation.</summary>
    {class} property ProgressBar: DNControlType read __fakeFieldGet_ProgressBar;
    ///<summary>Identifies a radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
    {class} property RadioButton: DNControlType read __fakeFieldGet_RadioButton;
    ///<summary>Identifies a scroll bar control, such as a scroll bar in an application window.</summary>
    {class} property ScrollBar: DNControlType read __fakeFieldGet_ScrollBar;
    ///<summary>Identifies a slider control.</summary>
    {class} property Slider: DNControlType read __fakeFieldGet_Slider;
    ///<summary>Identifies a spinner control.</summary>
    {class} property Spinner: DNControlType read __fakeFieldGet_Spinner;
    ///<summary>Identifies a status bar control.</summary>
    {class} property StatusBar: DNControlType read __fakeFieldGet_StatusBar;
    ///<summary>Identifies a tab control.</summary>
    {class} property Tab: DNControlType read __fakeFieldGet_Tab;
    ///<summary>Identifies a tab item control, which represents a page of a tab control.</summary>
    {class} property TabItem: DNControlType read __fakeFieldGet_TabItem;
    ///<summary>Identifies an edit control, such as a text box or rich text box.</summary>
    {class} property Text: DNControlType read __fakeFieldGet_Text;
    ///<summary>Identifies a toolbar, such as the control that contains a set of command buttons in an application window.</summary>
    {class} property ToolBar: DNControlType read __fakeFieldGet_ToolBar;
    ///<summary>Identifies a tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
    {class} property ToolTip: DNControlType read __fakeFieldGet_ToolTip;
    ///<summary>Identifies a tree control.</summary>
    {class} property Tree: DNControlType read __fakeFieldGet_Tree;
    ///<summary>Identifies a node in a <see cref="F:System.Windows.Automation.ControlType.TreeItem" />
    ///  control.</summary>
    {class} property TreeItem: DNControlType read __fakeFieldGet_TreeItem;
    ///<summary>Identifies a control that is not one of the defined control types.  </summary>
    {class} property Custom: DNControlType read __fakeFieldGet_Custom;
    ///<summary>Identifies a group control, which acts as a container for other controls.</summary>
    {class} property Group: DNControlType read __fakeFieldGet_Group;
    ///<summary>Identifies the control in a scrollbar that can be dragged to a different position.</summary>
    {class} property Thumb: DNControlType read __fakeFieldGet_Thumb;
    ///<summary>Identifies a data grid control. </summary>
    {class} property DataGrid: DNControlType read __fakeFieldGet_DataGrid;
    ///<summary>Identifies a data item control.</summary>
    {class} property DataItem: DNControlType read __fakeFieldGet_DataItem;
    ///<summary>Identifies a document control.</summary>
    {class} property Document: DNControlType read __fakeFieldGet_Document;
    ///<summary>Identifies a split button, which is a button that performs a default action and can also expand to a list of other possible actions. </summary>
    {class} property SplitButton: DNControlType read __fakeFieldGet_SplitButton;
    ///<summary>Identifies a window frame, which contains child objects. </summary>
    {class} property Window: DNControlType read __fakeFieldGet_Window;
    ///<summary>Identifies a pane control.</summary>
    {class} property Pane: DNControlType read __fakeFieldGet_Pane;
    ///<summary>Identifies a header control, which is a container for the labels of rows and columns of information. </summary>
    {class} property Header: DNControlType read __fakeFieldGet_Header;
    ///<summary>Identifies a header item, which is the label for a row or column of information. </summary>
    {class} property HeaderItem: DNControlType read __fakeFieldGet_HeaderItem;
    ///<summary>Identifies a table.</summary>
    {class} property Table: DNControlType read __fakeFieldGet_Table;
    ///<summary>Identifies the caption bar on a window. </summary>
    {class} property TitleBar: DNControlType read __fakeFieldGet_TitleBar;
    ///<summary>Identifies a separator, which creates a visual division in controls like menus and toolbars. </summary>
    {class} property Separator: DNControlType read __fakeFieldGet_Separator;

  { static methods } 

    ///<summary>Retrieves a <see cref="T:System.Windows.Automation.ControlType" />
    ///  that encapsulates a specified numerical identifier. </summary>
    ///  <param name="id">Identifier of the control type.</param>
    {class} function LookupById(id: Int32): DNControlType;

  end;

  ///<summary>Identifies the type of a user interface (UI)Â control.</summary>
  [DNTypeName('System.Windows.Automation.ControlType')]
  DNControlType = interface(DNAutomationIdentifier)
  ['{A83F54CE-FB53-3E6D-BD1F-D416AF93B74A}']
  { getters & setters } 

    function get_LocalizedControlType: string;
    function get_Id: Int32;
    function get_ProgrammaticName: string;

  { methods } 

    ///<summary>Retrieves the pattern identifiers that are not supported by the control type.</summary>
    ///<returns>An array of UI Automation pattern identifiers.</returns>
    function GetNeverSupportedPatterns: TArray<DNAutomationPattern>;
    ///<summary>Retrieves an array of the required property identifiers (IDs) for this control type.</summary>
    ///<returns>An array of property IDs.Â </returns>
    function GetRequiredProperties: TArray<DNAutomationProperty>;
    ///<summary>Retrieves an array of sets of required patterns. </summary>
    ///<returns>An array of sets of required patterns.</returns>
    function GetRequiredPatternSets: TArray<TArray<DNAutomationPattern>>;
    ///<summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  object to compare with this identifier.</param>
    ///<returns><see langword="true" />
    ///  if the objects are equivalent; otherwise <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this UI Automation identifier.</summary>
    ///<returns>A 32-bit signed integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />
    ///  .</summary>
    ///  <param name="obj">The object to compare this one with.</param>
    ///<returns>The hash code of this object minus the hash code of <paramref name="obj" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="obj" />
    ///  is <see langword="null" />
    ///  .</exception>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a description of the control type. </summary>
    ///<returns>A localized description of the control type, such as "button". </returns>
    property LocalizedControlType: string read get_LocalizedControlType;
    ///<summary>Gets the underlying numerical identifier.</summary>
    ///<returns>The underlying identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary>Gets the registered programmatic name.</summary>
    ///<returns>The programmatic name.</returns>
    property ProgrammaticName: string read get_ProgrammaticName;
  end;

  TDNControlType = class(TDNGenericImport<DNControlTypeClass, DNControlType>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNDockPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{655B1DE1-30E7-5679-8955-617382AC66F3}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_DockPositionProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.DockPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" />
    ///  property.</summary>
    {class} property DockPositionProperty: DNAutomationProperty read __fakeFieldGet_DockPositionProperty;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IDockProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.DockPatternIdentifiers')]
  DNDockPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{A8B842FD-25AA-30BB-86E4-5144368F1B48}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDockPatternIdentifiers = class(TDNGenericImport<DNDockPatternIdentifiersClass, DNDockPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNExpandCollapsePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EFE8D5C-66DF-54AB-A63A-05B80CA92F92}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ExpandCollapseStateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" />
    ///  property.</summary>
    {class} property ExpandCollapseStateProperty: DNAutomationProperty read __fakeFieldGet_ExpandCollapseStateProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.ExpandCollapsePatternIdentifiers')]
  DNExpandCollapsePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{4B1098B3-C06B-39E0-9EB9-B885A9D23305}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpandCollapsePatternIdentifiers = class(TDNGenericImport<DNExpandCollapsePatternIdentifiersClass, DNExpandCollapsePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNGridItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{62CB1771-DB0F-51CE-BEED-11E4ABC2F527}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnProperty: DNAutomationProperty;
   function __fakeFieldGet_RowSpanProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnSpanProperty: DNAutomationProperty;
   function __fakeFieldGet_ContainingGridProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.GridItemPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" />
    ///  property.</summary>
    {class} property RowProperty: DNAutomationProperty read __fakeFieldGet_RowProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" />
    ///  property.</summary>
    {class} property ColumnProperty: DNAutomationProperty read __fakeFieldGet_ColumnProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" />
    ///  property.</summary>
    {class} property RowSpanProperty: DNAutomationProperty read __fakeFieldGet_RowSpanProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" />
    ///  property.</summary>
    {class} property ColumnSpanProperty: DNAutomationProperty read __fakeFieldGet_ColumnSpanProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" />
    ///  property.</summary>
    {class} property ContainingGridProperty: DNAutomationProperty read __fakeFieldGet_ContainingGridProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.GridItemPatternIdentifiers')]
  DNGridItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{0EAE555F-DF2D-3CF5-B84C-C2F656C28AAD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGridItemPatternIdentifiers = class(TDNGenericImport<DNGridItemPatternIdentifiersClass, DNGridItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNGridPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7B5A191-F75F-564A-9849-E8D3130003C6}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowCountProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnCountProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.GridPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" />
    ///  property.</summary>
    {class} property RowCountProperty: DNAutomationProperty read __fakeFieldGet_RowCountProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" />
    ///  property.</summary>
    {class} property ColumnCountProperty: DNAutomationProperty read __fakeFieldGet_ColumnCountProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.GridPatternIdentifiers')]
  DNGridPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6EA2B8F8-2C2B-3287-B77E-E3397C42ACFB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGridPatternIdentifiers = class(TDNGenericImport<DNGridPatternIdentifiersClass, DNGridPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNInvokePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{459968BE-D30C-5CEB-9193-60EEF4977440}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_InvokedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.InvokePattern" />
    ///  control pattern. </summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the event raised when a control is activated. </summary>
    {class} property InvokedEvent: DNAutomationEvent read __fakeFieldGet_InvokedEvent;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.InvokePatternIdentifiers')]
  DNInvokePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{B2D9671D-49C6-3B3B-BB84-233E475C6BE6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInvokePatternIdentifiers = class(TDNGenericImport<DNInvokePatternIdentifiersClass, DNInvokePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNItemContainerPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90B4773C-9E67-5796-8FCE-1C0D9361B66A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ItemContainerPattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.ItemContainerPatternIdentifiers')]
  DNItemContainerPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{38F55F32-8F34-3379-874C-7C94C645043F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNItemContainerPatternIdentifiers = class(TDNGenericImport<DNItemContainerPatternIdentifiersClass, DNItemContainerPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNMultipleViewPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5F282ADE-D1B1-5997-830E-EC356826D985}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CurrentViewProperty: DNAutomationProperty;
   function __fakeFieldGet_SupportedViewsProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.MultipleViewPattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" />
    ///  property.</summary>
    {class} property CurrentViewProperty: DNAutomationProperty read __fakeFieldGet_CurrentViewProperty;
    ///<summary>Identifies the property that gets the control-specific collection of views.</summary>
    {class} property SupportedViewsProperty: DNAutomationProperty read __fakeFieldGet_SupportedViewsProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.MultipleViewPatternIdentifiers')]
  DNMultipleViewPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{E932C70A-6950-3B71-A5A2-77B59020D7ED}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMultipleViewPatternIdentifiers = class(TDNGenericImport<DNMultipleViewPatternIdentifiersClass, DNMultipleViewPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNRangeValuePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8E62807-6E0B-582D-9982-335C69332D33}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ValueProperty: DNAutomationProperty;
   function __fakeFieldGet_IsReadOnlyProperty: DNAutomationProperty;
   function __fakeFieldGet_MinimumProperty: DNAutomationProperty;
   function __fakeFieldGet_MaximumProperty: DNAutomationProperty;
   function __fakeFieldGet_LargeChangeProperty: DNAutomationProperty;
   function __fakeFieldGet_SmallChangeProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies this pattern as a <see cref="T:System.Windows.Automation.RangeValuePattern" />
    ///  .</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />
    ///  property.</summary>
    {class} property ValueProperty: DNAutomationProperty read __fakeFieldGet_ValueProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />
    ///  property.</summary>
    {class} property IsReadOnlyProperty: DNAutomationProperty read __fakeFieldGet_IsReadOnlyProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />
    ///  property.</summary>
    {class} property MinimumProperty: DNAutomationProperty read __fakeFieldGet_MinimumProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />
    ///  property.</summary>
    {class} property MaximumProperty: DNAutomationProperty read __fakeFieldGet_MaximumProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />
    ///  property.</summary>
    {class} property LargeChangeProperty: DNAutomationProperty read __fakeFieldGet_LargeChangeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />
    ///  property.</summary>
    {class} property SmallChangeProperty: DNAutomationProperty read __fakeFieldGet_SmallChangeProperty;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.RangeValuePatternIdentifiers')]
  DNRangeValuePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{E930664E-0162-3BE7-9B3C-E2530CB0F956}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRangeValuePatternIdentifiers = class(TDNGenericImport<DNRangeValuePatternIdentifiersClass, DNRangeValuePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNScrollItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02C52F01-886A-5B81-A1A5-66573BA58EE5}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ScrollItemPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.ScrollItemPatternIdentifiers')]
  DNScrollItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{52836380-ADE3-31B9-BBD7-8C7F2FC0EBB3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScrollItemPatternIdentifiers = class(TDNGenericImport<DNScrollItemPatternIdentifiersClass, DNScrollItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNScrollPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C6841B7-B032-5DB3-AF86-B6E06369EABE}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_HorizontalScrollPercentProperty: DNAutomationProperty;
   function __fakeFieldGet_HorizontalViewSizeProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticalScrollPercentProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticalViewSizeProperty: DNAutomationProperty;
   function __fakeFieldGet_HorizontallyScrollableProperty: DNAutomationProperty;
   function __fakeFieldGet_VerticallyScrollableProperty: DNAutomationProperty;
   function __fakeFieldGet_NoScroll: Double;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ScrollPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" />
    ///  property.</summary>
    {class} property HorizontalScrollPercentProperty: DNAutomationProperty read __fakeFieldGet_HorizontalScrollPercentProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" />
    ///  property.</summary>
    {class} property HorizontalViewSizeProperty: DNAutomationProperty read __fakeFieldGet_HorizontalViewSizeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" />
    ///  property.</summary>
    {class} property VerticalScrollPercentProperty: DNAutomationProperty read __fakeFieldGet_VerticalScrollPercentProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" />
    ///  property.</summary>
    {class} property VerticalViewSizeProperty: DNAutomationProperty read __fakeFieldGet_VerticalViewSizeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" />
    ///  property.</summary>
    {class} property HorizontallyScrollableProperty: DNAutomationProperty read __fakeFieldGet_HorizontallyScrollableProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" />
    ///  property.</summary>
    {class} property VerticallyScrollableProperty: DNAutomationProperty read __fakeFieldGet_VerticallyScrollableProperty;
    ///<summary>Specifies that scrolling should not be performed.</summary>
    {class} property NoScroll: Double read __fakeFieldGet_NoScroll;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.ScrollPatternIdentifiers')]
  DNScrollPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{F2B4BF52-7051-3A2A-ADBB-8694CE632389}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScrollPatternIdentifiers = class(TDNGenericImport<DNScrollPatternIdentifiersClass, DNScrollPatternIdentifiers>)
  public const
    ///<summary>Specifies that scrolling should not be performed.</summary>
   NoScroll = -1;
  end;

  //-------------namespace: System.Windows.Automation----------------
  DNSelectionItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A3A8790-371C-50CD-A030-E25C419B99CE}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_IsSelectedProperty: DNAutomationProperty;
   function __fakeFieldGet_SelectionContainerProperty: DNAutomationProperty;
   function __fakeFieldGet_ElementAddedToSelectionEvent: DNAutomationEvent;
   function __fakeFieldGet_ElementRemovedFromSelectionEvent: DNAutomationEvent;
   function __fakeFieldGet_ElementSelectedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.SelectionItemPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" />
    ///  property.</summary>
    {class} property IsSelectedProperty: DNAutomationProperty read __fakeFieldGet_IsSelectedProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" />
    ///  property.</summary>
    {class} property SelectionContainerProperty: DNAutomationProperty read __fakeFieldGet_SelectionContainerProperty;
    ///<summary>Identifies the event raised when an item is added to a collection of selected items.</summary>
    {class} property ElementAddedToSelectionEvent: DNAutomationEvent read __fakeFieldGet_ElementAddedToSelectionEvent;
    ///<summary>Identifies the event raised when an item is removed from a collection of selected items.</summary>
    {class} property ElementRemovedFromSelectionEvent: DNAutomationEvent read __fakeFieldGet_ElementRemovedFromSelectionEvent;
    ///<summary>Identifies the event that is raised when a single item is selected (causing all previously selected items to become deselected).</summary>
    {class} property ElementSelectedEvent: DNAutomationEvent read __fakeFieldGet_ElementSelectedEvent;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.SelectionItemPatternIdentifiers')]
  DNSelectionItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{F873DDF6-4E33-3882-8476-E437A7CC86C7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSelectionItemPatternIdentifiers = class(TDNGenericImport<DNSelectionItemPatternIdentifiersClass, DNSelectionItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNSelectionPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F749D7B9-3434-5A42-B9E7-ECD39FA8E62B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_SelectionProperty: DNAutomationProperty;
   function __fakeFieldGet_CanSelectMultipleProperty: DNAutomationProperty;
   function __fakeFieldGet_IsSelectionRequiredProperty: DNAutomationProperty;
   function __fakeFieldGet_InvalidatedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.SelectionPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the property that gets the selected items in a container.</summary>
    {class} property SelectionProperty: DNAutomationProperty read __fakeFieldGet_SelectionProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" />
    ///  property.</summary>
    {class} property CanSelectMultipleProperty: DNAutomationProperty read __fakeFieldGet_CanSelectMultipleProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" />
    ///  property.</summary>
    {class} property IsSelectionRequiredProperty: DNAutomationProperty read __fakeFieldGet_IsSelectionRequiredProperty;
    ///<summary>Identifies the event that is raised when a selection in a container has changed significantly and requires sending more addition and removal events than the <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
    ///  constant permits.</summary>
    {class} property InvalidatedEvent: DNAutomationEvent read __fakeFieldGet_InvalidatedEvent;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.SelectionPatternIdentifiers')]
  DNSelectionPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{7E95156F-0150-3731-9C2E-68C7E81A08A0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSelectionPatternIdentifiers = class(TDNGenericImport<DNSelectionPatternIdentifiersClass, DNSelectionPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNSynchronizedInputPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{659FFD2A-39D2-5C5B-9A8B-B1F6F7869C9B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_InputReachedTargetEvent: DNAutomationEvent;
   function __fakeFieldGet_InputReachedOtherElementEvent: DNAutomationEvent;
   function __fakeFieldGet_InputDiscardedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.SynchronizedInputPattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the event raised when the input was received by the element currently listening for the input.</summary>
    {class} property InputReachedTargetEvent: DNAutomationEvent read __fakeFieldGet_InputReachedTargetEvent;
    ///<summary>Identifies the event raised when the input was received by an element other than the one currently listening for the input.</summary>
    {class} property InputReachedOtherElementEvent: DNAutomationEvent read __fakeFieldGet_InputReachedOtherElementEvent;
    ///<summary>Identifies the event raised when the input was discarded by WPF. </summary>
    {class} property InputDiscardedEvent: DNAutomationEvent read __fakeFieldGet_InputDiscardedEvent;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.SynchronizedInputPatternIdentifiers')]
  DNSynchronizedInputPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{3F4930A8-58DC-3F06-9A7B-E4E370472481}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSynchronizedInputPatternIdentifiers = class(TDNGenericImport<DNSynchronizedInputPatternIdentifiersClass, DNSynchronizedInputPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTableItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73667C77-996E-59C0-BB6B-2F20864C3738}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowHeaderItemsProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnHeaderItemsProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.TableItemPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the property that retrieves all the row headers associated with a table item or cell.</summary>
    {class} property RowHeaderItemsProperty: DNAutomationProperty read __fakeFieldGet_RowHeaderItemsProperty;
    ///<summary>Identifies the property that retrieves all the column headers associated with a table item or cell.</summary>
    {class} property ColumnHeaderItemsProperty: DNAutomationProperty read __fakeFieldGet_ColumnHeaderItemsProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.TableItemPatternIdentifiers')]
  DNTableItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{2747B07A-064B-3D6D-A784-6B580A4235BC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTableItemPatternIdentifiers = class(TDNGenericImport<DNTableItemPatternIdentifiersClass, DNTableItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTablePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8123735-9A3E-574B-88DD-F5FF7F6F28B9}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_RowHeadersProperty: DNAutomationProperty;
   function __fakeFieldGet_ColumnHeadersProperty: DNAutomationProperty;
   function __fakeFieldGet_RowOrColumnMajorProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.TablePattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" />
    ///  method.</summary>
    {class} property RowHeadersProperty: DNAutomationProperty read __fakeFieldGet_RowHeadersProperty;
    ///<summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" />
    ///  method.</summary>
    {class} property ColumnHeadersProperty: DNAutomationProperty read __fakeFieldGet_ColumnHeadersProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" />
    ///  property.</summary>
    {class} property RowOrColumnMajorProperty: DNAutomationProperty read __fakeFieldGet_RowOrColumnMajorProperty;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.TablePattern" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.TablePatternIdentifiers')]
  DNTablePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{68D82BB7-71F3-3368-B8E0-207DEA5EABA0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTablePatternIdentifiers = class(TDNGenericImport<DNTablePatternIdentifiersClass, DNTablePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTextPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B2030608-5713-5BF0-ADE7-8C7EC61B7E33}']
  { static fields getter & setter } 

   function __fakeFieldGet_MixedAttributeValue: DDN.mscorlib.DNObject;
   function __fakeFieldGet_AnimationStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_BackgroundColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_BulletStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_CapStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_CultureAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontNameAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontSizeAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_FontWeightAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_ForegroundColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_HorizontalTextAlignmentAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationFirstLineAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationLeadingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IndentationTrailingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsHiddenAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsItalicAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsReadOnlyAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsSubscriptAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_IsSuperscriptAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginBottomAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginLeadingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginTopAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_MarginTrailingAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OutlineStylesAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OverlineColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_OverlineStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_StrikethroughColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_StrikethroughStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_TabsAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_TextFlowDirectionsAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_UnderlineColorAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_UnderlineStyleAttribute: DNAutomationTextAttribute;
   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_TextSelectionChangedEvent: DNAutomationEvent;
   function __fakeFieldGet_TextChangedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</summary>
    {class} property MixedAttributeValue: DDN.mscorlib.DNObject read __fakeFieldGet_MixedAttributeValue;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.Text.AnimationStyle" />
    ///  attribute of a text range.</summary>
    {class} property AnimationStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_AnimationStyleAttribute;
    ///<summary>Identifies the BackgroundColor attribute of a text range.</summary>
    {class} property BackgroundColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_BackgroundColorAttribute;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" />
    ///  attribute of a text range. </summary>
    {class} property BulletStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_BulletStyleAttribute;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.Text.CapStyle" />
    ///  attribute of a text range.</summary>
    {class} property CapStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_CapStyleAttribute;
    ///<summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />
    ///  ) attribute of a text range down to the sub-language level; for example, Frenchâ€“Switzerland (fr-CH) instead of French (fr). </summary>
    {class} property CultureAttribute: DNAutomationTextAttribute read __fakeFieldGet_CultureAttribute;
    ///<summary>Identifies the FontName attribute of a text range. </summary>
    {class} property FontNameAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontNameAttribute;
    ///<summary>Identifies the FontSize attribute of a text range. </summary>
    {class} property FontSizeAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontSizeAttribute;
    ///<summary>Identifies the FontWeight attribute of a text range.</summary>
    {class} property FontWeightAttribute: DNAutomationTextAttribute read __fakeFieldGet_FontWeightAttribute;
    ///<summary>Identifies the ForegroundColor (COLORREF) attribute of a text range. </summary>
    {class} property ForegroundColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_ForegroundColorAttribute;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" />
    ///  attribute of a text range. </summary>
    {class} property HorizontalTextAlignmentAttribute: DNAutomationTextAttribute read __fakeFieldGet_HorizontalTextAlignmentAttribute;
    ///<summary>Identifies the IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) attribute of a text range.</summary>
    {class} property IndentationFirstLineAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationFirstLineAttribute;
    ///<summary>Identifies the IndentationLeading (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) attribute of a text range. </summary>
    {class} property IndentationLeadingAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationLeadingAttribute;
    ///<summary>Identifies the IndentationTrailing (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />
    ///  ) attribute of a text range. </summary>
    {class} property IndentationTrailingAttribute: DNAutomationTextAttribute read __fakeFieldGet_IndentationTrailingAttribute;
    ///<summary>Identifies the IsHidden attribute of a text range. </summary>
    {class} property IsHiddenAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsHiddenAttribute;
    ///<summary>Identifies the IsItalic (<see cref="T:System.Windows.FontStyle" />
    ///  ) attribute of a text range. </summary>
    {class} property IsItalicAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsItalicAttribute;
    ///<summary>Identifies the IsReadOnly attribute of a text range.</summary>
    {class} property IsReadOnlyAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsReadOnlyAttribute;
    ///<summary>Identifies the IsSubscript (<see cref="T:System.Windows.FontVariants" />
    ///  ) attribute of a text range.</summary>
    {class} property IsSubscriptAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsSubscriptAttribute;
    ///<summary>Identifies the IsSuperscript (<see cref="T:System.Windows.FontVariants" />
    ///  ) attribute of a text range.</summary>
    {class} property IsSuperscriptAttribute: DNAutomationTextAttribute read __fakeFieldGet_IsSuperscriptAttribute;
    ///<summary>Identifies the MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) attribute of a text range.</summary>
    {class} property MarginBottomAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginBottomAttribute;
    ///<summary>Identifies the MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) attribute of a text range.</summary>
    {class} property MarginLeadingAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginLeadingAttribute;
    ///<summary>Identifies the MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) attribute of a text range.</summary>
    {class} property MarginTopAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginTopAttribute;
    ///<summary>Identifies the MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />
    ///  ) attribute of a text range.</summary>
    {class} property MarginTrailingAttribute: DNAutomationTextAttribute read __fakeFieldGet_MarginTrailingAttribute;
    ///<summary>Identifies the OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />
    ///  ) attribute of a text range.</summary>
    {class} property OutlineStylesAttribute: DNAutomationTextAttribute read __fakeFieldGet_OutlineStylesAttribute;
    ///<summary>Identifies the OverlineColor attribute of a text range.</summary>
    {class} property OverlineColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_OverlineColorAttribute;
    ///<summary>Identifies the OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) attribute of a text range.</summary>
    {class} property OverlineStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_OverlineStyleAttribute;
    ///<summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    {class} property StrikethroughColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_StrikethroughColorAttribute;
    ///<summary>Identifies the StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) attribute of a text range.</summary>
    {class} property StrikethroughStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_StrikethroughStyleAttribute;
    ///<summary>Identifies the Tabs attribute of a text range.</summary>
    {class} property TabsAttribute: DNAutomationTextAttribute read __fakeFieldGet_TabsAttribute;
    ///<summary>Identifies the TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />
    ///  ) attribute of a text range.</summary>
    {class} property TextFlowDirectionsAttribute: DNAutomationTextAttribute read __fakeFieldGet_TextFlowDirectionsAttribute;
    ///<summary>Identifies the UnderlineColor attribute of a text range. </summary>
    {class} property UnderlineColorAttribute: DNAutomationTextAttribute read __fakeFieldGet_UnderlineColorAttribute;
    ///<summary>Identifies the UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />
    ///  ) attribute of a text range. </summary>
    {class} property UnderlineStyleAttribute: DNAutomationTextAttribute read __fakeFieldGet_UnderlineStyleAttribute;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.TextPattern" />
    ///  pattern. </summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the event raised whenever the text selection is modified. </summary>
    {class} property TextSelectionChangedEvent: DNAutomationEvent read __fakeFieldGet_TextSelectionChangedEvent;
    ///<summary>Identifies the event raised whenever textual content is modified.</summary>
    {class} property TextChangedEvent: DNAutomationEvent read __fakeFieldGet_TextChangedEvent;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITextProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.TextPatternIdentifiers')]
  DNTextPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{D25DD3AC-A5F0-30B9-B79D-BE5AC367D19E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextPatternIdentifiers = class(TDNGenericImport<DNTextPatternIdentifiersClass, DNTextPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTogglePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6A528D56-1258-5370-93C1-A6C4A058E377}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ToggleStateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.TogglePattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ToggleState" />
    ///  of the UI Automation element.</summary>
    {class} property ToggleStateProperty: DNAutomationProperty read __fakeFieldGet_ToggleStateProperty;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IToggleProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.TogglePatternIdentifiers')]
  DNTogglePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{49DB8B54-1F06-3E8D-B0C1-310B21107335}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTogglePatternIdentifiers = class(TDNGenericImport<DNTogglePatternIdentifiersClass, DNTogglePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNTransformPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{168B2DB4-C277-5274-A1A1-AD4931091E8D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CanMoveProperty: DNAutomationProperty;
   function __fakeFieldGet_CanResizeProperty: DNAutomationProperty;
   function __fakeFieldGet_CanRotateProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.TransformPattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" />
    ///  property.</summary>
    {class} property CanMoveProperty: DNAutomationProperty read __fakeFieldGet_CanMoveProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" />
    ///  property.</summary>
    {class} property CanResizeProperty: DNAutomationProperty read __fakeFieldGet_CanResizeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" />
    ///  property.</summary>
    {class} property CanRotateProperty: DNAutomationProperty read __fakeFieldGet_CanRotateProperty;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITransformProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.TransformPatternIdentifiers')]
  DNTransformPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{A0D6A33D-51FF-331D-BBA6-44492432F4D6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransformPatternIdentifiers = class(TDNGenericImport<DNTransformPatternIdentifiersClass, DNTransformPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNValuePatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E0751D3-432C-5F5C-B5E7-774893D8DF87}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_ValueProperty: DNAutomationProperty;
   function __fakeFieldGet_IsReadOnlyProperty: DNAutomationProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.ValuePattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" />
    ///  property.</summary>
    {class} property ValueProperty: DNAutomationProperty read __fakeFieldGet_ValueProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" />
    ///  property.</summary>
    {class} property IsReadOnlyProperty: DNAutomationProperty read __fakeFieldGet_IsReadOnlyProperty;

  end;

  ///<summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IValueProvider" />
  ///  .</summary>
  [DNTypeName('System.Windows.Automation.ValuePatternIdentifiers')]
  DNValuePatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{6778D9E8-C4C4-3CB2-98AB-050CBA646BEB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValuePatternIdentifiers = class(TDNGenericImport<DNValuePatternIdentifiersClass, DNValuePatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNVirtualizedItemPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E662C82-3EB2-5529-9A64-19EE0300DAB3}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.VirtualizedItemPattern" />
    ///  control pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.VirtualizedItemPatternIdentifiers')]
  DNVirtualizedItemPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{92DC6C4E-63A4-3EA5-A618-DFB4107816B0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVirtualizedItemPatternIdentifiers = class(TDNGenericImport<DNVirtualizedItemPatternIdentifiersClass, DNVirtualizedItemPatternIdentifiers>) end;

  //-------------namespace: System.Windows.Automation----------------
  DNWindowPatternIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BB592965-E3E9-5205-9143-4BC82E80EE9C}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pattern: DNAutomationPattern;
   function __fakeFieldGet_CanMaximizeProperty: DNAutomationProperty;
   function __fakeFieldGet_CanMinimizeProperty: DNAutomationProperty;
   function __fakeFieldGet_IsModalProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowVisualStateProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowInteractionStateProperty: DNAutomationProperty;
   function __fakeFieldGet_IsTopmostProperty: DNAutomationProperty;
   function __fakeFieldGet_WindowOpenedEvent: DNAutomationEvent;
   function __fakeFieldGet_WindowClosedEvent: DNAutomationEvent;

  { static fields } 

    ///<summary>Identifies the <see cref="T:System.Windows.Automation.WindowPattern" />
    ///  pattern.</summary>
    {class} property Pattern: DNAutomationPattern read __fakeFieldGet_Pattern;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" />
    ///  property.</summary>
    {class} property CanMaximizeProperty: DNAutomationProperty read __fakeFieldGet_CanMaximizeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" />
    ///  property.</summary>
    {class} property CanMinimizeProperty: DNAutomationProperty read __fakeFieldGet_CanMinimizeProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" />
    ///  property.</summary>
    {class} property IsModalProperty: DNAutomationProperty read __fakeFieldGet_IsModalProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" />
    ///  property.</summary>
    {class} property WindowVisualStateProperty: DNAutomationProperty read __fakeFieldGet_WindowVisualStateProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" />
    ///  property.</summary>
    {class} property WindowInteractionStateProperty: DNAutomationProperty read __fakeFieldGet_WindowInteractionStateProperty;
    ///<summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" />
    ///  property.</summary>
    {class} property IsTopmostProperty: DNAutomationProperty read __fakeFieldGet_IsTopmostProperty;
    ///<summary>Identifies the event that is raised when a window is opened.</summary>
    {class} property WindowOpenedEvent: DNAutomationEvent read __fakeFieldGet_WindowOpenedEvent;
    ///<summary>Identifies the event that is raised when a window is closed.</summary>
    {class} property WindowClosedEvent: DNAutomationEvent read __fakeFieldGet_WindowClosedEvent;

  end;

  ///<summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IWindowProvider" />
  ///  . </summary>
  [DNTypeName('System.Windows.Automation.WindowPatternIdentifiers')]
  DNWindowPatternIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{04D15716-CCA8-3B33-A8E1-51856F440E7C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWindowPatternIdentifiers = class(TDNGenericImport<DNWindowPatternIdentifiersClass, DNWindowPatternIdentifiers>) end;


implementation


initialization
  LoadAssemblyModule('WPF\UIAutomationTypes.dll', True);

finalization

end.
