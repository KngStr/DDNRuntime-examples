//----------------------------------------------------------------------------
//  System.Private.CoreLib.dll: System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Private.CoreLib
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Private.CoreLib;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.InitNETCore;

type

{ types } 

  SByte = ShortInt;
  PSByte = PShortInt;
  PInt16 = ^SmallInt;
  PUInt16 = ^Word;
  PInt32 = ^Integer;
  PUInt32 = ^Cardinal;

type

{ enums }

  //-------------namespace: System----------------
  [DNTypeName('System.AttributeTargets')]
  DNAttributeTargets = type Integer;
  DNAttributeTargetsHelper = record helper for DNAttributeTargets
  public const
    Assembly = 1;
    Module = 2;
    Class_ = 4;
    Struct = 8;
    Enum = 16;
    Constructor_ = 32;
    Method = 64;
    Property_ = 128;
    Field = 256;
    Event = 512;
    Interface_ = 1024;
    Parameter = 2048;
    Delegate = 4096;
    ReturnValue = 8192;
    GenericParameter = 16384;
    All = 32767;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Base64FormattingOptions')]
  DNBase64FormattingOptions = type Integer;
  DNBase64FormattingOptionsHelper = record helper for DNBase64FormattingOptions
  public const
    None = 0;
    InsertLineBreaks = 1;
  end;


  //-------------namespace: System.Buffers----------------
  [DNTypeName('System.Buffers.OperationStatus')]
  DNOperationStatus = type Integer;
  DNOperationStatusHelper = record helper for DNOperationStatus
  public const
    Done = 0;
    DestinationTooSmall = 1;
    NeedMoreData = 2;
    InvalidData = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.EditorBrowsableState')]
  DNEditorBrowsableState = type Integer;
  DNEditorBrowsableStateHelper = record helper for DNEditorBrowsableState
  public const
    Always = 0;
    Never = 1;
    Advanced = 2;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyHashAlgorithm')]
  DNAssemblyHashAlgorithm = type Integer;
  DNAssemblyHashAlgorithmHelper = record helper for DNAssemblyHashAlgorithm
  public const
    None = 0;
    MD5 = 32771;
    SHA1 = 32772;
    SHA256 = 32780;
    SHA384 = 32781;
    SHA512 = 32782;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyVersionCompatibility')]
  DNAssemblyVersionCompatibility = type Integer;
  DNAssemblyVersionCompatibilityHelper = record helper for DNAssemblyVersionCompatibility
  public const
    SameMachine = 1;
    SameProcess = 2;
    SameDomain = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DateTimeKind')]
  DNDateTimeKind = type Integer;
  DNDateTimeKindHelper = record helper for DNDateTimeKind
  public const
    Unspecified = 0;
    Utc = 1;
    Local = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DayOfWeek')]
  DNDayOfWeek = type Integer;
  DNDayOfWeekHelper = record helper for DNDayOfWeek
  public const
    Sunday = 0;
    Monday = 1;
    Tuesday = 2;
    Wednesday = 3;
    Thursday = 4;
    Friday = 5;
    Saturday = 6;
  end;


  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  [DNTypeName('System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes')]
  DNDynamicallyAccessedMemberTypes = type Integer;
  DNDynamicallyAccessedMemberTypesHelper = record helper for DNDynamicallyAccessedMemberTypes
  public const
    None = 0;
    PublicParameterlessConstructor = 1;
    PublicConstructors = 3;
    NonPublicConstructors = 4;
    PublicMethods = 8;
    NonPublicMethods = 16;
    PublicFields = 32;
    NonPublicFields = 64;
    PublicNestedTypes = 128;
    NonPublicNestedTypes = 256;
    PublicProperties = 512;
    NonPublicProperties = 1024;
    PublicEvents = 2048;
    NonPublicEvents = 4096;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics.Contracts----------------
  [DNTypeName('System.Diagnostics.Contracts.ContractFailureKind')]
  DNContractFailureKind = type Integer;
  DNContractFailureKindHelper = record helper for DNContractFailureKind
  public const
    Precondition = 0;
    Postcondition = 1;
    PostconditionOnException = 2;
    Invariant = 3;
    Assert = 4;
    Assume = 5;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggableAttribute+DebuggingModes')]
  DNDebuggableAttribute_DebuggingModes = type Integer;
  DNDebuggableAttribute_DebuggingModesHelper = record helper for DNDebuggableAttribute_DebuggingModes
  public const
    None = 0;
    Default_ = 1;
    IgnoreSymbolStoreSequencePoints = 2;
    EnableEditAndContinue = 4;
    DisableOptimizations = 256;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggerBrowsableState')]
  DNDebuggerBrowsableState = type Integer;
  DNDebuggerBrowsableStateHelper = record helper for DNDebuggerBrowsableState
  public const
    Never = 0;
    Collapsed = 2;
    RootHidden = 3;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventActivityOptions')]
  DNEventActivityOptions = type Integer;
  DNEventActivityOptionsHelper = record helper for DNEventActivityOptions
  public const
    None = 0;
    Disable = 2;
    Recursive = 4;
    Detachable = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventChannel')]
  DNEventChannel = type Integer;
  DNEventChannelHelper = record helper for DNEventChannel
  public const
    None = 0;
    Admin = 16;
    Operational = 17;
    Analytic = 18;
    Debug = 19;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventCommand')]
  DNEventCommand = type Integer;
  DNEventCommandHelper = record helper for DNEventCommand
  public const
    Update = 0;
    Disable = -3;
    Enable = -2;
    SendManifest = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldFormat')]
  DNEventFieldFormat = type Integer;
  DNEventFieldFormatHelper = record helper for DNEventFieldFormat
  public const
    Default_ = 0;
    String_ = 2;
    Boolean = 3;
    Hexadecimal = 4;
    Xml = 11;
    Json = 12;
    HResult = 15;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldTags')]
  DNEventFieldTags = type Integer;
  DNEventFieldTagsHelper = record helper for DNEventFieldTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventKeywords')]
  DNEventKeywords = type Integer;
  DNEventKeywordsHelper = record helper for DNEventKeywords
  public const
    None = 0;
    MicrosoftTelemetry = 562949953421312;
    WdiContext = 562949953421312;
    WdiDiagnostic = 1125899906842624;
    Sqm = 2251799813685248;
    AuditFailure = 4503599627370496;
    CorrelationHint = 4503599627370496;
    AuditSuccess = 9007199254740992;
    EventLogClassic = 36028797018963968;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventLevel')]
  DNEventLevel = type Integer;
  DNEventLevelHelper = record helper for DNEventLevel
  public const
    LogAlways = 0;
    Critical = 1;
    Error = 2;
    Warning = 3;
    Informational = 4;
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventManifestOptions')]
  DNEventManifestOptions = type Integer;
  DNEventManifestOptionsHelper = record helper for DNEventManifestOptions
  public const
    None = 0;
    Strict_ = 1;
    AllCultures = 2;
    OnlyIfNeededForRegistration = 4;
    AllowEventSourceOverride = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventOpcode')]
  DNEventOpcode = type Integer;
  DNEventOpcodeHelper = record helper for DNEventOpcode
  public const
    Info = 0;
    Start = 1;
    Stop = 2;
    DataCollectionStart = 3;
    DataCollectionStop = 4;
    Extension = 5;
    Reply = 6;
    Resume = 7;
    Suspend = 8;
    Send = 9;
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventSourceSettings')]
  DNEventSourceSettings = type Integer;
  DNEventSourceSettingsHelper = record helper for DNEventSourceSettings
  public const
    Default_ = 0;
    ThrowOnEventWriteErrors = 1;
    EtwManifestEventFormat = 4;
    EtwSelfDescribingEventFormat = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTags')]
  DNEventTags = type Integer;
  DNEventTagsHelper = record helper for DNEventTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTask')]
  DNEventTask = type Integer;
  DNEventTaskHelper = record helper for DNEventTask
  public const
    None = 0;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolder')]
  DNEnvironment_SpecialFolder = type Integer;
  DNEnvironment_SpecialFolderHelper = record helper for DNEnvironment_SpecialFolder
  public const
    Desktop = 0;
    Programs = 2;
    MyDocuments = 5;
    Personal = 5;
    Favorites = 6;
    Startup = 7;
    Recent = 8;
    SendTo = 9;
    StartMenu = 11;
    MyMusic = 13;
    MyVideos = 14;
    DesktopDirectory = 16;
    MyComputer = 17;
    NetworkShortcuts = 19;
    Fonts = 20;
    Templates = 21;
    CommonStartMenu = 22;
    CommonPrograms = 23;
    CommonStartup = 24;
    CommonDesktopDirectory = 25;
    ApplicationData = 26;
    PrinterShortcuts = 27;
    LocalApplicationData = 28;
    InternetCache = 32;
    Cookies = 33;
    History = 34;
    CommonApplicationData = 35;
    Windows = 36;
    System = 37;
    ProgramFiles = 38;
    MyPictures = 39;
    UserProfile = 40;
    SystemX86 = 41;
    ProgramFilesX86 = 42;
    CommonProgramFiles = 43;
    CommonProgramFilesX86 = 44;
    CommonTemplates = 45;
    CommonDocuments = 46;
    CommonAdminTools = 47;
    AdminTools = 48;
    CommonMusic = 53;
    CommonPictures = 54;
    CommonVideos = 55;
    Resources = 56;
    LocalizedResources = 57;
    CommonOemLinks = 58;
    CDBurning = 59;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolderOption')]
  DNEnvironment_SpecialFolderOption = type Integer;
  DNEnvironment_SpecialFolderOptionHelper = record helper for DNEnvironment_SpecialFolderOption
  public const
    None = 0;
    DoNotVerify = 16384;
    Create = 32768;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.EnvironmentVariableTarget')]
  DNEnvironmentVariableTarget = type Integer;
  DNEnvironmentVariableTargetHelper = record helper for DNEnvironmentVariableTarget
  public const
    Process = 0;
    User = 1;
    Machine = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCCollectionMode')]
  DNGCCollectionMode = type Integer;
  DNGCCollectionModeHelper = record helper for DNGCCollectionMode
  public const
    Default_ = 0;
    Forced = 1;
    Optimized = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCKind')]
  DNGCKind = type Integer;
  DNGCKindHelper = record helper for DNGCKind
  public const
    Any = 0;
    Ephemeral = 1;
    FullBlocking = 2;
    Background = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCNotificationStatus')]
  DNGCNotificationStatus = type Integer;
  DNGCNotificationStatusHelper = record helper for DNGCNotificationStatus
  public const
    Succeeded = 0;
    Failed = 1;
    Canceled = 2;
    Timeout = 3;
    NotApplicable = 4;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarAlgorithmType')]
  DNCalendarAlgorithmType = type Integer;
  DNCalendarAlgorithmTypeHelper = record helper for DNCalendarAlgorithmType
  public const
    Unknown = 0;
    SolarCalendar = 1;
    LunarCalendar = 2;
    LunisolarCalendar = 3;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarWeekRule')]
  DNCalendarWeekRule = type Integer;
  DNCalendarWeekRuleHelper = record helper for DNCalendarWeekRule
  public const
    FirstDay = 0;
    FirstFullWeek = 1;
    FirstFourDayWeek = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CompareOptions')]
  DNCompareOptions = type Integer;
  DNCompareOptionsHelper = record helper for DNCompareOptions
  public const
    None = 0;
    IgnoreCase = 1;
    IgnoreNonSpace = 2;
    IgnoreSymbols = 4;
    IgnoreKanaType = 8;
    IgnoreWidth = 16;
    OrdinalIgnoreCase = 268435456;
    StringSort = 536870912;
    Ordinal = 1073741824;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CultureTypes')]
  DNCultureTypes = type Integer;
  DNCultureTypesHelper = record helper for DNCultureTypes
  public const
    NeutralCultures = 1;
    SpecificCultures = 2;
    InstalledWin32Cultures = 4;
    AllCultures = 7;
    UserCustomCulture = 8;
    ReplacementCultures = 16;
    WindowsOnlyCultures = 32;
    FrameworkCultures = 64;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DateTimeStyles')]
  DNDateTimeStyles = type Integer;
  DNDateTimeStylesHelper = record helper for DNDateTimeStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowInnerWhite = 4;
    AllowWhiteSpaces = 7;
    NoCurrentDateDefault = 8;
    AdjustToUniversal = 16;
    AssumeLocal = 32;
    AssumeUniversal = 64;
    RoundtripKind = 128;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DigitShapes')]
  DNDigitShapes = type Integer;
  DNDigitShapesHelper = record helper for DNDigitShapes
  public const
    Context = 0;
    None = 1;
    NativeNational = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.GregorianCalendarTypes')]
  DNGregorianCalendarTypes = type Integer;
  DNGregorianCalendarTypesHelper = record helper for DNGregorianCalendarTypes
  public const
    Localized = 1;
    USEnglish = 2;
    MiddleEastFrench = 9;
    Arabic = 10;
    TransliteratedEnglish = 11;
    TransliteratedFrench = 12;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.NumberStyles')]
  DNNumberStyles = type Integer;
  DNNumberStylesHelper = record helper for DNNumberStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowLeadingSign = 4;
    Integer = 7;
    AllowTrailingSign = 8;
    AllowParentheses = 16;
    AllowDecimalPoint = 32;
    AllowThousands = 64;
    Number = 111;
    AllowExponent = 128;
    Float = 167;
    AllowCurrencySymbol = 256;
    Currency = 383;
    Any = 511;
    AllowHexSpecifier = 512;
    HexNumber = 515;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.TimeSpanStyles')]
  DNTimeSpanStyles = type Integer;
  DNTimeSpanStylesHelper = record helper for DNTimeSpanStyles
  public const
    None = 0;
    AssumeNegative = 1;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.UnicodeCategory')]
  DNUnicodeCategory = type Integer;
  DNUnicodeCategoryHelper = record helper for DNUnicodeCategory
  public const
    UppercaseLetter = 0;
    LowercaseLetter = 1;
    TitlecaseLetter = 2;
    ModifierLetter = 3;
    OtherLetter = 4;
    NonSpacingMark = 5;
    SpacingCombiningMark = 6;
    EnclosingMark = 7;
    DecimalDigitNumber = 8;
    LetterNumber = 9;
    OtherNumber = 10;
    SpaceSeparator = 11;
    LineSeparator = 12;
    ParagraphSeparator = 13;
    Control = 14;
    Format = 15;
    Surrogate = 16;
    PrivateUse = 17;
    ConnectorPunctuation = 18;
    DashPunctuation = 19;
    OpenPunctuation = 20;
    ClosePunctuation = 21;
    InitialQuotePunctuation = 22;
    FinalQuotePunctuation = 23;
    OtherPunctuation = 24;
    MathSymbol = 25;
    CurrencySymbol = 26;
    ModifierSymbol = 27;
    OtherSymbol = 28;
    OtherNotAssigned = 29;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAccess')]
  DNFileAccess = type Integer;
  DNFileAccessHelper = record helper for DNFileAccess
  public const
    Read = 1;
    Write = 2;
    ReadWrite = 3;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAttributes')]
  DNFileAttributes = type Integer;
  DNFileAttributesHelper = record helper for DNFileAttributes
  public const
    ReadOnly = 1;
    Hidden = 2;
    System = 4;
    Directory = 16;
    Archive = 32;
    Device = 64;
    Normal = 128;
    Temporary = 256;
    SparseFile = 512;
    ReparsePoint = 1024;
    Compressed = 2048;
    Offline = 4096;
    NotContentIndexed = 8192;
    Encrypted = 16384;
    IntegrityStream = 32768;
    NoScrubData = 131072;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileMode')]
  DNFileMode = type Integer;
  DNFileModeHelper = record helper for DNFileMode
  public const
    CreateNew = 1;
    Create = 2;
    Open = 3;
    OpenOrCreate = 4;
    Truncate = 5;
    Append = 6;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileOptions')]
  DNFileOptions = type Integer;
  DNFileOptionsHelper = record helper for DNFileOptions
  public const
    None = 0;
    Encrypted = 16384;
    DeleteOnClose = 67108864;
    SequentialScan = 134217728;
    RandomAccess = 268435456;
    Asynchronous = 1073741824;
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileShare')]
  DNFileShare = type Integer;
  DNFileShareHelper = record helper for DNFileShare
  public const
    None = 0;
    Read = 1;
    Write = 2;
    ReadWrite = 3;
    Delete = 4;
    Inheritable = 16;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.HandleInheritability')]
  DNHandleInheritability = type Integer;
  DNHandleInheritabilityHelper = record helper for DNHandleInheritability
  public const
    None = 0;
    Inheritable = 1;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.SeekOrigin')]
  DNSeekOrigin = type Integer;
  DNSeekOriginHelper = record helper for DNSeekOrigin
  public const
    Begin_ = 0;
    Current = 1;
    End_ = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.LoaderOptimization')]
  DNLoaderOptimization = type Integer;
  DNLoaderOptimizationHelper = record helper for DNLoaderOptimization
  public const
    NotSpecified = 0;
    SingleDomain = 1;
    MultiDomain = 2;
    DomainMask = 3;
    MultiDomainHost = 3;
    DisallowBindings = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.MidpointRounding')]
  DNMidpointRounding = type Integer;
  DNMidpointRoundingHelper = record helper for DNMidpointRounding
  public const
    ToEven = 0;
    AwayFromZero = 1;
    ToZero = 2;
    ToNegativeInfinity = 3;
    ToPositiveInfinity = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.PlatformID')]
  DNPlatformID = type Integer;
  DNPlatformIDHelper = record helper for DNPlatformID
  public const
    Win32S = 0;
    Win32Windows = 1;
    Win32NT = 2;
    WinCE = 3;
    Unix = 4;
    Xbox = 5;
    MacOSX = 6;
    Other = 7;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyContentType')]
  DNAssemblyContentType = type Integer;
  DNAssemblyContentTypeHelper = record helper for DNAssemblyContentType
  public const
    Default_ = 0;
    WindowsRuntime = 1;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyNameFlags')]
  DNAssemblyNameFlags = type Integer;
  DNAssemblyNameFlagsHelper = record helper for DNAssemblyNameFlags
  public const
    None = 0;
    PublicKey = 1;
    Retargetable = 256;
    EnableJITcompileOptimizer = 16384;
    EnableJITcompileTracking = 32768;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.BindingFlags')]
  DNBindingFlags = type Integer;
  DNBindingFlagsHelper = record helper for DNBindingFlags
  public const
    Default_ = 0;
    IgnoreCase = 1;
    DeclaredOnly = 2;
    Instance = 4;
    Static_ = 8;
    Public_ = 16;
    NonPublic = 32;
    FlattenHierarchy = 64;
    InvokeMethod = 256;
    CreateInstance = 512;
    GetField = 1024;
    SetField = 2048;
    GetProperty = 4096;
    SetProperty = 8192;
    PutDispProperty = 16384;
    PutRefDispProperty = 32768;
    ExactBinding = 65536;
    SuppressChangeType = 131072;
    OptionalParamBinding = 262144;
    IgnoreReturn = 16777216;
    DoNotWrapExceptions = 33554432;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.CallingConventions')]
  DNCallingConventions = type Integer;
  DNCallingConventionsHelper = record helper for DNCallingConventions
  public const
    Standard = 1;
    VarArgs_ = 2;
    Any = 3;
    HasThis = 32;
    ExplicitThis = 64;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.AssemblyBuilderAccess')]
  DNAssemblyBuilderAccess = type Integer;
  DNAssemblyBuilderAccessHelper = record helper for DNAssemblyBuilderAccess
  public const
    Run = 1;
    RunAndCollect = 9;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.FlowControl')]
  DNFlowControl = type Integer;
  DNFlowControlHelper = record helper for DNFlowControl
  public const
    Branch = 0;
    Break = 1;
    Call = 2;
    Cond_Branch = 3;
    Meta = 4;
    Next = 5;
    Phi = 6;
    Return = 7;
    Throw = 8;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OpCodeType')]
  DNOpCodeType = type Integer;
  DNOpCodeTypeHelper = record helper for DNOpCodeType
  public const
    Annotation = 0;
    Macro = 1;
    Nternal = 2;
    Objmodel = 3;
    Prefix = 4;
    Primitive = 5;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OperandType')]
  DNOperandType = type Integer;
  DNOperandTypeHelper = record helper for DNOperandType
  public const
    InlineBrTarget = 0;
    InlineField = 1;
    InlineI = 2;
    InlineI8 = 3;
    InlineMethod = 4;
    InlineNone = 5;
    InlinePhi = 6;
    InlineR = 7;
    InlineSig = 9;
    InlineString = 10;
    InlineSwitch = 11;
    InlineTok = 12;
    InlineType = 13;
    InlineVar = 14;
    ShortInlineBrTarget = 15;
    ShortInlineI = 16;
    ShortInlineR = 17;
    ShortInlineVar = 18;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PackingSize')]
  DNPackingSize = type Integer;
  DNPackingSizeHelper = record helper for DNPackingSize
  public const
    Unspecified = 0;
    Size1 = 1;
    Size2 = 2;
    Size4 = 4;
    Size8 = 8;
    Size16 = 16;
    Size32 = 32;
    Size64 = 64;
    Size128 = 128;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PEFileKinds')]
  DNPEFileKinds = type Integer;
  DNPEFileKindsHelper = record helper for DNPEFileKinds
  public const
    Dll = 1;
    ConsoleApplication = 2;
    WindowApplication = 3;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.StackBehaviour')]
  DNStackBehaviour = type Integer;
  DNStackBehaviourHelper = record helper for DNStackBehaviour
  public const
    Pop0 = 0;
    Pop1 = 1;
    Pop1_pop1 = 2;
    Popi = 3;
    Popi_pop1 = 4;
    Popi_popi = 5;
    Popi_popi8 = 6;
    Popi_popi_popi = 7;
    Popi_popr4 = 8;
    Popi_popr8 = 9;
    Popref = 10;
    Popref_pop1 = 11;
    Popref_popi = 12;
    Popref_popi_popi = 13;
    Popref_popi_popi8 = 14;
    Popref_popi_popr4 = 15;
    Popref_popi_popr8 = 16;
    Popref_popi_popref = 17;
    Push0 = 18;
    Push1 = 19;
    Push1_push1 = 20;
    Pushi = 21;
    Pushi8 = 22;
    Pushr4 = 23;
    Pushr8 = 24;
    Pushref = 25;
    Varpop = 26;
    Varpush = 27;
    Popref_popi_pop1 = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.EventAttributes')]
  DNEventAttributes = type Integer;
  DNEventAttributesHelper = record helper for DNEventAttributes
  public const
    None = 0;
    SpecialName = 512;
    RTSpecialName = 1024;
    ReservedMask = 1024;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ExceptionHandlingClauseOptions')]
  DNExceptionHandlingClauseOptions = type Integer;
  DNExceptionHandlingClauseOptionsHelper = record helper for DNExceptionHandlingClauseOptions
  public const
    Clause = 0;
    Filter = 1;
    Finally_ = 2;
    Fault = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.FieldAttributes')]
  DNFieldAttributes = type Integer;
  DNFieldAttributesHelper = record helper for DNFieldAttributes
  public const
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    FieldAccessMask = 7;
    Static_ = 16;
    InitOnly = 32;
    Literal = 64;
    NotSerialized = 128;
    HasFieldRVA = 256;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasFieldMarshal = 4096;
    PinvokeImpl = 8192;
    HasDefault = 32768;
    ReservedMask = 38144;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.GenericParameterAttributes')]
  DNGenericParameterAttributes = type Integer;
  DNGenericParameterAttributesHelper = record helper for DNGenericParameterAttributes
  public const
    None = 0;
    Covariant = 1;
    Contravariant = 2;
    VarianceMask = 3;
    ReferenceTypeConstraint = 4;
    NotNullableValueTypeConstraint = 8;
    DefaultConstructorConstraint = 16;
    SpecialConstraintMask = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ImageFileMachine')]
  DNImageFileMachine = type Integer;
  DNImageFileMachineHelper = record helper for DNImageFileMachine
  public const
    I386 = 332;
    ARM = 452;
    IA64 = 512;
    AMD64 = 34404;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MemberTypes')]
  DNMemberTypes = type Integer;
  DNMemberTypesHelper = record helper for DNMemberTypes
  public const
    Constructor_ = 1;
    Event = 2;
    Field = 4;
    Method = 8;
    Property_ = 16;
    TypeInfo = 32;
    Custom = 64;
    NestedType = 128;
    All = 191;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodAttributes')]
  DNMethodAttributes = type Integer;
  DNMethodAttributesHelper = record helper for DNMethodAttributes
  public const
    ReuseSlot = 0;
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    MemberAccessMask = 7;
    UnmanagedExport = 8;
    Static_ = 16;
    Final_ = 32;
    Virtual_ = 64;
    HideBySig = 128;
    NewSlot = 256;
    VtableLayoutMask = 256;
    CheckAccessOnOverride = 512;
    Abstract_ = 1024;
    SpecialName = 2048;
    RTSpecialName = 4096;
    PinvokeImpl = 8192;
    HasSecurity = 16384;
    RequireSecObject = 32768;
    ReservedMask = 53248;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodImplAttributes')]
  DNMethodImplAttributes = type Integer;
  DNMethodImplAttributesHelper = record helper for DNMethodImplAttributes
  public const
    IL = 0;
    Managed = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
    CodeTypeMask = 3;
    Unmanaged = 4;
    ManagedMask = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    AggressiveOptimization = 512;
    InternalCall = 4096;
    MaxMethodImplVal = 65535;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ParameterAttributes')]
  DNParameterAttributes = type Integer;
  DNParameterAttributesHelper = record helper for DNParameterAttributes
  public const
    None = 0;
    In_ = 1;
    Out_ = 2;
    Lcid = 4;
    Retval = 8;
    Optional = 16;
    HasDefault = 4096;
    HasFieldMarshal = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 61440;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PortableExecutableKinds')]
  DNPortableExecutableKinds = type Integer;
  DNPortableExecutableKindsHelper = record helper for DNPortableExecutableKinds
  public const
    NotAPortableExecutableImage = 0;
    ILOnly = 1;
    Required32Bit = 2;
    PE32Plus = 4;
    Unmanaged32Bit = 8;
    Preferred32Bit = 16;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ProcessorArchitecture')]
  DNProcessorArchitecture = type Integer;
  DNProcessorArchitectureHelper = record helper for DNProcessorArchitecture
  public const
    None = 0;
    MSIL = 1;
    X86 = 2;
    IA64 = 3;
    Amd64 = 4;
    Arm = 5;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    None = 0;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasDefault = 4096;
    Reserved2 = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 62464;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceAttributes')]
  DNResourceAttributes = type Integer;
  DNResourceAttributesHelper = record helper for DNResourceAttributes
  public const
    Public_ = 1;
    Private_ = 2;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceLocation')]
  DNResourceLocation = type Integer;
  DNResourceLocationHelper = record helper for DNResourceLocation
  public const
    Embedded = 1;
    ContainedInAnotherAssembly = 2;
    ContainedInManifestFile = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.TypeAttributes')]
  DNTypeAttributes = type Integer;
  DNTypeAttributesHelper = record helper for DNTypeAttributes
  public const
    NotPublic = 0;
    AutoLayout = 0;
    AnsiClass = 0;
    Class_ = 0;
    Public_ = 1;
    NestedPublic = 2;
    NestedPrivate = 3;
    NestedFamily = 4;
    NestedAssembly = 5;
    NestedFamANDAssem = 6;
    NestedFamORAssem = 7;
    VisibilityMask = 7;
    SequentialLayout = 8;
    ExplicitLayout = 16;
    LayoutMask = 24;
    Interface_ = 32;
    ClassSemanticsMask = 32;
    Abstract_ = 128;
    Sealed_ = 256;
    SpecialName = 1024;
    RTSpecialName = 2048;
    Import = 4096;
    Serializable = 8192;
    WindowsRuntime = 16384;
    UnicodeClass = 65536;
    AutoClass = 131072;
    CustomFormatClass = 196608;
    StringFormatMask = 196608;
    HasSecurity = 262144;
    ReservedMask = 264192;
    BeforeFieldInit = 1048576;
    CustomFormatMask = 12582912;
  end;


  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.UltimateResourceFallbackLocation')]
  DNUltimateResourceFallbackLocation = type Integer;
  DNUltimateResourceFallbackLocationHelper = record helper for DNUltimateResourceFallbackLocation
  public const
    MainAssembly = 0;
    Satellite = 1;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxations')]
  DNCompilationRelaxations = type Integer;
  DNCompilationRelaxationsHelper = record helper for DNCompilationRelaxations
  public const
    NoStringInterning = 8;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.LoadHint')]
  DNLoadHint = type Integer;
  DNLoadHintHelper = record helper for DNLoadHint
  public const
    Default_ = 0;
    Always = 1;
    Sometimes = 2;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodCodeType')]
  DNMethodCodeType = type Integer;
  DNMethodCodeTypeHelper = record helper for DNMethodCodeType
  public const
    IL = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodImplOptions')]
  DNMethodImplOptions = type Integer;
  DNMethodImplOptionsHelper = record helper for DNMethodImplOptions
  public const
    Unmanaged = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    AggressiveOptimization = 512;
    InternalCall = 4096;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Cer')]
  DNCer = type Integer;
  DNCerHelper = record helper for DNCer
  public const
    None = 0;
    MayFail = 1;
    Success = 2;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Consistency')]
  DNConsistency = type Integer;
  DNConsistencyHelper = record helper for DNConsistency
  public const
    MayCorruptProcess = 0;
    MayCorruptAppDomain = 1;
    MayCorruptInstance = 2;
    WillNotCorruptState = 3;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLargeObjectHeapCompactionMode')]
  DNGCLargeObjectHeapCompactionMode = type Integer;
  DNGCLargeObjectHeapCompactionModeHelper = record helper for DNGCLargeObjectHeapCompactionMode
  public const
    Default_ = 1;
    CompactOnce = 2;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLatencyMode')]
  DNGCLatencyMode = type Integer;
  DNGCLatencyModeHelper = record helper for DNGCLatencyMode
  public const
    Batch = 0;
    Interactive = 1;
    LowLatency = 2;
    SustainedLowLatency = 3;
    NoGCRegion = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CallingConvention')]
  DNCallingConvention = type Integer;
  DNCallingConventionHelper = record helper for DNCallingConvention
  public const
    Winapi = 1;
    Cdecl_ = 2;
    StdCall_ = 3;
    ThisCall = 4;
    FastCall = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CharSet')]
  DNCharSet = type Integer;
  DNCharSetHelper = record helper for DNCharSet
  public const
    None = 1;
    Ansi = 2;
    Unicode = 3;
    Auto = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceType')]
  DNClassInterfaceType = type Integer;
  DNClassInterfaceTypeHelper = record helper for DNClassInterfaceType
  public const
    None = 0;
    AutoDispatch = 1;
    AutoDual = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComInterfaceType')]
  DNComInterfaceType = type Integer;
  DNComInterfaceTypeHelper = record helper for DNComInterfaceType
  public const
    InterfaceIsDual = 0;
    InterfaceIsIUnknown = 1;
    InterfaceIsIDispatch = 2;
    InterfaceIsIInspectable = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComMemberType')]
  DNComMemberType = type Integer;
  DNComMemberTypeHelper = record helper for DNComMemberType
  public const
    Method = 0;
    PropGet = 1;
    PropSet = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.CALLCONV')]
  DNCALLCONV = type Integer;
  DNCALLCONVHelper = record helper for DNCALLCONV
  public const
    CC_CDECL = 1;
    CC_MSCPASCAL = 2;
    CC_PASCAL = 2;
    CC_MACPASCAL = 3;
    CC_STDCALL = 4;
    CC_RESERVED = 5;
    CC_SYSCALL = 6;
    CC_MPWCDECL = 7;
    CC_MPWPASCAL = 8;
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DESCKIND')]
  DNDESCKIND = type Integer;
  DNDESCKINDHelper = record helper for DNDESCKIND
  public const
    DESCKIND_NONE = 0;
    DESCKIND_FUNCDESC = 1;
    DESCKIND_VARDESC = 2;
    DESCKIND_TYPECOMP = 3;
    DESCKIND_IMPLICITAPPOBJ = 4;
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCFLAGS')]
  DNFUNCFLAGS = type Integer;
  DNFUNCFLAGSHelper = record helper for DNFUNCFLAGS
  public const
    FUNCFLAG_FRESTRICTED = 1;
    FUNCFLAG_FSOURCE = 2;
    FUNCFLAG_FBINDABLE = 4;
    FUNCFLAG_FREQUESTEDIT = 8;
    FUNCFLAG_FDISPLAYBIND = 16;
    FUNCFLAG_FDEFAULTBIND = 32;
    FUNCFLAG_FHIDDEN = 64;
    FUNCFLAG_FUSESGETLASTERROR = 128;
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    FUNCFLAG_FUIDEFAULT = 512;
    FUNCFLAG_FNONBROWSABLE = 1024;
    FUNCFLAG_FREPLACEABLE = 2048;
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCKIND')]
  DNFUNCKIND = type Integer;
  DNFUNCKINDHelper = record helper for DNFUNCKIND
  public const
    FUNC_VIRTUAL = 0;
    FUNC_PUREVIRTUAL = 1;
    FUNC_NONVIRTUAL = 2;
    FUNC_STATIC = 3;
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLFLAG')]
  DNIDLFLAG = type Integer;
  DNIDLFLAGHelper = record helper for DNIDLFLAG
  public const
    IDLFLAG_NONE = 0;
    IDLFLAG_FIN = 1;
    IDLFLAG_FOUT = 2;
    IDLFLAG_FLCID = 4;
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS')]
  DNIMPLTYPEFLAGS = type Integer;
  DNIMPLTYPEFLAGSHelper = record helper for DNIMPLTYPEFLAGS
  public const
    IMPLTYPEFLAG_FDEFAULT = 1;
    IMPLTYPEFLAG_FSOURCE = 2;
    IMPLTYPEFLAG_FRESTRICTED = 4;
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.INVOKEKIND')]
  DNINVOKEKIND = type Integer;
  DNINVOKEKINDHelper = record helper for DNINVOKEKIND
  public const
    INVOKE_FUNC = 1;
    INVOKE_PROPERTYGET = 2;
    INVOKE_PROPERTYPUT = 4;
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.LIBFLAGS')]
  DNLIBFLAGS = type Integer;
  DNLIBFLAGSHelper = record helper for DNLIBFLAGS
  public const
    LIBFLAG_FRESTRICTED = 1;
    LIBFLAG_FCONTROL = 2;
    LIBFLAG_FHIDDEN = 4;
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMFLAG')]
  DNPARAMFLAG = type Integer;
  DNPARAMFLAGHelper = record helper for DNPARAMFLAG
  public const
    PARAMFLAG_NONE = 0;
    PARAMFLAG_FIN = 1;
    PARAMFLAG_FOUT = 2;
    PARAMFLAG_FLCID = 4;
    PARAMFLAG_FRETVAL = 8;
    PARAMFLAG_FOPT = 16;
    PARAMFLAG_FHASDEFAULT = 32;
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.SYSKIND')]
  DNSYSKIND = type Integer;
  DNSYSKINDHelper = record helper for DNSYSKIND
  public const
    SYS_WIN16 = 0;
    SYS_WIN32 = 1;
    SYS_MAC = 2;
    SYS_WIN64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEFLAGS')]
  DNTYPEFLAGS = type Integer;
  DNTYPEFLAGSHelper = record helper for DNTYPEFLAGS
  public const
    TYPEFLAG_FAPPOBJECT = 1;
    TYPEFLAG_FCANCREATE = 2;
    TYPEFLAG_FLICENSED = 4;
    TYPEFLAG_FPREDECLID = 8;
    TYPEFLAG_FHIDDEN = 16;
    TYPEFLAG_FCONTROL = 32;
    TYPEFLAG_FDUAL = 64;
    TYPEFLAG_FNONEXTENSIBLE = 128;
    TYPEFLAG_FOLEAUTOMATION = 256;
    TYPEFLAG_FRESTRICTED = 512;
    TYPEFLAG_FAGGREGATABLE = 1024;
    TYPEFLAG_FREPLACEABLE = 2048;
    TYPEFLAG_FDISPATCHABLE = 4096;
    TYPEFLAG_FREVERSEBIND = 8192;
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEKIND')]
  DNTYPEKIND = type Integer;
  DNTYPEKINDHelper = record helper for DNTYPEKIND
  public const
    TKIND_ENUM = 0;
    TKIND_RECORD = 1;
    TKIND_MODULE = 2;
    TKIND_INTERFACE = 3;
    TKIND_DISPATCH = 4;
    TKIND_COCLASS = 5;
    TKIND_ALIAS = 6;
    TKIND_UNION = 7;
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARFLAGS')]
  DNVARFLAGS = type Integer;
  DNVARFLAGSHelper = record helper for DNVARFLAGS
  public const
    VARFLAG_FREADONLY = 1;
    VARFLAG_FSOURCE = 2;
    VARFLAG_FBINDABLE = 4;
    VARFLAG_FREQUESTEDIT = 8;
    VARFLAG_FDISPLAYBIND = 16;
    VARFLAG_FDEFAULTBIND = 32;
    VARFLAG_FHIDDEN = 64;
    VARFLAG_FRESTRICTED = 128;
    VARFLAG_FDEFAULTCOLLELEM = 256;
    VARFLAG_FUIDEFAULT = 512;
    VARFLAG_FNONBROWSABLE = 1024;
    VARFLAG_FREPLACEABLE = 2048;
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARKIND')]
  DNVARKIND = type Integer;
  DNVARKINDHelper = record helper for DNVARKIND
  public const
    VAR_PERINSTANCE = 0;
    VAR_STATIC = 1;
    VAR_CONST = 2;
    VAR_DISPATCH = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CreateComInterfaceFlags')]
  DNCreateComInterfaceFlags = type Integer;
  DNCreateComInterfaceFlagsHelper = record helper for DNCreateComInterfaceFlags
  public const
    None = 0;
    CallerDefinedIUnknown = 1;
    TrackerSupport = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CreateObjectFlags')]
  DNCreateObjectFlags = type Integer;
  DNCreateObjectFlagsHelper = record helper for DNCreateObjectFlags
  public const
    None = 0;
    TrackerObject = 1;
    UniqueInstance = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceMode')]
  DNCustomQueryInterfaceMode = type Integer;
  DNCustomQueryInterfaceModeHelper = record helper for DNCustomQueryInterfaceMode
  public const
    Ignore = 0;
    Allow = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceResult')]
  DNCustomQueryInterfaceResult = type Integer;
  DNCustomQueryInterfaceResultHelper = record helper for DNCustomQueryInterfaceResult
  public const
    Handled = 0;
    NotHandled = 1;
    Failed = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.DllImportSearchPath')]
  DNDllImportSearchPath = type Integer;
  DNDllImportSearchPathHelper = record helper for DNDllImportSearchPath
  public const
    LegacyBehavior = 0;
    AssemblyDirectory = 2;
    UseDllDirectoryForDependencies = 256;
    ApplicationDirectory = 512;
    UserDirectories = 1024;
    System32 = 2048;
    SafeDirectories = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.GCHandleType')]
  DNGCHandleType = type Integer;
  DNGCHandleTypeHelper = record helper for DNGCHandleType
  public const
    Weak = 0;
    WeakTrackResurrection = 1;
    Normal = 2;
    Pinned = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.LayoutKind')]
  DNLayoutKind = type Integer;
  DNLayoutKindHelper = record helper for DNLayoutKind
  public const
    Sequential = 0;
    Explicit = 2;
    Auto = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UnmanagedType')]
  DNUnmanagedType = type Integer;
  DNUnmanagedTypeHelper = record helper for DNUnmanagedType
  public const
    Bool = 2;
    I1 = 3;
    U1 = 4;
    I2 = 5;
    U2 = 6;
    I4 = 7;
    U4 = 8;
    I8 = 9;
    U8 = 10;
    R4 = 11;
    R8 = 12;
    Currency = 15;
    BStr = 19;
    LPStr = 20;
    LPWStr = 21;
    LPTStr = 22;
    ByValTStr = 23;
    IUnknown = 25;
    IDispatch = 26;
    Struct = 27;
    Interface_ = 28;
    SafeArray = 29;
    ByValArray = 30;
    SysInt = 31;
    SysUInt = 32;
    VBByRefStr = 34;
    AnsiBStr = 35;
    TBStr = 36;
    VariantBool = 37;
    FunctionPtr = 38;
    AsAny = 40;
    LPArray = 42;
    LPStruct = 43;
    CustomMarshaler = 44;
    Error = 45;
    IInspectable = 46;
    HString = 47;
    LPUTF8Str = 48;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.VarEnum')]
  DNVarEnum = type Integer;
  DNVarEnumHelper = record helper for DNVarEnum
  public const
    VT_EMPTY = 0;
    VT_NULL = 1;
    VT_I2 = 2;
    VT_I4 = 3;
    VT_R4 = 4;
    VT_R8 = 5;
    VT_CY = 6;
    VT_DATE = 7;
    VT_BSTR = 8;
    VT_DISPATCH = 9;
    VT_ERROR = 10;
    VT_BOOL = 11;
    VT_VARIANT = 12;
    VT_UNKNOWN = 13;
    VT_DECIMAL = 14;
    VT_I1 = 16;
    VT_UI1 = 17;
    VT_UI2 = 18;
    VT_UI4 = 19;
    VT_I8 = 20;
    VT_UI8 = 21;
    VT_INT = 22;
    VT_UINT = 23;
    VT_VOID = 24;
    VT_HRESULT = 25;
    VT_PTR = 26;
    VT_SAFEARRAY = 27;
    VT_CARRAY = 28;
    VT_USERDEFINED = 29;
    VT_LPSTR = 30;
    VT_LPWSTR = 31;
    VT_RECORD = 36;
    VT_FILETIME = 64;
    VT_BLOB = 65;
    VT_STREAM = 66;
    VT_STORAGE = 67;
    VT_STREAMED_OBJECT = 68;
    VT_STORED_OBJECT = 69;
    VT_BLOB_OBJECT = 70;
    VT_CF = 71;
    VT_CLSID = 72;
    VT_VECTOR = 4096;
    VT_ARRAY = 8192;
    VT_BYREF = 16384;
  end;


  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  [DNTypeName('System.Runtime.Intrinsics.X86.FloatComparisonMode')]
  DNFloatComparisonMode = type Integer;
  DNFloatComparisonModeHelper = record helper for DNFloatComparisonMode
  public const
    OrderedEqualNonSignaling = 0;
    OrderedLessThanSignaling = 1;
    OrderedLessThanOrEqualSignaling = 2;
    UnorderedNonSignaling = 3;
    UnorderedNotEqualNonSignaling = 4;
    UnorderedNotLessThanSignaling = 5;
    UnorderedNotLessThanOrEqualSignaling = 6;
    OrderedNonSignaling = 7;
    UnorderedEqualNonSignaling = 8;
    UnorderedNotGreaterThanOrEqualSignaling = 9;
    UnorderedNotGreaterThanSignaling = 10;
    OrderedFalseNonSignaling = 11;
    OrderedNotEqualNonSignaling = 12;
    OrderedGreaterThanOrEqualSignaling = 13;
    OrderedGreaterThanSignaling = 14;
    UnorderedTrueNonSignaling = 15;
    OrderedEqualSignaling = 16;
    OrderedLessThanNonSignaling = 17;
    OrderedLessThanOrEqualNonSignaling = 18;
    UnorderedSignaling = 19;
    UnorderedNotEqualSignaling = 20;
    UnorderedNotLessThanNonSignaling = 21;
    UnorderedNotLessThanOrEqualNonSignaling = 22;
    OrderedSignaling = 23;
    UnorderedEqualSignaling = 24;
    UnorderedNotGreaterThanOrEqualNonSignaling = 25;
    UnorderedNotGreaterThanNonSignaling = 26;
    OrderedFalseSignaling = 27;
    OrderedNotEqualSignaling = 28;
    OrderedGreaterThanOrEqualNonSignaling = 29;
    OrderedGreaterThanNonSignaling = 30;
    UnorderedTrueSignaling = 31;
  end;


  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.StreamingContextStates')]
  DNStreamingContextStates = type Integer;
  DNStreamingContextStatesHelper = record helper for DNStreamingContextStates
  public const
    CrossProcess = 1;
    CrossMachine = 2;
    File_ = 4;
    Persistence = 8;
    Remoting = 16;
    Other = 32;
    Clone = 64;
    CrossAppDomain = 128;
    All = 255;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesOptions')]
  DNComponentGuaranteesOptions = type Integer;
  DNComponentGuaranteesOptionsHelper = record helper for DNComponentGuaranteesOptions
  public const
    None = 0;
    Exchange = 1;
    Stable = 2;
    SideBySide = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ResourceScope')]
  DNResourceScope = type Integer;
  DNResourceScopeHelper = record helper for DNResourceScope
  public const
    None = 0;
    Machine = 1;
    Process = 2;
    AppDomain = 4;
    Library_ = 8;
    Private_ = 16;
    Assembly = 32;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.PartialTrustVisibilityLevel')]
  DNPartialTrustVisibilityLevel = type Integer;
  DNPartialTrustVisibilityLevelHelper = record helper for DNPartialTrustVisibilityLevel
  public const
    VisibleToAllHosts = 0;
    NotVisibleByDefault = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.PermissionState')]
  DNPermissionState = type Integer;
  DNPermissionStateHelper = record helper for DNPermissionState
  public const
    None = 0;
    Unrestricted = 1;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityAction')]
  DNSecurityAction = type Integer;
  DNSecurityActionHelper = record helper for DNSecurityAction
  public const
    Demand = 2;
    Assert = 3;
    Deny = 4;
    PermitOnly = 5;
    LinkDemand = 6;
    InheritanceDemand = 7;
    RequestMinimum = 8;
    RequestOptional = 9;
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityPermissionFlag')]
  DNSecurityPermissionFlag = type Integer;
  DNSecurityPermissionFlagHelper = record helper for DNSecurityPermissionFlag
  public const
    NoFlags = 0;
    Assertion = 1;
    UnmanagedCode = 2;
    SkipVerification = 4;
    Execution = 8;
    ControlThread = 16;
    ControlEvidence = 32;
    ControlPolicy = 64;
    SerializationFormatter = 128;
    ControlDomainPolicy = 256;
    ControlPrincipal = 512;
    ControlAppDomain = 1024;
    RemotingConfiguration = 2048;
    Infrastructure = 4096;
    BindingRedirects = 8192;
    AllFlags = 16383;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.PrincipalPolicy')]
  DNPrincipalPolicy = type Integer;
  DNPrincipalPolicyHelper = record helper for DNPrincipalPolicy
  public const
    UnauthenticatedPrincipal = 0;
    NoPrincipal = 1;
    WindowsPrincipal = 2;
  end;


  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.TokenImpersonationLevel')]
  DNTokenImpersonationLevel = type Integer;
  DNTokenImpersonationLevelHelper = record helper for DNTokenImpersonationLevel
  public const
    None = 0;
    Anonymous = 1;
    Identification = 2;
    Impersonation = 3;
    Delegation = 4;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityCriticalScope')]
  DNSecurityCriticalScope = type Integer;
  DNSecurityCriticalScopeHelper = record helper for DNSecurityCriticalScope
  public const
    Explicit = 0;
    Everything = 1;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityRuleSet')]
  DNSecurityRuleSet = type Integer;
  DNSecurityRuleSetHelper = record helper for DNSecurityRuleSet
  public const
    None = 0;
    Level1 = 1;
    Level2 = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringComparison')]
  DNStringComparison = type Integer;
  DNStringComparisonHelper = record helper for DNStringComparison
  public const
    CurrentCulture = 0;
    CurrentCultureIgnoreCase = 1;
    InvariantCulture = 2;
    InvariantCultureIgnoreCase = 3;
    Ordinal = 4;
    OrdinalIgnoreCase = 5;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringSplitOptions')]
  DNStringSplitOptions = type Integer;
  DNStringSplitOptionsHelper = record helper for DNStringSplitOptions
  public const
    None = 0;
    RemoveEmptyEntries = 1;
    TrimEntries = 2;
  end;


  //-------------namespace: System.Text----------------
  [DNTypeName('System.Text.NormalizationForm')]
  DNNormalizationForm = type Integer;
  DNNormalizationFormHelper = record helper for DNNormalizationForm
  public const
    FormC = 1;
    FormD = 2;
    FormKC = 5;
    FormKD = 6;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ApartmentState')]
  DNApartmentState = type Integer;
  DNApartmentStateHelper = record helper for DNApartmentState
  public const
    STA = 0;
    MTA = 1;
    Unknown = 2;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.EventResetMode')]
  DNEventResetMode = type Integer;
  DNEventResetModeHelper = record helper for DNEventResetMode
  public const
    AutoReset = 0;
    ManualReset = 1;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LazyThreadSafetyMode')]
  DNLazyThreadSafetyMode = type Integer;
  DNLazyThreadSafetyModeHelper = record helper for DNLazyThreadSafetyMode
  public const
    None = 0;
    PublicationOnly = 1;
    ExecutionAndPublication = 2;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LockRecursionPolicy')]
  DNLockRecursionPolicy = type Integer;
  DNLockRecursionPolicyHelper = record helper for DNLockRecursionPolicy
  public const
    NoRecursion = 0;
    SupportsRecursion = 1;
  end;


  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags')]
  DNValueTaskSourceOnCompletedFlags = type Integer;
  DNValueTaskSourceOnCompletedFlagsHelper = record helper for DNValueTaskSourceOnCompletedFlags
  public const
    None = 0;
    UseSchedulingContext = 1;
    FlowExecutionContext = 2;
  end;


  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.ValueTaskSourceStatus')]
  DNValueTaskSourceStatus = type Integer;
  DNValueTaskSourceStatusHelper = record helper for DNValueTaskSourceStatus
  public const
    Pending = 0;
    Succeeded = 1;
    Faulted = 2;
    Canceled = 3;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskContinuationOptions')]
  DNTaskContinuationOptions = type Integer;
  DNTaskContinuationOptionsHelper = record helper for DNTaskContinuationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    LazyCancellation = 32;
    RunContinuationsAsynchronously = 64;
    NotOnRanToCompletion = 65536;
    NotOnFaulted = 131072;
    OnlyOnCanceled = 196608;
    NotOnCanceled = 262144;
    OnlyOnFaulted = 327680;
    OnlyOnRanToCompletion = 393216;
    ExecuteSynchronously = 524288;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskCreationOptions')]
  DNTaskCreationOptions = type Integer;
  DNTaskCreationOptionsHelper = record helper for DNTaskCreationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    RunContinuationsAsynchronously = 64;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskStatus')]
  DNTaskStatus = type Integer;
  DNTaskStatusHelper = record helper for DNTaskStatus
  public const
    Created = 0;
    WaitingForActivation = 1;
    WaitingToRun = 2;
    Running = 3;
    WaitingForChildrenToComplete = 4;
    RanToCompletion = 5;
    Canceled = 6;
    Faulted = 7;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadPriority')]
  DNThreadPriority = type Integer;
  DNThreadPriorityHelper = record helper for DNThreadPriority
  public const
    Lowest = 0;
    BelowNormal = 1;
    Normal = 2;
    AboveNormal = 3;
    Highest = 4;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadState')]
  DNThreadState = type Integer;
  DNThreadStateHelper = record helper for DNThreadState
  public const
    Running = 0;
    StopRequested = 1;
    SuspendRequested = 2;
    Background = 4;
    Unstarted = 8;
    Stopped = 16;
    WaitSleepJoin = 32;
    Suspended = 64;
    AbortRequested = 128;
    Aborted = 256;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.TypeCode')]
  DNTypeCode = type Integer;
  DNTypeCodeHelper = record helper for DNTypeCode
  public const
    Empty = 0;
    Object_ = 1;
    DBNull = 2;
    Boolean = 3;
    Char = 4;
    SByte = 5;
    Byte = 6;
    Int16 = 7;
    UInt16 = 8;
    Int32 = 9;
    UInt32 = 10;
    Int64 = 11;
    UInt64 = 12;
    Single = 13;
    Double = 14;
    Decimal = 15;
    DateTime = 16;
    String_ = 18;
  end;




type


{ declares }

  DNObject = interface; // System.Object
  DNIDisposable = interface; // type: System.IDisposable, namespace: System
  DNIEnumerator = interface; // type: System.Collections.IEnumerator, namespace: System.Collections
  DNIEnumerator<T> = interface; // type: System.Collections.Generic.IEnumerator`1, namespace: System.Collections.Generic
  DNIEnumerable = interface; // type: System.Collections.IEnumerable, namespace: System.Collections
  DNIEnumerable<T> = interface; // type: System.Collections.Generic.IEnumerable`1, namespace: System.Collections.Generic
  DNICollection = interface; // type: System.Collections.ICollection, namespace: System.Collections
  DNICollection<T> = interface; // type: System.Collections.Generic.ICollection`1, namespace: System.Collections.Generic
  DNIList = interface; // type: System.Collections.IList, namespace: System.Collections
  DNIList<T> = interface; // type: System.Collections.Generic.IList`1, namespace: System.Collections.Generic
  DNIDictionary = interface; // type: System.Collections.IDictionary, namespace: System.Collections
  DNIDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IDictionary`2, namespace: System.Collections.Generic
  DNIComparer = interface; // type: System.Collections.IComparer, namespace: System.Collections
  DNIComparer<T> = interface; // type: System.Collections.Generic.IComparer`1, namespace: System.Collections.Generic
  DNIEqualityComparer = interface; // type: System.Collections.IEqualityComparer, namespace: System.Collections
  DNEqualityComparer<T> = interface; // type: System.Collections.Generic.EqualityComparer`1, namespace: System.Collections.Generic
  DNIClassFactory = interface; // type: Internal.Runtime.InteropServices.IClassFactory, namespace: Internal.Runtime.InteropServices
  DNIPinnable = interface; // type: System.Buffers.IPinnable, namespace: System.Buffers
  DNIAsyncEnumerable<T> = interface; // type: System.Collections.Generic.IAsyncEnumerable`1, namespace: System.Collections.Generic
  DNIEqualityComparer<T> = interface; // type: System.Collections.Generic.IEqualityComparer`1, namespace: System.Collections.Generic
  DNIProducerConsumerCollection<T> = interface; // type: System.Collections.Concurrent.IProducerConsumerCollection`1, namespace: System.Collections.Concurrent
  DNISet<T> = interface; // type: System.Collections.Generic.ISet`1, namespace: System.Collections.Generic
  DNIReadOnlyCollection<T> = interface; // type: System.Collections.Generic.IReadOnlyCollection`1, namespace: System.Collections.Generic
  DNIReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IReadOnlyDictionary`2, namespace: System.Collections.Generic
  DNIReadOnlyList<T> = interface; // type: System.Collections.Generic.IReadOnlyList`1, namespace: System.Collections.Generic
  DNIReadOnlySet<T> = interface; // type: System.Collections.Generic.IReadOnlySet`1, namespace: System.Collections.Generic
  DNIResourceReader = interface; // type: System.Resources.IResourceReader, namespace: System.Resources
  DNIDictionaryEnumerator = interface; // type: System.Collections.IDictionaryEnumerator, namespace: System.Collections
  DNIHashCodeProvider = interface; // type: System.Collections.IHashCodeProvider, namespace: System.Collections
  DNIStructuralComparable = interface; // type: System.Collections.IStructuralComparable, namespace: System.Collections
  DNIStructuralEquatable = interface; // type: System.Collections.IStructuralEquatable, namespace: System.Collections
  DNISymbolDocumentWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter, namespace: System.Diagnostics.SymbolStore
  DNIAsyncDisposable = interface; // type: System.IAsyncDisposable, namespace: System
  DNIAsyncEnumerator<T> = interface; // type: System.Collections.Generic.IAsyncEnumerator`1, namespace: System.Collections.Generic
  DNIAsyncResult = interface; // type: System.IAsyncResult, namespace: System
  DNICloneable = interface; // type: System.ICloneable, namespace: System
  DNIComparable<T> = interface; // type: System.IComparable`1, namespace: System
  DNIComparable = interface; // type: System.IComparable, namespace: System
  DNIConvertible = interface; // type: System.IConvertible, namespace: System
  DNICustomFormatter = interface; // type: System.ICustomFormatter, namespace: System
  DNIMemoryOwner<T> = interface; // type: System.Buffers.IMemoryOwner`1, namespace: System.Buffers
  DNIEquatable<T> = interface; // type: System.IEquatable`1, namespace: System
  DNIFormatProvider = interface; // type: System.IFormatProvider, namespace: System
  DNIFormattable = interface; // type: System.IFormattable, namespace: System
  DNIObservable<T> = interface; // type: System.IObservable`1, namespace: System
  DNIObserver<T> = interface; // type: System.IObserver`1, namespace: System
  DNIProgress<T> = interface; // type: System.IProgress`1, namespace: System
  DNICustomAttributeProvider = interface; // type: System.Reflection.ICustomAttributeProvider, namespace: System.Reflection
  DNIReflect = interface; // type: System.Reflection.IReflect, namespace: System.Reflection
  DNIReflectableType = interface; // type: System.Reflection.IReflectableType, namespace: System.Reflection
  DNIAsyncStateMachine = interface; // type: System.Runtime.CompilerServices.IAsyncStateMachine, namespace: System.Runtime.CompilerServices
  DNICastable = interface; // type: System.Runtime.CompilerServices.ICastable, namespace: System.Runtime.CompilerServices
  DNINotifyCompletion = interface; // type: System.Runtime.CompilerServices.INotifyCompletion, namespace: System.Runtime.CompilerServices
  DNICriticalNotifyCompletion = interface; // type: System.Runtime.CompilerServices.ICriticalNotifyCompletion, namespace: System.Runtime.CompilerServices
  DNIStrongBox = interface; // type: System.Runtime.CompilerServices.IStrongBox, namespace: System.Runtime.CompilerServices
  DNITuple = interface; // type: System.Runtime.CompilerServices.ITuple, namespace: System.Runtime.CompilerServices
  DNIBindCtx = interface; // type: System.Runtime.InteropServices.ComTypes.IBindCtx, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPoint = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPoint, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPointContainer, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnections = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnections, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumString = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumString, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumVARIANT = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT, namespace: System.Runtime.InteropServices.ComTypes
  DNIMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIPersistFile = interface; // type: System.Runtime.InteropServices.ComTypes.IPersistFile, namespace: System.Runtime.InteropServices.ComTypes
  DNIRunningObjectTable = interface; // type: System.Runtime.InteropServices.ComTypes.IRunningObjectTable, namespace: System.Runtime.InteropServices.ComTypes
  DNIStream = interface; // type: System.Runtime.InteropServices.ComTypes.IStream, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeComp = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeComp, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo2, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib2, namespace: System.Runtime.InteropServices.ComTypes
  DNICustomAdapter = interface; // type: System.Runtime.InteropServices.ICustomAdapter, namespace: System.Runtime.InteropServices
  DNICustomFactory = interface; // type: System.Runtime.InteropServices.ICustomFactory, namespace: System.Runtime.InteropServices
  DNICustomMarshaler = interface; // type: System.Runtime.InteropServices.ICustomMarshaler, namespace: System.Runtime.InteropServices
  DNICustomQueryInterface = interface; // type: System.Runtime.InteropServices.ICustomQueryInterface, namespace: System.Runtime.InteropServices
  DNIDynamicInterfaceCastable = interface; // type: System.Runtime.InteropServices.IDynamicInterfaceCastable, namespace: System.Runtime.InteropServices
  DNIDeserializationCallback = interface; // type: System.Runtime.Serialization.IDeserializationCallback, namespace: System.Runtime.Serialization
  DNIFormatterConverter = interface; // type: System.Runtime.Serialization.IFormatterConverter, namespace: System.Runtime.Serialization
  DNIObjectReference = interface; // type: System.Runtime.Serialization.IObjectReference, namespace: System.Runtime.Serialization
  DNISafeSerializationData = interface; // type: System.Runtime.Serialization.ISafeSerializationData, namespace: System.Runtime.Serialization
  DNISerializable = interface; // type: System.Runtime.Serialization.ISerializable, namespace: System.Runtime.Serialization
  DNISecurityEncodable = interface; // type: System.Security.ISecurityEncodable, namespace: System.Security
  DNIPermission = interface; // type: System.Security.IPermission, namespace: System.Security
  DNIStackWalk = interface; // type: System.Security.IStackWalk, namespace: System.Security
  DNIIdentity = interface; // type: System.Security.Principal.IIdentity, namespace: System.Security.Principal
  DNIPrincipal = interface; // type: System.Security.Principal.IPrincipal, namespace: System.Security.Principal
  DNIThreadPoolWorkItem = interface; // type: System.Threading.IThreadPoolWorkItem, namespace: System.Threading
  DNIValueTaskSource<TResult> = interface; // type: System.Threading.Tasks.Sources.IValueTaskSource`1, namespace: System.Threading.Tasks.Sources
  DNIValueTaskSource = interface; // type: System.Threading.Tasks.Sources.IValueTaskSource, namespace: System.Threading.Tasks.Sources
  DNConsole = interface; // type: Internal.Console, namespace: Internal
  DNUnsafe = interface; // type: Internal.Runtime.CompilerServices.Unsafe, namespace: Internal.Runtime.CompilerServices
  DNComActivator = interface; // type: Internal.Runtime.InteropServices.ComActivator, namespace: Internal.Runtime.InteropServices
  DNComponentActivator = interface; // type: Internal.Runtime.InteropServices.ComponentActivator, namespace: Internal.Runtime.InteropServices
  DNInMemoryAssemblyLoader = interface; // type: Internal.Runtime.InteropServices.InMemoryAssemblyLoader, namespace: Internal.Runtime.InteropServices
  DNActivator = interface; // type: System.Activator, namespace: System
  DNAppContext = interface; // type: System.AppContext, namespace: System
  DNAppDomainSetup = interface; // type: System.AppDomainSetup, namespace: System
  DNApplicationId = interface; // type: System.ApplicationId, namespace: System
  DNArray = interface; // type: System.Array, namespace: System
  DNAttribute = interface; // type: System.Attribute, namespace: System
  DNAttributeUsageAttribute = interface; // type: System.AttributeUsageAttribute, namespace: System
  DNCLSCompliantAttribute = interface; // type: System.CLSCompliantAttribute, namespace: System
  DNGeneratedCodeAttribute = interface; // type: System.CodeDom.Compiler.GeneratedCodeAttribute, namespace: System.CodeDom.Compiler
  DNDefaultValueAttribute = interface; // type: System.ComponentModel.DefaultValueAttribute, namespace: System.ComponentModel
  DNEditorBrowsableAttribute = interface; // type: System.ComponentModel.EditorBrowsableAttribute, namespace: System.ComponentModel
  DNContextStaticAttribute = interface; // type: System.ContextStaticAttribute, namespace: System
  DNAllowNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.AllowNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNDisallowNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.DisallowNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNDoesNotReturnAttribute = interface; // type: System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNDoesNotReturnIfAttribute = interface; // type: System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNDynamicallyAccessedMembersAttribute = interface; // type: System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNDynamicDependencyAttribute = interface; // type: System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNExcludeFromCodeCoverageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNMaybeNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.MaybeNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNMaybeNullWhenAttribute = interface; // type: System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNMemberNotNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.MemberNotNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNMemberNotNullWhenAttribute = interface; // type: System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNNotNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.NotNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNNotNullIfNotNullAttribute = interface; // type: System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNNotNullWhenAttribute = interface; // type: System.Diagnostics.CodeAnalysis.NotNullWhenAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNRequiresUnreferencedCodeAttribute = interface; // type: System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNSuppressMessageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNUnconditionalSuppressMessageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNConditionalAttribute = interface; // type: System.Diagnostics.ConditionalAttribute, namespace: System.Diagnostics
  DNContractAbbreviatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractAbbreviatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractArgumentValidatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassForAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassForAttribute, namespace: System.Diagnostics.Contracts
  DNContractInvariantMethodAttribute = interface; // type: System.Diagnostics.Contracts.ContractInvariantMethodAttribute, namespace: System.Diagnostics.Contracts
  DNContractOptionAttribute = interface; // type: System.Diagnostics.Contracts.ContractOptionAttribute, namespace: System.Diagnostics.Contracts
  DNContractPublicPropertyNameAttribute = interface; // type: System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute, namespace: System.Diagnostics.Contracts
  DNContractReferenceAssemblyAttribute = interface; // type: System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute, namespace: System.Diagnostics.Contracts
  DNContractRuntimeIgnoredAttribute = interface; // type: System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute, namespace: System.Diagnostics.Contracts
  DNContractVerificationAttribute = interface; // type: System.Diagnostics.Contracts.ContractVerificationAttribute, namespace: System.Diagnostics.Contracts
  DNPureAttribute = interface; // type: System.Diagnostics.Contracts.PureAttribute, namespace: System.Diagnostics.Contracts
  DNDebuggableAttribute = interface; // type: System.Diagnostics.DebuggableAttribute, namespace: System.Diagnostics
  DNDebuggerBrowsableAttribute = interface; // type: System.Diagnostics.DebuggerBrowsableAttribute, namespace: System.Diagnostics
  DNDebuggerDisplayAttribute = interface; // type: System.Diagnostics.DebuggerDisplayAttribute, namespace: System.Diagnostics
  DNDebuggerHiddenAttribute = interface; // type: System.Diagnostics.DebuggerHiddenAttribute, namespace: System.Diagnostics
  DNDebuggerNonUserCodeAttribute = interface; // type: System.Diagnostics.DebuggerNonUserCodeAttribute, namespace: System.Diagnostics
  DNDebuggerStepperBoundaryAttribute = interface; // type: System.Diagnostics.DebuggerStepperBoundaryAttribute, namespace: System.Diagnostics
  DNDebuggerStepThroughAttribute = interface; // type: System.Diagnostics.DebuggerStepThroughAttribute, namespace: System.Diagnostics
  DNDebuggerTypeProxyAttribute = interface; // type: System.Diagnostics.DebuggerTypeProxyAttribute, namespace: System.Diagnostics
  DNDebuggerVisualizerAttribute = interface; // type: System.Diagnostics.DebuggerVisualizerAttribute, namespace: System.Diagnostics
  DNEventAttribute = interface; // type: System.Diagnostics.Tracing.EventAttribute, namespace: System.Diagnostics.Tracing
  DNEventDataAttribute = interface; // type: System.Diagnostics.Tracing.EventDataAttribute, namespace: System.Diagnostics.Tracing
  DNEventFieldAttribute = interface; // type: System.Diagnostics.Tracing.EventFieldAttribute, namespace: System.Diagnostics.Tracing
  DNEventIgnoreAttribute = interface; // type: System.Diagnostics.Tracing.EventIgnoreAttribute, namespace: System.Diagnostics.Tracing
  DNEventSourceAttribute = interface; // type: System.Diagnostics.Tracing.EventSourceAttribute, namespace: System.Diagnostics.Tracing
  DNNonEventAttribute = interface; // type: System.Diagnostics.Tracing.NonEventAttribute, namespace: System.Diagnostics.Tracing
  DNFlagsAttribute = interface; // type: System.FlagsAttribute, namespace: System
  DNLoaderOptimizationAttribute = interface; // type: System.LoaderOptimizationAttribute, namespace: System
  DNMTAThreadAttribute = interface; // type: System.MTAThreadAttribute, namespace: System
  DNNonSerializedAttribute = interface; // type: System.NonSerializedAttribute, namespace: System
  DNObsoleteAttribute = interface; // type: System.ObsoleteAttribute, namespace: System
  DNParamArrayAttribute = interface; // type: System.ParamArrayAttribute, namespace: System
  DNAssemblyAlgorithmIdAttribute = interface; // type: System.Reflection.AssemblyAlgorithmIdAttribute, namespace: System.Reflection
  DNAssemblyCompanyAttribute = interface; // type: System.Reflection.AssemblyCompanyAttribute, namespace: System.Reflection
  DNAssemblyConfigurationAttribute = interface; // type: System.Reflection.AssemblyConfigurationAttribute, namespace: System.Reflection
  DNAssemblyCopyrightAttribute = interface; // type: System.Reflection.AssemblyCopyrightAttribute, namespace: System.Reflection
  DNAssemblyCultureAttribute = interface; // type: System.Reflection.AssemblyCultureAttribute, namespace: System.Reflection
  DNAssemblyDefaultAliasAttribute = interface; // type: System.Reflection.AssemblyDefaultAliasAttribute, namespace: System.Reflection
  DNAssemblyDelaySignAttribute = interface; // type: System.Reflection.AssemblyDelaySignAttribute, namespace: System.Reflection
  DNAssemblyDescriptionAttribute = interface; // type: System.Reflection.AssemblyDescriptionAttribute, namespace: System.Reflection
  DNAssemblyFileVersionAttribute = interface; // type: System.Reflection.AssemblyFileVersionAttribute, namespace: System.Reflection
  DNAssemblyFlagsAttribute = interface; // type: System.Reflection.AssemblyFlagsAttribute, namespace: System.Reflection
  DNAssemblyInformationalVersionAttribute = interface; // type: System.Reflection.AssemblyInformationalVersionAttribute, namespace: System.Reflection
  DNAssemblyKeyFileAttribute = interface; // type: System.Reflection.AssemblyKeyFileAttribute, namespace: System.Reflection
  DNAssemblyKeyNameAttribute = interface; // type: System.Reflection.AssemblyKeyNameAttribute, namespace: System.Reflection
  DNAssemblyMetadataAttribute = interface; // type: System.Reflection.AssemblyMetadataAttribute, namespace: System.Reflection
  DNAssemblyProductAttribute = interface; // type: System.Reflection.AssemblyProductAttribute, namespace: System.Reflection
  DNAssemblySignatureKeyAttribute = interface; // type: System.Reflection.AssemblySignatureKeyAttribute, namespace: System.Reflection
  DNAssemblyTitleAttribute = interface; // type: System.Reflection.AssemblyTitleAttribute, namespace: System.Reflection
  DNAssemblyTrademarkAttribute = interface; // type: System.Reflection.AssemblyTrademarkAttribute, namespace: System.Reflection
  DNAssemblyVersionAttribute = interface; // type: System.Reflection.AssemblyVersionAttribute, namespace: System.Reflection
  DNDefaultMemberAttribute = interface; // type: System.Reflection.DefaultMemberAttribute, namespace: System.Reflection
  DNObfuscateAssemblyAttribute = interface; // type: System.Reflection.ObfuscateAssemblyAttribute, namespace: System.Reflection
  DNObfuscationAttribute = interface; // type: System.Reflection.ObfuscationAttribute, namespace: System.Reflection
  DNNeutralResourcesLanguageAttribute = interface; // type: System.Resources.NeutralResourcesLanguageAttribute, namespace: System.Resources
  DNSatelliteContractVersionAttribute = interface; // type: System.Resources.SatelliteContractVersionAttribute, namespace: System.Resources
  DNAssemblyTargetedPatchBandAttribute = interface; // type: System.Runtime.AssemblyTargetedPatchBandAttribute, namespace: System.Runtime
  DNAccessedThroughPropertyAttribute = interface; // type: System.Runtime.CompilerServices.AccessedThroughPropertyAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncMethodBuilderAttribute = interface; // type: System.Runtime.CompilerServices.AsyncMethodBuilderAttribute, namespace: System.Runtime.CompilerServices
  DNCallerArgumentExpressionAttribute = interface; // type: System.Runtime.CompilerServices.CallerArgumentExpressionAttribute, namespace: System.Runtime.CompilerServices
  DNCallerFilePathAttribute = interface; // type: System.Runtime.CompilerServices.CallerFilePathAttribute, namespace: System.Runtime.CompilerServices
  DNCallerLineNumberAttribute = interface; // type: System.Runtime.CompilerServices.CallerLineNumberAttribute, namespace: System.Runtime.CompilerServices
  DNCallerMemberNameAttribute = interface; // type: System.Runtime.CompilerServices.CallerMemberNameAttribute, namespace: System.Runtime.CompilerServices
  DNCompilationRelaxationsAttribute = interface; // type: System.Runtime.CompilerServices.CompilationRelaxationsAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGeneratedAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGeneratedAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGlobalScopeAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGlobalScopeAttribute, namespace: System.Runtime.CompilerServices
  DNCustomConstantAttribute = interface; // type: System.Runtime.CompilerServices.CustomConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDateTimeConstantAttribute = interface; // type: System.Runtime.CompilerServices.DateTimeConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDecimalConstantAttribute = interface; // type: System.Runtime.CompilerServices.DecimalConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDefaultDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DefaultDependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDisablePrivateReflectionAttribute = interface; // type: System.Runtime.CompilerServices.DisablePrivateReflectionAttribute, namespace: System.Runtime.CompilerServices
  DNDiscardableAttribute = interface; // type: System.Runtime.CompilerServices.DiscardableAttribute, namespace: System.Runtime.CompilerServices
  DNEnumeratorCancellationAttribute = interface; // type: System.Runtime.CompilerServices.EnumeratorCancellationAttribute, namespace: System.Runtime.CompilerServices
  DNExtensionAttribute = interface; // type: System.Runtime.CompilerServices.ExtensionAttribute, namespace: System.Runtime.CompilerServices
  DNFixedAddressValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNFixedBufferAttribute = interface; // type: System.Runtime.CompilerServices.FixedBufferAttribute, namespace: System.Runtime.CompilerServices
  DNIndexerNameAttribute = interface; // type: System.Runtime.CompilerServices.IndexerNameAttribute, namespace: System.Runtime.CompilerServices
  DNInternalsVisibleToAttribute = interface; // type: System.Runtime.CompilerServices.InternalsVisibleToAttribute, namespace: System.Runtime.CompilerServices
  DNIsByRefLikeAttribute = interface; // type: System.Runtime.CompilerServices.IsByRefLikeAttribute, namespace: System.Runtime.CompilerServices
  DNIsReadOnlyAttribute = interface; // type: System.Runtime.CompilerServices.IsReadOnlyAttribute, namespace: System.Runtime.CompilerServices
  DNMethodImplAttribute = interface; // type: System.Runtime.CompilerServices.MethodImplAttribute, namespace: System.Runtime.CompilerServices
  DNModuleInitializerAttribute = interface; // type: System.Runtime.CompilerServices.ModuleInitializerAttribute, namespace: System.Runtime.CompilerServices
  DNPreserveBaseOverridesAttribute = interface; // type: System.Runtime.CompilerServices.PreserveBaseOverridesAttribute, namespace: System.Runtime.CompilerServices
  DNReferenceAssemblyAttribute = interface; // type: System.Runtime.CompilerServices.ReferenceAssemblyAttribute, namespace: System.Runtime.CompilerServices
  DNRuntimeCompatibilityAttribute = interface; // type: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute, namespace: System.Runtime.CompilerServices
  DNSkipLocalsInitAttribute = interface; // type: System.Runtime.CompilerServices.SkipLocalsInitAttribute, namespace: System.Runtime.CompilerServices
  DNSpecialNameAttribute = interface; // type: System.Runtime.CompilerServices.SpecialNameAttribute, namespace: System.Runtime.CompilerServices
  DNStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.StateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncIteratorStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.AsyncStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNIteratorStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.IteratorStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNStringFreezingAttribute = interface; // type: System.Runtime.CompilerServices.StringFreezingAttribute, namespace: System.Runtime.CompilerServices
  DNSuppressIldasmAttribute = interface; // type: System.Runtime.CompilerServices.SuppressIldasmAttribute, namespace: System.Runtime.CompilerServices
  DNTupleElementNamesAttribute = interface; // type: System.Runtime.CompilerServices.TupleElementNamesAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedFromAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedFromAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedToAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedToAttribute, namespace: System.Runtime.CompilerServices
  DNUnsafeValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.UnsafeValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNPrePrepareMethodAttribute = interface; // type: System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute, namespace: System.Runtime.ConstrainedExecution
  DNReliabilityContractAttribute = interface; // type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute, namespace: System.Runtime.ConstrainedExecution
  DNHandleProcessCorruptedStateExceptionsAttribute = interface; // type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute, namespace: System.Runtime.ExceptionServices
  DNAllowReversePInvokeCallsAttribute = interface; // type: System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute, namespace: System.Runtime.InteropServices
  DNBestFitMappingAttribute = interface; // type: System.Runtime.InteropServices.BestFitMappingAttribute, namespace: System.Runtime.InteropServices
  DNClassInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ClassInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNCoClassAttribute = interface; // type: System.Runtime.InteropServices.CoClassAttribute, namespace: System.Runtime.InteropServices
  DNComDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComDefaultInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComEventInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComEventInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComImportAttribute = interface; // type: System.Runtime.InteropServices.ComImportAttribute, namespace: System.Runtime.InteropServices
  DNComSourceInterfacesAttribute = interface; // type: System.Runtime.InteropServices.ComSourceInterfacesAttribute, namespace: System.Runtime.InteropServices
  DNComVisibleAttribute = interface; // type: System.Runtime.InteropServices.ComVisibleAttribute, namespace: System.Runtime.InteropServices
  DNDefaultCharSetAttribute = interface; // type: System.Runtime.InteropServices.DefaultCharSetAttribute, namespace: System.Runtime.InteropServices
  DNDefaultDllImportSearchPathsAttribute = interface; // type: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute, namespace: System.Runtime.InteropServices
  DNDefaultParameterValueAttribute = interface; // type: System.Runtime.InteropServices.DefaultParameterValueAttribute, namespace: System.Runtime.InteropServices
  DNDispIdAttribute = interface; // type: System.Runtime.InteropServices.DispIdAttribute, namespace: System.Runtime.InteropServices
  DNDllImportAttribute = interface; // type: System.Runtime.InteropServices.DllImportAttribute, namespace: System.Runtime.InteropServices
  DNDynamicInterfaceCastableImplementationAttribute = interface; // type: System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute, namespace: System.Runtime.InteropServices
  DNFieldOffsetAttribute = interface; // type: System.Runtime.InteropServices.FieldOffsetAttribute, namespace: System.Runtime.InteropServices
  DNGuidAttribute = interface; // type: System.Runtime.InteropServices.GuidAttribute, namespace: System.Runtime.InteropServices
  DNInAttribute = interface; // type: System.Runtime.InteropServices.InAttribute, namespace: System.Runtime.InteropServices
  DNInterfaceTypeAttribute = interface; // type: System.Runtime.InteropServices.InterfaceTypeAttribute, namespace: System.Runtime.InteropServices
  DNLCIDConversionAttribute = interface; // type: System.Runtime.InteropServices.LCIDConversionAttribute, namespace: System.Runtime.InteropServices
  DNMarshalAsAttribute = interface; // type: System.Runtime.InteropServices.MarshalAsAttribute, namespace: System.Runtime.InteropServices
  DNOptionalAttribute = interface; // type: System.Runtime.InteropServices.OptionalAttribute, namespace: System.Runtime.InteropServices
  DNOutAttribute = interface; // type: System.Runtime.InteropServices.OutAttribute, namespace: System.Runtime.InteropServices
  DNPreserveSigAttribute = interface; // type: System.Runtime.InteropServices.PreserveSigAttribute, namespace: System.Runtime.InteropServices
  DNProgIdAttribute = interface; // type: System.Runtime.InteropServices.ProgIdAttribute, namespace: System.Runtime.InteropServices
  DNStructLayoutAttribute = interface; // type: System.Runtime.InteropServices.StructLayoutAttribute, namespace: System.Runtime.InteropServices
  DNSuppressGCTransitionAttribute = interface; // type: System.Runtime.InteropServices.SuppressGCTransitionAttribute, namespace: System.Runtime.InteropServices
  DNTypeIdentifierAttribute = interface; // type: System.Runtime.InteropServices.TypeIdentifierAttribute, namespace: System.Runtime.InteropServices
  DNUnmanagedCallersOnlyAttribute = interface; // type: System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute, namespace: System.Runtime.InteropServices
  DNUnmanagedFunctionPointerAttribute = interface; // type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute, namespace: System.Runtime.InteropServices
  DNOnDeserializedAttribute = interface; // type: System.Runtime.Serialization.OnDeserializedAttribute, namespace: System.Runtime.Serialization
  DNOnDeserializingAttribute = interface; // type: System.Runtime.Serialization.OnDeserializingAttribute, namespace: System.Runtime.Serialization
  DNOnSerializedAttribute = interface; // type: System.Runtime.Serialization.OnSerializedAttribute, namespace: System.Runtime.Serialization
  DNOnSerializingAttribute = interface; // type: System.Runtime.Serialization.OnSerializingAttribute, namespace: System.Runtime.Serialization
  DNOptionalFieldAttribute = interface; // type: System.Runtime.Serialization.OptionalFieldAttribute, namespace: System.Runtime.Serialization
  DNTargetedPatchingOptOutAttribute = interface; // type: System.Runtime.TargetedPatchingOptOutAttribute, namespace: System.Runtime
  DNComponentGuaranteesAttribute = interface; // type: System.Runtime.Versioning.ComponentGuaranteesAttribute, namespace: System.Runtime.Versioning
  DNOSPlatformAttribute = interface; // type: System.Runtime.Versioning.OSPlatformAttribute, namespace: System.Runtime.Versioning
  DNSupportedOSPlatformAttribute = interface; // type: System.Runtime.Versioning.SupportedOSPlatformAttribute, namespace: System.Runtime.Versioning
  DNTargetPlatformAttribute = interface; // type: System.Runtime.Versioning.TargetPlatformAttribute, namespace: System.Runtime.Versioning
  DNUnsupportedOSPlatformAttribute = interface; // type: System.Runtime.Versioning.UnsupportedOSPlatformAttribute, namespace: System.Runtime.Versioning
  DNResourceConsumptionAttribute = interface; // type: System.Runtime.Versioning.ResourceConsumptionAttribute, namespace: System.Runtime.Versioning
  DNResourceExposureAttribute = interface; // type: System.Runtime.Versioning.ResourceExposureAttribute, namespace: System.Runtime.Versioning
  DNTargetFrameworkAttribute = interface; // type: System.Runtime.Versioning.TargetFrameworkAttribute, namespace: System.Runtime.Versioning
  DNAllowPartiallyTrustedCallersAttribute = interface; // type: System.Security.AllowPartiallyTrustedCallersAttribute, namespace: System.Security
  DNSecurityAttribute = interface; // type: System.Security.Permissions.SecurityAttribute, namespace: System.Security.Permissions
  DNCodeAccessSecurityAttribute = interface; // type: System.Security.Permissions.CodeAccessSecurityAttribute, namespace: System.Security.Permissions
  DNSecurityPermissionAttribute = interface; // type: System.Security.Permissions.SecurityPermissionAttribute, namespace: System.Security.Permissions
  DNSecurityCriticalAttribute = interface; // type: System.Security.SecurityCriticalAttribute, namespace: System.Security
  DNSecurityRulesAttribute = interface; // type: System.Security.SecurityRulesAttribute, namespace: System.Security
  DNSecuritySafeCriticalAttribute = interface; // type: System.Security.SecuritySafeCriticalAttribute, namespace: System.Security
  DNSecurityTransparentAttribute = interface; // type: System.Security.SecurityTransparentAttribute, namespace: System.Security
  DNSecurityTreatAsSafeAttribute = interface; // type: System.Security.SecurityTreatAsSafeAttribute, namespace: System.Security
  DNSuppressUnmanagedCodeSecurityAttribute = interface; // type: System.Security.SuppressUnmanagedCodeSecurityAttribute, namespace: System.Security
  DNUnverifiableCodeAttribute = interface; // type: System.Security.UnverifiableCodeAttribute, namespace: System.Security
  DNSerializableAttribute = interface; // type: System.SerializableAttribute, namespace: System
  DNSTAThreadAttribute = interface; // type: System.STAThreadAttribute, namespace: System
  DNThreadStaticAttribute = interface; // type: System.ThreadStaticAttribute, namespace: System
  DNBitConverter = interface; // type: System.BitConverter, namespace: System
  DNBuffer = interface; // type: System.Buffer, namespace: System
  DNArrayPool<T> = interface; // type: System.Buffers.ArrayPool`1, namespace: System.Buffers
  DNBinaryPrimitives = interface; // type: System.Buffers.Binary.BinaryPrimitives, namespace: System.Buffers.Binary
  DNMemoryManager<T> = interface; // type: System.Buffers.MemoryManager`1, namespace: System.Buffers
  DNUtf8Formatter = interface; // type: System.Buffers.Text.Utf8Formatter, namespace: System.Buffers.Text
  DNUtf8Parser = interface; // type: System.Buffers.Text.Utf8Parser, namespace: System.Buffers.Text
  DNCharEnumerator = interface; // type: System.CharEnumerator, namespace: System
  DNArrayList = interface; // type: System.Collections.ArrayList, namespace: System.Collections
  DNComparer = interface; // type: System.Collections.Comparer, namespace: System.Collections
  DNConcurrentQueue<T> = interface; // type: System.Collections.Concurrent.ConcurrentQueue`1, namespace: System.Collections.Concurrent
  DNComparer<T> = interface; // type: System.Collections.Generic.Comparer`1, namespace: System.Collections.Generic
  DNGenericComparer<T> = interface; // type: System.Collections.Generic.GenericComparer`1, namespace: System.Collections.Generic
  DNNullableComparer<T> = interface; // type: System.Collections.Generic.NullableComparer`1, namespace: System.Collections.Generic
  DNObjectComparer<T> = interface; // type: System.Collections.Generic.ObjectComparer`1, namespace: System.Collections.Generic
  DNDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2, namespace: System.Collections.Generic
  DNDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNByteEqualityComparer = interface; // type: System.Collections.Generic.ByteEqualityComparer, namespace: System.Collections.Generic
  DNEnumEqualityComparer<T> = interface; // type: System.Collections.Generic.EnumEqualityComparer`1, namespace: System.Collections.Generic
  DNGenericEqualityComparer<T> = interface; // type: System.Collections.Generic.GenericEqualityComparer`1, namespace: System.Collections.Generic
  DNNullableEqualityComparer<T> = interface; // type: System.Collections.Generic.NullableEqualityComparer`1, namespace: System.Collections.Generic
  DNObjectEqualityComparer<T> = interface; // type: System.Collections.Generic.ObjectEqualityComparer`1, namespace: System.Collections.Generic
  DNHashSet<T> = interface; // type: System.Collections.Generic.HashSet`1, namespace: System.Collections.Generic
  DNKeyValuePair = interface; // type: System.Collections.Generic.KeyValuePair, namespace: System.Collections.Generic
  DNList<T> = interface; // type: System.Collections.Generic.List`1, namespace: System.Collections.Generic
  DNNonRandomizedStringEqualityComparer = interface; // type: System.Collections.Generic.NonRandomizedStringEqualityComparer, namespace: System.Collections.Generic
  DNReferenceEqualityComparer = interface; // type: System.Collections.Generic.ReferenceEqualityComparer, namespace: System.Collections.Generic
  DNHashtable = interface; // type: System.Collections.Hashtable, namespace: System.Collections
  DNListDictionaryInternal = interface; // type: System.Collections.ListDictionaryInternal, namespace: System.Collections
  DNCollection<T> = interface; // type: System.Collections.ObjectModel.Collection`1, namespace: System.Collections.ObjectModel
  DNReadOnlyCollection<T> = interface; // type: System.Collections.ObjectModel.ReadOnlyCollection`1, namespace: System.Collections.ObjectModel
  DNConvert = interface; // type: System.Convert, namespace: System
  DNDBNull = interface; // type: System.DBNull, namespace: System
  DNDelegate = interface; // type: System.Delegate, namespace: System
  DNMulticastDelegate = interface; // type: System.MulticastDelegate, namespace: System
  DNContract = interface; // type: System.Diagnostics.Contracts.Contract, namespace: System.Diagnostics.Contracts
  DNDebug = interface; // type: System.Diagnostics.Debug, namespace: System.Diagnostics
  DNDebugger = interface; // type: System.Diagnostics.Debugger, namespace: System.Diagnostics
  DNDebugProvider = interface; // type: System.Diagnostics.DebugProvider, namespace: System.Diagnostics
  DNStackFrame = interface; // type: System.Diagnostics.StackFrame, namespace: System.Diagnostics
  DNStackTrace = interface; // type: System.Diagnostics.StackTrace, namespace: System.Diagnostics
  DNStopwatch = interface; // type: System.Diagnostics.Stopwatch, namespace: System.Diagnostics
  DNDiagnosticCounter = interface; // type: System.Diagnostics.Tracing.DiagnosticCounter, namespace: System.Diagnostics.Tracing
  DNEventCounter = interface; // type: System.Diagnostics.Tracing.EventCounter, namespace: System.Diagnostics.Tracing
  DNIncrementingEventCounter = interface; // type: System.Diagnostics.Tracing.IncrementingEventCounter, namespace: System.Diagnostics.Tracing
  DNIncrementingPollingCounter = interface; // type: System.Diagnostics.Tracing.IncrementingPollingCounter, namespace: System.Diagnostics.Tracing
  DNPollingCounter = interface; // type: System.Diagnostics.Tracing.PollingCounter, namespace: System.Diagnostics.Tracing
  DNEventListener = interface; // type: System.Diagnostics.Tracing.EventListener, namespace: System.Diagnostics.Tracing
  DNEventSource = interface; // type: System.Diagnostics.Tracing.EventSource, namespace: System.Diagnostics.Tracing
  DNTraceLoggingEventTypes = interface; // type: System.Diagnostics.Tracing.TraceLoggingEventTypes, namespace: System.Diagnostics.Tracing
  DNEnvironment = interface; // type: System.Environment, namespace: System
  DNEventArgs = interface; // type: System.EventArgs, namespace: System
  DNAssemblyLoadEventArgs = interface; // type: System.AssemblyLoadEventArgs, namespace: System
  DNContractFailedEventArgs = interface; // type: System.Diagnostics.Contracts.ContractFailedEventArgs, namespace: System.Diagnostics.Contracts
  DNEventCommandEventArgs = interface; // type: System.Diagnostics.Tracing.EventCommandEventArgs, namespace: System.Diagnostics.Tracing
  DNEventSourceCreatedEventArgs = interface; // type: System.Diagnostics.Tracing.EventSourceCreatedEventArgs, namespace: System.Diagnostics.Tracing
  DNEventWrittenEventArgs = interface; // type: System.Diagnostics.Tracing.EventWrittenEventArgs, namespace: System.Diagnostics.Tracing
  DNResolveEventArgs = interface; // type: System.ResolveEventArgs, namespace: System
  DNFirstChanceExceptionEventArgs = interface; // type: System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs, namespace: System.Runtime.ExceptionServices
  DNSafeSerializationEventArgs = interface; // type: System.Runtime.Serialization.SafeSerializationEventArgs, namespace: System.Runtime.Serialization
  DNUnobservedTaskExceptionEventArgs = interface; // type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs, namespace: System.Threading.Tasks
  DNThreadExceptionEventArgs = interface; // type: System.Threading.ThreadExceptionEventArgs, namespace: System.Threading
  DNUnhandledExceptionEventArgs = interface; // type: System.UnhandledExceptionEventArgs, namespace: System
  DNException = interface; // type: System.Exception, namespace: System
  DNAggregateException = interface; // type: System.AggregateException, namespace: System
  DNApplicationException = interface; // type: System.ApplicationException, namespace: System
  DNInvalidFilterCriteriaException = interface; // type: System.Reflection.InvalidFilterCriteriaException, namespace: System.Reflection
  DNTargetException = interface; // type: System.Reflection.TargetException, namespace: System.Reflection
  DNTargetInvocationException = interface; // type: System.Reflection.TargetInvocationException, namespace: System.Reflection
  DNTargetParameterCountException = interface; // type: System.Reflection.TargetParameterCountException, namespace: System.Reflection
  DNWaitHandleCannotBeOpenedException = interface; // type: System.Threading.WaitHandleCannotBeOpenedException, namespace: System.Threading
  DNContractException = interface; // type: System.Diagnostics.Contracts.ContractException, namespace: System.Diagnostics.Contracts
  DNEventSourceException = interface; // type: System.Diagnostics.Tracing.EventSourceException, namespace: System.Diagnostics.Tracing
  DNInvalidTimeZoneException = interface; // type: System.InvalidTimeZoneException, namespace: System
  DNAmbiguousImplementationException = interface; // type: System.Runtime.AmbiguousImplementationException, namespace: System.Runtime
  DNRuntimeWrappedException = interface; // type: System.Runtime.CompilerServices.RuntimeWrappedException, namespace: System.Runtime.CompilerServices
  DNSystemException = interface; // type: System.SystemException, namespace: System
  DNAccessViolationException = interface; // type: System.AccessViolationException, namespace: System
  DNAppDomainUnloadedException = interface; // type: System.AppDomainUnloadedException, namespace: System
  DNArgumentException = interface; // type: System.ArgumentException, namespace: System
  DNArgumentNullException = interface; // type: System.ArgumentNullException, namespace: System
  DNArgumentOutOfRangeException = interface; // type: System.ArgumentOutOfRangeException, namespace: System
  DNDuplicateWaitObjectException = interface; // type: System.DuplicateWaitObjectException, namespace: System
  DNCultureNotFoundException = interface; // type: System.Globalization.CultureNotFoundException, namespace: System.Globalization
  DNDecoderFallbackException = interface; // type: System.Text.DecoderFallbackException, namespace: System.Text
  DNEncoderFallbackException = interface; // type: System.Text.EncoderFallbackException, namespace: System.Text
  DNArithmeticException = interface; // type: System.ArithmeticException, namespace: System
  DNDivideByZeroException = interface; // type: System.DivideByZeroException, namespace: System
  DNNotFiniteNumberException = interface; // type: System.NotFiniteNumberException, namespace: System
  DNOverflowException = interface; // type: System.OverflowException, namespace: System
  DNArrayTypeMismatchException = interface; // type: System.ArrayTypeMismatchException, namespace: System
  DNBadImageFormatException = interface; // type: System.BadImageFormatException, namespace: System
  DNCannotUnloadAppDomainException = interface; // type: System.CannotUnloadAppDomainException, namespace: System
  DNKeyNotFoundException = interface; // type: System.Collections.Generic.KeyNotFoundException, namespace: System.Collections.Generic
  DNContextMarshalException = interface; // type: System.ContextMarshalException, namespace: System
  DNDataMisalignedException = interface; // type: System.DataMisalignedException, namespace: System
  DNExecutionEngineException = interface; // type: System.ExecutionEngineException, namespace: System
  DNFormatException = interface; // type: System.FormatException, namespace: System
  DNCustomAttributeFormatException = interface; // type: System.Reflection.CustomAttributeFormatException, namespace: System.Reflection
  DNIndexOutOfRangeException = interface; // type: System.IndexOutOfRangeException, namespace: System
  DNInsufficientExecutionStackException = interface; // type: System.InsufficientExecutionStackException, namespace: System
  DNInvalidCastException = interface; // type: System.InvalidCastException, namespace: System
  DNInvalidOperationException = interface; // type: System.InvalidOperationException, namespace: System
  DNObjectDisposedException = interface; // type: System.ObjectDisposedException, namespace: System
  DNSwitchExpressionException = interface; // type: System.Runtime.CompilerServices.SwitchExpressionException, namespace: System.Runtime.CompilerServices
  DNInvalidProgramException = interface; // type: System.InvalidProgramException, namespace: System
  DNInvalidDataException = interface; // type: System.IO.InvalidDataException, namespace: System.IO
  DNIOException = interface; // type: System.IO.IOException, namespace: System.IO
  DNDirectoryNotFoundException = interface; // type: System.IO.DirectoryNotFoundException, namespace: System.IO
  DNEndOfStreamException = interface; // type: System.IO.EndOfStreamException, namespace: System.IO
  DNFileLoadException = interface; // type: System.IO.FileLoadException, namespace: System.IO
  DNFileNotFoundException = interface; // type: System.IO.FileNotFoundException, namespace: System.IO
  DNPathTooLongException = interface; // type: System.IO.PathTooLongException, namespace: System.IO
  DNMemberAccessException = interface; // type: System.MemberAccessException, namespace: System
  DNFieldAccessException = interface; // type: System.FieldAccessException, namespace: System
  DNMethodAccessException = interface; // type: System.MethodAccessException, namespace: System
  DNMissingMemberException = interface; // type: System.MissingMemberException, namespace: System
  DNMissingFieldException = interface; // type: System.MissingFieldException, namespace: System
  DNMissingMethodException = interface; // type: System.MissingMethodException, namespace: System
  DNMulticastNotSupportedException = interface; // type: System.MulticastNotSupportedException, namespace: System
  DNNotImplementedException = interface; // type: System.NotImplementedException, namespace: System
  DNNotSupportedException = interface; // type: System.NotSupportedException, namespace: System
  DNPlatformNotSupportedException = interface; // type: System.PlatformNotSupportedException, namespace: System
  DNNullReferenceException = interface; // type: System.NullReferenceException, namespace: System
  DNOperationCanceledException = interface; // type: System.OperationCanceledException, namespace: System
  DNTaskCanceledException = interface; // type: System.Threading.Tasks.TaskCanceledException, namespace: System.Threading.Tasks
  DNOutOfMemoryException = interface; // type: System.OutOfMemoryException, namespace: System
  DNInsufficientMemoryException = interface; // type: System.InsufficientMemoryException, namespace: System
  DNRankException = interface; // type: System.RankException, namespace: System
  DNAmbiguousMatchException = interface; // type: System.Reflection.AmbiguousMatchException, namespace: System.Reflection
  DNReflectionTypeLoadException = interface; // type: System.Reflection.ReflectionTypeLoadException, namespace: System.Reflection
  DNMissingManifestResourceException = interface; // type: System.Resources.MissingManifestResourceException, namespace: System.Resources
  DNMissingSatelliteAssemblyException = interface; // type: System.Resources.MissingSatelliteAssemblyException, namespace: System.Resources
  DNExternalException = interface; // type: System.Runtime.InteropServices.ExternalException, namespace: System.Runtime.InteropServices
  DNCOMException = interface; // type: System.Runtime.InteropServices.COMException, namespace: System.Runtime.InteropServices
  DNSEHException = interface; // type: System.Runtime.InteropServices.SEHException, namespace: System.Runtime.InteropServices
  DNInvalidComObjectException = interface; // type: System.Runtime.InteropServices.InvalidComObjectException, namespace: System.Runtime.InteropServices
  DNInvalidOleVariantTypeException = interface; // type: System.Runtime.InteropServices.InvalidOleVariantTypeException, namespace: System.Runtime.InteropServices
  DNMarshalDirectiveException = interface; // type: System.Runtime.InteropServices.MarshalDirectiveException, namespace: System.Runtime.InteropServices
  DNSafeArrayRankMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayRankMismatchException, namespace: System.Runtime.InteropServices
  DNSafeArrayTypeMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayTypeMismatchException, namespace: System.Runtime.InteropServices
  DNSerializationException = interface; // type: System.Runtime.Serialization.SerializationException, namespace: System.Runtime.Serialization
  DNCryptographicException = interface; // type: System.Security.Cryptography.CryptographicException, namespace: System.Security.Cryptography
  DNSecurityException = interface; // type: System.Security.SecurityException, namespace: System.Security
  DNVerificationException = interface; // type: System.Security.VerificationException, namespace: System.Security
  DNStackOverflowException = interface; // type: System.StackOverflowException, namespace: System
  DNAbandonedMutexException = interface; // type: System.Threading.AbandonedMutexException, namespace: System.Threading
  DNSemaphoreFullException = interface; // type: System.Threading.SemaphoreFullException, namespace: System.Threading
  DNSynchronizationLockException = interface; // type: System.Threading.SynchronizationLockException, namespace: System.Threading
  DNThreadAbortException = interface; // type: System.Threading.ThreadAbortException, namespace: System.Threading
  DNThreadInterruptedException = interface; // type: System.Threading.ThreadInterruptedException, namespace: System.Threading
  DNThreadStartException = interface; // type: System.Threading.ThreadStartException, namespace: System.Threading
  DNThreadStateException = interface; // type: System.Threading.ThreadStateException, namespace: System.Threading
  DNTimeoutException = interface; // type: System.TimeoutException, namespace: System
  DNTypeInitializationException = interface; // type: System.TypeInitializationException, namespace: System
  DNTypeLoadException = interface; // type: System.TypeLoadException, namespace: System
  DNDllNotFoundException = interface; // type: System.DllNotFoundException, namespace: System
  DNEntryPointNotFoundException = interface; // type: System.EntryPointNotFoundException, namespace: System
  DNTypeAccessException = interface; // type: System.TypeAccessException, namespace: System
  DNTypeUnloadedException = interface; // type: System.TypeUnloadedException, namespace: System
  DNUnauthorizedAccessException = interface; // type: System.UnauthorizedAccessException, namespace: System
  DNLockRecursionException = interface; // type: System.Threading.LockRecursionException, namespace: System.Threading
  DNTaskSchedulerException = interface; // type: System.Threading.Tasks.TaskSchedulerException, namespace: System.Threading.Tasks
  DNTimeZoneNotFoundException = interface; // type: System.TimeZoneNotFoundException, namespace: System
  DNFormattableString = interface; // type: System.FormattableString, namespace: System
  DNGC = interface; // type: System.GC, namespace: System
  DNCalendar = interface; // type: System.Globalization.Calendar, namespace: System.Globalization
  DNEastAsianLunisolarCalendar = interface; // type: System.Globalization.EastAsianLunisolarCalendar, namespace: System.Globalization
  DNChineseLunisolarCalendar = interface; // type: System.Globalization.ChineseLunisolarCalendar, namespace: System.Globalization
  DNJapaneseLunisolarCalendar = interface; // type: System.Globalization.JapaneseLunisolarCalendar, namespace: System.Globalization
  DNKoreanLunisolarCalendar = interface; // type: System.Globalization.KoreanLunisolarCalendar, namespace: System.Globalization
  DNTaiwanLunisolarCalendar = interface; // type: System.Globalization.TaiwanLunisolarCalendar, namespace: System.Globalization
  DNGregorianCalendar = interface; // type: System.Globalization.GregorianCalendar, namespace: System.Globalization
  DNHebrewCalendar = interface; // type: System.Globalization.HebrewCalendar, namespace: System.Globalization
  DNHijriCalendar = interface; // type: System.Globalization.HijriCalendar, namespace: System.Globalization
  DNJapaneseCalendar = interface; // type: System.Globalization.JapaneseCalendar, namespace: System.Globalization
  DNJulianCalendar = interface; // type: System.Globalization.JulianCalendar, namespace: System.Globalization
  DNKoreanCalendar = interface; // type: System.Globalization.KoreanCalendar, namespace: System.Globalization
  DNPersianCalendar = interface; // type: System.Globalization.PersianCalendar, namespace: System.Globalization
  DNTaiwanCalendar = interface; // type: System.Globalization.TaiwanCalendar, namespace: System.Globalization
  DNThaiBuddhistCalendar = interface; // type: System.Globalization.ThaiBuddhistCalendar, namespace: System.Globalization
  DNUmAlQuraCalendar = interface; // type: System.Globalization.UmAlQuraCalendar, namespace: System.Globalization
  DNCharUnicodeInfo = interface; // type: System.Globalization.CharUnicodeInfo, namespace: System.Globalization
  DNCompareInfo = interface; // type: System.Globalization.CompareInfo, namespace: System.Globalization
  DNCultureInfo = interface; // type: System.Globalization.CultureInfo, namespace: System.Globalization
  DNDateTimeFormatInfo = interface; // type: System.Globalization.DateTimeFormatInfo, namespace: System.Globalization
  DNDaylightTime = interface; // type: System.Globalization.DaylightTime, namespace: System.Globalization
  DNGlobalizationExtensions = interface; // type: System.Globalization.GlobalizationExtensions, namespace: System.Globalization
  DNIdnMapping = interface; // type: System.Globalization.IdnMapping, namespace: System.Globalization
  DNISOWeek = interface; // type: System.Globalization.ISOWeek, namespace: System.Globalization
  DNNumberFormatInfo = interface; // type: System.Globalization.NumberFormatInfo, namespace: System.Globalization
  DNRegionInfo = interface; // type: System.Globalization.RegionInfo, namespace: System.Globalization
  DNSortKey = interface; // type: System.Globalization.SortKey, namespace: System.Globalization
  DNSortVersion = interface; // type: System.Globalization.SortVersion, namespace: System.Globalization
  DNStringInfo = interface; // type: System.Globalization.StringInfo, namespace: System.Globalization
  DNTextElementEnumerator = interface; // type: System.Globalization.TextElementEnumerator, namespace: System.Globalization
  DNTextInfo = interface; // type: System.Globalization.TextInfo, namespace: System.Globalization
  DNBinaryReader = interface; // type: System.IO.BinaryReader, namespace: System.IO
  DNBinaryWriter = interface; // type: System.IO.BinaryWriter, namespace: System.IO
  DNPath = interface; // type: System.IO.Path, namespace: System.IO
  DNUnmanagedMemoryAccessor = interface; // type: System.IO.UnmanagedMemoryAccessor, namespace: System.IO
  DNLazy<T> = interface; // type: System.Lazy`1, namespace: System
  DNLazy<T, TMetadata> = interface; // type: System.Lazy`2, namespace: System
  DNLocalDataStoreSlot = interface; // type: System.LocalDataStoreSlot, namespace: System
  DNMarshalByRefObject = interface; // type: System.MarshalByRefObject, namespace: System
  DNAppDomain = interface; // type: System.AppDomain, namespace: System
  DNContextBoundObject = interface; // type: System.ContextBoundObject, namespace: System
  DNStream = interface; // type: System.IO.Stream, namespace: System.IO
  DNBufferedStream = interface; // type: System.IO.BufferedStream, namespace: System.IO
  DNFileStream = interface; // type: System.IO.FileStream, namespace: System.IO
  DNMemoryStream = interface; // type: System.IO.MemoryStream, namespace: System.IO
  DNUnmanagedMemoryStream = interface; // type: System.IO.UnmanagedMemoryStream, namespace: System.IO
  DNTextReader = interface; // type: System.IO.TextReader, namespace: System.IO
  DNStreamReader = interface; // type: System.IO.StreamReader, namespace: System.IO
  DNStringReader = interface; // type: System.IO.StringReader, namespace: System.IO
  DNTextWriter = interface; // type: System.IO.TextWriter, namespace: System.IO
  DNIndentedTextWriter = interface; // type: System.CodeDom.Compiler.IndentedTextWriter, namespace: System.CodeDom.Compiler
  DNStreamWriter = interface; // type: System.IO.StreamWriter, namespace: System.IO
  DNStringWriter = interface; // type: System.IO.StringWriter, namespace: System.IO
  DNAssemblyNameProxy = interface; // type: System.Reflection.AssemblyNameProxy, namespace: System.Reflection
  DNStandardOleMarshalObject = interface; // type: System.Runtime.InteropServices.StandardOleMarshalObject, namespace: System.Runtime.InteropServices
  DNObjectHandle = interface; // type: System.Runtime.Remoting.ObjectHandle, namespace: System.Runtime.Remoting
  DNRegisteredWaitHandle = interface; // type: System.Threading.RegisteredWaitHandle, namespace: System.Threading
  DNTimer = interface; // type: System.Threading.Timer, namespace: System.Threading
  DNWaitHandle = interface; // type: System.Threading.WaitHandle, namespace: System.Threading
  DNEventWaitHandle = interface; // type: System.Threading.EventWaitHandle, namespace: System.Threading
  DNAutoResetEvent = interface; // type: System.Threading.AutoResetEvent, namespace: System.Threading
  DNManualResetEvent = interface; // type: System.Threading.ManualResetEvent, namespace: System.Threading
  DNMutex = interface; // type: System.Threading.Mutex, namespace: System.Threading
  DNSemaphore = interface; // type: System.Threading.Semaphore, namespace: System.Threading
  DNMath = interface; // type: System.Math, namespace: System
  DNMathF = interface; // type: System.MathF, namespace: System
  DNMemoryExtensions = interface; // type: System.MemoryExtensions, namespace: System
  DNWebUtility = interface; // type: System.Net.WebUtility, namespace: System.Net
  DNNullable = interface; // type: System.Nullable, namespace: System
  DNBitOperations = interface; // type: System.Numerics.BitOperations, namespace: System.Numerics
  DNVector = interface; // type: System.Numerics.Vector, namespace: System.Numerics
  DNOperatingSystem = interface; // type: System.OperatingSystem, namespace: System
  DNProgress<T> = interface; // type: System.Progress`1, namespace: System
  DNRandom = interface; // type: System.Random, namespace: System
  DNAssembly = interface; // type: System.Reflection.Assembly, namespace: System.Reflection
  DNAssemblyBuilder = interface; // type: System.Reflection.Emit.AssemblyBuilder, namespace: System.Reflection.Emit
  DNAssemblyName = interface; // type: System.Reflection.AssemblyName, namespace: System.Reflection
  DNBinder = interface; // type: System.Reflection.Binder, namespace: System.Reflection
  DNCustomAttributeData = interface; // type: System.Reflection.CustomAttributeData, namespace: System.Reflection
  DNCustomAttributeExtensions = interface; // type: System.Reflection.CustomAttributeExtensions, namespace: System.Reflection
  DNCustomAttributeBuilder = interface; // type: System.Reflection.Emit.CustomAttributeBuilder, namespace: System.Reflection.Emit
  DNDynamicILInfo = interface; // type: System.Reflection.Emit.DynamicILInfo, namespace: System.Reflection.Emit
  DNEventBuilder = interface; // type: System.Reflection.Emit.EventBuilder, namespace: System.Reflection.Emit
  DNILGenerator = interface; // type: System.Reflection.Emit.ILGenerator, namespace: System.Reflection.Emit
  DNOpCodes = interface; // type: System.Reflection.Emit.OpCodes, namespace: System.Reflection.Emit
  DNParameterBuilder = interface; // type: System.Reflection.Emit.ParameterBuilder, namespace: System.Reflection.Emit
  DNSignatureHelper = interface; // type: System.Reflection.Emit.SignatureHelper, namespace: System.Reflection.Emit
  DNExceptionHandlingClause = interface; // type: System.Reflection.ExceptionHandlingClause, namespace: System.Reflection
  DNIntrospectionExtensions = interface; // type: System.Reflection.IntrospectionExtensions, namespace: System.Reflection
  DNLocalVariableInfo = interface; // type: System.Reflection.LocalVariableInfo, namespace: System.Reflection
  DNLocalBuilder = interface; // type: System.Reflection.Emit.LocalBuilder, namespace: System.Reflection.Emit
  DNManifestResourceInfo = interface; // type: System.Reflection.ManifestResourceInfo, namespace: System.Reflection
  DNMemberInfo = interface; // type: System.Reflection.MemberInfo, namespace: System.Reflection
  DNEventInfo = interface; // type: System.Reflection.EventInfo, namespace: System.Reflection
  DNFieldInfo = interface; // type: System.Reflection.FieldInfo, namespace: System.Reflection
  DNFieldBuilder = interface; // type: System.Reflection.Emit.FieldBuilder, namespace: System.Reflection.Emit
  DNMethodBase = interface; // type: System.Reflection.MethodBase, namespace: System.Reflection
  DNConstructorInfo = interface; // type: System.Reflection.ConstructorInfo, namespace: System.Reflection
  DNConstructorBuilder = interface; // type: System.Reflection.Emit.ConstructorBuilder, namespace: System.Reflection.Emit
  DNMethodInfo = interface; // type: System.Reflection.MethodInfo, namespace: System.Reflection
  DNDynamicMethod = interface; // type: System.Reflection.Emit.DynamicMethod, namespace: System.Reflection.Emit
  DNMethodBuilder = interface; // type: System.Reflection.Emit.MethodBuilder, namespace: System.Reflection.Emit
  DNPropertyInfo = interface; // type: System.Reflection.PropertyInfo, namespace: System.Reflection
  DNPropertyBuilder = interface; // type: System.Reflection.Emit.PropertyBuilder, namespace: System.Reflection.Emit
  DNType = interface; // type: System.Type, namespace: System
  DNTypeInfo = interface; // type: System.Reflection.TypeInfo, namespace: System.Reflection
  DNEnumBuilder = interface; // type: System.Reflection.Emit.EnumBuilder, namespace: System.Reflection.Emit
  DNGenericTypeParameterBuilder = interface; // type: System.Reflection.Emit.GenericTypeParameterBuilder, namespace: System.Reflection.Emit
  DNTypeBuilder = interface; // type: System.Reflection.Emit.TypeBuilder, namespace: System.Reflection.Emit
  DNTypeDelegator = interface; // type: System.Reflection.TypeDelegator, namespace: System.Reflection
  DNAssemblyExtensions = interface; // type: System.Reflection.Metadata.AssemblyExtensions, namespace: System.Reflection.Metadata
  DNMethodBody = interface; // type: System.Reflection.MethodBody, namespace: System.Reflection
  DNMissing = interface; // type: System.Reflection.Missing, namespace: System.Reflection
  DNModule = interface; // type: System.Reflection.Module, namespace: System.Reflection
  DNModuleBuilder = interface; // type: System.Reflection.Emit.ModuleBuilder, namespace: System.Reflection.Emit
  DNParameterInfo = interface; // type: System.Reflection.ParameterInfo, namespace: System.Reflection
  DNPointer = interface; // type: System.Reflection.Pointer, namespace: System.Reflection
  DNReflectionContext = interface; // type: System.Reflection.ReflectionContext, namespace: System.Reflection
  DNRuntimeReflectionExtensions = interface; // type: System.Reflection.RuntimeReflectionExtensions, namespace: System.Reflection
  DNStrongNameKeyPair = interface; // type: System.Reflection.StrongNameKeyPair, namespace: System.Reflection
  DNResourceManager = interface; // type: System.Resources.ResourceManager, namespace: System.Resources
  DNResourceReader = interface; // type: System.Resources.ResourceReader, namespace: System.Resources
  DNResourceSet = interface; // type: System.Resources.ResourceSet, namespace: System.Resources
  DNCallConvCdecl = interface; // type: System.Runtime.CompilerServices.CallConvCdecl, namespace: System.Runtime.CompilerServices
  DNCallConvFastcall = interface; // type: System.Runtime.CompilerServices.CallConvFastcall, namespace: System.Runtime.CompilerServices
  DNCallConvStdcall = interface; // type: System.Runtime.CompilerServices.CallConvStdcall, namespace: System.Runtime.CompilerServices
  DNCallConvThiscall = interface; // type: System.Runtime.CompilerServices.CallConvThiscall, namespace: System.Runtime.CompilerServices
  DNConditionalWeakTable<TKey, TValue> = interface; // type: System.Runtime.CompilerServices.ConditionalWeakTable`2, namespace: System.Runtime.CompilerServices
  DNContractHelper = interface; // type: System.Runtime.CompilerServices.ContractHelper, namespace: System.Runtime.CompilerServices
  DNFormattableStringFactory = interface; // type: System.Runtime.CompilerServices.FormattableStringFactory, namespace: System.Runtime.CompilerServices
  DNIsConst = interface; // type: System.Runtime.CompilerServices.IsConst, namespace: System.Runtime.CompilerServices
  DNIsExternalInit = interface; // type: System.Runtime.CompilerServices.IsExternalInit, namespace: System.Runtime.CompilerServices
  DNIsVolatile = interface; // type: System.Runtime.CompilerServices.IsVolatile, namespace: System.Runtime.CompilerServices
  DNRuntimeFeature = interface; // type: System.Runtime.CompilerServices.RuntimeFeature, namespace: System.Runtime.CompilerServices
  DNRuntimeHelpers = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers, namespace: System.Runtime.CompilerServices
  DNStrongBox<T> = interface; // type: System.Runtime.CompilerServices.StrongBox`1, namespace: System.Runtime.CompilerServices
  DNCriticalFinalizerObject = interface; // type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject, namespace: System.Runtime.ConstrainedExecution
  DNCriticalHandle = interface; // type: System.Runtime.InteropServices.CriticalHandle, namespace: System.Runtime.InteropServices
  DNCriticalHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandle = interface; // type: System.Runtime.InteropServices.SafeHandle, namespace: System.Runtime.InteropServices
  DNSafeHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeWaitHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeWaitHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeBuffer = interface; // type: System.Runtime.InteropServices.SafeBuffer, namespace: System.Runtime.InteropServices
  DNMemoryFailPoint = interface; // type: System.Runtime.MemoryFailPoint, namespace: System.Runtime
  DNThread = interface; // type: System.Threading.Thread, namespace: System.Threading
  DNExceptionDispatchInfo = interface; // type: System.Runtime.ExceptionServices.ExceptionDispatchInfo, namespace: System.Runtime.ExceptionServices
  DNGCSettings = interface; // type: System.Runtime.GCSettings, namespace: System.Runtime
  DNBStrWrapper = interface; // type: System.Runtime.InteropServices.BStrWrapper, namespace: System.Runtime.InteropServices
  DNCollectionsMarshal = interface; // type: System.Runtime.InteropServices.CollectionsMarshal, namespace: System.Runtime.InteropServices
  DNComEventsHelper = interface; // type: System.Runtime.InteropServices.ComEventsHelper, namespace: System.Runtime.InteropServices
  DNComWrappers = interface; // type: System.Runtime.InteropServices.ComWrappers, namespace: System.Runtime.InteropServices
  DNCurrencyWrapper = interface; // type: System.Runtime.InteropServices.CurrencyWrapper, namespace: System.Runtime.InteropServices
  DNDispatchWrapper = interface; // type: System.Runtime.InteropServices.DispatchWrapper, namespace: System.Runtime.InteropServices
  DNErrorWrapper = interface; // type: System.Runtime.InteropServices.ErrorWrapper, namespace: System.Runtime.InteropServices
  DNMarshal = interface; // type: System.Runtime.InteropServices.Marshal, namespace: System.Runtime.InteropServices
  DNMemoryMarshal = interface; // type: System.Runtime.InteropServices.MemoryMarshal, namespace: System.Runtime.InteropServices
  DNNativeLibrary = interface; // type: System.Runtime.InteropServices.NativeLibrary, namespace: System.Runtime.InteropServices
  DNUnknownWrapper = interface; // type: System.Runtime.InteropServices.UnknownWrapper, namespace: System.Runtime.InteropServices
  DNVariantWrapper = interface; // type: System.Runtime.InteropServices.VariantWrapper, namespace: System.Runtime.InteropServices
  DNArmBase = interface; // type: System.Runtime.Intrinsics.Arm.ArmBase, namespace: System.Runtime.Intrinsics.Arm
  DNArmBase_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.ArmBase+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNAdvSimd_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.AdvSimd+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNDp_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Dp+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNRdm_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Rdm+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNAes_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Aes+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNCrc32_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Crc32+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNSha1_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Sha1+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNSha256_Arm64 = interface; // type: System.Runtime.Intrinsics.Arm.Sha256+Arm64, namespace: System.Runtime.Intrinsics.Arm
  DNAdvSimd = interface; // type: System.Runtime.Intrinsics.Arm.AdvSimd, namespace: System.Runtime.Intrinsics.Arm
  DNDp = interface; // type: System.Runtime.Intrinsics.Arm.Dp, namespace: System.Runtime.Intrinsics.Arm
  DNRdm = interface; // type: System.Runtime.Intrinsics.Arm.Rdm, namespace: System.Runtime.Intrinsics.Arm
  DNArm_Aes = interface; // type: System.Runtime.Intrinsics.Arm.Aes, namespace: System.Runtime.Intrinsics.Arm
  DNCrc32 = interface; // type: System.Runtime.Intrinsics.Arm.Crc32, namespace: System.Runtime.Intrinsics.Arm
  DNSha1 = interface; // type: System.Runtime.Intrinsics.Arm.Sha1, namespace: System.Runtime.Intrinsics.Arm
  DNSha256 = interface; // type: System.Runtime.Intrinsics.Arm.Sha256, namespace: System.Runtime.Intrinsics.Arm
  DNVector128 = interface; // type: System.Runtime.Intrinsics.Vector128, namespace: System.Runtime.Intrinsics
  DNVector256 = interface; // type: System.Runtime.Intrinsics.Vector256, namespace: System.Runtime.Intrinsics
  DNVector64 = interface; // type: System.Runtime.Intrinsics.Vector64, namespace: System.Runtime.Intrinsics
  DNX86Base = interface; // type: System.Runtime.Intrinsics.X86.X86Base, namespace: System.Runtime.Intrinsics.X86
  DNBmi1 = interface; // type: System.Runtime.Intrinsics.X86.Bmi1, namespace: System.Runtime.Intrinsics.X86
  DNBmi2 = interface; // type: System.Runtime.Intrinsics.X86.Bmi2, namespace: System.Runtime.Intrinsics.X86
  DNLzcnt = interface; // type: System.Runtime.Intrinsics.X86.Lzcnt, namespace: System.Runtime.Intrinsics.X86
  DNSse = interface; // type: System.Runtime.Intrinsics.X86.Sse, namespace: System.Runtime.Intrinsics.X86
  DNSse2 = interface; // type: System.Runtime.Intrinsics.X86.Sse2, namespace: System.Runtime.Intrinsics.X86
  DNX86_Aes = interface; // type: System.Runtime.Intrinsics.X86.Aes, namespace: System.Runtime.Intrinsics.X86
  DNPclmulqdq = interface; // type: System.Runtime.Intrinsics.X86.Pclmulqdq, namespace: System.Runtime.Intrinsics.X86
  DNSse3 = interface; // type: System.Runtime.Intrinsics.X86.Sse3, namespace: System.Runtime.Intrinsics.X86
  DNSsse3 = interface; // type: System.Runtime.Intrinsics.X86.Ssse3, namespace: System.Runtime.Intrinsics.X86
  DNSse41 = interface; // type: System.Runtime.Intrinsics.X86.Sse41, namespace: System.Runtime.Intrinsics.X86
  DNSse42 = interface; // type: System.Runtime.Intrinsics.X86.Sse42, namespace: System.Runtime.Intrinsics.X86
  DNAvx = interface; // type: System.Runtime.Intrinsics.X86.Avx, namespace: System.Runtime.Intrinsics.X86
  DNAvx2 = interface; // type: System.Runtime.Intrinsics.X86.Avx2, namespace: System.Runtime.Intrinsics.X86
  DNFma = interface; // type: System.Runtime.Intrinsics.X86.Fma, namespace: System.Runtime.Intrinsics.X86
  DNPopcnt = interface; // type: System.Runtime.Intrinsics.X86.Popcnt, namespace: System.Runtime.Intrinsics.X86
  DNX86Base_X64 = interface; // type: System.Runtime.Intrinsics.X86.X86Base+X64, namespace: System.Runtime.Intrinsics.X86
  DNBmi1_X64 = interface; // type: System.Runtime.Intrinsics.X86.Bmi1+X64, namespace: System.Runtime.Intrinsics.X86
  DNBmi2_X64 = interface; // type: System.Runtime.Intrinsics.X86.Bmi2+X64, namespace: System.Runtime.Intrinsics.X86
  DNLzcnt_X64 = interface; // type: System.Runtime.Intrinsics.X86.Lzcnt+X64, namespace: System.Runtime.Intrinsics.X86
  DNSse_X64 = interface; // type: System.Runtime.Intrinsics.X86.Sse+X64, namespace: System.Runtime.Intrinsics.X86
  DNSse2_X64 = interface; // type: System.Runtime.Intrinsics.X86.Sse2+X64, namespace: System.Runtime.Intrinsics.X86
  DNAes_X64 = interface; // type: System.Runtime.Intrinsics.X86.Aes+X64, namespace: System.Runtime.Intrinsics.X86
  DNPclmulqdq_X64 = interface; // type: System.Runtime.Intrinsics.X86.Pclmulqdq+X64, namespace: System.Runtime.Intrinsics.X86
  DNSse3_X64 = interface; // type: System.Runtime.Intrinsics.X86.Sse3+X64, namespace: System.Runtime.Intrinsics.X86
  DNSsse3_X64 = interface; // type: System.Runtime.Intrinsics.X86.Ssse3+X64, namespace: System.Runtime.Intrinsics.X86
  DNSse41_X64 = interface; // type: System.Runtime.Intrinsics.X86.Sse41+X64, namespace: System.Runtime.Intrinsics.X86
  DNSse42_X64 = interface; // type: System.Runtime.Intrinsics.X86.Sse42+X64, namespace: System.Runtime.Intrinsics.X86
  DNAvx_X64 = interface; // type: System.Runtime.Intrinsics.X86.Avx+X64, namespace: System.Runtime.Intrinsics.X86
  DNAvx2_X64 = interface; // type: System.Runtime.Intrinsics.X86.Avx2+X64, namespace: System.Runtime.Intrinsics.X86
  DNFma_X64 = interface; // type: System.Runtime.Intrinsics.X86.Fma+X64, namespace: System.Runtime.Intrinsics.X86
  DNPopcnt_X64 = interface; // type: System.Runtime.Intrinsics.X86.Popcnt+X64, namespace: System.Runtime.Intrinsics.X86
  DNAssemblyDependencyResolver = interface; // type: System.Runtime.Loader.AssemblyDependencyResolver, namespace: System.Runtime.Loader
  DNAssemblyLoadContext = interface; // type: System.Runtime.Loader.AssemblyLoadContext, namespace: System.Runtime.Loader
  DNProfileOptimization = interface; // type: System.Runtime.ProfileOptimization, namespace: System.Runtime
  DNSerializationInfo = interface; // type: System.Runtime.Serialization.SerializationInfo, namespace: System.Runtime.Serialization
  DNSerializationInfoEnumerator = interface; // type: System.Runtime.Serialization.SerializationInfoEnumerator, namespace: System.Runtime.Serialization
  DNFrameworkName = interface; // type: System.Runtime.Versioning.FrameworkName, namespace: System.Runtime.Versioning
  DNVersioningHelper = interface; // type: System.Runtime.Versioning.VersioningHelper, namespace: System.Runtime.Versioning
  DNPermissionSet = interface; // type: System.Security.PermissionSet, namespace: System.Security
  DNSecureString = interface; // type: System.Security.SecureString, namespace: System.Security
  DNSecurityElement = interface; // type: System.Security.SecurityElement, namespace: System.Security
  DNString = interface; // type: System.String, namespace: System
  DNStringComparer = interface; // type: System.StringComparer, namespace: System
  DNCultureAwareComparer = interface; // type: System.CultureAwareComparer, namespace: System
  DNOrdinalComparer = interface; // type: System.OrdinalComparer, namespace: System
  DNStringNormalizationExtensions = interface; // type: System.StringNormalizationExtensions, namespace: System
  DNDecoder = interface; // type: System.Text.Decoder, namespace: System.Text
  DNDecoderFallback = interface; // type: System.Text.DecoderFallback, namespace: System.Text
  DNDecoderExceptionFallback = interface; // type: System.Text.DecoderExceptionFallback, namespace: System.Text
  DNDecoderReplacementFallback = interface; // type: System.Text.DecoderReplacementFallback, namespace: System.Text
  DNDecoderFallbackBuffer = interface; // type: System.Text.DecoderFallbackBuffer, namespace: System.Text
  DNDecoderExceptionFallbackBuffer = interface; // type: System.Text.DecoderExceptionFallbackBuffer, namespace: System.Text
  DNDecoderReplacementFallbackBuffer = interface; // type: System.Text.DecoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoder = interface; // type: System.Text.Encoder, namespace: System.Text
  DNEncoderFallback = interface; // type: System.Text.EncoderFallback, namespace: System.Text
  DNEncoderExceptionFallback = interface; // type: System.Text.EncoderExceptionFallback, namespace: System.Text
  DNEncoderReplacementFallback = interface; // type: System.Text.EncoderReplacementFallback, namespace: System.Text
  DNEncoderFallbackBuffer = interface; // type: System.Text.EncoderFallbackBuffer, namespace: System.Text
  DNEncoderExceptionFallbackBuffer = interface; // type: System.Text.EncoderExceptionFallbackBuffer, namespace: System.Text
  DNEncoderReplacementFallbackBuffer = interface; // type: System.Text.EncoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoding = interface; // type: System.Text.Encoding, namespace: System.Text
  DNASCIIEncoding = interface; // type: System.Text.ASCIIEncoding, namespace: System.Text
  DNUnicodeEncoding = interface; // type: System.Text.UnicodeEncoding, namespace: System.Text
  DNUTF32Encoding = interface; // type: System.Text.UTF32Encoding, namespace: System.Text
  DNUTF7Encoding = interface; // type: System.Text.UTF7Encoding, namespace: System.Text
  DNUTF8Encoding = interface; // type: System.Text.UTF8Encoding, namespace: System.Text
  DNEncodingInfo = interface; // type: System.Text.EncodingInfo, namespace: System.Text
  DNEncodingProvider = interface; // type: System.Text.EncodingProvider, namespace: System.Text
  DNStringBuilder = interface; // type: System.Text.StringBuilder, namespace: System.Text
  DNUtf8 = interface; // type: System.Text.Unicode.Utf8, namespace: System.Text.Unicode
  DNAsyncLocal<T> = interface; // type: System.Threading.AsyncLocal`1, namespace: System.Threading
  DNCancellationTokenSource = interface; // type: System.Threading.CancellationTokenSource, namespace: System.Threading
  DNCompressedStack = interface; // type: System.Threading.CompressedStack, namespace: System.Threading
  DNExecutionContext = interface; // type: System.Threading.ExecutionContext, namespace: System.Threading
  DNInterlocked = interface; // type: System.Threading.Interlocked, namespace: System.Threading
  DNLazyInitializer = interface; // type: System.Threading.LazyInitializer, namespace: System.Threading
  DNManualResetEventSlim = interface; // type: System.Threading.ManualResetEventSlim, namespace: System.Threading
  DNMonitor = interface; // type: System.Threading.Monitor, namespace: System.Threading
  DNOverlapped = interface; // type: System.Threading.Overlapped, namespace: System.Threading
  DNPreAllocatedOverlapped = interface; // type: System.Threading.PreAllocatedOverlapped, namespace: System.Threading
  DNReaderWriterLockSlim = interface; // type: System.Threading.ReaderWriterLockSlim, namespace: System.Threading
  DNSemaphoreSlim = interface; // type: System.Threading.SemaphoreSlim, namespace: System.Threading
  DNSynchronizationContext = interface; // type: System.Threading.SynchronizationContext, namespace: System.Threading
  DNConcurrentExclusiveSchedulerPair = interface; // type: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair, namespace: System.Threading.Tasks
  DNTask = interface; // type: System.Threading.Tasks.Task, namespace: System.Threading.Tasks
  DNTask<TResult> = interface; // type: System.Threading.Tasks.Task`1, namespace: System.Threading.Tasks
  DNTaskAsyncEnumerableExtensions = interface; // type: System.Threading.Tasks.TaskAsyncEnumerableExtensions, namespace: System.Threading.Tasks
  DNTaskCompletionSource<TResult> = interface; // type: System.Threading.Tasks.TaskCompletionSource`1, namespace: System.Threading.Tasks
  DNTaskCompletionSource = interface; // type: System.Threading.Tasks.TaskCompletionSource, namespace: System.Threading.Tasks
  DNTaskExtensions = interface; // type: System.Threading.Tasks.TaskExtensions, namespace: System.Threading.Tasks
  DNTaskFactory<TResult> = interface; // type: System.Threading.Tasks.TaskFactory`1, namespace: System.Threading.Tasks
  DNTaskFactory = interface; // type: System.Threading.Tasks.TaskFactory, namespace: System.Threading.Tasks
  DNTaskScheduler = interface; // type: System.Threading.Tasks.TaskScheduler, namespace: System.Threading.Tasks
  DNThreadLocal<T> = interface; // type: System.Threading.ThreadLocal`1, namespace: System.Threading
  DNThreadPool = interface; // type: System.Threading.ThreadPool, namespace: System.Threading
  DNThreadPoolBoundHandle = interface; // type: System.Threading.ThreadPoolBoundHandle, namespace: System.Threading
  DNTimeout = interface; // type: System.Threading.Timeout, namespace: System.Threading
  DNVolatile = interface; // type: System.Threading.Volatile, namespace: System.Threading
  DNWaitHandleExtensions = interface; // type: System.Threading.WaitHandleExtensions, namespace: System.Threading
  DNTimeZone = interface; // type: System.TimeZone, namespace: System
  DNTimeZoneInfo = interface; // type: System.TimeZoneInfo, namespace: System
  DNTimeZoneInfo_AdjustmentRule = interface; // type: System.TimeZoneInfo+AdjustmentRule, namespace: System
  DNTuple<T1> = interface; // type: System.Tuple`1, namespace: System
  DNTuple<T1, T2> = interface; // type: System.Tuple`2, namespace: System
  DNTuple<T1, T2, T3> = interface; // type: System.Tuple`3, namespace: System
  DNTuple<T1, T2, T3, T4> = interface; // type: System.Tuple`4, namespace: System
  DNTuple<T1, T2, T3, T4, T5> = interface; // type: System.Tuple`5, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.Tuple`6, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.Tuple`7, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.Tuple`8, namespace: System
  DNTuple = interface; // type: System.Tuple, namespace: System
  DNTupleExtensions = interface; // type: System.TupleExtensions, namespace: System
  DNUnitySerializationHolder = interface; // type: System.UnitySerializationHolder, namespace: System
  DNValueType = interface; // type: System.ValueType, namespace: System
  DNComActivationContext = interface; // type: Internal.Runtime.InteropServices.ComActivationContext, namespace: Internal.Runtime.InteropServices
  DNComActivationContextInternal = interface; // type: Internal.Runtime.InteropServices.ComActivationContextInternal, namespace: Internal.Runtime.InteropServices
  DNArgIterator = interface; // type: System.ArgIterator, namespace: System
  DNArraySegment<T> = interface; // type: System.ArraySegment`1, namespace: System
  DNArraySegment_Enumerator<T> = interface; // type: System.ArraySegment`1+Enumerator, namespace: System
  DNBoolean = interface; // type: System.Boolean, namespace: System
  DNMemoryHandle = interface; // type: System.Buffers.MemoryHandle, namespace: System.Buffers
  DNStandardFormat = interface; // type: System.Buffers.StandardFormat, namespace: System.Buffers
  DNByte = interface; // type: System.Byte, namespace: System
  DNChar = interface; // type: System.Char, namespace: System
  DNDictionaryEntry = interface; // type: System.Collections.DictionaryEntry, namespace: System.Collections
  DNDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+Enumerator, namespace: System.Collections.Generic
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNHashSet_Enumerator<T> = interface; // type: System.Collections.Generic.HashSet`1+Enumerator, namespace: System.Collections.Generic
  DNKeyValuePair<TKey, TValue> = interface; // type: System.Collections.Generic.KeyValuePair`2, namespace: System.Collections.Generic
  DNList_Enumerator<T> = interface; // type: System.Collections.Generic.List`1+Enumerator, namespace: System.Collections.Generic
  DNDateTime = interface; // type: System.DateTime, namespace: System
  DNDateTimeOffset = interface; // type: System.DateTimeOffset, namespace: System
  DNDecimal = interface; // type: System.Decimal, namespace: System
  DNEventSourceOptions = interface; // type: System.Diagnostics.Tracing.EventSourceOptions, namespace: System.Diagnostics.Tracing
  DNDouble = interface; // type: System.Double, namespace: System
  DNEnum = interface; // type: System.Enum, namespace: System
  DNGCGenerationInfo = interface; // type: System.GCGenerationInfo, namespace: System
  DNGCMemoryInfo = interface; // type: System.GCMemoryInfo, namespace: System
  DNGuid = interface; // type: System.Guid, namespace: System
  DNHalf = interface; // type: System.Half, namespace: System
  DNHashCode = interface; // type: System.HashCode, namespace: System
  DNIndex = interface; // type: System.Index, namespace: System
  DNInt16 = interface; // type: System.Int16, namespace: System
  DNInt32 = interface; // type: System.Int32, namespace: System
  DNInt64 = interface; // type: System.Int64, namespace: System
  DNIntPtr = interface; // type: System.IntPtr, namespace: System
  DNMemory<T> = interface; // type: System.Memory`1, namespace: System
  DNModuleHandle = interface; // type: System.ModuleHandle, namespace: System
  DNNullable<T> = interface; // type: System.Nullable`1, namespace: System
  DNMatrix3x2 = interface; // type: System.Numerics.Matrix3x2, namespace: System.Numerics
  DNMatrix4x4 = interface; // type: System.Numerics.Matrix4x4, namespace: System.Numerics
  DNPlane = interface; // type: System.Numerics.Plane, namespace: System.Numerics
  DNQuaternion = interface; // type: System.Numerics.Quaternion, namespace: System.Numerics
  DNVector<T> = interface; // type: System.Numerics.Vector`1, namespace: System.Numerics
  DNVector2 = interface; // type: System.Numerics.Vector2, namespace: System.Numerics
  DNVector3 = interface; // type: System.Numerics.Vector3, namespace: System.Numerics
  DNVector4 = interface; // type: System.Numerics.Vector4, namespace: System.Numerics
  DNRange = interface; // type: System.Range, namespace: System
  DNReadOnlyMemory<T> = interface; // type: System.ReadOnlyMemory`1, namespace: System
  DNReadOnlySpan<T> = interface; // type: System.ReadOnlySpan`1, namespace: System
  DNReadOnlySpan_Enumerator<T> = interface; // type: System.ReadOnlySpan`1+Enumerator, namespace: System
  DNCustomAttributeNamedArgument = interface; // type: System.Reflection.CustomAttributeNamedArgument, namespace: System.Reflection
  DNCustomAttributeTypedArgument = interface; // type: System.Reflection.CustomAttributeTypedArgument, namespace: System.Reflection
  DNEventToken = interface; // type: System.Reflection.Emit.EventToken, namespace: System.Reflection.Emit
  DNFieldToken = interface; // type: System.Reflection.Emit.FieldToken, namespace: System.Reflection.Emit
  DNLabel = interface; // type: System.Reflection.Emit.Label, namespace: System.Reflection.Emit
  DNMethodToken = interface; // type: System.Reflection.Emit.MethodToken, namespace: System.Reflection.Emit
  DNOpCode = interface; // type: System.Reflection.Emit.OpCode, namespace: System.Reflection.Emit
  DNParameterToken = interface; // type: System.Reflection.Emit.ParameterToken, namespace: System.Reflection.Emit
  DNPropertyToken = interface; // type: System.Reflection.Emit.PropertyToken, namespace: System.Reflection.Emit
  DNSignatureToken = interface; // type: System.Reflection.Emit.SignatureToken, namespace: System.Reflection.Emit
  DNStringToken = interface; // type: System.Reflection.Emit.StringToken, namespace: System.Reflection.Emit
  DNTypeToken = interface; // type: System.Reflection.Emit.TypeToken, namespace: System.Reflection.Emit
  DNInterfaceMapping = interface; // type: System.Reflection.InterfaceMapping, namespace: System.Reflection
  DNParameterModifier = interface; // type: System.Reflection.ParameterModifier, namespace: System.Reflection
  DNAsyncIteratorMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncIteratorMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncTaskMethodBuilder<TResult> = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1, namespace: System.Runtime.CompilerServices
  DNAsyncTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncValueTaskMethodBuilder<TResult> = interface; // type: System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1, namespace: System.Runtime.CompilerServices
  DNAsyncValueTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncVoidMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, namespace: System.Runtime.CompilerServices
  DNConfiguredAsyncDisposable = interface; // type: System.Runtime.CompilerServices.ConfiguredAsyncDisposable, namespace: System.Runtime.CompilerServices
  DNConfiguredCancelableAsyncEnumerable<T> = interface; // type: System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1, namespace: System.Runtime.CompilerServices
  DNConfiguredCancelableAsyncEnumerable_Enumerator<T> = interface; // type: System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1+Enumerator, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredValueTaskAwaitable<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredValueTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.TaskAwaiter`1, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter = interface; // type: System.Runtime.CompilerServices.TaskAwaiter, namespace: System.Runtime.CompilerServices
  DNValueTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ValueTaskAwaiter`1, namespace: System.Runtime.CompilerServices
  DNValueTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable = interface; // type: System.Runtime.CompilerServices.YieldAwaitable, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable_YieldAwaiter = interface; // type: System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter, namespace: System.Runtime.CompilerServices
  DNArrayWithOffset = interface; // type: System.Runtime.InteropServices.ArrayWithOffset, namespace: System.Runtime.InteropServices
  DNBIND_OPTS = interface; // type: System.Runtime.InteropServices.ComTypes.BIND_OPTS, namespace: System.Runtime.InteropServices.ComTypes
  DNBINDPTR = interface; // type: System.Runtime.InteropServices.ComTypes.BINDPTR, namespace: System.Runtime.InteropServices.ComTypes
  DNCONNECTDATA = interface; // type: System.Runtime.InteropServices.ComTypes.CONNECTDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNDISPPARAMS = interface; // type: System.Runtime.InteropServices.ComTypes.DISPPARAMS, namespace: System.Runtime.InteropServices.ComTypes
  DNELEMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNEXCEPINFO = interface; // type: System.Runtime.InteropServices.ComTypes.EXCEPINFO, namespace: System.Runtime.InteropServices.ComTypes
  DNFILETIME = interface; // type: System.Runtime.InteropServices.ComTypes.FILETIME, namespace: System.Runtime.InteropServices.ComTypes
  DNFUNCDESC = interface; // type: System.Runtime.InteropServices.ComTypes.FUNCDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNIDLDESC = interface; // type: System.Runtime.InteropServices.ComTypes.IDLDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNPARAMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.PARAMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNSTATSTG = interface; // type: System.Runtime.InteropServices.ComTypes.STATSTG, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPEATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPEDESC = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPELIBATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPELIBATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNVARDESC = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNVARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNComWrappers_ComInterfaceDispatch = interface; // type: System.Runtime.InteropServices.ComWrappers+ComInterfaceDispatch, namespace: System.Runtime.InteropServices
  DNComWrappers_ComInterfaceEntry = interface; // type: System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry, namespace: System.Runtime.InteropServices
  DNGCHandle = interface; // type: System.Runtime.InteropServices.GCHandle, namespace: System.Runtime.InteropServices
  DNHandleRef = interface; // type: System.Runtime.InteropServices.HandleRef, namespace: System.Runtime.InteropServices
  DNVector128<T> = interface; // type: System.Runtime.Intrinsics.Vector128`1, namespace: System.Runtime.Intrinsics
  DNVector256<T> = interface; // type: System.Runtime.Intrinsics.Vector256`1, namespace: System.Runtime.Intrinsics
  DNVector64<T> = interface; // type: System.Runtime.Intrinsics.Vector64`1, namespace: System.Runtime.Intrinsics
  DNAssemblyLoadContext_ContextualReflectionScope = interface; // type: System.Runtime.Loader.AssemblyLoadContext+ContextualReflectionScope, namespace: System.Runtime.Loader
  DNDeserializationToken = interface; // type: System.Runtime.Serialization.DeserializationToken, namespace: System.Runtime.Serialization
  DNSerializationEntry = interface; // type: System.Runtime.Serialization.SerializationEntry, namespace: System.Runtime.Serialization
  DNStreamingContext = interface; // type: System.Runtime.Serialization.StreamingContext, namespace: System.Runtime.Serialization
  DNRuntimeArgumentHandle = interface; // type: System.RuntimeArgumentHandle, namespace: System
  DNRuntimeFieldHandle = interface; // type: System.RuntimeFieldHandle, namespace: System
  DNRuntimeMethodHandle = interface; // type: System.RuntimeMethodHandle, namespace: System
  DNRuntimeTypeHandle = interface; // type: System.RuntimeTypeHandle, namespace: System
  DNSByte = interface; // type: System.SByte, namespace: System
  DNSingle = interface; // type: System.Single, namespace: System
  DNSpan<T> = interface; // type: System.Span`1, namespace: System
  DNSpan_Enumerator<T> = interface; // type: System.Span`1+Enumerator, namespace: System
  DNRune = interface; // type: System.Text.Rune, namespace: System.Text
  DNSpanRuneEnumerator = interface; // type: System.Text.SpanRuneEnumerator, namespace: System.Text
  DNStringBuilder_ChunkEnumerator = interface; // type: System.Text.StringBuilder+ChunkEnumerator, namespace: System.Text
  DNStringRuneEnumerator = interface; // type: System.Text.StringRuneEnumerator, namespace: System.Text
  DNAsyncFlowControl = interface; // type: System.Threading.AsyncFlowControl, namespace: System.Threading
  DNAsyncLocalValueChangedArgs<T> = interface; // type: System.Threading.AsyncLocalValueChangedArgs`1, namespace: System.Threading
  DNCancellationToken = interface; // type: System.Threading.CancellationToken, namespace: System.Threading
  DNCancellationTokenRegistration = interface; // type: System.Threading.CancellationTokenRegistration, namespace: System.Threading
  DNNativeOverlapped = interface; // type: System.Threading.NativeOverlapped, namespace: System.Threading
  DNSpinLock = interface; // type: System.Threading.SpinLock, namespace: System.Threading
  DNSpinWait = interface; // type: System.Threading.SpinWait, namespace: System.Threading
  DNManualResetValueTaskSourceCore<TResult> = interface; // type: System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1, namespace: System.Threading.Tasks.Sources
  DNValueTask<TResult> = interface; // type: System.Threading.Tasks.ValueTask`1, namespace: System.Threading.Tasks
  DNValueTask = interface; // type: System.Threading.Tasks.ValueTask, namespace: System.Threading.Tasks
  DNTimeSpan = interface; // type: System.TimeSpan, namespace: System
  DNTimeZoneInfo_TransitionTime = interface; // type: System.TimeZoneInfo+TransitionTime, namespace: System
  DNTypedReference = interface; // type: System.TypedReference, namespace: System
  DNUInt16 = interface; // type: System.UInt16, namespace: System
  DNUInt32 = interface; // type: System.UInt32, namespace: System
  DNUInt64 = interface; // type: System.UInt64, namespace: System
  DNUIntPtr = interface; // type: System.UIntPtr, namespace: System
  DNValueTuple<T1> = interface; // type: System.ValueTuple`1, namespace: System
  DNValueTuple<T1, T2> = interface; // type: System.ValueTuple`2, namespace: System
  DNValueTuple<T1, T2, T3> = interface; // type: System.ValueTuple`3, namespace: System
  DNValueTuple<T1, T2, T3, T4> = interface; // type: System.ValueTuple`4, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5> = interface; // type: System.ValueTuple`5, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.ValueTuple`6, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.ValueTuple`7, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.ValueTuple`8, namespace: System
  DNValueTuple = interface; // type: System.ValueTuple, namespace: System
  DNVoid = interface; // type: System.Void, namespace: System
  DNVersion = interface; // type: System.Version, namespace: System
  DNWeakReference<T> = interface; // type: System.WeakReference`1, namespace: System
  DNWeakReference = interface; // type: System.WeakReference, namespace: System

{ delegates }

  [DNTypeName('Internal.Runtime.InteropServices.ComponentActivator+ComponentEntryPoint')]
  DNComponentActivator_ComponentEntryPoint = function(args: IntPtr; sizeBytes: Int32): Int32 of object;

  [DNTypeName('System.Action`1')]
  DNAction<T> = procedure(obj: T) of object;

  [DNTypeName('System.Action`10')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10) of object;

  [DNTypeName('System.Action`11')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11) of object;

  [DNTypeName('System.Action`12')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12) of object;

  [DNTypeName('System.Action`13')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13) of object;

  [DNTypeName('System.Action`14')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14) of object;

  [DNTypeName('System.Action`15')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15) of object;

  [DNTypeName('System.Action`16')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16) of object;

  [DNTypeName('System.Action`2')]
  DNAction<T1, T2> = procedure(arg1: T1; arg2: T2) of object;

  [DNTypeName('System.Action`3')]
  DNAction<T1, T2, T3> = procedure(arg1: T1; arg2: T2; arg3: T3) of object;

  [DNTypeName('System.Action`4')]
  DNAction<T1, T2, T3, T4> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4) of object;

  [DNTypeName('System.Action`5')]
  DNAction<T1, T2, T3, T4, T5> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5) of object;

  [DNTypeName('System.Action`6')]
  DNAction<T1, T2, T3, T4, T5, T6> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6) of object;

  [DNTypeName('System.Action`7')]
  DNAction<T1, T2, T3, T4, T5, T6, T7> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7) of object;

  [DNTypeName('System.Action`8')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8) of object;

  [DNTypeName('System.Action`9')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9) of object;

  [DNTypeName('System.Action')]
  DNAction = procedure of object;

  [DNTypeName('System.AssemblyLoadEventHandler')]
  DNAssemblyLoadEventHandler = procedure(sender: DNObject; args: DNAssemblyLoadEventArgs) of object;

  [DNTypeName('System.AsyncCallback')]
  DNAsyncCallback = procedure(ar: DNIAsyncResult) of object;

  [DNTypeName('System.Buffers.ReadOnlySpanAction`2')]
  DNReadOnlySpanAction<T, TArg> = procedure(span: DNReadOnlySpan<T>; arg: TArg) of object;

  [DNTypeName('System.Buffers.SpanAction`2')]
  DNSpanAction<T, TArg> = procedure(span: DNSpan<T>; arg: TArg) of object;

  [DNTypeName('System.Comparison`1')]
  DNComparison<T> = function(x: T; y: T): Int32 of object;

  [DNTypeName('System.Converter`2')]
  DNConverter<TInput, TOutput> = function(input: TInput): TOutput of object;

  [DNTypeName('System.EventHandler`1')]
  DNEventHandler<TEventArgs> = procedure(sender: DNObject; e: TEventArgs) of object;

  [DNTypeName('System.EventHandler')]
  DNEventHandler = procedure(sender: DNObject; e: DNEventArgs) of object;

  [DNTypeName('System.Func`1')]
  DNFunc<TResult> = function: TResult of object;

  [DNTypeName('System.Func`10')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9): TResult of object;

  [DNTypeName('System.Func`11')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10): TResult of object;

  [DNTypeName('System.Func`12')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11): TResult of object;

  [DNTypeName('System.Func`13')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12): TResult of object;

  [DNTypeName('System.Func`14')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13): TResult of object;

  [DNTypeName('System.Func`15')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14): TResult of object;

  [DNTypeName('System.Func`16')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15): TResult of object;

  [DNTypeName('System.Func`17')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16): TResult of object;

  [DNTypeName('System.Func`2')]
  DNFunc<T, TResult> = function(arg: T): TResult of object;

  [DNTypeName('System.Func`3')]
  DNFunc<T1, T2, TResult> = function(arg1: T1; arg2: T2): TResult of object;

  [DNTypeName('System.Func`4')]
  DNFunc<T1, T2, T3, TResult> = function(arg1: T1; arg2: T2; arg3: T3): TResult of object;

  [DNTypeName('System.Func`5')]
  DNFunc<T1, T2, T3, T4, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4): TResult of object;

  [DNTypeName('System.Func`6')]
  DNFunc<T1, T2, T3, T4, T5, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5): TResult of object;

  [DNTypeName('System.Func`7')]
  DNFunc<T1, T2, T3, T4, T5, T6, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6): TResult of object;

  [DNTypeName('System.Func`8')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7): TResult of object;

  [DNTypeName('System.Func`9')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8): TResult of object;

  [DNTypeName('System.Predicate`1')]
  DNPredicate<T> = function(obj: T): Boolean of object;

  [DNTypeName('System.Reflection.MemberFilter')]
  DNMemberFilter = function(m: DNMemberInfo; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.Reflection.ModuleResolveEventHandler')]
  DNModuleResolveEventHandler = function(sender: DNObject; e: DNResolveEventArgs): DNModule of object;

  [DNTypeName('System.Reflection.TypeFilter')]
  DNTypeFilter = function(m: DNType; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.ResolveEventHandler')]
  DNResolveEventHandler = function(sender: DNObject; args: DNResolveEventArgs): DNAssembly of object;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback')]
  DNConditionalWeakTable_CreateValueCallback<TKey, TValue> = function(key: TKey): TValue of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode')]
  DNRuntimeHelpers_CleanupCode = procedure(userData: DNObject; exceptionThrown: Boolean) of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+TryCode')]
  DNRuntimeHelpers_TryCode = procedure(userData: DNObject) of object;

  [DNTypeName('System.Runtime.InteropServices.DllImportResolver')]
  DNDllImportResolver = function(libraryName: string; assembly: DNAssembly; searchPath: DNNullable<DNDllImportSearchPath>): IntPtr of object;

  [DNTypeName('System.Threading.ContextCallback')]
  DNContextCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.IOCompletionCallback')]
  DNIOCompletionCallback = procedure(errorCode: UInt32; numBytes: UInt32; var pOVERLAP: DNNativeOverlapped) of object;

  [DNTypeName('System.Threading.ParameterizedThreadStart')]
  DNParameterizedThreadStart = procedure(obj: DNObject) of object;

  [DNTypeName('System.Threading.SendOrPostCallback')]
  DNSendOrPostCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.ThreadExceptionEventHandler')]
  DNThreadExceptionEventHandler = procedure(sender: DNObject; e: DNThreadExceptionEventArgs) of object;

  [DNTypeName('System.Threading.ThreadStart')]
  DNThreadStart = procedure of object;

  [DNTypeName('System.Threading.TimerCallback')]
  DNTimerCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitCallback')]
  DNWaitCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitOrTimerCallback')]
  DNWaitOrTimerCallback = procedure(state: DNObject; timedOut: Boolean) of object;

  [DNTypeName('System.UnhandledExceptionEventHandler')]
  DNUnhandledExceptionEventHandler = procedure(sender: DNObject; e: DNUnhandledExceptionEventArgs) of object;



  { TDNGenericImport }

  TDNGenericImport<C: IDNClass; T: IDNInstance> = class(TDNCustomGenericImport<C, T>)
  private
    class function GetTypeId: DNType; static;
  public
    class property typeid: DNType read GetTypeId;
  end;

{ objects }


  DNObjectClass = interface(IDNClass)
    [IID_DNObjectClass_Name]
    {class} function init: DNObject;
    {class} function ReferenceEquals(objA, objB: DNObject): Boolean;
    {class} function Equals(objA, objB: DNObject): Boolean;
  end;

  [DNTypeName(DNObject_FullName)]
  DNObject = interface(IDNInstance)
    [IID_DNObject_Name]
    function Equals(obj: DNObject) : Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;
  end;
  TDNObject = class(TDNGenericImport<DNObjectClass, DNObject>) end;


  //-------------namespace: System----------------
  [DNTypeName('System.IDisposable')]
  DNIDisposable = interface(DNObject)
  ['{805D7A98-D4AF-3F0F-967F-E5CF45312D2C}']
  { methods } 

    procedure Dispose;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerator')]
  DNIEnumerator = interface(DNObject)
  ['{12B7CD10-B855-33F9-AA28-0914C392435A}']
  { getters & setters } 

    function get_Current: DNObject;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;

  { propertys } 

    property Current: DNObject read get_Current;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerator`1')]
  DNIEnumerator<T> = interface(DNIEnumerator)
  ['{ACCB6202-26B6-3447-AEFA-73B653F93530}']
  { getters & setters } 

    function get_Current: T;

  { propertys } 

    property Current: T read get_Current;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerable')]
  DNIEnumerable = interface(DNObject)
  ['{496B0ABE-CDEE-11D3-88E8-00902754C43A}']
  { methods } 

    function GetEnumerator: DNIEnumerator;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerable`1')]
  DNIEnumerable<T> = interface(DNIEnumerable)
  ['{AEF9EC8A-1E73-365B-8DA2-800A3A6166E6}']
  { methods } 

    function GetEnumerator: DNIEnumerator<T>;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.ICollection')]
  DNICollection = interface(DNIEnumerable)
  ['{DE8DB6F8-D101-3A92-8D1C-E72E5F10E992}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure CopyTo(&array: DNArray; index: Int32);

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ICollection`1')]
  DNICollection<T> = interface(DNIEnumerable<T>)
  ['{4E0BA8E9-C074-3990-BE19-EF596EC42B01}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure Add(item: T);
    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function Remove(item: T): Boolean;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IList')]
  DNIList = interface(DNICollection)
  ['{7BCFA00F-F764-3113-9140-3BBD127A96BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function Add(value: DNObject): Int32;
    function &Contains(value: DNObject): Boolean;
    procedure Clear;
    function IndexOf(value: DNObject): Int32;
    procedure Insert(index: Int32; value: DNObject);
    procedure Remove(value: DNObject);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IList`1')]
  DNIList<T> = interface(DNICollection<T>)
  ['{5C185EDF-6A24-396D-886F-16F49368D2AB}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionary')]
  DNIDictionary = interface(DNICollection)
  ['{6A6841DF-3287-3D87-8060-CE0B4C77D2A1}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure Remove(key: DNObject);

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IDictionary`2')]
  DNIDictionary<TKey, TValue> = interface(DNICollection<DNKeyValuePair<TKey, TValue>>)
  ['{A799EDAA-B36F-31DA-9B95-D75BE19D1CCC}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    procedure set_Item(key: TKey; value: TValue);
    function get_Keys: DNICollection<TKey>;
    function get_Values: DNICollection<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    procedure Add(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item write set_Item; default;
    property Keys: DNICollection<TKey> read get_Keys;
    property Values: DNICollection<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IComparer')]
  DNIComparer = interface(DNObject)
  ['{C20FD3EB-7022-3D14-8477-760FAB54E50D}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IComparer`1')]
  DNIComparer<T> = interface(DNObject)
  ['{2EABC2B4-F497-3FA8-AB24-876A15E92896}']
  { methods } 

    function Compare(x: T; y: T): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEqualityComparer')]
  DNIEqualityComparer = interface(DNObject)
  ['{AAB7C6EA-CAB0-3ADB-82AA-CF32E29AF238}']
  { methods } 

    function Equals(x: DNObject; y: DNObject): Boolean;
    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  DNEqualityComparerClass<T> = interface(DNObjectClass)
  ['{6DDFCAB8-AD7E-5985-90B2-301B8242851A}']
  { static getter & setter } 

    {class} function get_Default: DNEqualityComparer<T>;

  { static propertys } 

    {class} property &Default: DNEqualityComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.EqualityComparer`1')]
  DNEqualityComparer<T> = interface(DNIEqualityComparer)
  ['{8C28A784-8987-304A-9F59-6A551778B93E}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNEqualityComparer<T> = class(TDNGenericImport<DNEqualityComparerClass<T>, DNEqualityComparer<T>>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  [DNTypeName('Internal.Runtime.InteropServices.IClassFactory')]
  DNIClassFactory = interface(DNObject)
  ['{00000001-0000-0000-C000-000000000046}']
  { methods } 

    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObject: IntPtr);
    procedure LockServer(fLock: Boolean);

  end;

  //-------------namespace: System.Buffers----------------
  [DNTypeName('System.Buffers.IPinnable')]
  DNIPinnable = interface(DNObject)
  ['{0859CA54-6C45-32AE-B3BE-3B5DCD84E135}']
  { methods } 

    function Pin(elementIndex: Int32): DNMemoryHandle;
    procedure Unpin;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IAsyncEnumerable`1')]
  DNIAsyncEnumerable<T> = interface(DNObject)
  ['{8E357B7D-3E23-3C62-B523-2D5383E25A17}']
  { methods } 

    function GetAsyncEnumerator(cancellationToken: DNCancellationToken): DNIAsyncEnumerator<T>;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEqualityComparer`1')]
  DNIEqualityComparer<T> = interface(DNObject)
  ['{042728AF-01BC-3F31-8294-AC99DF654C3A}']
  { methods } 

    function Equals(x: T; y: T): Boolean;
    function GetHashCode(obj: T): Int32;

  end;

  //-------------namespace: System.Collections.Concurrent----------------
  [DNTypeName('System.Collections.Concurrent.IProducerConsumerCollection`1')]
  DNIProducerConsumerCollection<T> = interface(DNIEnumerable<T>)
  ['{2B733F8C-2E75-3440-851D-877C316DA9EF}']
  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function TryAdd(item: T): Boolean;
    function TryTake(out item: T): Boolean;
    function ToArray: TArray<T>;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ISet`1')]
  DNISet<T> = interface(DNICollection<T>)
  ['{17A06585-6615-3D19-8DFF-5443FB19804F}']
  { methods } 

    function Add(item: T): Boolean;
    procedure UnionWith(other: DNIEnumerable<T>);
    procedure IntersectWith(other: DNIEnumerable<T>);
    procedure ExceptWith(other: DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DNIEnumerable<T>);
    function IsSubsetOf(other: DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DNIEnumerable<T>): Boolean;
    function Overlaps(other: DNIEnumerable<T>): Boolean;
    function SetEquals(other: DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyCollection`1')]
  DNIReadOnlyCollection<T> = interface(DNIEnumerable<T>)
  ['{476EF854-57E0-3FEB-908B-5CA9913352C0}']
  { getters & setters } 

    function get_Count: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyDictionary`2')]
  DNIReadOnlyDictionary<TKey, TValue> = interface(DNIReadOnlyCollection<DNKeyValuePair<TKey, TValue>>)
  ['{A8F1184E-7A7F-3F9F-A938-E036EE41494D}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    function get_Keys: DNIEnumerable<TKey>;
    function get_Values: DNIEnumerable<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item; default;
    property Keys: DNIEnumerable<TKey> read get_Keys;
    property Values: DNIEnumerable<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyList`1')]
  DNIReadOnlyList<T> = interface(DNIReadOnlyCollection<T>)
  ['{9F6980D7-8DC2-39CF-875B-A8A36DDC242D}']
  { getters & setters } 

    function get_Item(index: Int32): T;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlySet`1')]
  DNIReadOnlySet<T> = interface(DNIReadOnlyCollection<T>)
  ['{1C479A73-7077-386A-A7B1-75FEF90CC820}']
  { methods } 

    function &Contains(item: T): Boolean;
    function IsProperSubsetOf(other: DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DNIEnumerable<T>): Boolean;
    function Overlaps(other: DNIEnumerable<T>): Boolean;
    function SetEquals(other: DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.IResourceReader')]
  DNIResourceReader = interface(DNIEnumerable)
  ['{8965A22F-FBA8-36AD-8132-70BBD0DA457D}']
  { methods } 

    procedure Close;
    function GetEnumerator: DNIDictionaryEnumerator;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionaryEnumerator')]
  DNIDictionaryEnumerator = interface(DNIEnumerator)
  ['{35D574BF-7A4F-3588-8C19-12212A0FE4DC}']
  { getters & setters } 

    function get_Key: DNObject;
    function get_Value: DNObject;
    function get_Entry: DNDictionaryEntry;

  { propertys } 

    property Key: DNObject read get_Key;
    property Value: DNObject read get_Value;
    property Entry: DNDictionaryEntry read get_Entry;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IHashCodeProvider')]
  DNIHashCodeProvider = interface(DNObject)
  ['{5D573036-3435-3C5A-AEFF-2B8191082C71}']
  { methods } 

    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralComparable')]
  DNIStructuralComparable = interface(DNObject)
  ['{5F42069E-418C-3D99-802E-D15197F23880}']
  { methods } 

    function CompareTo(other: DNObject; comparer: DNIComparer): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralEquatable')]
  DNIStructuralEquatable = interface(DNObject)
  ['{F077A941-0EFB-39D2-8DE3-E207BCB7A7DB}']
  { methods } 

    function Equals(other: DNObject; comparer: DNIEqualityComparer): Boolean;
    function GetHashCode(comparer: DNIEqualityComparer): Int32;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocumentWriter')]
  DNISymbolDocumentWriter = interface(DNObject)
  ['{2425FC09-2D95-373C-BEEA-3064B1A50213}']
  { methods } 

    procedure SetCheckSum(algorithmId: DNGuid; checkSum: TArray<Byte>);
    procedure SetSource(source: TArray<Byte>);

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IAsyncDisposable')]
  DNIAsyncDisposable = interface(DNObject)
  ['{ECC72E9E-2AD0-3D96-8555-A320E015FD81}']
  { methods } 

    function DisposeAsync: DNValueTask;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IAsyncEnumerator`1')]
  DNIAsyncEnumerator<T> = interface(DNIAsyncDisposable)
  ['{135719CD-B96A-3701-A230-A823A1C4AFC6}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNextAsync: DNValueTask<Boolean>;

  { propertys } 

    property Current: T read get_Current;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IAsyncResult')]
  DNIAsyncResult = interface(DNObject)
  ['{11AB34E7-0176-3C9E-9EFE-197858400A3D}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    property AsyncState: DNObject read get_AsyncState;
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICloneable')]
  DNICloneable = interface(DNObject)
  ['{0CB251A7-3AB3-3B5C-A0B8-9DDF88824B85}']
  { methods } 

    function Clone: DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable`1')]
  DNIComparable<T> = interface(DNObject)
  ['{338A8432-786C-3D79-B779-A4F8DCF27835}']
  { methods } 

    function CompareTo(other: T): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable')]
  DNIComparable = interface(DNObject)
  ['{DEB0E770-91FD-3CF6-9A6C-E6A3656F3965}']
  { methods } 

    function CompareTo(obj: DNObject): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IConvertible')]
  DNIConvertible = interface(DNObject)
  ['{805E3B62-B5E9-393D-8941-377D8BF4556B}']
  { methods } 

    function GetTypeCode: DNTypeCode;
    function ToBoolean(provider: DNIFormatProvider): Boolean;
    function ToChar(provider: DNIFormatProvider): Char;
    function ToSByte(provider: DNIFormatProvider): SByte;
    function ToByte(provider: DNIFormatProvider): Byte;
    function ToInt16(provider: DNIFormatProvider): Int16;
    function ToUInt16(provider: DNIFormatProvider): UInt16;
    function ToInt32(provider: DNIFormatProvider): Int32;
    function ToUInt32(provider: DNIFormatProvider): UInt32;
    function ToInt64(provider: DNIFormatProvider): Int64;
    function ToUInt64(provider: DNIFormatProvider): UInt64;
    function ToSingle(provider: DNIFormatProvider): Single;
    function ToDouble(provider: DNIFormatProvider): Double;
    function ToDecimal(provider: DNIFormatProvider): DNDecimal;
    function ToDateTime(provider: DNIFormatProvider): DNDateTime;
    function ToString(provider: DNIFormatProvider): string;
    function ToType(conversionType: DNType; provider: DNIFormatProvider): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICustomFormatter')]
  DNICustomFormatter = interface(DNObject)
  ['{2B130940-CA5E-3406-8385-E259E68AB039}']
  { methods } 

    function Format(format: string; arg: DNObject; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System.Buffers----------------
  [DNTypeName('System.Buffers.IMemoryOwner`1')]
  DNIMemoryOwner<T> = interface(DNIDisposable)
  ['{845BF426-6E86-3201-BDC4-69932800908F}']
  { getters & setters } 

    function get_Memory: DNMemory<T>;

  { propertys } 

    property Memory: DNMemory<T> read get_Memory;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IEquatable`1')]
  DNIEquatable<T> = interface(DNObject)
  ['{D8C49BA7-BBAC-3BE5-8E80-A1E4303A61C0}']
  { methods } 

    function Equals(other: T): Boolean;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormatProvider')]
  DNIFormatProvider = interface(DNObject)
  ['{C8CB1DED-2814-396A-9CC0-473CA49779CC}']
  { methods } 

    function GetFormat(formatType: DNType): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormattable')]
  DNIFormattable = interface(DNObject)
  ['{9A604EE7-E630-3DED-9444-BAAE247075AB}']
  { methods } 

    function ToString(format: string; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObservable`1')]
  DNIObservable<T> = interface(DNObject)
  ['{77D444A0-2C02-3905-95B0-C8472428A426}']
  { methods } 

    function Subscribe(observer: DNIObserver<T>): DNIDisposable;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObserver`1')]
  DNIObserver<T> = interface(DNObject)
  ['{4A56B314-BB5D-3AF3-94A0-2AEE2D46D190}']
  { methods } 

    procedure OnNext(value: T);
    procedure OnError(error: DNException);
    procedure OnCompleted;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IProgress`1')]
  DNIProgress<T> = interface(DNObject)
  ['{8085FDF6-F705-333C-ABF8-57C1AB36DB20}']
  { methods } 

    procedure Report(value: T);

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ICustomAttributeProvider')]
  DNICustomAttributeProvider = interface(DNObject)
  ['{BF4FE6BC-376A-38E4-8BF2-7A8F01A5968D}']
  { methods } 

    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflect')]
  DNIReflect = interface(DNObject)
  ['{C1586712-CBCF-3FB9-81FB-777905BC30E6}']
  { getters & setters } 

    function get_UnderlyingSystemType: DNType;

  { methods } 

    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject;

  { propertys } 

    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflectableType')]
  DNIReflectableType = interface(DNObject)
  ['{9D4D816F-A167-38FF-83F1-F4AFAF7C0412}']
  { methods } 

    function GetTypeInfo: DNTypeInfo;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IAsyncStateMachine')]
  DNIAsyncStateMachine = interface(DNObject)
  ['{78436D2D-A751-3D5C-B4B8-D2275D0542E7}']
  { methods } 

    procedure MoveNext;
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ICastable')]
  DNICastable = interface(DNObject)
  ['{2DD1150C-8EEB-3C36-8E6A-332EDB82024D}']
  { methods } 

    function IsInstanceOfInterface(interfaceType: DNRuntimeTypeHandle; out castError: DNException): Boolean;
    function GetImplType(interfaceType: DNRuntimeTypeHandle): DNRuntimeTypeHandle;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.INotifyCompletion')]
  DNINotifyCompletion = interface(DNObject)
  ['{D4C9B012-6CD0-35E2-9FE8-56E01550DF1E}']
  { methods } 

    procedure OnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ICriticalNotifyCompletion')]
  DNICriticalNotifyCompletion = interface(DNINotifyCompletion)
  ['{11441015-06E6-3E6A-8764-473239C52FE3}']
  { methods } 

    procedure UnsafeOnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IStrongBox')]
  DNIStrongBox = interface(DNObject)
  ['{53080814-DA86-3D64-AA57-5B4C3EF730E5}']
  { getters & setters } 

    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { propertys } 

    property Value: DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ITuple')]
  DNITuple = interface(DNObject)
  ['{2AEF8AB4-8880-35C3-90A9-47409DCB82E5}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Item(index: Int32): DNObject;

  { propertys } 

    property Length: Int32 read get_Length;
    property Item[index: Int32]: DNObject read get_Item; default;
  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IBindCtx')]
  DNIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    procedure RegisterObjectBound(punk: DNObject);
    procedure RevokeObjectBound(punk: DNObject);
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNBIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNBIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNIRunningObjectTable);
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNIEnumString);
    function RevokeObjectParam(pszKey: string): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPoint')]
  DNIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNIConnectionPointContainer);
    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    procedure Unadvise(dwCookie: Int32);
    procedure EnumConnections(out ppEnum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPointContainer')]
  DNIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure EnumConnectionPoints(out ppEnum: DNIEnumConnectionPoints);
    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNIConnectionPoint);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints')]
  DNIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIConnectionPoint>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnections')]
  DNIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNCONNECTDATA>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumMoniker')]
  DNIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIMoniker>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumString')]
  DNIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<string>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumVARIANT')]
  DNIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgVar: TArray<DNObject>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    function Clone: DNIEnumVARIANT;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMoniker')]
  DNIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pStm: DNIStream);
    procedure Save(pStm: DNIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNIMoniker; out ppmkReduced: DNIMoniker);
    procedure ComposeWith(pmkRight: DNIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNIEnumMoniker);
    function IsEqual(pmkOtherMoniker: DNIMoniker): Int32;
    procedure Hash(out pdwHash: Int32);
    function IsRunning(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pmkNewlyRunning: DNIMoniker): Int32;
    procedure GetTimeOfLastChange(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out pFileTime: DNFILETIME);
    procedure Inverse(out ppmk: DNIMoniker);
    procedure CommonPrefixWith(pmkOther: DNIMoniker; out ppmkPrefix: DNIMoniker);
    procedure RelativePathTo(pmkOther: DNIMoniker; out ppmkRelPath: DNIMoniker);
    procedure GetDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNIMoniker);
    function IsSystemMoniker(out pdwMksys: Int32): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IPersistFile')]
  DNIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pszFileName: string; dwMode: Int32);
    procedure Save(pszFileName: string; fRemember: Boolean);
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IRunningObjectTable')]
  DNIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    function &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNIMoniker): Int32;
    procedure Revoke(dwRegister: Int32);
    function IsRunning(pmkObjectName: DNIMoniker): Int32;
    function GetObject(pmkObjectName: DNIMoniker; out ppunkObject: DNObject): Int32;
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNFILETIME);
    function GetTimeOfLastChange(pmkObjectName: DNIMoniker; out pfiletime: DNFILETIME): Int32;
    procedure EnumRunning(out ppenumMoniker: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IStream')]
  DNIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    procedure Read([out]pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    procedure SetSize(libNewSize: Int64);
    procedure CopyTo(pstm: DNIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    procedure Commit(grfCommitFlags: Int32);
    procedure Revert;
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNSTATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeComp')]
  DNITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNITypeInfo; out pDescKind: DNDESCKIND; out pBindPtr: DNBINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNITypeInfo; out ppTComp: DNITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo')]
  DNITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNIMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNDISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNINVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNINVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo2')]
  DNITypeInfo2 = interface(DNITypeInfo)
  ['{00020412-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNIMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNDISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNINVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNINVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);
    procedure GetTypeKind(out pTypeKind: DNTYPEKIND);
    procedure GetTypeFlags(out pTypeFlags: Int32);
    procedure GetFuncIndexOfMemId(memid: Int32; invKind: DNINVOKEKIND; out pFuncIndex: Int32);
    procedure GetVarIndexOfMemId(memid: Int32; out pVarIndex: Int32);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetFuncCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetParamCustData(indexFunc: Int32; indexParam: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetVarCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetImplTypeCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(memid: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetAllCustData(pCustData: IntPtr);
    procedure GetAllFuncCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllParamCustData(indexFunc: Int32; indexParam: Int32; pCustData: IntPtr);
    procedure GetAllVarCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllImplTypeCustData(index: Int32; pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib')]
  DNITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNTYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib2')]
  DNITypeLib2 = interface(DNITypeLib)
  ['{00020411-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNTYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(index: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetLibStatistics(pcUniqueNames: IntPtr; out pcchUniqueNames: Int32);
    procedure GetAllCustData(pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomAdapter')]
  DNICustomAdapter = interface(DNObject)
  ['{3CC86595-FEB5-3CE9-BA14-D05C8DC3321C}']
  { methods } 

    function GetUnderlyingObject: DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomFactory')]
  DNICustomFactory = interface(DNObject)
  ['{0CA9008E-EE90-356E-9F6D-B59E6006B9A4}']
  { methods } 

    function CreateInstance(serverType: DNType): DNMarshalByRefObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomMarshaler')]
  DNICustomMarshaler = interface(DNObject)
  ['{601CD486-04BF-3213-9EA9-06EBE4351D74}']
  { methods } 

    function MarshalNativeToManaged(pNativeData: IntPtr): DNObject;
    function MarshalManagedToNative(ManagedObj: DNObject): IntPtr;
    procedure CleanUpNativeData(pNativeData: IntPtr);
    procedure CleanUpManagedData(ManagedObj: DNObject);
    function GetNativeDataSize: Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomQueryInterface')]
  DNICustomQueryInterface = interface(DNObject)
  ['{8888FE72-8A4D-3E9A-845B-946F7A635805}']
  { methods } 

    function GetInterface(out iid: DNGuid; out ppv: IntPtr): DNCustomQueryInterfaceResult;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.IDynamicInterfaceCastable')]
  DNIDynamicInterfaceCastable = interface(DNObject)
  ['{F0E7D583-4F84-33A4-B408-A5060155D74D}']
  { methods } 

    function IsInterfaceImplemented(interfaceType: DNRuntimeTypeHandle; throwIfNotImplemented: Boolean): Boolean;
    function GetInterfaceImplementation(interfaceType: DNRuntimeTypeHandle): DNRuntimeTypeHandle;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IDeserializationCallback')]
  DNIDeserializationCallback = interface(DNObject)
  ['{AB3F47E4-C227-3B05-BF9F-94649BEF9888}']
  { methods } 

    procedure OnDeserialization(sender: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IFormatterConverter')]
  DNIFormatterConverter = interface(DNObject)
  ['{F4F5C303-FAD3-3D0C-A4DF-BB82B5EE308F}']
  { methods } 

    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    function ToBoolean(value: DNObject): Boolean;
    function ToChar(value: DNObject): Char;
    function ToSByte(value: DNObject): SByte;
    function ToByte(value: DNObject): Byte;
    function ToInt16(value: DNObject): Int16;
    function ToUInt16(value: DNObject): UInt16;
    function ToInt32(value: DNObject): Int32;
    function ToUInt32(value: DNObject): UInt32;
    function ToInt64(value: DNObject): Int64;
    function ToUInt64(value: DNObject): UInt64;
    function ToSingle(value: DNObject): Single;
    function ToDouble(value: DNObject): Double;
    function ToDecimal(value: DNObject): DNDecimal;
    function ToDateTime(value: DNObject): DNDateTime;
    function ToString(value: DNObject): string;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IObjectReference')]
  DNIObjectReference = interface(DNObject)
  ['{6E70ED5F-0439-38CE-83BB-860F1421F29F}']
  { methods } 

    function GetRealObject(context: DNStreamingContext): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISafeSerializationData')]
  DNISafeSerializationData = interface(DNObject)
  ['{6638EFCA-7315-308E-9696-D2EE876EBC8C}']
  { methods } 

    procedure CompleteDeserialization(deserialized: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISerializable')]
  DNISerializable = interface(DNObject)
  ['{D0EEAA62-3D30-3EE2-B896-A2F34DDA47D8}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.ISecurityEncodable')]
  DNISecurityEncodable = interface(DNObject)
  ['{36EE480D-36EA-3056-8012-0B9901EBDDEE}']
  { methods } 

    procedure FromXml(e: DNSecurityElement);
    function ToXml: DNSecurityElement;

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IPermission')]
  DNIPermission = interface(DNISecurityEncodable)
  ['{4A1C8224-2CEB-3BC7-A599-9012F3F01BCA}']
  { methods } 

    function Copy: DNIPermission;
    procedure Demand;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Union(target: DNIPermission): DNIPermission;

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IStackWalk')]
  DNIStackWalk = interface(DNObject)
  ['{60FC57B0-4A46-32A0-A5B4-B05B0DE8E781}']
  { methods } 

    procedure Assert;
    procedure Demand;
    procedure Deny;
    procedure PermitOnly;

  end;

  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.IIdentity')]
  DNIIdentity = interface(DNObject)
  ['{F4205A87-4D46-303D-B1D9-5A99F7C90D30}']
  { getters & setters } 

    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;

  { propertys } 

    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
  end;

  //-------------namespace: System.Security.Principal----------------
  [DNTypeName('System.Security.Principal.IPrincipal')]
  DNIPrincipal = interface(DNObject)
  ['{4283CA6C-D291-3481-83C9-9554481FE888}']
  { getters & setters } 

    function get_Identity: DNIIdentity;

  { methods } 

    function IsInRole(role: string): Boolean;

  { propertys } 

    property Identity: DNIIdentity read get_Identity;
  end;

  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.IThreadPoolWorkItem')]
  DNIThreadPoolWorkItem = interface(DNObject)
  ['{8C4D3AB0-59DE-3C4A-A812-29135D2826F3}']
  { methods } 

    procedure Execute;

  end;

  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.IValueTaskSource`1')]
  DNIValueTaskSource<TResult> = interface(DNObject)
  ['{F6CEC039-F5AA-3768-9A63-D85070FE8B67}']
  { methods } 

    function GetStatus(token: Int16): DNValueTaskSourceStatus;
    procedure OnCompleted(continuation: DNAction<DNObject>; state: DNObject; token: Int16; flags: DNValueTaskSourceOnCompletedFlags);
    function GetResult(token: Int16): TResult;

  end;

  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.IValueTaskSource')]
  DNIValueTaskSource = interface(DNObject)
  ['{03CBD2D7-DC72-30CD-B5B7-6B0F3A6FF9AA}']
  { methods } 

    function GetStatus(token: Int16): DNValueTaskSourceStatus;
    procedure OnCompleted(continuation: DNAction<DNObject>; state: DNObject; token: Int16; flags: DNValueTaskSourceOnCompletedFlags);
    procedure GetResult(token: Int16);

  end;

  //-------------namespace: Internal----------------
  DNConsoleClass = interface(DNObjectClass)
  ['{4ADA0C7D-F406-541D-9492-49066832EBED}']
  { static methods } 

    {class} procedure Write(s: string);
    {class} procedure WriteLine(s: string); overload;
    {class} procedure WriteLine; overload;

  end;

  [DNTypeName('Internal.Console')]
  DNConsole = interface(DNObject)
  ['{41410AD0-4DE7-3ADB-97C5-04870D61AA6E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNConsole = class(TDNGenericImport<DNConsoleClass, DNConsole>) end;

  //-------------namespace: Internal.Runtime.CompilerServices----------------
  DNUnsafeClass = interface(DNObjectClass)
  ['{72062AA3-3E2D-59E8-8D3E-0B299CFA2573}']
  { static methods } 

    {class} procedure InitBlockUnaligned(out startAddress: Byte; value: Byte; byteCount: UInt32);

  end;

  [DNTypeName('Internal.Runtime.CompilerServices.Unsafe')]
  DNUnsafe = interface(DNObject)
  ['{DEC3B915-52BA-3A64-879C-89CE3869679E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUnsafe = class(TDNGenericImport<DNUnsafeClass, DNUnsafe>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  DNComActivatorClass = interface(DNObjectClass)
  ['{4E3FB11A-FF59-50BD-ABFC-CACE29748C88}']
  { static methods } 

    {class} function GetClassFactoryForType(cxt: DNComActivationContext): DNObject;
    {class} procedure ClassRegistrationScenarioForType(cxt: DNComActivationContext; &register: Boolean);
    {class} function GetClassFactoryForTypeInternal(var pCxtInt: DNComActivationContextInternal): Int32;
    {class} function RegisterClassForTypeInternal(var pCxtInt: DNComActivationContextInternal): Int32;
    {class} function UnregisterClassForTypeInternal(var pCxtInt: DNComActivationContextInternal): Int32;

  end;

  [DNTypeName('Internal.Runtime.InteropServices.ComActivator')]
  DNComActivator = interface(DNObject)
  ['{C784F278-B6E2-3042-92B0-55F4F5D8E1AB}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComActivator = class(TDNGenericImport<DNComActivatorClass, DNComActivator>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  DNComponentActivatorClass = interface(DNObjectClass)
  ['{362065A6-D499-5054-A9CD-2A6E1BB6AEC2}']
  { static methods } 

    {class} function LoadAssemblyAndGetFunctionPointer(assemblyPathNative: IntPtr; typeNameNative: IntPtr; methodNameNative: IntPtr; delegateTypeNative: IntPtr; reserved: IntPtr; functionHandle: IntPtr): Int32;
    {class} function GetFunctionPointer(typeNameNative: IntPtr; methodNameNative: IntPtr; delegateTypeNative: IntPtr; loadContext: IntPtr; reserved: IntPtr; functionHandle: IntPtr): Int32;

  end;

  [DNTypeName('Internal.Runtime.InteropServices.ComponentActivator')]
  DNComponentActivator = interface(DNObject)
  ['{BAB30A2A-8644-376B-9B65-37ED0000DA4D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComponentActivator = class(TDNGenericImport<DNComponentActivatorClass, DNComponentActivator>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  DNInMemoryAssemblyLoaderClass = interface(DNObjectClass)
  ['{1824F9A8-88DA-5854-BFE8-4A1EE715D50F}']
  { static methods } 

    {class} procedure LoadInMemoryAssembly(moduleHandle: IntPtr; assemblyPath: IntPtr);

  end;

  [DNTypeName('Internal.Runtime.InteropServices.InMemoryAssemblyLoader')]
  DNInMemoryAssemblyLoader = interface(DNObject)
  ['{D627FB33-CB13-3E5E-BE25-25E086A92EB2}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNInMemoryAssemblyLoader = class(TDNGenericImport<DNInMemoryAssemblyLoaderClass, DNInMemoryAssemblyLoader>) end;

  //-------------namespace: System----------------
  DNActivatorClass = interface(DNObjectClass)
  ['{E89FC274-9D10-5D14-AFB6-6BEB77DEF9E6}']
  { static methods } 

    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType): DNObject; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    {class} function CreateInstance(&type: DNType; nonPublic: Boolean): DNObject; overload;

  end;

  [DNTypeName('System.Activator')]
  DNActivator = interface(DNObject)
  ['{A96E0578-8CF7-3C3E-A72A-5ED4D8515677}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNActivator = class(TDNGenericImport<DNActivatorClass, DNActivator>) end;

  //-------------namespace: System----------------
  DNAppContextClass = interface(DNObjectClass)
  ['{E58A4599-9E7A-5082-8CCA-85B0F1F12653}']
  { static getter & setter } 

    {class} function get_BaseDirectory: string;
    {class} function get_TargetFrameworkName: string;

  { static methods } 

    {class} function GetData(name: string): DNObject;
    {class} procedure SetData(name: string; data: DNObject);
    {class} function TryGetSwitch(switchName: string; out isEnabled: Boolean): Boolean;
    {class} procedure SetSwitch(switchName: string; isEnabled: Boolean);

  { static propertys } 

    {class} property BaseDirectory: string read get_BaseDirectory;
    {class} property TargetFrameworkName: string read get_TargetFrameworkName;
  end;

  [DNTypeName('System.AppContext')]
  DNAppContext = interface(DNObject)
  ['{726BC669-DE23-349E-96C4-57C62071B81E}']
  { events } 

    {class} procedure add_UnhandledException(value: DNUnhandledExceptionEventHandler);
    {class} procedure remove_UnhandledException(value: DNUnhandledExceptionEventHandler);
    {class} procedure add_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    {class} procedure remove_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    {class} procedure add_ProcessExit(value: DNEventHandler);
    {class} procedure remove_ProcessExit(value: DNEventHandler);

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAppContext = class(TDNGenericImport<DNAppContextClass, DNAppContext>) end;

  //-------------namespace: System----------------
  DNAppDomainSetupClass = interface(DNObjectClass)
  ['{02EBEB3C-C691-5600-81EA-0E2F16AF430B}']
  end;

  [DNTypeName('System.AppDomainSetup')]
  DNAppDomainSetup = interface(DNObject)
  ['{565B497D-45F3-357A-A14A-5D54EA7B519F}']
  { getters & setters } 

    function get_ApplicationBase: string;
    function get_TargetFrameworkName: string;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ApplicationBase: string read get_ApplicationBase;
    property TargetFrameworkName: string read get_TargetFrameworkName;
  end;

  TDNAppDomainSetup = class(TDNGenericImport<DNAppDomainSetupClass, DNAppDomainSetup>) end;

  //-------------namespace: System----------------
  DNApplicationIdClass = interface(DNObjectClass)
  ['{15037A0E-E83B-5D2F-9ABC-895A29DD9E97}']
  { constructors } 

    {class} function init(publicKeyToken: TArray<Byte>; name: string; version: DNVersion; processorArchitecture: string; culture: string): DNApplicationId;

  end;

  [DNTypeName('System.ApplicationId')]
  DNApplicationId = interface(DNObject)
  ['{2A45259B-DB24-3C8B-8963-5E3DD6D8DE1D}']
  { getters & setters } 

    function get_Culture: string;
    function get_Name: string;
    function get_ProcessorArchitecture: string;
    function get_Version: DNVersion;
    function get_PublicKeyToken: TArray<Byte>;

  { methods } 

    function Copy: DNApplicationId;
    function ToString: string;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Culture: string read get_Culture;
    property Name: string read get_Name;
    property ProcessorArchitecture: string read get_ProcessorArchitecture;
    property Version: DNVersion read get_Version;
    property PublicKeyToken: TArray<Byte> read get_PublicKeyToken;
  end;

  TDNApplicationId = class(TDNGenericImport<DNApplicationIdClass, DNApplicationId>) end;

  //-------------namespace: System----------------
  DNArrayClass = interface(DNObjectClass)
  ['{CC396D8E-BD59-5E16-94ED-BC926DD104C1}']
  { static methods } 

    {class} function IndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} procedure Reverse(&array: DNArray); overload;
    {class} procedure Reverse(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(&array: DNArray); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(&array: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;
    {class} function CreateInstance(elementType: DNType; length: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32; length3: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>; lowerBounds: TArray<Int32>): DNArray; overload;
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int32); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32); overload;
    {class} procedure ConstrainedCopy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32);
    {class} procedure Clear(&array: DNArray; index: Int32; length: Int32);
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int64>): DNArray; overload;
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int64); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int64; destinationArray: DNArray; destinationIndex: Int64; length: Int64); overload;
    {class} function BinarySearch(&array: DNArray; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; value: DNObject; comparer: DNIComparer): Int32; overload;
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;

  end;

  [DNTypeName('System.Array')]
  DNArray = interface(DNICloneable)
  ['{608C8722-E6C6-30DA-AFAA-87F96A759700}']
  { getters & setters } 

    function get_Length: Int32;
    function get_LongLength: Int64;
    function get_Rank: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetEnumerator: DNIEnumerator;
    function GetValue(indices: TArray<Int32>): DNObject; overload;
    function GetValue(index: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32; index3: Int32): DNObject; overload;
    procedure SetValue(value: DNObject; index: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32; index3: Int32); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int32>); overload;
    function GetLength(dimension: Int32): Int32;
    function GetUpperBound(dimension: Int32): Int32;
    function GetLowerBound(dimension: Int32): Int32;
    procedure Initialize;
    function GetValue(index: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64; index3: Int64): DNObject; overload;
    function GetValue(indices: TArray<Int64>): DNObject; overload;
    procedure SetValue(value: DNObject; index: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64; index3: Int64); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int64>); overload;
    function GetLongLength(dimension: Int32): Int64;
    function Clone: DNObject;
    procedure CopyTo(&array: DNArray; index: Int32); overload;
    procedure CopyTo(&array: DNArray; index: Int64); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Length: Int32 read get_Length;
    property LongLength: Int64 read get_LongLength;
    property Rank: Int32 read get_Rank;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNArray = class(TDNGenericImport<DNArrayClass, DNArray>) end;

  //-------------namespace: System----------------
  DNAttributeClass = interface(DNObjectClass)
  ['{6FD57E11-657D-591B-A7A0-CBAB7BF78C36}']
  { static methods } 

    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType; inherit: Boolean): DNAttribute; overload;

  end;

  [DNTypeName('System.Attribute')]
  DNAttribute = interface(DNObject)
  ['{FF3E96D8-3D3C-32B8-A071-931A69BBFBB3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttribute = class(TDNGenericImport<DNAttributeClass, DNAttribute>) end;

  //-------------namespace: System----------------
  DNAttributeUsageAttributeClass = interface(DNAttributeClass)
  ['{6C22EED9-BBD6-56E8-889A-12EA695C4D10}']
  { constructors } 

    {class} function init(validOn: DNAttributeTargets): DNAttributeUsageAttribute;

  end;

  [DNTypeName('System.AttributeUsageAttribute')]
  DNAttributeUsageAttribute = interface(DNAttribute)
  ['{630EB40F-CC73-38E3-A035-46CA259B7B13}']
  { getters & setters } 

    function get_Inherited: Boolean;
    procedure set_Inherited(value: Boolean);
    function get_AllowMultiple: Boolean;
    procedure set_AllowMultiple(value: Boolean);
    function get_ValidOn: DNAttributeTargets;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &Inherited: Boolean read get_Inherited write set_Inherited;
    property AllowMultiple: Boolean read get_AllowMultiple write set_AllowMultiple;
    property ValidOn: DNAttributeTargets read get_ValidOn;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttributeUsageAttribute = class(TDNGenericImport<DNAttributeUsageAttributeClass, DNAttributeUsageAttribute>) end;

  //-------------namespace: System----------------
  DNCLSCompliantAttributeClass = interface(DNAttributeClass)
  ['{8A5EC86A-06CE-5032-876E-3496AA08EC5E}']
  { constructors } 

    {class} function init(isCompliant: Boolean): DNCLSCompliantAttribute;

  end;

  [DNTypeName('System.CLSCompliantAttribute')]
  DNCLSCompliantAttribute = interface(DNAttribute)
  ['{AC7155DD-AA2A-3ADB-892E-8EBB63029C73}']
  { getters & setters } 

    function get_IsCompliant: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsCompliant: Boolean read get_IsCompliant;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCLSCompliantAttribute = class(TDNGenericImport<DNCLSCompliantAttributeClass, DNCLSCompliantAttribute>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNGeneratedCodeAttributeClass = interface(DNAttributeClass)
  ['{0C15D04E-3922-5B47-A9E2-BEF824A3CB83}']
  { constructors } 

    {class} function init(tool: string; version: string): DNGeneratedCodeAttribute;

  end;

  [DNTypeName('System.CodeDom.Compiler.GeneratedCodeAttribute')]
  DNGeneratedCodeAttribute = interface(DNAttribute)
  ['{A95B31AF-618B-3FFB-A981-0EFDD07C2BDF}']
  { getters & setters } 

    function get_Tool: string;
    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Tool: string read get_Tool;
    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGeneratedCodeAttribute = class(TDNGenericImport<DNGeneratedCodeAttributeClass, DNGeneratedCodeAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultValueAttributeClass = interface(DNAttributeClass)
  ['{32AAE25C-41F3-588C-91B9-0D5E4DD0DEDF}']
  { constructors } 

    {class} function init(&type: DNType; value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: Char): DNDefaultValueAttribute; overload;
    {class} function init(value: Byte): DNDefaultValueAttribute; overload;
    {class} function init(value: Int16): DNDefaultValueAttribute; overload;
    {class} function init(value: Int32): DNDefaultValueAttribute; overload;
    {class} function init(value: Int64): DNDefaultValueAttribute; overload;
    {class} function init(value: Single): DNDefaultValueAttribute; overload;
    {class} function init(value: Double): DNDefaultValueAttribute; overload;
    {class} function init(value: Boolean): DNDefaultValueAttribute; overload;
    {class} function init(value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: DNObject): DNDefaultValueAttribute; overload;
    {class} function init(value: SByte): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt16): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt32): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt64): DNDefaultValueAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DefaultValueAttribute')]
  DNDefaultValueAttribute = interface(DNAttribute)
  ['{675E216F-6E71-3ACF-BCA4-42A21AD135F2}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultValueAttribute = class(TDNGenericImport<DNDefaultValueAttributeClass, DNDefaultValueAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEditorBrowsableAttributeClass = interface(DNAttributeClass)
  ['{CF00E565-0741-541D-B64D-9EA943D72B75}']
  { constructors } 

    {class} function init(state: DNEditorBrowsableState): DNEditorBrowsableAttribute; overload;
    {class} function init: DNEditorBrowsableAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.EditorBrowsableAttribute')]
  DNEditorBrowsableAttribute = interface(DNAttribute)
  ['{6ACA0DD6-32EF-3783-9F54-25A4DDFD77D2}']
  { getters & setters } 

    function get_State: DNEditorBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property State: DNEditorBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEditorBrowsableAttribute = class(TDNGenericImport<DNEditorBrowsableAttributeClass, DNEditorBrowsableAttribute>) end;

  //-------------namespace: System----------------
  DNContextStaticAttributeClass = interface(DNAttributeClass)
  ['{96A6B8EC-BBC1-5413-AAA0-46AF5D6026C5}']
  { constructors } 

    {class} function init: DNContextStaticAttribute;

  end;

  [DNTypeName('System.ContextStaticAttribute')]
  DNContextStaticAttribute = interface(DNAttribute)
  ['{2D341724-22DB-3CDC-A73B-7FB65C412286}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContextStaticAttribute = class(TDNGenericImport<DNContextStaticAttributeClass, DNContextStaticAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNAllowNullAttributeClass = interface(DNAttributeClass)
  ['{49399DC3-8DD9-5AAB-BA4B-94DDF58FB3A0}']
  { constructors } 

    {class} function init: DNAllowNullAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.AllowNullAttribute')]
  DNAllowNullAttribute = interface(DNAttribute)
  ['{EDE69EFD-C5D4-3C54-885F-316243FBED23}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowNullAttribute = class(TDNGenericImport<DNAllowNullAttributeClass, DNAllowNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNDisallowNullAttributeClass = interface(DNAttributeClass)
  ['{49AFC67E-C4B5-5848-BE86-0A4C2EE1221E}']
  { constructors } 

    {class} function init: DNDisallowNullAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.DisallowNullAttribute')]
  DNDisallowNullAttribute = interface(DNAttribute)
  ['{C3C74E1A-C562-3A14-803E-DA8020DB282C}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDisallowNullAttribute = class(TDNGenericImport<DNDisallowNullAttributeClass, DNDisallowNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNDoesNotReturnAttributeClass = interface(DNAttributeClass)
  ['{3284E650-D750-570E-9366-1A2CDB44E561}']
  { constructors } 

    {class} function init: DNDoesNotReturnAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute')]
  DNDoesNotReturnAttribute = interface(DNAttribute)
  ['{BAAF2314-BC6B-36F8-9200-701E7F9D2208}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDoesNotReturnAttribute = class(TDNGenericImport<DNDoesNotReturnAttributeClass, DNDoesNotReturnAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNDoesNotReturnIfAttributeClass = interface(DNAttributeClass)
  ['{4DD91F87-286F-5201-9A21-BEFC7C95F912}']
  { constructors } 

    {class} function init(parameterValue: Boolean): DNDoesNotReturnIfAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute')]
  DNDoesNotReturnIfAttribute = interface(DNAttribute)
  ['{BFC6F42D-0143-37D6-9886-F4642095E907}']
  { getters & setters } 

    function get_ParameterValue: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ParameterValue: Boolean read get_ParameterValue;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDoesNotReturnIfAttribute = class(TDNGenericImport<DNDoesNotReturnIfAttributeClass, DNDoesNotReturnIfAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNDynamicallyAccessedMembersAttributeClass = interface(DNAttributeClass)
  ['{2057612A-4EDE-59DC-8636-56E0CA632422}']
  { constructors } 

    {class} function init(memberTypes: DNDynamicallyAccessedMemberTypes): DNDynamicallyAccessedMembersAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute')]
  DNDynamicallyAccessedMembersAttribute = interface(DNAttribute)
  ['{3EC864DC-7FB7-380E-9352-9461245ABC72}']
  { getters & setters } 

    function get_MemberTypes: DNDynamicallyAccessedMemberTypes;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberTypes: DNDynamicallyAccessedMemberTypes read get_MemberTypes;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDynamicallyAccessedMembersAttribute = class(TDNGenericImport<DNDynamicallyAccessedMembersAttributeClass, DNDynamicallyAccessedMembersAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNDynamicDependencyAttributeClass = interface(DNAttributeClass)
  ['{CC4AF028-1DC9-5A0C-99BF-385582996BE7}']
  { constructors } 

    {class} function init(memberSignature: string): DNDynamicDependencyAttribute; overload;
    {class} function init(memberSignature: string; &type: DNType): DNDynamicDependencyAttribute; overload;
    {class} function init(memberSignature: string; typeName: string; assemblyName: string): DNDynamicDependencyAttribute; overload;
    {class} function init(memberTypes: DNDynamicallyAccessedMemberTypes; &type: DNType): DNDynamicDependencyAttribute; overload;
    {class} function init(memberTypes: DNDynamicallyAccessedMemberTypes; typeName: string; assemblyName: string): DNDynamicDependencyAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute')]
  DNDynamicDependencyAttribute = interface(DNAttribute)
  ['{D37AD2C5-A461-3434-B7F7-13EF099831BF}']
  { getters & setters } 

    function get_MemberSignature: string;
    function get_MemberTypes: DNDynamicallyAccessedMemberTypes;
    function get_Type: DNType;
    function get_TypeName: string;
    function get_AssemblyName: string;
    function get_Condition: string;
    procedure set_Condition(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberSignature: string read get_MemberSignature;
    property MemberTypes: DNDynamicallyAccessedMemberTypes read get_MemberTypes;
    property &Type: DNType read get_Type;
    property TypeName: string read get_TypeName;
    property AssemblyName: string read get_AssemblyName;
    property Condition: string read get_Condition write set_Condition;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDynamicDependencyAttribute = class(TDNGenericImport<DNDynamicDependencyAttributeClass, DNDynamicDependencyAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNExcludeFromCodeCoverageAttributeClass = interface(DNAttributeClass)
  ['{6265F13C-AD78-5024-A406-7BF9E1048F5A}']
  { constructors } 

    {class} function init: DNExcludeFromCodeCoverageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute')]
  DNExcludeFromCodeCoverageAttribute = interface(DNAttribute)
  ['{3C6B742A-5E1A-37F9-9E94-337610B75935}']
  { getters & setters } 

    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNExcludeFromCodeCoverageAttribute = class(TDNGenericImport<DNExcludeFromCodeCoverageAttributeClass, DNExcludeFromCodeCoverageAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNMaybeNullAttributeClass = interface(DNAttributeClass)
  ['{B3F4AB8C-3591-511C-ACE0-4E15A4C8A045}']
  { constructors } 

    {class} function init: DNMaybeNullAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.MaybeNullAttribute')]
  DNMaybeNullAttribute = interface(DNAttribute)
  ['{971604B2-B8F7-32A6-A15D-9169497A28AB}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNMaybeNullAttribute = class(TDNGenericImport<DNMaybeNullAttributeClass, DNMaybeNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNMaybeNullWhenAttributeClass = interface(DNAttributeClass)
  ['{571C8097-308F-5EC9-8794-699B532B30A6}']
  { constructors } 

    {class} function init(returnValue: Boolean): DNMaybeNullWhenAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute')]
  DNMaybeNullWhenAttribute = interface(DNAttribute)
  ['{34CBD3B7-6535-33BB-A5D2-5A977C9EE131}']
  { getters & setters } 

    function get_ReturnValue: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ReturnValue: Boolean read get_ReturnValue;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMaybeNullWhenAttribute = class(TDNGenericImport<DNMaybeNullWhenAttributeClass, DNMaybeNullWhenAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNMemberNotNullAttributeClass = interface(DNAttributeClass)
  ['{B102C98E-9273-5640-8577-DB001C6CA92C}']
  { constructors } 

    {class} function init(member: string): DNMemberNotNullAttribute; overload;
    {class} function init(members: TArray<string>): DNMemberNotNullAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.MemberNotNullAttribute')]
  DNMemberNotNullAttribute = interface(DNAttribute)
  ['{E9F2924F-CC2F-385F-9527-D311C3FF7069}']
  { getters & setters } 

    function get_Members: TArray<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Members: TArray<string> read get_Members;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMemberNotNullAttribute = class(TDNGenericImport<DNMemberNotNullAttributeClass, DNMemberNotNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNMemberNotNullWhenAttributeClass = interface(DNAttributeClass)
  ['{E5CC3FDF-46D9-5E83-A438-C674CD6916E5}']
  { constructors } 

    {class} function init(returnValue: Boolean; member: string): DNMemberNotNullWhenAttribute; overload;
    {class} function init(returnValue: Boolean; members: TArray<string>): DNMemberNotNullWhenAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute')]
  DNMemberNotNullWhenAttribute = interface(DNAttribute)
  ['{EB96149B-1F3A-3EAC-B503-EB477D988E95}']
  { getters & setters } 

    function get_ReturnValue: Boolean;
    function get_Members: TArray<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ReturnValue: Boolean read get_ReturnValue;
    property Members: TArray<string> read get_Members;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMemberNotNullWhenAttribute = class(TDNGenericImport<DNMemberNotNullWhenAttributeClass, DNMemberNotNullWhenAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNNotNullAttributeClass = interface(DNAttributeClass)
  ['{53B3ABDA-22FC-51F0-8751-395B95B7515C}']
  { constructors } 

    {class} function init: DNNotNullAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.NotNullAttribute')]
  DNNotNullAttribute = interface(DNAttribute)
  ['{B35A4742-ACE5-3D3A-A82D-AF158EB87A11}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNotNullAttribute = class(TDNGenericImport<DNNotNullAttributeClass, DNNotNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNNotNullIfNotNullAttributeClass = interface(DNAttributeClass)
  ['{B0387EC8-33ED-56A6-A11D-AC87D9836333}']
  { constructors } 

    {class} function init(parameterName: string): DNNotNullIfNotNullAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute')]
  DNNotNullIfNotNullAttribute = interface(DNAttribute)
  ['{E0444C7D-B27C-3BD0-82D2-549D0BF976A9}']
  { getters & setters } 

    function get_ParameterName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ParameterName: string read get_ParameterName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNotNullIfNotNullAttribute = class(TDNGenericImport<DNNotNullIfNotNullAttributeClass, DNNotNullIfNotNullAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNNotNullWhenAttributeClass = interface(DNAttributeClass)
  ['{8F3FACE5-3674-52B1-990A-CB51BA75D2BB}']
  { constructors } 

    {class} function init(returnValue: Boolean): DNNotNullWhenAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.NotNullWhenAttribute')]
  DNNotNullWhenAttribute = interface(DNAttribute)
  ['{E88BE2F3-4738-30FC-B18F-B429357E7BD1}']
  { getters & setters } 

    function get_ReturnValue: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ReturnValue: Boolean read get_ReturnValue;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNotNullWhenAttribute = class(TDNGenericImport<DNNotNullWhenAttributeClass, DNNotNullWhenAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNRequiresUnreferencedCodeAttributeClass = interface(DNAttributeClass)
  ['{FA02DC4D-E1CE-5945-A4BD-D31B6B516B87}']
  { constructors } 

    {class} function init(message: string): DNRequiresUnreferencedCodeAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute')]
  DNRequiresUnreferencedCodeAttribute = interface(DNAttribute)
  ['{FA2041B3-2C3E-38A5-8677-D9563AF72645}']
  { getters & setters } 

    function get_Message: string;
    function get_Url: string;
    procedure set_Url(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
    property Url: string read get_Url write set_Url;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRequiresUnreferencedCodeAttribute = class(TDNGenericImport<DNRequiresUnreferencedCodeAttributeClass, DNRequiresUnreferencedCodeAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNSuppressMessageAttributeClass = interface(DNAttributeClass)
  ['{95E998C9-AFB5-5716-A48A-B1367D293C85}']
  { constructors } 

    {class} function init(category: string; checkId: string): DNSuppressMessageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.SuppressMessageAttribute')]
  DNSuppressMessageAttribute = interface(DNAttribute)
  ['{A826907D-5B9F-3E69-9115-0AD1549E3BD0}']
  { getters & setters } 

    function get_Category: string;
    function get_CheckId: string;
    function get_Scope: string;
    procedure set_Scope(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_MessageId: string;
    procedure set_MessageId(value: string);
    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property CheckId: string read get_CheckId;
    property Scope: string read get_Scope write set_Scope;
    property Target: string read get_Target write set_Target;
    property MessageId: string read get_MessageId write set_MessageId;
    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressMessageAttribute = class(TDNGenericImport<DNSuppressMessageAttributeClass, DNSuppressMessageAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNUnconditionalSuppressMessageAttributeClass = interface(DNAttributeClass)
  ['{3F1BF60C-648B-567A-924F-54FD078B9749}']
  { constructors } 

    {class} function init(category: string; checkId: string): DNUnconditionalSuppressMessageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute')]
  DNUnconditionalSuppressMessageAttribute = interface(DNAttribute)
  ['{444CEA1F-9913-3B3F-B26D-5F95FA2C36E7}']
  { getters & setters } 

    function get_Category: string;
    function get_CheckId: string;
    function get_Scope: string;
    procedure set_Scope(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_MessageId: string;
    procedure set_MessageId(value: string);
    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property CheckId: string read get_CheckId;
    property Scope: string read get_Scope write set_Scope;
    property Target: string read get_Target write set_Target;
    property MessageId: string read get_MessageId write set_MessageId;
    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnconditionalSuppressMessageAttribute = class(TDNGenericImport<DNUnconditionalSuppressMessageAttributeClass, DNUnconditionalSuppressMessageAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConditionalAttributeClass = interface(DNAttributeClass)
  ['{2A76E9F1-3424-5EBE-A134-4F704D19961F}']
  { constructors } 

    {class} function init(conditionString: string): DNConditionalAttribute;

  end;

  [DNTypeName('System.Diagnostics.ConditionalAttribute')]
  DNConditionalAttribute = interface(DNAttribute)
  ['{6FCC1D00-C262-3F51-9338-20C02EB84066}']
  { getters & setters } 

    function get_ConditionString: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ConditionString: string read get_ConditionString;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNConditionalAttribute = class(TDNGenericImport<DNConditionalAttributeClass, DNConditionalAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractAbbreviatorAttributeClass = interface(DNAttributeClass)
  ['{3779DB30-04C5-5C96-892F-22B442363D4F}']
  { constructors } 

    {class} function init: DNContractAbbreviatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractAbbreviatorAttribute')]
  DNContractAbbreviatorAttribute = interface(DNAttribute)
  ['{8897A74A-292A-352C-A767-B90BE4EB1555}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractAbbreviatorAttribute = class(TDNGenericImport<DNContractAbbreviatorAttributeClass, DNContractAbbreviatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractArgumentValidatorAttributeClass = interface(DNAttributeClass)
  ['{10A65D73-B059-56B1-B0D1-8D618A784A65}']
  { constructors } 

    {class} function init: DNContractArgumentValidatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractArgumentValidatorAttribute')]
  DNContractArgumentValidatorAttribute = interface(DNAttribute)
  ['{CC17C1A4-798F-3DB9-A52B-E32B94FA11FB}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractArgumentValidatorAttribute = class(TDNGenericImport<DNContractArgumentValidatorAttributeClass, DNContractArgumentValidatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassAttributeClass = interface(DNAttributeClass)
  ['{1095147A-0A55-5C60-8415-90E591E74677}']
  { constructors } 

    {class} function init(typeContainingContracts: DNType): DNContractClassAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassAttribute')]
  DNContractClassAttribute = interface(DNAttribute)
  ['{33A91547-AA73-3529-A872-671F538B5F75}']
  { getters & setters } 

    function get_TypeContainingContracts: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeContainingContracts: DNType read get_TypeContainingContracts;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassAttribute = class(TDNGenericImport<DNContractClassAttributeClass, DNContractClassAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassForAttributeClass = interface(DNAttributeClass)
  ['{8E37B135-1F45-53C3-A5CF-A26A615228A0}']
  { constructors } 

    {class} function init(typeContractsAreFor: DNType): DNContractClassForAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassForAttribute')]
  DNContractClassForAttribute = interface(DNAttribute)
  ['{3C530CD3-1BC9-3D1C-9C37-854953F9DB97}']
  { getters & setters } 

    function get_TypeContractsAreFor: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeContractsAreFor: DNType read get_TypeContractsAreFor;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassForAttribute = class(TDNGenericImport<DNContractClassForAttributeClass, DNContractClassForAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractInvariantMethodAttributeClass = interface(DNAttributeClass)
  ['{EDBFE542-47A4-5B04-A101-89EDC1FD069B}']
  { constructors } 

    {class} function init: DNContractInvariantMethodAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractInvariantMethodAttribute')]
  DNContractInvariantMethodAttribute = interface(DNAttribute)
  ['{FC941EA3-CDB3-36C2-9B32-8961EF78F6FA}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractInvariantMethodAttribute = class(TDNGenericImport<DNContractInvariantMethodAttributeClass, DNContractInvariantMethodAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractOptionAttributeClass = interface(DNAttributeClass)
  ['{8B6CE5F7-12C7-5463-877F-FD808016DD3B}']
  { constructors } 

    {class} function init(category: string; setting: string; enabled: Boolean): DNContractOptionAttribute; overload;
    {class} function init(category: string; setting: string; value: string): DNContractOptionAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractOptionAttribute')]
  DNContractOptionAttribute = interface(DNAttribute)
  ['{8AF09E89-3398-396D-AC20-1B91DC47C682}']
  { getters & setters } 

    function get_Category: string;
    function get_Setting: string;
    function get_Enabled: Boolean;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property Setting: string read get_Setting;
    property Enabled: Boolean read get_Enabled;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractOptionAttribute = class(TDNGenericImport<DNContractOptionAttributeClass, DNContractOptionAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractPublicPropertyNameAttributeClass = interface(DNAttributeClass)
  ['{2DFCF3B0-7CF0-5AA0-9698-B561D3838E58}']
  { constructors } 

    {class} function init(name: string): DNContractPublicPropertyNameAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute')]
  DNContractPublicPropertyNameAttribute = interface(DNAttribute)
  ['{32D61D4F-67D7-3D2E-B83E-F8B3CCA7C6DF}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractPublicPropertyNameAttribute = class(TDNGenericImport<DNContractPublicPropertyNameAttributeClass, DNContractPublicPropertyNameAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{7B07E3D3-FB2C-53FF-9CD5-0A3617F7EDE7}']
  { constructors } 

    {class} function init: DNContractReferenceAssemblyAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute')]
  DNContractReferenceAssemblyAttribute = interface(DNAttribute)
  ['{AEF8DFD6-BA42-3CE5-ABC3-7F1A7F2B1D3D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractReferenceAssemblyAttribute = class(TDNGenericImport<DNContractReferenceAssemblyAttributeClass, DNContractReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractRuntimeIgnoredAttributeClass = interface(DNAttributeClass)
  ['{8B07D647-F9B7-5C42-BCD4-12D4988EBF71}']
  { constructors } 

    {class} function init: DNContractRuntimeIgnoredAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute')]
  DNContractRuntimeIgnoredAttribute = interface(DNAttribute)
  ['{C35EBCFE-8904-36DF-A0E5-E819AD2A2561}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractRuntimeIgnoredAttribute = class(TDNGenericImport<DNContractRuntimeIgnoredAttributeClass, DNContractRuntimeIgnoredAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractVerificationAttributeClass = interface(DNAttributeClass)
  ['{69D5D7CE-A5A5-5FB3-80A7-ADCC1CBC41A4}']
  { constructors } 

    {class} function init(value: Boolean): DNContractVerificationAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractVerificationAttribute')]
  DNContractVerificationAttribute = interface(DNAttribute)
  ['{2E099CA1-E8C7-36C7-9C7C-4DA1CC9F145C}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractVerificationAttribute = class(TDNGenericImport<DNContractVerificationAttributeClass, DNContractVerificationAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNPureAttributeClass = interface(DNAttributeClass)
  ['{437FA5F0-4DED-5A54-879C-C13A92940FFC}']
  { constructors } 

    {class} function init: DNPureAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.PureAttribute')]
  DNPureAttribute = interface(DNAttribute)
  ['{81098A2C-856B-349D-8902-B1991A7F3D10}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPureAttribute = class(TDNGenericImport<DNPureAttributeClass, DNPureAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggableAttributeClass = interface(DNAttributeClass)
  ['{CF25634C-338B-51DE-B424-FC154A518E85}']
  { constructors } 

    {class} function init(isJITTrackingEnabled: Boolean; isJITOptimizerDisabled: Boolean): DNDebuggableAttribute; overload;
    {class} function init(modes: DNDebuggableAttribute_DebuggingModes): DNDebuggableAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggableAttribute')]
  DNDebuggableAttribute = interface(DNAttribute)
  ['{C73B8DC9-07C6-3833-B60C-D4E48E7F35B9}']
  { getters & setters } 

    function get_IsJITTrackingEnabled: Boolean;
    function get_IsJITOptimizerDisabled: Boolean;
    function get_DebuggingFlags: DNDebuggableAttribute_DebuggingModes;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsJITTrackingEnabled: Boolean read get_IsJITTrackingEnabled;
    property IsJITOptimizerDisabled: Boolean read get_IsJITOptimizerDisabled;
    property DebuggingFlags: DNDebuggableAttribute_DebuggingModes read get_DebuggingFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggableAttribute = class(TDNGenericImport<DNDebuggableAttributeClass, DNDebuggableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerBrowsableAttributeClass = interface(DNAttributeClass)
  ['{E854BBAF-693F-59DD-AE9C-046601D8F04A}']
  { constructors } 

    {class} function init(state: DNDebuggerBrowsableState): DNDebuggerBrowsableAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerBrowsableAttribute')]
  DNDebuggerBrowsableAttribute = interface(DNAttribute)
  ['{3455ED62-E4AE-33F1-8282-68E35A5F0489}']
  { getters & setters } 

    function get_State: DNDebuggerBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property State: DNDebuggerBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerBrowsableAttribute = class(TDNGenericImport<DNDebuggerBrowsableAttributeClass, DNDebuggerBrowsableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerDisplayAttributeClass = interface(DNAttributeClass)
  ['{07067C53-A99E-5DF2-9596-2E4A5D1C4C91}']
  { constructors } 

    {class} function init(value: string): DNDebuggerDisplayAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerDisplayAttribute')]
  DNDebuggerDisplayAttribute = interface(DNAttribute)
  ['{50E8AF02-5D27-3AA7-A1CD-6DFFBAF0A4E9}']
  { getters & setters } 

    function get_Value: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerDisplayAttribute = class(TDNGenericImport<DNDebuggerDisplayAttributeClass, DNDebuggerDisplayAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerHiddenAttributeClass = interface(DNAttributeClass)
  ['{64102501-D017-5D8D-9234-ADD5884AB446}']
  { constructors } 

    {class} function init: DNDebuggerHiddenAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerHiddenAttribute')]
  DNDebuggerHiddenAttribute = interface(DNAttribute)
  ['{4FD1EB7D-8D63-3386-BF42-2E9CCA0D8B44}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerHiddenAttribute = class(TDNGenericImport<DNDebuggerHiddenAttributeClass, DNDebuggerHiddenAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerNonUserCodeAttributeClass = interface(DNAttributeClass)
  ['{BA8DE464-B755-583E-A679-F785D2876018}']
  { constructors } 

    {class} function init: DNDebuggerNonUserCodeAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerNonUserCodeAttribute')]
  DNDebuggerNonUserCodeAttribute = interface(DNAttribute)
  ['{04E7923A-7251-3BF1-82A0-D6C92CFB97EA}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerNonUserCodeAttribute = class(TDNGenericImport<DNDebuggerNonUserCodeAttributeClass, DNDebuggerNonUserCodeAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepperBoundaryAttributeClass = interface(DNAttributeClass)
  ['{2E6D38EC-F208-5419-B5EA-EE1C96D6DE76}']
  { constructors } 

    {class} function init: DNDebuggerStepperBoundaryAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepperBoundaryAttribute')]
  DNDebuggerStepperBoundaryAttribute = interface(DNAttribute)
  ['{149356A0-07A7-3C42-A5F0-B003964ECF6D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepperBoundaryAttribute = class(TDNGenericImport<DNDebuggerStepperBoundaryAttributeClass, DNDebuggerStepperBoundaryAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepThroughAttributeClass = interface(DNAttributeClass)
  ['{FFBDA36E-97BC-5471-9DEE-7D24CE531DF1}']
  { constructors } 

    {class} function init: DNDebuggerStepThroughAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepThroughAttribute')]
  DNDebuggerStepThroughAttribute = interface(DNAttribute)
  ['{D59BD386-E06E-3893-BC02-94B766C2BB9D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepThroughAttribute = class(TDNGenericImport<DNDebuggerStepThroughAttributeClass, DNDebuggerStepThroughAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerTypeProxyAttributeClass = interface(DNAttributeClass)
  ['{CD002F49-4C4B-56F3-9FE9-0AA6F1E3634F}']
  { constructors } 

    {class} function init(&type: DNType): DNDebuggerTypeProxyAttribute; overload;
    {class} function init(typeName: string): DNDebuggerTypeProxyAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerTypeProxyAttribute')]
  DNDebuggerTypeProxyAttribute = interface(DNAttribute)
  ['{119419D5-2757-3507-96A5-B1FC8E8452FA}']
  { getters & setters } 

    function get_ProxyTypeName: string;
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ProxyTypeName: string read get_ProxyTypeName;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerTypeProxyAttribute = class(TDNGenericImport<DNDebuggerTypeProxyAttributeClass, DNDebuggerTypeProxyAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerVisualizerAttributeClass = interface(DNAttributeClass)
  ['{3918B5A2-5416-5360-A513-EBDB03AAFA5A}']
  { constructors } 

    {class} function init(visualizerTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerVisualizerAttribute')]
  DNDebuggerVisualizerAttribute = interface(DNAttribute)
  ['{B040BD8D-EE91-359C-95C2-2617E4FEAF9D}']
  { getters & setters } 

    function get_VisualizerObjectSourceTypeName: string;
    function get_VisualizerTypeName: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property VisualizerObjectSourceTypeName: string read get_VisualizerObjectSourceTypeName;
    property VisualizerTypeName: string read get_VisualizerTypeName;
    property Description: string read get_Description write set_Description;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerVisualizerAttribute = class(TDNGenericImport<DNDebuggerVisualizerAttributeClass, DNDebuggerVisualizerAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventAttributeClass = interface(DNAttributeClass)
  ['{A1FFA8B0-ACFB-5B19-89A7-B9B01E421BB5}']
  { constructors } 

    {class} function init(eventId: Int32): DNEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventAttribute')]
  DNEventAttribute = interface(DNAttribute)
  ['{69522D48-2F93-3A51-ACE0-5286911FD034}']
  { getters & setters } 

    function get_EventId: Int32;
    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Task: DNEventTask;
    procedure set_Task(value: DNEventTask);
    function get_Channel: DNEventChannel;
    procedure set_Channel(value: DNEventChannel);
    function get_Version: Byte;
    procedure set_Version(value: Byte);
    function get_Message: string;
    procedure set_Message(value: string);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property EventId: Int32 read get_EventId;
    property Level: DNEventLevel read get_Level write set_Level;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Task: DNEventTask read get_Task write set_Task;
    property Channel: DNEventChannel read get_Channel write set_Channel;
    property Version: Byte read get_Version write set_Version;
    property Message: string read get_Message write set_Message;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventAttribute = class(TDNGenericImport<DNEventAttributeClass, DNEventAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventDataAttributeClass = interface(DNAttributeClass)
  ['{72E93C69-D63D-5366-A84F-6A1663DDAE38}']
  { constructors } 

    {class} function init: DNEventDataAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventDataAttribute')]
  DNEventDataAttribute = interface(DNAttribute)
  ['{D0D263D0-D7ED-34C8-AA3E-9E07039D3410}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventDataAttribute = class(TDNGenericImport<DNEventDataAttributeClass, DNEventDataAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventFieldAttributeClass = interface(DNAttributeClass)
  ['{1F975F2C-B9C2-5A1E-B5D7-93B04A938BA8}']
  { constructors } 

    {class} function init: DNEventFieldAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventFieldAttribute')]
  DNEventFieldAttribute = interface(DNAttribute)
  ['{4975A556-E393-386C-9EF0-22D5179D8EBA}']
  { getters & setters } 

    function get_Tags: DNEventFieldTags;
    procedure set_Tags(value: DNEventFieldTags);
    function get_Format: DNEventFieldFormat;
    procedure set_Format(value: DNEventFieldFormat);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Tags: DNEventFieldTags read get_Tags write set_Tags;
    property Format: DNEventFieldFormat read get_Format write set_Format;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventFieldAttribute = class(TDNGenericImport<DNEventFieldAttributeClass, DNEventFieldAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventIgnoreAttributeClass = interface(DNAttributeClass)
  ['{4FB18F0C-6785-5C6B-B1A0-19812B969469}']
  { constructors } 

    {class} function init: DNEventIgnoreAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventIgnoreAttribute')]
  DNEventIgnoreAttribute = interface(DNAttribute)
  ['{C1377179-C06F-38DB-93E8-CB4D1EFC2869}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventIgnoreAttribute = class(TDNGenericImport<DNEventIgnoreAttributeClass, DNEventIgnoreAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceAttributeClass = interface(DNAttributeClass)
  ['{9E8E656F-5411-5ADF-8C48-2D3A293CD9C7}']
  { constructors } 

    {class} function init: DNEventSourceAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceAttribute')]
  DNEventSourceAttribute = interface(DNAttribute)
  ['{41998A56-0FBE-3917-87C0-6D201A7E4EEC}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: string;
    procedure set_Guid(value: string);
    function get_LocalizationResources: string;
    procedure set_LocalizationResources(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Guid: string read get_Guid write set_Guid;
    property LocalizationResources: string read get_LocalizationResources write set_LocalizationResources;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventSourceAttribute = class(TDNGenericImport<DNEventSourceAttributeClass, DNEventSourceAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNNonEventAttributeClass = interface(DNAttributeClass)
  ['{AEFACE37-B29A-5735-91D2-8BEBE95DB9C8}']
  { constructors } 

    {class} function init: DNNonEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.NonEventAttribute')]
  DNNonEventAttribute = interface(DNAttribute)
  ['{5A7C1786-61DA-3167-BA27-FE1D4C7AB308}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonEventAttribute = class(TDNGenericImport<DNNonEventAttributeClass, DNNonEventAttribute>) end;

  //-------------namespace: System----------------
  DNFlagsAttributeClass = interface(DNAttributeClass)
  ['{3B8E5F45-AAD3-5095-814F-80321D4D3DD7}']
  { constructors } 

    {class} function init: DNFlagsAttribute;

  end;

  [DNTypeName('System.FlagsAttribute')]
  DNFlagsAttribute = interface(DNAttribute)
  ['{6BB703F9-5919-3CBE-B853-E7530F2F114D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFlagsAttribute = class(TDNGenericImport<DNFlagsAttributeClass, DNFlagsAttribute>) end;

  //-------------namespace: System----------------
  DNLoaderOptimizationAttributeClass = interface(DNAttributeClass)
  ['{8E16BF28-57D5-56DB-B283-2A49FEBAADD9}']
  { constructors } 

    {class} function init(value: Byte): DNLoaderOptimizationAttribute; overload;
    {class} function init(value: DNLoaderOptimization): DNLoaderOptimizationAttribute; overload;

  end;

  [DNTypeName('System.LoaderOptimizationAttribute')]
  DNLoaderOptimizationAttribute = interface(DNAttribute)
  ['{FC19F12C-DBBA-3FB5-9FB6-32C5968D1D7C}']
  { getters & setters } 

    function get_Value: DNLoaderOptimization;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNLoaderOptimization read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLoaderOptimizationAttribute = class(TDNGenericImport<DNLoaderOptimizationAttributeClass, DNLoaderOptimizationAttribute>) end;

  //-------------namespace: System----------------
  DNMTAThreadAttributeClass = interface(DNAttributeClass)
  ['{2135B6BB-3F04-54C4-9F30-0FCFEE1B1293}']
  { constructors } 

    {class} function init: DNMTAThreadAttribute;

  end;

  [DNTypeName('System.MTAThreadAttribute')]
  DNMTAThreadAttribute = interface(DNAttribute)
  ['{3476D1E8-3B1B-36BD-9B89-7B071DF7A4C0}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNMTAThreadAttribute = class(TDNGenericImport<DNMTAThreadAttributeClass, DNMTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNNonSerializedAttributeClass = interface(DNAttributeClass)
  ['{5996B941-BBAD-5149-BFCE-7426B981023E}']
  { constructors } 

    {class} function init: DNNonSerializedAttribute;

  end;

  [DNTypeName('System.NonSerializedAttribute')]
  DNNonSerializedAttribute = interface(DNAttribute)
  ['{95670FA6-6488-3263-9610-859CDC8083F3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonSerializedAttribute = class(TDNGenericImport<DNNonSerializedAttributeClass, DNNonSerializedAttribute>) end;

  //-------------namespace: System----------------
  DNObsoleteAttributeClass = interface(DNAttributeClass)
  ['{F9451AC4-30D7-5DAF-9081-8ABFEE2454AB}']
  { constructors } 

    {class} function init: DNObsoleteAttribute; overload;
    {class} function init(message: string): DNObsoleteAttribute; overload;
    {class} function init(message: string; error: Boolean): DNObsoleteAttribute; overload;

  end;

  [DNTypeName('System.ObsoleteAttribute')]
  DNObsoleteAttribute = interface(DNAttribute)
  ['{820AC87E-EF30-31CC-8D41-BA267B0356D2}']
  { getters & setters } 

    function get_Message: string;
    function get_IsError: Boolean;
    function get_DiagnosticId: string;
    procedure set_DiagnosticId(value: string);
    function get_UrlFormat: string;
    procedure set_UrlFormat(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
    property IsError: Boolean read get_IsError;
    property DiagnosticId: string read get_DiagnosticId write set_DiagnosticId;
    property UrlFormat: string read get_UrlFormat write set_UrlFormat;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObsoleteAttribute = class(TDNGenericImport<DNObsoleteAttributeClass, DNObsoleteAttribute>) end;

  //-------------namespace: System----------------
  DNParamArrayAttributeClass = interface(DNAttributeClass)
  ['{4E34E71B-BAD9-5944-8E14-0F7ED383C791}']
  { constructors } 

    {class} function init: DNParamArrayAttribute;

  end;

  [DNTypeName('System.ParamArrayAttribute')]
  DNParamArrayAttribute = interface(DNAttribute)
  ['{0D4D8A77-DB54-3505-970D-5843CA29B3AC}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNParamArrayAttribute = class(TDNGenericImport<DNParamArrayAttributeClass, DNParamArrayAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyAlgorithmIdAttributeClass = interface(DNAttributeClass)
  ['{98D58214-45A2-51C3-AF9E-2B29F89C3EDE}']
  { constructors } 

    {class} function init(algorithmId: DNAssemblyHashAlgorithm): DNAssemblyAlgorithmIdAttribute; overload;
    {class} function init(algorithmId: UInt32): DNAssemblyAlgorithmIdAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyAlgorithmIdAttribute')]
  DNAssemblyAlgorithmIdAttribute = interface(DNAttribute)
  ['{BD6B198C-C1F8-3899-A9D3-97F16B0CA79F}']
  { getters & setters } 

    function get_AlgorithmId: UInt32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AlgorithmId: UInt32 read get_AlgorithmId;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyAlgorithmIdAttribute = class(TDNGenericImport<DNAssemblyAlgorithmIdAttributeClass, DNAssemblyAlgorithmIdAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCompanyAttributeClass = interface(DNAttributeClass)
  ['{15376C11-54A9-59D3-8343-A459EBE50ECF}']
  { constructors } 

    {class} function init(company: string): DNAssemblyCompanyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCompanyAttribute')]
  DNAssemblyCompanyAttribute = interface(DNAttribute)
  ['{77312A50-DCF5-33C8-9CBC-DBF4D3FB78F1}']
  { getters & setters } 

    function get_Company: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Company: string read get_Company;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCompanyAttribute = class(TDNGenericImport<DNAssemblyCompanyAttributeClass, DNAssemblyCompanyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyConfigurationAttributeClass = interface(DNAttributeClass)
  ['{A76AB151-D65B-5FA6-A341-7851DB5BFC1D}']
  { constructors } 

    {class} function init(configuration: string): DNAssemblyConfigurationAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyConfigurationAttribute')]
  DNAssemblyConfigurationAttribute = interface(DNAttribute)
  ['{369DBB94-9EFC-3836-9FCC-88D5C7BDB9FF}']
  { getters & setters } 

    function get_Configuration: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Configuration: string read get_Configuration;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyConfigurationAttribute = class(TDNGenericImport<DNAssemblyConfigurationAttributeClass, DNAssemblyConfigurationAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCopyrightAttributeClass = interface(DNAttributeClass)
  ['{E00CEFAC-3289-53A9-8748-4F70D292816D}']
  { constructors } 

    {class} function init(copyright: string): DNAssemblyCopyrightAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCopyrightAttribute')]
  DNAssemblyCopyrightAttribute = interface(DNAttribute)
  ['{79C1343B-377D-32F0-98C6-B1C669A534CC}']
  { getters & setters } 

    function get_Copyright: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Copyright: string read get_Copyright;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCopyrightAttribute = class(TDNGenericImport<DNAssemblyCopyrightAttributeClass, DNAssemblyCopyrightAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCultureAttributeClass = interface(DNAttributeClass)
  ['{E3C25024-B747-5F44-A033-B6536EECF25A}']
  { constructors } 

    {class} function init(culture: string): DNAssemblyCultureAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCultureAttribute')]
  DNAssemblyCultureAttribute = interface(DNAttribute)
  ['{74E721EB-00FC-3F3C-8736-AD51FAC2E616}']
  { getters & setters } 

    function get_Culture: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Culture: string read get_Culture;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCultureAttribute = class(TDNGenericImport<DNAssemblyCultureAttributeClass, DNAssemblyCultureAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDefaultAliasAttributeClass = interface(DNAttributeClass)
  ['{1E591D4B-09E4-5AF3-B396-E6F598B73A75}']
  { constructors } 

    {class} function init(defaultAlias: string): DNAssemblyDefaultAliasAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDefaultAliasAttribute')]
  DNAssemblyDefaultAliasAttribute = interface(DNAttribute)
  ['{B3C3B65A-D9F1-33E2-A3AB-F9BD8B1D7FAD}']
  { getters & setters } 

    function get_DefaultAlias: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultAlias: string read get_DefaultAlias;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDefaultAliasAttribute = class(TDNGenericImport<DNAssemblyDefaultAliasAttributeClass, DNAssemblyDefaultAliasAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDelaySignAttributeClass = interface(DNAttributeClass)
  ['{7E6F6C56-6573-525D-BCBD-7DA61F187CC4}']
  { constructors } 

    {class} function init(delaySign: Boolean): DNAssemblyDelaySignAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDelaySignAttribute')]
  DNAssemblyDelaySignAttribute = interface(DNAttribute)
  ['{2C769938-59A5-3A6C-B690-0F4DDE2D0A0B}']
  { getters & setters } 

    function get_DelaySign: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DelaySign: Boolean read get_DelaySign;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDelaySignAttribute = class(TDNGenericImport<DNAssemblyDelaySignAttributeClass, DNAssemblyDelaySignAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDescriptionAttributeClass = interface(DNAttributeClass)
  ['{E971E58B-39EE-567E-9D21-3D4918E311F1}']
  { constructors } 

    {class} function init(description: string): DNAssemblyDescriptionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDescriptionAttribute')]
  DNAssemblyDescriptionAttribute = interface(DNAttribute)
  ['{B068000A-2F59-3A24-B8CB-94B878B9F740}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDescriptionAttribute = class(TDNGenericImport<DNAssemblyDescriptionAttributeClass, DNAssemblyDescriptionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFileVersionAttributeClass = interface(DNAttributeClass)
  ['{F265DE98-60EB-5334-8C33-DA0759FC7E50}']
  { constructors } 

    {class} function init(version: string): DNAssemblyFileVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyFileVersionAttribute')]
  DNAssemblyFileVersionAttribute = interface(DNAttribute)
  ['{EDF8012A-90E5-3E7D-84EB-BC596C3A4888}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFileVersionAttribute = class(TDNGenericImport<DNAssemblyFileVersionAttributeClass, DNAssemblyFileVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFlagsAttributeClass = interface(DNAttributeClass)
  ['{B2AFC447-5BE8-5306-A111-F6B2C6071261}']
  { constructors } 

    {class} function init(flags: UInt32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: Int32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: DNAssemblyNameFlags): DNAssemblyFlagsAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyFlagsAttribute')]
  DNAssemblyFlagsAttribute = interface(DNAttribute)
  ['{C6F5EAEA-0D06-3330-9E24-2E3B50B2E36F}']
  { getters & setters } 

    function get_Flags: UInt32;
    function get_AssemblyFlags: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Flags: UInt32 read get_Flags;
    property AssemblyFlags: Int32 read get_AssemblyFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFlagsAttribute = class(TDNGenericImport<DNAssemblyFlagsAttributeClass, DNAssemblyFlagsAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyInformationalVersionAttributeClass = interface(DNAttributeClass)
  ['{3B7A98FA-8E43-5217-8A54-95D4D3A81702}']
  { constructors } 

    {class} function init(informationalVersion: string): DNAssemblyInformationalVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyInformationalVersionAttribute')]
  DNAssemblyInformationalVersionAttribute = interface(DNAttribute)
  ['{1D87CFC8-4DA5-3362-92F0-723CC3733FF0}']
  { getters & setters } 

    function get_InformationalVersion: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property InformationalVersion: string read get_InformationalVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyInformationalVersionAttribute = class(TDNGenericImport<DNAssemblyInformationalVersionAttributeClass, DNAssemblyInformationalVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyFileAttributeClass = interface(DNAttributeClass)
  ['{6B203B16-AA63-5AEE-9290-A05245B371A0}']
  { constructors } 

    {class} function init(keyFile: string): DNAssemblyKeyFileAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyFileAttribute')]
  DNAssemblyKeyFileAttribute = interface(DNAttribute)
  ['{2F9827E4-06F5-3A8E-9E75-BF244BFB99A7}']
  { getters & setters } 

    function get_KeyFile: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyFile: string read get_KeyFile;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyFileAttribute = class(TDNGenericImport<DNAssemblyKeyFileAttributeClass, DNAssemblyKeyFileAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyNameAttributeClass = interface(DNAttributeClass)
  ['{4A722A8C-4DFA-5319-B5A5-A1E300729E54}']
  { constructors } 

    {class} function init(keyName: string): DNAssemblyKeyNameAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyNameAttribute')]
  DNAssemblyKeyNameAttribute = interface(DNAttribute)
  ['{4037F28C-B023-3EB3-A9AD-D659538252B3}']
  { getters & setters } 

    function get_KeyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property KeyName: string read get_KeyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyNameAttribute = class(TDNGenericImport<DNAssemblyKeyNameAttributeClass, DNAssemblyKeyNameAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyMetadataAttributeClass = interface(DNAttributeClass)
  ['{04F70713-379A-521A-846C-D4F5FC3E8580}']
  { constructors } 

    {class} function init(key: string; value: string): DNAssemblyMetadataAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyMetadataAttribute')]
  DNAssemblyMetadataAttribute = interface(DNAttribute)
  ['{1DFAF4A4-9915-3CB1-B5ED-5B4A40E0C402}']
  { getters & setters } 

    function get_Key: string;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyMetadataAttribute = class(TDNGenericImport<DNAssemblyMetadataAttributeClass, DNAssemblyMetadataAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyProductAttributeClass = interface(DNAttributeClass)
  ['{2D6DEB03-7076-5E7F-8A8D-627916691506}']
  { constructors } 

    {class} function init(product: string): DNAssemblyProductAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyProductAttribute')]
  DNAssemblyProductAttribute = interface(DNAttribute)
  ['{E31D50E9-C0FA-33C6-B3A3-34287C63B175}']
  { getters & setters } 

    function get_Product: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Product: string read get_Product;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyProductAttribute = class(TDNGenericImport<DNAssemblyProductAttributeClass, DNAssemblyProductAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblySignatureKeyAttributeClass = interface(DNAttributeClass)
  ['{C417CBF2-9C8F-538C-8B6D-B1349EA76809}']
  { constructors } 

    {class} function init(publicKey: string; countersignature: string): DNAssemblySignatureKeyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblySignatureKeyAttribute')]
  DNAssemblySignatureKeyAttribute = interface(DNAttribute)
  ['{2D85AE9D-1FCB-3CD7-A660-E317EF35386A}']
  { getters & setters } 

    function get_PublicKey: string;
    function get_Countersignature: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PublicKey: string read get_PublicKey;
    property Countersignature: string read get_Countersignature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblySignatureKeyAttribute = class(TDNGenericImport<DNAssemblySignatureKeyAttributeClass, DNAssemblySignatureKeyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTitleAttributeClass = interface(DNAttributeClass)
  ['{1101DF6F-8920-5F40-8BD8-0E8AE8AB0214}']
  { constructors } 

    {class} function init(title: string): DNAssemblyTitleAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTitleAttribute')]
  DNAssemblyTitleAttribute = interface(DNAttribute)
  ['{0F78CE10-FD62-383B-BCFE-052E59E98882}']
  { getters & setters } 

    function get_Title: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTitleAttribute = class(TDNGenericImport<DNAssemblyTitleAttributeClass, DNAssemblyTitleAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTrademarkAttributeClass = interface(DNAttributeClass)
  ['{516F548C-19DF-5309-996E-975605B6282C}']
  { constructors } 

    {class} function init(trademark: string): DNAssemblyTrademarkAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTrademarkAttribute')]
  DNAssemblyTrademarkAttribute = interface(DNAttribute)
  ['{8F97775A-2BE0-3AF1-A0FB-BF71811D640E}']
  { getters & setters } 

    function get_Trademark: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Trademark: string read get_Trademark;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTrademarkAttribute = class(TDNGenericImport<DNAssemblyTrademarkAttributeClass, DNAssemblyTrademarkAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyVersionAttributeClass = interface(DNAttributeClass)
  ['{A9C2F8BC-CDDD-5793-B20C-5136848127EE}']
  { constructors } 

    {class} function init(version: string): DNAssemblyVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyVersionAttribute')]
  DNAssemblyVersionAttribute = interface(DNAttribute)
  ['{BEEB31EB-1A28-39F1-82F2-E3AAC5D4B7B3}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyVersionAttribute = class(TDNGenericImport<DNAssemblyVersionAttributeClass, DNAssemblyVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNDefaultMemberAttributeClass = interface(DNAttributeClass)
  ['{ECEF65F7-66F6-5797-A5A0-F0B2E6F7BE92}']
  { constructors } 

    {class} function init(memberName: string): DNDefaultMemberAttribute;

  end;

  [DNTypeName('System.Reflection.DefaultMemberAttribute')]
  DNDefaultMemberAttribute = interface(DNAttribute)
  ['{B17774C8-BB9C-340D-AB6C-BBD25CBF2072}']
  { getters & setters } 

    function get_MemberName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultMemberAttribute = class(TDNGenericImport<DNDefaultMemberAttributeClass, DNDefaultMemberAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscateAssemblyAttributeClass = interface(DNAttributeClass)
  ['{1438B550-74A1-5C0B-ADF1-50C63EF44D9A}']
  { constructors } 

    {class} function init(assemblyIsPrivate: Boolean): DNObfuscateAssemblyAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscateAssemblyAttribute')]
  DNObfuscateAssemblyAttribute = interface(DNAttribute)
  ['{BCBB157A-28A3-3BDA-9C94-E4B851979AF7}']
  { getters & setters } 

    function get_AssemblyIsPrivate: Boolean;
    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyIsPrivate: Boolean read get_AssemblyIsPrivate;
    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscateAssemblyAttribute = class(TDNGenericImport<DNObfuscateAssemblyAttributeClass, DNObfuscateAssemblyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscationAttributeClass = interface(DNAttributeClass)
  ['{F716C1CB-1C88-5273-B748-2747EF6B48A0}']
  { constructors } 

    {class} function init: DNObfuscationAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscationAttribute')]
  DNObfuscationAttribute = interface(DNAttribute)
  ['{04E722FB-8D1D-3DCC-9874-40EE212A9EEA}']
  { getters & setters } 

    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_Exclude: Boolean;
    procedure set_Exclude(value: Boolean);
    function get_ApplyToMembers: Boolean;
    procedure set_ApplyToMembers(value: Boolean);
    function get_Feature: string;
    procedure set_Feature(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property Exclude: Boolean read get_Exclude write set_Exclude;
    property ApplyToMembers: Boolean read get_ApplyToMembers write set_ApplyToMembers;
    property Feature: string read get_Feature write set_Feature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscationAttribute = class(TDNGenericImport<DNObfuscationAttributeClass, DNObfuscationAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNNeutralResourcesLanguageAttributeClass = interface(DNAttributeClass)
  ['{EF631583-B8CE-57F5-AF9A-36C21729BD56}']
  { constructors } 

    {class} function init(cultureName: string): DNNeutralResourcesLanguageAttribute; overload;
    {class} function init(cultureName: string; location: DNUltimateResourceFallbackLocation): DNNeutralResourcesLanguageAttribute; overload;

  end;

  [DNTypeName('System.Resources.NeutralResourcesLanguageAttribute')]
  DNNeutralResourcesLanguageAttribute = interface(DNAttribute)
  ['{89EE9200-B5E1-364B-B9D2-66FEF77329DF}']
  { getters & setters } 

    function get_CultureName: string;
    function get_Location: DNUltimateResourceFallbackLocation;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CultureName: string read get_CultureName;
    property Location: DNUltimateResourceFallbackLocation read get_Location;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNeutralResourcesLanguageAttribute = class(TDNGenericImport<DNNeutralResourcesLanguageAttributeClass, DNNeutralResourcesLanguageAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNSatelliteContractVersionAttributeClass = interface(DNAttributeClass)
  ['{6620D980-11CC-5A6A-A951-735230FB0C59}']
  { constructors } 

    {class} function init(version: string): DNSatelliteContractVersionAttribute;

  end;

  [DNTypeName('System.Resources.SatelliteContractVersionAttribute')]
  DNSatelliteContractVersionAttribute = interface(DNAttribute)
  ['{9DC80C7B-3A9F-3F1B-9934-CDB3B02AE347}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSatelliteContractVersionAttribute = class(TDNGenericImport<DNSatelliteContractVersionAttributeClass, DNSatelliteContractVersionAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNAssemblyTargetedPatchBandAttributeClass = interface(DNAttributeClass)
  ['{65E40FCD-4460-5B67-9EDE-543F6954A983}']
  { constructors } 

    {class} function init(targetedPatchBand: string): DNAssemblyTargetedPatchBandAttribute;

  end;

  [DNTypeName('System.Runtime.AssemblyTargetedPatchBandAttribute')]
  DNAssemblyTargetedPatchBandAttribute = interface(DNAttribute)
  ['{AA8C9258-083B-37E1-B475-C44A752AB6B9}']
  { getters & setters } 

    function get_TargetedPatchBand: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TargetedPatchBand: string read get_TargetedPatchBand;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTargetedPatchBandAttribute = class(TDNGenericImport<DNAssemblyTargetedPatchBandAttributeClass, DNAssemblyTargetedPatchBandAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAccessedThroughPropertyAttributeClass = interface(DNAttributeClass)
  ['{A62620CC-A038-58C2-B289-0F02939C9B01}']
  { constructors } 

    {class} function init(propertyName: string): DNAccessedThroughPropertyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AccessedThroughPropertyAttribute')]
  DNAccessedThroughPropertyAttribute = interface(DNAttribute)
  ['{D4836864-1233-30AF-893B-324FD1A2E99C}']
  { getters & setters } 

    function get_PropertyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAccessedThroughPropertyAttribute = class(TDNGenericImport<DNAccessedThroughPropertyAttributeClass, DNAccessedThroughPropertyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncMethodBuilderAttributeClass = interface(DNAttributeClass)
  ['{FD45201C-B8F6-567C-8E78-EE2F8DF59C2D}']
  { constructors } 

    {class} function init(builderType: DNType): DNAsyncMethodBuilderAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncMethodBuilderAttribute')]
  DNAsyncMethodBuilderAttribute = interface(DNAttribute)
  ['{EB344982-EB21-38C7-B9B9-46B5D361F897}']
  { getters & setters } 

    function get_BuilderType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BuilderType: DNType read get_BuilderType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncMethodBuilderAttribute = class(TDNGenericImport<DNAsyncMethodBuilderAttributeClass, DNAsyncMethodBuilderAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerArgumentExpressionAttributeClass = interface(DNAttributeClass)
  ['{7B485FE9-A67D-5921-AE06-20801CA12DB3}']
  { constructors } 

    {class} function init(parameterName: string): DNCallerArgumentExpressionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerArgumentExpressionAttribute')]
  DNCallerArgumentExpressionAttribute = interface(DNAttribute)
  ['{4D8A5C2E-6EDE-3C64-AA5F-35E7B9C52937}']
  { getters & setters } 

    function get_ParameterName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ParameterName: string read get_ParameterName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerArgumentExpressionAttribute = class(TDNGenericImport<DNCallerArgumentExpressionAttributeClass, DNCallerArgumentExpressionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerFilePathAttributeClass = interface(DNAttributeClass)
  ['{C7DF6295-586C-5FB3-9A26-D9201B1BD089}']
  { constructors } 

    {class} function init: DNCallerFilePathAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerFilePathAttribute')]
  DNCallerFilePathAttribute = interface(DNAttribute)
  ['{F8408C22-39C2-32B4-BD5A-6E33B65347E8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerFilePathAttribute = class(TDNGenericImport<DNCallerFilePathAttributeClass, DNCallerFilePathAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerLineNumberAttributeClass = interface(DNAttributeClass)
  ['{B2C6FA4F-4BF9-5EEF-996A-8145146950DC}']
  { constructors } 

    {class} function init: DNCallerLineNumberAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerLineNumberAttribute')]
  DNCallerLineNumberAttribute = interface(DNAttribute)
  ['{60467624-D130-3150-8700-402E31870A6D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerLineNumberAttribute = class(TDNGenericImport<DNCallerLineNumberAttributeClass, DNCallerLineNumberAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerMemberNameAttributeClass = interface(DNAttributeClass)
  ['{35E63D19-9A2D-521D-BE2B-4E6D62223A69}']
  { constructors } 

    {class} function init: DNCallerMemberNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerMemberNameAttribute')]
  DNCallerMemberNameAttribute = interface(DNAttribute)
  ['{D2DD5AEF-AC14-3935-9F6F-0BE00EA15FCE}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerMemberNameAttribute = class(TDNGenericImport<DNCallerMemberNameAttributeClass, DNCallerMemberNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilationRelaxationsAttributeClass = interface(DNAttributeClass)
  ['{CE7DDB75-2467-5E45-B838-4414F915C32B}']
  { constructors } 

    {class} function init(relaxations: Int32): DNCompilationRelaxationsAttribute; overload;
    {class} function init(relaxations: DNCompilationRelaxations): DNCompilationRelaxationsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxationsAttribute')]
  DNCompilationRelaxationsAttribute = interface(DNAttribute)
  ['{553C7FEC-337E-38DA-8505-3AC5656F8DFF}']
  { getters & setters } 

    function get_CompilationRelaxations: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CompilationRelaxations: Int32 read get_CompilationRelaxations;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilationRelaxationsAttribute = class(TDNGenericImport<DNCompilationRelaxationsAttributeClass, DNCompilationRelaxationsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGeneratedAttributeClass = interface(DNAttributeClass)
  ['{09B94C69-722D-51D9-9838-B6AA094F0A7F}']
  { constructors } 

    {class} function init: DNCompilerGeneratedAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGeneratedAttribute')]
  DNCompilerGeneratedAttribute = interface(DNAttribute)
  ['{F5910DBD-0933-3F3A-8D4D-525CAF540F87}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGeneratedAttribute = class(TDNGenericImport<DNCompilerGeneratedAttributeClass, DNCompilerGeneratedAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGlobalScopeAttributeClass = interface(DNAttributeClass)
  ['{25C37D42-39C1-5816-9420-2EF7D3D0EB91}']
  { constructors } 

    {class} function init: DNCompilerGlobalScopeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGlobalScopeAttribute')]
  DNCompilerGlobalScopeAttribute = interface(DNAttribute)
  ['{FDC8F3AE-34FE-3FF2-8480-EF8F514CD095}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGlobalScopeAttribute = class(TDNGenericImport<DNCompilerGlobalScopeAttributeClass, DNCompilerGlobalScopeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCustomConstantAttributeClass = interface(DNAttributeClass)
  ['{EDC84A96-8C6B-5CA7-80BC-299AFF3FD216}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.CustomConstantAttribute')]
  DNCustomConstantAttribute = interface(DNAttribute)
  ['{C6F6AE31-4A77-343A-A53C-BAC2CD9C4354}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCustomConstantAttribute = class(TDNGenericImport<DNCustomConstantAttributeClass, DNCustomConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDateTimeConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{E88F92EF-1B05-5DB4-854C-E6D5A8F8773C}']
  { constructors } 

    {class} function init(ticks: Int64): DNDateTimeConstantAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DateTimeConstantAttribute')]
  DNDateTimeConstantAttribute = interface(DNCustomConstantAttribute)
  ['{1558947D-52E7-3A28-917C-8463322D1E65}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDateTimeConstantAttribute = class(TDNGenericImport<DNDateTimeConstantAttributeClass, DNDateTimeConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDecimalConstantAttributeClass = interface(DNAttributeClass)
  ['{77D1E570-02FC-53C9-8C39-B9AB814F215B}']
  { constructors } 

    {class} function init(scale: Byte; sign: Byte; hi: UInt32; mid: UInt32; low: UInt32): DNDecimalConstantAttribute; overload;
    {class} function init(scale: Byte; sign: Byte; hi: Int32; mid: Int32; low: Int32): DNDecimalConstantAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DecimalConstantAttribute')]
  DNDecimalConstantAttribute = interface(DNAttribute)
  ['{1BB74096-780B-34CE-91B5-75FDC96D920A}']
  { getters & setters } 

    function get_Value: DNDecimal;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNDecimal read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDecimalConstantAttribute = class(TDNGenericImport<DNDecimalConstantAttributeClass, DNDecimalConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDefaultDependencyAttributeClass = interface(DNAttributeClass)
  ['{1A9CF433-58B5-552C-BA4D-FEB4723BB64B}']
  { constructors } 

    {class} function init(loadHintArgument: DNLoadHint): DNDefaultDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DefaultDependencyAttribute')]
  DNDefaultDependencyAttribute = interface(DNAttribute)
  ['{8D020B52-F57C-3118-9EAC-B976835A3F1F}']
  { getters & setters } 

    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDependencyAttribute = class(TDNGenericImport<DNDefaultDependencyAttributeClass, DNDefaultDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDependencyAttributeClass = interface(DNAttributeClass)
  ['{FBD077FD-93D0-54C7-8E04-29977E4AAA21}']
  { constructors } 

    {class} function init(dependentAssemblyArgument: string; loadHintArgument: DNLoadHint): DNDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DependencyAttribute')]
  DNDependencyAttribute = interface(DNAttribute)
  ['{7C619D36-A1B0-33FB-8F60-BE7D4334BE1C}']
  { getters & setters } 

    function get_DependentAssembly: string;
    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DependentAssembly: string read get_DependentAssembly;
    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDependencyAttribute = class(TDNGenericImport<DNDependencyAttributeClass, DNDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDisablePrivateReflectionAttributeClass = interface(DNAttributeClass)
  ['{6A961D54-FE7B-50F5-8688-5A2546DF8803}']
  { constructors } 

    {class} function init: DNDisablePrivateReflectionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DisablePrivateReflectionAttribute')]
  DNDisablePrivateReflectionAttribute = interface(DNAttribute)
  ['{172B3B6B-D27D-37E7-AC3A-FB54C99E6672}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDisablePrivateReflectionAttribute = class(TDNGenericImport<DNDisablePrivateReflectionAttributeClass, DNDisablePrivateReflectionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDiscardableAttributeClass = interface(DNAttributeClass)
  ['{4EF77A7A-FE9A-5940-AAA7-8EDE58D03A67}']
  { constructors } 

    {class} function init: DNDiscardableAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DiscardableAttribute')]
  DNDiscardableAttribute = interface(DNAttribute)
  ['{184DF1ED-03D2-35A1-9082-77AD61E04760}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDiscardableAttribute = class(TDNGenericImport<DNDiscardableAttributeClass, DNDiscardableAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNEnumeratorCancellationAttributeClass = interface(DNAttributeClass)
  ['{050A0655-2663-5396-B057-1F9CF3D494BB}']
  { constructors } 

    {class} function init: DNEnumeratorCancellationAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.EnumeratorCancellationAttribute')]
  DNEnumeratorCancellationAttribute = interface(DNAttribute)
  ['{E05FA974-7FD9-3016-8014-05D59C689A7D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNEnumeratorCancellationAttribute = class(TDNGenericImport<DNEnumeratorCancellationAttributeClass, DNEnumeratorCancellationAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExtensionAttributeClass = interface(DNAttributeClass)
  ['{4C32A78A-469C-5D6A-BD86-4DB48556E058}']
  { constructors } 

    {class} function init: DNExtensionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ExtensionAttribute')]
  DNExtensionAttribute = interface(DNAttribute)
  ['{8EE624BF-121F-34CF-9921-BF9834DBB396}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNExtensionAttribute = class(TDNGenericImport<DNExtensionAttributeClass, DNExtensionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedAddressValueTypeAttributeClass = interface(DNAttributeClass)
  ['{5D84FEDD-31B9-5A7E-8E3C-DB4806712C86}']
  { constructors } 

    {class} function init: DNFixedAddressValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedAddressValueTypeAttribute')]
  DNFixedAddressValueTypeAttribute = interface(DNAttribute)
  ['{35A678E6-F73C-373B-96CE-52DC4496BB84}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedAddressValueTypeAttribute = class(TDNGenericImport<DNFixedAddressValueTypeAttributeClass, DNFixedAddressValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedBufferAttributeClass = interface(DNAttributeClass)
  ['{E0AF7EF6-59B7-52BD-B275-00C28D401112}']
  { constructors } 

    {class} function init(elementType: DNType; length: Int32): DNFixedBufferAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedBufferAttribute')]
  DNFixedBufferAttribute = interface(DNAttribute)
  ['{AAD9546C-604C-3E70-8F18-2582C127F657}']
  { getters & setters } 

    function get_ElementType: DNType;
    function get_Length: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ElementType: DNType read get_ElementType;
    property Length: Int32 read get_Length;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedBufferAttribute = class(TDNGenericImport<DNFixedBufferAttributeClass, DNFixedBufferAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIndexerNameAttributeClass = interface(DNAttributeClass)
  ['{AE30FF5A-79CA-52BE-917D-0FE6CB12419D}']
  { constructors } 

    {class} function init(indexerName: string): DNIndexerNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IndexerNameAttribute')]
  DNIndexerNameAttribute = interface(DNAttribute)
  ['{5A2A462A-C160-352B-A8FA-224CF5DBB303}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIndexerNameAttribute = class(TDNGenericImport<DNIndexerNameAttributeClass, DNIndexerNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNInternalsVisibleToAttributeClass = interface(DNAttributeClass)
  ['{1247FFC8-EADB-5D06-A613-7B096BC90EBF}']
  { constructors } 

    {class} function init(assemblyName: string): DNInternalsVisibleToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.InternalsVisibleToAttribute')]
  DNInternalsVisibleToAttribute = interface(DNAttribute)
  ['{183DC0BA-B2A2-34ED-8D58-081C3799824A}']
  { getters & setters } 

    function get_AssemblyName: string;
    function get_AllInternalsVisible: Boolean;
    procedure set_AllInternalsVisible(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyName: string read get_AssemblyName;
    property AllInternalsVisible: Boolean read get_AllInternalsVisible write set_AllInternalsVisible;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInternalsVisibleToAttribute = class(TDNGenericImport<DNInternalsVisibleToAttributeClass, DNInternalsVisibleToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByRefLikeAttributeClass = interface(DNAttributeClass)
  ['{FD3FB941-ABB9-5CAB-8C3A-FF95917FA129}']
  { constructors } 

    {class} function init: DNIsByRefLikeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsByRefLikeAttribute')]
  DNIsByRefLikeAttribute = interface(DNAttribute)
  ['{9B49DE3F-7E66-38AB-AC15-1926F480E218}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsByRefLikeAttribute = class(TDNGenericImport<DNIsByRefLikeAttributeClass, DNIsByRefLikeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsReadOnlyAttributeClass = interface(DNAttributeClass)
  ['{69C5A85F-3702-5535-BFC3-94B2F9341707}']
  { constructors } 

    {class} function init: DNIsReadOnlyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsReadOnlyAttribute')]
  DNIsReadOnlyAttribute = interface(DNAttribute)
  ['{E288D240-3A2E-363E-8B52-3ECC1A143D8A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsReadOnlyAttribute = class(TDNGenericImport<DNIsReadOnlyAttributeClass, DNIsReadOnlyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNMethodImplAttributeClass = interface(DNAttributeClass)
  ['{AE02B2A1-CE83-5845-B1FE-9C558B1D9EA8}']
  { constructors } 

    {class} function init(methodImplOptions: DNMethodImplOptions): DNMethodImplAttribute; overload;
    {class} function init(value: Int16): DNMethodImplAttribute; overload;
    {class} function init: DNMethodImplAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.MethodImplAttribute')]
  DNMethodImplAttribute = interface(DNAttribute)
  ['{F45D561D-0C67-3328-8A64-29A04DF76D90}']
  { getters & setters } 

    function get_Value: DNMethodImplOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNMethodImplOptions read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMethodImplAttribute = class(TDNGenericImport<DNMethodImplAttributeClass, DNMethodImplAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNModuleInitializerAttributeClass = interface(DNAttributeClass)
  ['{1EF79685-9929-5BA2-B3E0-8095600564D9}']
  { constructors } 

    {class} function init: DNModuleInitializerAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ModuleInitializerAttribute')]
  DNModuleInitializerAttribute = interface(DNAttribute)
  ['{D7D6984B-2401-3AB0-BF3E-BC6D8569BF29}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNModuleInitializerAttribute = class(TDNGenericImport<DNModuleInitializerAttributeClass, DNModuleInitializerAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNPreserveBaseOverridesAttributeClass = interface(DNAttributeClass)
  ['{D3AC7275-4496-521B-A305-06BAA53133FB}']
  { constructors } 

    {class} function init: DNPreserveBaseOverridesAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.PreserveBaseOverridesAttribute')]
  DNPreserveBaseOverridesAttribute = interface(DNAttribute)
  ['{C839D8D6-A11B-3900-82E7-ABFBECA67B84}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPreserveBaseOverridesAttribute = class(TDNGenericImport<DNPreserveBaseOverridesAttributeClass, DNPreserveBaseOverridesAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{E1D7EAEE-2F93-5AE9-85BB-E0E9ECD57F27}']
  { constructors } 

    {class} function init: DNReferenceAssemblyAttribute; overload;
    {class} function init(description: string): DNReferenceAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReferenceAssemblyAttribute')]
  DNReferenceAssemblyAttribute = interface(DNAttribute)
  ['{BE0E7392-9D42-36F1-A7D0-94A790438BC1}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReferenceAssemblyAttribute = class(TDNGenericImport<DNReferenceAssemblyAttributeClass, DNReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeCompatibilityAttributeClass = interface(DNAttributeClass)
  ['{7AF90FA5-5C57-5FFD-ABDB-883B7A23149B}']
  { constructors } 

    {class} function init: DNRuntimeCompatibilityAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeCompatibilityAttribute')]
  DNRuntimeCompatibilityAttribute = interface(DNAttribute)
  ['{A5B769B8-1CC9-3D35-A0DB-FCF8555E7A6B}']
  { getters & setters } 

    function get_WrapNonExceptionThrows: Boolean;
    procedure set_WrapNonExceptionThrows(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property WrapNonExceptionThrows: Boolean read get_WrapNonExceptionThrows write set_WrapNonExceptionThrows;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRuntimeCompatibilityAttribute = class(TDNGenericImport<DNRuntimeCompatibilityAttributeClass, DNRuntimeCompatibilityAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSkipLocalsInitAttributeClass = interface(DNAttributeClass)
  ['{ECD1FE39-B00A-58B4-8191-510EC906B09A}']
  { constructors } 

    {class} function init: DNSkipLocalsInitAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SkipLocalsInitAttribute')]
  DNSkipLocalsInitAttribute = interface(DNAttribute)
  ['{66DD29E5-1EA2-3317-8FCB-EC730317B15C}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSkipLocalsInitAttribute = class(TDNGenericImport<DNSkipLocalsInitAttributeClass, DNSkipLocalsInitAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSpecialNameAttributeClass = interface(DNAttributeClass)
  ['{8927F33E-A01D-5B37-AC46-1C6018CA650C}']
  { constructors } 

    {class} function init: DNSpecialNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SpecialNameAttribute')]
  DNSpecialNameAttribute = interface(DNAttribute)
  ['{B9085FBC-291E-3DCE-BF2F-1ACC82AB63D4}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSpecialNameAttribute = class(TDNGenericImport<DNSpecialNameAttributeClass, DNSpecialNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStateMachineAttributeClass = interface(DNAttributeClass)
  ['{F4580A72-FA51-5915-B726-B9EAFE3A307A}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StateMachineAttribute')]
  DNStateMachineAttribute = interface(DNAttribute)
  ['{BF01B50C-A4B5-3F80-8B0E-71296628D240}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStateMachineAttribute = class(TDNGenericImport<DNStateMachineAttributeClass, DNStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncIteratorStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{9C0BFBBC-5341-5EAD-A110-B470ED7C45DB}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNAsyncIteratorStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute')]
  DNAsyncIteratorStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{CE74DB51-9D84-38B3-B659-824C870597CC}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncIteratorStateMachineAttribute = class(TDNGenericImport<DNAsyncIteratorStateMachineAttributeClass, DNAsyncIteratorStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{4A04E616-F0F4-53A5-9134-297E472B7D8B}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNAsyncStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncStateMachineAttribute')]
  DNAsyncStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{5D6F560D-433A-353B-8AC7-8D544C7978D6}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncStateMachineAttribute = class(TDNGenericImport<DNAsyncStateMachineAttributeClass, DNAsyncStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIteratorStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{2D6063C2-501A-5E28-BF2D-765FB412EEBA}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNIteratorStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IteratorStateMachineAttribute')]
  DNIteratorStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{A400E645-00F8-3781-B7A7-0195182CB0E2}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIteratorStateMachineAttribute = class(TDNGenericImport<DNIteratorStateMachineAttributeClass, DNIteratorStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStringFreezingAttributeClass = interface(DNAttributeClass)
  ['{AF6B76FB-9A68-50CF-975C-D69A083D24B9}']
  { constructors } 

    {class} function init: DNStringFreezingAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StringFreezingAttribute')]
  DNStringFreezingAttribute = interface(DNAttribute)
  ['{C46F8A2C-B097-3E43-B083-F794281B779B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNStringFreezingAttribute = class(TDNGenericImport<DNStringFreezingAttributeClass, DNStringFreezingAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSuppressIldasmAttributeClass = interface(DNAttributeClass)
  ['{DD79DD33-94F0-533C-B0D6-5AF030F592E9}']
  { constructors } 

    {class} function init: DNSuppressIldasmAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SuppressIldasmAttribute')]
  DNSuppressIldasmAttribute = interface(DNAttribute)
  ['{B7FE8819-E67D-3040-ACBC-2775EA01E229}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressIldasmAttribute = class(TDNGenericImport<DNSuppressIldasmAttributeClass, DNSuppressIldasmAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTupleElementNamesAttributeClass = interface(DNAttributeClass)
  ['{2496B267-BABD-563C-A9BF-BE253B3978E4}']
  { constructors } 

    {class} function init(transformNames: TArray<string>): DNTupleElementNamesAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TupleElementNamesAttribute')]
  DNTupleElementNamesAttribute = interface(DNAttribute)
  ['{9C4EDEB9-887F-340C-A5D3-604DBCA33C6C}']
  { getters & setters } 

    function get_TransformNames: DNIList<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TransformNames: DNIList<string> read get_TransformNames;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTupleElementNamesAttribute = class(TDNGenericImport<DNTupleElementNamesAttributeClass, DNTupleElementNamesAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedFromAttributeClass = interface(DNAttributeClass)
  ['{76CDBB7D-1FD4-5977-A699-22929BA030F9}']
  { constructors } 

    {class} function init(assemblyFullName: string): DNTypeForwardedFromAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedFromAttribute')]
  DNTypeForwardedFromAttribute = interface(DNAttribute)
  ['{DE4E5BF4-5152-3409-A139-C4A023478331}']
  { getters & setters } 

    function get_AssemblyFullName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AssemblyFullName: string read get_AssemblyFullName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedFromAttribute = class(TDNGenericImport<DNTypeForwardedFromAttributeClass, DNTypeForwardedFromAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedToAttributeClass = interface(DNAttributeClass)
  ['{1C168AB1-3654-5963-B9CB-1145A26A62A0}']
  { constructors } 

    {class} function init(destination: DNType): DNTypeForwardedToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedToAttribute')]
  DNTypeForwardedToAttribute = interface(DNAttribute)
  ['{97D59C77-4F38-3668-AFE1-C79EEA492D88}']
  { getters & setters } 

    function get_Destination: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Destination: DNType read get_Destination;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedToAttribute = class(TDNGenericImport<DNTypeForwardedToAttributeClass, DNTypeForwardedToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNUnsafeValueTypeAttributeClass = interface(DNAttributeClass)
  ['{C9668DB5-E4F6-5630-BC89-5DBDA73ACD0D}']
  { constructors } 

    {class} function init: DNUnsafeValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.UnsafeValueTypeAttribute')]
  DNUnsafeValueTypeAttribute = interface(DNAttribute)
  ['{98E3EF37-4CD0-3419-89FE-74527E7943CE}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnsafeValueTypeAttribute = class(TDNGenericImport<DNUnsafeValueTypeAttributeClass, DNUnsafeValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNPrePrepareMethodAttributeClass = interface(DNAttributeClass)
  ['{45B9B50D-52A0-59C3-A827-A88409D2EB5A}']
  { constructors } 

    {class} function init: DNPrePrepareMethodAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute')]
  DNPrePrepareMethodAttribute = interface(DNAttribute)
  ['{891D61CB-DA3F-3488-87A8-F87B07820DE8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPrePrepareMethodAttribute = class(TDNGenericImport<DNPrePrepareMethodAttributeClass, DNPrePrepareMethodAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNReliabilityContractAttributeClass = interface(DNAttributeClass)
  ['{B397AEAB-7203-5FF5-B3D1-EA84FE6F7D8B}']
  { constructors } 

    {class} function init(consistencyGuarantee: DNConsistency; cer: DNCer): DNReliabilityContractAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.ReliabilityContractAttribute')]
  DNReliabilityContractAttribute = interface(DNAttribute)
  ['{4DFFCE84-DD4B-3E88-B5DD-F80EF7CAA9D0}']
  { getters & setters } 

    function get_ConsistencyGuarantee: DNConsistency;
    function get_Cer: DNCer;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ConsistencyGuarantee: DNConsistency read get_ConsistencyGuarantee;
    property Cer: DNCer read get_Cer;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReliabilityContractAttribute = class(TDNGenericImport<DNReliabilityContractAttributeClass, DNReliabilityContractAttribute>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNHandleProcessCorruptedStateExceptionsAttributeClass = interface(DNAttributeClass)
  ['{862B986F-0647-53A0-AED5-D9C48DB2ADB0}']
  { constructors } 

    {class} function init: DNHandleProcessCorruptedStateExceptionsAttribute;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute')]
  DNHandleProcessCorruptedStateExceptionsAttribute = interface(DNAttribute)
  ['{A59DEC20-A0CC-3641-94B7-EB6192215F47}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHandleProcessCorruptedStateExceptionsAttribute = class(TDNGenericImport<DNHandleProcessCorruptedStateExceptionsAttributeClass, DNHandleProcessCorruptedStateExceptionsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAllowReversePInvokeCallsAttributeClass = interface(DNAttributeClass)
  ['{F91DFD93-C6EF-52C9-8C2F-7E420C461106}']
  { constructors } 

    {class} function init: DNAllowReversePInvokeCallsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute')]
  DNAllowReversePInvokeCallsAttribute = interface(DNAttribute)
  ['{742C6CA0-5A39-37C3-9001-83283F545DEB}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowReversePInvokeCallsAttribute = class(TDNGenericImport<DNAllowReversePInvokeCallsAttributeClass, DNAllowReversePInvokeCallsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBestFitMappingAttributeClass = interface(DNAttributeClass)
  ['{C8A2C672-D9AD-5DFC-9B32-0B0B24B383C4}']
  { constructors } 

    {class} function init(BestFitMapping: Boolean): DNBestFitMappingAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.BestFitMappingAttribute')]
  DNBestFitMappingAttribute = interface(DNAttribute)
  ['{B391D9BF-723D-3FDA-B48D-D36E70F3EE0D}']
  { getters & setters } 

    function get_BestFitMapping: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property BestFitMapping: Boolean read get_BestFitMapping;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNBestFitMappingAttribute = class(TDNGenericImport<DNBestFitMappingAttributeClass, DNBestFitMappingAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNClassInterfaceAttributeClass = interface(DNAttributeClass)
  ['{B6485884-A75B-52AC-86D2-7A35E2A4F3EF}']
  { constructors } 

    {class} function init(classInterfaceType: DNClassInterfaceType): DNClassInterfaceAttribute; overload;
    {class} function init(classInterfaceType: Int16): DNClassInterfaceAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceAttribute')]
  DNClassInterfaceAttribute = interface(DNAttribute)
  ['{B056B3AD-8028-3586-BF76-27789186A248}']
  { getters & setters } 

    function get_Value: DNClassInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNClassInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNClassInterfaceAttribute = class(TDNGenericImport<DNClassInterfaceAttributeClass, DNClassInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCoClassAttributeClass = interface(DNAttributeClass)
  ['{F40FF20A-53D1-5AF5-B17A-8EA5A35D554D}']
  { constructors } 

    {class} function init(coClass: DNType): DNCoClassAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.CoClassAttribute')]
  DNCoClassAttribute = interface(DNAttribute)
  ['{16D74982-4BFB-3FA3-91C2-7EC01229BF75}']
  { getters & setters } 

    function get_CoClass: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CoClass: DNType read get_CoClass;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCoClassAttribute = class(TDNGenericImport<DNCoClassAttributeClass, DNCoClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{6F5ADD90-C69A-5398-8847-2321D0CA5000}']
  { constructors } 

    {class} function init(defaultInterface: DNType): DNComDefaultInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComDefaultInterfaceAttribute')]
  DNComDefaultInterfaceAttribute = interface(DNAttribute)
  ['{9D6EE753-E54F-3BB0-900D-78A601E083AF}']
  { getters & setters } 

    function get_Value: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComDefaultInterfaceAttribute = class(TDNGenericImport<DNComDefaultInterfaceAttributeClass, DNComDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventInterfaceAttributeClass = interface(DNAttributeClass)
  ['{B4E0E026-DFBB-5DCE-8032-0BFC17AF8975}']
  { constructors } 

    {class} function init(SourceInterface: DNType; EventProvider: DNType): DNComEventInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComEventInterfaceAttribute')]
  DNComEventInterfaceAttribute = interface(DNAttribute)
  ['{382E7261-1EDE-3048-8CA7-621302F63780}']
  { getters & setters } 

    function get_SourceInterface: DNType;
    function get_EventProvider: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SourceInterface: DNType read get_SourceInterface;
    property EventProvider: DNType read get_EventProvider;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComEventInterfaceAttribute = class(TDNGenericImport<DNComEventInterfaceAttributeClass, DNComEventInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComImportAttributeClass = interface(DNAttributeClass)
  ['{3D2973E1-5873-5EE1-8119-032DB87B9616}']
  { constructors } 

    {class} function init: DNComImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComImportAttribute')]
  DNComImportAttribute = interface(DNAttribute)
  ['{1D68D60D-25C5-3388-912F-7E4C1B8A89B8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComImportAttribute = class(TDNGenericImport<DNComImportAttributeClass, DNComImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComSourceInterfacesAttributeClass = interface(DNAttributeClass)
  ['{23D5C22F-4DBC-5AB0-B033-AE59EBA234AF}']
  { constructors } 

    {class} function init(sourceInterfaces: string): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType; sourceInterface4: DNType): DNComSourceInterfacesAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComSourceInterfacesAttribute')]
  DNComSourceInterfacesAttribute = interface(DNAttribute)
  ['{4EE56113-549D-33A6-9EFA-F479A232364F}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComSourceInterfacesAttribute = class(TDNGenericImport<DNComSourceInterfacesAttributeClass, DNComSourceInterfacesAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComVisibleAttributeClass = interface(DNAttributeClass)
  ['{4EBCFF98-FCBD-5A27-B173-8A9AF34315AB}']
  { constructors } 

    {class} function init(visibility: Boolean): DNComVisibleAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComVisibleAttribute')]
  DNComVisibleAttribute = interface(DNAttribute)
  ['{72A62851-61DF-3F2E-A552-E6E0A0B01C32}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComVisibleAttribute = class(TDNGenericImport<DNComVisibleAttributeClass, DNComVisibleAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultCharSetAttributeClass = interface(DNAttributeClass)
  ['{29A17D47-3F35-56E9-9BD7-076820BC470C}']
  { constructors } 

    {class} function init(charSet: DNCharSet): DNDefaultCharSetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultCharSetAttribute')]
  DNDefaultCharSetAttribute = interface(DNAttribute)
  ['{80DFA030-8D71-31C9-B17B-5DE08A3C8AC5}']
  { getters & setters } 

    function get_CharSet: DNCharSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CharSet: DNCharSet read get_CharSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultCharSetAttribute = class(TDNGenericImport<DNDefaultCharSetAttributeClass, DNDefaultCharSetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultDllImportSearchPathsAttributeClass = interface(DNAttributeClass)
  ['{26EF4C1C-B9BD-5A44-9862-2979343A05F3}']
  { constructors } 

    {class} function init(paths: DNDllImportSearchPath): DNDefaultDllImportSearchPathsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute')]
  DNDefaultDllImportSearchPathsAttribute = interface(DNAttribute)
  ['{D0820066-504B-3642-8E5F-FFA03EE81B89}']
  { getters & setters } 

    function get_Paths: DNDllImportSearchPath;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Paths: DNDllImportSearchPath read get_Paths;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDllImportSearchPathsAttribute = class(TDNGenericImport<DNDefaultDllImportSearchPathsAttributeClass, DNDefaultDllImportSearchPathsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultParameterValueAttributeClass = interface(DNAttributeClass)
  ['{C82DA597-1932-5C05-B7BC-953E36714AE1}']
  { constructors } 

    {class} function init(value: DNObject): DNDefaultParameterValueAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultParameterValueAttribute')]
  DNDefaultParameterValueAttribute = interface(DNAttribute)
  ['{CEF26C16-7D5A-33F2-AC85-320EDB692DC9}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultParameterValueAttribute = class(TDNGenericImport<DNDefaultParameterValueAttributeClass, DNDefaultParameterValueAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispIdAttributeClass = interface(DNAttributeClass)
  ['{049B7FA6-BA35-52F3-AB2C-F6024F523822}']
  { constructors } 

    {class} function init(&dispId: Int32): DNDispIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispIdAttribute')]
  DNDispIdAttribute = interface(DNAttribute)
  ['{7314BE82-3CC5-36C3-8BA9-1F8A9CBE6467}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDispIdAttribute = class(TDNGenericImport<DNDispIdAttributeClass, DNDispIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDllImportAttributeClass = interface(DNAttributeClass)
  ['{5A3DB3D7-74C0-5691-8194-AF2F5334BC33}']
  { constructors } 

    {class} function init(dllName: string): DNDllImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DllImportAttribute')]
  DNDllImportAttribute = interface(DNAttribute)
  ['{58302C67-1307-375F-8B1C-A3E22A21B554}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDllImportAttribute = class(TDNGenericImport<DNDllImportAttributeClass, DNDllImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDynamicInterfaceCastableImplementationAttributeClass = interface(DNAttributeClass)
  ['{6A158658-6BC9-546B-833C-64C83220B255}']
  { constructors } 

    {class} function init: DNDynamicInterfaceCastableImplementationAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute')]
  DNDynamicInterfaceCastableImplementationAttribute = interface(DNAttribute)
  ['{A833876E-D867-3023-9D3A-D8CB3527EFE9}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDynamicInterfaceCastableImplementationAttribute = class(TDNGenericImport<DNDynamicInterfaceCastableImplementationAttributeClass, DNDynamicInterfaceCastableImplementationAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNFieldOffsetAttributeClass = interface(DNAttributeClass)
  ['{4D2A30CD-7619-5EA9-AA2F-27D231BEC16E}']
  { constructors } 

    {class} function init(offset: Int32): DNFieldOffsetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.FieldOffsetAttribute')]
  DNFieldOffsetAttribute = interface(DNAttribute)
  ['{C4E00426-AE83-344B-9CEE-97B9FA48DFA5}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFieldOffsetAttribute = class(TDNGenericImport<DNFieldOffsetAttributeClass, DNFieldOffsetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGuidAttributeClass = interface(DNAttributeClass)
  ['{1B0985DA-2F2B-5145-B9A8-F735C5580EAF}']
  { constructors } 

    {class} function init(guid: string): DNGuidAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.GuidAttribute')]
  DNGuidAttribute = interface(DNAttribute)
  ['{112FA5A7-EBA9-38A1-98A4-AA3C414957AB}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGuidAttribute = class(TDNGenericImport<DNGuidAttributeClass, DNGuidAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInAttributeClass = interface(DNAttributeClass)
  ['{F2704AFA-25E2-5BA9-AA88-29CD7DAA9982}']
  { constructors } 

    {class} function init: DNInAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.InAttribute')]
  DNInAttribute = interface(DNAttribute)
  ['{008C54E4-1925-3A9F-B3E0-B7E4E4A1C7DC}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNInAttribute = class(TDNGenericImport<DNInAttributeClass, DNInAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInterfaceTypeAttributeClass = interface(DNAttributeClass)
  ['{08D903E5-EAB8-5556-9827-C488AC073373}']
  { constructors } 

    {class} function init(interfaceType: DNComInterfaceType): DNInterfaceTypeAttribute; overload;
    {class} function init(interfaceType: Int16): DNInterfaceTypeAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InterfaceTypeAttribute')]
  DNInterfaceTypeAttribute = interface(DNAttribute)
  ['{4C63E7C9-7127-311E-B34B-FA49E891EFA6}']
  { getters & setters } 

    function get_Value: DNComInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNComInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceTypeAttribute = class(TDNGenericImport<DNInterfaceTypeAttributeClass, DNInterfaceTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNLCIDConversionAttributeClass = interface(DNAttributeClass)
  ['{6A2BCB7B-85AD-556F-B127-95B1E02A8C80}']
  { constructors } 

    {class} function init(lcid: Int32): DNLCIDConversionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.LCIDConversionAttribute')]
  DNLCIDConversionAttribute = interface(DNAttribute)
  ['{243C7D5E-158C-3243-A511-8734B7A7E3BF}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLCIDConversionAttribute = class(TDNGenericImport<DNLCIDConversionAttributeClass, DNLCIDConversionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalAsAttributeClass = interface(DNAttributeClass)
  ['{8C69DDBA-E869-5413-A719-A925BF1F8E1F}']
  { constructors } 

    {class} function init(unmanagedType: DNUnmanagedType): DNMarshalAsAttribute; overload;
    {class} function init(unmanagedType: Int16): DNMarshalAsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalAsAttribute')]
  DNMarshalAsAttribute = interface(DNAttribute)
  ['{D1612BEE-0668-3491-A4A4-98CE2BF3C4FB}']
  { getters & setters } 

    function get_Value: DNUnmanagedType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNUnmanagedType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMarshalAsAttribute = class(TDNGenericImport<DNMarshalAsAttributeClass, DNMarshalAsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOptionalAttributeClass = interface(DNAttributeClass)
  ['{17CC6FAA-0125-58C4-BC33-01A108388683}']
  { constructors } 

    {class} function init: DNOptionalAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OptionalAttribute')]
  DNOptionalAttribute = interface(DNAttribute)
  ['{5E2E898B-DA50-3F0F-A923-A939062831E6}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalAttribute = class(TDNGenericImport<DNOptionalAttributeClass, DNOptionalAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOutAttributeClass = interface(DNAttributeClass)
  ['{B302BF1C-CBCE-5F9C-9DF0-78CFE778E798}']
  { constructors } 

    {class} function init: DNOutAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OutAttribute')]
  DNOutAttribute = interface(DNAttribute)
  ['{F411215B-5B7C-3502-A635-5B3284B7CA60}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOutAttribute = class(TDNGenericImport<DNOutAttributeClass, DNOutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPreserveSigAttributeClass = interface(DNAttributeClass)
  ['{BC4AB821-283C-5B0A-ABD7-593763C348EC}']
  { constructors } 

    {class} function init: DNPreserveSigAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.PreserveSigAttribute')]
  DNPreserveSigAttribute = interface(DNAttribute)
  ['{55571B6B-2155-36F3-917B-C0F3E8F63A7F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPreserveSigAttribute = class(TDNGenericImport<DNPreserveSigAttributeClass, DNPreserveSigAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNProgIdAttributeClass = interface(DNAttributeClass)
  ['{30B7C9A4-E3A8-5FFA-8696-886C8C426FC3}']
  { constructors } 

    {class} function init(progId: string): DNProgIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ProgIdAttribute')]
  DNProgIdAttribute = interface(DNAttribute)
  ['{ADB83F43-C26D-3F62-AD5A-44A559816080}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNProgIdAttribute = class(TDNGenericImport<DNProgIdAttributeClass, DNProgIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStructLayoutAttributeClass = interface(DNAttributeClass)
  ['{7F3A0F47-BA4D-5284-B9C3-91A8D0468CA9}']
  { constructors } 

    {class} function init(layoutKind: DNLayoutKind): DNStructLayoutAttribute; overload;
    {class} function init(layoutKind: Int16): DNStructLayoutAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.StructLayoutAttribute')]
  DNStructLayoutAttribute = interface(DNAttribute)
  ['{3BDAB7DA-95D9-31AB-B713-4D9D74B610E6}']
  { getters & setters } 

    function get_Value: DNLayoutKind;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Value: DNLayoutKind read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStructLayoutAttribute = class(TDNGenericImport<DNStructLayoutAttributeClass, DNStructLayoutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSuppressGCTransitionAttributeClass = interface(DNAttributeClass)
  ['{44252712-6277-5D68-A7C4-F1FA1E83E1FE}']
  { constructors } 

    {class} function init: DNSuppressGCTransitionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.SuppressGCTransitionAttribute')]
  DNSuppressGCTransitionAttribute = interface(DNAttribute)
  ['{F96E5AD9-1568-35B1-8313-81226FF243FF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressGCTransitionAttribute = class(TDNGenericImport<DNSuppressGCTransitionAttributeClass, DNSuppressGCTransitionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeIdentifierAttributeClass = interface(DNAttributeClass)
  ['{B838FEF5-3F8F-57D9-8274-204166BAF41B}']
  { constructors } 

    {class} function init: DNTypeIdentifierAttribute; overload;
    {class} function init(scope: string; identifier: string): DNTypeIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeIdentifierAttribute')]
  DNTypeIdentifierAttribute = interface(DNAttribute)
  ['{7BF1BED2-EA04-3D5D-A54D-C46EE29A2BDE}']
  { getters & setters } 

    function get_Scope: string;
    function get_Identifier: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Scope: string read get_Scope;
    property Identifier: string read get_Identifier;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeIdentifierAttribute = class(TDNGenericImport<DNTypeIdentifierAttributeClass, DNTypeIdentifierAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnmanagedCallersOnlyAttributeClass = interface(DNAttributeClass)
  ['{7B8052C1-D2A4-56A9-90A8-0F672ACDECA0}']
  { constructors } 

    {class} function init: DNUnmanagedCallersOnlyAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute')]
  DNUnmanagedCallersOnlyAttribute = interface(DNAttribute)
  ['{EB31D3D4-25BD-35E3-940A-459A8239683B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnmanagedCallersOnlyAttribute = class(TDNGenericImport<DNUnmanagedCallersOnlyAttributeClass, DNUnmanagedCallersOnlyAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnmanagedFunctionPointerAttributeClass = interface(DNAttributeClass)
  ['{28F3FD3A-3CD9-5C46-AAC8-A71141C98694}']
  { constructors } 

    {class} function init: DNUnmanagedFunctionPointerAttribute; overload;
    {class} function init(callingConvention: DNCallingConvention): DNUnmanagedFunctionPointerAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute')]
  DNUnmanagedFunctionPointerAttribute = interface(DNAttribute)
  ['{813E03B4-1265-3197-B85A-D927B37A4B52}']
  { getters & setters } 

    function get_CallingConvention: DNCallingConvention;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CallingConvention: DNCallingConvention read get_CallingConvention;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnmanagedFunctionPointerAttribute = class(TDNGenericImport<DNUnmanagedFunctionPointerAttributeClass, DNUnmanagedFunctionPointerAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializedAttributeClass = interface(DNAttributeClass)
  ['{1D105EBE-4D4E-581A-BD75-2E34DE42741E}']
  { constructors } 

    {class} function init: DNOnDeserializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializedAttribute')]
  DNOnDeserializedAttribute = interface(DNAttribute)
  ['{AD37A693-1599-3FF9-B3E6-6E6F0EA456F0}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializedAttribute = class(TDNGenericImport<DNOnDeserializedAttributeClass, DNOnDeserializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializingAttributeClass = interface(DNAttributeClass)
  ['{7B81F2F0-D3DF-5591-B459-5F79E70247B4}']
  { constructors } 

    {class} function init: DNOnDeserializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializingAttribute')]
  DNOnDeserializingAttribute = interface(DNAttribute)
  ['{A0CBF916-A09A-3392-8A46-FB75D2D8A2E5}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializingAttribute = class(TDNGenericImport<DNOnDeserializingAttributeClass, DNOnDeserializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializedAttributeClass = interface(DNAttributeClass)
  ['{B1AB6316-9A5A-5A3E-A361-8AF12EECC357}']
  { constructors } 

    {class} function init: DNOnSerializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializedAttribute')]
  DNOnSerializedAttribute = interface(DNAttribute)
  ['{2952654B-E1FA-3FDD-9C8B-5861DBA56973}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializedAttribute = class(TDNGenericImport<DNOnSerializedAttributeClass, DNOnSerializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializingAttributeClass = interface(DNAttributeClass)
  ['{BFAF7E82-0352-57A1-A902-F2893F279B32}']
  { constructors } 

    {class} function init: DNOnSerializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializingAttribute')]
  DNOnSerializingAttribute = interface(DNAttribute)
  ['{577E91A9-1E00-3D91-A6F5-370B3CAD6C46}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializingAttribute = class(TDNGenericImport<DNOnSerializingAttributeClass, DNOnSerializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOptionalFieldAttributeClass = interface(DNAttributeClass)
  ['{E5EB02E7-B99A-55C9-B11B-2790FC8F5BBF}']
  { constructors } 

    {class} function init: DNOptionalFieldAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OptionalFieldAttribute')]
  DNOptionalFieldAttribute = interface(DNAttribute)
  ['{B16C96C8-A11A-3EC8-BF09-FFAB3499F5C2}']
  { getters & setters } 

    function get_VersionAdded: Int32;
    procedure set_VersionAdded(value: Int32);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property VersionAdded: Int32 read get_VersionAdded write set_VersionAdded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalFieldAttribute = class(TDNGenericImport<DNOptionalFieldAttributeClass, DNOptionalFieldAttribute>) end;

  //-------------namespace: System.Runtime----------------
  DNTargetedPatchingOptOutAttributeClass = interface(DNAttributeClass)
  ['{9E766528-6E70-55E0-AB1C-443C1A073F3F}']
  { constructors } 

    {class} function init(reason: string): DNTargetedPatchingOptOutAttribute;

  end;

  [DNTypeName('System.Runtime.TargetedPatchingOptOutAttribute')]
  DNTargetedPatchingOptOutAttribute = interface(DNAttribute)
  ['{2AAD3BD9-38EB-3BB7-8312-98A4FBB85086}']
  { getters & setters } 

    function get_Reason: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Reason: string read get_Reason;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetedPatchingOptOutAttribute = class(TDNGenericImport<DNTargetedPatchingOptOutAttributeClass, DNTargetedPatchingOptOutAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNComponentGuaranteesAttributeClass = interface(DNAttributeClass)
  ['{F734F2BD-2E56-57E7-9AF2-B76E2F0F5721}']
  { constructors } 

    {class} function init(guarantees: DNComponentGuaranteesOptions): DNComponentGuaranteesAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesAttribute')]
  DNComponentGuaranteesAttribute = interface(DNAttribute)
  ['{6583586B-9DA1-317A-BA15-70CAA9CCE177}']
  { getters & setters } 

    function get_Guarantees: DNComponentGuaranteesOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Guarantees: DNComponentGuaranteesOptions read get_Guarantees;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComponentGuaranteesAttribute = class(TDNGenericImport<DNComponentGuaranteesAttributeClass, DNComponentGuaranteesAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNOSPlatformAttributeClass = interface(DNAttributeClass)
  ['{E476155F-E3BD-52F6-96A5-1F11BF4DCB12}']
  end;

  [DNTypeName('System.Runtime.Versioning.OSPlatformAttribute')]
  DNOSPlatformAttribute = interface(DNAttribute)
  ['{5E245188-22A1-393C-B1D1-2FE9C3DC39B9}']
  { getters & setters } 

    function get_PlatformName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PlatformName: string read get_PlatformName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNOSPlatformAttribute = class(TDNGenericImport<DNOSPlatformAttributeClass, DNOSPlatformAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNSupportedOSPlatformAttributeClass = interface(DNOSPlatformAttributeClass)
  ['{2F0AD28A-6565-50F5-849A-66CD4CE4663D}']
  { constructors } 

    {class} function init(platformName: string): DNSupportedOSPlatformAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.SupportedOSPlatformAttribute')]
  DNSupportedOSPlatformAttribute = interface(DNOSPlatformAttribute)
  ['{E5E90929-5DBB-301D-83E7-EAD90BED3DAE}']
  { getters & setters } 

    function get_PlatformName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PlatformName: string read get_PlatformName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSupportedOSPlatformAttribute = class(TDNGenericImport<DNSupportedOSPlatformAttributeClass, DNSupportedOSPlatformAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNTargetPlatformAttributeClass = interface(DNOSPlatformAttributeClass)
  ['{C17EDD21-5ADD-5D08-945A-C17FCAD87497}']
  { constructors } 

    {class} function init(platformName: string): DNTargetPlatformAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.TargetPlatformAttribute')]
  DNTargetPlatformAttribute = interface(DNOSPlatformAttribute)
  ['{EB053576-A2E6-3387-B219-D577E9312C86}']
  { getters & setters } 

    function get_PlatformName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PlatformName: string read get_PlatformName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetPlatformAttribute = class(TDNGenericImport<DNTargetPlatformAttributeClass, DNTargetPlatformAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNUnsupportedOSPlatformAttributeClass = interface(DNOSPlatformAttributeClass)
  ['{96F9E653-0374-51FD-BC4F-F68B411A7461}']
  { constructors } 

    {class} function init(platformName: string): DNUnsupportedOSPlatformAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.UnsupportedOSPlatformAttribute')]
  DNUnsupportedOSPlatformAttribute = interface(DNOSPlatformAttribute)
  ['{81B23FFC-6CFC-37BD-BD26-B76995FA0D0D}']
  { getters & setters } 

    function get_PlatformName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PlatformName: string read get_PlatformName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnsupportedOSPlatformAttribute = class(TDNGenericImport<DNUnsupportedOSPlatformAttributeClass, DNUnsupportedOSPlatformAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceConsumptionAttributeClass = interface(DNAttributeClass)
  ['{5EA393E2-D1C7-5844-ADEC-BA294429836A}']
  { constructors } 

    {class} function init(resourceScope: DNResourceScope): DNResourceConsumptionAttribute; overload;
    {class} function init(resourceScope: DNResourceScope; consumptionScope: DNResourceScope): DNResourceConsumptionAttribute; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceConsumptionAttribute')]
  DNResourceConsumptionAttribute = interface(DNAttribute)
  ['{DF607599-0ECA-31D2-8CBF-88D0157498BA}']
  { getters & setters } 

    function get_ResourceScope: DNResourceScope;
    function get_ConsumptionScope: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ResourceScope: DNResourceScope read get_ResourceScope;
    property ConsumptionScope: DNResourceScope read get_ConsumptionScope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceConsumptionAttribute = class(TDNGenericImport<DNResourceConsumptionAttributeClass, DNResourceConsumptionAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceExposureAttributeClass = interface(DNAttributeClass)
  ['{2A105FF5-E957-58D1-BDCC-07C8081CB22F}']
  { constructors } 

    {class} function init(exposureLevel: DNResourceScope): DNResourceExposureAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceExposureAttribute')]
  DNResourceExposureAttribute = interface(DNAttribute)
  ['{EF9960E5-8C21-3323-AAED-30E29022CCFC}']
  { getters & setters } 

    function get_ResourceExposureLevel: DNResourceScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property ResourceExposureLevel: DNResourceScope read get_ResourceExposureLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNResourceExposureAttribute = class(TDNGenericImport<DNResourceExposureAttributeClass, DNResourceExposureAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNTargetFrameworkAttributeClass = interface(DNAttributeClass)
  ['{D7D3CCCD-9347-5E50-B5E2-F447B4410853}']
  { constructors } 

    {class} function init(frameworkName: string): DNTargetFrameworkAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.TargetFrameworkAttribute')]
  DNTargetFrameworkAttribute = interface(DNAttribute)
  ['{C12CF4F1-719C-3CB6-BF11-90FE728D42B3}']
  { getters & setters } 

    function get_FrameworkName: string;
    function get_FrameworkDisplayName: string;
    procedure set_FrameworkDisplayName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FrameworkName: string read get_FrameworkName;
    property FrameworkDisplayName: string read get_FrameworkDisplayName write set_FrameworkDisplayName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetFrameworkAttribute = class(TDNGenericImport<DNTargetFrameworkAttributeClass, DNTargetFrameworkAttribute>) end;

  //-------------namespace: System.Security----------------
  DNAllowPartiallyTrustedCallersAttributeClass = interface(DNAttributeClass)
  ['{FFE659E3-58C0-56D2-A38B-CF54D10BA7D8}']
  { constructors } 

    {class} function init: DNAllowPartiallyTrustedCallersAttribute;

  end;

  [DNTypeName('System.Security.AllowPartiallyTrustedCallersAttribute')]
  DNAllowPartiallyTrustedCallersAttribute = interface(DNAttribute)
  ['{14EDB5BA-960F-3033-ACB6-2A21BCDCD481}']
  { getters & setters } 

    function get_PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel;
    procedure set_PartialTrustVisibilityLevel(value: DNPartialTrustVisibilityLevel);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel read get_PartialTrustVisibilityLevel write set_PartialTrustVisibilityLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowPartiallyTrustedCallersAttribute = class(TDNGenericImport<DNAllowPartiallyTrustedCallersAttributeClass, DNAllowPartiallyTrustedCallersAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityAttributeClass = interface(DNAttributeClass)
  ['{FA001C1B-746A-5687-9314-BFB5531BD755}']
  end;

  [DNTypeName('System.Security.Permissions.SecurityAttribute')]
  DNSecurityAttribute = interface(DNAttribute)
  ['{E2D16AFD-BD17-310F-BD3B-4875B6AED199}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityAttribute = class(TDNGenericImport<DNSecurityAttributeClass, DNSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNCodeAccessSecurityAttributeClass = interface(DNSecurityAttributeClass)
  ['{E2E507CC-1F9E-5BE9-A5AD-41EFAD79A1EC}']
  end;

  [DNTypeName('System.Security.Permissions.CodeAccessSecurityAttribute')]
  DNCodeAccessSecurityAttribute = interface(DNSecurityAttribute)
  ['{AF73C9C3-16F7-3773-A59C-9A0CFD1A4895}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCodeAccessSecurityAttribute = class(TDNGenericImport<DNCodeAccessSecurityAttributeClass, DNCodeAccessSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{7B93A1E3-9F0D-5B9C-B1C9-20EE6675C310}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNSecurityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.SecurityPermissionAttribute')]
  DNSecurityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{986F0069-F4C2-3540-930A-469C591DAFC0}']
  { getters & setters } 

    function get_Assertion: Boolean;
    procedure set_Assertion(value: Boolean);
    function get_BindingRedirects: Boolean;
    procedure set_BindingRedirects(value: Boolean);
    function get_ControlAppDomain: Boolean;
    procedure set_ControlAppDomain(value: Boolean);
    function get_ControlDomainPolicy: Boolean;
    procedure set_ControlDomainPolicy(value: Boolean);
    function get_ControlEvidence: Boolean;
    procedure set_ControlEvidence(value: Boolean);
    function get_ControlPolicy: Boolean;
    procedure set_ControlPolicy(value: Boolean);
    function get_ControlPrincipal: Boolean;
    procedure set_ControlPrincipal(value: Boolean);
    function get_ControlThread: Boolean;
    procedure set_ControlThread(value: Boolean);
    function get_Execution: Boolean;
    procedure set_Execution(value: Boolean);
    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);
    function get_Infrastructure: Boolean;
    procedure set_Infrastructure(value: Boolean);
    function get_RemotingConfiguration: Boolean;
    procedure set_RemotingConfiguration(value: Boolean);
    function get_SerializationFormatter: Boolean;
    procedure set_SerializationFormatter(value: Boolean);
    function get_SkipVerification: Boolean;
    procedure set_SkipVerification(value: Boolean);
    function get_UnmanagedCode: Boolean;
    procedure set_UnmanagedCode(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Assertion: Boolean read get_Assertion write set_Assertion;
    property BindingRedirects: Boolean read get_BindingRedirects write set_BindingRedirects;
    property ControlAppDomain: Boolean read get_ControlAppDomain write set_ControlAppDomain;
    property ControlDomainPolicy: Boolean read get_ControlDomainPolicy write set_ControlDomainPolicy;
    property ControlEvidence: Boolean read get_ControlEvidence write set_ControlEvidence;
    property ControlPolicy: Boolean read get_ControlPolicy write set_ControlPolicy;
    property ControlPrincipal: Boolean read get_ControlPrincipal write set_ControlPrincipal;
    property ControlThread: Boolean read get_ControlThread write set_ControlThread;
    property Execution: Boolean read get_Execution write set_Execution;
    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
    property Infrastructure: Boolean read get_Infrastructure write set_Infrastructure;
    property RemotingConfiguration: Boolean read get_RemotingConfiguration write set_RemotingConfiguration;
    property SerializationFormatter: Boolean read get_SerializationFormatter write set_SerializationFormatter;
    property SkipVerification: Boolean read get_SkipVerification write set_SkipVerification;
    property UnmanagedCode: Boolean read get_UnmanagedCode write set_UnmanagedCode;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityPermissionAttribute = class(TDNGenericImport<DNSecurityPermissionAttributeClass, DNSecurityPermissionAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityCriticalAttributeClass = interface(DNAttributeClass)
  ['{9249D39B-38B7-5197-9BEF-D52BB4525355}']
  { constructors } 

    {class} function init: DNSecurityCriticalAttribute; overload;
    {class} function init(scope: DNSecurityCriticalScope): DNSecurityCriticalAttribute; overload;

  end;

  [DNTypeName('System.Security.SecurityCriticalAttribute')]
  DNSecurityCriticalAttribute = interface(DNAttribute)
  ['{BEEE910B-9A61-3C15-958F-E73D19BA4549}']
  { getters & setters } 

    function get_Scope: DNSecurityCriticalScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Scope: DNSecurityCriticalScope read get_Scope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityCriticalAttribute = class(TDNGenericImport<DNSecurityCriticalAttributeClass, DNSecurityCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityRulesAttributeClass = interface(DNAttributeClass)
  ['{EB632FD4-DD6C-5D1E-8BC3-06ED51BCA90F}']
  { constructors } 

    {class} function init(ruleSet: DNSecurityRuleSet): DNSecurityRulesAttribute;

  end;

  [DNTypeName('System.Security.SecurityRulesAttribute')]
  DNSecurityRulesAttribute = interface(DNAttribute)
  ['{3E04C354-CDC3-31AD-B37E-45024C099017}']
  { getters & setters } 

    function get_SkipVerificationInFullTrust: Boolean;
    procedure set_SkipVerificationInFullTrust(value: Boolean);
    function get_RuleSet: DNSecurityRuleSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property SkipVerificationInFullTrust: Boolean read get_SkipVerificationInFullTrust write set_SkipVerificationInFullTrust;
    property RuleSet: DNSecurityRuleSet read get_RuleSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityRulesAttribute = class(TDNGenericImport<DNSecurityRulesAttributeClass, DNSecurityRulesAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecuritySafeCriticalAttributeClass = interface(DNAttributeClass)
  ['{98E3E79A-5E18-5D48-B56B-4560D3BD324D}']
  { constructors } 

    {class} function init: DNSecuritySafeCriticalAttribute;

  end;

  [DNTypeName('System.Security.SecuritySafeCriticalAttribute')]
  DNSecuritySafeCriticalAttribute = interface(DNAttribute)
  ['{898AC4AA-BFF7-32C2-B972-906F73D41301}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecuritySafeCriticalAttribute = class(TDNGenericImport<DNSecuritySafeCriticalAttributeClass, DNSecuritySafeCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTransparentAttributeClass = interface(DNAttributeClass)
  ['{F8A1678F-3480-53AB-BFE8-DCB321F41BFA}']
  { constructors } 

    {class} function init: DNSecurityTransparentAttribute;

  end;

  [DNTypeName('System.Security.SecurityTransparentAttribute')]
  DNSecurityTransparentAttribute = interface(DNAttribute)
  ['{7E26D7BA-D6D5-3AED-9CBF-2CE5AF6CAE0D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTransparentAttribute = class(TDNGenericImport<DNSecurityTransparentAttributeClass, DNSecurityTransparentAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTreatAsSafeAttributeClass = interface(DNAttributeClass)
  ['{98A80B63-BD63-5FB5-94A4-D1AA816485F9}']
  { constructors } 

    {class} function init: DNSecurityTreatAsSafeAttribute;

  end;

  [DNTypeName('System.Security.SecurityTreatAsSafeAttribute')]
  DNSecurityTreatAsSafeAttribute = interface(DNAttribute)
  ['{949B586A-F227-33D2-B2EC-93B67464BD22}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTreatAsSafeAttribute = class(TDNGenericImport<DNSecurityTreatAsSafeAttributeClass, DNSecurityTreatAsSafeAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSuppressUnmanagedCodeSecurityAttributeClass = interface(DNAttributeClass)
  ['{EF450410-AA96-5E80-9CE7-85A85D4D9C71}']
  { constructors } 

    {class} function init: DNSuppressUnmanagedCodeSecurityAttribute;

  end;

  [DNTypeName('System.Security.SuppressUnmanagedCodeSecurityAttribute')]
  DNSuppressUnmanagedCodeSecurityAttribute = interface(DNAttribute)
  ['{9B81B12C-9601-384B-B9AC-876C907C9E4E}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressUnmanagedCodeSecurityAttribute = class(TDNGenericImport<DNSuppressUnmanagedCodeSecurityAttributeClass, DNSuppressUnmanagedCodeSecurityAttribute>) end;

  //-------------namespace: System.Security----------------
  DNUnverifiableCodeAttributeClass = interface(DNAttributeClass)
  ['{87DA7F6D-33B3-55FC-916D-D8E43211D096}']
  { constructors } 

    {class} function init: DNUnverifiableCodeAttribute;

  end;

  [DNTypeName('System.Security.UnverifiableCodeAttribute')]
  DNUnverifiableCodeAttribute = interface(DNAttribute)
  ['{F13F9364-4849-39AD-9CF0-40AC30F4D6E2}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnverifiableCodeAttribute = class(TDNGenericImport<DNUnverifiableCodeAttributeClass, DNUnverifiableCodeAttribute>) end;

  //-------------namespace: System----------------
  DNSerializableAttributeClass = interface(DNAttributeClass)
  ['{AA4C40AB-2AEA-5580-B1D8-5A31BD33FE75}']
  { constructors } 

    {class} function init: DNSerializableAttribute;

  end;

  [DNTypeName('System.SerializableAttribute')]
  DNSerializableAttribute = interface(DNAttribute)
  ['{751B3ADE-3F45-3E4D-9DA4-1D98ED8F5B91}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSerializableAttribute = class(TDNGenericImport<DNSerializableAttributeClass, DNSerializableAttribute>) end;

  //-------------namespace: System----------------
  DNSTAThreadAttributeClass = interface(DNAttributeClass)
  ['{0C8D91A8-A63F-582A-AECD-B69B91975A47}']
  { constructors } 

    {class} function init: DNSTAThreadAttribute;

  end;

  [DNTypeName('System.STAThreadAttribute')]
  DNSTAThreadAttribute = interface(DNAttribute)
  ['{FA72C426-0277-38D1-A3AE-7236A5F90532}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSTAThreadAttribute = class(TDNGenericImport<DNSTAThreadAttributeClass, DNSTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNThreadStaticAttributeClass = interface(DNAttributeClass)
  ['{D04C0485-A56A-55DB-9E90-5B7BD57EA921}']
  { constructors } 

    {class} function init: DNThreadStaticAttribute;

  end;

  [DNTypeName('System.ThreadStaticAttribute')]
  DNThreadStaticAttribute = interface(DNAttribute)
  ['{490A0C7E-1AE4-3D78-BB19-872E78AB1673}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNThreadStaticAttribute = class(TDNGenericImport<DNThreadStaticAttributeClass, DNThreadStaticAttribute>) end;

  //-------------namespace: System----------------
  DNBitConverterClass = interface(DNObjectClass)
  ['{527D1890-3D60-586A-8A4C-3A668E8B2284}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsLittleEndian: Boolean;

  { static fields } 

    {class} property IsLittleEndian: Boolean read __fakeFieldGet_IsLittleEndian;

  { static methods } 

    {class} function GetBytes(value: Boolean): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Boolean): Boolean; overload;
    {class} function GetBytes(value: Char): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Char): Boolean; overload;
    {class} function GetBytes(value: Int16): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int16): Boolean; overload;
    {class} function GetBytes(value: Int32): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int32): Boolean; overload;
    {class} function GetBytes(value: Int64): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int64): Boolean; overload;
    {class} function GetBytes(value: UInt16): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt16): Boolean; overload;
    {class} function GetBytes(value: UInt32): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt32): Boolean; overload;
    {class} function GetBytes(value: UInt64): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt64): Boolean; overload;
    {class} function GetBytes(value: Single): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Single): Boolean; overload;
    {class} function GetBytes(value: Double): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Double): Boolean; overload;
    {class} function ToChar(value: TArray<Byte>; startIndex: Int32): Char; overload;
    {class} function ToChar(value: DNReadOnlySpan<Byte>): Char; overload;
    {class} function ToInt16(value: TArray<Byte>; startIndex: Int32): Int16; overload;
    {class} function ToInt16(value: DNReadOnlySpan<Byte>): Int16; overload;
    {class} function ToInt32(value: TArray<Byte>; startIndex: Int32): Int32; overload;
    {class} function ToInt32(value: DNReadOnlySpan<Byte>): Int32; overload;
    {class} function ToInt64(value: TArray<Byte>; startIndex: Int32): Int64; overload;
    {class} function ToInt64(value: DNReadOnlySpan<Byte>): Int64; overload;
    {class} function ToUInt16(value: TArray<Byte>; startIndex: Int32): UInt16; overload;
    {class} function ToUInt16(value: DNReadOnlySpan<Byte>): UInt16; overload;
    {class} function ToUInt32(value: TArray<Byte>; startIndex: Int32): UInt32; overload;
    {class} function ToUInt32(value: DNReadOnlySpan<Byte>): UInt32; overload;
    {class} function ToUInt64(value: TArray<Byte>; startIndex: Int32): UInt64; overload;
    {class} function ToUInt64(value: DNReadOnlySpan<Byte>): UInt64; overload;
    {class} function ToSingle(value: TArray<Byte>; startIndex: Int32): Single; overload;
    {class} function ToSingle(value: DNReadOnlySpan<Byte>): Single; overload;
    {class} function ToDouble(value: TArray<Byte>; startIndex: Int32): Double; overload;
    {class} function ToDouble(value: DNReadOnlySpan<Byte>): Double; overload;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32; length: Int32): string; overload;
    {class} function ToString(value: TArray<Byte>): string; overload;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32): string; overload;
    {class} function ToBoolean(value: TArray<Byte>; startIndex: Int32): Boolean; overload;
    {class} function ToBoolean(value: DNReadOnlySpan<Byte>): Boolean; overload;
    {class} function DoubleToInt64Bits(value: Double): Int64;
    {class} function Int64BitsToDouble(value: Int64): Double;
    {class} function SingleToInt32Bits(value: Single): Int32;
    {class} function Int32BitsToSingle(value: Int32): Single;

  end;

  [DNTypeName('System.BitConverter')]
  DNBitConverter = interface(DNObject)
  ['{8D615F4B-DD36-3655-AC79-3952D5F768E2}']
  { methods } 

    function GetType: DNType;
    function ToString: string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBitConverter = class(TDNGenericImport<DNBitConverterClass, DNBitConverter>) end;

  //-------------namespace: System----------------
  DNBufferClass = interface(DNObjectClass)
  ['{2B91B63D-B876-539B-85E0-E9A043A20F96}']
  { static methods } 

    {class} procedure BlockCopy(src: DNArray; srcOffset: Int32; dst: DNArray; dstOffset: Int32; count: Int32);
    {class} function ByteLength(&array: DNArray): Int32;
    {class} function GetByte(&array: DNArray; index: Int32): Byte;
    {class} procedure SetByte(&array: DNArray; index: Int32; value: Byte);
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: Int64; sourceBytesToCopy: Int64); overload;
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: UInt64; sourceBytesToCopy: UInt64); overload;

  end;

  [DNTypeName('System.Buffer')]
  DNBuffer = interface(DNObject)
  ['{0E85CD22-E39A-3407-B8DF-914EB8797771}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBuffer = class(TDNGenericImport<DNBufferClass, DNBuffer>) end;

  //-------------namespace: System.Buffers----------------
  DNArrayPoolClass<T> = interface(DNObjectClass)
  ['{F87104EF-19DA-5E4B-9213-503E2DE50091}']
  { static getter & setter } 

    {class} function get_Shared: DNArrayPool<T>;

  { static methods } 

    {class} function Create: DNArrayPool<T>; overload;
    {class} function Create(maxArrayLength: Int32; maxArraysPerBucket: Int32): DNArrayPool<T>; overload;

  { static propertys } 

    {class} property Shared: DNArrayPool<T> read get_Shared;
  end;

  [DNTypeName('System.Buffers.ArrayPool`1')]
  DNArrayPool<T> = interface(DNObject)
  ['{7532BB11-4F34-300B-B9B5-61BB7BFA4B6B}']
  { methods } 

    function Rent(minimumLength: Int32): TArray<T>;
    procedure Return(&array: TArray<T>; clearArray: Boolean);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNArrayPool<T> = class(TDNGenericImport<DNArrayPoolClass<T>, DNArrayPool<T>>) end;

  //-------------namespace: System.Buffers.Binary----------------
  DNBinaryPrimitivesClass = interface(DNObjectClass)
  ['{DBAC6814-9026-5B2C-9854-D49229B61046}']
  { static methods } 

    {class} function ReverseEndianness(value: SByte): SByte; overload;
    {class} function ReverseEndianness(value: Int16): Int16; overload;
    {class} function ReverseEndianness(value: Int32): Int32; overload;
    {class} function ReverseEndianness(value: Int64): Int64; overload;
    {class} function ReverseEndianness(value: Byte): Byte; overload;
    {class} function ReverseEndianness(value: UInt16): UInt16; overload;
    {class} function ReverseEndianness(value: UInt32): UInt32; overload;
    {class} function ReverseEndianness(value: UInt64): UInt64; overload;
    {class} function ReadDoubleBigEndian(source: DNReadOnlySpan<Byte>): Double;
    {class} function ReadInt16BigEndian(source: DNReadOnlySpan<Byte>): Int16;
    {class} function ReadInt32BigEndian(source: DNReadOnlySpan<Byte>): Int32;
    {class} function ReadInt64BigEndian(source: DNReadOnlySpan<Byte>): Int64;
    {class} function ReadSingleBigEndian(source: DNReadOnlySpan<Byte>): Single;
    {class} function ReadUInt16BigEndian(source: DNReadOnlySpan<Byte>): UInt16;
    {class} function ReadUInt32BigEndian(source: DNReadOnlySpan<Byte>): UInt32;
    {class} function ReadUInt64BigEndian(source: DNReadOnlySpan<Byte>): UInt64;
    {class} function TryReadDoubleBigEndian(source: DNReadOnlySpan<Byte>; out value: Double): Boolean;
    {class} function TryReadInt16BigEndian(source: DNReadOnlySpan<Byte>; out value: Int16): Boolean;
    {class} function TryReadInt32BigEndian(source: DNReadOnlySpan<Byte>; out value: Int32): Boolean;
    {class} function TryReadInt64BigEndian(source: DNReadOnlySpan<Byte>; out value: Int64): Boolean;
    {class} function TryReadSingleBigEndian(source: DNReadOnlySpan<Byte>; out value: Single): Boolean;
    {class} function TryReadUInt16BigEndian(source: DNReadOnlySpan<Byte>; out value: UInt16): Boolean;
    {class} function TryReadUInt32BigEndian(source: DNReadOnlySpan<Byte>; out value: UInt32): Boolean;
    {class} function TryReadUInt64BigEndian(source: DNReadOnlySpan<Byte>; out value: UInt64): Boolean;
    {class} function ReadDoubleLittleEndian(source: DNReadOnlySpan<Byte>): Double;
    {class} function ReadInt16LittleEndian(source: DNReadOnlySpan<Byte>): Int16;
    {class} function ReadInt32LittleEndian(source: DNReadOnlySpan<Byte>): Int32;
    {class} function ReadInt64LittleEndian(source: DNReadOnlySpan<Byte>): Int64;
    {class} function ReadSingleLittleEndian(source: DNReadOnlySpan<Byte>): Single;
    {class} function ReadUInt16LittleEndian(source: DNReadOnlySpan<Byte>): UInt16;
    {class} function ReadUInt32LittleEndian(source: DNReadOnlySpan<Byte>): UInt32;
    {class} function ReadUInt64LittleEndian(source: DNReadOnlySpan<Byte>): UInt64;
    {class} function TryReadDoubleLittleEndian(source: DNReadOnlySpan<Byte>; out value: Double): Boolean;
    {class} function TryReadInt16LittleEndian(source: DNReadOnlySpan<Byte>; out value: Int16): Boolean;
    {class} function TryReadInt32LittleEndian(source: DNReadOnlySpan<Byte>; out value: Int32): Boolean;
    {class} function TryReadInt64LittleEndian(source: DNReadOnlySpan<Byte>; out value: Int64): Boolean;
    {class} function TryReadSingleLittleEndian(source: DNReadOnlySpan<Byte>; out value: Single): Boolean;
    {class} function TryReadUInt16LittleEndian(source: DNReadOnlySpan<Byte>; out value: UInt16): Boolean;
    {class} function TryReadUInt32LittleEndian(source: DNReadOnlySpan<Byte>; out value: UInt32): Boolean;
    {class} function TryReadUInt64LittleEndian(source: DNReadOnlySpan<Byte>; out value: UInt64): Boolean;
    {class} procedure WriteDoubleBigEndian(destination: DNSpan<Byte>; value: Double);
    {class} procedure WriteInt16BigEndian(destination: DNSpan<Byte>; value: Int16);
    {class} procedure WriteInt32BigEndian(destination: DNSpan<Byte>; value: Int32);
    {class} procedure WriteInt64BigEndian(destination: DNSpan<Byte>; value: Int64);
    {class} procedure WriteSingleBigEndian(destination: DNSpan<Byte>; value: Single);
    {class} procedure WriteUInt16BigEndian(destination: DNSpan<Byte>; value: UInt16);
    {class} procedure WriteUInt32BigEndian(destination: DNSpan<Byte>; value: UInt32);
    {class} procedure WriteUInt64BigEndian(destination: DNSpan<Byte>; value: UInt64);
    {class} function TryWriteDoubleBigEndian(destination: DNSpan<Byte>; value: Double): Boolean;
    {class} function TryWriteInt16BigEndian(destination: DNSpan<Byte>; value: Int16): Boolean;
    {class} function TryWriteInt32BigEndian(destination: DNSpan<Byte>; value: Int32): Boolean;
    {class} function TryWriteInt64BigEndian(destination: DNSpan<Byte>; value: Int64): Boolean;
    {class} function TryWriteSingleBigEndian(destination: DNSpan<Byte>; value: Single): Boolean;
    {class} function TryWriteUInt16BigEndian(destination: DNSpan<Byte>; value: UInt16): Boolean;
    {class} function TryWriteUInt32BigEndian(destination: DNSpan<Byte>; value: UInt32): Boolean;
    {class} function TryWriteUInt64BigEndian(destination: DNSpan<Byte>; value: UInt64): Boolean;
    {class} procedure WriteDoubleLittleEndian(destination: DNSpan<Byte>; value: Double);
    {class} procedure WriteInt16LittleEndian(destination: DNSpan<Byte>; value: Int16);
    {class} procedure WriteInt32LittleEndian(destination: DNSpan<Byte>; value: Int32);
    {class} procedure WriteInt64LittleEndian(destination: DNSpan<Byte>; value: Int64);
    {class} procedure WriteSingleLittleEndian(destination: DNSpan<Byte>; value: Single);
    {class} procedure WriteUInt16LittleEndian(destination: DNSpan<Byte>; value: UInt16);
    {class} procedure WriteUInt32LittleEndian(destination: DNSpan<Byte>; value: UInt32);
    {class} procedure WriteUInt64LittleEndian(destination: DNSpan<Byte>; value: UInt64);
    {class} function TryWriteDoubleLittleEndian(destination: DNSpan<Byte>; value: Double): Boolean;
    {class} function TryWriteInt16LittleEndian(destination: DNSpan<Byte>; value: Int16): Boolean;
    {class} function TryWriteInt32LittleEndian(destination: DNSpan<Byte>; value: Int32): Boolean;
    {class} function TryWriteInt64LittleEndian(destination: DNSpan<Byte>; value: Int64): Boolean;
    {class} function TryWriteSingleLittleEndian(destination: DNSpan<Byte>; value: Single): Boolean;
    {class} function TryWriteUInt16LittleEndian(destination: DNSpan<Byte>; value: UInt16): Boolean;
    {class} function TryWriteUInt32LittleEndian(destination: DNSpan<Byte>; value: UInt32): Boolean;
    {class} function TryWriteUInt64LittleEndian(destination: DNSpan<Byte>; value: UInt64): Boolean;

  end;

  [DNTypeName('System.Buffers.Binary.BinaryPrimitives')]
  DNBinaryPrimitives = interface(DNObject)
  ['{B8670E89-1026-3FA0-AEA3-2C76106F0BAD}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBinaryPrimitives = class(TDNGenericImport<DNBinaryPrimitivesClass, DNBinaryPrimitives>) end;

  //-------------namespace: System.Buffers----------------
  DNMemoryManagerClass<T> = interface(DNObjectClass)
  ['{3A7AFDD7-E214-563E-A991-3CB2ACFE17BD}']
  end;

  [DNTypeName('System.Buffers.MemoryManager`1')]
  DNMemoryManager<T> = interface(DNIMemoryOwner<T>)
  ['{F76B17F8-CA36-3F1A-ABF4-EF7D8FAEDE80}']
  { getters & setters } 

    function get_Memory: DNMemory<T>;

  { methods } 

    function GetSpan: DNSpan<T>;
    function Pin(elementIndex: Int32): DNMemoryHandle;
    procedure Unpin;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Memory: DNMemory<T> read get_Memory;
  end;

  TDNMemoryManager<T> = class(TDNGenericImport<DNMemoryManagerClass<T>, DNMemoryManager<T>>) end;

  //-------------namespace: System.Buffers.Text----------------
  DNUtf8FormatterClass = interface(DNObjectClass)
  ['{C5900F60-6D6E-55B5-9BFE-BBD84F7B9CFB}']
  { static methods } 

    {class} function TryFormat(value: Boolean; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: DNDateTimeOffset; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: DNDateTime; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: DNDecimal; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Double; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Single; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: DNGuid; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Byte; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: SByte; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: UInt16; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Int16; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: UInt32; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Int32; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: UInt64; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: Int64; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;
    {class} function TryFormat(value: DNTimeSpan; destination: DNSpan<Byte>; out bytesWritten: Int32; format: DNStandardFormat): Boolean; overload;

  end;

  [DNTypeName('System.Buffers.Text.Utf8Formatter')]
  DNUtf8Formatter = interface(DNObject)
  ['{6C5379F6-24E5-3ADC-8365-CE6C3F23100F}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUtf8Formatter = class(TDNGenericImport<DNUtf8FormatterClass, DNUtf8Formatter>) end;

  //-------------namespace: System.Buffers.Text----------------
  DNUtf8ParserClass = interface(DNObjectClass)
  ['{68CD9594-5212-527C-85DD-0DC68CBB8836}']
  { static methods } 

    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Boolean; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: DNDateTime; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: DNDateTimeOffset; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: DNDecimal; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Single; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Double; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: DNGuid; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: SByte; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Int16; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Int32; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Int64; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: Byte; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: UInt16; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: UInt32; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: UInt64; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;
    {class} function TryParse(source: DNReadOnlySpan<Byte>; out value: DNTimeSpan; out bytesConsumed: Int32; standardFormat: Char): Boolean; overload;

  end;

  [DNTypeName('System.Buffers.Text.Utf8Parser')]
  DNUtf8Parser = interface(DNObject)
  ['{242AA11B-08A2-3AE3-AEB3-AA84892EC06D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUtf8Parser = class(TDNGenericImport<DNUtf8ParserClass, DNUtf8Parser>) end;

  //-------------namespace: System----------------
  DNCharEnumeratorClass = interface(DNObjectClass)
  ['{09992803-9CFA-5FB0-BCC5-2A1200C00425}']
  end;

  [DNTypeName('System.CharEnumerator')]
  DNCharEnumerator = interface(DNIEnumerator)
  ['{8027E0D7-4D8A-3C6A-A599-93101833C3AC}']
  { getters & setters } 

    function get_Current: Char;

  { methods } 

    function Clone: DNObject;
    function MoveNext: Boolean;
    procedure Dispose;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: Char read get_Current;
  end;

  TDNCharEnumerator = class(TDNGenericImport<DNCharEnumeratorClass, DNCharEnumerator>) end;

  //-------------namespace: System.Collections----------------
  DNArrayListClass = interface(DNObjectClass)
  ['{8DC8519B-4390-5B25-9DC7-F22C4957F10B}']
  { constructors } 

    {class} function init: DNArrayList; overload;
    {class} function init(capacity: Int32): DNArrayList; overload;
    {class} function init(c: DNICollection): DNArrayList; overload;

  { static methods } 

    {class} function Adapter(list: DNIList): DNArrayList;
    {class} function FixedSize(list: DNIList): DNIList; overload;
    {class} function FixedSize(list: DNArrayList): DNArrayList; overload;
    {class} function ReadOnly(list: DNIList): DNIList; overload;
    {class} function ReadOnly(list: DNArrayList): DNArrayList; overload;
    {class} function &Repeat(value: DNObject; count: Int32): DNArrayList;
    {class} function Synchronized(list: DNIList): DNIList; overload;
    {class} function Synchronized(list: DNArrayList): DNArrayList; overload;

  end;

  [DNTypeName('System.Collections.ArrayList')]
  DNArrayList = interface(DNIList)
  ['{A5EDD76B-8CE2-361D-9494-F93F9D9304D2}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);

  { methods } 

    function Add(value: DNObject): Int32;
    procedure AddRange(c: DNICollection);
    function BinarySearch(index: Int32; count: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    function BinarySearch(value: DNObject): Int32; overload;
    function BinarySearch(value: DNObject; comparer: DNIComparer): Int32; overload;
    procedure Clear;
    function Clone: DNObject;
    function &Contains(item: DNObject): Boolean;
    procedure CopyTo(&array: DNArray); overload;
    procedure CopyTo(&array: DNArray; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: DNArray; arrayIndex: Int32; count: Int32); overload;
    function GetEnumerator: DNIEnumerator; overload;
    function GetEnumerator(index: Int32; count: Int32): DNIEnumerator; overload;
    function IndexOf(value: DNObject): Int32; overload;
    function IndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    function IndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; value: DNObject);
    procedure InsertRange(index: Int32; c: DNICollection);
    function LastIndexOf(value: DNObject): Int32; overload;
    function LastIndexOf(value: DNObject; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    procedure Remove(obj: DNObject);
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure SetRange(index: Int32; c: DNICollection);
    function GetRange(index: Int32; count: Int32): DNArrayList;
    procedure Sort; overload;
    procedure Sort(comparer: DNIComparer); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer); overload;
    function ToArray: TArray<DNObject>; overload;
    function ToArray(&type: DNType): DNArray; overload;
    procedure TrimToSize;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
  end;

  TDNArrayList = class(TDNGenericImport<DNArrayListClass, DNArrayList>) end;

  //-------------namespace: System.Collections----------------
  DNComparerClass = interface(DNObjectClass)
  ['{3C02D994-6EFD-57DF-A085-9D403C3BB9BE}']
  { constructors } 

    {class} function init(culture: DNCultureInfo): DNComparer;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNComparer;
   function __fakeFieldGet_DefaultInvariant: DNComparer;

  { static fields } 

    {class} property &Default: DNComparer read __fakeFieldGet_Default;
    {class} property DefaultInvariant: DNComparer read __fakeFieldGet_DefaultInvariant;

  end;

  [DNTypeName('System.Collections.Comparer')]
  DNComparer = interface(DNIComparer)
  ['{374EBFE7-7366-33B5-8D83-F52FF1D1DFC7}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Compare(a: DNObject; b: DNObject): Int32;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComparer = class(TDNGenericImport<DNComparerClass, DNComparer>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNConcurrentQueueClass<T> = interface(DNObjectClass)
  ['{A66AA254-592C-5802-AABD-07F6A1F68E82}']
  { constructors } 

    {class} function init: DNConcurrentQueue<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNConcurrentQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.ConcurrentQueue`1')]
  DNConcurrentQueue<T> = interface(DNIProducerConsumerCollection<T>)
  ['{94B6EC79-78EA-35C3-89EB-E578DCC3D509}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DNIEnumerator<T>;
    procedure Enqueue(item: T);
    function TryDequeue(out result: T): Boolean;
    function TryPeek(out result: T): Boolean;
    procedure Clear;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNConcurrentQueue<T> = class(TDNGenericImport<DNConcurrentQueueClass<T>, DNConcurrentQueue<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNComparerClass<T> = interface(DNObjectClass)
  ['{9871F66D-4A97-570B-A590-9391EE6DBB28}']
  { static getter & setter } 

    {class} function get_Default: DNComparer<T>;

  { static methods } 

    {class} function Create(comparison: DNComparison<T>): DNComparer<T>;

  { static propertys } 

    {class} property &Default: DNComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.Comparer`1')]
  DNComparer<T> = interface(DNIComparer)
  ['{F5AAA731-310A-3883-B0DD-81EFEF1DAE09}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComparer<T> = class(TDNGenericImport<DNComparerClass<T>, DNComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNGenericComparerClass<T> = interface(DNComparerClass<T>)
  ['{F2EF7626-933C-51E0-89DB-394423262F5E}']
  { constructors } 

    {class} function init: DNGenericComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.GenericComparer`1')]
  DNGenericComparer<T> = interface(DNComparer<T>)
  ['{FB121274-656E-3175-B609-8239487D160F}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGenericComparer<T> = class(TDNGenericImport<DNGenericComparerClass<T>, DNGenericComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNullableComparerClass<T> = interface(DNComparerClass<DNNullable<T>>)
  ['{71403BFD-2B4A-55E0-B92D-5B03965DE547}']
  { constructors } 

    {class} function init: DNNullableComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.NullableComparer`1')]
  DNNullableComparer<T> = interface(DNComparer<DNNullable<T>>)
  ['{51BD1E6E-632E-37AB-80C6-70F403CED6C8}']
  { methods } 

    function Compare(x: DNNullable<T>; y: DNNullable<T>): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNNullableComparer<T> = class(TDNGenericImport<DNNullableComparerClass<T>, DNNullableComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNObjectComparerClass<T> = interface(DNComparerClass<T>)
  ['{C730F0A2-722F-50C1-9C1F-4171D093093B}']
  { constructors } 

    {class} function init: DNObjectComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.ObjectComparer`1')]
  DNObjectComparer<T> = interface(DNComparer<T>)
  ['{D30B084F-CE8F-3B72-B9A5-A9C06FD05CC1}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectComparer<T> = class(TDNGenericImport<DNObjectComparerClass<T>, DNObjectComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{DEACCC77-03D4-544F-A4C9-11CCE4C345A4}']
  { constructors } 

    {class} function init: DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>): DNDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2')]
  DNDictionary<TKey, TValue> = interface(DNIDictionary<TKey, TValue>)
  ['{1DFC9A85-8221-3436-A970-53BF17D74D39}']
  { getters & setters } 

    function get_Comparer: DNIEqualityComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DNDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DNDictionary_Enumerator<TKey, TValue>;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Remove(key: TKey; out value: TValue): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryAdd(key: TKey; value: TValue): Boolean;
    function EnsureCapacity(capacity: Int32): Int32;
    procedure TrimExcess; overload;
    procedure TrimExcess(capacity: Int32); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Comparer: DNIEqualityComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DNDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNDictionary<TKey, TValue> = class(TDNGenericImport<DNDictionaryClass<TKey, TValue>, DNDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{B1F0B030-89AD-58D7-AF80-746E2A2720BA}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection')]
  DNDictionary_KeyCollection<TKey, TValue> = interface(DNICollection<TKey>)
  ['{DFE5089E-C57D-3B91-A52E-E782A77B58B8}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollectionClass<TKey, TValue>, DNDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{CB1BA175-BB44-5AE3-B19A-3EE631F80F23}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection')]
  DNDictionary_ValueCollection<TKey, TValue> = interface(DNICollection<TValue>)
  ['{D74D65C8-5E1C-3C28-9B94-97E742F663CC}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollectionClass<TKey, TValue>, DNDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNByteEqualityComparerClass = interface(DNEqualityComparerClass<Byte>)
  ['{E0D5DF53-97B9-5FC8-88C6-2936682AB2A4}']
  { constructors } 

    {class} function init: DNByteEqualityComparer;

  end;

  [DNTypeName('System.Collections.Generic.ByteEqualityComparer')]
  DNByteEqualityComparer = interface(DNEqualityComparer<Byte>)
  ['{D6DA7D61-B0A9-31F9-A3CB-6FE3DEF61A65}']
  { methods } 

    function Equals(x: Byte; y: Byte): Boolean; overload;
    function GetHashCode(b: Byte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNByteEqualityComparer = class(TDNGenericImport<DNByteEqualityComparerClass, DNByteEqualityComparer>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNEnumEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{EF69BF56-7EA3-5773-8141-626E77E0141A}']
  end;

  [DNTypeName('System.Collections.Generic.EnumEqualityComparer`1')]
  DNEnumEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{79E914F1-5084-3E64-A788-57E191ADBF13}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNEnumEqualityComparer<T> = class(TDNGenericImport<DNEnumEqualityComparerClass<T>, DNEnumEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNGenericEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{4F0B68B6-D36E-5D0F-B6B9-5BE3051E0F12}']
  { constructors } 

    {class} function init: DNGenericEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.GenericEqualityComparer`1')]
  DNGenericEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{F165AEB6-C67F-3258-9841-CF3C842BE1CA}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNGenericEqualityComparer<T> = class(TDNGenericImport<DNGenericEqualityComparerClass<T>, DNGenericEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNullableEqualityComparerClass<T> = interface(DNEqualityComparerClass<DNNullable<T>>)
  ['{C96D158E-8AE7-5BF8-882E-CBA38A3424F4}']
  { constructors } 

    {class} function init: DNNullableEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.NullableEqualityComparer`1')]
  DNNullableEqualityComparer<T> = interface(DNEqualityComparer<DNNullable<T>>)
  ['{C14FB480-3145-3E44-82D3-3E57520BA045}']
  { methods } 

    function Equals(x: DNNullable<T>; y: DNNullable<T>): Boolean; overload;
    function GetHashCode(obj: DNNullable<T>): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNNullableEqualityComparer<T> = class(TDNGenericImport<DNNullableEqualityComparerClass<T>, DNNullableEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNObjectEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{1BB7201B-0323-520D-BBF8-39E9DEA41FEF}']
  { constructors } 

    {class} function init: DNObjectEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.ObjectEqualityComparer`1')]
  DNObjectEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{1259C40D-66A0-349C-9DAD-A31170C7B5CA}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNObjectEqualityComparer<T> = class(TDNGenericImport<DNObjectEqualityComparerClass<T>, DNObjectEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSetClass<T> = interface(DNObjectClass)
  ['{5CCC28A3-7CFC-5F5D-856F-0217311A3084}']
  { constructors } 

    {class} function init: DNHashSet<T>; overload;
    {class} function init(comparer: DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32): DNHashSet<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNHashSet<T>; overload;
    {class} function init(collection: DNIEnumerable<T>; comparer: DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32; comparer: DNIEqualityComparer<T>): DNHashSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DNIEqualityComparer<DNHashSet<T>>;

  end;

  [DNTypeName('System.Collections.Generic.HashSet`1')]
  DNHashSet<T> = interface(DNICollection<T>)
  ['{380AA9FA-A34B-38A9-A350-6A50B5C2AE0F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DNIEqualityComparer<T>;

  { methods } 

    function &Contains(item: T): Boolean;
    function GetEnumerator: DNHashSet_Enumerator<T>;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    procedure UnionWith(other: DNIEnumerable<T>);
    procedure IntersectWith(other: DNIEnumerable<T>);
    procedure ExceptWith(other: DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DNIEnumerable<T>);
    function IsSubsetOf(other: DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DNIEnumerable<T>): Boolean;
    function Overlaps(other: DNIEnumerable<T>): Boolean;
    function SetEquals(other: DNIEnumerable<T>): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function RemoveWhere(match: DNPredicate<T>): Int32;
    function EnsureCapacity(capacity: Int32): Int32;
    procedure TrimExcess;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DNIEqualityComparer<T> read get_Comparer;
  end;

  TDNHashSet<T> = class(TDNGenericImport<DNHashSetClass<T>, DNHashSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyValuePairClass = interface(DNObjectClass)
  ['{A4E8EDD9-A132-552D-BFEE-8BE6AEBA952D}']
  end;

  [DNTypeName('System.Collections.Generic.KeyValuePair')]
  DNKeyValuePair = interface(DNObject)
  ['{42133391-1AD8-35E2-BED4-98BD1C87C028}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNKeyValuePair = class(TDNGenericImport<DNKeyValuePairClass, DNKeyValuePair>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNListClass<T> = interface(DNObjectClass)
  ['{A59B3AF2-ABFE-5BEE-B174-841D97F4B7C4}']
  { constructors } 

    {class} function init: DNList<T>; overload;
    {class} function init(capacity: Int32): DNList<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.List`1')]
  DNList<T> = interface(DNIList<T>)
  ['{E9D1B8EF-0054-3E9F-A42B-6F7135F56C20}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(collection: DNIEnumerable<T>);
    function AsReadOnly: DNReadOnlyCollection<T>;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DNIComparer<T>): Int32; overload;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DNIComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function Exists(match: DNPredicate<T>): Boolean;
    function Find(match: DNPredicate<T>): T;
    function FindAll(match: DNPredicate<T>): DNList<T>;
    function FindIndex(match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLast(match: DNPredicate<T>): T;
    function FindLastIndex(match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    procedure ForEach(action: DNAction<T>);
    function GetEnumerator: DNList_Enumerator<T>;
    function GetRange(index: Int32; count: Int32): DNList<T>;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure InsertRange(index: Int32; collection: DNIEnumerable<T>);
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; index: Int32): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function RemoveAll(match: DNPredicate<T>): Int32;
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparer: DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer<T>); overload;
    procedure Sort(comparison: DNComparison<T>); overload;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function TrueForAll(match: DNPredicate<T>): Boolean;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNList<T> = class(TDNGenericImport<DNListClass<T>, DNList<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNonRandomizedStringEqualityComparerClass = interface(DNObjectClass)
  ['{9EFCBD8C-756A-51A0-A527-0C1381BF0DEE}']
  end;

  [DNTypeName('System.Collections.Generic.NonRandomizedStringEqualityComparer')]
  DNNonRandomizedStringEqualityComparer = interface(DNObject)
  ['{A3D41313-5D1C-318D-AECC-9BB434F44049}']
  { methods } 

    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function GetUnderlyingEqualityComparer: DNIEqualityComparer<string>;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNNonRandomizedStringEqualityComparer = class(TDNGenericImport<DNNonRandomizedStringEqualityComparerClass, DNNonRandomizedStringEqualityComparer>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNReferenceEqualityComparerClass = interface(DNObjectClass)
  ['{B5FC4DE2-70FE-587F-8DF7-9FBE2BE45BD5}']
  { static getter & setter } 

    {class} function get_Instance: DNReferenceEqualityComparer;

  { static propertys } 

    {class} property Instance: DNReferenceEqualityComparer read get_Instance;
  end;

  [DNTypeName('System.Collections.Generic.ReferenceEqualityComparer')]
  DNReferenceEqualityComparer = interface(DNObject)
  ['{CC81E127-19A1-306D-A1FA-1A4C4139B273}']
  { methods } 

    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNReferenceEqualityComparer = class(TDNGenericImport<DNReferenceEqualityComparerClass, DNReferenceEqualityComparer>) end;

  //-------------namespace: System.Collections----------------
  DNHashtableClass = interface(DNObjectClass)
  ['{B14648F5-CCB1-5C89-88B9-52083FA00EA6}']
  { constructors } 

    {class} function init: DNHashtable; overload;
    {class} function init(capacity: Int32): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single): DNHashtable; overload;
    {class} function init(d: DNIDictionary; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; equalityComparer: DNIEqualityComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DNIComparer): DNHashtable; overload;
    {class} function init(d: DNIDictionary; loadFactor: Single; equalityComparer: DNIEqualityComparer): DNHashtable; overload;

  { static methods } 

    {class} function Synchronized(table: DNHashtable): DNHashtable;

  end;

  [DNTypeName('System.Collections.Hashtable')]
  DNHashtable = interface(DNIDictionary)
  ['{9BEB6F5B-0C0A-3554-B2B3-BBD4005D6D52}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_SyncRoot: DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function Clone: DNObject;
    function &Contains(key: DNObject): Boolean;
    function ContainsKey(key: DNObject): Boolean;
    function ContainsValue(value: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; arrayIndex: Int32);
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure Remove(key: DNObject);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property SyncRoot: DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNHashtable = class(TDNGenericImport<DNHashtableClass, DNHashtable>) end;

  //-------------namespace: System.Collections----------------
  DNListDictionaryInternalClass = interface(DNObjectClass)
  ['{5FFCCA0D-51CB-5E22-B469-D5BA1CC06A48}']
  { constructors } 

    {class} function init: DNListDictionaryInternal;

  end;

  [DNTypeName('System.Collections.ListDictionaryInternal')]
  DNListDictionaryInternal = interface(DNIDictionary)
  ['{0632CE3A-DB63-3C22-B8AF-A08F099EDE03}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Values: DNICollection;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; index: Int32);
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DNICollection read get_Keys;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
    property Values: DNICollection read get_Values;
  end;

  TDNListDictionaryInternal = class(TDNGenericImport<DNListDictionaryInternalClass, DNListDictionaryInternal>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNCollectionClass<T> = interface(DNObjectClass)
  ['{B18118CB-81D3-5E83-A3CF-C346FAABAEB4}']
  { constructors } 

    {class} function init: DNCollection<T>; overload;
    {class} function init(list: DNIList<T>): DNCollection<T>; overload;

  end;

  [DNTypeName('System.Collections.ObjectModel.Collection`1')]
  DNCollection<T> = interface(DNIList<T>)
  ['{0B3C24AD-0A9D-358F-A445-7891C1DD3671}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCollection<T> = class(TDNGenericImport<DNCollectionClass<T>, DNCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyCollectionClass<T> = interface(DNObjectClass)
  ['{D7388460-DC5A-5A4C-9D0F-58E280168394}']
  { constructors } 

    {class} function init(list: DNIList<T>): DNReadOnlyCollection<T>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyCollection`1')]
  DNReadOnlyCollection<T> = interface(DNIList<T>)
  ['{8F9F0DF9-B182-37E8-96C7-A072474D47BF}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DNIEnumerator<T>;
    function IndexOf(value: T): Int32;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollection<T> = class(TDNGenericImport<DNReadOnlyCollectionClass<T>, DNReadOnlyCollection<T>>) end;

  //-------------namespace: System----------------
  DNConvertClass = interface(DNObjectClass)
  ['{321015AA-0C9C-5C0F-83DD-91CF6A210D79}']
  { static fields getter & setter } 

   function __fakeFieldGet_DBNull: DNObject;

  { static fields } 

    {class} property DBNull: DNObject read __fakeFieldGet_DBNull;

  { static methods } 

    {class} function ToDateTime(value: DNObject): DNDateTime; overload;
    {class} function ToDateTime(value: DNObject; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: string): DNDateTime; overload;
    {class} function ToDateTime(value: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: SByte): DNDateTime; overload;
    {class} function ToDateTime(value: Byte): DNDateTime; overload;
    {class} function ToDateTime(value: Int16): DNDateTime; overload;
    {class} function ToDateTime(value: UInt16): DNDateTime; overload;
    {class} function ToDateTime(value: Int32): DNDateTime; overload;
    {class} function ToDateTime(value: UInt32): DNDateTime; overload;
    {class} function ToDateTime(value: Int64): DNDateTime; overload;
    {class} function ToDateTime(value: UInt64): DNDateTime; overload;
    {class} function ToDateTime(value: Boolean): DNDateTime; overload;
    {class} function ToDateTime(value: Char): DNDateTime; overload;
    {class} function ToDateTime(value: Single): DNDateTime; overload;
    {class} function ToDateTime(value: Double): DNDateTime; overload;
    {class} function ToDateTime(value: DNDecimal): DNDateTime; overload;
    {class} function ToString(value: DNObject): string; overload;
    {class} function ToString(value: DNObject; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: Boolean; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: Char; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: SByte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: Byte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Int64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: UInt64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Single; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: Double; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDecimal): string; overload;
    {class} function ToString(value: DNDecimal; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDateTime): string; overload;
    {class} function ToString(value: DNDateTime; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: string): string; overload;
    {class} function ToString(value: string; provider: DNIFormatProvider): string; overload;
    {class} function ToByte(value: string; fromBase: Int32): Byte; overload;
    {class} function ToSByte(value: string; fromBase: Int32): SByte; overload;
    {class} function ToInt16(value: string; fromBase: Int32): Int16; overload;
    {class} function ToUInt16(value: string; fromBase: Int32): UInt16; overload;
    {class} function ToInt32(value: string; fromBase: Int32): Int32; overload;
    {class} function ToUInt32(value: string; fromBase: Int32): UInt32; overload;
    {class} function ToInt64(value: string; fromBase: Int32): Int64; overload;
    {class} function ToUInt64(value: string; fromBase: Int32): UInt64; overload;
    {class} function ToString(value: Byte; toBase: Int32): string; overload;
    {class} function ToString(value: Int16; toBase: Int32): string; overload;
    {class} function ToString(value: Int32; toBase: Int32): string; overload;
    {class} function ToString(value: Int64; toBase: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64String(bytes: DNReadOnlySpan<Byte>; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32): Int32; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32; options: DNBase64FormattingOptions): Int32; overload;
    {class} function TryToBase64Chars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; out charsWritten: Int32; options: DNBase64FormattingOptions): Boolean;
    {class} function FromBase64String(s: string): TArray<Byte>;
    {class} function TryFromBase64String(s: string; bytes: DNSpan<Byte>; out bytesWritten: Int32): Boolean;
    {class} function TryFromBase64Chars(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; out bytesWritten: Int32): Boolean;
    {class} function FromBase64CharArray(inArray: TArray<Char>; offset: Int32; length: Int32): TArray<Byte>;
    {class} function FromHexString(s: string): TArray<Byte>; overload;
    {class} function FromHexString(chars: DNReadOnlySpan<Char>): TArray<Byte>; overload;
    {class} function ToHexString(inArray: TArray<Byte>): string; overload;
    {class} function ToHexString(inArray: TArray<Byte>; offset: Int32; length: Int32): string; overload;
    {class} function ToHexString(bytes: DNReadOnlySpan<Byte>): string; overload;
    {class} function ToInt64(value: Int16): Int64; overload;
    {class} function ToInt64(value: UInt16): Int64; overload;
    {class} function ToInt64(value: Int32): Int64; overload;
    {class} function ToInt64(value: UInt32): Int64; overload;
    {class} function ToInt64(value: UInt64): Int64; overload;
    {class} function ToInt64(value: Int64): Int64; overload;
    {class} function ToInt64(value: Single): Int64; overload;
    {class} function ToInt64(value: Double): Int64; overload;
    {class} function ToInt64(value: DNDecimal): Int64; overload;
    {class} function ToInt64(value: string): Int64; overload;
    {class} function ToInt64(value: string; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: DNDateTime): Int64; overload;
    {class} function ToUInt64(value: DNObject): UInt64; overload;
    {class} function ToUInt64(value: DNObject; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: Boolean): UInt64; overload;
    {class} function ToUInt64(value: Char): UInt64; overload;
    {class} function ToUInt64(value: SByte): UInt64; overload;
    {class} function ToUInt64(value: Byte): UInt64; overload;
    {class} function ToUInt64(value: Int16): UInt64; overload;
    {class} function ToUInt64(value: UInt16): UInt64; overload;
    {class} function ToUInt64(value: Int32): UInt64; overload;
    {class} function ToUInt64(value: UInt32): UInt64; overload;
    {class} function ToUInt64(value: Int64): UInt64; overload;
    {class} function ToUInt64(value: UInt64): UInt64; overload;
    {class} function ToUInt64(value: Single): UInt64; overload;
    {class} function ToUInt64(value: Double): UInt64; overload;
    {class} function ToUInt64(value: DNDecimal): UInt64; overload;
    {class} function ToUInt64(value: string): UInt64; overload;
    {class} function ToUInt64(value: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: DNDateTime): UInt64; overload;
    {class} function ToSingle(value: DNObject): Single; overload;
    {class} function ToSingle(value: DNObject; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: SByte): Single; overload;
    {class} function ToSingle(value: Byte): Single; overload;
    {class} function ToSingle(value: Char): Single; overload;
    {class} function ToSingle(value: Int16): Single; overload;
    {class} function ToSingle(value: UInt16): Single; overload;
    {class} function ToSingle(value: Int32): Single; overload;
    {class} function ToSingle(value: UInt32): Single; overload;
    {class} function ToSingle(value: Int64): Single; overload;
    {class} function ToSingle(value: UInt64): Single; overload;
    {class} function ToSingle(value: Single): Single; overload;
    {class} function ToSingle(value: Double): Single; overload;
    {class} function ToSingle(value: DNDecimal): Single; overload;
    {class} function ToSingle(value: string): Single; overload;
    {class} function ToSingle(value: string; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: Boolean): Single; overload;
    {class} function ToSingle(value: DNDateTime): Single; overload;
    {class} function ToDouble(value: DNObject): Double; overload;
    {class} function ToDouble(value: DNObject; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: SByte): Double; overload;
    {class} function ToDouble(value: Byte): Double; overload;
    {class} function ToDouble(value: Int16): Double; overload;
    {class} function ToDouble(value: Char): Double; overload;
    {class} function ToDouble(value: UInt16): Double; overload;
    {class} function ToDouble(value: Int32): Double; overload;
    {class} function ToDouble(value: UInt32): Double; overload;
    {class} function ToDouble(value: Int64): Double; overload;
    {class} function ToDouble(value: UInt64): Double; overload;
    {class} function ToDouble(value: Single): Double; overload;
    {class} function ToDouble(value: Double): Double; overload;
    {class} function ToDouble(value: DNDecimal): Double; overload;
    {class} function ToDouble(value: string): Double; overload;
    {class} function ToDouble(value: string; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: Boolean): Double; overload;
    {class} function ToDouble(value: DNDateTime): Double; overload;
    {class} function ToDecimal(value: DNObject): DNDecimal; overload;
    {class} function ToDecimal(value: DNObject; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: SByte): DNDecimal; overload;
    {class} function ToDecimal(value: Byte): DNDecimal; overload;
    {class} function ToDecimal(value: Char): DNDecimal; overload;
    {class} function ToDecimal(value: Int16): DNDecimal; overload;
    {class} function ToDecimal(value: UInt16): DNDecimal; overload;
    {class} function ToDecimal(value: Int32): DNDecimal; overload;
    {class} function ToDecimal(value: UInt32): DNDecimal; overload;
    {class} function ToDecimal(value: Int64): DNDecimal; overload;
    {class} function ToDecimal(value: UInt64): DNDecimal; overload;
    {class} function ToDecimal(value: Single): DNDecimal; overload;
    {class} function ToDecimal(value: Double): DNDecimal; overload;
    {class} function ToDecimal(value: string): DNDecimal; overload;
    {class} function ToDecimal(value: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: DNDecimal): DNDecimal; overload;
    {class} function ToDecimal(value: Boolean): DNDecimal; overload;
    {class} function ToDecimal(value: DNDateTime): DNDecimal; overload;
    {class} function ToDateTime(value: DNDateTime): DNDateTime; overload;
    {class} function ToByte(value: UInt64): Byte; overload;
    {class} function ToByte(value: Single): Byte; overload;
    {class} function ToByte(value: Double): Byte; overload;
    {class} function ToByte(value: DNDecimal): Byte; overload;
    {class} function ToByte(value: string): Byte; overload;
    {class} function ToByte(value: string; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: DNDateTime): Byte; overload;
    {class} function ToInt16(value: DNObject): Int16; overload;
    {class} function ToInt16(value: DNObject; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: Boolean): Int16; overload;
    {class} function ToInt16(value: Char): Int16; overload;
    {class} function ToInt16(value: SByte): Int16; overload;
    {class} function ToInt16(value: Byte): Int16; overload;
    {class} function ToInt16(value: UInt16): Int16; overload;
    {class} function ToInt16(value: Int32): Int16; overload;
    {class} function ToInt16(value: UInt32): Int16; overload;
    {class} function ToInt16(value: Int16): Int16; overload;
    {class} function ToInt16(value: Int64): Int16; overload;
    {class} function ToInt16(value: UInt64): Int16; overload;
    {class} function ToInt16(value: Single): Int16; overload;
    {class} function ToInt16(value: Double): Int16; overload;
    {class} function ToInt16(value: DNDecimal): Int16; overload;
    {class} function ToInt16(value: string): Int16; overload;
    {class} function ToInt16(value: string; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: DNDateTime): Int16; overload;
    {class} function ToUInt16(value: DNObject): UInt16; overload;
    {class} function ToUInt16(value: DNObject; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: Boolean): UInt16; overload;
    {class} function ToUInt16(value: Char): UInt16; overload;
    {class} function ToUInt16(value: SByte): UInt16; overload;
    {class} function ToUInt16(value: Byte): UInt16; overload;
    {class} function ToUInt16(value: Int16): UInt16; overload;
    {class} function ToUInt16(value: Int32): UInt16; overload;
    {class} function ToUInt16(value: UInt16): UInt16; overload;
    {class} function ToUInt16(value: UInt32): UInt16; overload;
    {class} function ToUInt16(value: Int64): UInt16; overload;
    {class} function ToUInt16(value: UInt64): UInt16; overload;
    {class} function ToUInt16(value: Single): UInt16; overload;
    {class} function ToUInt16(value: Double): UInt16; overload;
    {class} function ToUInt16(value: DNDecimal): UInt16; overload;
    {class} function ToUInt16(value: string): UInt16; overload;
    {class} function ToUInt16(value: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: DNDateTime): UInt16; overload;
    {class} function ToInt32(value: DNObject): Int32; overload;
    {class} function ToInt32(value: DNObject; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: Boolean): Int32; overload;
    {class} function ToInt32(value: Char): Int32; overload;
    {class} function ToInt32(value: SByte): Int32; overload;
    {class} function ToInt32(value: Byte): Int32; overload;
    {class} function ToInt32(value: Int16): Int32; overload;
    {class} function ToInt32(value: UInt16): Int32; overload;
    {class} function ToInt32(value: UInt32): Int32; overload;
    {class} function ToInt32(value: Int32): Int32; overload;
    {class} function ToInt32(value: Int64): Int32; overload;
    {class} function ToInt32(value: UInt64): Int32; overload;
    {class} function ToInt32(value: Single): Int32; overload;
    {class} function ToInt32(value: Double): Int32; overload;
    {class} function ToInt32(value: DNDecimal): Int32; overload;
    {class} function ToInt32(value: string): Int32; overload;
    {class} function ToInt32(value: string; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: DNDateTime): Int32; overload;
    {class} function ToUInt32(value: DNObject): UInt32; overload;
    {class} function ToUInt32(value: DNObject; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: Boolean): UInt32; overload;
    {class} function ToUInt32(value: Char): UInt32; overload;
    {class} function ToUInt32(value: SByte): UInt32; overload;
    {class} function ToUInt32(value: Byte): UInt32; overload;
    {class} function ToUInt32(value: Int16): UInt32; overload;
    {class} function ToUInt32(value: UInt16): UInt32; overload;
    {class} function ToUInt32(value: Int32): UInt32; overload;
    {class} function ToUInt32(value: UInt32): UInt32; overload;
    {class} function ToUInt32(value: Int64): UInt32; overload;
    {class} function ToUInt32(value: UInt64): UInt32; overload;
    {class} function ToUInt32(value: Single): UInt32; overload;
    {class} function ToUInt32(value: Double): UInt32; overload;
    {class} function ToUInt32(value: DNDecimal): UInt32; overload;
    {class} function ToUInt32(value: string): UInt32; overload;
    {class} function ToUInt32(value: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: DNDateTime): UInt32; overload;
    {class} function ToInt64(value: DNObject): Int64; overload;
    {class} function ToInt64(value: DNObject; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: Boolean): Int64; overload;
    {class} function ToInt64(value: Char): Int64; overload;
    {class} function ToInt64(value: SByte): Int64; overload;
    {class} function ToInt64(value: Byte): Int64; overload;
    {class} function GetTypeCode(value: DNObject): DNTypeCode;
    {class} function IsDBNull(value: DNObject): Boolean;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode; provider: DNIFormatProvider): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType; provider: DNIFormatProvider): DNObject; overload;
    {class} function ToBoolean(value: DNObject): Boolean; overload;
    {class} function ToBoolean(value: DNObject; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Boolean): Boolean; overload;
    {class} function ToBoolean(value: SByte): Boolean; overload;
    {class} function ToBoolean(value: Char): Boolean; overload;
    {class} function ToBoolean(value: Byte): Boolean; overload;
    {class} function ToBoolean(value: Int16): Boolean; overload;
    {class} function ToBoolean(value: UInt16): Boolean; overload;
    {class} function ToBoolean(value: Int32): Boolean; overload;
    {class} function ToBoolean(value: UInt32): Boolean; overload;
    {class} function ToBoolean(value: Int64): Boolean; overload;
    {class} function ToBoolean(value: UInt64): Boolean; overload;
    {class} function ToBoolean(value: string): Boolean; overload;
    {class} function ToBoolean(value: string; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Single): Boolean; overload;
    {class} function ToBoolean(value: Double): Boolean; overload;
    {class} function ToBoolean(value: DNDecimal): Boolean; overload;
    {class} function ToBoolean(value: DNDateTime): Boolean; overload;
    {class} function ToChar(value: DNObject): Char; overload;
    {class} function ToChar(value: DNObject; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Boolean): Char; overload;
    {class} function ToChar(value: Char): Char; overload;
    {class} function ToChar(value: SByte): Char; overload;
    {class} function ToChar(value: Byte): Char; overload;
    {class} function ToChar(value: Int16): Char; overload;
    {class} function ToChar(value: UInt16): Char; overload;
    {class} function ToChar(value: Int32): Char; overload;
    {class} function ToChar(value: UInt32): Char; overload;
    {class} function ToChar(value: Int64): Char; overload;
    {class} function ToChar(value: UInt64): Char; overload;
    {class} function ToChar(value: string): Char; overload;
    {class} function ToChar(value: string; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Single): Char; overload;
    {class} function ToChar(value: Double): Char; overload;
    {class} function ToChar(value: DNDecimal): Char; overload;
    {class} function ToChar(value: DNDateTime): Char; overload;
    {class} function ToSByte(value: DNObject): SByte; overload;
    {class} function ToSByte(value: DNObject; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: Boolean): SByte; overload;
    {class} function ToSByte(value: SByte): SByte; overload;
    {class} function ToSByte(value: Char): SByte; overload;
    {class} function ToSByte(value: Byte): SByte; overload;
    {class} function ToSByte(value: Int16): SByte; overload;
    {class} function ToSByte(value: UInt16): SByte; overload;
    {class} function ToSByte(value: Int32): SByte; overload;
    {class} function ToSByte(value: UInt32): SByte; overload;
    {class} function ToSByte(value: Int64): SByte; overload;
    {class} function ToSByte(value: UInt64): SByte; overload;
    {class} function ToSByte(value: Single): SByte; overload;
    {class} function ToSByte(value: Double): SByte; overload;
    {class} function ToSByte(value: DNDecimal): SByte; overload;
    {class} function ToSByte(value: string): SByte; overload;
    {class} function ToSByte(value: string; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: DNDateTime): SByte; overload;
    {class} function ToByte(value: DNObject): Byte; overload;
    {class} function ToByte(value: DNObject; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: Boolean): Byte; overload;
    {class} function ToByte(value: Byte): Byte; overload;
    {class} function ToByte(value: Char): Byte; overload;
    {class} function ToByte(value: SByte): Byte; overload;
    {class} function ToByte(value: Int16): Byte; overload;
    {class} function ToByte(value: UInt16): Byte; overload;
    {class} function ToByte(value: Int32): Byte; overload;
    {class} function ToByte(value: UInt32): Byte; overload;
    {class} function ToByte(value: Int64): Byte; overload;

  end;

  [DNTypeName('System.Convert')]
  DNConvert = interface(DNObject)
  ['{BF735C46-D8B1-37B5-9BE4-C2453525DAFF}']
  { methods } 

    function GetType: DNType;
    function ToString: string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: System----------------
  DNDBNullClass = interface(DNObjectClass)
  ['{CD7382E4-6FF5-56DB-ACD4-FBFEA188DB1A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNDBNull;

  { static fields } 

    {class} property Value: DNDBNull read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.DBNull')]
  DNDBNull = interface(DNISerializable)
  ['{BAC7AB5D-24D5-32AC-875E-38A08B3FA904}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDBNull = class(TDNGenericImport<DNDBNullClass, DNDBNull>) end;

  //-------------namespace: System----------------
  DNDelegateClass = interface(DNObjectClass)
  ['{AA0BCE7B-1065-5A34-B56C-E3E532ED3B1E}']
  { static methods } 

    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function Combine(a: DNDelegate; b: DNDelegate): DNDelegate; overload;
    {class} function Combine(delegates: TArray<DNDelegate>): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function Remove(source: DNDelegate; value: DNDelegate): DNDelegate;
    {class} function RemoveAll(source: DNDelegate; value: DNDelegate): DNDelegate;

  end;

  [DNTypeName('System.Delegate')]
  DNDelegate = interface(DNICloneable)
  ['{A4E38AE3-9D3A-380D-ACC2-E41939F8A126}']
  { getters & setters } 

    function get_Target: DNObject;
    function get_Method: DNMethodInfo;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetInvocationList: TArray<DNDelegate>;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Target: DNObject read get_Target;
    property Method: DNMethodInfo read get_Method;
  end;

  TDNDelegate = class(TDNGenericImport<DNDelegateClass, DNDelegate>) end;

  //-------------namespace: System----------------
  DNMulticastDelegateClass = interface(DNDelegateClass)
  ['{9C3EABC8-577B-57FE-82FE-A83C128CEA83}']
  end;

  [DNTypeName('System.MulticastDelegate')]
  DNMulticastDelegate = interface(DNDelegate)
  ['{3D6841A7-3F39-303B-BB0F-F6F0CFCF7EFB}']
  { getters & setters } 

    function get_Target: DNObject;
    function get_Method: DNMethodInfo;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Target: DNObject read get_Target;
    property Method: DNMethodInfo read get_Method;
  end;

  TDNMulticastDelegate = class(TDNGenericImport<DNMulticastDelegateClass, DNMulticastDelegate>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClass = interface(DNObjectClass)
  ['{C4A1B29A-7B60-550D-A326-B6D7F0852569}']
  { static methods } 

    {class} procedure Assume(condition: Boolean); overload;
    {class} procedure Assume(condition: Boolean; userMessage: string); overload;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; userMessage: string); overload;
    {class} procedure &Requires(condition: Boolean); overload;
    {class} procedure &Requires(condition: Boolean; userMessage: string); overload;
    {class} procedure Ensures(condition: Boolean); overload;
    {class} procedure Ensures(condition: Boolean; userMessage: string); overload;
    {class} procedure Invariant(condition: Boolean); overload;
    {class} procedure Invariant(condition: Boolean; userMessage: string); overload;
    {class} function ForAll(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} function Exists(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} procedure EndContractBlock;

  end;

  [DNTypeName('System.Diagnostics.Contracts.Contract')]
  DNContract = interface(DNObject)
  ['{CB7243E6-BA14-3718-B562-67240FD0EA5F}']
  { events } 

    {class} procedure add_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);
    {class} procedure remove_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNContract = class(TDNGenericImport<DNContractClass, DNContract>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebugClass = interface(DNObjectClass)
  ['{ADBEAA79-34EE-5F62-A6D3-5FF2B1F40E64}']
  { static getter & setter } 

    {class} function get_AutoFlush: Boolean;
    {class} procedure set_AutoFlush(value: Boolean);
    {class} function get_IndentLevel: Int32;
    {class} procedure set_IndentLevel(value: Int32);
    {class} function get_IndentSize: Int32;
    {class} procedure set_IndentSize(value: Int32);

  { static methods } 

    {class} function SetProvider(provider: DNDebugProvider): DNDebugProvider;
    {class} procedure Close;
    {class} procedure Flush;
    {class} procedure Indent;
    {class} procedure Unindent;
    {class} procedure Print(message: string); overload;
    {class} procedure Print(format: string; args: TArray<DNObject>); overload;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; message: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessage: string); overload;
    {class} procedure Fail(message: string); overload;
    {class} procedure Fail(message: string; detailMessage: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessageFormat: string; args: TArray<DNObject>); overload;
    {class} procedure WriteLine(message: string); overload;
    {class} procedure Write(message: string); overload;
    {class} procedure WriteLine(value: DNObject); overload;
    {class} procedure WriteLine(value: DNObject; category: string); overload;
    {class} procedure WriteLine(format: string; args: TArray<DNObject>); overload;
    {class} procedure WriteLine(message: string; category: string); overload;
    {class} procedure Write(value: DNObject); overload;
    {class} procedure Write(message: string; category: string); overload;
    {class} procedure Write(value: DNObject; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; message: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DNObject); overload;
    {class} procedure WriteIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DNObject); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string; category: string); overload;

  { static propertys } 

    {class} property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    {class} property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    {class} property IndentSize: Int32 read get_IndentSize write set_IndentSize;
  end;

  [DNTypeName('System.Diagnostics.Debug')]
  DNDebug = interface(DNObject)
  ['{B9BE98A7-AFC1-3008-B571-9D23B7C24119}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDebug = class(TDNGenericImport<DNDebugClass, DNDebug>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerClass = interface(DNObjectClass)
  ['{97963EAF-E5C8-55C5-BD77-2EA8E74677C7}']
  { static getter & setter } 

    {class} function get_IsAttached: Boolean;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultCategory: string;

  { static fields } 

    {class} property DefaultCategory: string read __fakeFieldGet_DefaultCategory;

  { static methods } 

    {class} procedure Break;
    {class} function Launch: Boolean;
    {class} procedure NotifyOfCrossThreadDependency;
    {class} procedure Log(level: Int32; category: string; message: string);
    {class} function IsLogging: Boolean;

  { static propertys } 

    {class} property IsAttached: Boolean read get_IsAttached;
  end;

  [DNTypeName('System.Diagnostics.Debugger')]
  DNDebugger = interface(DNObject)
  ['{43E6007A-3ABC-318E-9090-AEF23165A3D5}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDebugger = class(TDNGenericImport<DNDebuggerClass, DNDebugger>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebugProviderClass = interface(DNObjectClass)
  ['{71CF2360-003D-5DB7-994A-8AEDD004A113}']
  { constructors } 

    {class} function init: DNDebugProvider;

  { static methods } 

    {class} procedure FailCore(stackTrace: string; message: string; detailMessage: string; errorSource: string);
    {class} procedure WriteCore(message: string);

  end;

  [DNTypeName('System.Diagnostics.DebugProvider')]
  DNDebugProvider = interface(DNObject)
  ['{A4D2F6BD-39AA-3CED-AAE1-FCAE7FB5668F}']
  { methods } 

    procedure Fail(message: string; detailMessage: string);
    procedure Write(message: string);
    procedure WriteLine(message: string);
    procedure OnIndentLevelChanged(indentLevel: Int32);
    procedure OnIndentSizeChanged(indentSize: Int32);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDebugProvider = class(TDNGenericImport<DNDebugProviderClass, DNDebugProvider>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackFrameClass = interface(DNObjectClass)
  ['{6736FD31-64B6-5874-94C1-A5C80D5ACDDE}']
  { constructors } 

    {class} function init: DNStackFrame; overload;
    {class} function init(needFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(skipFrames: Int32): DNStackFrame; overload;
    {class} function init(skipFrames: Int32; needFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32; colNumber: Int32): DNStackFrame; overload;

  end;

  [DNTypeName('System.Diagnostics.StackFrame')]
  DNStackFrame = interface(DNObject)
  ['{3716D494-508B-3DA3-8C66-8241746F32A0}']
  { methods } 

    function GetMethod: DNMethodBase;
    function GetNativeOffset: Int32;
    function GetILOffset: Int32;
    function GetFileName: string;
    function GetFileLineNumber: Int32;
    function GetFileColumnNumber: Int32;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>)
  public const
   OFFSET_UNKNOWN = -1;
  end;

  //-------------namespace: System.Diagnostics----------------
  DNStackTraceClass = interface(DNObjectClass)
  ['{10B5EFA9-20E2-55D0-8BFE-07075072E861}']
  { constructors } 

    {class} function init: DNStackTrace; overload;
    {class} function init(fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(skipFrames: Int32): DNStackTrace; overload;
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException): DNStackTrace; overload;
    {class} function init(e: DNException; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(frame: DNStackFrame): DNStackTrace; overload;

  end;

  [DNTypeName('System.Diagnostics.StackTrace')]
  DNStackTrace = interface(DNObject)
  ['{5C6D19B5-DB4B-3459-94FE-D60804E089B3}']
  { getters & setters } 

    function get_FrameCount: Int32;

  { methods } 

    function GetFrame(index: Int32): DNStackFrame;
    function GetFrames: TArray<DNStackFrame>;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FrameCount: Int32 read get_FrameCount;
  end;

  TDNStackTrace = class(TDNGenericImport<DNStackTraceClass, DNStackTrace>)
  public const
   METHODS_TO_SKIP = 0;
  end;

  //-------------namespace: System.Diagnostics----------------
  DNStopwatchClass = interface(DNObjectClass)
  ['{6361E46A-D876-56D0-AFB7-AEC678BC9831}']
  { constructors } 

    {class} function init: DNStopwatch;

  { static fields getter & setter } 

   function __fakeFieldGet_Frequency: Int64;
   function __fakeFieldGet_IsHighResolution: Boolean;

  { static fields } 

    {class} property Frequency: Int64 read __fakeFieldGet_Frequency;
    {class} property IsHighResolution: Boolean read __fakeFieldGet_IsHighResolution;

  { static methods } 

    {class} function StartNew: DNStopwatch;
    {class} function GetTimestamp: Int64;

  end;

  [DNTypeName('System.Diagnostics.Stopwatch')]
  DNStopwatch = interface(DNObject)
  ['{2C5AB7BB-E659-3A89-8224-28795E2E57F1}']
  { getters & setters } 

    function get_IsRunning: Boolean;
    function get_Elapsed: DNTimeSpan;
    function get_ElapsedMilliseconds: Int64;
    function get_ElapsedTicks: Int64;

  { methods } 

    procedure Start;
    procedure Stop;
    procedure Reset;
    procedure Restart;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsRunning: Boolean read get_IsRunning;
    property Elapsed: DNTimeSpan read get_Elapsed;
    property ElapsedMilliseconds: Int64 read get_ElapsedMilliseconds;
    property ElapsedTicks: Int64 read get_ElapsedTicks;
  end;

  TDNStopwatch = class(TDNGenericImport<DNStopwatchClass, DNStopwatch>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNDiagnosticCounterClass = interface(DNObjectClass)
  ['{3C538F19-86DC-55B3-A305-05F45E43E6B0}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.DiagnosticCounter')]
  DNDiagnosticCounter = interface(DNIDisposable)
  ['{6DA57F42-9544-319E-8F2E-BB80BC6D81BF}']
  { getters & setters } 

    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_DisplayUnits: string;
    procedure set_DisplayUnits(value: string);
    function get_Name: string;
    function get_EventSource: DNEventSource;

  { methods } 

    procedure Dispose;
    procedure AddMetadata(key: string; value: string);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DisplayName: string read get_DisplayName write set_DisplayName;
    property DisplayUnits: string read get_DisplayUnits write set_DisplayUnits;
    property Name: string read get_Name;
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNDiagnosticCounter = class(TDNGenericImport<DNDiagnosticCounterClass, DNDiagnosticCounter>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventCounterClass = interface(DNDiagnosticCounterClass)
  ['{9BCF3900-8E34-50EF-BC32-6859682EDD2C}']
  { constructors } 

    {class} function init(name: string; eventSource: DNEventSource): DNEventCounter;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventCounter')]
  DNEventCounter = interface(DNDiagnosticCounter)
  ['{3F5CBD8C-5D96-3FE5-A128-F42272C763C8}']
  { getters & setters } 

    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_DisplayUnits: string;
    procedure set_DisplayUnits(value: string);
    function get_Name: string;
    function get_EventSource: DNEventSource;

  { methods } 

    procedure WriteMetric(value: Single); overload;
    procedure WriteMetric(value: Double); overload;
    function ToString: string;
    procedure Dispose;
    procedure AddMetadata(key: string; value: string);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DisplayName: string read get_DisplayName write set_DisplayName;
    property DisplayUnits: string read get_DisplayUnits write set_DisplayUnits;
    property Name: string read get_Name;
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNEventCounter = class(TDNGenericImport<DNEventCounterClass, DNEventCounter>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNIncrementingEventCounterClass = interface(DNDiagnosticCounterClass)
  ['{59C6438F-A7D6-5E03-B7B2-8AED66D7C443}']
  { constructors } 

    {class} function init(name: string; eventSource: DNEventSource): DNIncrementingEventCounter;

  end;

  [DNTypeName('System.Diagnostics.Tracing.IncrementingEventCounter')]
  DNIncrementingEventCounter = interface(DNDiagnosticCounter)
  ['{27B01E1D-523B-3740-A7C7-8EEC437BE512}']
  { getters & setters } 

    function get_DisplayRateTimeScale: DNTimeSpan;
    procedure set_DisplayRateTimeScale(value: DNTimeSpan);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_DisplayUnits: string;
    procedure set_DisplayUnits(value: string);
    function get_Name: string;
    function get_EventSource: DNEventSource;

  { methods } 

    procedure Increment(increment: Double);
    function ToString: string;
    procedure Dispose;
    procedure AddMetadata(key: string; value: string);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DisplayRateTimeScale: DNTimeSpan read get_DisplayRateTimeScale write set_DisplayRateTimeScale;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property DisplayUnits: string read get_DisplayUnits write set_DisplayUnits;
    property Name: string read get_Name;
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNIncrementingEventCounter = class(TDNGenericImport<DNIncrementingEventCounterClass, DNIncrementingEventCounter>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNIncrementingPollingCounterClass = interface(DNDiagnosticCounterClass)
  ['{3606F515-2FFD-5DA7-81F0-12872574385F}']
  { constructors } 

    {class} function init(name: string; eventSource: DNEventSource; totalValueProvider: DNFunc<Double>): DNIncrementingPollingCounter;

  end;

  [DNTypeName('System.Diagnostics.Tracing.IncrementingPollingCounter')]
  DNIncrementingPollingCounter = interface(DNDiagnosticCounter)
  ['{CD77C112-0963-377D-AAA9-4EA679725117}']
  { getters & setters } 

    function get_DisplayRateTimeScale: DNTimeSpan;
    procedure set_DisplayRateTimeScale(value: DNTimeSpan);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_DisplayUnits: string;
    procedure set_DisplayUnits(value: string);
    function get_Name: string;
    function get_EventSource: DNEventSource;

  { methods } 

    function ToString: string;
    procedure Dispose;
    procedure AddMetadata(key: string; value: string);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DisplayRateTimeScale: DNTimeSpan read get_DisplayRateTimeScale write set_DisplayRateTimeScale;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property DisplayUnits: string read get_DisplayUnits write set_DisplayUnits;
    property Name: string read get_Name;
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNIncrementingPollingCounter = class(TDNGenericImport<DNIncrementingPollingCounterClass, DNIncrementingPollingCounter>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNPollingCounterClass = interface(DNDiagnosticCounterClass)
  ['{9A2A0B2A-196D-5E22-996C-54782E3EC15A}']
  { constructors } 

    {class} function init(name: string; eventSource: DNEventSource; metricProvider: DNFunc<Double>): DNPollingCounter;

  end;

  [DNTypeName('System.Diagnostics.Tracing.PollingCounter')]
  DNPollingCounter = interface(DNDiagnosticCounter)
  ['{00EB715D-B60F-3172-B632-92E3A82B60DD}']
  { getters & setters } 

    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_DisplayUnits: string;
    procedure set_DisplayUnits(value: string);
    function get_Name: string;
    function get_EventSource: DNEventSource;

  { methods } 

    function ToString: string;
    procedure Dispose;
    procedure AddMetadata(key: string; value: string);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DisplayName: string read get_DisplayName write set_DisplayName;
    property DisplayUnits: string read get_DisplayUnits write set_DisplayUnits;
    property Name: string read get_Name;
    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNPollingCounter = class(TDNGenericImport<DNPollingCounterClass, DNPollingCounter>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventListenerClass = interface(DNObjectClass)
  ['{29A11BA0-45DF-5185-9E27-AE4AA7FED440}']
  { constructors } 

    {class} function init: DNEventListener;

  { static methods } 

    {class} function EventSourceIndex(eventSource: DNEventSource): Int32;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventListener')]
  DNEventListener = interface(DNIDisposable)
  ['{B1548CE7-5A47-3A6A-908C-434D252A9FE9}']
  { events } 

    procedure add_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure remove_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure add_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);
    procedure remove_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);

  { methods } 

    procedure Dispose;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords; arguments: DNIDictionary<string, string>); overload;
    procedure DisableEvents(eventSource: DNEventSource);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEventListener = class(TDNGenericImport<DNEventListenerClass, DNEventListener>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceClass = interface(DNObjectClass)
  ['{5D0363EA-5EB4-5FBE-BBE2-1BB4FAE0A767}']
  { static getter & setter } 

    {class} function get_CurrentThreadActivityId: DNGuid;

  { constructors } 

    {class} function init(eventSourceName: string): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings; traits: TArray<string>): DNEventSource; overload;

  { static methods } 

    {class} function GetGuid(eventSourceType: DNType): DNGuid;
    {class} function GetName(eventSourceType: DNType): string;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string): string; overload;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string; flags: DNEventManifestOptions): string; overload;
    {class} function GetSources: DNIEnumerable<DNEventSource>;
    {class} procedure SendCommand(eventSource: DNEventSource; command: DNEventCommand; commandArguments: DNIDictionary<string, string>);
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid); overload;
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid; out oldActivityThatWillContinue: DNGuid); overload;

  { static propertys } 

    {class} property CurrentThreadActivityId: DNGuid read get_CurrentThreadActivityId;
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSource')]
  DNEventSource = interface(DNIDisposable)
  ['{62A844EE-DEDB-36A1-86D5-3DDC8A821252}']
  { getters & setters } 

    function get_Name: string;
    function get_Guid: DNGuid;
    function get_Settings: DNEventSourceSettings;
    function get_ConstructionException: DNException;

  { events } 

    procedure add_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);
    procedure remove_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);

  { methods } 

    procedure Write(eventName: string); overload;
    procedure Write(eventName: string; options: DNEventSourceOptions); overload;
    function IsEnabled: Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords): Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords; channel: DNEventChannel): Boolean; overload;
    function GetTrait(key: string): string;
    function ToString: string;
    procedure Dispose;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Guid: DNGuid read get_Guid;
    property Settings: DNEventSourceSettings read get_Settings;
    property ConstructionException: DNException read get_ConstructionException;
  end;

  TDNEventSource = class(TDNGenericImport<DNEventSourceClass, DNEventSource>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNTraceLoggingEventTypesClass = interface(DNObjectClass)
  ['{A6F8229A-5420-57BE-84D0-FE4AC9C4F220}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.TraceLoggingEventTypes')]
  DNTraceLoggingEventTypes = interface(DNObject)
  ['{189DCCAE-1CFB-3D13-83A8-5C05D1436458}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTraceLoggingEventTypes = class(TDNGenericImport<DNTraceLoggingEventTypesClass, DNTraceLoggingEventTypes>) end;

  //-------------namespace: System----------------
  DNEnvironmentClass = interface(DNObjectClass)
  ['{C1DED1DD-A9A4-5D6F-A822-7A7717270A4A}']
  { static getter & setter } 

    {class} function get_CurrentManagedThreadId: Int32;
    {class} function get_ExitCode: Int32;
    {class} procedure set_ExitCode(value: Int32);
    {class} function get_StackTrace: string;
    {class} function get_TickCount: Int32;
    {class} function get_TickCount64: Int64;
    {class} function get_ProcessorCount: Int32;
    {class} function get_HasShutdownStarted: Boolean;
    {class} function get_CommandLine: string;
    {class} function get_CurrentDirectory: string;
    {class} procedure set_CurrentDirectory(value: string);
    {class} function get_ProcessId: Int32;
    {class} function get_Is64BitProcess: Boolean;
    {class} function get_Is64BitOperatingSystem: Boolean;
    {class} function get_NewLine: string;
    {class} function get_OSVersion: DNOperatingSystem;
    {class} function get_Version: DNVersion;
    {class} function get_UserName: string;
    {class} function get_UserDomainName: string;
    {class} function get_SystemPageSize: Int32;
    {class} function get_MachineName: string;
    {class} function get_SystemDirectory: string;
    {class} function get_UserInteractive: Boolean;
    {class} function get_WorkingSet: Int64;

  { static methods } 

    {class} procedure &Exit(exitCode: Int32);
    {class} procedure FailFast(message: string); overload;
    {class} procedure FailFast(message: string; exception: DNException); overload;
    {class} procedure FailFast(message: string; exception: DNException; errorMessage: string); overload;
    {class} function GetCommandLineArgs: TArray<string>;
    {class} function GetEnvironmentVariable(variable: string): string; overload;
    {class} function GetEnvironmentVariable(variable: string; target: DNEnvironmentVariableTarget): string; overload;
    {class} function GetEnvironmentVariables(target: DNEnvironmentVariableTarget): DNIDictionary; overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string); overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string; target: DNEnvironmentVariableTarget); overload;
    {class} function ExpandEnvironmentVariables(name: string): string;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder): string; overload;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder; option: DNEnvironment_SpecialFolderOption): string; overload;
    {class} function GetLogicalDrives: TArray<string>;
    {class} function GetEnvironmentVariables: DNIDictionary; overload;

  { static propertys } 

    {class} property CurrentManagedThreadId: Int32 read get_CurrentManagedThreadId;
    {class} property ExitCode: Int32 read get_ExitCode write set_ExitCode;
    {class} property StackTrace: string read get_StackTrace;
    {class} property TickCount: Int32 read get_TickCount;
    {class} property TickCount64: Int64 read get_TickCount64;
    {class} property ProcessorCount: Int32 read get_ProcessorCount;
    {class} property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    {class} property CommandLine: string read get_CommandLine;
    {class} property CurrentDirectory: string read get_CurrentDirectory write set_CurrentDirectory;
    {class} property ProcessId: Int32 read get_ProcessId;
    {class} property Is64BitProcess: Boolean read get_Is64BitProcess;
    {class} property Is64BitOperatingSystem: Boolean read get_Is64BitOperatingSystem;
    {class} property NewLine: string read get_NewLine;
    {class} property OSVersion: DNOperatingSystem read get_OSVersion;
    {class} property Version: DNVersion read get_Version;
    {class} property UserName: string read get_UserName;
    {class} property UserDomainName: string read get_UserDomainName;
    {class} property SystemPageSize: Int32 read get_SystemPageSize;
    {class} property MachineName: string read get_MachineName;
    {class} property SystemDirectory: string read get_SystemDirectory;
    {class} property UserInteractive: Boolean read get_UserInteractive;
    {class} property WorkingSet: Int64 read get_WorkingSet;
  end;

  [DNTypeName('System.Environment')]
  DNEnvironment = interface(DNObject)
  ['{6F2DD4FD-0048-32BA-A3EB-BF5A560C03C8}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEnvironment = class(TDNGenericImport<DNEnvironmentClass, DNEnvironment>) end;

  //-------------namespace: System----------------
  DNEventArgsClass = interface(DNObjectClass)
  ['{98119E94-A22C-5F37-9DB4-33360A733E4A}']
  { constructors } 

    {class} function init: DNEventArgs;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventArgs;

  { static fields } 

    {class} property Empty: DNEventArgs read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.EventArgs')]
  DNEventArgs = interface(DNObject)
  ['{8C5FCC3C-81A8-3004-A1FA-11AC55D244C1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEventArgs = class(TDNGenericImport<DNEventArgsClass, DNEventArgs>) end;

  //-------------namespace: System----------------
  DNAssemblyLoadEventArgsClass = interface(DNEventArgsClass)
  ['{05EED53C-B345-5B72-AF4A-5BFE99BF5D69}']
  { constructors } 

    {class} function init(loadedAssembly: DNAssembly): DNAssemblyLoadEventArgs;

  end;

  [DNTypeName('System.AssemblyLoadEventArgs')]
  DNAssemblyLoadEventArgs = interface(DNEventArgs)
  ['{7C1E2D87-8040-35AB-9354-69BCEF2E9B7C}']
  { getters & setters } 

    function get_LoadedAssembly: DNAssembly;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LoadedAssembly: DNAssembly read get_LoadedAssembly;
  end;

  TDNAssemblyLoadEventArgs = class(TDNGenericImport<DNAssemblyLoadEventArgsClass, DNAssemblyLoadEventArgs>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractFailedEventArgsClass = interface(DNEventArgsClass)
  ['{14DCD3DE-F104-50D4-92E5-7E989CF1BAD2}']
  { constructors } 

    {class} function init(failureKind: DNContractFailureKind; message: string; condition: string; originalException: DNException): DNContractFailedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractFailedEventArgs')]
  DNContractFailedEventArgs = interface(DNEventArgs)
  ['{2EDBBCB5-E0DF-334D-ACBB-579E041FEB88}']
  { getters & setters } 

    function get_Message: string;
    function get_Condition: string;
    function get_FailureKind: DNContractFailureKind;
    function get_OriginalException: DNException;
    function get_Handled: Boolean;
    function get_Unwind: Boolean;

  { methods } 

    procedure SetHandled;
    procedure SetUnwind;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Condition: string read get_Condition;
    property FailureKind: DNContractFailureKind read get_FailureKind;
    property OriginalException: DNException read get_OriginalException;
    property Handled: Boolean read get_Handled;
    property Unwind: Boolean read get_Unwind;
  end;

  TDNContractFailedEventArgs = class(TDNGenericImport<DNContractFailedEventArgsClass, DNContractFailedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventCommandEventArgsClass = interface(DNEventArgsClass)
  ['{EF40A972-D69E-5004-8230-846485E3F49D}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventCommandEventArgs')]
  DNEventCommandEventArgs = interface(DNEventArgs)
  ['{E0707F4B-D1D5-3F0A-A4B6-19C4FD34A81E}']
  { getters & setters } 

    function get_Command: DNEventCommand;
    function get_Arguments: DNIDictionary<string, string>;

  { methods } 

    function EnableEvent(eventId: Int32): Boolean;
    function DisableEvent(eventId: Int32): Boolean;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Command: DNEventCommand read get_Command;
    property Arguments: DNIDictionary<string, string> read get_Arguments;
  end;

  TDNEventCommandEventArgs = class(TDNGenericImport<DNEventCommandEventArgsClass, DNEventCommandEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceCreatedEventArgsClass = interface(DNEventArgsClass)
  ['{941F2AA5-A56A-541D-BA35-34B9FF6766BB}']
  { constructors } 

    {class} function init: DNEventSourceCreatedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceCreatedEventArgs')]
  DNEventSourceCreatedEventArgs = interface(DNEventArgs)
  ['{A29E2293-3846-3C88-82F2-C451A7BBF98B}']
  { getters & setters } 

    function get_EventSource: DNEventSource;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNEventSourceCreatedEventArgs = class(TDNGenericImport<DNEventSourceCreatedEventArgsClass, DNEventSourceCreatedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventWrittenEventArgsClass = interface(DNEventArgsClass)
  ['{86FA7476-3E3B-5D00-B8A6-7F15BB913C66}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventWrittenEventArgs')]
  DNEventWrittenEventArgs = interface(DNEventArgs)
  ['{1E6223CD-1AC0-31E1-80AC-D88210A54EDC}']
  { getters & setters } 

    function get_EventName: string;
    function get_EventId: Int32;
    function get_ActivityId: DNGuid;
    function get_RelatedActivityId: DNGuid;
    function get_Payload: DNReadOnlyCollection<DNObject>;
    function get_PayloadNames: DNReadOnlyCollection<string>;
    function get_EventSource: DNEventSource;
    function get_Keywords: DNEventKeywords;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Tags: DNEventTags;
    function get_Message: string;
    function get_Channel: DNEventChannel;
    function get_Version: Byte;
    function get_Level: DNEventLevel;
    function get_OSThreadId: Int64;
    function get_TimeStamp: DNDateTime;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property EventName: string read get_EventName;
    property EventId: Int32 read get_EventId;
    property ActivityId: DNGuid read get_ActivityId;
    property RelatedActivityId: DNGuid read get_RelatedActivityId;
    property Payload: DNReadOnlyCollection<DNObject> read get_Payload;
    property PayloadNames: DNReadOnlyCollection<string> read get_PayloadNames;
    property EventSource: DNEventSource read get_EventSource;
    property Keywords: DNEventKeywords read get_Keywords;
    property Opcode: DNEventOpcode read get_Opcode;
    property Task: DNEventTask read get_Task;
    property Tags: DNEventTags read get_Tags;
    property Message: string read get_Message;
    property Channel: DNEventChannel read get_Channel;
    property Version: Byte read get_Version;
    property Level: DNEventLevel read get_Level;
    property OSThreadId: Int64 read get_OSThreadId;
    property TimeStamp: DNDateTime read get_TimeStamp;
  end;

  TDNEventWrittenEventArgs = class(TDNGenericImport<DNEventWrittenEventArgsClass, DNEventWrittenEventArgs>) end;

  //-------------namespace: System----------------
  DNResolveEventArgsClass = interface(DNEventArgsClass)
  ['{76641259-3EFE-5709-B394-6291562F6B5E}']
  { constructors } 

    {class} function init(name: string): DNResolveEventArgs; overload;
    {class} function init(name: string; requestingAssembly: DNAssembly): DNResolveEventArgs; overload;

  end;

  [DNTypeName('System.ResolveEventArgs')]
  DNResolveEventArgs = interface(DNEventArgs)
  ['{8360A19F-3E04-3276-A658-2AB1D1462393}']
  { getters & setters } 

    function get_Name: string;
    function get_RequestingAssembly: DNAssembly;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
  end;

  TDNResolveEventArgs = class(TDNGenericImport<DNResolveEventArgsClass, DNResolveEventArgs>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNFirstChanceExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{426C4ADD-6E9E-5B5D-AB73-6238CC54620B}']
  { constructors } 

    {class} function init(exception: DNException): DNFirstChanceExceptionEventArgs;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs')]
  DNFirstChanceExceptionEventArgs = interface(DNEventArgs)
  ['{A70CD1E4-92CB-3C36-AD4C-4D4C1B6BB124}']
  { getters & setters } 

    function get_Exception: DNException;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Exception: DNException read get_Exception;
  end;

  TDNFirstChanceExceptionEventArgs = class(TDNGenericImport<DNFirstChanceExceptionEventArgsClass, DNFirstChanceExceptionEventArgs>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSafeSerializationEventArgsClass = interface(DNEventArgsClass)
  ['{71967B61-3831-5C45-BCFD-C46970311CB8}']
  end;

  [DNTypeName('System.Runtime.Serialization.SafeSerializationEventArgs')]
  DNSafeSerializationEventArgs = interface(DNEventArgs)
  ['{0A3694E9-7192-3849-A9D7-978BCE9E6095}']
  { getters & setters } 

    function get_StreamingContext: DNStreamingContext;

  { methods } 

    procedure AddSerializedState(serializedState: DNISafeSerializationData);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property StreamingContext: DNStreamingContext read get_StreamingContext;
  end;

  TDNSafeSerializationEventArgs = class(TDNGenericImport<DNSafeSerializationEventArgsClass, DNSafeSerializationEventArgs>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNUnobservedTaskExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{5BC447B0-BBEB-54DA-BEB8-8F94DB219C81}']
  { constructors } 

    {class} function init(exception: DNAggregateException): DNUnobservedTaskExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.Tasks.UnobservedTaskExceptionEventArgs')]
  DNUnobservedTaskExceptionEventArgs = interface(DNEventArgs)
  ['{7B396C97-E4DF-35F2-90F4-6D6FD24B3D9E}']
  { getters & setters } 

    function get_Observed: Boolean;
    function get_Exception: DNAggregateException;

  { methods } 

    procedure SetObserved;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Observed: Boolean read get_Observed;
    property Exception: DNAggregateException read get_Exception;
  end;

  TDNUnobservedTaskExceptionEventArgs = class(TDNGenericImport<DNUnobservedTaskExceptionEventArgsClass, DNUnobservedTaskExceptionEventArgs>) end;

  //-------------namespace: System.Threading----------------
  DNThreadExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{2E1C89A3-AEFE-5415-8635-AF77791A2102}']
  { constructors } 

    {class} function init(t: DNException): DNThreadExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.ThreadExceptionEventArgs')]
  DNThreadExceptionEventArgs = interface(DNEventArgs)
  ['{D9C5CD2B-34D5-3947-AC65-6D96E8EBBD40}']
  { getters & setters } 

    function get_Exception: DNException;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Exception: DNException read get_Exception;
  end;

  TDNThreadExceptionEventArgs = class(TDNGenericImport<DNThreadExceptionEventArgsClass, DNThreadExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNUnhandledExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{690F53A4-B962-595F-A45E-2BEF500C5A9F}']
  { constructors } 

    {class} function init(exception: DNObject; isTerminating: Boolean): DNUnhandledExceptionEventArgs;

  end;

  [DNTypeName('System.UnhandledExceptionEventArgs')]
  DNUnhandledExceptionEventArgs = interface(DNEventArgs)
  ['{49C50CBC-8F9E-328B-B1F6-5CAE70E556D8}']
  { getters & setters } 

    function get_ExceptionObject: DNObject;
    function get_IsTerminating: Boolean;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ExceptionObject: DNObject read get_ExceptionObject;
    property IsTerminating: Boolean read get_IsTerminating;
  end;

  TDNUnhandledExceptionEventArgs = class(TDNGenericImport<DNUnhandledExceptionEventArgsClass, DNUnhandledExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNExceptionClass = interface(DNObjectClass)
  ['{3D524743-DF0E-58B6-918A-74E442FB1096}']
  { constructors } 

    {class} function init: DNException; overload;
    {class} function init(message: string): DNException; overload;
    {class} function init(message: string; innerException: DNException): DNException; overload;

  end;

  [DNTypeName('System.Exception')]
  DNException = interface(DNISerializable)
  ['{700D8606-45EE-3133-A681-79F92B8CA53E}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNException = class(TDNGenericImport<DNExceptionClass, DNException>) end;

  //-------------namespace: System----------------
  DNAggregateExceptionClass = interface(DNExceptionClass)
  ['{5B10ABA5-40DE-51E0-9DF7-0747B92C75D8}']
  { constructors } 

    {class} function init: DNAggregateException; overload;
    {class} function init(message: string): DNAggregateException; overload;
    {class} function init(message: string; innerException: DNException): DNAggregateException; overload;
    {class} function init(innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(innerExceptions: TArray<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: TArray<DNException>): DNAggregateException; overload;

  end;

  [DNTypeName('System.AggregateException')]
  DNAggregateException = interface(DNException)
  ['{1965FA92-A7D1-32EF-8F74-E1A80CCC783C}']
  { getters & setters } 

    function get_InnerExceptions: DNReadOnlyCollection<DNException>;
    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    procedure Handle(predicate: DNFunc<DNException, Boolean>);
    function Flatten: DNAggregateException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InnerExceptions: DNReadOnlyCollection<DNException> read get_InnerExceptions;
    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAggregateException = class(TDNGenericImport<DNAggregateExceptionClass, DNAggregateException>) end;

  //-------------namespace: System----------------
  DNApplicationExceptionClass = interface(DNExceptionClass)
  ['{E6A7C0D6-81C0-5572-98DC-2888D5309780}']
  { constructors } 

    {class} function init: DNApplicationException; overload;
    {class} function init(message: string): DNApplicationException; overload;
    {class} function init(message: string; innerException: DNException): DNApplicationException; overload;

  end;

  [DNTypeName('System.ApplicationException')]
  DNApplicationException = interface(DNException)
  ['{8F2748CE-5D92-3B55-80BA-CE03B81110B4}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNApplicationException = class(TDNGenericImport<DNApplicationExceptionClass, DNApplicationException>) end;

  //-------------namespace: System.Reflection----------------
  DNInvalidFilterCriteriaExceptionClass = interface(DNApplicationExceptionClass)
  ['{97BAB5B9-2B3A-53C3-96A5-26FDE7084143}']
  { constructors } 

    {class} function init: DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string): DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidFilterCriteriaException; overload;

  end;

  [DNTypeName('System.Reflection.InvalidFilterCriteriaException')]
  DNInvalidFilterCriteriaException = interface(DNApplicationException)
  ['{E8682CA1-A57A-3DDB-B91B-5771C78227AE}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidFilterCriteriaException = class(TDNGenericImport<DNInvalidFilterCriteriaExceptionClass, DNInvalidFilterCriteriaException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetExceptionClass = interface(DNApplicationExceptionClass)
  ['{0B17B63E-A850-5E1C-BB98-D204E89F5F1A}']
  { constructors } 

    {class} function init: DNTargetException; overload;
    {class} function init(message: string): DNTargetException; overload;
    {class} function init(message: string; inner: DNException): DNTargetException; overload;

  end;

  [DNTypeName('System.Reflection.TargetException')]
  DNTargetException = interface(DNApplicationException)
  ['{B90E5084-E731-32FD-B1AD-9CB7CBEC0124}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTargetException = class(TDNGenericImport<DNTargetExceptionClass, DNTargetException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetInvocationExceptionClass = interface(DNApplicationExceptionClass)
  ['{3C77DF35-4F7B-5C6B-81ED-38506137CF91}']
  { constructors } 

    {class} function init(inner: DNException): DNTargetInvocationException; overload;
    {class} function init(message: string; inner: DNException): DNTargetInvocationException; overload;

  end;

  [DNTypeName('System.Reflection.TargetInvocationException')]
  DNTargetInvocationException = interface(DNApplicationException)
  ['{13997342-C1BE-387D-A1A7-0881AA9A3243}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTargetInvocationException = class(TDNGenericImport<DNTargetInvocationExceptionClass, DNTargetInvocationException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetParameterCountExceptionClass = interface(DNApplicationExceptionClass)
  ['{3E0206E4-EA08-5B53-A54E-DF80312CA4F7}']
  { constructors } 

    {class} function init: DNTargetParameterCountException; overload;
    {class} function init(message: string): DNTargetParameterCountException; overload;
    {class} function init(message: string; inner: DNException): DNTargetParameterCountException; overload;

  end;

  [DNTypeName('System.Reflection.TargetParameterCountException')]
  DNTargetParameterCountException = interface(DNApplicationException)
  ['{C1158676-F56D-3359-A212-ADF130A775BF}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTargetParameterCountException = class(TDNGenericImport<DNTargetParameterCountExceptionClass, DNTargetParameterCountException>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleCannotBeOpenedExceptionClass = interface(DNApplicationExceptionClass)
  ['{E4E9AFB8-FAD4-5649-894C-9ACE592EE5CD}']
  { constructors } 

    {class} function init: DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string): DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string; innerException: DNException): DNWaitHandleCannotBeOpenedException; overload;

  end;

  [DNTypeName('System.Threading.WaitHandleCannotBeOpenedException')]
  DNWaitHandleCannotBeOpenedException = interface(DNApplicationException)
  ['{622C6568-996B-3C71-B6BF-A53A8B61E487}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNWaitHandleCannotBeOpenedException = class(TDNGenericImport<DNWaitHandleCannotBeOpenedExceptionClass, DNWaitHandleCannotBeOpenedException>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractExceptionClass = interface(DNExceptionClass)
  ['{5CCCB5A3-1F56-532D-85BE-5B7A645FBF1C}']
  { constructors } 

    {class} function init(kind: DNContractFailureKind; failure: string; userMessage: string; condition: string; innerException: DNException): DNContractException;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractException')]
  DNContractException = interface(DNException)
  ['{A1521071-A7DB-3E9E-9BB2-B0006C493132}']
  { getters & setters } 

    function get_Kind: DNContractFailureKind;
    function get_Failure: string;
    function get_UserMessage: string;
    function get_Condition: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Kind: DNContractFailureKind read get_Kind;
    property Failure: string read get_Failure;
    property UserMessage: string read get_UserMessage;
    property Condition: string read get_Condition;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNContractException = class(TDNGenericImport<DNContractExceptionClass, DNContractException>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceExceptionClass = interface(DNExceptionClass)
  ['{4FCA7E0E-DDFD-51D0-8418-4995CF3E6AA4}']
  { constructors } 

    {class} function init: DNEventSourceException; overload;
    {class} function init(message: string): DNEventSourceException; overload;
    {class} function init(message: string; innerException: DNException): DNEventSourceException; overload;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceException')]
  DNEventSourceException = interface(DNException)
  ['{3DD040A8-312C-31C7-85C8-8B64FD0D2BCF}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNEventSourceException = class(TDNGenericImport<DNEventSourceExceptionClass, DNEventSourceException>) end;

  //-------------namespace: System----------------
  DNInvalidTimeZoneExceptionClass = interface(DNExceptionClass)
  ['{B4FF6369-C853-5948-92B6-2FDB005046ED}']
  { constructors } 

    {class} function init: DNInvalidTimeZoneException; overload;
    {class} function init(message: string): DNInvalidTimeZoneException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidTimeZoneException; overload;

  end;

  [DNTypeName('System.InvalidTimeZoneException')]
  DNInvalidTimeZoneException = interface(DNException)
  ['{24D85788-3329-3842-8CDA-C675A896074D}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidTimeZoneException = class(TDNGenericImport<DNInvalidTimeZoneExceptionClass, DNInvalidTimeZoneException>) end;

  //-------------namespace: System.Runtime----------------
  DNAmbiguousImplementationExceptionClass = interface(DNExceptionClass)
  ['{632DA4EE-481A-5D7F-BC53-7C2E5AC00E4F}']
  { constructors } 

    {class} function init: DNAmbiguousImplementationException; overload;
    {class} function init(message: string): DNAmbiguousImplementationException; overload;
    {class} function init(message: string; innerException: DNException): DNAmbiguousImplementationException; overload;

  end;

  [DNTypeName('System.Runtime.AmbiguousImplementationException')]
  DNAmbiguousImplementationException = interface(DNException)
  ['{2B6DD29A-6EB9-3576-B938-FDE109E99600}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAmbiguousImplementationException = class(TDNGenericImport<DNAmbiguousImplementationExceptionClass, DNAmbiguousImplementationException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeWrappedExceptionClass = interface(DNExceptionClass)
  ['{17FCA3FA-4611-5214-90E7-A44E60696B22}']
  { constructors } 

    {class} function init(thrownObject: DNObject): DNRuntimeWrappedException;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeWrappedException')]
  DNRuntimeWrappedException = interface(DNException)
  ['{84C7A9B7-E330-310E-A0E4-51CF2153A90E}']
  { getters & setters } 

    function get_WrappedException: DNObject;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedException: DNObject read get_WrappedException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNRuntimeWrappedException = class(TDNGenericImport<DNRuntimeWrappedExceptionClass, DNRuntimeWrappedException>) end;

  //-------------namespace: System----------------
  DNSystemExceptionClass = interface(DNExceptionClass)
  ['{26013D68-FCE6-58EC-AFEF-7686340C8510}']
  { constructors } 

    {class} function init: DNSystemException; overload;
    {class} function init(message: string): DNSystemException; overload;
    {class} function init(message: string; innerException: DNException): DNSystemException; overload;

  end;

  [DNTypeName('System.SystemException')]
  DNSystemException = interface(DNException)
  ['{36384389-FA28-3266-8357-E9531C92D9B5}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSystemException = class(TDNGenericImport<DNSystemExceptionClass, DNSystemException>) end;

  //-------------namespace: System----------------
  DNAccessViolationExceptionClass = interface(DNSystemExceptionClass)
  ['{B67B9FB1-A3E2-5E58-85F5-4BF9C3EB024F}']
  { constructors } 

    {class} function init: DNAccessViolationException; overload;
    {class} function init(message: string): DNAccessViolationException; overload;
    {class} function init(message: string; innerException: DNException): DNAccessViolationException; overload;

  end;

  [DNTypeName('System.AccessViolationException')]
  DNAccessViolationException = interface(DNSystemException)
  ['{DA583394-9193-3AC7-BECB-D0BB38887372}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAccessViolationException = class(TDNGenericImport<DNAccessViolationExceptionClass, DNAccessViolationException>) end;

  //-------------namespace: System----------------
  DNAppDomainUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{39337059-1AC8-5A4B-A67F-953144408194}']
  { constructors } 

    {class} function init: DNAppDomainUnloadedException; overload;
    {class} function init(message: string): DNAppDomainUnloadedException; overload;
    {class} function init(message: string; innerException: DNException): DNAppDomainUnloadedException; overload;

  end;

  [DNTypeName('System.AppDomainUnloadedException')]
  DNAppDomainUnloadedException = interface(DNSystemException)
  ['{B47144FA-94FE-3D65-8057-7FB615362A8A}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAppDomainUnloadedException = class(TDNGenericImport<DNAppDomainUnloadedExceptionClass, DNAppDomainUnloadedException>) end;

  //-------------namespace: System----------------
  DNArgumentExceptionClass = interface(DNSystemExceptionClass)
  ['{E5A9B832-91D7-59F7-8680-D6FF9E6603FA}']
  { constructors } 

    {class} function init: DNArgumentException; overload;
    {class} function init(message: string): DNArgumentException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string): DNArgumentException; overload;

  end;

  [DNTypeName('System.ArgumentException')]
  DNArgumentException = interface(DNSystemException)
  ['{B1B32996-A966-3FFC-845B-7C54BB781713}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNArgumentException = class(TDNGenericImport<DNArgumentExceptionClass, DNArgumentException>) end;

  //-------------namespace: System----------------
  DNArgumentNullExceptionClass = interface(DNArgumentExceptionClass)
  ['{09848375-7E49-552D-B7FD-AB80DF631391}']
  { constructors } 

    {class} function init: DNArgumentNullException; overload;
    {class} function init(paramName: string): DNArgumentNullException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentNullException; overload;
    {class} function init(paramName: string; message: string): DNArgumentNullException; overload;

  end;

  [DNTypeName('System.ArgumentNullException')]
  DNArgumentNullException = interface(DNArgumentException)
  ['{EC21B625-4AED-3395-BB6F-7300CB492E2C}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNArgumentNullException = class(TDNGenericImport<DNArgumentNullExceptionClass, DNArgumentNullException>) end;

  //-------------namespace: System----------------
  DNArgumentOutOfRangeExceptionClass = interface(DNArgumentExceptionClass)
  ['{3B2B1CA4-ABB0-516A-998A-E040E663389C}']
  { constructors } 

    {class} function init: DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; message: string): DNArgumentOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; actualValue: DNObject; message: string): DNArgumentOutOfRangeException; overload;

  end;

  [DNTypeName('System.ArgumentOutOfRangeException')]
  DNArgumentOutOfRangeException = interface(DNArgumentException)
  ['{CD4A2C79-472F-3F1B-9C13-66861BCCF358}']
  { getters & setters } 

    function get_Message: string;
    function get_ActualValue: DNObject;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ActualValue: DNObject read get_ActualValue;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNArgumentOutOfRangeException = class(TDNGenericImport<DNArgumentOutOfRangeExceptionClass, DNArgumentOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNDuplicateWaitObjectExceptionClass = interface(DNArgumentExceptionClass)
  ['{2F022BEE-9DBF-5A40-B956-A2AF994B66AE}']
  { constructors } 

    {class} function init: DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string): DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string; message: string): DNDuplicateWaitObjectException; overload;
    {class} function init(message: string; innerException: DNException): DNDuplicateWaitObjectException; overload;

  end;

  [DNTypeName('System.DuplicateWaitObjectException')]
  DNDuplicateWaitObjectException = interface(DNArgumentException)
  ['{E1C983FB-173A-3A50-BA86-E98F68910161}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDuplicateWaitObjectException = class(TDNGenericImport<DNDuplicateWaitObjectExceptionClass, DNDuplicateWaitObjectException>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureNotFoundExceptionClass = interface(DNArgumentExceptionClass)
  ['{6B92BDB7-C3D2-5789-972F-49255917A547}']
  { constructors } 

    {class} function init: DNCultureNotFoundException; overload;
    {class} function init(message: string): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureName: string; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureId: Int32; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureId: Int32; message: string): DNCultureNotFoundException; overload;

  end;

  [DNTypeName('System.Globalization.CultureNotFoundException')]
  DNCultureNotFoundException = interface(DNArgumentException)
  ['{44B2F352-D616-3D61-A3C8-4F902440FCB1}']
  { getters & setters } 

    function get_InvalidCultureId: DNNullable<Int32>;
    function get_InvalidCultureName: string;
    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InvalidCultureId: DNNullable<Int32> read get_InvalidCultureId;
    property InvalidCultureName: string read get_InvalidCultureName;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCultureNotFoundException = class(TDNGenericImport<DNCultureNotFoundExceptionClass, DNCultureNotFoundException>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{B83A3959-E6B2-52C7-A523-143DF8B57082}']
  { constructors } 

    {class} function init: DNDecoderFallbackException; overload;
    {class} function init(message: string): DNDecoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNDecoderFallbackException; overload;
    {class} function init(message: string; bytesUnknown: TArray<Byte>; index: Int32): DNDecoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.DecoderFallbackException')]
  DNDecoderFallbackException = interface(DNArgumentException)
  ['{9E8A57D2-EFA3-309E-A913-06C5F3927A01}']
  { getters & setters } 

    function get_BytesUnknown: TArray<Byte>;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BytesUnknown: TArray<Byte> read get_BytesUnknown;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDecoderFallbackException = class(TDNGenericImport<DNDecoderFallbackExceptionClass, DNDecoderFallbackException>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{F425F730-5F1A-5095-B27B-9D60A9D506CD}']
  { constructors } 

    {class} function init: DNEncoderFallbackException; overload;
    {class} function init(message: string): DNEncoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNEncoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.EncoderFallbackException')]
  DNEncoderFallbackException = interface(DNArgumentException)
  ['{D3A2A281-DAEC-38A0-AF57-153751024766}']
  { getters & setters } 

    function get_CharUnknown: Char;
    function get_CharUnknownHigh: Char;
    function get_CharUnknownLow: Char;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function IsUnknownSurrogate: Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CharUnknown: Char read get_CharUnknown;
    property CharUnknownHigh: Char read get_CharUnknownHigh;
    property CharUnknownLow: Char read get_CharUnknownLow;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNEncoderFallbackException = class(TDNGenericImport<DNEncoderFallbackExceptionClass, DNEncoderFallbackException>) end;

  //-------------namespace: System----------------
  DNArithmeticExceptionClass = interface(DNSystemExceptionClass)
  ['{F655613B-9DE3-5CDF-95CE-CAB236486294}']
  { constructors } 

    {class} function init: DNArithmeticException; overload;
    {class} function init(message: string): DNArithmeticException; overload;
    {class} function init(message: string; innerException: DNException): DNArithmeticException; overload;

  end;

  [DNTypeName('System.ArithmeticException')]
  DNArithmeticException = interface(DNSystemException)
  ['{04DDCA94-C859-3B27-885B-24DF081A8F7E}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNArithmeticException = class(TDNGenericImport<DNArithmeticExceptionClass, DNArithmeticException>) end;

  //-------------namespace: System----------------
  DNDivideByZeroExceptionClass = interface(DNArithmeticExceptionClass)
  ['{9BFEE199-5D07-5FC3-B4F9-EFFE2CFC7398}']
  { constructors } 

    {class} function init: DNDivideByZeroException; overload;
    {class} function init(message: string): DNDivideByZeroException; overload;
    {class} function init(message: string; innerException: DNException): DNDivideByZeroException; overload;

  end;

  [DNTypeName('System.DivideByZeroException')]
  DNDivideByZeroException = interface(DNArithmeticException)
  ['{767B1089-97DF-36A3-9997-FE958F5592F7}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDivideByZeroException = class(TDNGenericImport<DNDivideByZeroExceptionClass, DNDivideByZeroException>) end;

  //-------------namespace: System----------------
  DNNotFiniteNumberExceptionClass = interface(DNArithmeticExceptionClass)
  ['{5A1C7CDB-EF41-5C1A-83FF-0BD959DEAC6C}']
  { constructors } 

    {class} function init: DNNotFiniteNumberException; overload;
    {class} function init(offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string; innerException: DNException): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double; innerException: DNException): DNNotFiniteNumberException; overload;

  end;

  [DNTypeName('System.NotFiniteNumberException')]
  DNNotFiniteNumberException = interface(DNArithmeticException)
  ['{C29856A4-12CD-3649-8AB4-0B1279247F67}']
  { getters & setters } 

    function get_OffendingNumber: Double;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property OffendingNumber: Double read get_OffendingNumber;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNNotFiniteNumberException = class(TDNGenericImport<DNNotFiniteNumberExceptionClass, DNNotFiniteNumberException>) end;

  //-------------namespace: System----------------
  DNOverflowExceptionClass = interface(DNArithmeticExceptionClass)
  ['{54817168-28A7-5326-97AD-FDFEBF730505}']
  { constructors } 

    {class} function init: DNOverflowException; overload;
    {class} function init(message: string): DNOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNOverflowException; overload;

  end;

  [DNTypeName('System.OverflowException')]
  DNOverflowException = interface(DNArithmeticException)
  ['{D37B0BBD-DF49-34F9-8308-C7C0EC5427D2}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNOverflowException = class(TDNGenericImport<DNOverflowExceptionClass, DNOverflowException>) end;

  //-------------namespace: System----------------
  DNArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{0FDC93FE-BEF9-546D-96EC-055F3A24F595}']
  { constructors } 

    {class} function init: DNArrayTypeMismatchException; overload;
    {class} function init(message: string): DNArrayTypeMismatchException; overload;
    {class} function init(message: string; innerException: DNException): DNArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.ArrayTypeMismatchException')]
  DNArrayTypeMismatchException = interface(DNSystemException)
  ['{5D20D2DF-BBF7-30A2-B9AA-2B18804A8C04}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNArrayTypeMismatchException = class(TDNGenericImport<DNArrayTypeMismatchExceptionClass, DNArrayTypeMismatchException>) end;

  //-------------namespace: System----------------
  DNBadImageFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{C9CA6122-94F4-5EA2-918A-C04093E03E72}']
  { constructors } 

    {class} function init: DNBadImageFormatException; overload;
    {class} function init(message: string): DNBadImageFormatException; overload;
    {class} function init(message: string; inner: DNException): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNBadImageFormatException; overload;

  end;

  [DNTypeName('System.BadImageFormatException')]
  DNBadImageFormatException = interface(DNSystemException)
  ['{39252E19-1ECC-34D7-9AFE-57063546257D}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNBadImageFormatException = class(TDNGenericImport<DNBadImageFormatExceptionClass, DNBadImageFormatException>) end;

  //-------------namespace: System----------------
  DNCannotUnloadAppDomainExceptionClass = interface(DNSystemExceptionClass)
  ['{7D42B251-85DE-5AA1-A8D0-D1134166CFA8}']
  { constructors } 

    {class} function init: DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string): DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string; innerException: DNException): DNCannotUnloadAppDomainException; overload;

  end;

  [DNTypeName('System.CannotUnloadAppDomainException')]
  DNCannotUnloadAppDomainException = interface(DNSystemException)
  ['{E1D6BA82-CCA9-3CB2-833E-373B2D042E7B}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCannotUnloadAppDomainException = class(TDNGenericImport<DNCannotUnloadAppDomainExceptionClass, DNCannotUnloadAppDomainException>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyNotFoundExceptionClass = interface(DNSystemExceptionClass)
  ['{BFB135C1-6663-53CE-814F-561145FD7347}']
  { constructors } 

    {class} function init: DNKeyNotFoundException; overload;
    {class} function init(message: string): DNKeyNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNKeyNotFoundException; overload;

  end;

  [DNTypeName('System.Collections.Generic.KeyNotFoundException')]
  DNKeyNotFoundException = interface(DNSystemException)
  ['{B78F766E-3C7D-348A-9A97-263622005C5D}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNKeyNotFoundException = class(TDNGenericImport<DNKeyNotFoundExceptionClass, DNKeyNotFoundException>) end;

  //-------------namespace: System----------------
  DNContextMarshalExceptionClass = interface(DNSystemExceptionClass)
  ['{B0CC0C74-FFC8-5AC5-81B5-C6E442E9B7BB}']
  { constructors } 

    {class} function init: DNContextMarshalException; overload;
    {class} function init(message: string): DNContextMarshalException; overload;
    {class} function init(message: string; inner: DNException): DNContextMarshalException; overload;

  end;

  [DNTypeName('System.ContextMarshalException')]
  DNContextMarshalException = interface(DNSystemException)
  ['{545D232B-D3A8-3C0F-8761-70368DBF734E}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNContextMarshalException = class(TDNGenericImport<DNContextMarshalExceptionClass, DNContextMarshalException>) end;

  //-------------namespace: System----------------
  DNDataMisalignedExceptionClass = interface(DNSystemExceptionClass)
  ['{426B0C78-0250-5C30-AD16-5632E4937730}']
  { constructors } 

    {class} function init: DNDataMisalignedException; overload;
    {class} function init(message: string): DNDataMisalignedException; overload;
    {class} function init(message: string; innerException: DNException): DNDataMisalignedException; overload;

  end;

  [DNTypeName('System.DataMisalignedException')]
  DNDataMisalignedException = interface(DNSystemException)
  ['{F1ACE2AE-B38D-39C6-913E-4FA2E7C691E5}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDataMisalignedException = class(TDNGenericImport<DNDataMisalignedExceptionClass, DNDataMisalignedException>) end;

  //-------------namespace: System----------------
  DNExecutionEngineExceptionClass = interface(DNSystemExceptionClass)
  ['{6D789B54-91F9-5DCF-821E-DC0B0F3768A3}']
  { constructors } 

    {class} function init: DNExecutionEngineException; overload;
    {class} function init(message: string): DNExecutionEngineException; overload;
    {class} function init(message: string; innerException: DNException): DNExecutionEngineException; overload;

  end;

  [DNTypeName('System.ExecutionEngineException')]
  DNExecutionEngineException = interface(DNSystemException)
  ['{2ADAAA54-1B51-330C-8959-41E552190FA6}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNExecutionEngineException = class(TDNGenericImport<DNExecutionEngineExceptionClass, DNExecutionEngineException>) end;

  //-------------namespace: System----------------
  DNFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{FB423BC4-9D56-5896-AA4C-2D185BECB0A0}']
  { constructors } 

    {class} function init: DNFormatException; overload;
    {class} function init(message: string): DNFormatException; overload;
    {class} function init(message: string; innerException: DNException): DNFormatException; overload;

  end;

  [DNTypeName('System.FormatException')]
  DNFormatException = interface(DNSystemException)
  ['{32DE6DF9-44B0-387D-84E6-4347C6B7FFAF}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNFormatException = class(TDNGenericImport<DNFormatExceptionClass, DNFormatException>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeFormatExceptionClass = interface(DNFormatExceptionClass)
  ['{49062ABD-5DDC-516B-BC51-6C16C3137C46}']
  { constructors } 

    {class} function init: DNCustomAttributeFormatException; overload;
    {class} function init(message: string): DNCustomAttributeFormatException; overload;
    {class} function init(message: string; inner: DNException): DNCustomAttributeFormatException; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeFormatException')]
  DNCustomAttributeFormatException = interface(DNFormatException)
  ['{BB36AE40-AE00-31CE-BEB5-CF767C2C1550}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCustomAttributeFormatException = class(TDNGenericImport<DNCustomAttributeFormatExceptionClass, DNCustomAttributeFormatException>) end;

  //-------------namespace: System----------------
  DNIndexOutOfRangeExceptionClass = interface(DNSystemExceptionClass)
  ['{B01F8A08-A2B3-53BD-A9D8-EC642BC64F86}']
  { constructors } 

    {class} function init: DNIndexOutOfRangeException; overload;
    {class} function init(message: string): DNIndexOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNIndexOutOfRangeException; overload;

  end;

  [DNTypeName('System.IndexOutOfRangeException')]
  DNIndexOutOfRangeException = interface(DNSystemException)
  ['{0E0CBE0A-5130-3998-8C5D-E65394B4464D}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNIndexOutOfRangeException = class(TDNGenericImport<DNIndexOutOfRangeExceptionClass, DNIndexOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNInsufficientExecutionStackExceptionClass = interface(DNSystemExceptionClass)
  ['{10C9CE93-5159-5183-A315-19940C131CB2}']
  { constructors } 

    {class} function init: DNInsufficientExecutionStackException; overload;
    {class} function init(message: string): DNInsufficientExecutionStackException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientExecutionStackException; overload;

  end;

  [DNTypeName('System.InsufficientExecutionStackException')]
  DNInsufficientExecutionStackException = interface(DNSystemException)
  ['{2BC580A7-BB30-3FE5-9515-75D211CF7C6B}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInsufficientExecutionStackException = class(TDNGenericImport<DNInsufficientExecutionStackExceptionClass, DNInsufficientExecutionStackException>) end;

  //-------------namespace: System----------------
  DNInvalidCastExceptionClass = interface(DNSystemExceptionClass)
  ['{E888CA19-3A44-5B47-84F3-78601CABAB59}']
  { constructors } 

    {class} function init: DNInvalidCastException; overload;
    {class} function init(message: string): DNInvalidCastException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidCastException; overload;
    {class} function init(message: string; errorCode: Int32): DNInvalidCastException; overload;

  end;

  [DNTypeName('System.InvalidCastException')]
  DNInvalidCastException = interface(DNSystemException)
  ['{76EADB2C-1A62-31EC-ACE0-4B75B9A16889}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidCastException = class(TDNGenericImport<DNInvalidCastExceptionClass, DNInvalidCastException>) end;

  //-------------namespace: System----------------
  DNInvalidOperationExceptionClass = interface(DNSystemExceptionClass)
  ['{A749FFEE-773D-53F2-9DEA-18DBB347A459}']
  { constructors } 

    {class} function init: DNInvalidOperationException; overload;
    {class} function init(message: string): DNInvalidOperationException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidOperationException; overload;

  end;

  [DNTypeName('System.InvalidOperationException')]
  DNInvalidOperationException = interface(DNSystemException)
  ['{A7CACAF6-5D11-30A5-BE4B-5C1FC2BB0AED}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidOperationException = class(TDNGenericImport<DNInvalidOperationExceptionClass, DNInvalidOperationException>) end;

  //-------------namespace: System----------------
  DNObjectDisposedExceptionClass = interface(DNInvalidOperationExceptionClass)
  ['{7782A18C-A41B-56B9-9D86-2A2EDB86817B}']
  { constructors } 

    {class} function init(objectName: string): DNObjectDisposedException; overload;
    {class} function init(objectName: string; message: string): DNObjectDisposedException; overload;
    {class} function init(message: string; innerException: DNException): DNObjectDisposedException; overload;

  end;

  [DNTypeName('System.ObjectDisposedException')]
  DNObjectDisposedException = interface(DNInvalidOperationException)
  ['{07F4AB14-7F89-358A-B126-E656D4663086}']
  { getters & setters } 

    function get_Message: string;
    function get_ObjectName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ObjectName: string read get_ObjectName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNObjectDisposedException = class(TDNGenericImport<DNObjectDisposedExceptionClass, DNObjectDisposedException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSwitchExpressionExceptionClass = interface(DNInvalidOperationExceptionClass)
  ['{1C0401D3-AC3F-50A5-A596-948CEC302EBB}']
  { constructors } 

    {class} function init: DNSwitchExpressionException; overload;
    {class} function init(innerException: DNException): DNSwitchExpressionException; overload;
    {class} function init(unmatchedValue: DNObject): DNSwitchExpressionException; overload;
    {class} function init(message: string): DNSwitchExpressionException; overload;
    {class} function init(message: string; innerException: DNException): DNSwitchExpressionException; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SwitchExpressionException')]
  DNSwitchExpressionException = interface(DNInvalidOperationException)
  ['{72192ED5-11A3-301F-B32B-F02A1652B72D}']
  { getters & setters } 

    function get_UnmatchedValue: DNObject;
    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnmatchedValue: DNObject read get_UnmatchedValue;
    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSwitchExpressionException = class(TDNGenericImport<DNSwitchExpressionExceptionClass, DNSwitchExpressionException>) end;

  //-------------namespace: System----------------
  DNInvalidProgramExceptionClass = interface(DNSystemExceptionClass)
  ['{6247F7A0-2B0D-5083-8E3A-61A01A14666A}']
  { constructors } 

    {class} function init: DNInvalidProgramException; overload;
    {class} function init(message: string): DNInvalidProgramException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidProgramException; overload;

  end;

  [DNTypeName('System.InvalidProgramException')]
  DNInvalidProgramException = interface(DNSystemException)
  ['{6E4A0ED9-9906-3767-9270-CC6F499C0160}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidProgramException = class(TDNGenericImport<DNInvalidProgramExceptionClass, DNInvalidProgramException>) end;

  //-------------namespace: System.IO----------------
  DNInvalidDataExceptionClass = interface(DNSystemExceptionClass)
  ['{E266E71B-46D6-50A2-831F-A686100BC45B}']
  { constructors } 

    {class} function init: DNInvalidDataException; overload;
    {class} function init(message: string): DNInvalidDataException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidDataException; overload;

  end;

  [DNTypeName('System.IO.InvalidDataException')]
  DNInvalidDataException = interface(DNSystemException)
  ['{AAAE1DEF-C4E8-3727-B4D6-0EA1873B429E}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidDataException = class(TDNGenericImport<DNInvalidDataExceptionClass, DNInvalidDataException>) end;

  //-------------namespace: System.IO----------------
  DNIOExceptionClass = interface(DNSystemExceptionClass)
  ['{63BA2AB6-BEDF-5E4F-BC95-C606FE267E6C}']
  { constructors } 

    {class} function init: DNIOException; overload;
    {class} function init(message: string): DNIOException; overload;
    {class} function init(message: string; hresult: Int32): DNIOException; overload;
    {class} function init(message: string; innerException: DNException): DNIOException; overload;

  end;

  [DNTypeName('System.IO.IOException')]
  DNIOException = interface(DNSystemException)
  ['{9F4BBA60-4335-3AF7-AC63-8A96C491A501}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNIOException = class(TDNGenericImport<DNIOExceptionClass, DNIOException>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{D2FB592C-ADEE-5E31-9F4A-2ADCB5748342}']
  { constructors } 

    {class} function init: DNDirectoryNotFoundException; overload;
    {class} function init(message: string): DNDirectoryNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNDirectoryNotFoundException; overload;

  end;

  [DNTypeName('System.IO.DirectoryNotFoundException')]
  DNDirectoryNotFoundException = interface(DNIOException)
  ['{312F50DF-D893-3C69-A444-94E8CB9626C6}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDirectoryNotFoundException = class(TDNGenericImport<DNDirectoryNotFoundExceptionClass, DNDirectoryNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNEndOfStreamExceptionClass = interface(DNIOExceptionClass)
  ['{5F1591AC-86FB-5F42-BA62-18789303A690}']
  { constructors } 

    {class} function init: DNEndOfStreamException; overload;
    {class} function init(message: string): DNEndOfStreamException; overload;
    {class} function init(message: string; innerException: DNException): DNEndOfStreamException; overload;

  end;

  [DNTypeName('System.IO.EndOfStreamException')]
  DNEndOfStreamException = interface(DNIOException)
  ['{02ACC7DE-D60E-3DDC-999C-83DB3699E6DC}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNEndOfStreamException = class(TDNGenericImport<DNEndOfStreamExceptionClass, DNEndOfStreamException>) end;

  //-------------namespace: System.IO----------------
  DNFileLoadExceptionClass = interface(DNIOExceptionClass)
  ['{976F93DE-ED53-5D00-8A43-4F8D91608E9D}']
  { constructors } 

    {class} function init: DNFileLoadException; overload;
    {class} function init(message: string): DNFileLoadException; overload;
    {class} function init(message: string; inner: DNException): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNFileLoadException; overload;

  end;

  [DNTypeName('System.IO.FileLoadException')]
  DNFileLoadException = interface(DNIOException)
  ['{8E40BAEB-5496-3871-84FA-5FE38769E50B}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNFileLoadException = class(TDNGenericImport<DNFileLoadExceptionClass, DNFileLoadException>) end;

  //-------------namespace: System.IO----------------
  DNFileNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{63BD5018-BF3B-5623-8A04-5F487EEB11E0}']
  { constructors } 

    {class} function init: DNFileNotFoundException; overload;
    {class} function init(message: string): DNFileNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string; innerException: DNException): DNFileNotFoundException; overload;

  end;

  [DNTypeName('System.IO.FileNotFoundException')]
  DNFileNotFoundException = interface(DNIOException)
  ['{7FD6A686-E94A-33E3-8584-170C7932792A}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNFileNotFoundException = class(TDNGenericImport<DNFileNotFoundExceptionClass, DNFileNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNPathTooLongExceptionClass = interface(DNIOExceptionClass)
  ['{2AC12477-26EC-5363-8DD6-DAB88551E433}']
  { constructors } 

    {class} function init: DNPathTooLongException; overload;
    {class} function init(message: string): DNPathTooLongException; overload;
    {class} function init(message: string; innerException: DNException): DNPathTooLongException; overload;

  end;

  [DNTypeName('System.IO.PathTooLongException')]
  DNPathTooLongException = interface(DNIOException)
  ['{7097FC66-DD83-3E7D-8683-CB5949B9E321}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNPathTooLongException = class(TDNGenericImport<DNPathTooLongExceptionClass, DNPathTooLongException>) end;

  //-------------namespace: System----------------
  DNMemberAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{0A08B7FB-9C34-5EF6-850A-8BD0147DA2BF}']
  { constructors } 

    {class} function init: DNMemberAccessException; overload;
    {class} function init(message: string): DNMemberAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMemberAccessException; overload;

  end;

  [DNTypeName('System.MemberAccessException')]
  DNMemberAccessException = interface(DNSystemException)
  ['{C6136383-CEB0-3D5A-9D20-307B4C389C68}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMemberAccessException = class(TDNGenericImport<DNMemberAccessExceptionClass, DNMemberAccessException>) end;

  //-------------namespace: System----------------
  DNFieldAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{AD121D4A-294F-51FB-BF3A-580B8AA97B68}']
  { constructors } 

    {class} function init: DNFieldAccessException; overload;
    {class} function init(message: string): DNFieldAccessException; overload;
    {class} function init(message: string; inner: DNException): DNFieldAccessException; overload;

  end;

  [DNTypeName('System.FieldAccessException')]
  DNFieldAccessException = interface(DNMemberAccessException)
  ['{59F91D5C-2AB9-3D5C-9E45-E51DE1EC6EA8}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNFieldAccessException = class(TDNGenericImport<DNFieldAccessExceptionClass, DNFieldAccessException>) end;

  //-------------namespace: System----------------
  DNMethodAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{D239BB90-5A52-5879-81C5-63669616B7D5}']
  { constructors } 

    {class} function init: DNMethodAccessException; overload;
    {class} function init(message: string): DNMethodAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMethodAccessException; overload;

  end;

  [DNTypeName('System.MethodAccessException')]
  DNMethodAccessException = interface(DNMemberAccessException)
  ['{7CB4D48B-A227-3B87-AC56-4DF07B4731BA}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMethodAccessException = class(TDNGenericImport<DNMethodAccessExceptionClass, DNMethodAccessException>) end;

  //-------------namespace: System----------------
  DNMissingMemberExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{284F30E8-15F5-5803-9A17-BF78A8F82FEF}']
  { constructors } 

    {class} function init: DNMissingMemberException; overload;
    {class} function init(message: string): DNMissingMemberException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMemberException; overload;
    {class} function init(className: string; memberName: string): DNMissingMemberException; overload;

  end;

  [DNTypeName('System.MissingMemberException')]
  DNMissingMemberException = interface(DNMemberAccessException)
  ['{1A7EFD02-3D24-3495-B2F2-61841A35A7C5}']
  { getters & setters } 

    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingMemberException = class(TDNGenericImport<DNMissingMemberExceptionClass, DNMissingMemberException>) end;

  //-------------namespace: System----------------
  DNMissingFieldExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{881CA743-924B-57F2-AF06-AF875F20A6F2}']
  { constructors } 

    {class} function init: DNMissingFieldException; overload;
    {class} function init(message: string): DNMissingFieldException; overload;
    {class} function init(message: string; inner: DNException): DNMissingFieldException; overload;
    {class} function init(className: string; fieldName: string): DNMissingFieldException; overload;

  end;

  [DNTypeName('System.MissingFieldException')]
  DNMissingFieldException = interface(DNMissingMemberException)
  ['{590DEC5A-8482-3458-A3C2-3E8A0090E72B}']
  { getters & setters } 

    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingFieldException = class(TDNGenericImport<DNMissingFieldExceptionClass, DNMissingFieldException>) end;

  //-------------namespace: System----------------
  DNMissingMethodExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{D53DF8DD-B4A3-53B3-B70E-F731FAD6EE10}']
  { constructors } 

    {class} function init: DNMissingMethodException; overload;
    {class} function init(message: string): DNMissingMethodException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMethodException; overload;
    {class} function init(className: string; methodName: string): DNMissingMethodException; overload;

  end;

  [DNTypeName('System.MissingMethodException')]
  DNMissingMethodException = interface(DNMissingMemberException)
  ['{CB655C63-A4EC-3AA9-B093-FB5D65593B1A}']
  { getters & setters } 

    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingMethodException = class(TDNGenericImport<DNMissingMethodExceptionClass, DNMissingMethodException>) end;

  //-------------namespace: System----------------
  DNMulticastNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{915F41C7-382A-5181-A497-1EE586728ABA}']
  { constructors } 

    {class} function init: DNMulticastNotSupportedException; overload;
    {class} function init(message: string): DNMulticastNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNMulticastNotSupportedException; overload;

  end;

  [DNTypeName('System.MulticastNotSupportedException')]
  DNMulticastNotSupportedException = interface(DNSystemException)
  ['{98C610F0-91AB-3165-AEB3-85796D4318C4}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMulticastNotSupportedException = class(TDNGenericImport<DNMulticastNotSupportedExceptionClass, DNMulticastNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNotImplementedExceptionClass = interface(DNSystemExceptionClass)
  ['{5ADB45C3-377D-55C9-8125-8CDAB727C0C6}']
  { constructors } 

    {class} function init: DNNotImplementedException; overload;
    {class} function init(message: string): DNNotImplementedException; overload;
    {class} function init(message: string; inner: DNException): DNNotImplementedException; overload;

  end;

  [DNTypeName('System.NotImplementedException')]
  DNNotImplementedException = interface(DNSystemException)
  ['{7C69014D-8FA5-35E0-AD3D-15CBB21A096C}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNNotImplementedException = class(TDNGenericImport<DNNotImplementedExceptionClass, DNNotImplementedException>) end;

  //-------------namespace: System----------------
  DNNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{96442F9D-9E4F-516D-9FC6-F7BE27AC35F8}']
  { constructors } 

    {class} function init: DNNotSupportedException; overload;
    {class} function init(message: string): DNNotSupportedException; overload;
    {class} function init(message: string; innerException: DNException): DNNotSupportedException; overload;

  end;

  [DNTypeName('System.NotSupportedException')]
  DNNotSupportedException = interface(DNSystemException)
  ['{15441AFA-9300-3A9E-9B7D-0B1622E1A365}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNNotSupportedException = class(TDNGenericImport<DNNotSupportedExceptionClass, DNNotSupportedException>) end;

  //-------------namespace: System----------------
  DNPlatformNotSupportedExceptionClass = interface(DNNotSupportedExceptionClass)
  ['{629BA74A-8E0A-5094-8909-1A031133D554}']
  { constructors } 

    {class} function init: DNPlatformNotSupportedException; overload;
    {class} function init(message: string): DNPlatformNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNPlatformNotSupportedException; overload;

  end;

  [DNTypeName('System.PlatformNotSupportedException')]
  DNPlatformNotSupportedException = interface(DNNotSupportedException)
  ['{DB7BBF4C-19CD-3E3E-8D34-FACC297A6686}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNPlatformNotSupportedException = class(TDNGenericImport<DNPlatformNotSupportedExceptionClass, DNPlatformNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNullReferenceExceptionClass = interface(DNSystemExceptionClass)
  ['{2ED61706-065D-58BA-9D96-13C043FF1E2D}']
  { constructors } 

    {class} function init: DNNullReferenceException; overload;
    {class} function init(message: string): DNNullReferenceException; overload;
    {class} function init(message: string; innerException: DNException): DNNullReferenceException; overload;

  end;

  [DNTypeName('System.NullReferenceException')]
  DNNullReferenceException = interface(DNSystemException)
  ['{B4943350-AEB6-316F-ADD2-B9A026E459AC}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNNullReferenceException = class(TDNGenericImport<DNNullReferenceExceptionClass, DNNullReferenceException>) end;

  //-------------namespace: System----------------
  DNOperationCanceledExceptionClass = interface(DNSystemExceptionClass)
  ['{756D920B-FEAD-5006-8827-157238DFD0E0}']
  { constructors } 

    {class} function init: DNOperationCanceledException; overload;
    {class} function init(message: string): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNOperationCanceledException; overload;
    {class} function init(token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNOperationCanceledException; overload;

  end;

  [DNTypeName('System.OperationCanceledException')]
  DNOperationCanceledException = interface(DNSystemException)
  ['{3FB5EF55-FBB3-33AD-BAD2-4E1CFA6F9CA6}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNOperationCanceledException = class(TDNGenericImport<DNOperationCanceledExceptionClass, DNOperationCanceledException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCanceledExceptionClass = interface(DNOperationCanceledExceptionClass)
  ['{41A69253-3DD5-5236-A181-2EAD0D5AAEA0}']
  { constructors } 

    {class} function init: DNTaskCanceledException; overload;
    {class} function init(message: string): DNTaskCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskCanceledException; overload;
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNTaskCanceledException; overload;
    {class} function init(task: DNTask): DNTaskCanceledException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCanceledException')]
  DNTaskCanceledException = interface(DNOperationCanceledException)
  ['{0B8FD88E-E34F-3E0D-8A59-BB9347EB061B}']
  { getters & setters } 

    function get_Task: DNTask;
    function get_CancellationToken: DNCancellationToken;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Task: DNTask read get_Task;
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTaskCanceledException = class(TDNGenericImport<DNTaskCanceledExceptionClass, DNTaskCanceledException>) end;

  //-------------namespace: System----------------
  DNOutOfMemoryExceptionClass = interface(DNSystemExceptionClass)
  ['{EC1E189E-C9ED-5C68-BBF3-B21513CC627C}']
  { constructors } 

    {class} function init: DNOutOfMemoryException; overload;
    {class} function init(message: string): DNOutOfMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNOutOfMemoryException; overload;

  end;

  [DNTypeName('System.OutOfMemoryException')]
  DNOutOfMemoryException = interface(DNSystemException)
  ['{58BDF718-F811-31F8-9E7C-536FDD75D521}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNOutOfMemoryException = class(TDNGenericImport<DNOutOfMemoryExceptionClass, DNOutOfMemoryException>) end;

  //-------------namespace: System----------------
  DNInsufficientMemoryExceptionClass = interface(DNOutOfMemoryExceptionClass)
  ['{D19C0783-06DA-5D43-8D39-A854A105E20F}']
  { constructors } 

    {class} function init: DNInsufficientMemoryException; overload;
    {class} function init(message: string): DNInsufficientMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientMemoryException; overload;

  end;

  [DNTypeName('System.InsufficientMemoryException')]
  DNInsufficientMemoryException = interface(DNOutOfMemoryException)
  ['{84B53D04-9FFD-3264-B1B9-C00684166925}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInsufficientMemoryException = class(TDNGenericImport<DNInsufficientMemoryExceptionClass, DNInsufficientMemoryException>) end;

  //-------------namespace: System----------------
  DNRankExceptionClass = interface(DNSystemExceptionClass)
  ['{DDA3A728-CA90-50B3-A32E-D4293D5BD169}']
  { constructors } 

    {class} function init: DNRankException; overload;
    {class} function init(message: string): DNRankException; overload;
    {class} function init(message: string; innerException: DNException): DNRankException; overload;

  end;

  [DNTypeName('System.RankException')]
  DNRankException = interface(DNSystemException)
  ['{C5689269-7963-3842-8A52-0B8526DEB1BC}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNRankException = class(TDNGenericImport<DNRankExceptionClass, DNRankException>) end;

  //-------------namespace: System.Reflection----------------
  DNAmbiguousMatchExceptionClass = interface(DNSystemExceptionClass)
  ['{B3CC5A1D-1E8B-5580-9B4B-433C96D9469D}']
  { constructors } 

    {class} function init: DNAmbiguousMatchException; overload;
    {class} function init(message: string): DNAmbiguousMatchException; overload;
    {class} function init(message: string; inner: DNException): DNAmbiguousMatchException; overload;

  end;

  [DNTypeName('System.Reflection.AmbiguousMatchException')]
  DNAmbiguousMatchException = interface(DNSystemException)
  ['{D79CAA64-F233-3C27-9960-04F925E4C273}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAmbiguousMatchException = class(TDNGenericImport<DNAmbiguousMatchExceptionClass, DNAmbiguousMatchException>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{35663815-D147-5365-A51A-2CEC316DA6E1}']
  { constructors } 

    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>): DNReflectionTypeLoadException; overload;
    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>; message: string): DNReflectionTypeLoadException; overload;

  end;

  [DNTypeName('System.Reflection.ReflectionTypeLoadException')]
  DNReflectionTypeLoadException = interface(DNSystemException)
  ['{75401F88-6360-398B-9A1E-707C2DE04F15}']
  { getters & setters } 

    function get_Types: TArray<DNType>;
    function get_LoaderExceptions: TArray<DNException>;
    function get_Message: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Types: TArray<DNType> read get_Types;
    property LoaderExceptions: TArray<DNException> read get_LoaderExceptions;
    property Message: string read get_Message;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNReflectionTypeLoadException = class(TDNGenericImport<DNReflectionTypeLoadExceptionClass, DNReflectionTypeLoadException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingManifestResourceExceptionClass = interface(DNSystemExceptionClass)
  ['{33386180-95E0-5AD4-AF01-E97CAD3C272D}']
  { constructors } 

    {class} function init: DNMissingManifestResourceException; overload;
    {class} function init(message: string): DNMissingManifestResourceException; overload;
    {class} function init(message: string; inner: DNException): DNMissingManifestResourceException; overload;

  end;

  [DNTypeName('System.Resources.MissingManifestResourceException')]
  DNMissingManifestResourceException = interface(DNSystemException)
  ['{9262C54A-C709-378F-A3E3-6ED1D5904194}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingManifestResourceException = class(TDNGenericImport<DNMissingManifestResourceExceptionClass, DNMissingManifestResourceException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingSatelliteAssemblyExceptionClass = interface(DNSystemExceptionClass)
  ['{5AC3DFB6-F997-5554-BA32-C3FB435C8B59}']
  { constructors } 

    {class} function init: DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; cultureName: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; inner: DNException): DNMissingSatelliteAssemblyException; overload;

  end;

  [DNTypeName('System.Resources.MissingSatelliteAssemblyException')]
  DNMissingSatelliteAssemblyException = interface(DNSystemException)
  ['{4305B1EE-0D74-3924-870C-073D002B7CCC}']
  { getters & setters } 

    function get_CultureName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CultureName: string read get_CultureName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMissingSatelliteAssemblyException = class(TDNGenericImport<DNMissingSatelliteAssemblyExceptionClass, DNMissingSatelliteAssemblyException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExternalExceptionClass = interface(DNSystemExceptionClass)
  ['{3235167F-20C0-5D8D-8EA5-831B14570EFB}']
  { constructors } 

    {class} function init: DNExternalException; overload;
    {class} function init(message: string): DNExternalException; overload;
    {class} function init(message: string; inner: DNException): DNExternalException; overload;
    {class} function init(message: string; errorCode: Int32): DNExternalException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ExternalException')]
  DNExternalException = interface(DNSystemException)
  ['{4F163B04-9380-306A-8FE3-CB5B0460B773}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNExternalException = class(TDNGenericImport<DNExternalExceptionClass, DNExternalException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCOMExceptionClass = interface(DNExternalExceptionClass)
  ['{F3C56AB1-AD4F-5967-B8EA-8474D136BCA4}']
  { constructors } 

    {class} function init: DNCOMException; overload;
    {class} function init(message: string): DNCOMException; overload;
    {class} function init(message: string; inner: DNException): DNCOMException; overload;
    {class} function init(message: string; errorCode: Int32): DNCOMException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.COMException')]
  DNCOMException = interface(DNExternalException)
  ['{3FAE262D-5F7D-3592-81E7-FD48A4FC050B}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCOMException = class(TDNGenericImport<DNCOMExceptionClass, DNCOMException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSEHExceptionClass = interface(DNExternalExceptionClass)
  ['{80FDA397-37BB-5EA0-835D-E8EF9DD73787}']
  { constructors } 

    {class} function init: DNSEHException; overload;
    {class} function init(message: string): DNSEHException; overload;
    {class} function init(message: string; inner: DNException): DNSEHException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SEHException')]
  DNSEHException = interface(DNExternalException)
  ['{F1003CEC-99FC-3F82-96A4-6A5188BAA30C}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function CanResume: Boolean;
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSEHException = class(TDNGenericImport<DNSEHExceptionClass, DNSEHException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidComObjectExceptionClass = interface(DNSystemExceptionClass)
  ['{53AD0316-3F8A-58AC-85EA-D40ED467E391}']
  { constructors } 

    {class} function init: DNInvalidComObjectException; overload;
    {class} function init(message: string): DNInvalidComObjectException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidComObjectException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidComObjectException')]
  DNInvalidComObjectException = interface(DNSystemException)
  ['{7B7B9735-D3C0-3E2D-85D3-189F3590247F}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidComObjectException = class(TDNGenericImport<DNInvalidComObjectExceptionClass, DNInvalidComObjectException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidOleVariantTypeExceptionClass = interface(DNSystemExceptionClass)
  ['{E990B6C8-A167-57D4-929D-938083E291AD}']
  { constructors } 

    {class} function init: DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string): DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidOleVariantTypeException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidOleVariantTypeException')]
  DNInvalidOleVariantTypeException = interface(DNSystemException)
  ['{A772136B-A7DE-3E20-8C09-3EC08D65DF74}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidOleVariantTypeException = class(TDNGenericImport<DNInvalidOleVariantTypeExceptionClass, DNInvalidOleVariantTypeException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalDirectiveExceptionClass = interface(DNSystemExceptionClass)
  ['{0A89BE17-F338-5709-9341-E3F4D9BC3C1D}']
  { constructors } 

    {class} function init: DNMarshalDirectiveException; overload;
    {class} function init(message: string): DNMarshalDirectiveException; overload;
    {class} function init(message: string; inner: DNException): DNMarshalDirectiveException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalDirectiveException')]
  DNMarshalDirectiveException = interface(DNSystemException)
  ['{BA050027-E12E-343E-9A7C-23E1782E7E54}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNMarshalDirectiveException = class(TDNGenericImport<DNMarshalDirectiveExceptionClass, DNMarshalDirectiveException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayRankMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{62D92F0B-4651-5E4A-BBCC-A0A9120CBBE7}']
  { constructors } 

    {class} function init: DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string): DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayRankMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayRankMismatchException')]
  DNSafeArrayRankMismatchException = interface(DNSystemException)
  ['{CCE2E6E8-ACCD-33CC-B43C-48328AE5CA26}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSafeArrayRankMismatchException = class(TDNGenericImport<DNSafeArrayRankMismatchExceptionClass, DNSafeArrayRankMismatchException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{55F0CAEA-11B0-5072-8295-0DF0F673C9D8}']
  { constructors } 

    {class} function init: DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string): DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayTypeMismatchException')]
  DNSafeArrayTypeMismatchException = interface(DNSystemException)
  ['{5B817AB9-5E74-30B8-85DD-B2A212AB582A}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSafeArrayTypeMismatchException = class(TDNGenericImport<DNSafeArrayTypeMismatchExceptionClass, DNSafeArrayTypeMismatchException>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationExceptionClass = interface(DNSystemExceptionClass)
  ['{90E50A6C-EF35-566F-A776-799A198D56F6}']
  { constructors } 

    {class} function init: DNSerializationException; overload;
    {class} function init(message: string): DNSerializationException; overload;
    {class} function init(message: string; innerException: DNException): DNSerializationException; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationException')]
  DNSerializationException = interface(DNSystemException)
  ['{C0E81387-3EBA-31EB-9DB0-9D3A8111CD34}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSerializationException = class(TDNGenericImport<DNSerializationExceptionClass, DNSerializationException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicExceptionClass = interface(DNSystemExceptionClass)
  ['{5C18F50A-8AFE-58EB-9CB1-E879852E2C3E}']
  { constructors } 

    {class} function init: DNCryptographicException; overload;
    {class} function init(hr: Int32): DNCryptographicException; overload;
    {class} function init(message: string): DNCryptographicException; overload;
    {class} function init(message: string; inner: DNException): DNCryptographicException; overload;
    {class} function init(format: string; insert: string): DNCryptographicException; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CryptographicException')]
  DNCryptographicException = interface(DNSystemException)
  ['{AA5BA7CA-FB4A-34DB-97A2-1250AE73E33A}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCryptographicException = class(TDNGenericImport<DNCryptographicExceptionClass, DNCryptographicException>) end;

  //-------------namespace: System.Security----------------
  DNSecurityExceptionClass = interface(DNSystemExceptionClass)
  ['{87ACE8C8-8CAB-5B88-BE22-DCDFC04A7AF8}']
  { constructors } 

    {class} function init: DNSecurityException; overload;
    {class} function init(message: string): DNSecurityException; overload;
    {class} function init(message: string; inner: DNException): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType; state: string): DNSecurityException; overload;

  end;

  [DNTypeName('System.Security.SecurityException')]
  DNSecurityException = interface(DNSystemException)
  ['{D8D5E343-37AB-3991-9798-C8ABE831D705}']
  { getters & setters } 

    function get_Demanded: DNObject;
    procedure set_Demanded(value: DNObject);
    function get_DenySetInstance: DNObject;
    procedure set_DenySetInstance(value: DNObject);
    function get_FailedAssemblyInfo: DNAssemblyName;
    procedure set_FailedAssemblyInfo(value: DNAssemblyName);
    function get_GrantedSet: string;
    procedure set_GrantedSet(value: string);
    function get_Method: DNMethodInfo;
    procedure set_Method(value: DNMethodInfo);
    function get_PermissionState: string;
    procedure set_PermissionState(value: string);
    function get_PermissionType: DNType;
    procedure set_PermissionType(value: DNType);
    function get_PermitOnlySetInstance: DNObject;
    procedure set_PermitOnlySetInstance(value: DNObject);
    function get_RefusedSet: string;
    procedure set_RefusedSet(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Demanded: DNObject read get_Demanded write set_Demanded;
    property DenySetInstance: DNObject read get_DenySetInstance write set_DenySetInstance;
    property FailedAssemblyInfo: DNAssemblyName read get_FailedAssemblyInfo write set_FailedAssemblyInfo;
    property GrantedSet: string read get_GrantedSet write set_GrantedSet;
    property Method: DNMethodInfo read get_Method write set_Method;
    property PermissionState: string read get_PermissionState write set_PermissionState;
    property PermissionType: DNType read get_PermissionType write set_PermissionType;
    property PermitOnlySetInstance: DNObject read get_PermitOnlySetInstance write set_PermitOnlySetInstance;
    property RefusedSet: string read get_RefusedSet write set_RefusedSet;
    property Url: string read get_Url write set_Url;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSecurityException = class(TDNGenericImport<DNSecurityExceptionClass, DNSecurityException>) end;

  //-------------namespace: System.Security----------------
  DNVerificationExceptionClass = interface(DNSystemExceptionClass)
  ['{1ED05394-84D7-5E58-80B3-FC4A346DDD84}']
  { constructors } 

    {class} function init: DNVerificationException; overload;
    {class} function init(message: string): DNVerificationException; overload;
    {class} function init(message: string; innerException: DNException): DNVerificationException; overload;

  end;

  [DNTypeName('System.Security.VerificationException')]
  DNVerificationException = interface(DNSystemException)
  ['{E7FA5E06-1BA7-34E0-BF77-02DBDD41860E}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNVerificationException = class(TDNGenericImport<DNVerificationExceptionClass, DNVerificationException>) end;

  //-------------namespace: System----------------
  DNStackOverflowExceptionClass = interface(DNSystemExceptionClass)
  ['{AC464484-C91B-5861-8EE2-1B16B85AE904}']
  { constructors } 

    {class} function init: DNStackOverflowException; overload;
    {class} function init(message: string): DNStackOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNStackOverflowException; overload;

  end;

  [DNTypeName('System.StackOverflowException')]
  DNStackOverflowException = interface(DNSystemException)
  ['{67EC0EC0-EC65-3C3D-A27B-EAA570489AAE}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNStackOverflowException = class(TDNGenericImport<DNStackOverflowExceptionClass, DNStackOverflowException>) end;

  //-------------namespace: System.Threading----------------
  DNAbandonedMutexExceptionClass = interface(DNSystemExceptionClass)
  ['{0C9555F5-1604-5F0A-A092-2F0647836058}']
  { constructors } 

    {class} function init: DNAbandonedMutexException; overload;
    {class} function init(message: string): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException): DNAbandonedMutexException; overload;
    {class} function init(location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;

  end;

  [DNTypeName('System.Threading.AbandonedMutexException')]
  DNAbandonedMutexException = interface(DNSystemException)
  ['{B0D2E194-3212-361F-964E-1E39F6C198E8}']
  { getters & setters } 

    function get_Mutex: DNMutex;
    function get_MutexIndex: Int32;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Mutex: DNMutex read get_Mutex;
    property MutexIndex: Int32 read get_MutexIndex;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAbandonedMutexException = class(TDNGenericImport<DNAbandonedMutexExceptionClass, DNAbandonedMutexException>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreFullExceptionClass = interface(DNSystemExceptionClass)
  ['{309F03CB-5341-5186-B304-C777FB03AA63}']
  { constructors } 

    {class} function init: DNSemaphoreFullException; overload;
    {class} function init(message: string): DNSemaphoreFullException; overload;
    {class} function init(message: string; innerException: DNException): DNSemaphoreFullException; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreFullException')]
  DNSemaphoreFullException = interface(DNSystemException)
  ['{8AF92EBE-5EC9-316B-86E9-975C227EFF80}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSemaphoreFullException = class(TDNGenericImport<DNSemaphoreFullExceptionClass, DNSemaphoreFullException>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationLockExceptionClass = interface(DNSystemExceptionClass)
  ['{0900BC9C-8849-50B9-91EB-0EB97A89FEC4}']
  { constructors } 

    {class} function init: DNSynchronizationLockException; overload;
    {class} function init(message: string): DNSynchronizationLockException; overload;
    {class} function init(message: string; innerException: DNException): DNSynchronizationLockException; overload;

  end;

  [DNTypeName('System.Threading.SynchronizationLockException')]
  DNSynchronizationLockException = interface(DNSystemException)
  ['{D9C490B8-6454-31AB-8D47-5EEAA986D3ED}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSynchronizationLockException = class(TDNGenericImport<DNSynchronizationLockExceptionClass, DNSynchronizationLockException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadAbortExceptionClass = interface(DNSystemExceptionClass)
  ['{D627DD2D-36DC-512E-A5E6-5C13DAF6775C}']
  end;

  [DNTypeName('System.Threading.ThreadAbortException')]
  DNThreadAbortException = interface(DNSystemException)
  ['{2FFC8A1A-E798-3A54-BF18-781B908427C3}']
  { getters & setters } 

    function get_ExceptionState: DNObject;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ExceptionState: DNObject read get_ExceptionState;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNThreadAbortException = class(TDNGenericImport<DNThreadAbortExceptionClass, DNThreadAbortException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadInterruptedExceptionClass = interface(DNSystemExceptionClass)
  ['{3DC8EC66-8707-5648-82B5-4CE7D3682D63}']
  { constructors } 

    {class} function init: DNThreadInterruptedException; overload;
    {class} function init(message: string): DNThreadInterruptedException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadInterruptedException; overload;

  end;

  [DNTypeName('System.Threading.ThreadInterruptedException')]
  DNThreadInterruptedException = interface(DNSystemException)
  ['{71871D9F-9C51-3FD3-B9FA-D9983F9A7791}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNThreadInterruptedException = class(TDNGenericImport<DNThreadInterruptedExceptionClass, DNThreadInterruptedException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStartExceptionClass = interface(DNSystemExceptionClass)
  ['{BF71968C-C3FF-531D-888B-4CD0E2ADA63C}']
  end;

  [DNTypeName('System.Threading.ThreadStartException')]
  DNThreadStartException = interface(DNSystemException)
  ['{AC08E013-E54F-3FF4-9279-5B0556990F8F}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNThreadStartException = class(TDNGenericImport<DNThreadStartExceptionClass, DNThreadStartException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStateExceptionClass = interface(DNSystemExceptionClass)
  ['{D3CD9A97-5E1A-54D5-A766-01D88222820A}']
  { constructors } 

    {class} function init: DNThreadStateException; overload;
    {class} function init(message: string): DNThreadStateException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadStateException; overload;

  end;

  [DNTypeName('System.Threading.ThreadStateException')]
  DNThreadStateException = interface(DNSystemException)
  ['{1E80E2FF-ACA8-3B94-9B2E-0C3DB3E80416}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNThreadStateException = class(TDNGenericImport<DNThreadStateExceptionClass, DNThreadStateException>) end;

  //-------------namespace: System----------------
  DNTimeoutExceptionClass = interface(DNSystemExceptionClass)
  ['{58D6A130-3AF9-563D-ABDE-7F20A8BA7FF7}']
  { constructors } 

    {class} function init: DNTimeoutException; overload;
    {class} function init(message: string): DNTimeoutException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeoutException; overload;

  end;

  [DNTypeName('System.TimeoutException')]
  DNTimeoutException = interface(DNSystemException)
  ['{B69FBDC4-07D4-3054-8D72-D0BF441719FF}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTimeoutException = class(TDNGenericImport<DNTimeoutExceptionClass, DNTimeoutException>) end;

  //-------------namespace: System----------------
  DNTypeInitializationExceptionClass = interface(DNSystemExceptionClass)
  ['{54E8D179-7129-55B1-AFC8-CCF4C4D33FB3}']
  { constructors } 

    {class} function init(fullTypeName: string; innerException: DNException): DNTypeInitializationException;

  end;

  [DNTypeName('System.TypeInitializationException')]
  DNTypeInitializationException = interface(DNSystemException)
  ['{51ED05E4-5B10-38FF-85B2-860CF6C73230}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTypeInitializationException = class(TDNGenericImport<DNTypeInitializationExceptionClass, DNTypeInitializationException>) end;

  //-------------namespace: System----------------
  DNTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{2250D2AA-9CB6-51F9-B7FA-91BC927D6B7C}']
  { constructors } 

    {class} function init: DNTypeLoadException; overload;
    {class} function init(message: string): DNTypeLoadException; overload;
    {class} function init(message: string; inner: DNException): DNTypeLoadException; overload;

  end;

  [DNTypeName('System.TypeLoadException')]
  DNTypeLoadException = interface(DNSystemException)
  ['{14A030BD-3C38-32F4-9BE2-D1618E8ECCE1}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTypeLoadException = class(TDNGenericImport<DNTypeLoadExceptionClass, DNTypeLoadException>) end;

  //-------------namespace: System----------------
  DNDllNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{0A61F288-76E5-5A1F-BD9C-E4F5F2FAAD2C}']
  { constructors } 

    {class} function init: DNDllNotFoundException; overload;
    {class} function init(message: string): DNDllNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNDllNotFoundException; overload;

  end;

  [DNTypeName('System.DllNotFoundException')]
  DNDllNotFoundException = interface(DNTypeLoadException)
  ['{DB9AFC5E-D6A9-3416-812E-7CEF13D59352}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNDllNotFoundException = class(TDNGenericImport<DNDllNotFoundExceptionClass, DNDllNotFoundException>) end;

  //-------------namespace: System----------------
  DNEntryPointNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{B7A01234-2F18-541B-B11A-6CCC91EABE2A}']
  { constructors } 

    {class} function init: DNEntryPointNotFoundException; overload;
    {class} function init(message: string): DNEntryPointNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNEntryPointNotFoundException; overload;

  end;

  [DNTypeName('System.EntryPointNotFoundException')]
  DNEntryPointNotFoundException = interface(DNTypeLoadException)
  ['{E5F51D2C-7901-327D-94E2-449788462DF4}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNEntryPointNotFoundException = class(TDNGenericImport<DNEntryPointNotFoundExceptionClass, DNEntryPointNotFoundException>) end;

  //-------------namespace: System----------------
  DNTypeAccessExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{83A7C153-BA58-5DE0-989C-4814F747EE1C}']
  { constructors } 

    {class} function init: DNTypeAccessException; overload;
    {class} function init(message: string): DNTypeAccessException; overload;
    {class} function init(message: string; inner: DNException): DNTypeAccessException; overload;

  end;

  [DNTypeName('System.TypeAccessException')]
  DNTypeAccessException = interface(DNTypeLoadException)
  ['{0526F0A2-AB58-30D1-9607-630923F08788}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTypeAccessException = class(TDNGenericImport<DNTypeAccessExceptionClass, DNTypeAccessException>) end;

  //-------------namespace: System----------------
  DNTypeUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{28C726DC-98FA-5D3F-BFB9-DA5C089464CF}']
  { constructors } 

    {class} function init: DNTypeUnloadedException; overload;
    {class} function init(message: string): DNTypeUnloadedException; overload;
    {class} function init(message: string; innerException: DNException): DNTypeUnloadedException; overload;

  end;

  [DNTypeName('System.TypeUnloadedException')]
  DNTypeUnloadedException = interface(DNSystemException)
  ['{88772A09-4440-35E5-AA96-8A0E20798176}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTypeUnloadedException = class(TDNGenericImport<DNTypeUnloadedExceptionClass, DNTypeUnloadedException>) end;

  //-------------namespace: System----------------
  DNUnauthorizedAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{3AC65482-3261-55C9-BED3-3F2413CDDD47}']
  { constructors } 

    {class} function init: DNUnauthorizedAccessException; overload;
    {class} function init(message: string): DNUnauthorizedAccessException; overload;
    {class} function init(message: string; inner: DNException): DNUnauthorizedAccessException; overload;

  end;

  [DNTypeName('System.UnauthorizedAccessException')]
  DNUnauthorizedAccessException = interface(DNSystemException)
  ['{F73C39C6-B7BE-3C44-BF83-25B536D0985F}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNUnauthorizedAccessException = class(TDNGenericImport<DNUnauthorizedAccessExceptionClass, DNUnauthorizedAccessException>) end;

  //-------------namespace: System.Threading----------------
  DNLockRecursionExceptionClass = interface(DNExceptionClass)
  ['{96F7AEEE-CB1D-57C1-8140-14F8D2B73AEA}']
  { constructors } 

    {class} function init: DNLockRecursionException; overload;
    {class} function init(message: string): DNLockRecursionException; overload;
    {class} function init(message: string; innerException: DNException): DNLockRecursionException; overload;

  end;

  [DNTypeName('System.Threading.LockRecursionException')]
  DNLockRecursionException = interface(DNException)
  ['{6251DC2F-EFDA-31D6-AD44-C9779AA34236}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNLockRecursionException = class(TDNGenericImport<DNLockRecursionExceptionClass, DNLockRecursionException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerExceptionClass = interface(DNExceptionClass)
  ['{7542A167-F45B-51B3-A880-B3E822FB39DB}']
  { constructors } 

    {class} function init: DNTaskSchedulerException; overload;
    {class} function init(message: string): DNTaskSchedulerException; overload;
    {class} function init(innerException: DNException): DNTaskSchedulerException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskSchedulerException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskSchedulerException')]
  DNTaskSchedulerException = interface(DNException)
  ['{C0C747B8-F833-3D42-B398-5608110CC753}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTaskSchedulerException = class(TDNGenericImport<DNTaskSchedulerExceptionClass, DNTaskSchedulerException>) end;

  //-------------namespace: System----------------
  DNTimeZoneNotFoundExceptionClass = interface(DNExceptionClass)
  ['{D85ECCAD-7D6B-5DA4-A5EE-CB5BCE624548}']
  { constructors } 

    {class} function init: DNTimeZoneNotFoundException; overload;
    {class} function init(message: string): DNTimeZoneNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeZoneNotFoundException; overload;

  end;

  [DNTypeName('System.TimeZoneNotFoundException')]
  DNTimeZoneNotFoundException = interface(DNException)
  ['{C2B225B3-EA92-3989-9B81-5D7775684360}']
  { getters & setters } 

    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNTimeZoneNotFoundException = class(TDNGenericImport<DNTimeZoneNotFoundExceptionClass, DNTimeZoneNotFoundException>) end;

  //-------------namespace: System----------------
  DNFormattableStringClass = interface(DNObjectClass)
  ['{B0C32916-2106-54BA-8913-2FCC0E8C0C5D}']
  { static methods } 

    {class} function Invariant(formattable: DNFormattableString): string;
    {class} function CurrentCulture(formattable: DNFormattableString): string;

  end;

  [DNTypeName('System.FormattableString')]
  DNFormattableString = interface(DNIFormattable)
  ['{F5C5E0D9-7219-337B-B300-5381C7AD1071}']
  { getters & setters } 

    function get_Format: string;
    function get_ArgumentCount: Int32;

  { methods } 

    function GetArguments: TArray<DNObject>;
    function GetArgument(index: Int32): DNObject;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function ToString: string; overload;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Format: string read get_Format;
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNFormattableString = class(TDNGenericImport<DNFormattableStringClass, DNFormattableString>) end;

  //-------------namespace: System----------------
  DNGCClass = interface(DNObjectClass)
  ['{C77613F0-8B12-5947-B38E-267B28A96367}']
  { static getter & setter } 

    {class} function get_MaxGeneration: Int32;

  { static methods } 

    {class} function GetGCMemoryInfo: DNGCMemoryInfo; overload;
    {class} function GetGCMemoryInfo(kind: DNGCKind): DNGCMemoryInfo; overload;
    {class} procedure AddMemoryPressure(bytesAllocated: Int64);
    {class} procedure RemoveMemoryPressure(bytesAllocated: Int64);
    {class} function GetGeneration(obj: DNObject): Int32; overload;
    {class} procedure Collect(generation: Int32); overload;
    {class} procedure Collect; overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean; compacting: Boolean); overload;
    {class} function CollectionCount(generation: Int32): Int32;
    {class} procedure KeepAlive(obj: DNObject);
    {class} function GetGeneration(wo: DNWeakReference): Int32; overload;
    {class} procedure WaitForPendingFinalizers;
    {class} procedure SuppressFinalize(obj: DNObject);
    {class} procedure ReRegisterForFinalize(obj: DNObject);
    {class} function GetTotalMemory(forceFullCollection: Boolean): Int64;
    {class} function GetAllocatedBytesForCurrentThread: Int64;
    {class} function GetTotalAllocatedBytes(precise: Boolean): Int64;
    {class} procedure RegisterForFullGCNotification(maxGenerationThreshold: Int32; largeObjectHeapThreshold: Int32);
    {class} procedure CancelFullGCNotification;
    {class} function WaitForFullGCApproach: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCApproach(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} procedure EndNoGCRegion;

  { static propertys } 

    {class} property MaxGeneration: Int32 read get_MaxGeneration;
  end;

  [DNTypeName('System.GC')]
  DNGC = interface(DNObject)
  ['{66A1B371-2B87-35DF-8B15-B623321BB29D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNGC = class(TDNGenericImport<DNGCClass, DNGC>) end;

  //-------------namespace: System.Globalization----------------
  DNCalendarClass = interface(DNObjectClass)
  ['{1CFDD856-77A9-5F4D-BF9E-28551663E935}']
  { static methods } 

    {class} function ReadOnly(calendar: DNCalendar): DNCalendar;

  end;

  [DNTypeName('System.Globalization.Calendar')]
  DNCalendar = interface(DNICloneable)
  ['{2015E0EF-A83F-37E4-A02A-A8F84A6568A0}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);

  { methods } 

    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
  end;

  TDNCalendar = class(TDNGenericImport<DNCalendarClass, DNCalendar>)
  public const
   CurrentEra = 0;
  end;

  //-------------namespace: System.Globalization----------------
  DNEastAsianLunisolarCalendarClass = interface(DNCalendarClass)
  ['{1201AD59-CF23-5FAD-A5D7-418B895F03F1}']
  end;

  [DNTypeName('System.Globalization.EastAsianLunisolarCalendar')]
  DNEastAsianLunisolarCalendar = interface(DNCalendar)
  ['{3CC4B788-3D9C-3392-8094-515E288586B5}']
  { getters & setters } 

    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;

  { methods } 

    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
  end;

  TDNEastAsianLunisolarCalendar = class(TDNGenericImport<DNEastAsianLunisolarCalendarClass, DNEastAsianLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNChineseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{7ADFED90-B9AA-5A9E-B47B-1D1207624686}']
  { constructors } 

    {class} function init: DNChineseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.ChineseLunisolarCalendar')]
  DNChineseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{74DBB976-2BFE-3111-8AF9-081BB1BE9F5D}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNChineseLunisolarCalendar = class(TDNGenericImport<DNChineseLunisolarCalendarClass, DNChineseLunisolarCalendar>)
  public const
   ChineseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{930B6656-ADD5-5B1B-9514-304C47774A88}']
  { constructors } 

    {class} function init: DNJapaneseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseLunisolarCalendar')]
  DNJapaneseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{75FBB83E-EF66-370D-9EED-D32D0AA6BEFD}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseLunisolarCalendar = class(TDNGenericImport<DNJapaneseLunisolarCalendarClass, DNJapaneseLunisolarCalendar>)
  public const
   JapaneseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNKoreanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{05F258A6-3949-582F-B049-036CA5D44596}']
  { constructors } 

    {class} function init: DNKoreanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanLunisolarCalendar')]
  DNKoreanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{0BAE7C4E-5E7E-3BE1-8AB0-3552F8363DF6}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanLunisolarCalendar = class(TDNGenericImport<DNKoreanLunisolarCalendarClass, DNKoreanLunisolarCalendar>)
  public const
   GregorianEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{6B3F55B6-3F0C-5885-9FB8-53B8051FDD5E}']
  { constructors } 

    {class} function init: DNTaiwanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanLunisolarCalendar')]
  DNTaiwanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{749BFD0A-8761-3F16-BDB2-19DCC40E10F0}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanLunisolarCalendar = class(TDNGenericImport<DNTaiwanLunisolarCalendarClass, DNTaiwanLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNGregorianCalendarClass = interface(DNCalendarClass)
  ['{F0EB3468-FCA7-5866-B4B5-81ECA40F49A5}']
  { constructors } 

    {class} function init: DNGregorianCalendar; overload;
    {class} function init(&type: DNGregorianCalendarTypes): DNGregorianCalendar; overload;

  end;

  [DNTypeName('System.Globalization.GregorianCalendar')]
  DNGregorianCalendar = interface(DNCalendar)
  ['{D8CC876B-B61D-306A-ACFF-C7D4745BCCB4}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_CalendarType: DNGregorianCalendarTypes;
    procedure set_CalendarType(value: DNGregorianCalendarTypes);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property CalendarType: DNGregorianCalendarTypes read get_CalendarType write set_CalendarType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNGregorianCalendar = class(TDNGenericImport<DNGregorianCalendarClass, DNGregorianCalendar>)
  public const
   ADEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNHebrewCalendarClass = interface(DNCalendarClass)
  ['{ACAAE902-B756-5703-B887-66DC57505DB2}']
  { constructors } 

    {class} function init: DNHebrewCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HebrewEra: Int32;

  { static fields } 

    {class} property HebrewEra: Int32 read __fakeFieldGet_HebrewEra;

  end;

  [DNTypeName('System.Globalization.HebrewCalendar')]
  DNHebrewCalendar = interface(DNCalendar)
  ['{B0BE9103-3920-371C-92B6-440540FAB89F}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHebrewCalendar = class(TDNGenericImport<DNHebrewCalendarClass, DNHebrewCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNHijriCalendarClass = interface(DNCalendarClass)
  ['{02CFC4E1-AA33-5849-B81C-666847E11EDB}']
  { constructors } 

    {class} function init: DNHijriCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HijriEra: Int32;

  { static fields } 

    {class} property HijriEra: Int32 read __fakeFieldGet_HijriEra;

  end;

  [DNTypeName('System.Globalization.HijriCalendar')]
  DNHijriCalendar = interface(DNCalendar)
  ['{321F30A1-E6CF-3113-B524-5ECFC3AC6D08}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_HijriAdjustment: Int32;
    procedure set_HijriAdjustment(value: Int32);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property HijriAdjustment: Int32 read get_HijriAdjustment write set_HijriAdjustment;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHijriCalendar = class(TDNGenericImport<DNHijriCalendarClass, DNHijriCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseCalendarClass = interface(DNCalendarClass)
  ['{4D933ADB-17A6-55C2-9C8F-D913D003F510}']
  { constructors } 

    {class} function init: DNJapaneseCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseCalendar')]
  DNJapaneseCalendar = interface(DNCalendar)
  ['{A9611D52-73B2-32D6-81F2-BF475076AD76}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseCalendar = class(TDNGenericImport<DNJapaneseCalendarClass, DNJapaneseCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJulianCalendarClass = interface(DNCalendarClass)
  ['{F36A3D88-D485-5988-833A-B94CC82AE5E0}']
  { constructors } 

    {class} function init: DNJulianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_JulianEra: Int32;

  { static fields } 

    {class} property JulianEra: Int32 read __fakeFieldGet_JulianEra;

  end;

  [DNTypeName('System.Globalization.JulianCalendar')]
  DNJulianCalendar = interface(DNCalendar)
  ['{087CDBF3-6A23-3581-B25A-A0A7A0FEC6ED}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJulianCalendar = class(TDNGenericImport<DNJulianCalendarClass, DNJulianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNKoreanCalendarClass = interface(DNCalendarClass)
  ['{43FCCB84-92AD-5374-816B-87CEDFF3782F}']
  { constructors } 

    {class} function init: DNKoreanCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanCalendar')]
  DNKoreanCalendar = interface(DNCalendar)
  ['{013045B8-52B0-388F-99AF-3573112D3C23}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanCalendar = class(TDNGenericImport<DNKoreanCalendarClass, DNKoreanCalendar>)
  public const
   KoreanEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNPersianCalendarClass = interface(DNCalendarClass)
  ['{C67BDEFA-EC8E-5020-AAB9-712E2AF2E0C2}']
  { constructors } 

    {class} function init: DNPersianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_PersianEra: Int32;

  { static fields } 

    {class} property PersianEra: Int32 read __fakeFieldGet_PersianEra;

  end;

  [DNTypeName('System.Globalization.PersianCalendar')]
  DNPersianCalendar = interface(DNCalendar)
  ['{95C2FE39-3B56-3860-8E24-3B55184036F0}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPersianCalendar = class(TDNGenericImport<DNPersianCalendarClass, DNPersianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanCalendarClass = interface(DNCalendarClass)
  ['{31C5E10F-A4E8-54AF-B5C4-18109F739658}']
  { constructors } 

    {class} function init: DNTaiwanCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanCalendar')]
  DNTaiwanCalendar = interface(DNCalendar)
  ['{1C09DD20-E735-3638-AE69-2AFCE30F45BF}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanCalendar = class(TDNGenericImport<DNTaiwanCalendarClass, DNTaiwanCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNThaiBuddhistCalendarClass = interface(DNCalendarClass)
  ['{B627F94D-5197-54A6-8E13-4A430735CCEF}']
  { constructors } 

    {class} function init: DNThaiBuddhistCalendar;

  end;

  [DNTypeName('System.Globalization.ThaiBuddhistCalendar')]
  DNThaiBuddhistCalendar = interface(DNCalendar)
  ['{3BDBB563-B645-33FA-AED4-CA04D7169B34}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNThaiBuddhistCalendar = class(TDNGenericImport<DNThaiBuddhistCalendarClass, DNThaiBuddhistCalendar>)
  public const
   ThaiBuddhistEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNUmAlQuraCalendarClass = interface(DNCalendarClass)
  ['{1EB4121A-6A81-5DFF-8EE0-91912704C243}']
  { constructors } 

    {class} function init: DNUmAlQuraCalendar;

  end;

  [DNTypeName('System.Globalization.UmAlQuraCalendar')]
  DNUmAlQuraCalendar = interface(DNCalendar)
  ['{54125FC5-02E1-371B-9405-16CD533680BF}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNUmAlQuraCalendar = class(TDNGenericImport<DNUmAlQuraCalendarClass, DNUmAlQuraCalendar>)
  public const
   UmAlQuraEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNCharUnicodeInfoClass = interface(DNObjectClass)
  ['{B3C19AF1-B8D4-5F92-98A8-99CE854B16F3}']
  { static methods } 

    {class} function GetDecimalDigitValue(ch: Char): Int32; overload;
    {class} function GetDecimalDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetDigitValue(ch: Char): Int32; overload;
    {class} function GetDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetNumericValue(ch: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function GetUnicodeCategory(ch: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(codePoint: Int32): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;

  end;

  [DNTypeName('System.Globalization.CharUnicodeInfo')]
  DNCharUnicodeInfo = interface(DNObject)
  ['{BDF2D514-3923-3BAF-A3D9-EB050F48E529}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCharUnicodeInfo = class(TDNGenericImport<DNCharUnicodeInfoClass, DNCharUnicodeInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCompareInfoClass = interface(DNObjectClass)
  ['{7170DB7D-EBD8-5AA3-975A-B86D7B620DF8}']
  { static methods } 

    {class} function GetCompareInfo(culture: Int32; assembly: DNAssembly): DNCompareInfo; overload;
    {class} function GetCompareInfo(name: string; assembly: DNAssembly): DNCompareInfo; overload;
    {class} function GetCompareInfo(culture: Int32): DNCompareInfo; overload;
    {class} function GetCompareInfo(name: string): DNCompareInfo; overload;
    {class} function IsSortable(ch: Char): Boolean; overload;
    {class} function IsSortable(text: string): Boolean; overload;
    {class} function IsSortable(text: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function IsSortable(value: DNRune): Boolean; overload;

  end;

  [DNTypeName('System.Globalization.CompareInfo')]
  DNCompareInfo = interface(DNIDeserializationCallback)
  ['{6D827F45-38D6-3442-A400-AB80A9A5FC75}']
  { getters & setters } 

    function get_Name: string;
    function get_Version: DNSortVersion;
    function get_LCID: Int32;

  { methods } 

    function Compare(string1: string; string2: string): Int32; overload;
    function Compare(string1: string; string2: string; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32; options: DNCompareOptions): Int32; overload;
    function Compare(string1: DNReadOnlySpan<Char>; string2: DNReadOnlySpan<Char>; options: DNCompareOptions): Int32; overload;
    function IsPrefix(source: string; prefix: string; options: DNCompareOptions): Boolean; overload;
    function IsPrefix(source: DNReadOnlySpan<Char>; prefix: DNReadOnlySpan<Char>; options: DNCompareOptions): Boolean; overload;
    function IsPrefix(source: DNReadOnlySpan<Char>; prefix: DNReadOnlySpan<Char>; options: DNCompareOptions; out matchLength: Int32): Boolean; overload;
    function IsPrefix(source: string; prefix: string): Boolean; overload;
    function IsSuffix(source: string; suffix: string; options: DNCompareOptions): Boolean; overload;
    function IsSuffix(source: DNReadOnlySpan<Char>; suffix: DNReadOnlySpan<Char>; options: DNCompareOptions): Boolean; overload;
    function IsSuffix(source: DNReadOnlySpan<Char>; suffix: DNReadOnlySpan<Char>; options: DNCompareOptions; out matchLength: Int32): Boolean; overload;
    function IsSuffix(source: string; suffix: string): Boolean; overload;
    function IndexOf(source: string; value: Char): Int32; overload;
    function IndexOf(source: string; value: string): Int32; overload;
    function IndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; options: DNCompareOptions; out matchLength: Int32): Int32; overload;
    function IndexOf(source: DNReadOnlySpan<Char>; value: DNRune; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char): Int32; overload;
    function LastIndexOf(source: string; value: string): Int32; overload;
    function LastIndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; options: DNCompareOptions; out matchLength: Int32): Int32; overload;
    function LastIndexOf(source: DNReadOnlySpan<Char>; value: DNRune; options: DNCompareOptions): Int32; overload;
    function GetSortKey(source: string; options: DNCompareOptions): DNSortKey; overload;
    function GetSortKey(source: string): DNSortKey; overload;
    function GetSortKey(source: DNReadOnlySpan<Char>; destination: DNSpan<Byte>; options: DNCompareOptions): Int32; overload;
    function GetSortKeyLength(source: DNReadOnlySpan<Char>; options: DNCompareOptions): Int32;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32; overload;
    function GetHashCode(source: string; options: DNCompareOptions): Int32; overload;
    function GetHashCode(source: DNReadOnlySpan<Char>; options: DNCompareOptions): Int32; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Version: DNSortVersion read get_Version;
    property LCID: Int32 read get_LCID;
  end;

  TDNCompareInfo = class(TDNGenericImport<DNCompareInfoClass, DNCompareInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureInfoClass = interface(DNObjectClass)
  ['{A9F7C274-90D5-5F24-9EA5-CFE171A7DAB8}']
  { static getter & setter } 

    {class} function get_CurrentCulture: DNCultureInfo;
    {class} procedure set_CurrentCulture(value: DNCultureInfo);
    {class} function get_CurrentUICulture: DNCultureInfo;
    {class} procedure set_CurrentUICulture(value: DNCultureInfo);
    {class} function get_InstalledUICulture: DNCultureInfo;
    {class} function get_DefaultThreadCurrentCulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentCulture(value: DNCultureInfo);
    {class} function get_DefaultThreadCurrentUICulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentUICulture(value: DNCultureInfo);
    {class} function get_InvariantCulture: DNCultureInfo;

  { constructors } 

    {class} function init(name: string): DNCultureInfo; overload;
    {class} function init(name: string; useUserOverride: Boolean): DNCultureInfo; overload;
    {class} function init(culture: Int32): DNCultureInfo; overload;
    {class} function init(culture: Int32; useUserOverride: Boolean): DNCultureInfo; overload;

  { static methods } 

    {class} function CreateSpecificCulture(name: string): DNCultureInfo;
    {class} function GetCultures(types: DNCultureTypes): TArray<DNCultureInfo>;
    {class} function ReadOnly(ci: DNCultureInfo): DNCultureInfo;
    {class} function GetCultureInfo(culture: Int32): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string; altName: string): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string; predefinedOnly: Boolean): DNCultureInfo; overload;
    {class} function GetCultureInfoByIetfLanguageTag(name: string): DNCultureInfo;

  { static propertys } 

    {class} property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    {class} property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    {class} property InstalledUICulture: DNCultureInfo read get_InstalledUICulture;
    {class} property DefaultThreadCurrentCulture: DNCultureInfo read get_DefaultThreadCurrentCulture write set_DefaultThreadCurrentCulture;
    {class} property DefaultThreadCurrentUICulture: DNCultureInfo read get_DefaultThreadCurrentUICulture write set_DefaultThreadCurrentUICulture;
    {class} property InvariantCulture: DNCultureInfo read get_InvariantCulture;
  end;

  [DNTypeName('System.Globalization.CultureInfo')]
  DNCultureInfo = interface(DNIFormatProvider)
  ['{681482E3-A0C6-376E-8D59-985CBAC74D00}']
  { getters & setters } 

    function get_Parent: DNCultureInfo;
    function get_LCID: Int32;
    function get_KeyboardLayoutId: Int32;
    function get_Name: string;
    function get_IetfLanguageTag: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_EnglishName: string;
    function get_TwoLetterISOLanguageName: string;
    function get_ThreeLetterISOLanguageName: string;
    function get_ThreeLetterWindowsLanguageName: string;
    function get_CompareInfo: DNCompareInfo;
    function get_TextInfo: DNTextInfo;
    function get_IsNeutralCulture: Boolean;
    function get_CultureTypes: DNCultureTypes;
    function get_NumberFormat: DNNumberFormatInfo;
    procedure set_NumberFormat(value: DNNumberFormatInfo);
    function get_DateTimeFormat: DNDateTimeFormatInfo;
    procedure set_DateTimeFormat(value: DNDateTimeFormatInfo);
    function get_Calendar: DNCalendar;
    function get_OptionalCalendars: TArray<DNCalendar>;
    function get_UseUserOverride: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetFormat(formatType: DNType): DNObject;
    procedure ClearCachedData;
    function GetConsoleFallbackUICulture: DNCultureInfo;
    function Clone: DNObject;
    function GetType: DNType;

  { propertys } 

    property Parent: DNCultureInfo read get_Parent;
    property LCID: Int32 read get_LCID;
    property KeyboardLayoutId: Int32 read get_KeyboardLayoutId;
    property Name: string read get_Name;
    property IetfLanguageTag: string read get_IetfLanguageTag;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property EnglishName: string read get_EnglishName;
    property TwoLetterISOLanguageName: string read get_TwoLetterISOLanguageName;
    property ThreeLetterISOLanguageName: string read get_ThreeLetterISOLanguageName;
    property ThreeLetterWindowsLanguageName: string read get_ThreeLetterWindowsLanguageName;
    property CompareInfo: DNCompareInfo read get_CompareInfo;
    property TextInfo: DNTextInfo read get_TextInfo;
    property IsNeutralCulture: Boolean read get_IsNeutralCulture;
    property CultureTypes: DNCultureTypes read get_CultureTypes;
    property NumberFormat: DNNumberFormatInfo read get_NumberFormat write set_NumberFormat;
    property DateTimeFormat: DNDateTimeFormatInfo read get_DateTimeFormat write set_DateTimeFormat;
    property Calendar: DNCalendar read get_Calendar;
    property OptionalCalendars: TArray<DNCalendar> read get_OptionalCalendars;
    property UseUserOverride: Boolean read get_UseUserOverride;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNCultureInfo = class(TDNGenericImport<DNCultureInfoClass, DNCultureInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDateTimeFormatInfoClass = interface(DNObjectClass)
  ['{6F9BEA2A-045F-5F02-9EB3-CC06ECEF2A2F}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNDateTimeFormatInfo;
    {class} function get_CurrentInfo: DNDateTimeFormatInfo;

  { constructors } 

    {class} function init: DNDateTimeFormatInfo;

  { static methods } 

    {class} function ReadOnly(dtfi: DNDateTimeFormatInfo): DNDateTimeFormatInfo;
    {class} function GetInstance(provider: DNIFormatProvider): DNDateTimeFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNDateTimeFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNDateTimeFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.DateTimeFormatInfo')]
  DNDateTimeFormatInfo = interface(DNIFormatProvider)
  ['{8F3DC8F9-5BFF-3988-9557-83CD280532DE}']
  { getters & setters } 

    function get_AMDesignator: string;
    procedure set_AMDesignator(value: string);
    function get_Calendar: DNCalendar;
    procedure set_Calendar(value: DNCalendar);
    function get_DateSeparator: string;
    procedure set_DateSeparator(value: string);
    function get_FirstDayOfWeek: DNDayOfWeek;
    procedure set_FirstDayOfWeek(value: DNDayOfWeek);
    function get_CalendarWeekRule: DNCalendarWeekRule;
    procedure set_CalendarWeekRule(value: DNCalendarWeekRule);
    function get_FullDateTimePattern: string;
    procedure set_FullDateTimePattern(value: string);
    function get_LongDatePattern: string;
    procedure set_LongDatePattern(value: string);
    function get_LongTimePattern: string;
    procedure set_LongTimePattern(value: string);
    function get_MonthDayPattern: string;
    procedure set_MonthDayPattern(value: string);
    function get_PMDesignator: string;
    procedure set_PMDesignator(value: string);
    function get_RFC1123Pattern: string;
    function get_ShortDatePattern: string;
    procedure set_ShortDatePattern(value: string);
    function get_ShortTimePattern: string;
    procedure set_ShortTimePattern(value: string);
    function get_SortableDateTimePattern: string;
    function get_TimeSeparator: string;
    procedure set_TimeSeparator(value: string);
    function get_UniversalSortableDateTimePattern: string;
    function get_YearMonthPattern: string;
    procedure set_YearMonthPattern(value: string);
    function get_AbbreviatedDayNames: TArray<string>;
    procedure set_AbbreviatedDayNames(value: TArray<string>);
    function get_ShortestDayNames: TArray<string>;
    procedure set_ShortestDayNames(value: TArray<string>);
    function get_DayNames: TArray<string>;
    procedure set_DayNames(value: TArray<string>);
    function get_AbbreviatedMonthNames: TArray<string>;
    procedure set_AbbreviatedMonthNames(value: TArray<string>);
    function get_MonthNames: TArray<string>;
    procedure set_MonthNames(value: TArray<string>);
    function get_IsReadOnly: Boolean;
    function get_NativeCalendarName: string;
    function get_AbbreviatedMonthGenitiveNames: TArray<string>;
    procedure set_AbbreviatedMonthGenitiveNames(value: TArray<string>);
    function get_MonthGenitiveNames: TArray<string>;
    procedure set_MonthGenitiveNames(value: TArray<string>);

  { methods } 

    function GetAllDateTimePatterns: TArray<string>; overload;
    function GetAllDateTimePatterns(format: Char): TArray<string>; overload;
    function GetDayName(dayofweek: DNDayOfWeek): string;
    function GetAbbreviatedMonthName(month: Int32): string;
    function GetMonthName(month: Int32): string;
    procedure SetAllDateTimePatterns(patterns: TArray<string>; format: Char);
    function GetFormat(formatType: DNType): DNObject;
    function Clone: DNObject;
    function GetEra(eraName: string): Int32;
    function GetEraName(era: Int32): string;
    function GetAbbreviatedEraName(era: Int32): string;
    function GetAbbreviatedDayName(dayofweek: DNDayOfWeek): string;
    function GetShortestDayName(dayOfWeek: DNDayOfWeek): string;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AMDesignator: string read get_AMDesignator write set_AMDesignator;
    property Calendar: DNCalendar read get_Calendar write set_Calendar;
    property DateSeparator: string read get_DateSeparator write set_DateSeparator;
    property FirstDayOfWeek: DNDayOfWeek read get_FirstDayOfWeek write set_FirstDayOfWeek;
    property CalendarWeekRule: DNCalendarWeekRule read get_CalendarWeekRule write set_CalendarWeekRule;
    property FullDateTimePattern: string read get_FullDateTimePattern write set_FullDateTimePattern;
    property LongDatePattern: string read get_LongDatePattern write set_LongDatePattern;
    property LongTimePattern: string read get_LongTimePattern write set_LongTimePattern;
    property MonthDayPattern: string read get_MonthDayPattern write set_MonthDayPattern;
    property PMDesignator: string read get_PMDesignator write set_PMDesignator;
    property RFC1123Pattern: string read get_RFC1123Pattern;
    property ShortDatePattern: string read get_ShortDatePattern write set_ShortDatePattern;
    property ShortTimePattern: string read get_ShortTimePattern write set_ShortTimePattern;
    property SortableDateTimePattern: string read get_SortableDateTimePattern;
    property TimeSeparator: string read get_TimeSeparator write set_TimeSeparator;
    property UniversalSortableDateTimePattern: string read get_UniversalSortableDateTimePattern;
    property YearMonthPattern: string read get_YearMonthPattern write set_YearMonthPattern;
    property AbbreviatedDayNames: TArray<string> read get_AbbreviatedDayNames write set_AbbreviatedDayNames;
    property ShortestDayNames: TArray<string> read get_ShortestDayNames write set_ShortestDayNames;
    property DayNames: TArray<string> read get_DayNames write set_DayNames;
    property AbbreviatedMonthNames: TArray<string> read get_AbbreviatedMonthNames write set_AbbreviatedMonthNames;
    property MonthNames: TArray<string> read get_MonthNames write set_MonthNames;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property NativeCalendarName: string read get_NativeCalendarName;
    property AbbreviatedMonthGenitiveNames: TArray<string> read get_AbbreviatedMonthGenitiveNames write set_AbbreviatedMonthGenitiveNames;
    property MonthGenitiveNames: TArray<string> read get_MonthGenitiveNames write set_MonthGenitiveNames;
  end;

  TDNDateTimeFormatInfo = class(TDNGenericImport<DNDateTimeFormatInfoClass, DNDateTimeFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDaylightTimeClass = interface(DNObjectClass)
  ['{FA7C955E-51BE-5A0B-8A33-AD9801F37E0C}']
  { constructors } 

    {class} function init(start: DNDateTime; &end: DNDateTime; delta: DNTimeSpan): DNDaylightTime;

  end;

  [DNTypeName('System.Globalization.DaylightTime')]
  DNDaylightTime = interface(DNObject)
  ['{0F47DDA8-6348-390F-99EC-46DBEED5236D}']
  { getters & setters } 

    function get_Start: DNDateTime;
    function get_End: DNDateTime;
    function get_Delta: DNTimeSpan;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Start: DNDateTime read get_Start;
    property &End: DNDateTime read get_End;
    property Delta: DNTimeSpan read get_Delta;
  end;

  TDNDaylightTime = class(TDNGenericImport<DNDaylightTimeClass, DNDaylightTime>) end;

  //-------------namespace: System.Globalization----------------
  DNGlobalizationExtensionsClass = interface(DNObjectClass)
  ['{2AAC7E88-307C-5891-BEB0-3EAF647E0DF7}']
  { static methods } 

    {class} function GetStringComparer(compareInfo: DNCompareInfo; options: DNCompareOptions): DNStringComparer;

  end;

  [DNTypeName('System.Globalization.GlobalizationExtensions')]
  DNGlobalizationExtensions = interface(DNObject)
  ['{04034D1E-DF36-380F-9DE1-587ADE975233}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNGlobalizationExtensions = class(TDNGenericImport<DNGlobalizationExtensionsClass, DNGlobalizationExtensions>) end;

  //-------------namespace: System.Globalization----------------
  DNIdnMappingClass = interface(DNObjectClass)
  ['{37083EFC-8AFC-56BB-BBB2-DD973B2C464E}']
  { constructors } 

    {class} function init: DNIdnMapping;

  end;

  [DNTypeName('System.Globalization.IdnMapping')]
  DNIdnMapping = interface(DNObject)
  ['{DEEE9D05-C7FB-3025-9B83-6F3D91AD35C7}']
  { getters & setters } 

    function get_AllowUnassigned: Boolean;
    procedure set_AllowUnassigned(value: Boolean);
    function get_UseStd3AsciiRules: Boolean;
    procedure set_UseStd3AsciiRules(value: Boolean);

  { methods } 

    function GetAscii(unicode: string): string; overload;
    function GetAscii(unicode: string; index: Int32): string; overload;
    function GetAscii(unicode: string; index: Int32; count: Int32): string; overload;
    function GetUnicode(ascii: string): string; overload;
    function GetUnicode(ascii: string; index: Int32): string; overload;
    function GetUnicode(ascii: string; index: Int32; count: Int32): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property AllowUnassigned: Boolean read get_AllowUnassigned write set_AllowUnassigned;
    property UseStd3AsciiRules: Boolean read get_UseStd3AsciiRules write set_UseStd3AsciiRules;
  end;

  TDNIdnMapping = class(TDNGenericImport<DNIdnMappingClass, DNIdnMapping>) end;

  //-------------namespace: System.Globalization----------------
  DNISOWeekClass = interface(DNObjectClass)
  ['{86483AC9-73FF-5A25-B746-19B5D1BD9525}']
  { static methods } 

    {class} function GetWeekOfYear(date: DNDateTime): Int32;
    {class} function GetYear(date: DNDateTime): Int32;
    {class} function GetYearStart(year: Int32): DNDateTime;
    {class} function GetYearEnd(year: Int32): DNDateTime;
    {class} function GetWeeksInYear(year: Int32): Int32;
    {class} function ToDateTime(year: Int32; week: Int32; dayOfWeek: DNDayOfWeek): DNDateTime;

  end;

  [DNTypeName('System.Globalization.ISOWeek')]
  DNISOWeek = interface(DNObject)
  ['{DEF12C16-8B2A-305C-B824-1D5CE2CD36E9}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNISOWeek = class(TDNGenericImport<DNISOWeekClass, DNISOWeek>) end;

  //-------------namespace: System.Globalization----------------
  DNNumberFormatInfoClass = interface(DNObjectClass)
  ['{7BFD60CD-751D-59E0-805A-4B6CFC6F8AC1}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNNumberFormatInfo;
    {class} function get_CurrentInfo: DNNumberFormatInfo;

  { constructors } 

    {class} function init: DNNumberFormatInfo;

  { static methods } 

    {class} function GetInstance(formatProvider: DNIFormatProvider): DNNumberFormatInfo;
    {class} function ReadOnly(nfi: DNNumberFormatInfo): DNNumberFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNNumberFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNNumberFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.NumberFormatInfo')]
  DNNumberFormatInfo = interface(DNIFormatProvider)
  ['{B418802F-B40F-3B34-8EFD-2C404385370F}']
  { getters & setters } 

    function get_CurrencyDecimalDigits: Int32;
    procedure set_CurrencyDecimalDigits(value: Int32);
    function get_CurrencyDecimalSeparator: string;
    procedure set_CurrencyDecimalSeparator(value: string);
    function get_IsReadOnly: Boolean;
    function get_CurrencyGroupSizes: TArray<Int32>;
    procedure set_CurrencyGroupSizes(value: TArray<Int32>);
    function get_NumberGroupSizes: TArray<Int32>;
    procedure set_NumberGroupSizes(value: TArray<Int32>);
    function get_PercentGroupSizes: TArray<Int32>;
    procedure set_PercentGroupSizes(value: TArray<Int32>);
    function get_CurrencyGroupSeparator: string;
    procedure set_CurrencyGroupSeparator(value: string);
    function get_CurrencySymbol: string;
    procedure set_CurrencySymbol(value: string);
    function get_NaNSymbol: string;
    procedure set_NaNSymbol(value: string);
    function get_CurrencyNegativePattern: Int32;
    procedure set_CurrencyNegativePattern(value: Int32);
    function get_NumberNegativePattern: Int32;
    procedure set_NumberNegativePattern(value: Int32);
    function get_PercentPositivePattern: Int32;
    procedure set_PercentPositivePattern(value: Int32);
    function get_PercentNegativePattern: Int32;
    procedure set_PercentNegativePattern(value: Int32);
    function get_NegativeInfinitySymbol: string;
    procedure set_NegativeInfinitySymbol(value: string);
    function get_NegativeSign: string;
    procedure set_NegativeSign(value: string);
    function get_NumberDecimalDigits: Int32;
    procedure set_NumberDecimalDigits(value: Int32);
    function get_NumberDecimalSeparator: string;
    procedure set_NumberDecimalSeparator(value: string);
    function get_NumberGroupSeparator: string;
    procedure set_NumberGroupSeparator(value: string);
    function get_CurrencyPositivePattern: Int32;
    procedure set_CurrencyPositivePattern(value: Int32);
    function get_PositiveInfinitySymbol: string;
    procedure set_PositiveInfinitySymbol(value: string);
    function get_PositiveSign: string;
    procedure set_PositiveSign(value: string);
    function get_PercentDecimalDigits: Int32;
    procedure set_PercentDecimalDigits(value: Int32);
    function get_PercentDecimalSeparator: string;
    procedure set_PercentDecimalSeparator(value: string);
    function get_PercentGroupSeparator: string;
    procedure set_PercentGroupSeparator(value: string);
    function get_PercentSymbol: string;
    procedure set_PercentSymbol(value: string);
    function get_PerMilleSymbol: string;
    procedure set_PerMilleSymbol(value: string);
    function get_NativeDigits: TArray<string>;
    procedure set_NativeDigits(value: TArray<string>);
    function get_DigitSubstitution: DNDigitShapes;
    procedure set_DigitSubstitution(value: DNDigitShapes);

  { methods } 

    function Clone: DNObject;
    function GetFormat(formatType: DNType): DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CurrencyDecimalDigits: Int32 read get_CurrencyDecimalDigits write set_CurrencyDecimalDigits;
    property CurrencyDecimalSeparator: string read get_CurrencyDecimalSeparator write set_CurrencyDecimalSeparator;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CurrencyGroupSizes: TArray<Int32> read get_CurrencyGroupSizes write set_CurrencyGroupSizes;
    property NumberGroupSizes: TArray<Int32> read get_NumberGroupSizes write set_NumberGroupSizes;
    property PercentGroupSizes: TArray<Int32> read get_PercentGroupSizes write set_PercentGroupSizes;
    property CurrencyGroupSeparator: string read get_CurrencyGroupSeparator write set_CurrencyGroupSeparator;
    property CurrencySymbol: string read get_CurrencySymbol write set_CurrencySymbol;
    property NaNSymbol: string read get_NaNSymbol write set_NaNSymbol;
    property CurrencyNegativePattern: Int32 read get_CurrencyNegativePattern write set_CurrencyNegativePattern;
    property NumberNegativePattern: Int32 read get_NumberNegativePattern write set_NumberNegativePattern;
    property PercentPositivePattern: Int32 read get_PercentPositivePattern write set_PercentPositivePattern;
    property PercentNegativePattern: Int32 read get_PercentNegativePattern write set_PercentNegativePattern;
    property NegativeInfinitySymbol: string read get_NegativeInfinitySymbol write set_NegativeInfinitySymbol;
    property NegativeSign: string read get_NegativeSign write set_NegativeSign;
    property NumberDecimalDigits: Int32 read get_NumberDecimalDigits write set_NumberDecimalDigits;
    property NumberDecimalSeparator: string read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    property NumberGroupSeparator: string read get_NumberGroupSeparator write set_NumberGroupSeparator;
    property CurrencyPositivePattern: Int32 read get_CurrencyPositivePattern write set_CurrencyPositivePattern;
    property PositiveInfinitySymbol: string read get_PositiveInfinitySymbol write set_PositiveInfinitySymbol;
    property PositiveSign: string read get_PositiveSign write set_PositiveSign;
    property PercentDecimalDigits: Int32 read get_PercentDecimalDigits write set_PercentDecimalDigits;
    property PercentDecimalSeparator: string read get_PercentDecimalSeparator write set_PercentDecimalSeparator;
    property PercentGroupSeparator: string read get_PercentGroupSeparator write set_PercentGroupSeparator;
    property PercentSymbol: string read get_PercentSymbol write set_PercentSymbol;
    property PerMilleSymbol: string read get_PerMilleSymbol write set_PerMilleSymbol;
    property NativeDigits: TArray<string> read get_NativeDigits write set_NativeDigits;
    property DigitSubstitution: DNDigitShapes read get_DigitSubstitution write set_DigitSubstitution;
  end;

  TDNNumberFormatInfo = class(TDNGenericImport<DNNumberFormatInfoClass, DNNumberFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNRegionInfoClass = interface(DNObjectClass)
  ['{65B5F314-E943-58A1-8BE4-97523FECB95B}']
  { static getter & setter } 

    {class} function get_CurrentRegion: DNRegionInfo;

  { constructors } 

    {class} function init(name: string): DNRegionInfo; overload;
    {class} function init(culture: Int32): DNRegionInfo; overload;

  { static propertys } 

    {class} property CurrentRegion: DNRegionInfo read get_CurrentRegion;
  end;

  [DNTypeName('System.Globalization.RegionInfo')]
  DNRegionInfo = interface(DNObject)
  ['{0DD376EA-E0EA-32A0-A6A5-5D0690A7FDCB}']
  { getters & setters } 

    function get_Name: string;
    function get_EnglishName: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_TwoLetterISORegionName: string;
    function get_ThreeLetterISORegionName: string;
    function get_ThreeLetterWindowsRegionName: string;
    function get_IsMetric: Boolean;
    function get_GeoId: Int32;
    function get_CurrencyEnglishName: string;
    function get_CurrencyNativeName: string;
    function get_CurrencySymbol: string;
    function get_ISOCurrencySymbol: string;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property EnglishName: string read get_EnglishName;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property TwoLetterISORegionName: string read get_TwoLetterISORegionName;
    property ThreeLetterISORegionName: string read get_ThreeLetterISORegionName;
    property ThreeLetterWindowsRegionName: string read get_ThreeLetterWindowsRegionName;
    property IsMetric: Boolean read get_IsMetric;
    property GeoId: Int32 read get_GeoId;
    property CurrencyEnglishName: string read get_CurrencyEnglishName;
    property CurrencyNativeName: string read get_CurrencyNativeName;
    property CurrencySymbol: string read get_CurrencySymbol;
    property ISOCurrencySymbol: string read get_ISOCurrencySymbol;
  end;

  TDNRegionInfo = class(TDNGenericImport<DNRegionInfoClass, DNRegionInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNSortKeyClass = interface(DNObjectClass)
  ['{1A3DB5E9-DF2B-51C4-B8CB-1EEB86C3C4B4}']
  { static methods } 

    {class} function Compare(sortkey1: DNSortKey; sortkey2: DNSortKey): Int32;

  end;

  [DNTypeName('System.Globalization.SortKey')]
  DNSortKey = interface(DNObject)
  ['{155D7F7C-2361-34A3-A152-DE1A7B9B0FE4}']
  { getters & setters } 

    function get_OriginalString: string;
    function get_KeyData: TArray<Byte>;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OriginalString: string read get_OriginalString;
    property KeyData: TArray<Byte> read get_KeyData;
  end;

  TDNSortKey = class(TDNGenericImport<DNSortKeyClass, DNSortKey>) end;

  //-------------namespace: System.Globalization----------------
  DNSortVersionClass = interface(DNObjectClass)
  ['{682C66C6-5729-528B-BC3F-09BC1A48F34C}']
  { constructors } 

    {class} function init(fullVersion: Int32; sortId: DNGuid): DNSortVersion;

  end;

  [DNTypeName('System.Globalization.SortVersion')]
  DNSortVersion = interface(DNObject)
  ['{9E1945DE-3359-3480-ADE8-B89B95C0ACC5}']
  { getters & setters } 

    function get_FullVersion: Int32;
    function get_SortId: DNGuid;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNSortVersion): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property FullVersion: Int32 read get_FullVersion;
    property SortId: DNGuid read get_SortId;
  end;

  TDNSortVersion = class(TDNGenericImport<DNSortVersionClass, DNSortVersion>) end;

  //-------------namespace: System.Globalization----------------
  DNStringInfoClass = interface(DNObjectClass)
  ['{8FB8EBCF-F111-524D-BD9B-4EE0936870FD}']
  { constructors } 

    {class} function init: DNStringInfo; overload;
    {class} function init(value: string): DNStringInfo; overload;

  { static methods } 

    {class} function GetNextTextElement(str: string): string; overload;
    {class} function GetNextTextElement(str: string; index: Int32): string; overload;
    {class} function GetTextElementEnumerator(str: string): DNTextElementEnumerator; overload;
    {class} function GetTextElementEnumerator(str: string; index: Int32): DNTextElementEnumerator; overload;
    {class} function ParseCombiningCharacters(str: string): TArray<Int32>;

  end;

  [DNTypeName('System.Globalization.StringInfo')]
  DNStringInfo = interface(DNObject)
  ['{3D4A1C28-7F82-383A-B7DD-D99D25BD28BD}']
  { getters & setters } 

    function get_String: string;
    procedure set_String(value: string);
    function get_LengthInTextElements: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function SubstringByTextElements(startingTextElement: Int32): string; overload;
    function SubstringByTextElements(startingTextElement: Int32; lengthInTextElements: Int32): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property &String: string read get_String write set_String;
    property LengthInTextElements: Int32 read get_LengthInTextElements;
  end;

  TDNStringInfo = class(TDNGenericImport<DNStringInfoClass, DNStringInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNTextElementEnumeratorClass = interface(DNObjectClass)
  ['{98E3A18D-7D5B-5E54-A87F-5680EA9183B0}']
  end;

  [DNTypeName('System.Globalization.TextElementEnumerator')]
  DNTextElementEnumerator = interface(DNIEnumerator)
  ['{4AF0AD8C-02E0-3FD1-A00F-A466DDC5FE4B}']
  { getters & setters } 

    function get_Current: DNObject;
    function get_ElementIndex: Int32;

  { methods } 

    function MoveNext: Boolean;
    function GetTextElement: string;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNObject read get_Current;
    property ElementIndex: Int32 read get_ElementIndex;
  end;

  TDNTextElementEnumerator = class(TDNGenericImport<DNTextElementEnumeratorClass, DNTextElementEnumerator>) end;

  //-------------namespace: System.Globalization----------------
  DNTextInfoClass = interface(DNObjectClass)
  ['{23DA2D37-C4BE-58E8-82C7-4CD8F32CC2D8}']
  { static methods } 

    {class} function ReadOnly(textInfo: DNTextInfo): DNTextInfo;

  end;

  [DNTypeName('System.Globalization.TextInfo')]
  DNTextInfo = interface(DNICloneable)
  ['{8F5D7874-BB82-32AF-829D-6A8BFF185960}']
  { getters & setters } 

    function get_ANSICodePage: Int32;
    function get_OEMCodePage: Int32;
    function get_MacCodePage: Int32;
    function get_EBCDICCodePage: Int32;
    function get_LCID: Int32;
    function get_CultureName: string;
    function get_IsReadOnly: Boolean;
    function get_ListSeparator: string;
    procedure set_ListSeparator(value: string);
    function get_IsRightToLeft: Boolean;

  { methods } 

    function Clone: DNObject;
    function ToLower(c: Char): Char; overload;
    function ToLower(str: string): string; overload;
    function ToUpper(c: Char): Char; overload;
    function ToUpper(str: string): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function ToTitleCase(str: string): string;
    function GetType: DNType;

  { propertys } 

    property ANSICodePage: Int32 read get_ANSICodePage;
    property OEMCodePage: Int32 read get_OEMCodePage;
    property MacCodePage: Int32 read get_MacCodePage;
    property EBCDICCodePage: Int32 read get_EBCDICCodePage;
    property LCID: Int32 read get_LCID;
    property CultureName: string read get_CultureName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property ListSeparator: string read get_ListSeparator write set_ListSeparator;
    property IsRightToLeft: Boolean read get_IsRightToLeft;
  end;

  TDNTextInfo = class(TDNGenericImport<DNTextInfoClass, DNTextInfo>) end;

  //-------------namespace: System.IO----------------
  DNBinaryReaderClass = interface(DNObjectClass)
  ['{A85F7FE2-4CEB-5F85-8AAA-E57EEA1BE653}']
  { constructors } 

    {class} function init(input: DNStream): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryReader; overload;

  end;

  [DNTypeName('System.IO.BinaryReader')]
  DNBinaryReader = interface(DNIDisposable)
  ['{987DABEB-72FF-3309-9D6E-FCA11E084BFD}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Dispose;
    procedure Close;
    function PeekChar: Int32;
    function Read: Int32; overload;
    function ReadByte: Byte;
    function ReadSByte: SByte;
    function ReadBoolean: Boolean;
    function ReadChar: Char;
    function ReadInt16: Int16;
    function ReadUInt16: UInt16;
    function ReadInt32: Int32;
    function ReadUInt32: UInt32;
    function ReadInt64: Int64;
    function ReadUInt64: UInt64;
    function ReadSingle: Single;
    function ReadDouble: Double;
    function ReadDecimal: DNDecimal;
    function ReadString: string;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadChars(count: Int32): TArray<Char>;
    function Read(buffer: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadBytes(count: Int32): TArray<Byte>;
    function Read7BitEncodedInt: Int32;
    function Read7BitEncodedInt64: Int64;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryReader = class(TDNGenericImport<DNBinaryReaderClass, DNBinaryReader>) end;

  //-------------namespace: System.IO----------------
  DNBinaryWriterClass = interface(DNObjectClass)
  ['{92614C65-B93F-5DAC-B14B-921CD120A9DE}']
  { constructors } 

    {class} function init(output: DNStream): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNBinaryWriter;

  { static fields } 

    {class} property Null: DNBinaryWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.BinaryWriter')]
  DNBinaryWriter = interface(DNIDisposable)
  ['{D5DA9C16-6C6C-36B9-ACFF-7271B84F4F32}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Close;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    procedure Flush;
    function Seek(offset: Int32; origin: DNSeekOrigin): Int64;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Byte); overload;
    procedure Write(value: SByte); overload;
    procedure Write(buffer: TArray<Byte>); overload;
    procedure Write(buffer: TArray<Byte>; index: Int32; count: Int32); overload;
    procedure Write(ch: Char); overload;
    procedure Write(chars: TArray<Char>); overload;
    procedure Write(chars: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: Int16); overload;
    procedure Write(value: UInt16); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: string); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    procedure Write(chars: DNReadOnlySpan<Char>); overload;
    procedure Write7BitEncodedInt(value: Int32);
    procedure Write7BitEncodedInt64(value: Int64);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryWriter = class(TDNGenericImport<DNBinaryWriterClass, DNBinaryWriter>) end;

  //-------------namespace: System.IO----------------
  DNPathClass = interface(DNObjectClass)
  ['{EAB4A186-3129-52CF-A5C4-B90A6A9D5DB4}']
  { static fields getter & setter } 

   function __fakeFieldGet_DirectorySeparatorChar: Char;
   function __fakeFieldGet_AltDirectorySeparatorChar: Char;
   function __fakeFieldGet_VolumeSeparatorChar: Char;
   function __fakeFieldGet_PathSeparator: Char;
   function __fakeFieldGet_InvalidPathChars: TArray<Char>;

  { static fields } 

    {class} property DirectorySeparatorChar: Char read __fakeFieldGet_DirectorySeparatorChar;
    {class} property AltDirectorySeparatorChar: Char read __fakeFieldGet_AltDirectorySeparatorChar;
    {class} property VolumeSeparatorChar: Char read __fakeFieldGet_VolumeSeparatorChar;
    {class} property PathSeparator: Char read __fakeFieldGet_PathSeparator;
    {class} property InvalidPathChars: TArray<Char> read __fakeFieldGet_InvalidPathChars;

  { static methods } 

    {class} function ChangeExtension(path: string; extension: string): string;
    {class} function GetDirectoryName(path: string): string; overload;
    {class} function GetDirectoryName(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetExtension(path: string): string; overload;
    {class} function GetExtension(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetFileName(path: string): string; overload;
    {class} function GetFileName(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetFileNameWithoutExtension(path: string): string; overload;
    {class} function GetFileNameWithoutExtension(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetRandomFileName: string;
    {class} function IsPathFullyQualified(path: string): Boolean; overload;
    {class} function IsPathFullyQualified(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function HasExtension(path: string): Boolean; overload;
    {class} function HasExtension(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function Combine(path1: string; path2: string): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string; path4: string): string; overload;
    {class} function Combine(paths: TArray<string>): string; overload;
    {class} function Join(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>): string; overload;
    {class} function Join(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; path3: DNReadOnlySpan<Char>): string; overload;
    {class} function Join(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; path3: DNReadOnlySpan<Char>; path4: DNReadOnlySpan<Char>): string; overload;
    {class} function Join(path1: string; path2: string): string; overload;
    {class} function Join(path1: string; path2: string; path3: string): string; overload;
    {class} function Join(path1: string; path2: string; path3: string; path4: string): string; overload;
    {class} function Join(paths: TArray<string>): string; overload;
    {class} function TryJoin(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    {class} function TryJoin(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; path3: DNReadOnlySpan<Char>; destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    {class} function GetRelativePath(relativeTo: string; path: string): string;
    {class} function TrimEndingDirectorySeparator(path: string): string; overload;
    {class} function TrimEndingDirectorySeparator(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function EndsInDirectorySeparator(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function EndsInDirectorySeparator(path: string): Boolean; overload;
    {class} function GetInvalidFileNameChars: TArray<Char>;
    {class} function GetInvalidPathChars: TArray<Char>;
    {class} function GetFullPath(path: string): string; overload;
    {class} function GetFullPath(path: string; basePath: string): string; overload;
    {class} function GetTempPath: string;
    {class} function GetTempFileName: string;
    {class} function IsPathRooted(path: string): Boolean; overload;
    {class} function IsPathRooted(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function GetPathRoot(path: string): string; overload;
    {class} function GetPathRoot(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;

  end;

  [DNTypeName('System.IO.Path')]
  DNPath = interface(DNObject)
  ['{6D229EB3-CF95-3496-A1B7-A0FC7C1E3448}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryAccessorClass = interface(DNObjectClass)
  ['{12E056BF-C796-5DCC-9570-67A4881CF17F}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64): DNUnmanagedMemoryAccessor; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryAccessor; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryAccessor')]
  DNUnmanagedMemoryAccessor = interface(DNIDisposable)
  ['{E2CAF238-D37C-3990-83DA-FC55049730D0}']
  { getters & setters } 

    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    procedure Dispose;
    function ReadBoolean(position: Int64): Boolean;
    function ReadByte(position: Int64): Byte;
    function ReadChar(position: Int64): Char;
    function ReadInt16(position: Int64): Int16;
    function ReadInt32(position: Int64): Int32;
    function ReadInt64(position: Int64): Int64;
    function ReadDecimal(position: Int64): DNDecimal;
    function ReadSingle(position: Int64): Single;
    function ReadDouble(position: Int64): Double;
    function ReadSByte(position: Int64): SByte;
    function ReadUInt16(position: Int64): UInt16;
    function ReadUInt32(position: Int64): UInt32;
    function ReadUInt64(position: Int64): UInt64;
    procedure Write(position: Int64; value: Boolean); overload;
    procedure Write(position: Int64; value: Byte); overload;
    procedure Write(position: Int64; value: Char); overload;
    procedure Write(position: Int64; value: Int16); overload;
    procedure Write(position: Int64; value: Int32); overload;
    procedure Write(position: Int64; value: Int64); overload;
    procedure Write(position: Int64; value: DNDecimal); overload;
    procedure Write(position: Int64; value: Single); overload;
    procedure Write(position: Int64; value: Double); overload;
    procedure Write(position: Int64; value: SByte); overload;
    procedure Write(position: Int64; value: UInt16); overload;
    procedure Write(position: Int64; value: UInt32); overload;
    procedure Write(position: Int64; value: UInt64); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int64 read get_Capacity;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNUnmanagedMemoryAccessor = class(TDNGenericImport<DNUnmanagedMemoryAccessorClass, DNUnmanagedMemoryAccessor>) end;

  //-------------namespace: System----------------
  DNLazyClass<T> = interface(DNObjectClass)
  ['{ABC0FD30-B0E6-5289-B472-E39B59E98C20}']
  { constructors } 

    {class} function init: DNLazy<T>; overload;
    {class} function init(value: T): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNLazy<T>; overload;
    {class} function init(isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;

  end;

  [DNTypeName('System.Lazy`1')]
  DNLazy<T> = interface(DNObject)
  ['{5B614EA2-C39C-37A1-BFF4-D929F18168EF}']
  { getters & setters } 

    function get_IsValueCreated: Boolean;
    function get_Value: T;

  { methods } 

    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsValueCreated: Boolean read get_IsValueCreated;
    property Value: T read get_Value;
  end;

  TDNLazy<T> = class(TDNGenericImport<DNLazyClass<T>, DNLazy<T>>) end;

  //-------------namespace: System----------------
  DNLazyClass<T, TMetadata> = interface(DNLazyClass<T>)
  ['{B44E1C1A-DD17-572C-823C-01D1FE7FAF2C}']
  { constructors } 

    {class} function init(valueFactory: DNFunc<T>; metadata: TMetadata): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata; isThreadSafe: Boolean): DNLazy<T, TMetadata>; overload;
    {class} function init(valueFactory: DNFunc<T>; metadata: TMetadata; isThreadSafe: Boolean): DNLazy<T, TMetadata>; overload;
    {class} function init(metadata: TMetadata; mode: DNLazyThreadSafetyMode): DNLazy<T, TMetadata>; overload;
    {class} function init(valueFactory: DNFunc<T>; metadata: TMetadata; mode: DNLazyThreadSafetyMode): DNLazy<T, TMetadata>; overload;

  end;

  [DNTypeName('System.Lazy`2')]
  DNLazy<T, TMetadata> = interface(DNLazy<T>)
  ['{C22C622E-FFDC-323B-A4DA-174BC53BC1D6}']
  { getters & setters } 

    function get_Metadata: TMetadata;
    function get_IsValueCreated: Boolean;
    function get_Value: T;

  { methods } 

    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Metadata: TMetadata read get_Metadata;
    property IsValueCreated: Boolean read get_IsValueCreated;
    property Value: T read get_Value;
  end;

  TDNLazy<T, TMetadata> = class(TDNGenericImport<DNLazyClass<T, TMetadata>, DNLazy<T, TMetadata>>) end;

  //-------------namespace: System----------------
  DNLocalDataStoreSlotClass = interface(DNObjectClass)
  ['{6400B558-5024-5EDC-A021-5E089CDBB76F}']
  end;

  [DNTypeName('System.LocalDataStoreSlot')]
  DNLocalDataStoreSlot = interface(DNObject)
  ['{6BF60073-9682-3645-8422-365756567942}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLocalDataStoreSlot = class(TDNGenericImport<DNLocalDataStoreSlotClass, DNLocalDataStoreSlot>) end;

  //-------------namespace: System----------------
  DNMarshalByRefObjectClass = interface(DNObjectClass)
  ['{FA969268-F543-51A9-8D95-379F977692F7}']
  end;

  [DNTypeName('System.MarshalByRefObject')]
  DNMarshalByRefObject = interface(DNObject)
  ['{042B4FFB-EDBE-384B-A163-788607086B81}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMarshalByRefObject = class(TDNGenericImport<DNMarshalByRefObjectClass, DNMarshalByRefObject>) end;

  //-------------namespace: System----------------
  DNAppDomainClass = interface(DNMarshalByRefObjectClass)
  ['{2C6C9764-7760-5CE9-8327-CC8568033C64}']
  { static getter & setter } 

    {class} function get_CurrentDomain: DNAppDomain;
    {class} function get_MonitoringIsEnabled: Boolean;
    {class} procedure set_MonitoringIsEnabled(value: Boolean);
    {class} function get_MonitoringSurvivedProcessMemorySize: Int64;

  { static methods } 

    {class} function CreateDomain(friendlyName: string): DNAppDomain;
    {class} procedure Unload(domain: DNAppDomain);
    {class} function GetCurrentThreadId: Int32;

  { static propertys } 

    {class} property CurrentDomain: DNAppDomain read get_CurrentDomain;
    {class} property MonitoringIsEnabled: Boolean read get_MonitoringIsEnabled write set_MonitoringIsEnabled;
    {class} property MonitoringSurvivedProcessMemorySize: Int64 read get_MonitoringSurvivedProcessMemorySize;
  end;

  [DNTypeName('System.AppDomain')]
  DNAppDomain = interface(DNMarshalByRefObject)
  ['{78E2B9F6-5EA3-3F33-B8E9-B3C9374F6807}']
  { getters & setters } 

    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_SetupInformation: DNAppDomainSetup;
    function get_PermissionSet: DNPermissionSet;
    function get_DynamicDirectory: string;
    function get_FriendlyName: string;
    function get_Id: Int32;
    function get_IsFullyTrusted: Boolean;
    function get_IsHomogenous: Boolean;
    function get_MonitoringSurvivedMemorySize: Int64;
    function get_MonitoringTotalAllocatedMemorySize: Int64;
    function get_ShadowCopyFiles: Boolean;
    function get_MonitoringTotalProcessorTime: DNTimeSpan;

  { events } 

    procedure add_UnhandledException(value: DNUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNUnhandledExceptionEventHandler);
    procedure add_DomainUnload(value: DNEventHandler);
    procedure remove_DomainUnload(value: DNEventHandler);
    procedure add_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    procedure remove_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    procedure add_ProcessExit(value: DNEventHandler);
    procedure remove_ProcessExit(value: DNEventHandler);
    procedure add_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure remove_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    procedure add_AssemblyResolve(value: DNResolveEventHandler);
    procedure remove_AssemblyResolve(value: DNResolveEventHandler);
    procedure add_ReflectionOnlyAssemblyResolve(value: DNResolveEventHandler);
    procedure remove_ReflectionOnlyAssemblyResolve(value: DNResolveEventHandler);
    procedure add_TypeResolve(value: DNResolveEventHandler);
    procedure remove_TypeResolve(value: DNResolveEventHandler);
    procedure add_ResourceResolve(value: DNResolveEventHandler);
    procedure remove_ResourceResolve(value: DNResolveEventHandler);

  { methods } 

    procedure SetDynamicBase(path: string);
    function ApplyPolicy(assemblyName: string): string;
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: DNAssemblyName; args: TArray<string>): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string; args: TArray<string>): Int32; overload;
    function GetData(name: string): DNObject;
    procedure SetData(name: string; data: DNObject);
    function IsCompatibilitySwitchSet(value: string): DNNullable<Boolean>;
    function IsDefaultAppDomain: Boolean;
    function IsFinalizingForUnload: Boolean;
    function ToString: string;
    function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    function Load(assemblyString: string): DNAssembly; overload;
    function ReflectionOnlyGetAssemblies: TArray<DNAssembly>;
    procedure AppendPrivatePath(path: string);
    procedure ClearPrivatePath;
    procedure ClearShadowCopyPath;
    procedure SetCachePath(path: string);
    procedure SetShadowCopyFiles;
    procedure SetShadowCopyPath(path: string);
    function GetAssemblies: TArray<DNAssembly>;
    procedure SetPrincipalPolicy(policy: DNPrincipalPolicy);
    procedure SetThreadPrincipal(principal: DNIPrincipal);
    function CreateInstance(assemblyName: string; typeName: string): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstance(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string): DNObject; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceAndUnwrap(assemblyName: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceFrom(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObjectHandle; overload;
    function CreateInstanceFromAndUnwrap(assemblyFile: string; typeName: string): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyFile: string; typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function CreateInstanceFromAndUnwrap(assemblyFile: string; typeName: string; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseDirectory: string read get_BaseDirectory;
    property RelativeSearchPath: string read get_RelativeSearchPath;
    property SetupInformation: DNAppDomainSetup read get_SetupInformation;
    property PermissionSet: DNPermissionSet read get_PermissionSet;
    property DynamicDirectory: string read get_DynamicDirectory;
    property FriendlyName: string read get_FriendlyName;
    property Id: Int32 read get_Id;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property IsHomogenous: Boolean read get_IsHomogenous;
    property MonitoringSurvivedMemorySize: Int64 read get_MonitoringSurvivedMemorySize;
    property MonitoringTotalAllocatedMemorySize: Int64 read get_MonitoringTotalAllocatedMemorySize;
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
    property MonitoringTotalProcessorTime: DNTimeSpan read get_MonitoringTotalProcessorTime;
  end;

  TDNAppDomain = class(TDNGenericImport<DNAppDomainClass, DNAppDomain>) end;

  //-------------namespace: System----------------
  DNContextBoundObjectClass = interface(DNMarshalByRefObjectClass)
  ['{128D849F-F186-5052-A6B3-2AFD05B86EAB}']
  end;

  [DNTypeName('System.ContextBoundObject')]
  DNContextBoundObject = interface(DNMarshalByRefObject)
  ['{17A1C0DA-7C19-3DEF-837F-20B5AFA1DAEC}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNContextBoundObject = class(TDNGenericImport<DNContextBoundObjectClass, DNContextBoundObject>) end;

  //-------------namespace: System.IO----------------
  DNStreamClass = interface(DNMarshalByRefObjectClass)
  ['{3E82ACC8-D369-56C9-807F-C893A8EAA3AE}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStream;

  { static fields } 

    {class} property Null: DNStream read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(stream: DNStream): DNStream;

  end;

  [DNTypeName('System.IO.Stream')]
  DNStream = interface(DNMarshalByRefObject)
  ['{EA7D118B-E854-3D02-97A3-4B8A2BCA535D}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    procedure Flush;
    function FlushAsync: DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadByte: Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    procedure WriteByte(value: Byte);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNStream = class(TDNGenericImport<DNStreamClass, DNStream>) end;

  //-------------namespace: System.IO----------------
  DNBufferedStreamClass = interface(DNStreamClass)
  ['{F63EEFFE-F6B7-56B1-8ADB-FF63F805376E}']
  { constructors } 

    {class} function init(stream: DNStream): DNBufferedStream; overload;
    {class} function init(stream: DNStream; bufferSize: Int32): DNBufferedStream; overload;

  end;

  [DNTypeName('System.IO.BufferedStream')]
  DNBufferedStream = interface(DNStream)
  ['{29806CD3-FB77-3500-BC55-5C073E1F3DB8}']
  { getters & setters } 

    function get_UnderlyingStream: DNStream;
    function get_BufferSize: Int32;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function DisposeAsync: DNValueTask;
    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(destination: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadByte: Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    procedure WriteByte(value: Byte);
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnderlyingStream: DNStream read get_UnderlyingStream;
    property BufferSize: Int32 read get_BufferSize;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNBufferedStream = class(TDNGenericImport<DNBufferedStreamClass, DNBufferedStream>) end;

  //-------------namespace: System.IO----------------
  DNFileStreamClass = interface(DNStreamClass)
  ['{B184E0CA-8EEC-5E73-B264-5C9456ECF038}']
  { constructors } 

    {class} function init(handle: IntPtr; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; useAsync: Boolean): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;

  end;

  [DNTypeName('System.IO.FileStream')]
  DNFileStream = interface(DNStream)
  ['{A4378AB5-83FB-3648-8A37-BD98F1DD200B}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_Name: string;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Lock(position: Int64; length: Int64);
    procedure Unlock(position: Int64; length: Int64);
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure Flush; overload;
    procedure Flush(flushToDisk: Boolean); overload;
    procedure SetLength(value: Int64);
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function BeginRead(&array: TArray<Byte>; offset: Int32; numBytes: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; numBytes: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function DisposeAsync: DNValueTask;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property Name: string read get_Name;
    property IsAsync: Boolean read get_IsAsync;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNFileStream = class(TDNGenericImport<DNFileStreamClass, DNFileStream>) end;

  //-------------namespace: System.IO----------------
  DNMemoryStreamClass = interface(DNStreamClass)
  ['{4563281B-F12B-54FC-A2DD-F34615FBC935}']
  { constructors } 

    {class} function init: DNMemoryStream; overload;
    {class} function init(capacity: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean; publiclyVisible: Boolean): DNMemoryStream; overload;

  end;

  [DNTypeName('System.IO.MemoryStream')]
  DNMemoryStream = interface(DNStream)
  ['{A6E68E9A-14CC-3DC4-AE46-08DCEF9D374E}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function GetBuffer: TArray<Byte>;
    function TryGetBuffer(out buffer: DNArraySegment<Byte>): Boolean;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadByte: Int32;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function ToArray: TArray<Byte>;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure WriteByte(value: Byte);
    procedure WriteTo(stream: DNStream);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure Close;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    function FlushAsync: DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryStream = class(TDNGenericImport<DNMemoryStreamClass, DNMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryStreamClass = interface(DNStreamClass)
  ['{8512A236-6048-5062-953E-041753E0A77B}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryStream')]
  DNUnmanagedMemoryStream = interface(DNStream)
  ['{103BD9D9-A8AC-3BA5-8002-852CFCC2D4D0}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadByte: Int32;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    function FlushAsync: DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Capacity: Int64 read get_Capacity;
    property Position: Int64 read get_Position write set_Position;
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNUnmanagedMemoryStream = class(TDNGenericImport<DNUnmanagedMemoryStreamClass, DNUnmanagedMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNTextReaderClass = interface(DNMarshalByRefObjectClass)
  ['{B5C4764E-8C83-516F-B943-AFB575A0F2F1}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextReader;

  { static fields } 

    {class} property Null: DNTextReader read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(reader: DNTextReader): DNTextReader;

  end;

  [DNTypeName('System.IO.TextReader')]
  DNTextReader = interface(DNMarshalByRefObject)
  ['{F21B9BBD-B3B9-37FC-AE2C-D0EDEF46FFE7}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadBlock(buffer: DNSpan<Char>): Int32; overload;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTextReader = class(TDNGenericImport<DNTextReaderClass, DNTextReader>) end;

  //-------------namespace: System.IO----------------
  DNStreamReaderClass = interface(DNTextReaderClass)
  ['{67640870-AEED-514E-A41A-0DDEDE4E344B}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamReader; overload;
    {class} function init(stream: DNStream; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32; leaveOpen: Boolean): DNStreamReader; overload;
    {class} function init(path: string): DNStreamReader; overload;
    {class} function init(path: string; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamReader;

  { static fields } 

    {class} property Null: DNStreamReader read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamReader')]
  DNStreamReader = interface(DNTextReader)
  ['{A038B390-4059-3F1E-91AB-B7DC6735BB3E}']
  { getters & setters } 

    function get_CurrentEncoding: DNEncoding;
    function get_BaseStream: DNStream;
    function get_EndOfStream: Boolean;

  { methods } 

    procedure Close;
    procedure DiscardBufferedData;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadBlock(buffer: DNSpan<Char>): Int32; overload;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CurrentEncoding: DNEncoding read get_CurrentEncoding;
    property BaseStream: DNStream read get_BaseStream;
    property EndOfStream: Boolean read get_EndOfStream;
  end;

  TDNStreamReader = class(TDNGenericImport<DNStreamReaderClass, DNStreamReader>) end;

  //-------------namespace: System.IO----------------
  DNStringReaderClass = interface(DNTextReaderClass)
  ['{96862CBA-F03B-5635-9A71-D90DA6E7F27E}']
  { constructors } 

    {class} function init(s: string): DNStringReader;

  end;

  [DNTypeName('System.IO.StringReader')]
  DNStringReader = interface(DNTextReader)
  ['{2B141A8C-D17F-3F27-9C10-7ADEBB8C109C}']
  { methods } 

    procedure Close;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadBlock(buffer: DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    procedure Dispose;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStringReader = class(TDNGenericImport<DNStringReaderClass, DNStringReader>) end;

  //-------------namespace: System.IO----------------
  DNTextWriterClass = interface(DNMarshalByRefObjectClass)
  ['{67C2AF68-291E-5883-B315-1F5EC2632F50}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextWriter;

  { static fields } 

    {class} property Null: DNTextWriter read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(writer: DNTextWriter): DNTextWriter;

  end;

  [DNTypeName('System.IO.TextWriter')]
  DNTextWriter = interface(DNMarshalByRefObject)
  ['{70C4D68C-E175-34E9-906F-B2FFDBDB4759}']
  { getters & setters } 

    function get_FormatProvider: DNIFormatProvider;
    function get_Encoding: DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    procedure Flush;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: string); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(value: DNStringBuilder); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(buffer: DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNStringBuilder); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function FlushAsync: DNTask;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property Encoding: DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNTextWriter = class(TDNGenericImport<DNTextWriterClass, DNTextWriter>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNIndentedTextWriterClass = interface(DNTextWriterClass)
  ['{20183AA9-588B-56AA-A2BD-CA9499487E1D}']
  { constructors } 

    {class} function init(writer: DNTextWriter): DNIndentedTextWriter; overload;
    {class} function init(writer: DNTextWriter; tabString: string): DNIndentedTextWriter; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.IndentedTextWriter')]
  DNIndentedTextWriter = interface(DNTextWriter)
  ['{BA677621-0ACF-3E72-8BF7-5F6738DF4096}']
  { getters & setters } 

    function get_Encoding: DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DNTextWriter;
    function get_FormatProvider: DNIFormatProvider;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLineNoTabs(s: string);
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNStringBuilder); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(buffer: DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: DNStringBuilder); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function FlushAsync: DNTask;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Encoding: DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DNTextWriter read get_InnerWriter;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
  end;

  TDNIndentedTextWriter = class(TDNGenericImport<DNIndentedTextWriterClass, DNIndentedTextWriter>)
  public const
   DefaultTabString = '    ';
  end;

  //-------------namespace: System.IO----------------
  DNStreamWriterClass = interface(DNTextWriterClass)
  ['{18134482-A41A-5386-84D1-E95CDF92FD81}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32; leaveOpen: Boolean): DNStreamWriter; overload;
    {class} function init(path: string): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamWriter;

  { static fields } 

    {class} property Null: DNStreamWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamWriter')]
  DNStreamWriter = interface(DNTextWriter)
  ['{DD5A0C9C-1480-3FB8-827D-2E9E4594A65A}']
  { getters & setters } 

    function get_AutoFlush: Boolean;
    procedure set_AutoFlush(value: Boolean);
    function get_BaseStream: DNStream;
    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    function DisposeAsync: DNValueTask;
    procedure Flush;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: string); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNReadOnlySpan<Char>); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync: DNTask;
    procedure Dispose;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(value: DNStringBuilder); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: DNStringBuilder); overload;
    procedure WriteLine(value: DNObject); overload;
    function WriteAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    property BaseStream: DNStream read get_BaseStream;
    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStreamWriter = class(TDNGenericImport<DNStreamWriterClass, DNStreamWriter>) end;

  //-------------namespace: System.IO----------------
  DNStringWriterClass = interface(DNTextWriterClass)
  ['{D6BC10B3-82AE-5545-82E8-AA8FF9D929A4}']
  { constructors } 

    {class} function init: DNStringWriter; overload;
    {class} function init(formatProvider: DNIFormatProvider): DNStringWriter; overload;
    {class} function init(sb: DNStringBuilder): DNStringWriter; overload;
    {class} function init(sb: DNStringBuilder; formatProvider: DNIFormatProvider): DNStringWriter; overload;

  end;

  [DNTypeName('System.IO.StringWriter')]
  DNStringWriter = interface(DNTextWriter)
  ['{8256CD80-1918-3487-871B-5B48A7E4EC2B}']
  { getters & setters } 

    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    function GetStringBuilder: DNStringBuilder;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: string); overload;
    procedure Write(value: DNStringBuilder); overload;
    procedure WriteLine(buffer: DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: DNStringBuilder); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(value: DNStringBuilder; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync: DNTask;
    function ToString: string;
    procedure Dispose;
    function DisposeAsync: DNValueTask;
    procedure Flush;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStringWriter = class(TDNGenericImport<DNStringWriterClass, DNStringWriter>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameProxyClass = interface(DNMarshalByRefObjectClass)
  ['{812B58EC-658F-5594-9A8F-821E9F0BA729}']
  { constructors } 

    {class} function init: DNAssemblyNameProxy;

  end;

  [DNTypeName('System.Reflection.AssemblyNameProxy')]
  DNAssemblyNameProxy = interface(DNMarshalByRefObject)
  ['{BB3F712E-EA6F-3E62-A85C-D376A62FDF62}']
  { methods } 

    function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssemblyNameProxy = class(TDNGenericImport<DNAssemblyNameProxyClass, DNAssemblyNameProxy>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStandardOleMarshalObjectClass = interface(DNMarshalByRefObjectClass)
  ['{3361AE8A-96FE-558F-9D0C-E32979614B39}']
  end;

  [DNTypeName('System.Runtime.InteropServices.StandardOleMarshalObject')]
  DNStandardOleMarshalObject = interface(DNMarshalByRefObject)
  ['{1382706B-BE5E-3EF6-A854-851FC2BB6E1E}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStandardOleMarshalObject = class(TDNGenericImport<DNStandardOleMarshalObjectClass, DNStandardOleMarshalObject>) end;

  //-------------namespace: System.Runtime.Remoting----------------
  DNObjectHandleClass = interface(DNMarshalByRefObjectClass)
  ['{04AA8E33-B02F-58E3-9A61-7081B2C51BA2}']
  { constructors } 

    {class} function init(o: DNObject): DNObjectHandle;

  end;

  [DNTypeName('System.Runtime.Remoting.ObjectHandle')]
  DNObjectHandle = interface(DNMarshalByRefObject)
  ['{715D24B6-C7D4-35E0-B353-E204EAE00610}']
  { methods } 

    function Unwrap: DNObject;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNObjectHandle = class(TDNGenericImport<DNObjectHandleClass, DNObjectHandle>) end;

  //-------------namespace: System.Threading----------------
  DNRegisteredWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{2ED9A86C-4F8A-5607-9CB1-97723313ED99}']
  end;

  [DNTypeName('System.Threading.RegisteredWaitHandle')]
  DNRegisteredWaitHandle = interface(DNMarshalByRefObject)
  ['{CDAF580B-31F0-3594-AFA3-02DDAF99738D}']
  { methods } 

    function Unregister(waitObject: DNWaitHandle): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRegisteredWaitHandle = class(TDNGenericImport<DNRegisteredWaitHandleClass, DNRegisteredWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimerClass = interface(DNMarshalByRefObjectClass)
  ['{B10EE544-F680-5698-834E-EA1FD1802C14}']
  { static getter & setter } 

    {class} function get_ActiveCount: Int64;

  { constructors } 

    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int32; period: Int32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: DNTimeSpan; period: DNTimeSpan): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: UInt32; period: UInt32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int64; period: Int64): DNTimer; overload;
    {class} function init(callback: DNTimerCallback): DNTimer; overload;

  { static propertys } 

    {class} property ActiveCount: Int64 read get_ActiveCount;
  end;

  [DNTypeName('System.Threading.Timer')]
  DNTimer = interface(DNMarshalByRefObject)
  ['{A661CBE3-182D-3CBC-A5C2-B0D8A7D4FADA}']
  { methods } 

    function Change(dueTime: Int32; period: Int32): Boolean; overload;
    function Change(dueTime: DNTimeSpan; period: DNTimeSpan): Boolean; overload;
    function Change(dueTime: UInt32; period: UInt32): Boolean; overload;
    function Change(dueTime: Int64; period: Int64): Boolean; overload;
    function Dispose(notifyObject: DNWaitHandle): Boolean; overload;
    procedure Dispose; overload;
    function DisposeAsync: DNValueTask;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{5AAA331C-48E5-5FE9-BABE-3888FAD80A2C}']
  { static methods } 

    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Int32; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Threading.WaitHandle')]
  DNWaitHandle = interface(DNMarshalByRefObject)
  ['{CFCDC8A7-D1C1-3415-A10C-5C934DA61FF9}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNWaitHandle = class(TDNGenericImport<DNWaitHandleClass, DNWaitHandle>)
  public const
   WaitTimeout = 258;
  end;

  //-------------namespace: System.Threading----------------
  DNEventWaitHandleClass = interface(DNWaitHandleClass)
  ['{B8B4B5A5-468F-5A48-8E1A-CDE2D40817E4}']
  { constructors } 

    {class} function init(initialState: Boolean; mode: DNEventResetMode): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean): DNEventWaitHandle; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNEventWaitHandle;
    {class} function TryOpenExisting(name: string; out result: DNEventWaitHandle): Boolean;

  end;

  [DNTypeName('System.Threading.EventWaitHandle')]
  DNEventWaitHandle = interface(DNWaitHandle)
  ['{912CB889-D2B9-3CE6-83B0-F3725C51C2E8}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNEventWaitHandle = class(TDNGenericImport<DNEventWaitHandleClass, DNEventWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNAutoResetEventClass = interface(DNEventWaitHandleClass)
  ['{7632B04F-23C0-5BEC-A0E5-44EAF3A5E016}']
  { constructors } 

    {class} function init(initialState: Boolean): DNAutoResetEvent;

  end;

  [DNTypeName('System.Threading.AutoResetEvent')]
  DNAutoResetEvent = interface(DNEventWaitHandle)
  ['{99670DCA-B198-3FEC-BEE7-B7A5C35987B3}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNAutoResetEvent = class(TDNGenericImport<DNAutoResetEventClass, DNAutoResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventClass = interface(DNEventWaitHandleClass)
  ['{B8B6C31D-1CE9-596A-BCEC-8BC1CE3EF5D5}']
  { constructors } 

    {class} function init(initialState: Boolean): DNManualResetEvent;

  end;

  [DNTypeName('System.Threading.ManualResetEvent')]
  DNManualResetEvent = interface(DNEventWaitHandle)
  ['{6C6A5EC6-9176-3765-AA18-CC1E87C9AB86}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNManualResetEvent = class(TDNGenericImport<DNManualResetEventClass, DNManualResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNMutexClass = interface(DNWaitHandleClass)
  ['{19CC1491-39B6-5356-8B83-A3E2DA4C6C83}']
  { constructors } 

    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean; name: string): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean): DNMutex; overload;
    {class} function init: DNMutex; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNMutex;
    {class} function TryOpenExisting(name: string; out result: DNMutex): Boolean;

  end;

  [DNTypeName('System.Threading.Mutex')]
  DNMutex = interface(DNWaitHandle)
  ['{5AE17E79-31FC-3333-BCD5-3163BF6F3F8C}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    procedure ReleaseMutex;
    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNMutex = class(TDNGenericImport<DNMutexClass, DNMutex>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreClass = interface(DNWaitHandleClass)
  ['{C25312D6-9641-5998-B130-DF00FE00FA57}']
  { constructors } 

    {class} function init(initialCount: Int32; maximumCount: Int32): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string; out createdNew: Boolean): DNSemaphore; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNSemaphore;
    {class} function TryOpenExisting(name: string; out result: DNSemaphore): Boolean;

  end;

  [DNTypeName('System.Threading.Semaphore')]
  DNSemaphore = interface(DNWaitHandle)
  ['{30549446-15C2-346F-84CD-ED08FB61E4FE}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    procedure Close;
    procedure Dispose;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNSemaphore = class(TDNGenericImport<DNSemaphoreClass, DNSemaphore>) end;

  //-------------namespace: System----------------
  DNMathClass = interface(DNObjectClass)
  ['{D441BFB0-AECA-5DAC-A62B-018A3FA91A23}']
  { static methods } 

    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(a: Double): Double; overload;
    {class} function Round(value: Double; digits: Int32): Double; overload;
    {class} function Round(value: Double; mode: DNMidpointRounding): Double; overload;
    {class} function Round(value: Double; digits: Int32; mode: DNMidpointRounding): Double; overload;
    {class} function Sign(value: DNDecimal): Int32; overload;
    {class} function Sign(value: Double): Int32; overload;
    {class} function Sign(value: Int16): Int32; overload;
    {class} function Sign(value: Int32): Int32; overload;
    {class} function Sign(value: Int64): Int32; overload;
    {class} function Sign(value: SByte): Int32; overload;
    {class} function Sign(value: Single): Int32; overload;
    {class} function Truncate(d: DNDecimal): DNDecimal; overload;
    {class} function Truncate(d: Double): Double; overload;
    {class} function Abs(value: Double): Double; overload;
    {class} function Abs(value: Single): Single; overload;
    {class} function Acos(d: Double): Double;
    {class} function Acosh(d: Double): Double;
    {class} function Asin(d: Double): Double;
    {class} function Asinh(d: Double): Double;
    {class} function Atan(d: Double): Double;
    {class} function Atan2(y: Double; x: Double): Double;
    {class} function Atanh(d: Double): Double;
    {class} function Cbrt(d: Double): Double;
    {class} function Ceiling(a: Double): Double; overload;
    {class} function Cos(d: Double): Double;
    {class} function Cosh(value: Double): Double;
    {class} function Exp(d: Double): Double;
    {class} function Floor(d: Double): Double; overload;
    {class} function FusedMultiplyAdd(x: Double; y: Double; z: Double): Double;
    {class} function ILogB(x: Double): Int32;
    {class} function Log(d: Double): Double; overload;
    {class} function Log2(x: Double): Double;
    {class} function Log10(d: Double): Double;
    {class} function Pow(x: Double; y: Double): Double;
    {class} function ScaleB(x: Double; n: Int32): Double;
    {class} function Sin(a: Double): Double;
    {class} function Sinh(value: Double): Double;
    {class} function Sqrt(d: Double): Double;
    {class} function Tan(a: Double): Double;
    {class} function Tanh(value: Double): Double;
    {class} function Abs(value: Int16): Int16; overload;
    {class} function Abs(value: Int32): Int32; overload;
    {class} function Abs(value: Int64): Int64; overload;
    {class} function Abs(value: SByte): SByte; overload;
    {class} function Abs(value: DNDecimal): DNDecimal; overload;
    {class} function BigMul(a: Int32; b: Int32): Int64; overload;
    {class} function BigMul(a: UInt64; b: UInt64; out low: UInt64): UInt64; overload;
    {class} function BigMul(a: Int64; b: Int64; out low: Int64): Int64; overload;
    {class} function BitDecrement(x: Double): Double;
    {class} function BitIncrement(x: Double): Double;
    {class} function CopySign(x: Double; y: Double): Double;
    {class} function DivRem(a: Int32; b: Int32; out result: Int32): Int32; overload;
    {class} function DivRem(a: Int64; b: Int64; out result: Int64): Int64; overload;
    {class} function Ceiling(d: DNDecimal): DNDecimal; overload;
    {class} function Clamp(value: Byte; min: Byte; max: Byte): Byte; overload;
    {class} function Clamp(value: DNDecimal; min: DNDecimal; max: DNDecimal): DNDecimal; overload;
    {class} function Clamp(value: Double; min: Double; max: Double): Double; overload;
    {class} function Clamp(value: Int16; min: Int16; max: Int16): Int16; overload;
    {class} function Clamp(value: Int32; min: Int32; max: Int32): Int32; overload;
    {class} function Clamp(value: Int64; min: Int64; max: Int64): Int64; overload;
    {class} function Clamp(value: SByte; min: SByte; max: SByte): SByte; overload;
    {class} function Clamp(value: Single; min: Single; max: Single): Single; overload;
    {class} function Clamp(value: UInt16; min: UInt16; max: UInt16): UInt16; overload;
    {class} function Clamp(value: UInt32; min: UInt32; max: UInt32): UInt32; overload;
    {class} function Clamp(value: UInt64; min: UInt64; max: UInt64): UInt64; overload;
    {class} function Floor(d: DNDecimal): DNDecimal; overload;
    {class} function IEEERemainder(x: Double; y: Double): Double;
    {class} function Log(a: Double; newBase: Double): Double; overload;
    {class} function Max(val1: Byte; val2: Byte): Byte; overload;
    {class} function Max(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Max(val1: Double; val2: Double): Double; overload;
    {class} function Max(val1: Int16; val2: Int16): Int16; overload;
    {class} function Max(val1: Int32; val2: Int32): Int32; overload;
    {class} function Max(val1: Int64; val2: Int64): Int64; overload;
    {class} function Max(val1: SByte; val2: SByte): SByte; overload;
    {class} function Max(val1: Single; val2: Single): Single; overload;
    {class} function Max(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Max(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Max(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function MaxMagnitude(x: Double; y: Double): Double;
    {class} function Min(val1: Byte; val2: Byte): Byte; overload;
    {class} function Min(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Min(val1: Double; val2: Double): Double; overload;
    {class} function Min(val1: Int16; val2: Int16): Int16; overload;
    {class} function Min(val1: Int32; val2: Int32): Int32; overload;
    {class} function Min(val1: Int64; val2: Int64): Int64; overload;
    {class} function Min(val1: SByte; val2: SByte): SByte; overload;
    {class} function Min(val1: Single; val2: Single): Single; overload;
    {class} function Min(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Min(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Min(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function MinMagnitude(x: Double; y: Double): Double;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;

  end;

  [DNTypeName('System.Math')]
  DNMath = interface(DNObject)
  ['{02D50983-4686-362D-9213-32B7F7F0381B}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMath = class(TDNGenericImport<DNMathClass, DNMath>)
  public const
   E = 2.718281828459045;
   PI = 3.141592653589793;
   Tau = 6.283185307179586;
  end;

  //-------------namespace: System----------------
  DNMathFClass = interface(DNObjectClass)
  ['{84756538-F24C-557F-B71F-DB97F04DAA12}']
  { static methods } 

    {class} function Acos(x: Single): Single;
    {class} function Acosh(x: Single): Single;
    {class} function Asin(x: Single): Single;
    {class} function Asinh(x: Single): Single;
    {class} function Atan(x: Single): Single;
    {class} function Atan2(y: Single; x: Single): Single;
    {class} function Atanh(x: Single): Single;
    {class} function Cbrt(x: Single): Single;
    {class} function Ceiling(x: Single): Single;
    {class} function Cos(x: Single): Single;
    {class} function Cosh(x: Single): Single;
    {class} function Exp(x: Single): Single;
    {class} function Floor(x: Single): Single;
    {class} function FusedMultiplyAdd(x: Single; y: Single; z: Single): Single;
    {class} function ILogB(x: Single): Int32;
    {class} function Log(x: Single): Single; overload;
    {class} function Log2(x: Single): Single;
    {class} function Log10(x: Single): Single;
    {class} function Pow(x: Single; y: Single): Single;
    {class} function ScaleB(x: Single; n: Int32): Single;
    {class} function Sin(x: Single): Single;
    {class} function Sinh(x: Single): Single;
    {class} function Sqrt(x: Single): Single;
    {class} function Tan(x: Single): Single;
    {class} function Tanh(x: Single): Single;
    {class} function Abs(x: Single): Single;
    {class} function BitDecrement(x: Single): Single;
    {class} function BitIncrement(x: Single): Single;
    {class} function CopySign(x: Single; y: Single): Single;
    {class} function IEEERemainder(x: Single; y: Single): Single;
    {class} function Log(x: Single; y: Single): Single; overload;
    {class} function Max(x: Single; y: Single): Single;
    {class} function MaxMagnitude(x: Single; y: Single): Single;
    {class} function Min(x: Single; y: Single): Single;
    {class} function MinMagnitude(x: Single; y: Single): Single;
    {class} function Round(x: Single): Single; overload;
    {class} function Round(x: Single; digits: Int32): Single; overload;
    {class} function Round(x: Single; mode: DNMidpointRounding): Single; overload;
    {class} function Round(x: Single; digits: Int32; mode: DNMidpointRounding): Single; overload;
    {class} function Sign(x: Single): Int32;
    {class} function Truncate(x: Single): Single;

  end;

  [DNTypeName('System.MathF')]
  DNMathF = interface(DNObject)
  ['{512C02E1-5380-3844-B890-4D804DA96CA1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMathF = class(TDNGenericImport<DNMathFClass, DNMathF>)
  public const
   E = 2.7182817;
   PI = 3.1415927;
   Tau = 6.2831855;
  end;

  //-------------namespace: System----------------
  DNMemoryExtensionsClass = interface(DNObjectClass)
  ['{1E4F5787-96D8-57D0-A1B2-D10F22385510}']
  { static methods } 

    {class} function Trim(memory: DNMemory<Char>): DNMemory<Char>; overload;
    {class} function TrimStart(memory: DNMemory<Char>): DNMemory<Char>; overload;
    {class} function TrimEnd(memory: DNMemory<Char>): DNMemory<Char>; overload;
    {class} function Trim(memory: DNReadOnlyMemory<Char>): DNReadOnlyMemory<Char>; overload;
    {class} function TrimStart(memory: DNReadOnlyMemory<Char>): DNReadOnlyMemory<Char>; overload;
    {class} function TrimEnd(memory: DNReadOnlyMemory<Char>): DNReadOnlyMemory<Char>; overload;
    {class} function Trim(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function Trim(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function Trim(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function Trim(span: DNSpan<Char>): DNSpan<Char>; overload;
    {class} function TrimStart(span: DNSpan<Char>): DNSpan<Char>; overload;
    {class} function TrimEnd(span: DNSpan<Char>): DNSpan<Char>; overload;
    {class} function IsWhiteSpace(span: DNReadOnlySpan<Char>): Boolean;
    {class} function &Contains(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function Equals(span: DNReadOnlySpan<Char>; other: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function CompareTo(span: DNReadOnlySpan<Char>; other: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32;
    {class} function IndexOf(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32; overload;
    {class} function LastIndexOf(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32; overload;
    {class} function ToLower(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>; culture: DNCultureInfo): Int32;
    {class} function ToLowerInvariant(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>): Int32;
    {class} function ToUpper(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>; culture: DNCultureInfo): Int32;
    {class} function ToUpperInvariant(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>): Int32;
    {class} function EndsWith(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function StartsWith(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function EnumerateRunes(span: DNReadOnlySpan<Char>): DNSpanRuneEnumerator; overload;
    {class} function EnumerateRunes(span: DNSpan<Char>): DNSpanRuneEnumerator; overload;
    {class} function AsSpan(text: string): DNReadOnlySpan<Char>; overload;
    {class} function AsSpan(text: string; start: Int32): DNReadOnlySpan<Char>; overload;
    {class} function AsSpan(text: string; start: Int32; length: Int32): DNReadOnlySpan<Char>; overload;
    {class} function AsMemory(text: string): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; start: Int32): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; startIndex: DNIndex): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; start: Int32; length: Int32): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; range: DNRange): DNReadOnlyMemory<Char>; overload;

  end;

  [DNTypeName('System.MemoryExtensions')]
  DNMemoryExtensions = interface(DNObject)
  ['{42EDD848-73D6-3283-ADD4-B94C972E5323}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;

  end;

  TDNMemoryExtensions = class(TDNGenericImport<DNMemoryExtensionsClass, DNMemoryExtensions>) end;

  //-------------namespace: System.Net----------------
  DNWebUtilityClass = interface(DNObjectClass)
  ['{7E67662F-A9F9-5C0C-AAA2-E721839EAD0E}']
  { static methods } 

    {class} function HtmlEncode(value: string): string; overload;
    {class} procedure HtmlEncode(value: string; output: DNTextWriter); overload;
    {class} function HtmlDecode(value: string): string; overload;
    {class} procedure HtmlDecode(value: string; output: DNTextWriter); overload;
    {class} function UrlEncode(value: string): string;
    {class} function UrlEncodeToBytes(value: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;
    {class} function UrlDecode(encodedValue: string): string;
    {class} function UrlDecodeToBytes(encodedValue: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;

  end;

  [DNTypeName('System.Net.WebUtility')]
  DNWebUtility = interface(DNObject)
  ['{EBE9A26E-61F7-3A4E-B70A-33D225D31FFD}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNWebUtility = class(TDNGenericImport<DNWebUtilityClass, DNWebUtility>) end;

  //-------------namespace: System----------------
  DNNullableClass = interface(DNObjectClass)
  ['{05780C3A-2243-55F9-9D70-7619F3777CBF}']
  { static methods } 

    {class} function GetUnderlyingType(nullableType: DNType): DNType;

  end;

  [DNTypeName('System.Nullable')]
  DNNullable = interface(DNObject)
  ['{79DEFDB1-6B83-35CF-974F-78CFF810AA81}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;

  end;

  TDNNullable = class(TDNGenericImport<DNNullableClass, DNNullable>) end;

  //-------------namespace: System.Numerics----------------
  DNBitOperationsClass = interface(DNObjectClass)
  ['{B1D3B533-9318-55C3-9988-47E0CDE7173A}']
  { static methods } 

    {class} function LeadingZeroCount(value: UInt32): Int32; overload;
    {class} function LeadingZeroCount(value: UInt64): Int32; overload;
    {class} function Log2(value: UInt32): Int32; overload;
    {class} function Log2(value: UInt64): Int32; overload;
    {class} function PopCount(value: UInt32): Int32; overload;
    {class} function PopCount(value: UInt64): Int32; overload;
    {class} function TrailingZeroCount(value: Int32): Int32; overload;
    {class} function TrailingZeroCount(value: UInt32): Int32; overload;
    {class} function TrailingZeroCount(value: Int64): Int32; overload;
    {class} function TrailingZeroCount(value: UInt64): Int32; overload;
    {class} function RotateLeft(value: UInt32; offset: Int32): UInt32; overload;
    {class} function RotateLeft(value: UInt64; offset: Int32): UInt64; overload;
    {class} function RotateRight(value: UInt32; offset: Int32): UInt32; overload;
    {class} function RotateRight(value: UInt64; offset: Int32): UInt64; overload;

  end;

  [DNTypeName('System.Numerics.BitOperations')]
  DNBitOperations = interface(DNObject)
  ['{04F63DF3-5B73-363A-8699-E17A917A7EBF}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBitOperations = class(TDNGenericImport<DNBitOperationsClass, DNBitOperations>) end;

  //-------------namespace: System.Numerics----------------
  DNVectorClass = interface(DNObjectClass)
  ['{B4B134F5-108C-51E6-9BBF-E800BC3C821C}']
  { static getter & setter } 

    {class} function get_IsHardwareAccelerated: Boolean;

  { static methods } 

    {class} procedure Widen(source: DNVector<Byte>; out low: DNVector<UInt16>; out high: DNVector<UInt16>); overload;
    {class} procedure Widen(source: DNVector<UInt16>; out low: DNVector<UInt32>; out high: DNVector<UInt32>); overload;
    {class} procedure Widen(source: DNVector<UInt32>; out low: DNVector<UInt64>; out high: DNVector<UInt64>); overload;
    {class} procedure Widen(source: DNVector<SByte>; out low: DNVector<Int16>; out high: DNVector<Int16>); overload;
    {class} procedure Widen(source: DNVector<Int16>; out low: DNVector<Int32>; out high: DNVector<Int32>); overload;
    {class} procedure Widen(source: DNVector<Int32>; out low: DNVector<Int64>; out high: DNVector<Int64>); overload;
    {class} procedure Widen(source: DNVector<Single>; out low: DNVector<Double>; out high: DNVector<Double>); overload;
    {class} function Narrow(low: DNVector<UInt16>; high: DNVector<UInt16>): DNVector<Byte>; overload;
    {class} function Narrow(low: DNVector<UInt32>; high: DNVector<UInt32>): DNVector<UInt16>; overload;
    {class} function Narrow(low: DNVector<UInt64>; high: DNVector<UInt64>): DNVector<UInt32>; overload;
    {class} function Narrow(low: DNVector<Int16>; high: DNVector<Int16>): DNVector<SByte>; overload;
    {class} function Narrow(low: DNVector<Int32>; high: DNVector<Int32>): DNVector<Int16>; overload;
    {class} function Narrow(low: DNVector<Int64>; high: DNVector<Int64>): DNVector<Int32>; overload;
    {class} function Narrow(low: DNVector<Double>; high: DNVector<Double>): DNVector<Single>; overload;
    {class} function ConvertToSingle(value: DNVector<Int32>): DNVector<Single>; overload;
    {class} function ConvertToSingle(value: DNVector<UInt32>): DNVector<Single>; overload;
    {class} function ConvertToDouble(value: DNVector<Int64>): DNVector<Double>; overload;
    {class} function ConvertToDouble(value: DNVector<UInt64>): DNVector<Double>; overload;
    {class} function ConvertToInt32(value: DNVector<Single>): DNVector<Int32>;
    {class} function ConvertToUInt32(value: DNVector<Single>): DNVector<UInt32>;
    {class} function ConvertToInt64(value: DNVector<Double>): DNVector<Int64>;
    {class} function ConvertToUInt64(value: DNVector<Double>): DNVector<UInt64>;
    {class} function ConditionalSelect(condition: DNVector<Int32>; left: DNVector<Single>; right: DNVector<Single>): DNVector<Single>; overload;
    {class} function ConditionalSelect(condition: DNVector<Int64>; left: DNVector<Double>; right: DNVector<Double>): DNVector<Double>; overload;
    {class} function Equals(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function Equals(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function Equals(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function Equals(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThan(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function LessThan(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function LessThan(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function LessThan(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThanOrEqual(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function LessThanOrEqual(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function LessThanOrEqual(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThanOrEqual(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function GreaterThan(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function GreaterThan(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function GreaterThan(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function GreaterThan(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function Ceiling(value: DNVector<Single>): DNVector<Single>; overload;
    {class} function Ceiling(value: DNVector<Double>): DNVector<Double>; overload;
    {class} function Floor(value: DNVector<Single>): DNVector<Single>; overload;
    {class} function Floor(value: DNVector<Double>): DNVector<Double>; overload;

  { static propertys } 

    {class} property IsHardwareAccelerated: Boolean read get_IsHardwareAccelerated;
  end;

  [DNTypeName('System.Numerics.Vector')]
  DNVector = interface(DNObject)
  ['{C2DF8CEF-1CFE-3154-AF5C-6DC1C25E8638}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;

  end;

  TDNVector = class(TDNGenericImport<DNVectorClass, DNVector>) end;

  //-------------namespace: System----------------
  DNOperatingSystemClass = interface(DNObjectClass)
  ['{7B5CB933-0099-5165-BC01-FB684384924D}']
  { constructors } 

    {class} function init(platform: DNPlatformID; version: DNVersion): DNOperatingSystem;

  { static methods } 

    {class} function IsOSPlatform(platform: string): Boolean;
    {class} function IsOSPlatformVersionAtLeast(platform: string; major: Int32; minor: Int32; build: Int32; revision: Int32): Boolean;
    {class} function IsBrowser: Boolean;
    {class} function IsLinux: Boolean;
    {class} function IsFreeBSD: Boolean;
    {class} function IsFreeBSDVersionAtLeast(major: Int32; minor: Int32; build: Int32; revision: Int32): Boolean;
    {class} function IsAndroid: Boolean;
    {class} function IsAndroidVersionAtLeast(major: Int32; minor: Int32; build: Int32; revision: Int32): Boolean;
    {class} function IsIOS: Boolean;
    {class} function IsIOSVersionAtLeast(major: Int32; minor: Int32; build: Int32): Boolean;
    {class} function IsMacOS: Boolean;
    {class} function IsMacOSVersionAtLeast(major: Int32; minor: Int32; build: Int32): Boolean;
    {class} function IsTvOS: Boolean;
    {class} function IsTvOSVersionAtLeast(major: Int32; minor: Int32; build: Int32): Boolean;
    {class} function IsWatchOS: Boolean;
    {class} function IsWatchOSVersionAtLeast(major: Int32; minor: Int32; build: Int32): Boolean;
    {class} function IsWindows: Boolean;
    {class} function IsWindowsVersionAtLeast(major: Int32; minor: Int32; build: Int32; revision: Int32): Boolean;

  end;

  [DNTypeName('System.OperatingSystem')]
  DNOperatingSystem = interface(DNISerializable)
  ['{0E4EB032-4FEE-303D-9243-F6866653F458}']
  { getters & setters } 

    function get_Platform: DNPlatformID;
    function get_ServicePack: string;
    function get_Version: DNVersion;
    function get_VersionString: string;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Clone: DNObject;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Platform: DNPlatformID read get_Platform;
    property ServicePack: string read get_ServicePack;
    property Version: DNVersion read get_Version;
    property VersionString: string read get_VersionString;
  end;

  TDNOperatingSystem = class(TDNGenericImport<DNOperatingSystemClass, DNOperatingSystem>) end;

  //-------------namespace: System----------------
  DNProgressClass<T> = interface(DNObjectClass)
  ['{FB0FBB24-08FC-57E9-9BC1-00F838C8FB09}']
  { constructors } 

    {class} function init: DNProgress<T>; overload;
    {class} function init(handler: DNAction<T>): DNProgress<T>; overload;

  end;

  [DNTypeName('System.Progress`1')]
  DNProgress<T> = interface(DNIProgress<T>)
  ['{B6A2AE29-52CF-3D30-ACC7-9A1A644A2CE3}']
  { events } 

    procedure add_ProgressChanged(value: DNEventHandler<T>);
    procedure remove_ProgressChanged(value: DNEventHandler<T>);

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNProgress<T> = class(TDNGenericImport<DNProgressClass<T>, DNProgress<T>>) end;

  //-------------namespace: System----------------
  DNRandomClass = interface(DNObjectClass)
  ['{5FA3A881-6DE5-509F-B548-EA5D16507468}']
  { constructors } 

    {class} function init: DNRandom; overload;
    {class} function init(Seed: Int32): DNRandom; overload;

  end;

  [DNTypeName('System.Random')]
  DNRandom = interface(DNObject)
  ['{E573A477-6336-31F4-A7D0-DF0EBF26130F}']
  { methods } 

    function Next: Int32; overload;
    function Next(minValue: Int32; maxValue: Int32): Int32; overload;
    function Next(maxValue: Int32): Int32; overload;
    function NextDouble: Double;
    procedure NextBytes(buffer: TArray<Byte>); overload;
    procedure NextBytes(buffer: DNSpan<Byte>); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRandom = class(TDNGenericImport<DNRandomClass, DNRandom>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyClass = interface(DNObjectClass)
  ['{0658B0AA-5DBB-5CF0-90A9-9693FF70DC26}']
  { static methods } 

    {class} function Load(assemblyString: string): DNAssembly; overload;
    {class} function LoadWithPartialName(partialName: string): DNAssembly;
    {class} function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    {class} function GetExecutingAssembly: DNAssembly;
    {class} function GetCallingAssembly: DNAssembly;
    {class} function CreateQualifiedName(assemblyName: string; typeName: string): string;
    {class} function GetAssembly(&type: DNType): DNAssembly;
    {class} function GetEntryAssembly: DNAssembly;
    {class} function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    {class} function LoadFile(path: string): DNAssembly;
    {class} function LoadFrom(assemblyFile: string): DNAssembly; overload;
    {class} function LoadFrom(assemblyFile: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    {class} function UnsafeLoadFrom(assemblyFile: string): DNAssembly;
    {class} function ReflectionOnlyLoad(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function ReflectionOnlyLoad(assemblyString: string): DNAssembly; overload;
    {class} function ReflectionOnlyLoadFrom(assemblyFile: string): DNAssembly;

  end;

  [DNTypeName('System.Reflection.Assembly')]
  DNAssembly = interface(DNICustomAttributeProvider)
  ['{B416DECC-5A00-351C-88E9-5441699644E0}']
  { getters & setters } 

    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_ImageRuntimeVersion: string;
    function get_IsDynamic: Boolean;
    function get_Location: string;
    function get_ReflectionOnly: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_EscapedCodeBase: string;
    function get_ManifestModule: DNModule;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_SecurityRuleSet: DNSecurityRuleSet;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function GetTypes: TArray<DNType>;
    function GetExportedTypes: TArray<DNType>;
    function GetForwardedTypes: TArray<DNType>;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetManifestResourceNames: TArray<string>;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetName: DNAssemblyName; overload;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetModule(name: string): DNModule;
    function GetModules: TArray<DNModule>; overload;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    function GetFile(name: string): DNFileStream;
    function GetFiles: TArray<DNFileStream>; overload;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function GetType: DNType; overload;

  { propertys } 

    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property CodeBase: string read get_CodeBase;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property FullName: string read get_FullName;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property IsDynamic: Boolean read get_IsDynamic;
    property Location: string read get_Location;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ManifestModule: DNModule read get_ManifestModule;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
  end;

  TDNAssembly = class(TDNGenericImport<DNAssemblyClass, DNAssembly>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNAssemblyBuilderClass = interface(DNAssemblyClass)
  ['{40AE01D4-0BA0-54B8-8424-2F91AC3B0D51}']
  { static methods } 

    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.AssemblyBuilder')]
  DNAssemblyBuilder = interface(DNAssembly)
  ['{D11F3622-BEB1-314C-85F6-BFE16E8264AD}']
  { getters & setters } 

    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_ManifestModule: DNModule;
    function get_ReflectionOnly: Boolean;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;
    function get_IsCollectible: Boolean;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_EscapedCodeBase: string;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_SecurityRuleSet: DNSecurityRuleSet;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function DefineDynamicModule(name: string): DNModuleBuilder; overload;
    function DefineDynamicModule(name: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetManifestResourceNames: TArray<string>;
    function GetFile(name: string): DNFileStream;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetExportedTypes: TArray<DNType>;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function GetModule(name: string): DNModule;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    function GetDynamicModule(name: string): DNModuleBuilder;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetTypes: TArray<DNType>;
    function GetForwardedTypes: TArray<DNType>;
    function GetName: DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetFiles: TArray<DNFileStream>; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function GetType: DNType; overload;

  { propertys } 

    property Location: string read get_Location;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property CodeBase: string read get_CodeBase;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property FullName: string read get_FullName;
    property ManifestModule: DNModule read get_ManifestModule;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property IsDynamic: Boolean read get_IsDynamic;
    property IsCollectible: Boolean read get_IsCollectible;
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
  end;

  TDNAssemblyBuilder = class(TDNGenericImport<DNAssemblyBuilderClass, DNAssemblyBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameClass = interface(DNObjectClass)
  ['{E816FB46-8DE7-523C-A126-70B8AF12D8B3}']
  { constructors } 

    {class} function init(assemblyName: string): DNAssemblyName; overload;
    {class} function init: DNAssemblyName; overload;

  { static methods } 

    {class} function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    {class} function ReferenceMatchesDefinition(reference: DNAssemblyName; definition: DNAssemblyName): Boolean;

  end;

  [DNTypeName('System.Reflection.AssemblyName')]
  DNAssemblyName = interface(DNICloneable)
  ['{D7C10175-357C-3DB9-9711-42606E39BE47}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);
    function get_CultureInfo: DNCultureInfo;
    procedure set_CultureInfo(value: DNCultureInfo);
    function get_CultureName: string;
    procedure set_CultureName(value: string);
    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_EscapedCodeBase: string;
    function get_ProcessorArchitecture: DNProcessorArchitecture;
    procedure set_ProcessorArchitecture(value: DNProcessorArchitecture);
    function get_ContentType: DNAssemblyContentType;
    procedure set_ContentType(value: DNAssemblyContentType);
    function get_Flags: DNAssemblyNameFlags;
    procedure set_Flags(value: DNAssemblyNameFlags);
    function get_HashAlgorithm: DNAssemblyHashAlgorithm;
    procedure set_HashAlgorithm(value: DNAssemblyHashAlgorithm);
    function get_VersionCompatibility: DNAssemblyVersionCompatibility;
    procedure set_VersionCompatibility(value: DNAssemblyVersionCompatibility);
    function get_KeyPair: DNStrongNameKeyPair;
    procedure set_KeyPair(value: DNStrongNameKeyPair);
    function get_FullName: string;

  { methods } 

    function Clone: DNObject;
    function GetPublicKey: TArray<Byte>;
    procedure SetPublicKey(publicKey: TArray<Byte>);
    function GetPublicKeyToken: TArray<Byte>;
    procedure SetPublicKeyToken(publicKeyToken: TArray<Byte>);
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Version: DNVersion read get_Version write set_Version;
    property CultureInfo: DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property CultureName: string read get_CultureName write set_CultureName;
    property CodeBase: string read get_CodeBase write set_CodeBase;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ProcessorArchitecture: DNProcessorArchitecture read get_ProcessorArchitecture write set_ProcessorArchitecture;
    property ContentType: DNAssemblyContentType read get_ContentType write set_ContentType;
    property Flags: DNAssemblyNameFlags read get_Flags write set_Flags;
    property HashAlgorithm: DNAssemblyHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property VersionCompatibility: DNAssemblyVersionCompatibility read get_VersionCompatibility write set_VersionCompatibility;
    property KeyPair: DNStrongNameKeyPair read get_KeyPair write set_KeyPair;
    property FullName: string read get_FullName;
  end;

  TDNAssemblyName = class(TDNGenericImport<DNAssemblyNameClass, DNAssemblyName>) end;

  //-------------namespace: System.Reflection----------------
  DNBinderClass = interface(DNObjectClass)
  ['{CB9A003F-783D-5929-BEEC-F8E5D1D1343A}']
  end;

  [DNTypeName('System.Reflection.Binder')]
  DNBinder = interface(DNObject)
  ['{348BCC5E-4CEC-3206-99B4-58D6AD90D70E}']
  { methods } 

    function BindToField(bindingAttr: DNBindingFlags; match: TArray<DNFieldInfo>; value: DNObject; culture: DNCultureInfo): DNFieldInfo;
    function BindToMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; out args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; names: TArray<string>; out state: DNObject): DNMethodBase;
    function ChangeType(value: DNObject; &type: DNType; culture: DNCultureInfo): DNObject;
    procedure ReorderArgumentArray(out args: TArray<DNObject>; state: DNObject);
    function SelectMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodBase;
    function SelectProperty(bindingAttr: DNBindingFlags; match: TArray<DNPropertyInfo>; returnType: DNType; indexes: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBinder = class(TDNGenericImport<DNBinderClass, DNBinder>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeDataClass = interface(DNObjectClass)
  ['{116E0ACC-BD39-5E03-866A-B206F4F56396}']
  { static methods } 

    {class} function GetCustomAttributes(target: DNMemberInfo): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNModule): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNAssembly): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNParameterInfo): DNIList<DNCustomAttributeData>; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeData')]
  DNCustomAttributeData = interface(DNObject)
  ['{18946653-E5EA-3B65-A316-B7F3BF8F9CBF}']
  { getters & setters } 

    function get_AttributeType: DNType;
    function get_Constructor: DNConstructorInfo;
    function get_ConstructorArguments: DNIList<DNCustomAttributeTypedArgument>;
    function get_NamedArguments: DNIList<DNCustomAttributeNamedArgument>;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property AttributeType: DNType read get_AttributeType;
    property &Constructor: DNConstructorInfo read get_Constructor;
    property ConstructorArguments: DNIList<DNCustomAttributeTypedArgument> read get_ConstructorArguments;
    property NamedArguments: DNIList<DNCustomAttributeNamedArgument> read get_NamedArguments;
  end;

  TDNCustomAttributeData = class(TDNGenericImport<DNCustomAttributeDataClass, DNCustomAttributeData>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeExtensionsClass = interface(DNObjectClass)
  ['{A3D1F537-19EA-5427-B3E0-F38BD042E15D}']
  { static methods } 

    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeExtensions')]
  DNCustomAttributeExtensions = interface(DNObject)
  ['{3068056D-E131-3EED-AD15-90FFC2AF7CF6}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCustomAttributeExtensions = class(TDNGenericImport<DNCustomAttributeExtensionsClass, DNCustomAttributeExtensions>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNCustomAttributeBuilderClass = interface(DNObjectClass)
  ['{60A632BD-E3A3-597D-905C-A76A336DC408}']
  { constructors } 

    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.CustomAttributeBuilder')]
  DNCustomAttributeBuilder = interface(DNObject)
  ['{89759247-B23B-3210-AE0E-5F2FB1531A6E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCustomAttributeBuilder = class(TDNGenericImport<DNCustomAttributeBuilderClass, DNCustomAttributeBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicILInfoClass = interface(DNObjectClass)
  ['{6DBE3B20-FAF0-5A83-BB30-A8E537922947}']
  end;

  [DNTypeName('System.Reflection.Emit.DynamicILInfo')]
  DNDynamicILInfo = interface(DNObject)
  ['{7E03014D-8150-30AA-BA34-E6A18F97BF15}']
  { getters & setters } 

    function get_DynamicMethod: DNDynamicMethod;

  { methods } 

    procedure SetCode(code: TArray<Byte>; maxStackSize: Int32); overload;
    procedure SetCode(code: PByte; codeSize: Int32; maxStackSize: Int32); overload;
    procedure SetExceptions(exceptions: TArray<Byte>); overload;
    procedure SetExceptions(exceptions: PByte; exceptionsSize: Int32); overload;
    procedure SetLocalSignature(localSignature: TArray<Byte>); overload;
    procedure SetLocalSignature(localSignature: PByte; signatureSize: Int32); overload;
    function GetTokenFor(method: DNRuntimeMethodHandle): Int32; overload;
    function GetTokenFor(method: DNDynamicMethod): Int32; overload;
    function GetTokenFor(method: DNRuntimeMethodHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(field: DNRuntimeFieldHandle): Int32; overload;
    function GetTokenFor(field: DNRuntimeFieldHandle; contextType: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(&type: DNRuntimeTypeHandle): Int32; overload;
    function GetTokenFor(literal: string): Int32; overload;
    function GetTokenFor(signature: TArray<Byte>): Int32; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property DynamicMethod: DNDynamicMethod read get_DynamicMethod;
  end;

  TDNDynamicILInfo = class(TDNGenericImport<DNDynamicILInfoClass, DNDynamicILInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventBuilderClass = interface(DNObjectClass)
  ['{09C0643F-A99F-5726-8674-B0761B537E78}']
  end;

  [DNTypeName('System.Reflection.Emit.EventBuilder')]
  DNEventBuilder = interface(DNObject)
  ['{BC225F23-A8F8-309C-B789-64EC586D892B}']
  { methods } 

    function GetEventToken: DNEventToken;
    procedure SetAddOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRemoveOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRaiseMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEventBuilder = class(TDNGenericImport<DNEventBuilderClass, DNEventBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNILGeneratorClass = interface(DNObjectClass)
  ['{B6A7837C-E850-5FA8-8139-3ADE04B53D43}']
  end;

  [DNTypeName('System.Reflection.Emit.ILGenerator')]
  DNILGenerator = interface(DNObject)
  ['{6FEA25C3-D409-3C4C-A319-280C0F92DADB}']
  { getters & setters } 

    function get_ILOffset: Int32;

  { methods } 

    procedure Emit(opcode: DNOpCode); overload;
    procedure Emit(opcode: DNOpCode; arg: Byte); overload;
    procedure Emit(opcode: DNOpCode; arg: SByte); overload;
    procedure Emit(opcode: DNOpCode; arg: Int16); overload;
    procedure Emit(opcode: DNOpCode; arg: Int32); overload;
    procedure Emit(opcode: DNOpCode; meth: DNMethodInfo); overload;
    procedure EmitCalli(opcode: DNOpCode; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; optionalParameterTypes: TArray<DNType>); overload;
    procedure EmitCalli(opcode: DNOpCode; unmanagedCallConv: DNCallingConvention; returnType: DNType; parameterTypes: TArray<DNType>); overload;
    procedure EmitCall(opcode: DNOpCode; methodInfo: DNMethodInfo; optionalParameterTypes: TArray<DNType>);
    procedure Emit(opcode: DNOpCode; signature: DNSignatureHelper); overload;
    procedure Emit(opcode: DNOpCode; con: DNConstructorInfo); overload;
    procedure Emit(opcode: DNOpCode; cls: DNType); overload;
    procedure Emit(opcode: DNOpCode; arg: Int64); overload;
    procedure Emit(opcode: DNOpCode; arg: Single); overload;
    procedure Emit(opcode: DNOpCode; arg: Double); overload;
    procedure Emit(opcode: DNOpCode; &label: DNLabel); overload;
    procedure Emit(opcode: DNOpCode; labels: TArray<DNLabel>); overload;
    procedure Emit(opcode: DNOpCode; field: DNFieldInfo); overload;
    procedure Emit(opcode: DNOpCode; str: string); overload;
    procedure Emit(opcode: DNOpCode; local: DNLocalBuilder); overload;
    function BeginExceptionBlock: DNLabel;
    procedure EndExceptionBlock;
    procedure BeginExceptFilterBlock;
    procedure BeginCatchBlock(exceptionType: DNType);
    procedure BeginFaultBlock;
    procedure BeginFinallyBlock;
    function DefineLabel: DNLabel;
    procedure MarkLabel(loc: DNLabel);
    procedure ThrowException(excType: DNType);
    procedure EmitWriteLine(value: string); overload;
    procedure EmitWriteLine(localBuilder: DNLocalBuilder); overload;
    procedure EmitWriteLine(fld: DNFieldInfo); overload;
    function DeclareLocal(localType: DNType): DNLocalBuilder; overload;
    function DeclareLocal(localType: DNType; pinned: Boolean): DNLocalBuilder; overload;
    procedure UsingNamespace(usingNamespace: string);
    procedure MarkSequencePoint(document: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32);
    procedure BeginScope;
    procedure EndScope;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ILOffset: Int32 read get_ILOffset;
  end;

  TDNILGenerator = class(TDNGenericImport<DNILGeneratorClass, DNILGenerator>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodesClass = interface(DNObjectClass)
  ['{24663570-575D-5623-A0E9-9A1BEA44C065}']
  { static fields getter & setter } 

   function __fakeFieldGet_Nop: DNOpCode;
   function __fakeFieldGet_Break: DNOpCode;
   function __fakeFieldGet_Ldarg_0: DNOpCode;
   function __fakeFieldGet_Ldarg_1: DNOpCode;
   function __fakeFieldGet_Ldarg_2: DNOpCode;
   function __fakeFieldGet_Ldarg_3: DNOpCode;
   function __fakeFieldGet_Ldloc_0: DNOpCode;
   function __fakeFieldGet_Ldloc_1: DNOpCode;
   function __fakeFieldGet_Ldloc_2: DNOpCode;
   function __fakeFieldGet_Ldloc_3: DNOpCode;
   function __fakeFieldGet_Stloc_0: DNOpCode;
   function __fakeFieldGet_Stloc_1: DNOpCode;
   function __fakeFieldGet_Stloc_2: DNOpCode;
   function __fakeFieldGet_Stloc_3: DNOpCode;
   function __fakeFieldGet_Ldarg_S: DNOpCode;
   function __fakeFieldGet_Ldarga_S: DNOpCode;
   function __fakeFieldGet_Starg_S: DNOpCode;
   function __fakeFieldGet_Ldloc_S: DNOpCode;
   function __fakeFieldGet_Ldloca_S: DNOpCode;
   function __fakeFieldGet_Stloc_S: DNOpCode;
   function __fakeFieldGet_Ldnull: DNOpCode;
   function __fakeFieldGet_Ldc_I4_M1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_0: DNOpCode;
   function __fakeFieldGet_Ldc_I4_1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_2: DNOpCode;
   function __fakeFieldGet_Ldc_I4_3: DNOpCode;
   function __fakeFieldGet_Ldc_I4_4: DNOpCode;
   function __fakeFieldGet_Ldc_I4_5: DNOpCode;
   function __fakeFieldGet_Ldc_I4_6: DNOpCode;
   function __fakeFieldGet_Ldc_I4_7: DNOpCode;
   function __fakeFieldGet_Ldc_I4_8: DNOpCode;
   function __fakeFieldGet_Ldc_I4_S: DNOpCode;
   function __fakeFieldGet_Ldc_I4: DNOpCode;
   function __fakeFieldGet_Ldc_I8: DNOpCode;
   function __fakeFieldGet_Ldc_R4: DNOpCode;
   function __fakeFieldGet_Ldc_R8: DNOpCode;
   function __fakeFieldGet_Dup: DNOpCode;
   function __fakeFieldGet_Pop: DNOpCode;
   function __fakeFieldGet_Jmp: DNOpCode;
   function __fakeFieldGet_Call: DNOpCode;
   function __fakeFieldGet_Calli: DNOpCode;
   function __fakeFieldGet_Ret: DNOpCode;
   function __fakeFieldGet_Br_S: DNOpCode;
   function __fakeFieldGet_Brfalse_S: DNOpCode;
   function __fakeFieldGet_Brtrue_S: DNOpCode;
   function __fakeFieldGet_Beq_S: DNOpCode;
   function __fakeFieldGet_Bge_S: DNOpCode;
   function __fakeFieldGet_Bgt_S: DNOpCode;
   function __fakeFieldGet_Ble_S: DNOpCode;
   function __fakeFieldGet_Blt_S: DNOpCode;
   function __fakeFieldGet_Bne_Un_S: DNOpCode;
   function __fakeFieldGet_Bge_Un_S: DNOpCode;
   function __fakeFieldGet_Bgt_Un_S: DNOpCode;
   function __fakeFieldGet_Ble_Un_S: DNOpCode;
   function __fakeFieldGet_Blt_Un_S: DNOpCode;
   function __fakeFieldGet_Br: DNOpCode;
   function __fakeFieldGet_Brfalse: DNOpCode;
   function __fakeFieldGet_Brtrue: DNOpCode;
   function __fakeFieldGet_Beq: DNOpCode;
   function __fakeFieldGet_Bge: DNOpCode;
   function __fakeFieldGet_Bgt: DNOpCode;
   function __fakeFieldGet_Ble: DNOpCode;
   function __fakeFieldGet_Blt: DNOpCode;
   function __fakeFieldGet_Bne_Un: DNOpCode;
   function __fakeFieldGet_Bge_Un: DNOpCode;
   function __fakeFieldGet_Bgt_Un: DNOpCode;
   function __fakeFieldGet_Ble_Un: DNOpCode;
   function __fakeFieldGet_Blt_Un: DNOpCode;
   function __fakeFieldGet_Switch: DNOpCode;
   function __fakeFieldGet_Ldind_I1: DNOpCode;
   function __fakeFieldGet_Ldind_U1: DNOpCode;
   function __fakeFieldGet_Ldind_I2: DNOpCode;
   function __fakeFieldGet_Ldind_U2: DNOpCode;
   function __fakeFieldGet_Ldind_I4: DNOpCode;
   function __fakeFieldGet_Ldind_U4: DNOpCode;
   function __fakeFieldGet_Ldind_I8: DNOpCode;
   function __fakeFieldGet_Ldind_I: DNOpCode;
   function __fakeFieldGet_Ldind_R4: DNOpCode;
   function __fakeFieldGet_Ldind_R8: DNOpCode;
   function __fakeFieldGet_Ldind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_I1: DNOpCode;
   function __fakeFieldGet_Stind_I2: DNOpCode;
   function __fakeFieldGet_Stind_I4: DNOpCode;
   function __fakeFieldGet_Stind_I8: DNOpCode;
   function __fakeFieldGet_Stind_R4: DNOpCode;
   function __fakeFieldGet_Stind_R8: DNOpCode;
   function __fakeFieldGet_Add: DNOpCode;
   function __fakeFieldGet_Sub: DNOpCode;
   function __fakeFieldGet_Mul: DNOpCode;
   function __fakeFieldGet_Div: DNOpCode;
   function __fakeFieldGet_Div_Un: DNOpCode;
   function __fakeFieldGet_Rem: DNOpCode;
   function __fakeFieldGet_Rem_Un: DNOpCode;
   function __fakeFieldGet_And: DNOpCode;
   function __fakeFieldGet_Or: DNOpCode;
   function __fakeFieldGet_Xor: DNOpCode;
   function __fakeFieldGet_Shl: DNOpCode;
   function __fakeFieldGet_Shr: DNOpCode;
   function __fakeFieldGet_Shr_Un: DNOpCode;
   function __fakeFieldGet_Neg: DNOpCode;
   function __fakeFieldGet_Not: DNOpCode;
   function __fakeFieldGet_Conv_I1: DNOpCode;
   function __fakeFieldGet_Conv_I2: DNOpCode;
   function __fakeFieldGet_Conv_I4: DNOpCode;
   function __fakeFieldGet_Conv_I8: DNOpCode;
   function __fakeFieldGet_Conv_R4: DNOpCode;
   function __fakeFieldGet_Conv_R8: DNOpCode;
   function __fakeFieldGet_Conv_U4: DNOpCode;
   function __fakeFieldGet_Conv_U8: DNOpCode;
   function __fakeFieldGet_Callvirt: DNOpCode;
   function __fakeFieldGet_Cpobj: DNOpCode;
   function __fakeFieldGet_Ldobj: DNOpCode;
   function __fakeFieldGet_Ldstr: DNOpCode;
   function __fakeFieldGet_Newobj: DNOpCode;
   function __fakeFieldGet_Castclass: DNOpCode;
   function __fakeFieldGet_Isinst: DNOpCode;
   function __fakeFieldGet_Conv_R_Un: DNOpCode;
   function __fakeFieldGet_Unbox: DNOpCode;
   function __fakeFieldGet_Throw: DNOpCode;
   function __fakeFieldGet_Ldfld: DNOpCode;
   function __fakeFieldGet_Ldflda: DNOpCode;
   function __fakeFieldGet_Stfld: DNOpCode;
   function __fakeFieldGet_Ldsfld: DNOpCode;
   function __fakeFieldGet_Ldsflda: DNOpCode;
   function __fakeFieldGet_Stsfld: DNOpCode;
   function __fakeFieldGet_Stobj: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U_Un: DNOpCode;
   function __fakeFieldGet_Box: DNOpCode;
   function __fakeFieldGet_Newarr: DNOpCode;
   function __fakeFieldGet_Ldlen: DNOpCode;
   function __fakeFieldGet_Ldelema: DNOpCode;
   function __fakeFieldGet_Ldelem_I1: DNOpCode;
   function __fakeFieldGet_Ldelem_U1: DNOpCode;
   function __fakeFieldGet_Ldelem_I2: DNOpCode;
   function __fakeFieldGet_Ldelem_U2: DNOpCode;
   function __fakeFieldGet_Ldelem_I4: DNOpCode;
   function __fakeFieldGet_Ldelem_U4: DNOpCode;
   function __fakeFieldGet_Ldelem_I8: DNOpCode;
   function __fakeFieldGet_Ldelem_I: DNOpCode;
   function __fakeFieldGet_Ldelem_R4: DNOpCode;
   function __fakeFieldGet_Ldelem_R8: DNOpCode;
   function __fakeFieldGet_Ldelem_Ref: DNOpCode;
   function __fakeFieldGet_Stelem_I: DNOpCode;
   function __fakeFieldGet_Stelem_I1: DNOpCode;
   function __fakeFieldGet_Stelem_I2: DNOpCode;
   function __fakeFieldGet_Stelem_I4: DNOpCode;
   function __fakeFieldGet_Stelem_I8: DNOpCode;
   function __fakeFieldGet_Stelem_R4: DNOpCode;
   function __fakeFieldGet_Stelem_R8: DNOpCode;
   function __fakeFieldGet_Stelem_Ref: DNOpCode;
   function __fakeFieldGet_Ldelem: DNOpCode;
   function __fakeFieldGet_Stelem: DNOpCode;
   function __fakeFieldGet_Unbox_Any: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8: DNOpCode;
   function __fakeFieldGet_Refanyval: DNOpCode;
   function __fakeFieldGet_Ckfinite: DNOpCode;
   function __fakeFieldGet_Mkrefany: DNOpCode;
   function __fakeFieldGet_Ldtoken: DNOpCode;
   function __fakeFieldGet_Conv_U2: DNOpCode;
   function __fakeFieldGet_Conv_U1: DNOpCode;
   function __fakeFieldGet_Conv_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U: DNOpCode;
   function __fakeFieldGet_Add_Ovf: DNOpCode;
   function __fakeFieldGet_Add_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Mul_Ovf: DNOpCode;
   function __fakeFieldGet_Mul_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Sub_Ovf: DNOpCode;
   function __fakeFieldGet_Sub_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Endfinally: DNOpCode;
   function __fakeFieldGet_Leave: DNOpCode;
   function __fakeFieldGet_Leave_S: DNOpCode;
   function __fakeFieldGet_Stind_I: DNOpCode;
   function __fakeFieldGet_Conv_U: DNOpCode;
   function __fakeFieldGet_Prefix7: DNOpCode;
   function __fakeFieldGet_Prefix6: DNOpCode;
   function __fakeFieldGet_Prefix5: DNOpCode;
   function __fakeFieldGet_Prefix4: DNOpCode;
   function __fakeFieldGet_Prefix3: DNOpCode;
   function __fakeFieldGet_Prefix2: DNOpCode;
   function __fakeFieldGet_Prefix1: DNOpCode;
   function __fakeFieldGet_Prefixref: DNOpCode;
   function __fakeFieldGet_Arglist: DNOpCode;
   function __fakeFieldGet_Ceq: DNOpCode;
   function __fakeFieldGet_Cgt: DNOpCode;
   function __fakeFieldGet_Cgt_Un: DNOpCode;
   function __fakeFieldGet_Clt: DNOpCode;
   function __fakeFieldGet_Clt_Un: DNOpCode;
   function __fakeFieldGet_Ldftn: DNOpCode;
   function __fakeFieldGet_Ldvirtftn: DNOpCode;
   function __fakeFieldGet_Ldarg: DNOpCode;
   function __fakeFieldGet_Ldarga: DNOpCode;
   function __fakeFieldGet_Starg: DNOpCode;
   function __fakeFieldGet_Ldloc: DNOpCode;
   function __fakeFieldGet_Ldloca: DNOpCode;
   function __fakeFieldGet_Stloc: DNOpCode;
   function __fakeFieldGet_Localloc: DNOpCode;
   function __fakeFieldGet_Endfilter: DNOpCode;
   function __fakeFieldGet_Unaligned: DNOpCode;
   function __fakeFieldGet_Volatile: DNOpCode;
   function __fakeFieldGet_Tailcall: DNOpCode;
   function __fakeFieldGet_Initobj: DNOpCode;
   function __fakeFieldGet_Constrained: DNOpCode;
   function __fakeFieldGet_Cpblk: DNOpCode;
   function __fakeFieldGet_Initblk: DNOpCode;
   function __fakeFieldGet_Rethrow: DNOpCode;
   function __fakeFieldGet_Sizeof: DNOpCode;
   function __fakeFieldGet_Refanytype: DNOpCode;
   function __fakeFieldGet_Readonly: DNOpCode;

  { static fields } 

    {class} property Nop: DNOpCode read __fakeFieldGet_Nop;
    {class} property Break: DNOpCode read __fakeFieldGet_Break;
    {class} property Ldarg_0: DNOpCode read __fakeFieldGet_Ldarg_0;
    {class} property Ldarg_1: DNOpCode read __fakeFieldGet_Ldarg_1;
    {class} property Ldarg_2: DNOpCode read __fakeFieldGet_Ldarg_2;
    {class} property Ldarg_3: DNOpCode read __fakeFieldGet_Ldarg_3;
    {class} property Ldloc_0: DNOpCode read __fakeFieldGet_Ldloc_0;
    {class} property Ldloc_1: DNOpCode read __fakeFieldGet_Ldloc_1;
    {class} property Ldloc_2: DNOpCode read __fakeFieldGet_Ldloc_2;
    {class} property Ldloc_3: DNOpCode read __fakeFieldGet_Ldloc_3;
    {class} property Stloc_0: DNOpCode read __fakeFieldGet_Stloc_0;
    {class} property Stloc_1: DNOpCode read __fakeFieldGet_Stloc_1;
    {class} property Stloc_2: DNOpCode read __fakeFieldGet_Stloc_2;
    {class} property Stloc_3: DNOpCode read __fakeFieldGet_Stloc_3;
    {class} property Ldarg_S: DNOpCode read __fakeFieldGet_Ldarg_S;
    {class} property Ldarga_S: DNOpCode read __fakeFieldGet_Ldarga_S;
    {class} property Starg_S: DNOpCode read __fakeFieldGet_Starg_S;
    {class} property Ldloc_S: DNOpCode read __fakeFieldGet_Ldloc_S;
    {class} property Ldloca_S: DNOpCode read __fakeFieldGet_Ldloca_S;
    {class} property Stloc_S: DNOpCode read __fakeFieldGet_Stloc_S;
    {class} property Ldnull: DNOpCode read __fakeFieldGet_Ldnull;
    {class} property Ldc_I4_M1: DNOpCode read __fakeFieldGet_Ldc_I4_M1;
    {class} property Ldc_I4_0: DNOpCode read __fakeFieldGet_Ldc_I4_0;
    {class} property Ldc_I4_1: DNOpCode read __fakeFieldGet_Ldc_I4_1;
    {class} property Ldc_I4_2: DNOpCode read __fakeFieldGet_Ldc_I4_2;
    {class} property Ldc_I4_3: DNOpCode read __fakeFieldGet_Ldc_I4_3;
    {class} property Ldc_I4_4: DNOpCode read __fakeFieldGet_Ldc_I4_4;
    {class} property Ldc_I4_5: DNOpCode read __fakeFieldGet_Ldc_I4_5;
    {class} property Ldc_I4_6: DNOpCode read __fakeFieldGet_Ldc_I4_6;
    {class} property Ldc_I4_7: DNOpCode read __fakeFieldGet_Ldc_I4_7;
    {class} property Ldc_I4_8: DNOpCode read __fakeFieldGet_Ldc_I4_8;
    {class} property Ldc_I4_S: DNOpCode read __fakeFieldGet_Ldc_I4_S;
    {class} property Ldc_I4: DNOpCode read __fakeFieldGet_Ldc_I4;
    {class} property Ldc_I8: DNOpCode read __fakeFieldGet_Ldc_I8;
    {class} property Ldc_R4: DNOpCode read __fakeFieldGet_Ldc_R4;
    {class} property Ldc_R8: DNOpCode read __fakeFieldGet_Ldc_R8;
    {class} property Dup: DNOpCode read __fakeFieldGet_Dup;
    {class} property Pop: DNOpCode read __fakeFieldGet_Pop;
    {class} property Jmp: DNOpCode read __fakeFieldGet_Jmp;
    {class} property Call: DNOpCode read __fakeFieldGet_Call;
    {class} property Calli: DNOpCode read __fakeFieldGet_Calli;
    {class} property Ret: DNOpCode read __fakeFieldGet_Ret;
    {class} property Br_S: DNOpCode read __fakeFieldGet_Br_S;
    {class} property Brfalse_S: DNOpCode read __fakeFieldGet_Brfalse_S;
    {class} property Brtrue_S: DNOpCode read __fakeFieldGet_Brtrue_S;
    {class} property Beq_S: DNOpCode read __fakeFieldGet_Beq_S;
    {class} property Bge_S: DNOpCode read __fakeFieldGet_Bge_S;
    {class} property Bgt_S: DNOpCode read __fakeFieldGet_Bgt_S;
    {class} property Ble_S: DNOpCode read __fakeFieldGet_Ble_S;
    {class} property Blt_S: DNOpCode read __fakeFieldGet_Blt_S;
    {class} property Bne_Un_S: DNOpCode read __fakeFieldGet_Bne_Un_S;
    {class} property Bge_Un_S: DNOpCode read __fakeFieldGet_Bge_Un_S;
    {class} property Bgt_Un_S: DNOpCode read __fakeFieldGet_Bgt_Un_S;
    {class} property Ble_Un_S: DNOpCode read __fakeFieldGet_Ble_Un_S;
    {class} property Blt_Un_S: DNOpCode read __fakeFieldGet_Blt_Un_S;
    {class} property Br: DNOpCode read __fakeFieldGet_Br;
    {class} property Brfalse: DNOpCode read __fakeFieldGet_Brfalse;
    {class} property Brtrue: DNOpCode read __fakeFieldGet_Brtrue;
    {class} property Beq: DNOpCode read __fakeFieldGet_Beq;
    {class} property Bge: DNOpCode read __fakeFieldGet_Bge;
    {class} property Bgt: DNOpCode read __fakeFieldGet_Bgt;
    {class} property Ble: DNOpCode read __fakeFieldGet_Ble;
    {class} property Blt: DNOpCode read __fakeFieldGet_Blt;
    {class} property Bne_Un: DNOpCode read __fakeFieldGet_Bne_Un;
    {class} property Bge_Un: DNOpCode read __fakeFieldGet_Bge_Un;
    {class} property Bgt_Un: DNOpCode read __fakeFieldGet_Bgt_Un;
    {class} property Ble_Un: DNOpCode read __fakeFieldGet_Ble_Un;
    {class} property Blt_Un: DNOpCode read __fakeFieldGet_Blt_Un;
    {class} property Switch: DNOpCode read __fakeFieldGet_Switch;
    {class} property Ldind_I1: DNOpCode read __fakeFieldGet_Ldind_I1;
    {class} property Ldind_U1: DNOpCode read __fakeFieldGet_Ldind_U1;
    {class} property Ldind_I2: DNOpCode read __fakeFieldGet_Ldind_I2;
    {class} property Ldind_U2: DNOpCode read __fakeFieldGet_Ldind_U2;
    {class} property Ldind_I4: DNOpCode read __fakeFieldGet_Ldind_I4;
    {class} property Ldind_U4: DNOpCode read __fakeFieldGet_Ldind_U4;
    {class} property Ldind_I8: DNOpCode read __fakeFieldGet_Ldind_I8;
    {class} property Ldind_I: DNOpCode read __fakeFieldGet_Ldind_I;
    {class} property Ldind_R4: DNOpCode read __fakeFieldGet_Ldind_R4;
    {class} property Ldind_R8: DNOpCode read __fakeFieldGet_Ldind_R8;
    {class} property Ldind_Ref: DNOpCode read __fakeFieldGet_Ldind_Ref;
    {class} property Stind_Ref: DNOpCode read __fakeFieldGet_Stind_Ref;
    {class} property Stind_I1: DNOpCode read __fakeFieldGet_Stind_I1;
    {class} property Stind_I2: DNOpCode read __fakeFieldGet_Stind_I2;
    {class} property Stind_I4: DNOpCode read __fakeFieldGet_Stind_I4;
    {class} property Stind_I8: DNOpCode read __fakeFieldGet_Stind_I8;
    {class} property Stind_R4: DNOpCode read __fakeFieldGet_Stind_R4;
    {class} property Stind_R8: DNOpCode read __fakeFieldGet_Stind_R8;
    {class} property Add: DNOpCode read __fakeFieldGet_Add;
    {class} property Sub: DNOpCode read __fakeFieldGet_Sub;
    {class} property Mul: DNOpCode read __fakeFieldGet_Mul;
    {class} property &Div: DNOpCode read __fakeFieldGet_Div;
    {class} property Div_Un: DNOpCode read __fakeFieldGet_Div_Un;
    {class} property Rem: DNOpCode read __fakeFieldGet_Rem;
    {class} property Rem_Un: DNOpCode read __fakeFieldGet_Rem_Un;
    {class} property &And: DNOpCode read __fakeFieldGet_And;
    {class} property &Or: DNOpCode read __fakeFieldGet_Or;
    {class} property &Xor: DNOpCode read __fakeFieldGet_Xor;
    {class} property &Shl: DNOpCode read __fakeFieldGet_Shl;
    {class} property &Shr: DNOpCode read __fakeFieldGet_Shr;
    {class} property Shr_Un: DNOpCode read __fakeFieldGet_Shr_Un;
    {class} property Neg: DNOpCode read __fakeFieldGet_Neg;
    {class} property &Not: DNOpCode read __fakeFieldGet_Not;
    {class} property Conv_I1: DNOpCode read __fakeFieldGet_Conv_I1;
    {class} property Conv_I2: DNOpCode read __fakeFieldGet_Conv_I2;
    {class} property Conv_I4: DNOpCode read __fakeFieldGet_Conv_I4;
    {class} property Conv_I8: DNOpCode read __fakeFieldGet_Conv_I8;
    {class} property Conv_R4: DNOpCode read __fakeFieldGet_Conv_R4;
    {class} property Conv_R8: DNOpCode read __fakeFieldGet_Conv_R8;
    {class} property Conv_U4: DNOpCode read __fakeFieldGet_Conv_U4;
    {class} property Conv_U8: DNOpCode read __fakeFieldGet_Conv_U8;
    {class} property Callvirt: DNOpCode read __fakeFieldGet_Callvirt;
    {class} property Cpobj: DNOpCode read __fakeFieldGet_Cpobj;
    {class} property Ldobj: DNOpCode read __fakeFieldGet_Ldobj;
    {class} property Ldstr: DNOpCode read __fakeFieldGet_Ldstr;
    {class} property Newobj: DNOpCode read __fakeFieldGet_Newobj;
    {class} property Castclass: DNOpCode read __fakeFieldGet_Castclass;
    {class} property Isinst: DNOpCode read __fakeFieldGet_Isinst;
    {class} property Conv_R_Un: DNOpCode read __fakeFieldGet_Conv_R_Un;
    {class} property Unbox: DNOpCode read __fakeFieldGet_Unbox;
    {class} property Throw: DNOpCode read __fakeFieldGet_Throw;
    {class} property Ldfld: DNOpCode read __fakeFieldGet_Ldfld;
    {class} property Ldflda: DNOpCode read __fakeFieldGet_Ldflda;
    {class} property Stfld: DNOpCode read __fakeFieldGet_Stfld;
    {class} property Ldsfld: DNOpCode read __fakeFieldGet_Ldsfld;
    {class} property Ldsflda: DNOpCode read __fakeFieldGet_Ldsflda;
    {class} property Stsfld: DNOpCode read __fakeFieldGet_Stsfld;
    {class} property Stobj: DNOpCode read __fakeFieldGet_Stobj;
    {class} property Conv_Ovf_I1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I1_Un;
    {class} property Conv_Ovf_I2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I2_Un;
    {class} property Conv_Ovf_I4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I4_Un;
    {class} property Conv_Ovf_I8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I8_Un;
    {class} property Conv_Ovf_U1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U1_Un;
    {class} property Conv_Ovf_U2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U2_Un;
    {class} property Conv_Ovf_U4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U4_Un;
    {class} property Conv_Ovf_U8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U8_Un;
    {class} property Conv_Ovf_I_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I_Un;
    {class} property Conv_Ovf_U_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U_Un;
    {class} property Box: DNOpCode read __fakeFieldGet_Box;
    {class} property Newarr: DNOpCode read __fakeFieldGet_Newarr;
    {class} property Ldlen: DNOpCode read __fakeFieldGet_Ldlen;
    {class} property Ldelema: DNOpCode read __fakeFieldGet_Ldelema;
    {class} property Ldelem_I1: DNOpCode read __fakeFieldGet_Ldelem_I1;
    {class} property Ldelem_U1: DNOpCode read __fakeFieldGet_Ldelem_U1;
    {class} property Ldelem_I2: DNOpCode read __fakeFieldGet_Ldelem_I2;
    {class} property Ldelem_U2: DNOpCode read __fakeFieldGet_Ldelem_U2;
    {class} property Ldelem_I4: DNOpCode read __fakeFieldGet_Ldelem_I4;
    {class} property Ldelem_U4: DNOpCode read __fakeFieldGet_Ldelem_U4;
    {class} property Ldelem_I8: DNOpCode read __fakeFieldGet_Ldelem_I8;
    {class} property Ldelem_I: DNOpCode read __fakeFieldGet_Ldelem_I;
    {class} property Ldelem_R4: DNOpCode read __fakeFieldGet_Ldelem_R4;
    {class} property Ldelem_R8: DNOpCode read __fakeFieldGet_Ldelem_R8;
    {class} property Ldelem_Ref: DNOpCode read __fakeFieldGet_Ldelem_Ref;
    {class} property Stelem_I: DNOpCode read __fakeFieldGet_Stelem_I;
    {class} property Stelem_I1: DNOpCode read __fakeFieldGet_Stelem_I1;
    {class} property Stelem_I2: DNOpCode read __fakeFieldGet_Stelem_I2;
    {class} property Stelem_I4: DNOpCode read __fakeFieldGet_Stelem_I4;
    {class} property Stelem_I8: DNOpCode read __fakeFieldGet_Stelem_I8;
    {class} property Stelem_R4: DNOpCode read __fakeFieldGet_Stelem_R4;
    {class} property Stelem_R8: DNOpCode read __fakeFieldGet_Stelem_R8;
    {class} property Stelem_Ref: DNOpCode read __fakeFieldGet_Stelem_Ref;
    {class} property Ldelem: DNOpCode read __fakeFieldGet_Ldelem;
    {class} property Stelem: DNOpCode read __fakeFieldGet_Stelem;
    {class} property Unbox_Any: DNOpCode read __fakeFieldGet_Unbox_Any;
    {class} property Conv_Ovf_I1: DNOpCode read __fakeFieldGet_Conv_Ovf_I1;
    {class} property Conv_Ovf_U1: DNOpCode read __fakeFieldGet_Conv_Ovf_U1;
    {class} property Conv_Ovf_I2: DNOpCode read __fakeFieldGet_Conv_Ovf_I2;
    {class} property Conv_Ovf_U2: DNOpCode read __fakeFieldGet_Conv_Ovf_U2;
    {class} property Conv_Ovf_I4: DNOpCode read __fakeFieldGet_Conv_Ovf_I4;
    {class} property Conv_Ovf_U4: DNOpCode read __fakeFieldGet_Conv_Ovf_U4;
    {class} property Conv_Ovf_I8: DNOpCode read __fakeFieldGet_Conv_Ovf_I8;
    {class} property Conv_Ovf_U8: DNOpCode read __fakeFieldGet_Conv_Ovf_U8;
    {class} property Refanyval: DNOpCode read __fakeFieldGet_Refanyval;
    {class} property Ckfinite: DNOpCode read __fakeFieldGet_Ckfinite;
    {class} property Mkrefany: DNOpCode read __fakeFieldGet_Mkrefany;
    {class} property Ldtoken: DNOpCode read __fakeFieldGet_Ldtoken;
    {class} property Conv_U2: DNOpCode read __fakeFieldGet_Conv_U2;
    {class} property Conv_U1: DNOpCode read __fakeFieldGet_Conv_U1;
    {class} property Conv_I: DNOpCode read __fakeFieldGet_Conv_I;
    {class} property Conv_Ovf_I: DNOpCode read __fakeFieldGet_Conv_Ovf_I;
    {class} property Conv_Ovf_U: DNOpCode read __fakeFieldGet_Conv_Ovf_U;
    {class} property Add_Ovf: DNOpCode read __fakeFieldGet_Add_Ovf;
    {class} property Add_Ovf_Un: DNOpCode read __fakeFieldGet_Add_Ovf_Un;
    {class} property Mul_Ovf: DNOpCode read __fakeFieldGet_Mul_Ovf;
    {class} property Mul_Ovf_Un: DNOpCode read __fakeFieldGet_Mul_Ovf_Un;
    {class} property Sub_Ovf: DNOpCode read __fakeFieldGet_Sub_Ovf;
    {class} property Sub_Ovf_Un: DNOpCode read __fakeFieldGet_Sub_Ovf_Un;
    {class} property Endfinally: DNOpCode read __fakeFieldGet_Endfinally;
    {class} property Leave: DNOpCode read __fakeFieldGet_Leave;
    {class} property Leave_S: DNOpCode read __fakeFieldGet_Leave_S;
    {class} property Stind_I: DNOpCode read __fakeFieldGet_Stind_I;
    {class} property Conv_U: DNOpCode read __fakeFieldGet_Conv_U;
    {class} property Prefix7: DNOpCode read __fakeFieldGet_Prefix7;
    {class} property Prefix6: DNOpCode read __fakeFieldGet_Prefix6;
    {class} property Prefix5: DNOpCode read __fakeFieldGet_Prefix5;
    {class} property Prefix4: DNOpCode read __fakeFieldGet_Prefix4;
    {class} property Prefix3: DNOpCode read __fakeFieldGet_Prefix3;
    {class} property Prefix2: DNOpCode read __fakeFieldGet_Prefix2;
    {class} property Prefix1: DNOpCode read __fakeFieldGet_Prefix1;
    {class} property Prefixref: DNOpCode read __fakeFieldGet_Prefixref;
    {class} property Arglist: DNOpCode read __fakeFieldGet_Arglist;
    {class} property Ceq: DNOpCode read __fakeFieldGet_Ceq;
    {class} property Cgt: DNOpCode read __fakeFieldGet_Cgt;
    {class} property Cgt_Un: DNOpCode read __fakeFieldGet_Cgt_Un;
    {class} property Clt: DNOpCode read __fakeFieldGet_Clt;
    {class} property Clt_Un: DNOpCode read __fakeFieldGet_Clt_Un;
    {class} property Ldftn: DNOpCode read __fakeFieldGet_Ldftn;
    {class} property Ldvirtftn: DNOpCode read __fakeFieldGet_Ldvirtftn;
    {class} property Ldarg: DNOpCode read __fakeFieldGet_Ldarg;
    {class} property Ldarga: DNOpCode read __fakeFieldGet_Ldarga;
    {class} property Starg: DNOpCode read __fakeFieldGet_Starg;
    {class} property Ldloc: DNOpCode read __fakeFieldGet_Ldloc;
    {class} property Ldloca: DNOpCode read __fakeFieldGet_Ldloca;
    {class} property Stloc: DNOpCode read __fakeFieldGet_Stloc;
    {class} property Localloc: DNOpCode read __fakeFieldGet_Localloc;
    {class} property Endfilter: DNOpCode read __fakeFieldGet_Endfilter;
    {class} property Unaligned: DNOpCode read __fakeFieldGet_Unaligned;
    {class} property Volatile: DNOpCode read __fakeFieldGet_Volatile;
    {class} property Tailcall: DNOpCode read __fakeFieldGet_Tailcall;
    {class} property Initobj: DNOpCode read __fakeFieldGet_Initobj;
    {class} property Constrained: DNOpCode read __fakeFieldGet_Constrained;
    {class} property Cpblk: DNOpCode read __fakeFieldGet_Cpblk;
    {class} property Initblk: DNOpCode read __fakeFieldGet_Initblk;
    {class} property Rethrow: DNOpCode read __fakeFieldGet_Rethrow;
    {class} property Sizeof: DNOpCode read __fakeFieldGet_Sizeof;
    {class} property Refanytype: DNOpCode read __fakeFieldGet_Refanytype;
    {class} property Readonly: DNOpCode read __fakeFieldGet_Readonly;

  { static methods } 

    {class} function TakesSingleByteArgument(inst: DNOpCode): Boolean;

  end;

  [DNTypeName('System.Reflection.Emit.OpCodes')]
  DNOpCodes = interface(DNObject)
  ['{9A276068-87B8-38D5-99E0-64AA5783B2DC}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNOpCodes = class(TDNGenericImport<DNOpCodesClass, DNOpCodes>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterBuilderClass = interface(DNObjectClass)
  ['{E118EF02-AAE7-5470-BD92-AAF5328F3BBD}']
  end;

  [DNTypeName('System.Reflection.Emit.ParameterBuilder')]
  DNParameterBuilder = interface(DNObject)
  ['{8AD8AAE7-D870-396F-A5DD-6561BCCC5B1D}']
  { getters & setters } 

    function get_Name: string;
    function get_Position: Int32;
    function get_Attributes: Int32;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsOptional: Boolean;

  { methods } 

    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetToken: DNParameterToken;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Position: Int32 read get_Position;
    property Attributes: Int32 read get_Attributes;
    property IsIn: Boolean read get_IsIn;
    property IsOut: Boolean read get_IsOut;
    property IsOptional: Boolean read get_IsOptional;
  end;

  TDNParameterBuilder = class(TDNGenericImport<DNParameterBuilderClass, DNParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureHelperClass = interface(DNObjectClass)
  ['{E0B6E267-96BE-5DA5-9786-41AB48994373}']
  { static methods } 

    {class} function GetMethodSigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; unmanagedCallConv: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper: DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(unmanagedCallingConvention: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper(&mod: DNModule): DNSignatureHelper; overload;
    {class} function GetFieldSigHelper(&mod: DNModule): DNSignatureHelper;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureHelper')]
  DNSignatureHelper = interface(DNObject)
  ['{01EF87BF-D203-367A-B0FB-3B92094EC3D4}']
  { methods } 

    procedure AddArgument(clsArgument: DNType); overload;
    procedure AddArgument(argument: DNType; pinned: Boolean); overload;
    procedure AddArguments(arguments: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>);
    procedure AddArgument(argument: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>); overload;
    procedure AddSentinel;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetSignature: TArray<Byte>;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSignatureHelper = class(TDNGenericImport<DNSignatureHelperClass, DNSignatureHelper>) end;

  //-------------namespace: System.Reflection----------------
  DNExceptionHandlingClauseClass = interface(DNObjectClass)
  ['{57F95AB0-4241-5F12-A540-3BA3E274C601}']
  end;

  [DNTypeName('System.Reflection.ExceptionHandlingClause')]
  DNExceptionHandlingClause = interface(DNObject)
  ['{DCD661B1-8754-3BC1-9850-C20F47DB09F9}']
  { getters & setters } 

    function get_Flags: DNExceptionHandlingClauseOptions;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_FilterOffset: Int32;
    function get_CatchType: DNType;

  { methods } 

    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Flags: DNExceptionHandlingClauseOptions read get_Flags;
    property TryOffset: Int32 read get_TryOffset;
    property TryLength: Int32 read get_TryLength;
    property HandlerOffset: Int32 read get_HandlerOffset;
    property HandlerLength: Int32 read get_HandlerLength;
    property FilterOffset: Int32 read get_FilterOffset;
    property CatchType: DNType read get_CatchType;
  end;

  TDNExceptionHandlingClause = class(TDNGenericImport<DNExceptionHandlingClauseClass, DNExceptionHandlingClause>) end;

  //-------------namespace: System.Reflection----------------
  DNIntrospectionExtensionsClass = interface(DNObjectClass)
  ['{4E267677-A82C-525B-AE49-27E65CD0FE83}']
  { static methods } 

    {class} function GetTypeInfo(&type: DNType): DNTypeInfo;

  end;

  [DNTypeName('System.Reflection.IntrospectionExtensions')]
  DNIntrospectionExtensions = interface(DNObject)
  ['{339142BC-4928-38BA-967A-572517F52D11}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNIntrospectionExtensions = class(TDNGenericImport<DNIntrospectionExtensionsClass, DNIntrospectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNLocalVariableInfoClass = interface(DNObjectClass)
  ['{FD34EDA7-FEE5-5133-93DD-9834C83B526D}']
  end;

  [DNTypeName('System.Reflection.LocalVariableInfo')]
  DNLocalVariableInfo = interface(DNObject)
  ['{43808E84-9C44-3EC1-829B-996AEC3977FE}']
  { getters & setters } 

    function get_LocalType: DNType;
    function get_LocalIndex: Int32;
    function get_IsPinned: Boolean;

  { methods } 

    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LocalType: DNType read get_LocalType;
    property LocalIndex: Int32 read get_LocalIndex;
    property IsPinned: Boolean read get_IsPinned;
  end;

  TDNLocalVariableInfo = class(TDNGenericImport<DNLocalVariableInfoClass, DNLocalVariableInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLocalBuilderClass = interface(DNLocalVariableInfoClass)
  ['{1E6FD73E-5339-551F-9145-FF231F7E3D51}']
  end;

  [DNTypeName('System.Reflection.Emit.LocalBuilder')]
  DNLocalBuilder = interface(DNLocalVariableInfo)
  ['{ED455782-DF7F-3957-B5B1-347465EBE920}']
  { getters & setters } 

    function get_IsPinned: Boolean;
    function get_LocalType: DNType;
    function get_LocalIndex: Int32;

  { methods } 

    procedure SetLocalSymInfo(name: string); overload;
    procedure SetLocalSymInfo(name: string; startOffset: Int32; endOffset: Int32); overload;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsPinned: Boolean read get_IsPinned;
    property LocalType: DNType read get_LocalType;
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalBuilder = class(TDNGenericImport<DNLocalBuilderClass, DNLocalBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNManifestResourceInfoClass = interface(DNObjectClass)
  ['{0CB97917-6E82-5ECD-AD57-BAFD23E93D4D}']
  { constructors } 

    {class} function init(containingAssembly: DNAssembly; containingFileName: string; resourceLocation: DNResourceLocation): DNManifestResourceInfo;

  end;

  [DNTypeName('System.Reflection.ManifestResourceInfo')]
  DNManifestResourceInfo = interface(DNObject)
  ['{EC7D5B4A-F900-3C32-9905-19130676DEAB}']
  { getters & setters } 

    function get_ReferencedAssembly: DNAssembly;
    function get_FileName: string;
    function get_ResourceLocation: DNResourceLocation;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReferencedAssembly: DNAssembly read get_ReferencedAssembly;
    property FileName: string read get_FileName;
    property ResourceLocation: DNResourceLocation read get_ResourceLocation;
  end;

  TDNManifestResourceInfo = class(TDNGenericImport<DNManifestResourceInfoClass, DNManifestResourceInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNMemberInfoClass = interface(DNObjectClass)
  ['{E60DC176-C807-5A96-852E-075BBE11ABDC}']
  end;

  [DNTypeName('System.Reflection.MemberInfo')]
  DNMemberInfo = interface(DNICustomAttributeProvider)
  ['{08401456-DCE9-38EC-875C-60C0F199E595}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMemberInfo = class(TDNGenericImport<DNMemberInfoClass, DNMemberInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNEventInfoClass = interface(DNMemberInfoClass)
  ['{14719B26-4F14-5333-B787-DC50BE701C30}']
  end;

  [DNTypeName('System.Reflection.EventInfo')]
  DNEventInfo = interface(DNMemberInfo)
  ['{B633E5A5-EB1F-3564-961A-870DF62C3D08}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNEventAttributes;
    function get_IsSpecialName: Boolean;
    function get_AddMethod: DNMethodInfo;
    function get_RemoveMethod: DNMethodInfo;
    function get_RaiseMethod: DNMethodInfo;
    function get_IsMulticast: Boolean;
    function get_EventHandlerType: DNType;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetOtherMethods: TArray<DNMethodInfo>; overload;
    function GetOtherMethods(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetAddMethod: DNMethodInfo; overload;
    function GetRemoveMethod: DNMethodInfo; overload;
    function GetRaiseMethod: DNMethodInfo; overload;
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNEventAttributes read get_Attributes;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property AddMethod: DNMethodInfo read get_AddMethod;
    property RemoveMethod: DNMethodInfo read get_RemoveMethod;
    property RaiseMethod: DNMethodInfo read get_RaiseMethod;
    property IsMulticast: Boolean read get_IsMulticast;
    property EventHandlerType: DNType read get_EventHandlerType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEventInfo = class(TDNGenericImport<DNEventInfoClass, DNEventInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNFieldInfoClass = interface(DNMemberInfoClass)
  ['{8086FAC5-4434-58B9-AECB-9B71AEC8C036}']
  { static methods } 

    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle): DNFieldInfo; overload;
    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle; declaringType: DNRuntimeTypeHandle): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.FieldInfo')]
  DNFieldInfo = interface(DNMemberInfo)
  ['{56245B2D-AF02-36DF-A85B-3AAF33AC5852}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNFieldAttributes;
    function get_FieldType: DNType;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNFieldAttributes read get_Attributes;
    property FieldType: DNType read get_FieldType;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldBuilderClass = interface(DNFieldInfoClass)
  ['{44A15B67-03B3-5362-B7EE-594AD67FA0BB}']
  end;

  [DNTypeName('System.Reflection.Emit.FieldBuilder')]
  DNFieldBuilder = interface(DNFieldInfo)
  ['{916477D3-6C15-31F7-B3D1-1CACDC66B7D3}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_MemberType: DNMemberTypes;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; val: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNFieldToken;
    procedure SetOffset(iOffset: Int32);
    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Module: DNModule read get_Module;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property FieldType: DNType read get_FieldType;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Attributes: DNFieldAttributes read get_Attributes;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBaseClass = interface(DNMemberInfoClass)
  ['{62836E70-3C24-56C6-9F2F-004234F7E8ED}']
  { static methods } 

    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle): DNMethodBase; overload;
    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle; declaringType: DNRuntimeTypeHandle): DNMethodBase; overload;
    {class} function GetCurrentMethod: DNMethodBase;

  end;

  [DNTypeName('System.Reflection.MethodBase')]
  DNMethodBase = interface(DNMemberInfo)
  ['{4364E7EA-B34D-3498-B5D3-7CBA9F97E4D2}']
  { getters & setters } 

    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBase = class(TDNGenericImport<DNMethodBaseClass, DNMethodBase>) end;

  //-------------namespace: System.Reflection----------------
  DNConstructorInfoClass = interface(DNMethodBaseClass)
  ['{541DE8A0-2CF5-5FA2-95D9-A62A74345A24}']
  { static fields getter & setter } 

   function __fakeFieldGet_ConstructorName: string;
   function __fakeFieldGet_TypeConstructorName: string;

  { static fields } 

    {class} property ConstructorName: string read __fakeFieldGet_ConstructorName;
    {class} property TypeConstructorName: string read __fakeFieldGet_TypeConstructorName;

  end;

  [DNTypeName('System.Reflection.ConstructorInfo')]
  DNConstructorInfo = interface(DNMethodBase)
  ['{1294AD8C-01F2-3713-B7A6-13800BFBF381}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorInfo = class(TDNGenericImport<DNConstructorInfoClass, DNConstructorInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNConstructorBuilderClass = interface(DNConstructorInfoClass)
  ['{44097D13-E61B-5555-A5B2-8884EFDA1597}']
  end;

  [DNTypeName('System.Reflection.Emit.ConstructorBuilder')]
  DNConstructorBuilder = interface(DNConstructorInfo)
  ['{61CB76ED-E7CA-3FCD-A9F9-14ED02CDC3E9}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_ReflectedType: DNType;
    function get_DeclaringType: DNType;
    function get_Name: string;
    function get_Attributes: DNMethodAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_CallingConvention: DNCallingConventions;
    function get_Signature: string;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function ToString: string;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNMethodToken;
    function DefineParameter(iSequence: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Module: DNModule read get_Module;
    property ReflectedType: DNType read get_ReflectedType;
    property DeclaringType: DNType read get_DeclaringType;
    property Name: string read get_Name;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property Signature: string read get_Signature;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorBuilder = class(TDNGenericImport<DNConstructorBuilderClass, DNConstructorBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodInfoClass = interface(DNMethodBaseClass)
  ['{4703725A-E17A-5E2D-AE77-BC13CF2DCB44}']
  end;

  [DNTypeName('System.Reflection.MethodInfo')]
  DNMethodInfo = interface(DNMethodBase)
  ['{8167F57D-C29D-33D6-BB24-90EFA1FC646B}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function GetBaseDefinition: DNMethodInfo;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnType: DNType read get_ReturnType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodInfo = class(TDNGenericImport<DNMethodInfoClass, DNMethodInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicMethodClass = interface(DNMethodInfoClass)
  ['{A29302D4-8F5E-575F-8183-B71441401235}']
  { constructors } 

    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; restrictedSkipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;

  end;

  [DNTypeName('System.Reflection.Emit.DynamicMethod')]
  DNDynamicMethod = interface(DNMethodInfo)
  ['{994FFB8B-8777-3F3D-BD34-5BA9B0F3FE1D}']
  { getters & setters } 

    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function ToString: string;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; parameterName: string): DNParameterBuilder;
    function GetDynamicILInfo: DNDynamicILInfo;
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNDynamicMethod = class(TDNGenericImport<DNDynamicMethodClass, DNDynamicMethod>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodBuilderClass = interface(DNMethodInfoClass)
  ['{AF196610-231A-575D-92A9-80842937BDEC}']
  end;

  [DNTypeName('System.Reflection.Emit.MethodBuilder')]
  DNMethodBuilder = interface(DNMethodInfo)
  ['{CFF7F9C8-5F9A-3782-9CAB-3CD510D4559C}']
  { getters & setters } 

    function get_Name: string;
    function get_Module: DNModule;
    function get_DeclaringType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_ReflectedType: DNType;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_Signature: string;
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetGenericMethodDefinition: DNMethodInfo;
    function GetGenericArguments: TArray<DNType>;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function GetToken: DNMethodToken;
    procedure SetParameters(parameterTypes: TArray<DNType>);
    procedure SetReturnType(returnType: DNType);
    procedure SetSignature(returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>);
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(size: Int32): DNILGenerator; overload;
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property DeclaringType: DNType read get_DeclaringType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReflectedType: DNType read get_ReflectedType;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property Signature: string read get_Signature;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBuilder = class(TDNGenericImport<DNMethodBuilderClass, DNMethodBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNPropertyInfoClass = interface(DNMemberInfoClass)
  ['{0F6836F6-D6A7-566A-94BF-6F91EF68F5E7}']
  end;

  [DNTypeName('System.Reflection.PropertyInfo')]
  DNPropertyInfo = interface(DNMemberInfo)
  ['{B886BDC5-E0A4-34B8-8BF1-D66119A997E8}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_IsSpecialName: Boolean;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetValue(obj: DNObject): DNObject; overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyInfo = class(TDNGenericImport<DNPropertyInfoClass, DNPropertyInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyBuilderClass = interface(DNPropertyInfoClass)
  ['{2C6ED3C2-C0D8-54EC-A635-15E215428E69}']
  end;

  [DNTypeName('System.Reflection.Emit.PropertyBuilder')]
  DNPropertyBuilder = interface(DNPropertyInfo)
  ['{5C209F8E-8C7B-3452-9DB8-AA0F86C81F80}']
  { getters & setters } 

    function get_PropertyToken: DNPropertyToken;
    function get_Module: DNModule;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MemberType: DNMemberTypes;
    function get_IsSpecialName: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    procedure SetConstant(defaultValue: DNObject);
    procedure SetGetMethod(mdBuilder: DNMethodBuilder);
    procedure SetSetMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetValue(obj: DNObject): DNObject; overload;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property PropertyToken: DNPropertyToken read get_PropertyToken;
    property Module: DNModule read get_Module;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyBuilder = class(TDNGenericImport<DNPropertyBuilderClass, DNPropertyBuilder>) end;

  //-------------namespace: System----------------
  DNTypeClass = interface(DNMemberInfoClass)
  ['{7A6C419A-C596-5874-AE2E-B62618924E69}']
  { static getter & setter } 

    {class} function get_DefaultBinder: DNBinder;

  { static fields getter & setter } 

   function __fakeFieldGet_Delimiter: Char;
   function __fakeFieldGet_EmptyTypes: TArray<DNType>;
   function __fakeFieldGet_Missing: DNObject;
   function __fakeFieldGet_FilterAttribute: DNMemberFilter;
   function __fakeFieldGet_FilterName: DNMemberFilter;
   function __fakeFieldGet_FilterNameIgnoreCase: DNMemberFilter;

  { static fields } 

    {class} property Delimiter: Char read __fakeFieldGet_Delimiter;
    {class} property EmptyTypes: TArray<DNType> read __fakeFieldGet_EmptyTypes;
    {class} property Missing: DNObject read __fakeFieldGet_Missing;
    {class} property FilterAttribute: DNMemberFilter read __fakeFieldGet_FilterAttribute;
    {class} property FilterName: DNMemberFilter read __fakeFieldGet_FilterName;
    {class} property FilterNameIgnoreCase: DNMemberFilter read __fakeFieldGet_FilterNameIgnoreCase;

  { static methods } 

    {class} function GetTypeFromHandle(handle: DNRuntimeTypeHandle): DNType;
    {class} function GetTypeHandle(o: DNObject): DNRuntimeTypeHandle;
    {class} function GetTypeArray(args: TArray<DNObject>): TArray<DNType>;
    {class} function GetTypeCode(&type: DNType): DNTypeCode;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string): DNType; overload;
    {class} function MakeGenericSignatureType(genericTypeDefinition: DNType; typeArguments: TArray<DNType>): DNType;
    {class} function MakeGenericMethodParameter(position: Int32): DNType;
    {class} function ReflectionOnlyGetType(typeName: string; throwIfNotFound: Boolean; ignoreCase: Boolean): DNType;
    {class} function GetType(typeName: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function GetType(typeName: string; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string; throwOnError: Boolean): DNType; overload;

  { static propertys } 

    {class} property DefaultBinder: DNBinder read get_DefaultBinder;
  end;

  [DNTypeName('System.Type')]
  DNType = interface(DNMemberInfo)
  ['{1CCD5586-1CC1-3FCD-A479-19CEA1B1EA33}']
  { getters & setters } 

    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_FullName: string;
    function get_Assembly: DNAssembly;
    function get_Module: DNModule;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_GUID: DNGuid;
    function get_BaseType: DNType;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean;
    function GetType: DNType; overload;
    function GetElementType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property FullName: string read get_FullName;
    property Assembly: DNAssembly read get_Assembly;
    property Module: DNModule read get_Module;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property GUID: DNGuid read get_GUID;
    property BaseType: DNType read get_BaseType;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNType = class(TDNGenericImport<DNTypeClass, DNType>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeInfoClass = interface(DNTypeClass)
  ['{3787D9DE-7CE8-577D-9CE8-12C6199D4044}']
  end;

  [DNTypeName('System.Reflection.TypeInfo')]
  DNTypeInfo = interface(DNType)
  ['{530BFD5A-6473-37A2-B8B7-767AAD68EA21}']
  { getters & setters } 

    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_FullName: string;
    function get_Assembly: DNAssembly;
    function get_Module: DNModule;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_GUID: DNGuid;
    function get_BaseType: DNType;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetType: DNType;
    function GetElementType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property FullName: string read get_FullName;
    property Assembly: DNAssembly read get_Assembly;
    property Module: DNModule read get_Module;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property GUID: DNGuid read get_GUID;
    property BaseType: DNType read get_BaseType;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeInfo = class(TDNGenericImport<DNTypeInfoClass, DNTypeInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEnumBuilderClass = interface(DNTypeInfoClass)
  ['{B300DE3F-C823-56B8-A039-1417F1B8CDF2}']
  end;

  [DNTypeName('System.Reflection.Emit.EnumBuilder')]
  DNEnumBuilder = interface(DNTypeInfo)
  ['{A95ABD70-8EC9-30D0-9BB3-493D40A69E45}']
  { getters & setters } 

    function get_TypeToken: DNTypeToken;
    function get_UnderlyingField: DNFieldBuilder;
    function get_Name: string;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_AssemblyQualifiedName: string;
    function get_Namespace: string;
    function get_BaseType: DNType;
    function get_IsByRefLike: Boolean;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_DeclaringMethod: DNMethodBase;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function DefineLiteral(literalName: string; literalValue: DNObject): DNFieldBuilder;
    function CreateTypeInfo: DNTypeInfo;
    function CreateType: DNType;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetElementType: DNType;
    function GetEnumUnderlyingType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumValues: DNArray;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property TypeToken: DNTypeToken read get_TypeToken;
    property UnderlyingField: DNFieldBuilder read get_UnderlyingField;
    property Name: string read get_Name;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property Namespace: string read get_Namespace;
    property BaseType: DNType read get_BaseType;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEnumBuilder = class(TDNGenericImport<DNEnumBuilderClass, DNEnumBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNGenericTypeParameterBuilderClass = interface(DNTypeInfoClass)
  ['{5D4E18BB-5514-53C8-A407-17C005FF0EFD}']
  end;

  [DNTypeName('System.Reflection.Emit.GenericTypeParameterBuilder')]
  DNGenericTypeParameterBuilder = interface(DNTypeInfo)
  ['{C995084F-A6D1-3BC0-B3AC-8040A427B403}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_IsByRefLike: Boolean;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_DeclaringMethod: DNMethodBase;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsSubclassOf(c: DNType): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetBaseTypeConstraint(baseTypeConstraint: DNType);
    procedure SetInterfaceConstraints(interfaceConstraints: TArray<DNType>);
    procedure SetGenericParameterAttributes(genericParameterAttributes: DNGenericParameterAttributes);
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNGenericTypeParameterBuilder = class(TDNGenericImport<DNGenericTypeParameterBuilderClass, DNGenericTypeParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeBuilderClass = interface(DNTypeInfoClass)
  ['{07487FF5-013D-5B98-A94C-5ECFA84B7C56}']
  { static methods } 

    {class} function GetMethod(&type: DNType; method: DNMethodInfo): DNMethodInfo; overload;
    {class} function GetConstructor(&type: DNType; &constructor: DNConstructorInfo): DNConstructorInfo; overload;
    {class} function GetField(&type: DNType; field: DNFieldInfo): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.Emit.TypeBuilder')]
  DNTypeBuilder = interface(DNTypeInfo)
  ['{3E75594F-A441-39D6-9858-11CBF4492126}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_IsByRefLike: Boolean;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_DeclaringMethod: DNMethodBase;
    function get_Size: Int32;
    function get_PackingSize: DNPackingSize;
    function get_TypeToken: DNTypeToken;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_IsCollectible: Boolean;
    function get_MetadataToken: Int32;

  { methods } 

    function DefineEvent(name: string; attributes: DNEventAttributes; eventtype: DNType): DNEventBuilder;
    function CreateTypeInfo: DNTypeInfo;
    function CreateType: DNType;
    procedure SetParent(parent: DNType);
    procedure AddInterfaceImplementation(interfaceType: DNType);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetElementType: DNType;
    function IsSubclassOf(c: DNType): Boolean;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    procedure DefineMethodOverride(methodInfoBody: DNMethodInfo; methodInfoDeclaration: DNMethodInfo);
    function DefineMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefineTypeInitializer: DNConstructorBuilder;
    function DefineDefaultConstructor(attributes: DNMethodAttributes): DNConstructorBuilder;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>): DNConstructorBuilder; overload;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>): DNConstructorBuilder; overload;
    function DefineNestedType(name: string): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; typeSize: Int32): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize; typeSize: Int32): DNTypeBuilder; overload;
    function DefineField(fieldName: string; &type: DNType; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineField(fieldName: string; &type: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function IsCreated: Boolean;
    function ToString: string;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property Size: Int32 read get_Size;
    property PackingSize: DNPackingSize read get_PackingSize;
    property TypeToken: DNTypeToken read get_TypeToken;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property IsCollectible: Boolean read get_IsCollectible;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeBuilder = class(TDNGenericImport<DNTypeBuilderClass, DNTypeBuilder>)
  public const
   UnspecifiedTypeSize = 0;
  end;

  //-------------namespace: System.Reflection----------------
  DNTypeDelegatorClass = interface(DNTypeInfoClass)
  ['{D1748DDC-4592-5131-9367-CD72EBD2019E}']
  { constructors } 

    {class} function init(delegatingType: DNType): DNTypeDelegator;

  end;

  [DNTypeName('System.Reflection.TypeDelegator')]
  DNTypeDelegator = interface(DNTypeInfo)
  ['{094770E4-31C0-3EC3-8FF6-6E581DB2AC07}']
  { getters & setters } 

    function get_GUID: DNGuid;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_Name: string;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsByRefLike: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsCollectible: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function IsAssignableTo(targetType: DNType): Boolean;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property GUID: DNGuid read get_GUID;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property Name: string read get_Name;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsCollectible: Boolean read get_IsCollectible;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNTypeDelegator = class(TDNGenericImport<DNTypeDelegatorClass, DNTypeDelegator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyExtensionsClass = interface(DNObjectClass)
  ['{1D2CA64B-4062-5478-9BFB-A6D558091F9C}']
  { static methods } 

    {class} function TryGetRawMetadata(assembly: DNAssembly; out blob: PByte; out length: Int32): Boolean;

  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyExtensions')]
  DNAssemblyExtensions = interface(DNObject)
  ['{1E8DF9F9-2800-3FEE-BE97-6582569C88F5}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssemblyExtensions = class(TDNGenericImport<DNAssemblyExtensionsClass, DNAssemblyExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBodyClass = interface(DNObjectClass)
  ['{897D58B6-2101-5C72-98E9-B20F952FCEB8}']
  end;

  [DNTypeName('System.Reflection.MethodBody')]
  DNMethodBody = interface(DNObject)
  ['{8CD16B0F-D6B1-341A-A979-A690892B907B}']
  { getters & setters } 

    function get_LocalSignatureMetadataToken: Int32;
    function get_LocalVariables: DNIList<DNLocalVariableInfo>;
    function get_MaxStackSize: Int32;
    function get_InitLocals: Boolean;
    function get_ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause>;

  { methods } 

    function GetILAsByteArray: TArray<Byte>;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LocalSignatureMetadataToken: Int32 read get_LocalSignatureMetadataToken;
    property LocalVariables: DNIList<DNLocalVariableInfo> read get_LocalVariables;
    property MaxStackSize: Int32 read get_MaxStackSize;
    property InitLocals: Boolean read get_InitLocals;
    property ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause> read get_ExceptionHandlingClauses;
  end;

  TDNMethodBody = class(TDNGenericImport<DNMethodBodyClass, DNMethodBody>) end;

  //-------------namespace: System.Reflection----------------
  DNMissingClass = interface(DNObjectClass)
  ['{D07BA695-F9B2-58A1-AB5E-E28F457CFE26}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNMissing;

  { static fields } 

    {class} property Value: DNMissing read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.Reflection.Missing')]
  DNMissing = interface(DNISerializable)
  ['{2F1A0CB6-264E-39BE-ACD2-0B7A0B83EA0E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: System.Reflection----------------
  DNModuleClass = interface(DNObjectClass)
  ['{F5893DBC-31E0-5C4A-80A3-32062BE3563A}']
  { static fields getter & setter } 

   function __fakeFieldGet_FilterTypeName: DNTypeFilter;
   function __fakeFieldGet_FilterTypeNameIgnoreCase: DNTypeFilter;

  { static fields } 

    {class} property FilterTypeName: DNTypeFilter read __fakeFieldGet_FilterTypeName;
    {class} property FilterTypeNameIgnoreCase: DNTypeFilter read __fakeFieldGet_FilterTypeNameIgnoreCase;

  end;

  [DNTypeName('System.Reflection.Module')]
  DNModule = interface(DNICustomAttributeProvider)
  ['{A34F6C9C-965A-339F-9D47-75C06D582D66}']
  { getters & setters } 

    function get_Assembly: DNAssembly;
    function get_FullyQualifiedName: string;
    function get_Name: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_ScopeName: string;
    function get_ModuleHandle: DNModuleHandle;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    function IsResource: Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetTypes: TArray<DNType>;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveString(metadataToken: Int32): string;
    function ResolveType(metadataToken: Int32): DNType; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property Assembly: DNAssembly read get_Assembly;
    property FullyQualifiedName: string read get_FullyQualifiedName;
    property Name: string read get_Name;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property ScopeName: string read get_ScopeName;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNModule = class(TDNGenericImport<DNModuleClass, DNModule>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNModuleBuilderClass = interface(DNModuleClass)
  ['{FD76D5EE-3246-5B4B-8ECC-57404FA043CE}']
  end;

  [DNTypeName('System.Reflection.Emit.ModuleBuilder')]
  DNModuleBuilder = interface(DNModule)
  ['{4F444CAB-2003-31DB-9B33-6E11502BE34D}']
  { getters & setters } 

    function get_FullyQualifiedName: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_ModuleHandle: DNModuleHandle;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function DefinePInvokeMethod(name: string; dllName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefinePInvokeMethod(name: string; dllName: string; entryName: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; nativeCallConv: DNCallingConvention; nativeCharSet: DNCharSet): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    procedure CreateGlobalFunctions;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function GetTypeToken(&type: DNType): DNTypeToken; overload;
    function GetTypeToken(name: string): DNTypeToken; overload;
    function GetMethodToken(method: DNMethodInfo): DNMethodToken;
    function GetArrayMethodToken(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodToken;
    function GetArrayMethod(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodInfo;
    function GetConstructorToken(con: DNConstructorInfo): DNMethodToken;
    function GetFieldToken(field: DNFieldInfo): DNFieldToken;
    function GetStringConstant(str: string): DNStringToken;
    function GetSignatureToken(sigHelper: DNSignatureHelper): DNSignatureToken; overload;
    function GetSignatureToken(sigBytes: TArray<Byte>; sigLength: Int32): DNSignatureToken; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    function IsTransient: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetTypes: TArray<DNType>;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    function IsResource: Boolean;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function DefineType(name: string): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packingSize: DNPackingSize; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packsize: DNPackingSize): DNTypeBuilder; overload;
    function DefineEnum(name: string; visibility: DNTypeAttributes; underlyingType: DNType): DNEnumBuilder;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveType(metadataToken: Int32): DNType; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property FullyQualifiedName: string read get_FullyQualifiedName;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property MetadataToken: Int32 read get_MetadataToken;
    property ScopeName: string read get_ScopeName;
    property Name: string read get_Name;
    property Assembly: DNAssembly read get_Assembly;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNModuleBuilder = class(TDNGenericImport<DNModuleBuilderClass, DNModuleBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterInfoClass = interface(DNObjectClass)
  ['{F4111F76-B899-5B1D-A367-BAD2E66C1185}']
  end;

  [DNTypeName('System.Reflection.ParameterInfo')]
  DNParameterInfo = interface(DNICustomAttributeProvider)
  ['{4E12B1AA-57D2-3682-B60A-01E9459F88B3}']
  { getters & setters } 

    function get_Attributes: DNParameterAttributes;
    function get_Member: DNMemberInfo;
    function get_Name: string;
    function get_ParameterType: DNType;
    function get_Position: Int32;
    function get_IsIn: Boolean;
    function get_IsLcid: Boolean;
    function get_IsOptional: Boolean;
    function get_IsOut: Boolean;
    function get_IsRetval: Boolean;
    function get_DefaultValue: DNObject;
    function get_RawDefaultValue: DNObject;
    function get_HasDefaultValue: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetRealObject(context: DNStreamingContext): DNObject;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Attributes: DNParameterAttributes read get_Attributes;
    property Member: DNMemberInfo read get_Member;
    property Name: string read get_Name;
    property ParameterType: DNType read get_ParameterType;
    property Position: Int32 read get_Position;
    property IsIn: Boolean read get_IsIn;
    property IsLcid: Boolean read get_IsLcid;
    property IsOptional: Boolean read get_IsOptional;
    property IsOut: Boolean read get_IsOut;
    property IsRetval: Boolean read get_IsRetval;
    property DefaultValue: DNObject read get_DefaultValue;
    property RawDefaultValue: DNObject read get_RawDefaultValue;
    property HasDefaultValue: Boolean read get_HasDefaultValue;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNParameterInfo = class(TDNGenericImport<DNParameterInfoClass, DNParameterInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNPointerClass = interface(DNObjectClass)
  ['{F4AEDDEE-08C8-5D00-8180-CADBBE832A8D}']
  { static methods } 

    {class} function Box(var ptr: DNVoid; &type: DNType): DNObject;
    {class} function Unbox(ptr: DNObject): DNVoid;

  end;

  [DNTypeName('System.Reflection.Pointer')]
  DNPointer = interface(DNISerializable)
  ['{5F026D1F-D765-3C85-8B63-DD6C1FC95A28}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPointer = class(TDNGenericImport<DNPointerClass, DNPointer>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionContextClass = interface(DNObjectClass)
  ['{7FC67A0B-DE57-5C22-8549-DCCAF0F2EA7C}']
  end;

  [DNTypeName('System.Reflection.ReflectionContext')]
  DNReflectionContext = interface(DNObject)
  ['{AB3A26EB-809F-3DE5-ACE8-CDBDBC317D8C}']
  { methods } 

    function MapAssembly(assembly: DNAssembly): DNAssembly;
    function MapType(&type: DNTypeInfo): DNTypeInfo;
    function GetTypeForObject(value: DNObject): DNTypeInfo;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNReflectionContext = class(TDNGenericImport<DNReflectionContextClass, DNReflectionContext>) end;

  //-------------namespace: System.Reflection----------------
  DNRuntimeReflectionExtensionsClass = interface(DNObjectClass)
  ['{8C8880F5-3255-5A6B-B987-2DBA942E982E}']
  { static methods } 

    {class} function GetRuntimeFields(&type: DNType): DNIEnumerable<DNFieldInfo>;
    {class} function GetRuntimeMethods(&type: DNType): DNIEnumerable<DNMethodInfo>;
    {class} function GetRuntimeProperties(&type: DNType): DNIEnumerable<DNPropertyInfo>;
    {class} function GetRuntimeEvents(&type: DNType): DNIEnumerable<DNEventInfo>;
    {class} function GetRuntimeField(&type: DNType; name: string): DNFieldInfo;
    {class} function GetRuntimeMethod(&type: DNType; name: string; parameters: TArray<DNType>): DNMethodInfo;
    {class} function GetRuntimeProperty(&type: DNType; name: string): DNPropertyInfo;
    {class} function GetRuntimeEvent(&type: DNType; name: string): DNEventInfo;
    {class} function GetRuntimeBaseDefinition(method: DNMethodInfo): DNMethodInfo;
    {class} function GetRuntimeInterfaceMap(typeInfo: DNTypeInfo; interfaceType: DNType): DNInterfaceMapping;
    {class} function GetMethodInfo(del: DNDelegate): DNMethodInfo;

  end;

  [DNTypeName('System.Reflection.RuntimeReflectionExtensions')]
  DNRuntimeReflectionExtensions = interface(DNObject)
  ['{E76F020A-52D8-3326-BD1C-E29F6772AE34}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRuntimeReflectionExtensions = class(TDNGenericImport<DNRuntimeReflectionExtensionsClass, DNRuntimeReflectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNStrongNameKeyPairClass = interface(DNObjectClass)
  ['{04862F50-94AE-55C8-BB8D-312CDDA9B249}']
  { constructors } 

    {class} function init(keyPairFile: DNFileStream): DNStrongNameKeyPair; overload;
    {class} function init(keyPairArray: TArray<Byte>): DNStrongNameKeyPair; overload;
    {class} function init(keyPairContainer: string): DNStrongNameKeyPair; overload;

  end;

  [DNTypeName('System.Reflection.StrongNameKeyPair')]
  DNStrongNameKeyPair = interface(DNIDeserializationCallback)
  ['{7B0CDDA8-1B9C-3257-9811-8809CE8709B5}']
  { getters & setters } 

    function get_PublicKey: TArray<Byte>;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PublicKey: TArray<Byte> read get_PublicKey;
  end;

  TDNStrongNameKeyPair = class(TDNGenericImport<DNStrongNameKeyPairClass, DNStrongNameKeyPair>) end;

  //-------------namespace: System.Resources----------------
  DNResourceManagerClass = interface(DNObjectClass)
  ['{30E498E0-C39F-5B75-BC19-B9C76B85F924}']
  { constructors } 

    {class} function init(baseName: string; assembly: DNAssembly): DNResourceManager; overload;
    {class} function init(baseName: string; assembly: DNAssembly; usingResourceSet: DNType): DNResourceManager; overload;
    {class} function init(resourceSource: DNType): DNResourceManager; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MagicNumber: Int32;
   function __fakeFieldGet_HeaderVersionNumber: Int32;

  { static fields } 

    {class} property MagicNumber: Int32 read __fakeFieldGet_MagicNumber;
    {class} property HeaderVersionNumber: Int32 read __fakeFieldGet_HeaderVersionNumber;

  { static methods } 

    {class} function CreateFileBasedResourceManager(baseName: string; resourceDir: string; usingResourceSet: DNType): DNResourceManager;

  end;

  [DNTypeName('System.Resources.ResourceManager')]
  DNResourceManager = interface(DNObject)
  ['{5ED5CFEB-87B5-3E0E-B991-67FC3FCFB0D9}']
  { getters & setters } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DNType;

  { methods } 

    procedure ReleaseAllResources;
    function GetResourceSet(culture: DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DNResourceSet;
    function GetString(name: string): string; overload;
    function GetString(name: string; culture: DNCultureInfo): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; culture: DNCultureInfo): DNObject; overload;
    function GetStream(name: string): DNUnmanagedMemoryStream; overload;
    function GetStream(name: string; culture: DNCultureInfo): DNUnmanagedMemoryStream; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseName: string read get_BaseName;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property ResourceSetType: DNType read get_ResourceSetType;
  end;

  TDNResourceManager = class(TDNGenericImport<DNResourceManagerClass, DNResourceManager>) end;

  //-------------namespace: System.Resources----------------
  DNResourceReaderClass = interface(DNObjectClass)
  ['{6861729B-995D-5BB8-8CFC-E3DCEE032993}']
  { constructors } 

    {class} function init(fileName: string): DNResourceReader; overload;
    {class} function init(stream: DNStream): DNResourceReader; overload;

  end;

  [DNTypeName('System.Resources.ResourceReader')]
  DNResourceReader = interface(DNIResourceReader)
  ['{95D30E3F-EB30-398F-8788-754C849EAD65}']
  { methods } 

    procedure GetResourceData(resourceName: string; out resourceType: string; out resourceData: TArray<Byte>);
    procedure Close;
    procedure Dispose;
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNResourceReader = class(TDNGenericImport<DNResourceReaderClass, DNResourceReader>) end;

  //-------------namespace: System.Resources----------------
  DNResourceSetClass = interface(DNObjectClass)
  ['{9B9D67FC-4540-5DD9-9AA1-F883D638550B}']
  { constructors } 

    {class} function init(fileName: string): DNResourceSet; overload;
    {class} function init(stream: DNStream): DNResourceSet; overload;
    {class} function init(reader: DNIResourceReader): DNResourceSet; overload;

  end;

  [DNTypeName('System.Resources.ResourceSet')]
  DNResourceSet = interface(DNIDisposable)
  ['{B1ED135F-0303-3900-9B73-CD7C1F52CF87}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function GetDefaultReader: DNType;
    function GetDefaultWriter: DNType;
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetString(name: string): string; overload;
    function GetString(name: string; ignoreCase: Boolean): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; ignoreCase: Boolean): DNObject; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNResourceSet = class(TDNGenericImport<DNResourceSetClass, DNResourceSet>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvCdeclClass = interface(DNObjectClass)
  ['{86E7C1B4-7EFE-59E0-B706-D50D9F755DCA}']
  { constructors } 

    {class} function init: DNCallConvCdecl;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvCdecl')]
  DNCallConvCdecl = interface(DNObject)
  ['{E1B85E2A-5994-38EC-8DDA-DBBD7FD8CEF6}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallConvCdecl = class(TDNGenericImport<DNCallConvCdeclClass, DNCallConvCdecl>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvFastcallClass = interface(DNObjectClass)
  ['{01A7364E-15C1-5C13-B58C-69A58761B37E}']
  { constructors } 

    {class} function init: DNCallConvFastcall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvFastcall')]
  DNCallConvFastcall = interface(DNObject)
  ['{AA85538B-4B8B-3C12-B42E-CB1FBAD820A5}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallConvFastcall = class(TDNGenericImport<DNCallConvFastcallClass, DNCallConvFastcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvStdcallClass = interface(DNObjectClass)
  ['{48DD5C26-E073-5B72-A59B-38AD486628BE}']
  { constructors } 

    {class} function init: DNCallConvStdcall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvStdcall')]
  DNCallConvStdcall = interface(DNObject)
  ['{5BD59D2C-D3DD-30A8-90AC-4195092FD002}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallConvStdcall = class(TDNGenericImport<DNCallConvStdcallClass, DNCallConvStdcall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallConvThiscallClass = interface(DNObjectClass)
  ['{6529B2B3-B262-5A44-A565-8EECFB5F3804}']
  { constructors } 

    {class} function init: DNCallConvThiscall;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallConvThiscall')]
  DNCallConvThiscall = interface(DNObject)
  ['{239454EB-56D2-3FB1-9386-2E2F96BEC01D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallConvThiscall = class(TDNGenericImport<DNCallConvThiscallClass, DNCallConvThiscall>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConditionalWeakTableClass<TKey, TValue> = interface(DNObjectClass)
  ['{79B25B85-BC0D-57B5-91E1-9BEF5A9F9965}']
  { constructors } 

    {class} function init: DNConditionalWeakTable<TKey, TValue>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2')]
  DNConditionalWeakTable<TKey, TValue> = interface(DNIEnumerable<DNKeyValuePair<TKey, TValue>>)
  ['{22C61B72-8DE9-374D-A6D3-E7F406C7F13B}']
  { methods } 

    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure Add(key: TKey; value: TValue);
    procedure AddOrUpdate(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    procedure Clear;
    function GetValue(key: TKey; createValueCallback: DNConditionalWeakTable_CreateValueCallback<TKey, TValue>): TValue;
    function GetOrCreateValue(key: TKey): TValue;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNConditionalWeakTable<TKey, TValue> = class(TDNGenericImport<DNConditionalWeakTableClass<TKey, TValue>, DNConditionalWeakTable<TKey, TValue>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNContractHelperClass = interface(DNObjectClass)
  ['{6537D1AF-99DC-5326-8830-828F12E2E115}']
  { static methods } 

    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;
    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);

  end;

  [DNTypeName('System.Runtime.CompilerServices.ContractHelper')]
  DNContractHelper = interface(DNObject)
  ['{F18342EE-D8E5-331D-B3FA-930D61AE31DD}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNContractHelper = class(TDNGenericImport<DNContractHelperClass, DNContractHelper>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFormattableStringFactoryClass = interface(DNObjectClass)
  ['{10AA0CE3-B680-5270-84A1-72A30CA3EC9D}']
  { static methods } 

    {class} function Create(format: string; arguments: TArray<DNObject>): DNFormattableString;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FormattableStringFactory')]
  DNFormattableStringFactory = interface(DNObject)
  ['{C760E6F4-959F-3BCB-9158-D3A1E5F56274}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNFormattableStringFactory = class(TDNGenericImport<DNFormattableStringFactoryClass, DNFormattableStringFactory>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsConstClass = interface(DNObjectClass)
  ['{572D0DD7-70EF-5BE9-B242-57B1BFE6BC21}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsConst')]
  DNIsConst = interface(DNObject)
  ['{3B26D0E3-342C-3435-BF6C-9641FDD80B31}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNIsConst = class(TDNGenericImport<DNIsConstClass, DNIsConst>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsExternalInitClass = interface(DNObjectClass)
  ['{BFA43829-1FD4-577C-96D0-8679DDC34F12}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsExternalInit')]
  DNIsExternalInit = interface(DNObject)
  ['{95949B77-6EC4-354B-941E-1200FD8A9E7B}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNIsExternalInit = class(TDNGenericImport<DNIsExternalInitClass, DNIsExternalInit>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsVolatileClass = interface(DNObjectClass)
  ['{F1AC8DAD-3095-50AE-8E64-C5A0A204B4A8}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsVolatile')]
  DNIsVolatile = interface(DNObject)
  ['{24E57989-70F6-333B-9631-AEE26037D9F5}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNIsVolatile = class(TDNGenericImport<DNIsVolatileClass, DNIsVolatile>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeFeatureClass = interface(DNObjectClass)
  ['{9E021821-2FE7-53DD-89EE-7DD7511748D9}']
  { static getter & setter } 

    {class} function get_IsDynamicCodeSupported: Boolean;
    {class} function get_IsDynamicCodeCompiled: Boolean;

  { static methods } 

    {class} function IsSupported(feature: string): Boolean;

  { static propertys } 

    {class} property IsDynamicCodeSupported: Boolean read get_IsDynamicCodeSupported;
    {class} property IsDynamicCodeCompiled: Boolean read get_IsDynamicCodeCompiled;
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeFeature')]
  DNRuntimeFeature = interface(DNObject)
  ['{6122484F-6114-38D0-A8F4-9A453272821A}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRuntimeFeature = class(TDNGenericImport<DNRuntimeFeatureClass, DNRuntimeFeature>)
  public const
   PortablePdb = 'PortablePdb';
   DefaultImplementationsOfInterfaces = 'DefaultImplementationsOfInterfaces';
   UnmanagedSignatureCallingConvention = 'UnmanagedSignatureCallingConvention';
   CovariantReturnsOfClasses = 'CovariantReturnsOfClasses';
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpersClass = interface(DNObjectClass)
  ['{44222991-02C3-55AE-8B4C-C018B2FE13F8}']
  { static getter & setter } 

    {class} function get_OffsetToStringData: Int32;

  { static methods } 

    {class} procedure InitializeArray(&array: DNArray; fldHandle: DNRuntimeFieldHandle);
    {class} function GetObjectValue(obj: DNObject): DNObject;
    {class} procedure RunClassConstructor(&type: DNRuntimeTypeHandle);
    {class} procedure RunModuleConstructor(module: DNModuleHandle);
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle); overload;
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle; instantiation: TArray<DNRuntimeTypeHandle>); overload;
    {class} procedure PrepareDelegate(d: DNDelegate);
    {class} function GetHashCode(o: DNObject): Int32; overload;
    {class} function Equals(o1: DNObject; o2: DNObject): Boolean; overload;
    {class} procedure EnsureSufficientExecutionStack;
    {class} function TryEnsureSufficientExecutionStack: Boolean;
    {class} function AllocateTypeAssociatedMemory(&type: DNType; size: Int32): IntPtr;
    {class} function GetUninitializedObject(&type: DNType): DNObject;
    {class} procedure ExecuteCodeWithGuaranteedCleanup(code: DNRuntimeHelpers_TryCode; backoutCode: DNRuntimeHelpers_CleanupCode; userData: DNObject);
    {class} procedure PrepareContractedDelegate(d: DNDelegate);
    {class} procedure ProbeForSufficientStack;
    {class} procedure PrepareConstrainedRegions;
    {class} procedure PrepareConstrainedRegionsNoOP;

  { static propertys } 

    {class} property OffsetToStringData: Int32 read get_OffsetToStringData;
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers')]
  DNRuntimeHelpers = interface(DNObject)
  ['{AC741829-E36E-314D-A76C-6A87D4D86CEF}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNRuntimeHelpers = class(TDNGenericImport<DNRuntimeHelpersClass, DNRuntimeHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStrongBoxClass<T> = interface(DNObjectClass)
  ['{E6576FA2-C64D-5ED0-8A8A-C5E3A7836F7E}']
  { constructors } 

    {class} function init: DNStrongBox<T>; overload;
    {class} function init(value: T): DNStrongBox<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StrongBox`1')]
  DNStrongBox<T> = interface(DNIStrongBox)
  ['{76E19FA0-2656-364A-9F3D-27CAA7210CDC}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStrongBox<T> = class(TDNGenericImport<DNStrongBoxClass<T>, DNStrongBox<T>>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNCriticalFinalizerObjectClass = interface(DNObjectClass)
  ['{9DA9838A-B541-5186-AEB9-CC002720ECAB}']
  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.CriticalFinalizerObject')]
  DNCriticalFinalizerObject = interface(DNObject)
  ['{85405FF4-0D5A-3AE4-814C-4451D3F471D0}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCriticalFinalizerObject = class(TDNGenericImport<DNCriticalFinalizerObjectClass, DNCriticalFinalizerObject>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCriticalHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{D301019C-6219-5A68-ADD6-DC923AE86179}']
  end;

  [DNTypeName('System.Runtime.InteropServices.CriticalHandle')]
  DNCriticalHandle = interface(DNCriticalFinalizerObject)
  ['{822B0055-75E8-3E7D-AAD8-A2552BA900A6}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNCriticalHandle = class(TDNGenericImport<DNCriticalHandleClass, DNCriticalHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{F5AE4EBF-039D-5340-9B5C-0A4D1041EC5D}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid')]
  DNCriticalHandleMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{4169595E-4E42-3671-ADB9-EC1E86CF8C48}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleMinusOneIsInvalidClass, DNCriticalHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleZeroOrMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{D47CC919-F072-5E21-9F74-D90F2EF016D8}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid')]
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{89E85417-32C4-3291-9D7D-9D55E4B14F83}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleZeroOrMinusOneIsInvalidClass, DNCriticalHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{F8F7FDEF-4659-55D4-9049-CE9D106E3B9F}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeHandle')]
  DNSafeHandle = interface(DNCriticalFinalizerObject)
  ['{460F397E-DE0B-35F1-A588-809CBB6E5A90}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNSafeHandle = class(TDNGenericImport<DNSafeHandleClass, DNSafeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{CBF44736-BFFE-579A-BE6F-B449B20C7DD8}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid')]
  DNSafeHandleMinusOneIsInvalid = interface(DNSafeHandle)
  ['{AFADB3E5-4B68-377D-8DFF-07225B6D2DB6}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleMinusOneIsInvalidClass, DNSafeHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleZeroOrMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{CB42B96A-2B84-5466-9299-EC50669ABDB3}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid')]
  DNSafeHandleZeroOrMinusOneIsInvalid = interface(DNSafeHandle)
  ['{A95FF64A-53E1-3D03-B2FC-43C33F316178}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleZeroOrMinusOneIsInvalidClass, DNSafeHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeFileHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{EB6C51FC-5761-5032-A241-6D2A55A9363F}']
  { constructors } 

    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeFileHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeFileHandle')]
  DNSafeFileHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{DC0262E9-556B-3631-B931-8C33103762A5}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeFileHandle = class(TDNGenericImport<DNSafeFileHandleClass, DNSafeFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeWaitHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{F3137B9A-69A5-5020-8001-AEFA5A52A734}']
  { constructors } 

    {class} function init(existingHandle: IntPtr; ownsHandle: Boolean): DNSafeWaitHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeWaitHandle')]
  DNSafeWaitHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{6E4C94E8-7602-3E87-99A3-B9E1FC613694}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeWaitHandle = class(TDNGenericImport<DNSafeWaitHandleClass, DNSafeWaitHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeBufferClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{6C041728-1D6A-50E6-BAD4-5E2BD79C8828}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeBuffer')]
  DNSafeBuffer = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{54F21F4C-1C53-3E6B-98F9-675398506B7B}']
  { getters & setters } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Initialize(numBytes: UInt64); overload;
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    procedure AcquirePointer(out pointer: PByte);
    procedure ReleasePointer;
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeBuffer = class(TDNGenericImport<DNSafeBufferClass, DNSafeBuffer>) end;

  //-------------namespace: System.Runtime----------------
  DNMemoryFailPointClass = interface(DNCriticalFinalizerObjectClass)
  ['{A0A3F89F-CD51-5709-93A8-C1F62487798D}']
  { constructors } 

    {class} function init(sizeInMegabytes: Int32): DNMemoryFailPoint;

  end;

  [DNTypeName('System.Runtime.MemoryFailPoint')]
  DNMemoryFailPoint = interface(DNCriticalFinalizerObject)
  ['{1DE7897F-8EB9-3F99-8E34-D4EBECF3F2EA}']
  { methods } 

    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMemoryFailPoint = class(TDNGenericImport<DNMemoryFailPointClass, DNMemoryFailPoint>) end;

  //-------------namespace: System.Threading----------------
  DNThreadClass = interface(DNCriticalFinalizerObjectClass)
  ['{2570FC28-3B21-5BF4-90E7-588E417A7ED9}']
  { static getter & setter } 

    {class} function get_CurrentPrincipal: DNIPrincipal;
    {class} procedure set_CurrentPrincipal(value: DNIPrincipal);
    {class} function get_CurrentThread: DNThread;

  { constructors } 

    {class} function init(start: DNThreadStart): DNThread; overload;
    {class} function init(start: DNThreadStart; maxStackSize: Int32): DNThread; overload;
    {class} function init(start: DNParameterizedThreadStart): DNThread; overload;
    {class} function init(start: DNParameterizedThreadStart; maxStackSize: Int32): DNThread; overload;

  { static methods } 

    {class} procedure EndCriticalRegion;
    {class} procedure BeginThreadAffinity;
    {class} procedure EndThreadAffinity;
    {class} function AllocateDataSlot: DNLocalDataStoreSlot;
    {class} function AllocateNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} function GetNamedDataSlot(name: string): DNLocalDataStoreSlot;
    {class} procedure FreeNamedDataSlot(name: string);
    {class} function GetData(slot: DNLocalDataStoreSlot): DNObject;
    {class} procedure SetData(slot: DNLocalDataStoreSlot; data: DNObject);
    {class} function GetDomain: DNAppDomain;
    {class} function GetDomainID: Int32;
    {class} procedure MemoryBarrier;
    {class} procedure Sleep(timeout: DNTimeSpan); overload;
    {class} function VolatileRead(out address: Byte): Byte; overload;
    {class} function VolatileRead(out address: Double): Double; overload;
    {class} function VolatileRead(out address: Int16): Int16; overload;
    {class} function VolatileRead(out address: Int32): Int32; overload;
    {class} function VolatileRead(out address: Int64): Int64; overload;
    {class} function VolatileRead(out address: IntPtr): IntPtr; overload;
    {class} function VolatileRead(out address: DNObject): DNObject; overload;
    {class} function VolatileRead(out address: SByte): SByte; overload;
    {class} function VolatileRead(out address: Single): Single; overload;
    {class} function VolatileRead(out address: UInt16): UInt16; overload;
    {class} function VolatileRead(out address: UInt32): UInt32; overload;
    {class} function VolatileRead(out address: UInt64): UInt64; overload;
    {class} function VolatileRead(out address: UIntPtr): UIntPtr; overload;
    {class} procedure VolatileWrite(out address: Byte; value: Byte); overload;
    {class} procedure VolatileWrite(out address: Double; value: Double); overload;
    {class} procedure VolatileWrite(out address: Int16; value: Int16); overload;
    {class} procedure VolatileWrite(out address: Int32; value: Int32); overload;
    {class} procedure VolatileWrite(out address: Int64; value: Int64); overload;
    {class} procedure VolatileWrite(out address: IntPtr; value: IntPtr); overload;
    {class} procedure VolatileWrite(out address: DNObject; value: DNObject); overload;
    {class} procedure VolatileWrite(out address: SByte; value: SByte); overload;
    {class} procedure VolatileWrite(out address: Single; value: Single); overload;
    {class} procedure VolatileWrite(out address: UInt16; value: UInt16); overload;
    {class} procedure VolatileWrite(out address: UInt32; value: UInt32); overload;
    {class} procedure VolatileWrite(out address: UInt64; value: UInt64); overload;
    {class} procedure VolatileWrite(out address: UIntPtr; value: UIntPtr); overload;
    {class} procedure Sleep(millisecondsTimeout: Int32); overload;
    {class} procedure SpinWait(iterations: Int32);
    {class} function Yield: Boolean;
    {class} function GetCurrentProcessorId: Int32;
    {class} procedure ResetAbort;
    {class} procedure BeginCriticalRegion;

  { static propertys } 

    {class} property CurrentPrincipal: DNIPrincipal read get_CurrentPrincipal write set_CurrentPrincipal;
    {class} property CurrentThread: DNThread read get_CurrentThread;
  end;

  [DNTypeName('System.Threading.Thread')]
  DNThread = interface(DNCriticalFinalizerObject)
  ['{33AF4405-3C3C-3645-BD94-3B3E53109188}']
  { getters & setters } 

    function get_ManagedThreadId: Int32;
    function get_IsAlive: Boolean;
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_IsThreadPoolThread: Boolean;
    function get_Priority: DNThreadPriority;
    procedure set_Priority(value: DNThreadPriority);
    function get_ThreadState: DNThreadState;
    function get_CurrentCulture: DNCultureInfo;
    procedure set_CurrentCulture(value: DNCultureInfo);
    function get_CurrentUICulture: DNCultureInfo;
    procedure set_CurrentUICulture(value: DNCultureInfo);
    function get_ExecutionContext: DNExecutionContext;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ApartmentState: DNApartmentState;
    procedure set_ApartmentState(value: DNApartmentState);

  { methods } 

    procedure SetApartmentState(state: DNApartmentState);
    function TrySetApartmentState(state: DNApartmentState): Boolean;
    function GetCompressedStack: DNCompressedStack;
    procedure SetCompressedStack(stack: DNCompressedStack);
    function GetHashCode: Int32;
    procedure Join; overload;
    function Join(timeout: DNTimeSpan): Boolean; overload;
    procedure Start(parameter: DNObject); overload;
    procedure Start; overload;
    function GetApartmentState: DNApartmentState;
    procedure DisableComObjectEagerCleanup;
    procedure Interrupt;
    function Join(millisecondsTimeout: Int32): Boolean; overload;
    procedure &Abort; overload;
    procedure &Abort(stateInfo: DNObject); overload;
    procedure Suspend;
    procedure Resume;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;

  { propertys } 

    property ManagedThreadId: Int32 read get_ManagedThreadId;
    property IsAlive: Boolean read get_IsAlive;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    property IsThreadPoolThread: Boolean read get_IsThreadPoolThread;
    property Priority: DNThreadPriority read get_Priority write set_Priority;
    property ThreadState: DNThreadState read get_ThreadState;
    property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
    property ExecutionContext: DNExecutionContext read get_ExecutionContext;
    property Name: string read get_Name write set_Name;
    property ApartmentState: DNApartmentState read get_ApartmentState write set_ApartmentState;
  end;

  TDNThread = class(TDNGenericImport<DNThreadClass, DNThread>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNExceptionDispatchInfoClass = interface(DNObjectClass)
  ['{383BB0A2-95F4-5D53-A983-F24BF1AC0522}']
  { static methods } 

    {class} function Capture(source: DNException): DNExceptionDispatchInfo;
    {class} procedure Throw(source: DNException); overload;
    {class} function SetCurrentStackTrace(source: DNException): DNException;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.ExceptionDispatchInfo')]
  DNExceptionDispatchInfo = interface(DNObject)
  ['{E0BEC45F-3B24-34C2-9640-0A6EFF5186FB}']
  { getters & setters } 

    function get_SourceException: DNException;

  { methods } 

    procedure Throw; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SourceException: DNException read get_SourceException;
  end;

  TDNExceptionDispatchInfo = class(TDNGenericImport<DNExceptionDispatchInfoClass, DNExceptionDispatchInfo>) end;

  //-------------namespace: System.Runtime----------------
  DNGCSettingsClass = interface(DNObjectClass)
  ['{F18918A7-A3BF-5D9F-A6B4-F7A2616DA452}']
  { static getter & setter } 

    {class} function get_IsServerGC: Boolean;
    {class} function get_LatencyMode: DNGCLatencyMode;
    {class} procedure set_LatencyMode(value: DNGCLatencyMode);
    {class} function get_LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode;
    {class} procedure set_LargeObjectHeapCompactionMode(value: DNGCLargeObjectHeapCompactionMode);

  { static propertys } 

    {class} property IsServerGC: Boolean read get_IsServerGC;
    {class} property LatencyMode: DNGCLatencyMode read get_LatencyMode write set_LatencyMode;
    {class} property LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode read get_LargeObjectHeapCompactionMode write set_LargeObjectHeapCompactionMode;
  end;

  [DNTypeName('System.Runtime.GCSettings')]
  DNGCSettings = interface(DNObject)
  ['{28DA56AB-AD86-3732-80AD-24A487A43707}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNGCSettings = class(TDNGenericImport<DNGCSettingsClass, DNGCSettings>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBStrWrapperClass = interface(DNObjectClass)
  ['{7C5FF8B7-C15F-533A-90C3-24AD050117BE}']
  { constructors } 

    {class} function init(value: string): DNBStrWrapper; overload;
    {class} function init(value: DNObject): DNBStrWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.BStrWrapper')]
  DNBStrWrapper = interface(DNObject)
  ['{D514E716-9ABF-33F4-9F54-7AEA4409CA82}']
  { getters & setters } 

    function get_WrappedObject: string;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedObject: string read get_WrappedObject;
  end;

  TDNBStrWrapper = class(TDNGenericImport<DNBStrWrapperClass, DNBStrWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCollectionsMarshalClass = interface(DNObjectClass)
  ['{DA0B948F-6962-5F5A-A501-D6083856126B}']
  end;

  [DNTypeName('System.Runtime.InteropServices.CollectionsMarshal')]
  DNCollectionsMarshal = interface(DNObject)
  ['{B4BDB56D-8D78-3D77-B4FD-B50A073531AA}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCollectionsMarshal = class(TDNGenericImport<DNCollectionsMarshalClass, DNCollectionsMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventsHelperClass = interface(DNObjectClass)
  ['{AAB5FF64-2E7F-53C8-9873-98E63ADA8468}']
  { static methods } 

    {class} procedure Combine(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate);
    {class} function Remove(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate): DNDelegate;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComEventsHelper')]
  DNComEventsHelper = interface(DNObject)
  ['{6506D944-0542-3E07-A257-ECE690B1A6C1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComEventsHelper = class(TDNGenericImport<DNComEventsHelperClass, DNComEventsHelper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComWrappersClass = interface(DNObjectClass)
  ['{7EDE932A-AAD6-5ABC-B8DD-89C175EEB621}']
  { static methods } 

    {class} procedure RegisterForTrackerSupport(instance: DNComWrappers);
    {class} procedure RegisterForMarshalling(instance: DNComWrappers);

  end;

  [DNTypeName('System.Runtime.InteropServices.ComWrappers')]
  DNComWrappers = interface(DNObject)
  ['{6A8C2E20-B709-3B17-86D0-0BE332A9E16D}']
  { methods } 

    function GetOrCreateComInterfaceForObject(instance: DNObject; flags: DNCreateComInterfaceFlags): IntPtr;
    function GetOrCreateObjectForComInstance(externalComObject: IntPtr; flags: DNCreateObjectFlags): DNObject;
    function GetOrRegisterObjectForComInstance(externalComObject: IntPtr; flags: DNCreateObjectFlags; wrapper: DNObject): DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComWrappers = class(TDNGenericImport<DNComWrappersClass, DNComWrappers>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCurrencyWrapperClass = interface(DNObjectClass)
  ['{3EB189FD-4516-5669-89BF-D79A43933D53}']
  { constructors } 

    {class} function init(obj: DNDecimal): DNCurrencyWrapper; overload;
    {class} function init(obj: DNObject): DNCurrencyWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.CurrencyWrapper')]
  DNCurrencyWrapper = interface(DNObject)
  ['{BFC872BB-A0A0-32D8-A13F-89A1FA72B41B}']
  { getters & setters } 

    function get_WrappedObject: DNDecimal;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedObject: DNDecimal read get_WrappedObject;
  end;

  TDNCurrencyWrapper = class(TDNGenericImport<DNCurrencyWrapperClass, DNCurrencyWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispatchWrapperClass = interface(DNObjectClass)
  ['{E09BD23D-B5E5-59E9-9172-28E39054885C}']
  { constructors } 

    {class} function init(obj: DNObject): DNDispatchWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispatchWrapper')]
  DNDispatchWrapper = interface(DNObject)
  ['{383E1EBB-7FDA-31D8-A590-283EE221B9A4}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNDispatchWrapper = class(TDNGenericImport<DNDispatchWrapperClass, DNDispatchWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNErrorWrapperClass = interface(DNObjectClass)
  ['{9B77BB82-4D80-5E82-BFDC-41F733E49B8A}']
  { constructors } 

    {class} function init(errorCode: Int32): DNErrorWrapper; overload;
    {class} function init(errorCode: DNObject): DNErrorWrapper; overload;
    {class} function init(e: DNException): DNErrorWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ErrorWrapper')]
  DNErrorWrapper = interface(DNObject)
  ['{67D121B2-74BD-3675-9517-7C358C9FE705}']
  { getters & setters } 

    function get_ErrorCode: Int32;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
  end;

  TDNErrorWrapper = class(TDNGenericImport<DNErrorWrapperClass, DNErrorWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalClass = interface(DNObjectClass)
  ['{9DCCC4BA-E246-51CC-94E7-E5F38B3F6295}']
  { static fields getter & setter } 

   function __fakeFieldGet_SystemDefaultCharSize: Int32;
   function __fakeFieldGet_SystemMaxDBCSCharSize: Int32;

  { static fields } 

    {class} property SystemDefaultCharSize: Int32 read __fakeFieldGet_SystemDefaultCharSize;
    {class} property SystemMaxDBCSCharSize: Int32 read __fakeFieldGet_SystemMaxDBCSCharSize;

  { static methods } 

    {class} function GetExceptionForHR(errorCode: Int32): DNException; overload;
    {class} function GetExceptionForHR(errorCode: Int32; errorInfo: IntPtr): DNException; overload;
    {class} procedure ThrowExceptionForHR(errorCode: Int32); overload;
    {class} procedure ThrowExceptionForHR(errorCode: Int32; errorInfo: IntPtr); overload;
    {class} function SecureStringToBSTR(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemUnicode(s: DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocUnicode(s: DNSecureString): IntPtr;
    {class} function StringToHGlobalAnsi(s: string): IntPtr;
    {class} function StringToHGlobalUni(s: string): IntPtr;
    {class} function StringToCoTaskMemUni(s: string): IntPtr;
    {class} function StringToCoTaskMemUTF8(s: string): IntPtr;
    {class} function StringToCoTaskMemAnsi(s: string): IntPtr;
    {class} function GenerateGuidForType(&type: DNType): DNGuid;
    {class} function GenerateProgIdForType(&type: DNType): string;
    {class} function GetDelegateForFunctionPointer(ptr: IntPtr; t: DNType): DNDelegate; overload;
    {class} function GetFunctionPointerForDelegate(d: DNDelegate): IntPtr; overload;
    {class} function GetHRForLastWin32Error: Int32;
    {class} procedure ZeroFreeBSTR(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemAnsi(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemUnicode(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemUTF8(s: IntPtr);
    {class} procedure ZeroFreeGlobalAllocAnsi(s: IntPtr);
    {class} procedure ZeroFreeGlobalAllocUnicode(s: IntPtr);
    {class} function PtrToStringAuto(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringAuto(ptr: IntPtr): string; overload;
    {class} function StringToHGlobalAuto(s: string): IntPtr;
    {class} function StringToCoTaskMemAuto(s: string): IntPtr;
    {class} function GetStartComSlot(t: DNType): Int32;
    {class} function GetEndComSlot(t: DNType): Int32;
    {class} function BindToMoniker(monikerName: string): DNObject;
    {class} procedure ChangeWrapperHandleStrength(otp: DNObject; fIsWeak: Boolean);
    {class} function AllocHGlobal(cb: Int32): IntPtr; overload;
    {class} function PtrToStringAnsi(ptr: IntPtr): string; overload;
    {class} function PtrToStringAnsi(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUTF8(ptr: IntPtr): string; overload;
    {class} function PtrToStringUTF8(ptr: IntPtr; byteLen: Int32): string; overload;
    {class} function SizeOf(structure: DNObject): Int32; overload;
    {class} function SizeOf(t: DNType): Int32; overload;
    {class} function UnsafeAddrOfPinnedArrayElement(arr: DNArray; index: Int32): IntPtr; overload;
    {class} procedure Copy(source: TArray<Int32>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Char>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int16>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int64>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Single>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Double>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Byte>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<IntPtr>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int32>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Char>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int16>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int64>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Single>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Double>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Byte>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<IntPtr>; startIndex: Int32; length: Int32); overload;
    {class} function ReadByte(ptr: IntPtr; ofs: Int32): Byte; overload;
    {class} function ReadByte(ptr: IntPtr): Byte; overload;
    {class} function ReadInt16(ptr: IntPtr; ofs: Int32): Int16; overload;
    {class} function ReadInt16(ptr: IntPtr): Int16; overload;
    {class} function ReadInt32(ptr: IntPtr; ofs: Int32): Int32; overload;
    {class} function ReadInt32(ptr: IntPtr): Int32; overload;
    {class} function ReadIntPtr(ptr: DNObject; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr): IntPtr; overload;
    {class} function ReadInt64(ptr: IntPtr; ofs: Int32): Int64; overload;
    {class} function ReadInt64(ptr: IntPtr): Int64; overload;
    {class} procedure WriteByte(ptr: IntPtr; ofs: Int32; val: Byte); overload;
    {class} procedure WriteByte(ptr: IntPtr; val: Byte); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16([in][out]ptr: DNObject; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Char); overload;
    {class} procedure WriteInt32(ptr: IntPtr; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt32(ptr: IntPtr; val: Int32); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr(ptr: DNObject; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; val: IntPtr); overload;
    {class} procedure WriteInt64(ptr: IntPtr; ofs: Int32; val: Int64); overload;
    {class} procedure WriteInt64(ptr: IntPtr; val: Int64); overload;
    {class} procedure Prelink(m: DNMethodInfo);
    {class} procedure PrelinkAll(c: DNType);
    {class} function PtrToStructure(ptr: IntPtr; structureType: DNType): DNObject; overload;
    {class} procedure PtrToStructure(ptr: IntPtr; structure: DNObject); overload;
    {class} function OffsetOf(t: DNType; fieldName: string): IntPtr; overload;
    {class} function ReadByte(ptr: DNObject; ofs: Int32): Byte; overload;
    {class} function ReadInt16(ptr: DNObject; ofs: Int32): Int16; overload;
    {class} function ReadInt32(ptr: DNObject; ofs: Int32): Int32; overload;
    {class} function ReadInt64([in]ptr: DNObject; ofs: Int32): Int64; overload;
    {class} procedure WriteByte(ptr: DNObject; ofs: Int32; val: Byte); overload;
    {class} procedure WriteInt16(ptr: DNObject; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt32(ptr: DNObject; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt64(ptr: DNObject; ofs: Int32; val: Int64); overload;
    {class} function GetLastWin32Error: Int32;
    {class} function GetExceptionPointers: IntPtr;
    {class} function GetExceptionCode: Int32;
    {class} procedure StructureToPtr(structure: DNObject; ptr: IntPtr; fDeleteOld: Boolean); overload;
    {class} procedure DestroyStructure(ptr: IntPtr; structuretype: DNType); overload;
    {class} function GetHINSTANCE(m: DNModule): IntPtr;
    {class} function AllocHGlobal(cb: IntPtr): IntPtr; overload;
    {class} procedure FreeHGlobal(hglobal: IntPtr);
    {class} function ReAllocHGlobal(pv: IntPtr; cb: IntPtr): IntPtr;
    {class} function GetHRForException(e: DNException): Int32;
    {class} function GetTypeInfoName(typeInfo: DNITypeInfo): string;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType;
    {class} function GetIUnknownForObject(o: DNObject): IntPtr;
    {class} function GetIDispatchForObject(o: DNObject): IntPtr;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType): IntPtr; overload;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType; mode: DNCustomQueryInterfaceMode): IntPtr; overload;
    {class} function GetObjectForIUnknown(pUnk: IntPtr): DNObject;
    {class} function GetUniqueObjectForIUnknown(unknown: IntPtr): DNObject;
    {class} function GetTypedObjectForIUnknown(pUnk: IntPtr; t: DNType): DNObject;
    {class} function CreateAggregatedObject(pOuter: IntPtr; o: DNObject): IntPtr; overload;
    {class} procedure CleanupUnusedObjectsInCurrentContext;
    {class} function AreComObjectsAvailableForCleanup: Boolean;
    {class} function IsComObject(o: DNObject): Boolean;
    {class} function AllocCoTaskMem(cb: Int32): IntPtr;
    {class} procedure FreeCoTaskMem(ptr: IntPtr);
    {class} function ReAllocCoTaskMem(pv: IntPtr; cb: Int32): IntPtr;
    {class} procedure FreeBSTR(ptr: IntPtr);
    {class} function StringToBSTR(s: string): IntPtr;
    {class} function PtrToStringBSTR(ptr: IntPtr): string;
    {class} function ReleaseComObject(o: DNObject): Int32;
    {class} function FinalReleaseComObject(o: DNObject): Int32;
    {class} function GetComObjectData(obj: DNObject; key: DNObject): DNObject;
    {class} function SetComObjectData(obj: DNObject; key: DNObject; data: DNObject): Boolean;
    {class} function CreateWrapperOfType(o: DNObject; t: DNType): DNObject; overload;
    {class} function IsTypeVisibleFromCom(t: DNType): Boolean;
    {class} function QueryInterface(pUnk: IntPtr; out iid: DNGuid; out ppv: IntPtr): Int32;
    {class} function AddRef(pUnk: IntPtr): Int32;
    {class} function Release(pUnk: IntPtr): Int32;
    {class} procedure GetNativeVariantForObject(obj: DNObject; pDstNativeVariant: IntPtr); overload;
    {class} function GetObjectForNativeVariant(pSrcNativeVariant: IntPtr): DNObject;
    {class} function GetObjectsForNativeVariants(aSrcNativeVariant: IntPtr; cVars: Int32): TArray<DNObject>;

  end;

  [DNTypeName('System.Runtime.InteropServices.Marshal')]
  DNMarshal = interface(DNObject)
  ['{3DC988A9-6AA4-363B-940B-BF0F63597653}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMarshal = class(TDNGenericImport<DNMarshalClass, DNMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMemoryMarshalClass = interface(DNObjectClass)
  ['{5C887293-D0CD-5351-A738-8E3E97538D88}']
  { static methods } 

    {class} function TryGetString(memory: DNReadOnlyMemory<Char>; out text: string; out start: Int32; out length: Int32): Boolean;

  end;

  [DNTypeName('System.Runtime.InteropServices.MemoryMarshal')]
  DNMemoryMarshal = interface(DNObject)
  ['{7C381273-17F6-3024-8D9B-916321F106AA}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMemoryMarshal = class(TDNGenericImport<DNMemoryMarshalClass, DNMemoryMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNNativeLibraryClass = interface(DNObjectClass)
  ['{A1755697-0496-5CB3-AF54-E8E36254EB4D}']
  { static methods } 

    {class} function Load(libraryPath: string): IntPtr; overload;
    {class} function TryLoad(libraryPath: string; out handle: IntPtr): Boolean; overload;
    {class} function Load(libraryName: string; assembly: DNAssembly; searchPath: DNNullable<DNDllImportSearchPath>): IntPtr; overload;
    {class} function TryLoad(libraryName: string; assembly: DNAssembly; searchPath: DNNullable<DNDllImportSearchPath>; out handle: IntPtr): Boolean; overload;
    {class} procedure Free(handle: IntPtr);
    {class} function GetExport(handle: IntPtr; name: string): IntPtr;
    {class} function TryGetExport(handle: IntPtr; name: string; out address: IntPtr): Boolean;
    {class} procedure SetDllImportResolver(assembly: DNAssembly; resolver: DNDllImportResolver);

  end;

  [DNTypeName('System.Runtime.InteropServices.NativeLibrary')]
  DNNativeLibrary = interface(DNObject)
  ['{AEEC7856-C057-30F1-B725-17E89829175A}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNNativeLibrary = class(TDNGenericImport<DNNativeLibraryClass, DNNativeLibrary>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnknownWrapperClass = interface(DNObjectClass)
  ['{52C1AF08-F22D-5095-BB49-D40774D106D4}']
  { constructors } 

    {class} function init(obj: DNObject): DNUnknownWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnknownWrapper')]
  DNUnknownWrapper = interface(DNObject)
  ['{F38D1E4A-856F-32A8-8201-B91F1DA487F6}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNUnknownWrapper = class(TDNGenericImport<DNUnknownWrapperClass, DNUnknownWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNVariantWrapperClass = interface(DNObjectClass)
  ['{E5C11ED0-766E-52AC-AC90-AE0E9858F8B9}']
  { constructors } 

    {class} function init(obj: DNObject): DNVariantWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.VariantWrapper')]
  DNVariantWrapper = interface(DNObject)
  ['{3A8AD567-30C4-35D5-B9BC-BB3AF70C0F33}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNVariantWrapper = class(TDNGenericImport<DNVariantWrapperClass, DNVariantWrapper>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNArmBaseClass = interface(DNObjectClass)
  ['{78872993-4276-592A-BCB0-339B9EEA02A4}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingZeroCount(value: Int32): Int32; overload;
    {class} function LeadingZeroCount(value: UInt32): Int32; overload;
    {class} function ReverseElementBits(value: Int32): Int32; overload;
    {class} function ReverseElementBits(value: UInt32): UInt32; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.ArmBase')]
  DNArmBase = interface(DNObject)
  ['{F2A6F9E4-6A62-389C-AF03-091F9A785561}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNArmBase = class(TDNGenericImport<DNArmBaseClass, DNArmBase>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNArmBase_Arm64Class = interface(DNObjectClass)
  ['{F8E5C933-FA91-5BBE-9F4A-4019CDB4FDD3}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingSignCount(value: Int32): Int32; overload;
    {class} function LeadingSignCount(value: Int64): Int32; overload;
    {class} function LeadingZeroCount(value: Int64): Int32; overload;
    {class} function LeadingZeroCount(value: UInt64): Int32; overload;
    {class} function ReverseElementBits(value: Int64): Int64; overload;
    {class} function ReverseElementBits(value: UInt64): UInt64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.ArmBase+Arm64')]
  DNArmBase_Arm64 = interface(DNObject)
  ['{7BD3FCAB-9861-3D6B-9B59-4CE50B968470}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNArmBase_Arm64 = class(TDNGenericImport<DNArmBase_Arm64Class, DNArmBase_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNAdvSimd_Arm64Class = interface(DNObjectClass)
  ['{4D07539A-B86A-54FD-BE62-E53CA6E17DD4}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function TransposeOdd(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function TransposeOdd(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function TransposeOdd(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function TransposeOdd(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function TransposeOdd(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function TransposeOdd(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function TransposeOdd(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function TransposeOdd(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnzipEven(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function UnzipEven(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function UnzipEven(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function UnzipEven(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function UnzipEven(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function UnzipEven(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function UnzipEven(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function UnzipEven(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnzipEven(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function UnzipEven(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnzipEven(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnzipEven(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnzipEven(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnzipEven(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function UnzipEven(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnzipEven(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnzipEven(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnzipOdd(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function UnzipOdd(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function UnzipOdd(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function UnzipOdd(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function UnzipOdd(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function UnzipOdd(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function UnzipOdd(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function UnzipOdd(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnzipOdd(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function UnzipOdd(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnzipOdd(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnzipOdd(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnzipOdd(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnzipOdd(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function UnzipOdd(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnzipOdd(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnzipOdd(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function VectorTableLookup(table: DNVector128<Byte>; byteIndexes: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function VectorTableLookup(table: DNVector128<SByte>; byteIndexes: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function VectorTableLookupExtension(defaultValues: DNVector128<Byte>; table: DNVector128<Byte>; byteIndexes: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function VectorTableLookupExtension(defaultValues: DNVector128<SByte>; table: DNVector128<SByte>; byteIndexes: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ZipHigh(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function ZipHigh(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ZipHigh(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ZipHigh(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ZipHigh(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ZipHigh(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function ZipHigh(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ZipHigh(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function ZipHigh(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function ZipHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ZipHigh(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ZipHigh(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ZipHigh(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ZipHigh(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ZipHigh(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ZipHigh(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ZipHigh(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ZipLow(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function ZipLow(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ZipLow(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ZipLow(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ZipLow(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ZipLow(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function ZipLow(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ZipLow(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function ZipLow(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function ZipLow(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ZipLow(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ZipLow(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ZipLow(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ZipLow(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ZipLow(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ZipLow(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ZipLow(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Sqrt(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Sqrt(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} procedure StorePair(address: PByte; value1: DNVector64<Byte>; value2: DNVector64<Byte>); overload;
    {class} procedure StorePair(address: PDouble; value1: DNVector64<Double>; value2: DNVector64<Double>); overload;
    {class} procedure StorePair(address: PInt16; value1: DNVector64<Int16>; value2: DNVector64<Int16>); overload;
    {class} procedure StorePair(address: PInt32; value1: DNVector64<Int32>; value2: DNVector64<Int32>); overload;
    {class} procedure StorePair(address: PInt64; value1: DNVector64<Int64>; value2: DNVector64<Int64>); overload;
    {class} procedure StorePair(address: PSByte; value1: DNVector64<SByte>; value2: DNVector64<SByte>); overload;
    {class} procedure StorePair(address: PSingle; value1: DNVector64<Single>; value2: DNVector64<Single>); overload;
    {class} procedure StorePair(address: PUInt16; value1: DNVector64<UInt16>; value2: DNVector64<UInt16>); overload;
    {class} procedure StorePair(address: PUInt32; value1: DNVector64<UInt32>; value2: DNVector64<UInt32>); overload;
    {class} procedure StorePair(address: PUInt64; value1: DNVector64<UInt64>; value2: DNVector64<UInt64>); overload;
    {class} procedure StorePair(address: PByte; value1: DNVector128<Byte>; value2: DNVector128<Byte>); overload;
    {class} procedure StorePair(address: PDouble; value1: DNVector128<Double>; value2: DNVector128<Double>); overload;
    {class} procedure StorePair(address: PInt16; value1: DNVector128<Int16>; value2: DNVector128<Int16>); overload;
    {class} procedure StorePair(address: PInt32; value1: DNVector128<Int32>; value2: DNVector128<Int32>); overload;
    {class} procedure StorePair(address: PInt64; value1: DNVector128<Int64>; value2: DNVector128<Int64>); overload;
    {class} procedure StorePair(address: PSByte; value1: DNVector128<SByte>; value2: DNVector128<SByte>); overload;
    {class} procedure StorePair(address: PSingle; value1: DNVector128<Single>; value2: DNVector128<Single>); overload;
    {class} procedure StorePair(address: PUInt16; value1: DNVector128<UInt16>; value2: DNVector128<UInt16>); overload;
    {class} procedure StorePair(address: PUInt32; value1: DNVector128<UInt32>; value2: DNVector128<UInt32>); overload;
    {class} procedure StorePair(address: PUInt64; value1: DNVector128<UInt64>; value2: DNVector128<UInt64>); overload;
    {class} procedure StorePairNonTemporal(address: PByte; value1: DNVector64<Byte>; value2: DNVector64<Byte>); overload;
    {class} procedure StorePairNonTemporal(address: PDouble; value1: DNVector64<Double>; value2: DNVector64<Double>); overload;
    {class} procedure StorePairNonTemporal(address: PInt16; value1: DNVector64<Int16>; value2: DNVector64<Int16>); overload;
    {class} procedure StorePairNonTemporal(address: PInt32; value1: DNVector64<Int32>; value2: DNVector64<Int32>); overload;
    {class} procedure StorePairNonTemporal(address: PInt64; value1: DNVector64<Int64>; value2: DNVector64<Int64>); overload;
    {class} procedure StorePairNonTemporal(address: PSByte; value1: DNVector64<SByte>; value2: DNVector64<SByte>); overload;
    {class} procedure StorePairNonTemporal(address: PSingle; value1: DNVector64<Single>; value2: DNVector64<Single>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt16; value1: DNVector64<UInt16>; value2: DNVector64<UInt16>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt32; value1: DNVector64<UInt32>; value2: DNVector64<UInt32>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt64; value1: DNVector64<UInt64>; value2: DNVector64<UInt64>); overload;
    {class} procedure StorePairNonTemporal(address: PByte; value1: DNVector128<Byte>; value2: DNVector128<Byte>); overload;
    {class} procedure StorePairNonTemporal(address: PDouble; value1: DNVector128<Double>; value2: DNVector128<Double>); overload;
    {class} procedure StorePairNonTemporal(address: PInt16; value1: DNVector128<Int16>; value2: DNVector128<Int16>); overload;
    {class} procedure StorePairNonTemporal(address: PInt32; value1: DNVector128<Int32>; value2: DNVector128<Int32>); overload;
    {class} procedure StorePairNonTemporal(address: PInt64; value1: DNVector128<Int64>; value2: DNVector128<Int64>); overload;
    {class} procedure StorePairNonTemporal(address: PSByte; value1: DNVector128<SByte>; value2: DNVector128<SByte>); overload;
    {class} procedure StorePairNonTemporal(address: PSingle; value1: DNVector128<Single>; value2: DNVector128<Single>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt16; value1: DNVector128<UInt16>; value2: DNVector128<UInt16>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt32; value1: DNVector128<UInt32>; value2: DNVector128<UInt32>); overload;
    {class} procedure StorePairNonTemporal(address: PUInt64; value1: DNVector128<UInt64>; value2: DNVector128<UInt64>); overload;
    {class} procedure StorePairScalar(address: PInt32; value1: DNVector64<Int32>; value2: DNVector64<Int32>); overload;
    {class} procedure StorePairScalar(address: PSingle; value1: DNVector64<Single>; value2: DNVector64<Single>); overload;
    {class} procedure StorePairScalar(address: PUInt32; value1: DNVector64<UInt32>; value2: DNVector64<UInt32>); overload;
    {class} procedure StorePairScalarNonTemporal(address: PInt32; value1: DNVector64<Int32>; value2: DNVector64<Int32>); overload;
    {class} procedure StorePairScalarNonTemporal(address: PSingle; value1: DNVector64<Single>; value2: DNVector64<Single>); overload;
    {class} procedure StorePairScalarNonTemporal(address: PUInt32; value1: DNVector64<UInt32>; value2: DNVector64<UInt32>); overload;
    {class} function Subtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function SubtractSaturateScalar(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ReverseElementBits(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function ReverseElementBits(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ReverseElementBits(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function ReverseElementBits(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function TransposeEven(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function TransposeEven(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function TransposeEven(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function TransposeEven(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function TransposeEven(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function TransposeEven(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function TransposeEven(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function TransposeEven(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function TransposeEven(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function TransposeEven(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function TransposeEven(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function TransposeEven(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function TransposeEven(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function TransposeEven(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function TransposeEven(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function TransposeEven(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function TransposeEven(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function TransposeOdd(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function TransposeOdd(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function TransposeOdd(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function TransposeOdd(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function TransposeOdd(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function TransposeOdd(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function TransposeOdd(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function TransposeOdd(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function TransposeOdd(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyRoundedDoublingSaturateHighScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyScalarBySelectedScalar(left: DNVector64<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector64<Double>;
    {class} function Negate(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Negate(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function NegateSaturate(value: DNVector128<Int64>): DNVector128<Int64>;
    {class} function NegateSaturateScalar(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function NegateSaturateScalar(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function NegateSaturateScalar(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function NegateSaturateScalar(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function NegateScalar(value: DNVector64<Int64>): DNVector64<Int64>;
    {class} function ReciprocalEstimate(value: DNVector128<Double>): DNVector128<Double>;
    {class} function ReciprocalEstimateScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function ReciprocalEstimateScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalExponentScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function ReciprocalExponentScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalSquareRootEstimate(value: DNVector128<Double>): DNVector128<Double>;
    {class} function ReciprocalSquareRootEstimateScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function ReciprocalSquareRootEstimateScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalSquareRootStep(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function ReciprocalSquareRootStepScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function ReciprocalSquareRootStepScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalStep(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function ReciprocalStepScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function ReciprocalStepScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundAwayFromZero(value: DNVector128<Double>): DNVector128<Double>;
    {class} function RoundToNearest(value: DNVector128<Double>): DNVector128<Double>;
    {class} function RoundToNegativeInfinity(value: DNVector128<Double>): DNVector128<Double>;
    {class} function RoundToPositiveInfinity(value: DNVector128<Double>): DNVector128<Double>;
    {class} function RoundToZero(value: DNVector128<Double>): DNVector128<Double>;
    {class} function ShiftArithmeticRoundedSaturateScalar(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmeticRoundedSaturateScalar(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmeticRoundedSaturateScalar(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftArithmeticSaturateScalar(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmeticSaturateScalar(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmeticSaturateScalar(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturateUnsignedScalar(value: DNVector64<Int16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturateUnsignedScalar(value: DNVector64<Int32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturateUnsignedScalar(value: DNVector64<SByte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateScalar(value: DNVector64<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateScalar(value: DNVector64<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedScalar(value: DNVector64<Int16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedScalar(value: DNVector64<Int32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedScalar(value: DNVector64<Int64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateScalar(value: DNVector64<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateScalar(value: DNVector64<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(value: DNVector64<Int16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(value: DNVector64<Int32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedScalar(value: DNVector64<Int64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function Sqrt(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxPairwise(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function MaxPairwise(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MaxPairwise(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MaxPairwise(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MaxPairwise(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function MaxPairwise(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MaxPairwise(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MaxPairwise(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MaxPairwiseScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxPairwiseScalar(value: DNVector128<Double>): DNVector64<Double>; overload;
    {class} function MaxScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MaxScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Min(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MinAcross(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MinAcross(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MinAcross(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MinAcross(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MinAcross(value: DNVector128<Byte>): DNVector64<Byte>; overload;
    {class} function MinAcross(value: DNVector128<Int16>): DNVector64<Int16>; overload;
    {class} function MinAcross(value: DNVector128<Int32>): DNVector64<Int32>; overload;
    {class} function MinAcross(value: DNVector128<SByte>): DNVector64<SByte>; overload;
    {class} function MinAcross(value: DNVector128<Single>): DNVector64<Single>; overload;
    {class} function MinAcross(value: DNVector128<UInt16>): DNVector64<UInt16>; overload;
    {class} function MinAcross(value: DNVector128<UInt32>): DNVector64<UInt32>; overload;
    {class} function MinNumber(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MinNumberAcross(value: DNVector128<Single>): DNVector64<Single>;
    {class} function MinNumberPairwise(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinNumberPairwise(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MinNumberPairwise(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MinNumberPairwiseScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinNumberPairwiseScalar(value: DNVector128<Double>): DNVector64<Double>; overload;
    {class} function MinPairwise(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function MinPairwise(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MinPairwise(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MinPairwise(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MinPairwise(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function MinPairwise(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MinPairwise(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MinPairwise(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MinPairwiseScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinPairwiseScalar(value: DNVector128<Double>): DNVector64<Double>; overload;
    {class} function MinScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MinScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Multiply(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MultiplyByScalar(left: DNVector128<Double>; right: DNVector64<Double>): DNVector128<Double>;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector128<Double>;
    {class} function MultiplyDoublingSaturateHighScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingSaturateHighScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingScalarBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningAndAddSaturateScalar(addend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningAndAddSaturateScalar(addend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningAndSubtractSaturateScalar(minuend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningAndSubtractSaturateScalar(minuend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateScalarBySelectedScalar(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateScalarBySelectedScalar(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateScalarBySelectedScalar(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateScalarBySelectedScalar(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(addend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(addend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(addend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndAddSaturate(addend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(minuend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(minuend: DNVector64<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(minuend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyDoublingWideningScalarBySelectedScalarAndSubtractSaturate(minuend: DNVector64<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int64>; overload;
    {class} function MultiplyExtended(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MultiplyExtended(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyExtended(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyExtendedByScalar(left: DNVector128<Double>; right: DNVector64<Double>): DNVector128<Double>;
    {class} function MultiplyExtendedBySelectedScalar(left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyExtendedBySelectedScalar(left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyExtendedBySelectedScalar(left: DNVector128<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector128<Double>; overload;
    {class} function MultiplyExtendedBySelectedScalar(left: DNVector128<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function MultiplyExtendedBySelectedScalar(left: DNVector128<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function MultiplyExtendedScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MultiplyExtendedScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MultiplyExtendedScalarBySelectedScalar(left: DNVector64<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector64<Double>; overload;
    {class} function MultiplyExtendedScalarBySelectedScalar(left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyExtendedScalarBySelectedScalar(left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyRoundedDoublingSaturateHighScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<Int64>): DNVector64<Int32>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<Int16>): DNVector64<SByte>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<UInt32>): DNVector64<UInt16>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<UInt64>): DNVector64<UInt32>; overload;
    {class} function ExtractNarrowingSaturateUnsignedScalar(value: DNVector64<Int16>): DNVector64<Byte>; overload;
    {class} function ExtractNarrowingSaturateUnsignedScalar(value: DNVector64<Int32>): DNVector64<UInt16>; overload;
    {class} function ExtractNarrowingSaturateUnsignedScalar(value: DNVector64<Int64>): DNVector64<UInt32>; overload;
    {class} function Floor(value: DNVector128<Double>): DNVector128<Double>;
    {class} function FusedMultiplyAdd(addend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function FusedMultiplyAddByScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplyAddByScalar(addend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector64<Double>): DNVector128<Double>; overload;
    {class} function FusedMultiplyAddByScalar(addend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector64<Single>): DNVector128<Single>; overload;
    {class} function FusedMultiplyAddBySelectedScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplyAddBySelectedScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplyAddBySelectedScalar(addend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector128<Double>; overload;
    {class} function FusedMultiplyAddBySelectedScalar(addend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function FusedMultiplyAddBySelectedScalar(addend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function FusedMultiplyAddScalarBySelectedScalar(addend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector64<Double>; overload;
    {class} function FusedMultiplyAddScalarBySelectedScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplyAddScalarBySelectedScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtract(minuend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function FusedMultiplySubtractByScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtractByScalar(minuend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector64<Double>): DNVector128<Double>; overload;
    {class} function FusedMultiplySubtractByScalar(minuend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector64<Single>): DNVector128<Single>; overload;
    {class} function FusedMultiplySubtractBySelectedScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtractBySelectedScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtractBySelectedScalar(minuend: DNVector128<Double>; left: DNVector128<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector128<Double>; overload;
    {class} function FusedMultiplySubtractBySelectedScalar(minuend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function FusedMultiplySubtractBySelectedScalar(minuend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function FusedMultiplySubtractScalarBySelectedScalar(minuend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector128<Double>; rightIndex: Byte): DNVector64<Double>; overload;
    {class} function FusedMultiplySubtractScalarBySelectedScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtractScalarBySelectedScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Byte>; resultIndex: Byte; value: DNVector64<Byte>; valueIndex: Byte): DNVector64<Byte>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Byte>; resultIndex: Byte; value: DNVector128<Byte>; valueIndex: Byte): DNVector64<Byte>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Int16>; resultIndex: Byte; value: DNVector64<Int16>; valueIndex: Byte): DNVector64<Int16>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Int16>; resultIndex: Byte; value: DNVector128<Int16>; valueIndex: Byte): DNVector64<Int16>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Int32>; resultIndex: Byte; value: DNVector64<Int32>; valueIndex: Byte): DNVector64<Int32>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Int32>; resultIndex: Byte; value: DNVector128<Int32>; valueIndex: Byte): DNVector64<Int32>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<SByte>; resultIndex: Byte; value: DNVector64<SByte>; valueIndex: Byte): DNVector64<SByte>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<SByte>; resultIndex: Byte; value: DNVector128<SByte>; valueIndex: Byte): DNVector64<SByte>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Single>; resultIndex: Byte; value: DNVector64<Single>; valueIndex: Byte): DNVector64<Single>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<Single>; resultIndex: Byte; value: DNVector128<Single>; valueIndex: Byte): DNVector64<Single>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<UInt16>; resultIndex: Byte; value: DNVector64<UInt16>; valueIndex: Byte): DNVector64<UInt16>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<UInt16>; resultIndex: Byte; value: DNVector128<UInt16>; valueIndex: Byte): DNVector64<UInt16>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<UInt32>; resultIndex: Byte; value: DNVector64<UInt32>; valueIndex: Byte): DNVector64<UInt32>; overload;
    {class} function InsertSelectedScalar(result: DNVector64<UInt32>; resultIndex: Byte; value: DNVector128<UInt32>; valueIndex: Byte): DNVector64<UInt32>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Byte>; resultIndex: Byte; value: DNVector64<Byte>; valueIndex: Byte): DNVector128<Byte>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Byte>; resultIndex: Byte; value: DNVector128<Byte>; valueIndex: Byte): DNVector128<Byte>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Double>; resultIndex: Byte; value: DNVector128<Double>; valueIndex: Byte): DNVector128<Double>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Int16>; resultIndex: Byte; value: DNVector64<Int16>; valueIndex: Byte): DNVector128<Int16>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Int16>; resultIndex: Byte; value: DNVector128<Int16>; valueIndex: Byte): DNVector128<Int16>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Int32>; resultIndex: Byte; value: DNVector64<Int32>; valueIndex: Byte): DNVector128<Int32>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Int32>; resultIndex: Byte; value: DNVector128<Int32>; valueIndex: Byte): DNVector128<Int32>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Int64>; resultIndex: Byte; value: DNVector128<Int64>; valueIndex: Byte): DNVector128<Int64>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<SByte>; resultIndex: Byte; value: DNVector64<SByte>; valueIndex: Byte): DNVector128<SByte>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<SByte>; resultIndex: Byte; value: DNVector128<SByte>; valueIndex: Byte): DNVector128<SByte>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Single>; resultIndex: Byte; value: DNVector64<Single>; valueIndex: Byte): DNVector128<Single>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<Single>; resultIndex: Byte; value: DNVector128<Single>; valueIndex: Byte): DNVector128<Single>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<UInt16>; resultIndex: Byte; value: DNVector64<UInt16>; valueIndex: Byte): DNVector128<UInt16>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<UInt16>; resultIndex: Byte; value: DNVector128<UInt16>; valueIndex: Byte): DNVector128<UInt16>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<UInt32>; resultIndex: Byte; value: DNVector64<UInt32>; valueIndex: Byte): DNVector128<UInt32>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<UInt32>; resultIndex: Byte; value: DNVector128<UInt32>; valueIndex: Byte): DNVector128<UInt32>; overload;
    {class} function InsertSelectedScalar(result: DNVector128<UInt64>; resultIndex: Byte; value: DNVector128<UInt64>; valueIndex: Byte): DNVector128<UInt64>; overload;
    {class} function LoadAndReplicateToVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadAndReplicateToVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAndReplicateToVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function Max(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MaxAcross(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MaxAcross(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MaxAcross(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MaxAcross(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MaxAcross(value: DNVector128<Byte>): DNVector64<Byte>; overload;
    {class} function MaxAcross(value: DNVector128<Int16>): DNVector64<Int16>; overload;
    {class} function MaxAcross(value: DNVector128<Int32>): DNVector64<Int32>; overload;
    {class} function MaxAcross(value: DNVector128<SByte>): DNVector64<SByte>; overload;
    {class} function MaxAcross(value: DNVector128<Single>): DNVector64<Single>; overload;
    {class} function MaxAcross(value: DNVector128<UInt16>): DNVector64<UInt16>; overload;
    {class} function MaxAcross(value: DNVector128<UInt32>): DNVector64<UInt32>; overload;
    {class} function MaxNumber(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MaxNumberAcross(value: DNVector128<Single>): DNVector64<Single>;
    {class} function MaxNumberPairwise(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxNumberPairwise(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MaxNumberPairwise(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MaxNumberPairwiseScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxNumberPairwiseScalar(value: DNVector128<Double>): DNVector64<Double>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt32>; right: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt64>; right: DNVector64<Int64>): DNVector64<UInt64>; overload;
    {class} function Ceiling(value: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareEqual(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareEqual(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareEqualScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareEqualScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareEqualScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareEqualScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareGreaterThan(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareGreaterThanScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareGreaterThanScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareGreaterThanScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareGreaterThanScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function CompareLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareLessThan(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareLessThan(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareLessThanScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareLessThanScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareLessThanScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareLessThanScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareLessThanOrEqualScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareLessThanOrEqualScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareLessThanOrEqualScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareLessThanOrEqualScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function CompareTest(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareTest(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareTest(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function CompareTestScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CompareTestScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function CompareTestScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function ConvertToDouble(value: DNVector64<Single>): DNVector128<Double>; overload;
    {class} function ConvertToDouble(value: DNVector128<Int64>): DNVector128<Double>; overload;
    {class} function ConvertToDouble(value: DNVector128<UInt64>): DNVector128<Double>; overload;
    {class} function ConvertToDoubleScalar(value: DNVector64<Int64>): DNVector64<Double>; overload;
    {class} function ConvertToDoubleScalar(value: DNVector64<UInt64>): DNVector64<Double>; overload;
    {class} function ConvertToDoubleUpper(value: DNVector128<Single>): DNVector128<Double>;
    {class} function ConvertToInt64RoundAwayFromZero(value: DNVector128<Double>): DNVector128<Int64>;
    {class} function ConvertToInt64RoundAwayFromZeroScalar(value: DNVector64<Double>): DNVector64<Int64>;
    {class} function ConvertToInt64RoundToEven(value: DNVector128<Double>): DNVector128<Int64>;
    {class} function ConvertToInt64RoundToEvenScalar(value: DNVector64<Double>): DNVector64<Int64>;
    {class} function ConvertToInt64RoundToNegativeInfinity(value: DNVector128<Double>): DNVector128<Int64>;
    {class} function ConvertToInt64RoundToNegativeInfinityScalar(value: DNVector64<Double>): DNVector64<Int64>;
    {class} function ConvertToInt64RoundToPositiveInfinity(value: DNVector128<Double>): DNVector128<Int64>;
    {class} function ConvertToInt64RoundToPositiveInfinityScalar(value: DNVector64<Double>): DNVector64<Int64>;
    {class} function ConvertToInt64RoundToZero(value: DNVector128<Double>): DNVector128<Int64>;
    {class} function ConvertToInt64RoundToZeroScalar(value: DNVector64<Double>): DNVector64<Int64>;
    {class} function ConvertToSingleLower(value: DNVector128<Double>): DNVector64<Single>;
    {class} function ConvertToSingleRoundToOddLower(value: DNVector128<Double>): DNVector64<Single>;
    {class} function ConvertToSingleRoundToOddUpper(lower: DNVector64<Single>; value: DNVector128<Double>): DNVector128<Single>;
    {class} function ConvertToSingleUpper(lower: DNVector64<Single>; value: DNVector128<Double>): DNVector128<Single>;
    {class} function ConvertToUInt64RoundAwayFromZero(value: DNVector128<Double>): DNVector128<UInt64>;
    {class} function ConvertToUInt64RoundAwayFromZeroScalar(value: DNVector64<Double>): DNVector64<UInt64>;
    {class} function ConvertToUInt64RoundToEven(value: DNVector128<Double>): DNVector128<UInt64>;
    {class} function ConvertToUInt64RoundToEvenScalar(value: DNVector64<Double>): DNVector64<UInt64>;
    {class} function ConvertToUInt64RoundToNegativeInfinity(value: DNVector128<Double>): DNVector128<UInt64>;
    {class} function ConvertToUInt64RoundToNegativeInfinityScalar(value: DNVector64<Double>): DNVector64<UInt64>;
    {class} function ConvertToUInt64RoundToPositiveInfinity(value: DNVector128<Double>): DNVector128<UInt64>;
    {class} function ConvertToUInt64RoundToPositiveInfinityScalar(value: DNVector64<Double>): DNVector64<UInt64>;
    {class} function ConvertToUInt64RoundToZero(value: DNVector128<Double>): DNVector128<UInt64>;
    {class} function ConvertToUInt64RoundToZeroScalar(value: DNVector64<Double>): DNVector64<UInt64>;
    {class} function Divide(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Divide(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Divide(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Double>; index: Byte): DNVector128<Double>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Int64>; index: Byte): DNVector128<Int64>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<UInt64>; index: Byte): DNVector128<UInt64>; overload;
    {class} function DuplicateToVector128(value: Double): DNVector128<Double>; overload;
    {class} function DuplicateToVector128(value: Int64): DNVector128<Int64>; overload;
    {class} function DuplicateToVector128(value: UInt64): DNVector128<UInt64>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<UInt16>): DNVector64<Byte>; overload;
    {class} function ExtractNarrowingSaturateScalar(value: DNVector64<Int32>): DNVector64<Int16>; overload;
    {class} function Abs(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Abs(value: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function AbsSaturate(value: DNVector128<Int64>): DNVector128<Int64>;
    {class} function AbsSaturateScalar(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AbsSaturateScalar(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AbsSaturateScalar(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function AbsSaturateScalar(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AbsScalar(value: DNVector64<Int64>): DNVector64<UInt64>;
    {class} function AbsoluteCompareGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AbsoluteCompareGreaterThanScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsoluteCompareGreaterThanScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AbsoluteCompareGreaterThanOrEqualScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsoluteCompareGreaterThanOrEqualScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AbsoluteCompareLessThanScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsoluteCompareLessThanScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AbsoluteCompareLessThanOrEqualScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsoluteCompareLessThanOrEqualScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteDifference(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AbsoluteDifferenceScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsoluteDifferenceScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Add(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AddAcross(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AddAcross(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AddAcross(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AddAcross(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AddAcross(value: DNVector128<Byte>): DNVector64<Byte>; overload;
    {class} function AddAcross(value: DNVector128<Int16>): DNVector64<Int16>; overload;
    {class} function AddAcross(value: DNVector128<Int32>): DNVector64<Int32>; overload;
    {class} function AddAcross(value: DNVector128<SByte>): DNVector64<SByte>; overload;
    {class} function AddAcross(value: DNVector128<UInt16>): DNVector64<UInt16>; overload;
    {class} function AddAcross(value: DNVector128<UInt32>): DNVector64<UInt32>; overload;
    {class} function AddAcrossWidening(value: DNVector64<Byte>): DNVector64<UInt16>; overload;
    {class} function AddAcrossWidening(value: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function AddAcrossWidening(value: DNVector64<SByte>): DNVector64<Int16>; overload;
    {class} function AddAcrossWidening(value: DNVector64<UInt16>): DNVector64<UInt32>; overload;
    {class} function AddAcrossWidening(value: DNVector128<Byte>): DNVector64<UInt16>; overload;
    {class} function AddAcrossWidening(value: DNVector128<Int16>): DNVector64<Int32>; overload;
    {class} function AddAcrossWidening(value: DNVector128<Int32>): DNVector64<Int64>; overload;
    {class} function AddAcrossWidening(value: DNVector128<SByte>): DNVector64<Int16>; overload;
    {class} function AddAcrossWidening(value: DNVector128<UInt16>): DNVector64<UInt32>; overload;
    {class} function AddAcrossWidening(value: DNVector128<UInt32>): DNVector64<UInt64>; overload;
    {class} function AddPairwise(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AddPairwise(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function AddPairwise(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AddPairwise(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AddPairwise(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function AddPairwise(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AddPairwise(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AddPairwise(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AddPairwise(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AddPairwise(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function AddPairwiseScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AddPairwiseScalar(value: DNVector128<Double>): DNVector64<Double>; overload;
    {class} function AddPairwiseScalar(value: DNVector128<Int64>): DNVector64<Int64>; overload;
    {class} function AddPairwiseScalar(value: DNVector128<UInt64>): DNVector64<UInt64>; overload;
    {class} function AddSaturate(left: DNVector64<Byte>; right: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function AddSaturate(left: DNVector64<Int16>; right: DNVector64<UInt16>): DNVector64<Int16>; overload;
    {class} function AddSaturate(left: DNVector64<Int32>; right: DNVector64<UInt32>): DNVector64<Int32>; overload;
    {class} function AddSaturate(left: DNVector64<SByte>; right: DNVector64<Byte>): DNVector64<SByte>; overload;
    {class} function AddSaturate(left: DNVector64<UInt16>; right: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function AddSaturate(left: DNVector64<UInt32>; right: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function AddSaturate(left: DNVector128<Byte>; right: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function AddSaturate(left: DNVector128<Int16>; right: DNVector128<UInt16>): DNVector128<Int16>; overload;
    {class} function AddSaturate(left: DNVector128<Int32>; right: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function AddSaturate(left: DNVector128<Int64>; right: DNVector128<UInt64>): DNVector128<Int64>; overload;
    {class} function AddSaturate(left: DNVector128<SByte>; right: DNVector128<Byte>): DNVector128<SByte>; overload;
    {class} function AddSaturate(left: DNVector128<UInt16>; right: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function AddSaturate(left: DNVector128<UInt32>; right: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function AddSaturate(left: DNVector128<UInt64>; right: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Byte>; right: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int16>; right: DNVector64<UInt16>): DNVector64<Int16>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int32>; right: DNVector64<UInt32>): DNVector64<Int32>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int64>; right: DNVector64<UInt64>): DNVector64<Int64>; overload;
    {class} function AddSaturateScalar(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AddSaturateScalar(left: DNVector64<SByte>; right: DNVector64<Byte>): DNVector64<SByte>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt16>; right: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.AdvSimd+Arm64')]
  DNAdvSimd_Arm64 = interface(DNObject)
  ['{76AA46DE-B9B0-3C08-9E73-812F97ECD593}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAdvSimd_Arm64 = class(TDNGenericImport<DNAdvSimd_Arm64Class, DNAdvSimd_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNDp_Arm64Class = interface(DNObjectClass)
  ['{EE8D3A8C-D41A-58D3-8487-8E52F5891374}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Dp+Arm64')]
  DNDp_Arm64 = interface(DNObject)
  ['{590F9C12-A4ED-325C-B41D-1224CB639126}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDp_Arm64 = class(TDNGenericImport<DNDp_Arm64Class, DNDp_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNRdm_Arm64Class = interface(DNObjectClass)
  ['{3D5350CD-8816-54F1-817F-CAC8D4537031}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function MultiplyRoundedDoublingAndAddSaturateHighScalar(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndAddSaturateHighScalar(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHighScalar(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHighScalar(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingScalarBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Rdm+Arm64')]
  DNRdm_Arm64 = interface(DNObject)
  ['{8561C750-A85F-3330-A008-3DC78AE6CDB6}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRdm_Arm64 = class(TDNGenericImport<DNRdm_Arm64Class, DNRdm_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNAes_Arm64Class = interface(DNObjectClass)
  ['{1A48C6DA-5376-5EA0-BBE4-CAAB39C7EAD2}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Aes+Arm64')]
  DNAes_Arm64 = interface(DNObject)
  ['{D00C22FC-5ABC-330C-9DAE-A935824B3E80}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAes_Arm64 = class(TDNGenericImport<DNAes_Arm64Class, DNAes_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNCrc32_Arm64Class = interface(DNObjectClass)
  ['{8DD96001-4EFB-5CB4-BD7E-13EA4D30ED78}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ComputeCrc32(crc: UInt32; data: UInt64): UInt32;
    {class} function ComputeCrc32C(crc: UInt32; data: UInt64): UInt32;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Crc32+Arm64')]
  DNCrc32_Arm64 = interface(DNObject)
  ['{D3B664D2-0AA2-333A-9E1C-410FBFC94065}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCrc32_Arm64 = class(TDNGenericImport<DNCrc32_Arm64Class, DNCrc32_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNSha1_Arm64Class = interface(DNObjectClass)
  ['{60EBEE6B-21E4-5586-AF2C-BBCEA41975DE}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Sha1+Arm64')]
  DNSha1_Arm64 = interface(DNObject)
  ['{EB0AE1A4-D344-3406-92E2-3FD27F61F281}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSha1_Arm64 = class(TDNGenericImport<DNSha1_Arm64Class, DNSha1_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNSha256_Arm64Class = interface(DNObjectClass)
  ['{B63785A8-7833-52EB-82EB-058FED4B55E0}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Sha256+Arm64')]
  DNSha256_Arm64 = interface(DNObject)
  ['{591A773D-FC9E-3B85-B790-D1E724DD6A31}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSha256_Arm64 = class(TDNGenericImport<DNSha256_Arm64Class, DNSha256_Arm64>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNAdvSimdClass = interface(DNArmBaseClass)
  ['{7CBD9B6E-6234-5263-8F13-A1BDAE645E4B}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<SByte>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<UInt16>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<UInt32>; left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function SubtractSaturate(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function SubtractSaturate(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function SubtractSaturate(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function SubtractSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function SubtractSaturate(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function SubtractSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function SubtractSaturate(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function SubtractSaturate(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function SubtractSaturateScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function SubtractScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function SubtractScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function SubtractScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function SubtractScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function SubtractWideningLower(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function SubtractWideningLower(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function SubtractWideningLower(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function SubtractWideningLower(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function SubtractWideningLower(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function SubtractWideningLower(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function SubtractWideningLower(left: DNVector128<Int16>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function SubtractWideningLower(left: DNVector128<Int32>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function SubtractWideningLower(left: DNVector128<Int64>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function SubtractWideningLower(left: DNVector128<UInt16>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function SubtractWideningLower(left: DNVector128<UInt32>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function SubtractWideningLower(left: DNVector128<UInt64>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Int16>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<Int64>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<UInt16>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function SubtractWideningUpper(left: DNVector128<UInt64>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function VectorTableLookup(table: DNVector128<Byte>; byteIndexes: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function VectorTableLookup(table: DNVector128<SByte>; byteIndexes: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function VectorTableLookupExtension(defaultValues: DNVector64<Byte>; table: DNVector128<Byte>; byteIndexes: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function VectorTableLookupExtension(defaultValues: DNVector64<SByte>; table: DNVector128<SByte>; byteIndexes: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function &Xor(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function &Xor(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function &Xor(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function &Xor(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function &Xor(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function &Xor(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function &Xor(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function &Xor(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function &Xor(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function &Xor(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function &Xor(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Xor(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &Xor(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Xor(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Xor(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Xor(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Xor(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function &Xor(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Xor(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Xor(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function ZeroExtendWideningLower(value: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function ZeroExtendWideningUpper(value: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogicalRoundedScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftRightLogicalScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftRightLogicalScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function SignExtendWideningLower(value: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function SignExtendWideningLower(value: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function SignExtendWideningLower(value: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function SignExtendWideningUpper(value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function SignExtendWideningUpper(value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function SignExtendWideningUpper(value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function SqrtScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function SqrtScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} procedure Store(address: PByte; source: DNVector64<Byte>); overload;
    {class} procedure Store(address: PDouble; source: DNVector64<Double>); overload;
    {class} procedure Store(address: PInt16; source: DNVector64<Int16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector64<Int32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector64<Int64>); overload;
    {class} procedure Store(address: PSByte; source: DNVector64<SByte>); overload;
    {class} procedure Store(address: PSingle; source: DNVector64<Single>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector64<UInt16>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector64<UInt32>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector64<UInt64>); overload;
    {class} procedure Store(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure Store(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure Store(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure Store(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure Store(address: PSingle; source: DNVector128<Single>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreSelectedScalar(address: PByte; value: DNVector64<Byte>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PInt16; value: DNVector64<Int16>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PInt32; value: DNVector64<Int32>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PSByte; value: DNVector64<SByte>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PSingle; value: DNVector64<Single>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PUInt16; value: DNVector64<UInt16>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PUInt32; value: DNVector64<UInt32>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PByte; value: DNVector128<Byte>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PDouble; value: DNVector128<Double>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PInt16; value: DNVector128<Int16>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PInt32; value: DNVector128<Int32>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PInt64; value: DNVector128<Int64>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PSByte; value: DNVector128<SByte>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PSingle; value: DNVector128<Single>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PUInt16; value: DNVector128<UInt16>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PUInt32; value: DNVector128<UInt32>; index: Byte); overload;
    {class} procedure StoreSelectedScalar(address: PUInt64; value: DNVector128<UInt64>; index: Byte); overload;
    {class} function Subtract(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Subtract(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Subtract(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Subtract(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Subtract(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Subtract(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Subtract(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Subtract(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Subtract(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Subtract(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Subtract(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Subtract(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Subtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Subtract(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Subtract(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Subtract(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function SubtractHighNarrowingLower(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<Byte>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<Int16>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<Int32>; left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<SByte>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<UInt16>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function SubtractHighNarrowingUpper(lower: DNVector64<UInt32>; left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function SubtractRoundedHighNarrowingLower(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<Byte>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<Int16>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function SubtractRoundedHighNarrowingUpper(lower: DNVector64<Int32>; left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<SByte>; value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<UInt16>; value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<UInt32>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<UInt64>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogicalAddScalar(addend: DNVector64<Int64>; value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftRightLogicalAddScalar(addend: DNVector64<UInt64>; value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalNarrowingLower(value: DNVector128<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateLower(value: DNVector128<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalNarrowingSaturateUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalNarrowingUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalRounded(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<Byte>; value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<Int16>; value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<Int32>; value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<SByte>; value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<UInt16>; value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector64<UInt32>; value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<Byte>; value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<Int16>; value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<Int32>; value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<Int64>; value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<SByte>; value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<UInt16>; value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<UInt32>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedAdd(addend: DNVector128<UInt64>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogicalRoundedAddScalar(addend: DNVector64<Int64>; value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftRightLogicalRoundedAddScalar(addend: DNVector64<UInt64>; value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingLower(value: DNVector128<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<UInt16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<UInt32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateLower(value: DNVector128<UInt64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingSaturateUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogicalRoundedNarrowingUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalRoundedScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<UInt16>; right: DNVector128<UInt16>; shift: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<UInt32>; right: DNVector128<UInt32>; shift: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<UInt64>; right: DNVector128<UInt64>; shift: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightAndInsertScalar(left: DNVector64<Int64>; right: DNVector64<Int64>; shift: Byte): DNVector64<Int64>; overload;
    {class} function ShiftRightAndInsertScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>; shift: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector64<Int16>; value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector64<Int32>; value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector64<SByte>; value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector128<Int16>; value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector128<Int32>; value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector128<Int64>; value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightArithmeticAdd(addend: DNVector128<SByte>; value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticAddScalar(addend: DNVector64<Int64>; value: DNVector64<Int64>; count: Byte): DNVector64<Int64>;
    {class} function ShiftRightArithmeticNarrowingSaturateLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedLower(value: DNVector128<Int16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedLower(value: DNVector128<Int32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedLower(value: DNVector128<Int64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedUpper(lower: DNVector64<Byte>; value: DNVector128<Int16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt16>; value: DNVector128<Int32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt32>; value: DNVector128<Int64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmeticNarrowingSaturateUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightArithmeticRounded(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector64<Int16>; value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector64<Int32>; value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector64<SByte>; value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector128<Int16>; value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector128<Int32>; value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector128<Int64>; value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightArithmeticRoundedAdd(addend: DNVector128<SByte>; value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedAddScalar(addend: DNVector64<Int64>; value: DNVector64<Int64>; count: Byte): DNVector64<Int64>;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateLower(value: DNVector128<Int32>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateLower(value: DNVector128<Int64>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateLower(value: DNVector128<Int16>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(value: DNVector128<Int16>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(value: DNVector128<Int32>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(value: DNVector128<Int64>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(lower: DNVector64<Byte>; value: DNVector128<Int16>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt16>; value: DNVector128<Int32>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt32>; value: DNVector128<Int64>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmeticRoundedNarrowingSaturateUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightArithmeticRoundedScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>;
    {class} function ShiftRightArithmeticScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>;
    {class} function ShiftRightLogical(value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogical(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogical(value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<Byte>; value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<Int16>; value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<Int32>; value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<SByte>; value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<UInt16>; value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector64<UInt32>; value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<Byte>; value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<Int16>; value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<Int32>; value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalAdd(addend: DNVector128<Int64>; value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<Int32>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<SByte>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<UInt16>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<UInt32>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<Byte>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<Int16>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<Int32>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<SByte>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalWideningUpper(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLogical(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogical(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogical(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogical(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogical(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogical(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftLogical(value: DNVector128<Byte>; count: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function ShiftLogical(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLogical(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLogical(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLogical(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftLogical(value: DNVector128<UInt16>; count: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function ShiftLogical(value: DNVector128<UInt32>; count: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function ShiftLogical(value: DNVector128<UInt64>; count: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogicalRounded(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<Byte>; count: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<UInt16>; count: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<UInt32>; count: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function ShiftLogicalRounded(value: DNVector128<UInt64>; count: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<Byte>; count: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<UInt16>; count: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<UInt32>; count: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function ShiftLogicalRoundedSaturate(value: DNVector128<UInt64>; count: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ShiftLogicalRoundedSaturateScalar(value: DNVector64<UInt64>; count: DNVector64<Int64>): DNVector64<UInt64>; overload;
    {class} function ShiftLogicalRoundedScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ShiftLogicalRoundedScalar(value: DNVector64<UInt64>; count: DNVector64<Int64>): DNVector64<UInt64>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<Byte>; count: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<UInt16>; count: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector64<UInt32>; count: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<Byte>; count: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<UInt16>; count: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<UInt32>; count: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function ShiftLogicalSaturate(value: DNVector128<UInt64>; count: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ShiftLogicalSaturateScalar(value: DNVector64<UInt64>; count: DNVector64<Int64>): DNVector64<UInt64>; overload;
    {class} function ShiftLogicalScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ShiftLogicalScalar(value: DNVector64<UInt64>; count: DNVector64<Int64>): DNVector64<UInt64>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<Byte>; right: DNVector64<Byte>; shift: Byte): DNVector64<Byte>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<Int16>; right: DNVector64<Int16>; shift: Byte): DNVector64<Int16>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<Int32>; right: DNVector64<Int32>; shift: Byte): DNVector64<Int32>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<SByte>; right: DNVector64<SByte>; shift: Byte): DNVector64<SByte>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<UInt16>; right: DNVector64<UInt16>; shift: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftRightAndInsert(left: DNVector64<UInt32>; right: DNVector64<UInt32>; shift: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<Byte>; right: DNVector128<Byte>; shift: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<Int16>; right: DNVector128<Int16>; shift: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<Int32>; right: DNVector128<Int32>; shift: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<Int64>; right: DNVector128<Int64>; shift: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightAndInsert(left: DNVector128<SByte>; right: DNVector128<SByte>; shift: Byte): DNVector128<SByte>; overload;
    {class} function ShiftArithmetic(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftArithmetic(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftArithmetic(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftArithmeticRounded(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftArithmeticRoundedSaturate(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftArithmeticRoundedSaturateScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>;
    {class} function ShiftArithmeticRoundedScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>;
    {class} function ShiftArithmeticSaturate(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftArithmeticSaturate(value: DNVector128<SByte>; count: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ShiftArithmeticSaturateScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>;
    {class} function ShiftArithmeticScalar(value: DNVector64<Int64>; count: DNVector64<Int64>): DNVector64<Int64>;
    {class} function ShiftLeftAndInsert(left: DNVector64<Byte>; right: DNVector64<Byte>; shift: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector64<Int16>; right: DNVector64<Int16>; shift: Byte): DNVector64<Int16>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector64<Int32>; right: DNVector64<Int32>; shift: Byte): DNVector64<Int32>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector64<SByte>; right: DNVector64<SByte>; shift: Byte): DNVector64<SByte>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector64<UInt16>; right: DNVector64<UInt16>; shift: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector64<UInt32>; right: DNVector64<UInt32>; shift: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<Byte>; right: DNVector128<Byte>; shift: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<Int16>; right: DNVector128<Int16>; shift: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<Int32>; right: DNVector128<Int32>; shift: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<Int64>; right: DNVector128<Int64>; shift: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<SByte>; right: DNVector128<SByte>; shift: Byte): DNVector128<SByte>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<UInt16>; right: DNVector128<UInt16>; shift: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<UInt32>; right: DNVector128<UInt32>; shift: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftAndInsert(left: DNVector128<UInt64>; right: DNVector128<UInt64>; shift: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftAndInsertScalar(left: DNVector64<Int64>; right: DNVector64<Int64>; shift: Byte): DNVector64<Int64>; overload;
    {class} function ShiftLeftAndInsertScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>; shift: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<Byte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<Int16>; count: Byte): DNVector64<Int16>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<Int32>; count: Byte): DNVector64<Int32>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<SByte>; count: Byte): DNVector64<SByte>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<UInt16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector64<UInt32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<Byte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<SByte>; count: Byte): DNVector128<SByte>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturate(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftLeftLogicalSaturateScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector64<Int16>; count: Byte): DNVector64<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector64<Int32>; count: Byte): DNVector64<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector64<SByte>; count: Byte): DNVector64<Byte>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector128<Int16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector128<Int32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector128<Int64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogicalSaturateUnsigned(value: DNVector128<SByte>; count: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftLogicalSaturateUnsignedScalar(value: DNVector64<Int64>; count: Byte): DNVector64<UInt64>;
    {class} function ShiftLeftLogicalScalar(value: DNVector64<Int64>; count: Byte): DNVector64<Int64>; overload;
    {class} function ShiftLeftLogicalScalar(value: DNVector64<UInt64>; count: Byte): DNVector64<UInt64>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<Byte>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogicalWideningLower(value: DNVector64<Int16>; count: Byte): DNVector128<Int32>; overload;
    {class} function OrNot(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function OrNot(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function OrNot(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function OrNot(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function OrNot(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function OrNot(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function OrNot(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function OrNot(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function OrNot(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function OrNot(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function OrNot(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function OrNot(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function OrNot(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function PolynomialMultiply(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function PolynomialMultiply(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function PolynomialMultiply(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function PolynomialMultiply(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function PolynomialMultiplyWideningLower(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function PolynomialMultiplyWideningLower(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function PolynomialMultiplyWideningUpper(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function PolynomialMultiplyWideningUpper(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function PopCount(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function PopCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function PopCount(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function PopCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function ReciprocalEstimate(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalEstimate(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ReciprocalEstimate(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalEstimate(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ReciprocalSquareRootEstimate(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalSquareRootEstimate(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ReciprocalSquareRootEstimate(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalSquareRootEstimate(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ReciprocalSquareRootStep(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalSquareRootStep(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalStep(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ReciprocalStep(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReverseElement16(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ReverseElement16(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ReverseElement16(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ReverseElement16(value: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function ReverseElement16(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ReverseElement16(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ReverseElement16(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ReverseElement16(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ReverseElement32(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ReverseElement32(value: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function ReverseElement32(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ReverseElement32(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ReverseElement8(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ReverseElement8(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ReverseElement8(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function ReverseElement8(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function ReverseElement8(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function ReverseElement8(value: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function ReverseElement8(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ReverseElement8(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ReverseElement8(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ReverseElement8(value: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ReverseElement8(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ReverseElement8(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function RoundAwayFromZero(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundAwayFromZero(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundAwayFromZeroScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function RoundAwayFromZeroScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToNearest(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToNearest(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function RoundToNearestScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToZero(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function RoundToZero(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZeroScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function RoundToZeroScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function ShiftArithmetic(value: DNVector64<Int16>; count: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function ShiftArithmetic(value: DNVector64<Int32>; count: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function ShiftArithmetic(value: DNVector64<SByte>; count: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function ShiftArithmetic(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<Int16>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<UInt16>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<Int16>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningUpperAndAdd(addend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<UInt16>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<Int16>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningUpperAndSubtract(minuend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function Negate(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Negate(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Negate(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Negate(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Negate(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Negate(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Negate(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Negate(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function NegateSaturate(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function NegateSaturate(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function NegateSaturate(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function NegateSaturate(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function NegateSaturate(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function NegateSaturate(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function NegateScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function NegateScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function &Not(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function &Not(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function &Not(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function &Not(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function &Not(value: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function &Not(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function &Not(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function &Not(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function &Not(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function &Not(value: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function &Not(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Not(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &Not(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Not(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Not(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Not(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Not(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function &Not(value: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Not(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Not(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &Or(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function &Or(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function &Or(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function &Or(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function &Or(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function &Or(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function &Or(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function &Or(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function &Or(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function &Or(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function &Or(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Or(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &Or(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Or(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Or(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Or(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Or(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function &Or(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Or(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Or(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function OrNot(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function OrNot(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function OrNot(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function OrNot(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function OrNot(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function OrNot(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function OrNot(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MultiplyDoublingWideningUpperAndAddSaturate(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperByScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperByScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyRoundedDoublingByScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingByScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingByScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingByScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingSaturateHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingSaturateHigh(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MultiplyScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MultiplyScalarBySelectedScalar(left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyScalarBySelectedScalar(left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<Byte>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<SByte>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MultiplySubtract(minuend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<Byte>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<SByte>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplySubtract(minuend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplySubtractByScalar(minuend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplySubtractBySelectedScalar(minuend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningLower(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<UInt16>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<Int16>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function MultiplyWideningLowerAndAdd(addend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<UInt16>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function MultiplyWideningLowerAndSubtract(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndSubtract(minuend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndAdd(addend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningUpperAndSubtract(minuend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyDoublingByScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingByScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingByScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyDoublingByScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingBySelectedScalarSaturateHigh(left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingSaturateHigh(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyDoublingSaturateHigh(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyDoublingSaturateHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyDoublingSaturateHigh(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerAndAddSaturate(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerAndAddSaturate(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerByScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerByScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(minuend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateLower(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateLower(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerByScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerByScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerBySelectedScalar(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerBySelectedScalar(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerBySelectedScalar(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateLowerBySelectedScalar(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateUpper(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateUpper(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperByScalar(left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperByScalar(left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperBySelectedScalar(left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperBySelectedScalar(left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperBySelectedScalar(left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningSaturateUpperBySelectedScalar(left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyDoublingWideningUpperAndAddSaturate(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function Multiply(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Multiply(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Multiply(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Multiply(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Multiply(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Multiply(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Multiply(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplyAdd(addend: DNVector64<Byte>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MultiplyAdd(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyAdd(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyAdd(addend: DNVector64<SByte>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MultiplyAdd(addend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MultiplyAdd(addend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function MultiplyAdd(addend: DNVector128<Byte>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function MultiplyAdd(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyAdd(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyAdd(addend: DNVector128<SByte>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function MultiplyAdd(addend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplyAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplyAddByScalar(addend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyAddBySelectedScalar(addend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyByScalar(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyByScalar(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyByScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MultiplyByScalar(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MultiplyByScalar(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function MultiplyByScalar(left: DNVector128<Int16>; right: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyByScalar(left: DNVector128<Int32>; right: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyByScalar(left: DNVector128<Single>; right: DNVector64<Single>): DNVector128<Single>; overload;
    {class} function MultiplyByScalar(left: DNVector128<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplyByScalar(left: DNVector128<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector64<Single>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector64<UInt16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector64<UInt32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Single>; right: DNVector64<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<Single>; right: DNVector128<Single>; rightIndex: Byte): DNVector128<Single>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt16>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalar(left: DNVector128<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<UInt16>; right: DNVector64<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<UInt16>; right: DNVector128<UInt16>; rightIndex: Byte): DNVector128<UInt32>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<UInt32>; right: DNVector64<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningLower(left: DNVector64<UInt32>; right: DNVector128<UInt32>; rightIndex: Byte): DNVector128<UInt64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function MultiplyBySelectedScalarWideningLowerAndAdd(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int64>; overload;
    {class} function LoadAndReplicateToVector64(address: PUInt32): DNVector64<UInt32>; overload;
    {class} function LoadAndReplicateToVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAndReplicateToVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAndReplicateToVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAndReplicateToVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAndReplicateToVector128(address: PSingle): DNVector128<Single>; overload;
    {class} function LoadAndReplicateToVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadAndReplicateToVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadVector64(address: PByte): DNVector64<Byte>; overload;
    {class} function LoadVector64(address: PDouble): DNVector64<Double>; overload;
    {class} function LoadVector64(address: PInt16): DNVector64<Int16>; overload;
    {class} function LoadVector64(address: PInt32): DNVector64<Int32>; overload;
    {class} function LoadVector64(address: PInt64): DNVector64<Int64>; overload;
    {class} function LoadVector64(address: PSByte): DNVector64<SByte>; overload;
    {class} function LoadVector64(address: PSingle): DNVector64<Single>; overload;
    {class} function LoadVector64(address: PUInt16): DNVector64<UInt16>; overload;
    {class} function LoadVector64(address: PUInt32): DNVector64<UInt32>; overload;
    {class} function LoadVector64(address: PUInt64): DNVector64<UInt64>; overload;
    {class} function LoadVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadVector128(address: PSingle): DNVector128<Single>; overload;
    {class} function LoadVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function Max(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Max(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Max(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Max(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Max(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Max(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Max(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Max(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Max(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Max(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Max(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Max(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Max(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Max(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MaxNumber(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxNumber(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MaxNumberScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MaxNumberScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxPairwise(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MaxPairwise(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MaxPairwise(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MaxPairwise(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MaxPairwise(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MaxPairwise(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MaxPairwise(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Min(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Min(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Min(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Min(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Min(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Min(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Min(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Min(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Min(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Min(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Min(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Min(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Min(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Min(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MinNumber(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinNumber(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MinNumberScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function MinNumberScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinPairwise(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function MinPairwise(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MinPairwise(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MinPairwise(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function MinPairwise(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function MinPairwise(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function MinPairwise(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Multiply(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Multiply(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Multiply(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Multiply(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Multiply(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Multiply(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Multiply(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function FusedMultiplyAdd(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplyAdd(addend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function FusedMultiplyAddNegatedScalar(addend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function FusedMultiplyAddNegatedScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplyAddScalar(addend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function FusedMultiplyAddScalar(addend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtract(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtract(minuend: DNVector128<Single>; left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function FusedMultiplySubtractNegatedScalar(minuend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function FusedMultiplySubtractNegatedScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedMultiplySubtractScalar(minuend: DNVector64<Double>; left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function FusedMultiplySubtractScalar(minuend: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function FusedSubtractHalving(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function FusedSubtractHalving(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Insert(vector: DNVector64<Byte>; index: Byte; data: Byte): DNVector64<Byte>; overload;
    {class} function Insert(vector: DNVector64<Int16>; index: Byte; data: Int16): DNVector64<Int16>; overload;
    {class} function Insert(vector: DNVector64<Int32>; index: Byte; data: Int32): DNVector64<Int32>; overload;
    {class} function Insert(vector: DNVector64<SByte>; index: Byte; data: SByte): DNVector64<SByte>; overload;
    {class} function Insert(vector: DNVector64<Single>; index: Byte; data: Single): DNVector64<Single>; overload;
    {class} function Insert(vector: DNVector64<UInt16>; index: Byte; data: UInt16): DNVector64<UInt16>; overload;
    {class} function Insert(vector: DNVector64<UInt32>; index: Byte; data: UInt32): DNVector64<UInt32>; overload;
    {class} function Insert(vector: DNVector128<Byte>; index: Byte; data: Byte): DNVector128<Byte>; overload;
    {class} function Insert(vector: DNVector128<Double>; index: Byte; data: Double): DNVector128<Double>; overload;
    {class} function Insert(vector: DNVector128<Int16>; index: Byte; data: Int16): DNVector128<Int16>; overload;
    {class} function Insert(vector: DNVector128<Int32>; index: Byte; data: Int32): DNVector128<Int32>; overload;
    {class} function Insert(vector: DNVector128<Int64>; index: Byte; data: Int64): DNVector128<Int64>; overload;
    {class} function Insert(vector: DNVector128<SByte>; index: Byte; data: SByte): DNVector128<SByte>; overload;
    {class} function Insert(vector: DNVector128<Single>; index: Byte; data: Single): DNVector128<Single>; overload;
    {class} function Insert(vector: DNVector128<UInt16>; index: Byte; data: UInt16): DNVector128<UInt16>; overload;
    {class} function Insert(vector: DNVector128<UInt32>; index: Byte; data: UInt32): DNVector128<UInt32>; overload;
    {class} function Insert(vector: DNVector128<UInt64>; index: Byte; data: UInt64): DNVector128<UInt64>; overload;
    {class} function InsertScalar(result: DNVector128<Double>; resultIndex: Byte; value: DNVector64<Double>): DNVector128<Double>; overload;
    {class} function InsertScalar(result: DNVector128<Int64>; resultIndex: Byte; value: DNVector64<Int64>): DNVector128<Int64>; overload;
    {class} function InsertScalar(result: DNVector128<UInt64>; resultIndex: Byte; value: DNVector64<UInt64>): DNVector128<UInt64>; overload;
    {class} function LeadingSignCount(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function LeadingSignCount(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function LeadingSignCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function LeadingSignCount(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function LeadingSignCount(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function LeadingSignCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function LeadingZeroCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function LeadingZeroCount(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function LeadingZeroCount(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function LeadingZeroCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function LeadingZeroCount(value: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function LeadingZeroCount(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<Byte>; index: Byte; address: PByte): DNVector64<Byte>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<Int16>; index: Byte; address: PInt16): DNVector64<Int16>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<Int32>; index: Byte; address: PInt32): DNVector64<Int32>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<SByte>; index: Byte; address: PSByte): DNVector64<SByte>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<Single>; index: Byte; address: PSingle): DNVector64<Single>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<UInt16>; index: Byte; address: PUInt16): DNVector64<UInt16>; overload;
    {class} function LoadAndInsertScalar(value: DNVector64<UInt32>; index: Byte; address: PUInt32): DNVector64<UInt32>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Byte>; index: Byte; address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Double>; index: Byte; address: PDouble): DNVector128<Double>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Int16>; index: Byte; address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Int32>; index: Byte; address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Int64>; index: Byte; address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<SByte>; index: Byte; address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<Single>; index: Byte; address: PSingle): DNVector128<Single>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<UInt16>; index: Byte; address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<UInt32>; index: Byte; address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadAndInsertScalar(value: DNVector128<UInt64>; index: Byte; address: PUInt64): DNVector128<UInt64>; overload;
    {class} function LoadAndReplicateToVector64(address: PByte): DNVector64<Byte>; overload;
    {class} function LoadAndReplicateToVector64(address: PInt16): DNVector64<Int16>; overload;
    {class} function LoadAndReplicateToVector64(address: PInt32): DNVector64<Int32>; overload;
    {class} function LoadAndReplicateToVector64(address: PSByte): DNVector64<SByte>; overload;
    {class} function LoadAndReplicateToVector64(address: PSingle): DNVector64<Single>; overload;
    {class} function LoadAndReplicateToVector64(address: PUInt16): DNVector64<UInt16>; overload;
    {class} function Extract(vector: DNVector128<Byte>; index: Byte): Byte; overload;
    {class} function Extract(vector: DNVector128<Double>; index: Byte): Double; overload;
    {class} function Extract(vector: DNVector128<Int16>; index: Byte): Int16; overload;
    {class} function Extract(vector: DNVector128<Int32>; index: Byte): Int32; overload;
    {class} function Extract(vector: DNVector128<Int64>; index: Byte): Int64; overload;
    {class} function Extract(vector: DNVector128<SByte>; index: Byte): SByte; overload;
    {class} function Extract(vector: DNVector128<Single>; index: Byte): Single; overload;
    {class} function Extract(vector: DNVector128<UInt16>; index: Byte): UInt16; overload;
    {class} function Extract(vector: DNVector128<UInt32>; index: Byte): UInt32; overload;
    {class} function Extract(vector: DNVector128<UInt64>; index: Byte): UInt64; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function ExtractNarrowingLower(value: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function ExtractNarrowingSaturateLower(value: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function ExtractNarrowingSaturateUnsignedLower(value: DNVector128<Int16>): DNVector64<Byte>; overload;
    {class} function ExtractNarrowingSaturateUnsignedLower(value: DNVector128<Int32>): DNVector64<UInt16>; overload;
    {class} function ExtractNarrowingSaturateUnsignedLower(value: DNVector128<Int64>): DNVector64<UInt32>; overload;
    {class} function ExtractNarrowingSaturateUnsignedUpper(lower: DNVector64<Byte>; value: DNVector128<Int16>): DNVector128<Byte>; overload;
    {class} function ExtractNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt16>; value: DNVector128<Int32>): DNVector128<UInt16>; overload;
    {class} function ExtractNarrowingSaturateUnsignedUpper(lower: DNVector64<UInt32>; value: DNVector128<Int64>): DNVector128<UInt32>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function ExtractNarrowingSaturateUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<Byte>; value: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<Int16>; value: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<Int32>; value: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<SByte>; value: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<UInt16>; value: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function ExtractNarrowingUpper(lower: DNVector64<UInt32>; value: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function ExtractVector64(upper: DNVector64<Byte>; lower: DNVector64<Byte>; index: Byte): DNVector64<Byte>; overload;
    {class} function ExtractVector64(upper: DNVector64<Int16>; lower: DNVector64<Int16>; index: Byte): DNVector64<Int16>; overload;
    {class} function ExtractVector64(upper: DNVector64<Int32>; lower: DNVector64<Int32>; index: Byte): DNVector64<Int32>; overload;
    {class} function ExtractVector64(upper: DNVector64<SByte>; lower: DNVector64<SByte>; index: Byte): DNVector64<SByte>; overload;
    {class} function ExtractVector64(upper: DNVector64<Single>; lower: DNVector64<Single>; index: Byte): DNVector64<Single>; overload;
    {class} function ExtractVector64(upper: DNVector64<UInt16>; lower: DNVector64<UInt16>; index: Byte): DNVector64<UInt16>; overload;
    {class} function ExtractVector64(upper: DNVector64<UInt32>; lower: DNVector64<UInt32>; index: Byte): DNVector64<UInt32>; overload;
    {class} function ExtractVector128(upper: DNVector128<Byte>; lower: DNVector128<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} function ExtractVector128(upper: DNVector128<Double>; lower: DNVector128<Double>; index: Byte): DNVector128<Double>; overload;
    {class} function ExtractVector128(upper: DNVector128<Int16>; lower: DNVector128<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} function ExtractVector128(upper: DNVector128<Int32>; lower: DNVector128<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} function ExtractVector128(upper: DNVector128<Int64>; lower: DNVector128<Int64>; index: Byte): DNVector128<Int64>; overload;
    {class} function ExtractVector128(upper: DNVector128<SByte>; lower: DNVector128<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} function ExtractVector128(upper: DNVector128<Single>; lower: DNVector128<Single>; index: Byte): DNVector128<Single>; overload;
    {class} function ExtractVector128(upper: DNVector128<UInt16>; lower: DNVector128<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} function ExtractVector128(upper: DNVector128<UInt32>; lower: DNVector128<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} function ExtractVector128(upper: DNVector128<UInt64>; lower: DNVector128<UInt64>; index: Byte): DNVector128<UInt64>; overload;
    {class} function Floor(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Floor(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function FloorScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function FloorScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function FusedAddHalving(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function FusedAddHalving(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function FusedAddHalving(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function FusedAddHalving(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function FusedAddHalving(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function FusedAddHalving(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function FusedAddHalving(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function FusedAddHalving(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function FusedAddHalving(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function FusedAddHalving(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function FusedAddHalving(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function FusedAddHalving(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function FusedAddRoundedHalving(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ConvertToInt32RoundAwayFromZeroScalar(value: DNVector64<Single>): DNVector64<Int32>;
    {class} function ConvertToInt32RoundToEven(value: DNVector64<Single>): DNVector64<Int32>; overload;
    {class} function ConvertToInt32RoundToEven(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32RoundToEvenScalar(value: DNVector64<Single>): DNVector64<Int32>;
    {class} function ConvertToInt32RoundToNegativeInfinity(value: DNVector64<Single>): DNVector64<Int32>; overload;
    {class} function ConvertToInt32RoundToNegativeInfinity(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32RoundToNegativeInfinityScalar(value: DNVector64<Single>): DNVector64<Int32>;
    {class} function ConvertToInt32RoundToPositiveInfinity(value: DNVector64<Single>): DNVector64<Int32>; overload;
    {class} function ConvertToInt32RoundToPositiveInfinity(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32RoundToPositiveInfinityScalar(value: DNVector64<Single>): DNVector64<Int32>;
    {class} function ConvertToInt32RoundToZero(value: DNVector64<Single>): DNVector64<Int32>; overload;
    {class} function ConvertToInt32RoundToZero(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32RoundToZeroScalar(value: DNVector64<Single>): DNVector64<Int32>;
    {class} function ConvertToSingle(value: DNVector64<Int32>): DNVector64<Single>; overload;
    {class} function ConvertToSingle(value: DNVector64<UInt32>): DNVector64<Single>; overload;
    {class} function ConvertToSingle(value: DNVector128<Int32>): DNVector128<Single>; overload;
    {class} function ConvertToSingle(value: DNVector128<UInt32>): DNVector128<Single>; overload;
    {class} function ConvertToSingleScalar(value: DNVector64<Int32>): DNVector64<Single>; overload;
    {class} function ConvertToSingleScalar(value: DNVector64<UInt32>): DNVector64<Single>; overload;
    {class} function ConvertToUInt32RoundAwayFromZero(value: DNVector64<Single>): DNVector64<UInt32>; overload;
    {class} function ConvertToUInt32RoundAwayFromZero(value: DNVector128<Single>): DNVector128<UInt32>; overload;
    {class} function ConvertToUInt32RoundAwayFromZeroScalar(value: DNVector64<Single>): DNVector64<UInt32>;
    {class} function ConvertToUInt32RoundToEven(value: DNVector64<Single>): DNVector64<UInt32>; overload;
    {class} function ConvertToUInt32RoundToEven(value: DNVector128<Single>): DNVector128<UInt32>; overload;
    {class} function ConvertToUInt32RoundToEvenScalar(value: DNVector64<Single>): DNVector64<UInt32>;
    {class} function ConvertToUInt32RoundToNegativeInfinity(value: DNVector64<Single>): DNVector64<UInt32>; overload;
    {class} function ConvertToUInt32RoundToNegativeInfinity(value: DNVector128<Single>): DNVector128<UInt32>; overload;
    {class} function ConvertToUInt32RoundToNegativeInfinityScalar(value: DNVector64<Single>): DNVector64<UInt32>;
    {class} function ConvertToUInt32RoundToPositiveInfinity(value: DNVector64<Single>): DNVector64<UInt32>; overload;
    {class} function ConvertToUInt32RoundToPositiveInfinity(value: DNVector128<Single>): DNVector128<UInt32>; overload;
    {class} function ConvertToUInt32RoundToPositiveInfinityScalar(value: DNVector64<Single>): DNVector64<UInt32>;
    {class} function ConvertToUInt32RoundToZero(value: DNVector64<Single>): DNVector64<UInt32>; overload;
    {class} function ConvertToUInt32RoundToZero(value: DNVector128<Single>): DNVector128<UInt32>; overload;
    {class} function ConvertToUInt32RoundToZeroScalar(value: DNVector64<Single>): DNVector64<UInt32>;
    {class} function DivideScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function DivideScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<Byte>; index: Byte): DNVector64<Byte>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<Int16>; index: Byte): DNVector64<Int16>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<Int32>; index: Byte): DNVector64<Int32>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<Single>; index: Byte): DNVector64<Single>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<SByte>; index: Byte): DNVector64<SByte>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<UInt16>; index: Byte): DNVector64<UInt16>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector64<UInt32>; index: Byte): DNVector64<UInt32>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<Byte>; index: Byte): DNVector64<Byte>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<Int16>; index: Byte): DNVector64<Int16>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<Int32>; index: Byte): DNVector64<Int32>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<Single>; index: Byte): DNVector64<Single>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<SByte>; index: Byte): DNVector64<SByte>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<UInt16>; index: Byte): DNVector64<UInt16>; overload;
    {class} function DuplicateSelectedScalarToVector64(value: DNVector128<UInt32>; index: Byte): DNVector64<UInt32>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<Single>; index: Byte): DNVector128<Single>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector64<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<Single>; index: Byte): DNVector128<Single>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} function DuplicateSelectedScalarToVector128(value: DNVector128<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} function DuplicateToVector64(value: Byte): DNVector64<Byte>; overload;
    {class} function DuplicateToVector64(value: Int16): DNVector64<Int16>; overload;
    {class} function DuplicateToVector64(value: Int32): DNVector64<Int32>; overload;
    {class} function DuplicateToVector64(value: SByte): DNVector64<SByte>; overload;
    {class} function DuplicateToVector64(value: Single): DNVector64<Single>; overload;
    {class} function DuplicateToVector64(value: UInt16): DNVector64<UInt16>; overload;
    {class} function DuplicateToVector64(value: UInt32): DNVector64<UInt32>; overload;
    {class} function DuplicateToVector128(value: Byte): DNVector128<Byte>; overload;
    {class} function DuplicateToVector128(value: Int16): DNVector128<Int16>; overload;
    {class} function DuplicateToVector128(value: Int32): DNVector128<Int32>; overload;
    {class} function DuplicateToVector128(value: SByte): DNVector128<SByte>; overload;
    {class} function DuplicateToVector128(value: Single): DNVector128<Single>; overload;
    {class} function DuplicateToVector128(value: UInt16): DNVector128<UInt16>; overload;
    {class} function DuplicateToVector128(value: UInt32): DNVector128<UInt32>; overload;
    {class} function Extract(vector: DNVector64<Byte>; index: Byte): Byte; overload;
    {class} function Extract(vector: DNVector64<Int16>; index: Byte): Int16; overload;
    {class} function Extract(vector: DNVector64<Int32>; index: Byte): Int32; overload;
    {class} function Extract(vector: DNVector64<SByte>; index: Byte): SByte; overload;
    {class} function Extract(vector: DNVector64<Single>; index: Byte): Single; overload;
    {class} function Extract(vector: DNVector64<UInt16>; index: Byte): UInt16; overload;
    {class} function Extract(vector: DNVector64<UInt32>; index: Byte): UInt32; overload;
    {class} function CompareEqual(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareEqual(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareEqual(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareEqual(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareEqual(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareEqual(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareEqual(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareEqual(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareEqual(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareEqual(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareEqual(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareEqual(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareGreaterThan(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function CompareGreaterThan(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareGreaterThan(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareGreaterThan(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareGreaterThan(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareGreaterThan(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareLessThan(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function CompareLessThan(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareLessThan(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareLessThan(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareLessThan(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareLessThan(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareLessThan(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareLessThan(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareLessThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareLessThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareLessThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareLessThan(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareLessThan(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareTest(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function CompareTest(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function CompareTest(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function CompareTest(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function CompareTest(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareTest(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function CompareTest(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function CompareTest(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareTest(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareTest(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareTest(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareTest(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareTest(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareTest(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ConvertToInt32RoundAwayFromZero(value: DNVector64<Single>): DNVector64<Int32>; overload;
    {class} function ConvertToInt32RoundAwayFromZero(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function AddWideningLower(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddWideningLower(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function AddWideningLower(left: DNVector128<Int16>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function AddWideningLower(left: DNVector128<Int32>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function AddWideningLower(left: DNVector128<Int64>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function AddWideningLower(left: DNVector128<UInt16>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function AddWideningLower(left: DNVector128<UInt32>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddWideningLower(left: DNVector128<UInt64>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function AddWideningUpper(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AddWideningUpper(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function AddWideningUpper(left: DNVector128<Int16>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function AddWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function AddWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function AddWideningUpper(left: DNVector128<Int64>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function AddWideningUpper(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function AddWideningUpper(left: DNVector128<UInt16>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AddWideningUpper(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function AddWideningUpper(left: DNVector128<UInt64>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function &And(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function &And(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function &And(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function &And(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function &And(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function &And(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function &And(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function &And(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function &And(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function &And(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function &And(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &And(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &And(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &And(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &And(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &And(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &And(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function &And(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &And(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &And(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function BitwiseClear(value: DNVector64<Byte>; mask: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function BitwiseClear(value: DNVector64<Double>; mask: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function BitwiseClear(value: DNVector64<Int16>; mask: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function BitwiseClear(value: DNVector64<Int32>; mask: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function BitwiseClear(value: DNVector64<Int64>; mask: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function BitwiseClear(value: DNVector64<SByte>; mask: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function BitwiseClear(value: DNVector64<Single>; mask: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function BitwiseClear(value: DNVector64<UInt16>; mask: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function BitwiseClear(value: DNVector64<UInt32>; mask: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function BitwiseClear(value: DNVector64<UInt64>; mask: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function BitwiseClear(value: DNVector128<Byte>; mask: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function BitwiseClear(value: DNVector128<Double>; mask: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function BitwiseClear(value: DNVector128<Int16>; mask: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function BitwiseClear(value: DNVector128<Int32>; mask: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function BitwiseClear(value: DNVector128<Int64>; mask: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function BitwiseClear(value: DNVector128<SByte>; mask: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function BitwiseClear(value: DNVector128<Single>; mask: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function BitwiseClear(value: DNVector128<UInt16>; mask: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function BitwiseClear(value: DNVector128<UInt32>; mask: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function BitwiseClear(value: DNVector128<UInt64>; mask: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function BitwiseSelect(select: DNVector64<Byte>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function BitwiseSelect(select: DNVector64<Double>; left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function BitwiseSelect(select: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function BitwiseSelect(select: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function BitwiseSelect(select: DNVector64<Int64>; left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function BitwiseSelect(select: DNVector64<SByte>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function BitwiseSelect(select: DNVector64<Single>; left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function BitwiseSelect(select: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function BitwiseSelect(select: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function BitwiseSelect(select: DNVector64<UInt64>; left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function BitwiseSelect(select: DNVector128<Byte>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function BitwiseSelect(select: DNVector128<Double>; left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function BitwiseSelect(select: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function BitwiseSelect(select: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function BitwiseSelect(select: DNVector128<Int64>; left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function BitwiseSelect(select: DNVector128<SByte>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function BitwiseSelect(select: DNVector128<Single>; left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function BitwiseSelect(select: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function BitwiseSelect(select: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function BitwiseSelect(select: DNVector128<UInt64>; left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Ceiling(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Ceiling(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CeilingScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function CeilingScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function CompareEqual(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Add(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Add(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Add(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Add(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Add(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Add(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function AddHighNarrowingLower(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<Byte>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<Int16>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<Int32>; left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<SByte>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<UInt16>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function AddHighNarrowingUpper(lower: DNVector64<UInt32>; left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function AddPairwise(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AddPairwise(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AddPairwise(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AddPairwise(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AddPairwise(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AddPairwise(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AddPairwise(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function AddPairwiseWidening(value: DNVector64<Byte>): DNVector64<UInt16>; overload;
    {class} function AddPairwiseWidening(value: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function AddPairwiseWidening(value: DNVector64<SByte>): DNVector64<Int16>; overload;
    {class} function AddPairwiseWidening(value: DNVector64<UInt16>): DNVector64<UInt32>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddPairwiseWidening(value: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector64<UInt16>; value: DNVector64<Byte>): DNVector64<UInt16>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector64<Int32>; value: DNVector64<Int16>): DNVector64<Int32>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector64<Int16>; value: DNVector64<SByte>): DNVector64<Int16>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector64<UInt32>; value: DNVector64<UInt16>): DNVector64<UInt32>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<UInt16>; value: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<Int32>; value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<Int64>; value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<Int16>; value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<UInt32>; value: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AddPairwiseWideningAndAdd(addend: DNVector128<UInt64>; value: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function AddPairwiseWideningAndAddScalar(addend: DNVector64<Int64>; value: DNVector64<Int32>): DNVector64<Int64>; overload;
    {class} function AddPairwiseWideningAndAddScalar(addend: DNVector64<UInt64>; value: DNVector64<UInt32>): DNVector64<UInt64>; overload;
    {class} function AddPairwiseWideningScalar(value: DNVector64<Int32>): DNVector64<Int64>; overload;
    {class} function AddPairwiseWideningScalar(value: DNVector64<UInt32>): DNVector64<UInt64>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector64<Byte>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector64<Int16>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector64<Int32>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector64<SByte>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector64<UInt16>; overload;
    {class} function AddRoundedHighNarrowingLower(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector64<UInt32>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<Byte>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<Byte>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<Int16>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<Int32>; left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int32>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<SByte>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<UInt16>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt16>; overload;
    {class} function AddRoundedHighNarrowingUpper(lower: DNVector64<UInt32>; left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt32>; overload;
    {class} function AddSaturate(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AddSaturate(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AddSaturate(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AddSaturate(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AddSaturate(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AddSaturate(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function AddSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AddSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AddSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AddSaturate(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function AddSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AddSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AddSaturate(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AddSaturate(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function AddSaturateScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function AddSaturateScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function AddScalar(left: DNVector64<Double>; right: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AddScalar(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector64<Int64>; overload;
    {class} function AddScalar(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AddScalar(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector64<UInt64>; overload;
    {class} function AddWideningLower(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function AddWideningLower(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function AddWideningLower(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function AddWideningLower(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function Abs(value: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function Abs(value: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function Abs(value: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function Abs(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Abs(value: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function Abs(value: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function Abs(value: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function Abs(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsSaturate(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AbsSaturate(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AbsSaturate(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AbsSaturate(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AbsSaturate(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AbsSaturate(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AbsScalar(value: DNVector64<Double>): DNVector64<Double>; overload;
    {class} function AbsScalar(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareGreaterThan(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsoluteCompareGreaterThanOrEqual(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsoluteCompareLessThan(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsoluteCompareLessThanOrEqual(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteCompareLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsoluteDifference(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AbsoluteDifference(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function AbsoluteDifference(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function AbsoluteDifference(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function AbsoluteDifference(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function AbsoluteDifference(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AbsoluteDifference(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function AbsoluteDifference(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AbsoluteDifference(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifference(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifference(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function AbsoluteDifference(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AbsoluteDifference(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifference(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<Byte>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<SByte>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<UInt16>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector64<UInt32>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<Byte>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<SByte>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<UInt16>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<UInt64>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningLower(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<UInt16>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<Int32>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector128<Int32>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<Int64>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector128<Int64>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<Int16>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector128<Int16>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<UInt32>; left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningLowerAndAdd(addend: DNVector128<UInt64>; left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector128<UInt64>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<UInt64>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningUpper(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<UInt16>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<Int32>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<Int64>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<Int16>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<UInt32>; left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt32>; overload;
    {class} function AbsoluteDifferenceWideningUpperAndAdd(addend: DNVector128<UInt64>; left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function Add(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Add(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Add(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Add(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Add(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Add(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Add(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Add(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Add(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Add(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.AdvSimd')]
  DNAdvSimd = interface(DNArmBase)
  ['{6843CACF-691D-3A32-A842-7C38F1CADBDB}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAdvSimd = class(TDNGenericImport<DNAdvSimdClass, DNAdvSimd>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNDpClass = interface(DNAdvSimdClass)
  ['{D8E43653-345A-5799-A9ED-809DA3BAD73D}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function DotProduct(addend: DNVector64<Int32>; left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<Int32>; overload;
    {class} function DotProduct(addend: DNVector64<UInt32>; left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<UInt32>; overload;
    {class} function DotProduct(addend: DNVector128<Int32>; left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<Int32>; overload;
    {class} function DotProduct(addend: DNVector128<UInt32>; left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector64<Int32>; left: DNVector64<SByte>; right: DNVector64<SByte>; rightScaledIndex: Byte): DNVector64<Int32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector64<Int32>; left: DNVector64<SByte>; right: DNVector128<SByte>; rightScaledIndex: Byte): DNVector64<Int32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector64<UInt32>; left: DNVector64<Byte>; right: DNVector64<Byte>; rightScaledIndex: Byte): DNVector64<UInt32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector64<UInt32>; left: DNVector64<Byte>; right: DNVector128<Byte>; rightScaledIndex: Byte): DNVector64<UInt32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector128<Int32>; left: DNVector128<SByte>; right: DNVector128<SByte>; rightScaledIndex: Byte): DNVector128<Int32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector128<Int32>; left: DNVector128<SByte>; right: DNVector64<SByte>; rightScaledIndex: Byte): DNVector128<Int32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector128<UInt32>; left: DNVector128<Byte>; right: DNVector128<Byte>; rightScaledIndex: Byte): DNVector128<UInt32>; overload;
    {class} function DotProductBySelectedQuadruplet(addend: DNVector128<UInt32>; left: DNVector128<Byte>; right: DNVector64<Byte>; rightScaledIndex: Byte): DNVector128<UInt32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Dp')]
  DNDp = interface(DNAdvSimd)
  ['{E5665B4A-1647-3C10-B9B0-F870C25A8872}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDp = class(TDNGenericImport<DNDpClass, DNDp>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNRdmClass = interface(DNAdvSimdClass)
  ['{D759984D-B617-5B5E-AE82-4D9AF66BBC60}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function MultiplyRoundedDoublingAndAddSaturateHigh(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndAddSaturateHigh(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingAndAddSaturateHigh(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndAddSaturateHigh(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHigh(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHigh(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHigh(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingAndSubtractSaturateHigh(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(addend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int16>; left: DNVector64<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector64<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector64<Int32>; left: DNVector64<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector64<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector64<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector128<Int16>; left: DNVector128<Int16>; right: DNVector128<Int16>; rightIndex: Byte): DNVector128<Int16>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector64<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;
    {class} function MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(minuend: DNVector128<Int32>; left: DNVector128<Int32>; right: DNVector128<Int32>; rightIndex: Byte): DNVector128<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Rdm')]
  DNRdm = interface(DNAdvSimd)
  ['{B34385F7-CCB1-3422-B4BC-514B6E4DE5A1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRdm = class(TDNGenericImport<DNRdmClass, DNRdm>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNArm_AesClass = interface(DNArmBaseClass)
  ['{D1105A1E-B2DC-55FE-B917-2300FE4A3889}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Decrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function Encrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function InverseMixColumns(value: DNVector128<Byte>): DNVector128<Byte>;
    {class} function MixColumns(value: DNVector128<Byte>): DNVector128<Byte>;
    {class} function PolynomialMultiplyWideningLower(left: DNVector64<Int64>; right: DNVector64<Int64>): DNVector128<Int64>; overload;
    {class} function PolynomialMultiplyWideningLower(left: DNVector64<UInt64>; right: DNVector64<UInt64>): DNVector128<UInt64>; overload;
    {class} function PolynomialMultiplyWideningUpper(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function PolynomialMultiplyWideningUpper(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Aes')]
  DNArm_Aes = interface(DNArmBase)
  ['{705F5188-D467-3912-931F-1BB99C4DF1C5}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNArm_Aes = class(TDNGenericImport<DNArm_AesClass, DNArm_Aes>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNCrc32Class = interface(DNArmBaseClass)
  ['{33E89D40-5C3D-5B4A-B4DB-77A2C24F42F8}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ComputeCrc32(crc: UInt32; data: Byte): UInt32; overload;
    {class} function ComputeCrc32(crc: UInt32; data: UInt16): UInt32; overload;
    {class} function ComputeCrc32(crc: UInt32; data: UInt32): UInt32; overload;
    {class} function ComputeCrc32C(crc: UInt32; data: Byte): UInt32; overload;
    {class} function ComputeCrc32C(crc: UInt32; data: UInt16): UInt32; overload;
    {class} function ComputeCrc32C(crc: UInt32; data: UInt32): UInt32; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Crc32')]
  DNCrc32 = interface(DNArmBase)
  ['{59D04FA4-60CD-3992-A592-A5D95571CC0B}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCrc32 = class(TDNGenericImport<DNCrc32Class, DNCrc32>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNSha1Class = interface(DNArmBaseClass)
  ['{24CA8C22-B091-59B7-A621-A426888B846C}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function FixedRotate(hash_e: DNVector64<UInt32>): DNVector64<UInt32>;
    {class} function HashUpdateChoose(hash_abcd: DNVector128<UInt32>; hash_e: DNVector64<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashUpdateMajority(hash_abcd: DNVector128<UInt32>; hash_e: DNVector64<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashUpdateParity(hash_abcd: DNVector128<UInt32>; hash_e: DNVector64<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function ScheduleUpdate0(w0_3: DNVector128<UInt32>; w4_7: DNVector128<UInt32>; w8_11: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function ScheduleUpdate1(tw0_3: DNVector128<UInt32>; w12_15: DNVector128<UInt32>): DNVector128<UInt32>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Sha1')]
  DNSha1 = interface(DNArmBase)
  ['{B52C22D9-E4CD-3FFC-9488-4A1ADAE5DE19}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSha1 = class(TDNGenericImport<DNSha1Class, DNSha1>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm----------------
  DNSha256Class = interface(DNArmBaseClass)
  ['{E79571E1-2100-5863-9AF9-F1468A6AB076}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function HashUpdate1(hash_abcd: DNVector128<UInt32>; hash_efgh: DNVector128<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashUpdate2(hash_efgh: DNVector128<UInt32>; hash_abcd: DNVector128<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function ScheduleUpdate0(w0_3: DNVector128<UInt32>; w4_7: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function ScheduleUpdate1(w0_3: DNVector128<UInt32>; w8_11: DNVector128<UInt32>; w12_15: DNVector128<UInt32>): DNVector128<UInt32>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Sha256')]
  DNSha256 = interface(DNArmBase)
  ['{7B0C0FEE-7A26-3BED-818C-C6FD1A321789}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSha256 = class(TDNGenericImport<DNSha256Class, DNSha256>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector128Class = interface(DNObjectClass)
  ['{25031047-683D-5CD3-B57E-0A4798508719}']
  { static methods } 

    {class} function AsVector128(value: DNVector2): DNVector128<Single>; overload;
    {class} function AsVector128(value: DNVector3): DNVector128<Single>; overload;
    {class} function AsVector128(value: DNVector4): DNVector128<Single>; overload;
    {class} function AsVector2(value: DNVector128<Single>): DNVector2;
    {class} function AsVector3(value: DNVector128<Single>): DNVector3;
    {class} function AsVector4(value: DNVector128<Single>): DNVector4;
    {class} function Create(value: Byte): DNVector128<Byte>; overload;
    {class} function Create(value: Double): DNVector128<Double>; overload;
    {class} function Create(value: Int16): DNVector128<Int16>; overload;
    {class} function Create(value: Int32): DNVector128<Int32>; overload;
    {class} function Create(value: Int64): DNVector128<Int64>; overload;
    {class} function Create(value: SByte): DNVector128<SByte>; overload;
    {class} function Create(value: Single): DNVector128<Single>; overload;
    {class} function Create(value: UInt16): DNVector128<UInt16>; overload;
    {class} function Create(value: UInt32): DNVector128<UInt32>; overload;
    {class} function Create(value: UInt64): DNVector128<UInt64>; overload;
    {class} function Create(e0: Byte; e1: Byte; e2: Byte; e3: Byte; e4: Byte; e5: Byte; e6: Byte; e7: Byte; e8: Byte; e9: Byte; e10: Byte; e11: Byte; e12: Byte; e13: Byte; e14: Byte; e15: Byte): DNVector128<Byte>; overload;
    {class} function Create(e0: Double; e1: Double): DNVector128<Double>; overload;
    {class} function Create(e0: Int16; e1: Int16; e2: Int16; e3: Int16; e4: Int16; e5: Int16; e6: Int16; e7: Int16): DNVector128<Int16>; overload;
    {class} function Create(e0: Int32; e1: Int32; e2: Int32; e3: Int32): DNVector128<Int32>; overload;
    {class} function Create(e0: Int64; e1: Int64): DNVector128<Int64>; overload;
    {class} function Create(e0: SByte; e1: SByte; e2: SByte; e3: SByte; e4: SByte; e5: SByte; e6: SByte; e7: SByte; e8: SByte; e9: SByte; e10: SByte; e11: SByte; e12: SByte; e13: SByte; e14: SByte; e15: SByte): DNVector128<SByte>; overload;
    {class} function Create(e0: Single; e1: Single; e2: Single; e3: Single): DNVector128<Single>; overload;
    {class} function Create(e0: UInt16; e1: UInt16; e2: UInt16; e3: UInt16; e4: UInt16; e5: UInt16; e6: UInt16; e7: UInt16): DNVector128<UInt16>; overload;
    {class} function Create(e0: UInt32; e1: UInt32; e2: UInt32; e3: UInt32): DNVector128<UInt32>; overload;
    {class} function Create(e0: UInt64; e1: UInt64): DNVector128<UInt64>; overload;
    {class} function Create(lower: DNVector64<Byte>; upper: DNVector64<Byte>): DNVector128<Byte>; overload;
    {class} function Create(lower: DNVector64<Double>; upper: DNVector64<Double>): DNVector128<Double>; overload;
    {class} function Create(lower: DNVector64<Int16>; upper: DNVector64<Int16>): DNVector128<Int16>; overload;
    {class} function Create(lower: DNVector64<Int32>; upper: DNVector64<Int32>): DNVector128<Int32>; overload;
    {class} function Create(lower: DNVector64<Int64>; upper: DNVector64<Int64>): DNVector128<Int64>; overload;
    {class} function Create(lower: DNVector64<SByte>; upper: DNVector64<SByte>): DNVector128<SByte>; overload;
    {class} function Create(lower: DNVector64<Single>; upper: DNVector64<Single>): DNVector128<Single>; overload;
    {class} function Create(lower: DNVector64<UInt16>; upper: DNVector64<UInt16>): DNVector128<UInt16>; overload;
    {class} function Create(lower: DNVector64<UInt32>; upper: DNVector64<UInt32>): DNVector128<UInt32>; overload;
    {class} function Create(lower: DNVector64<UInt64>; upper: DNVector64<UInt64>): DNVector128<UInt64>; overload;
    {class} function CreateScalar(value: Byte): DNVector128<Byte>; overload;
    {class} function CreateScalar(value: Double): DNVector128<Double>; overload;
    {class} function CreateScalar(value: Int16): DNVector128<Int16>; overload;
    {class} function CreateScalar(value: Int32): DNVector128<Int32>; overload;
    {class} function CreateScalar(value: Int64): DNVector128<Int64>; overload;
    {class} function CreateScalar(value: SByte): DNVector128<SByte>; overload;
    {class} function CreateScalar(value: Single): DNVector128<Single>; overload;
    {class} function CreateScalar(value: UInt16): DNVector128<UInt16>; overload;
    {class} function CreateScalar(value: UInt32): DNVector128<UInt32>; overload;
    {class} function CreateScalar(value: UInt64): DNVector128<UInt64>; overload;
    {class} function CreateScalarUnsafe(value: Byte): DNVector128<Byte>; overload;
    {class} function CreateScalarUnsafe(value: Double): DNVector128<Double>; overload;
    {class} function CreateScalarUnsafe(value: Int16): DNVector128<Int16>; overload;
    {class} function CreateScalarUnsafe(value: Int32): DNVector128<Int32>; overload;
    {class} function CreateScalarUnsafe(value: Int64): DNVector128<Int64>; overload;
    {class} function CreateScalarUnsafe(value: SByte): DNVector128<SByte>; overload;
    {class} function CreateScalarUnsafe(value: Single): DNVector128<Single>; overload;
    {class} function CreateScalarUnsafe(value: UInt16): DNVector128<UInt16>; overload;
    {class} function CreateScalarUnsafe(value: UInt32): DNVector128<UInt32>; overload;
    {class} function CreateScalarUnsafe(value: UInt64): DNVector128<UInt64>; overload;

  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector128')]
  DNVector128 = interface(DNObject)
  ['{BF393F20-AB00-3C66-93E2-BDCF3BFC802D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVector128 = class(TDNGenericImport<DNVector128Class, DNVector128>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector256Class = interface(DNObjectClass)
  ['{88D3F19D-D743-5379-A43D-D098E7A9AB73}']
  { static methods } 

    {class} function Create(value: Byte): DNVector256<Byte>; overload;
    {class} function Create(value: Double): DNVector256<Double>; overload;
    {class} function Create(value: Int16): DNVector256<Int16>; overload;
    {class} function Create(value: Int32): DNVector256<Int32>; overload;
    {class} function Create(value: Int64): DNVector256<Int64>; overload;
    {class} function Create(value: SByte): DNVector256<SByte>; overload;
    {class} function Create(value: Single): DNVector256<Single>; overload;
    {class} function Create(value: UInt16): DNVector256<UInt16>; overload;
    {class} function Create(value: UInt32): DNVector256<UInt32>; overload;
    {class} function Create(value: UInt64): DNVector256<UInt64>; overload;
    {class} function Create(e0: Byte; e1: Byte; e2: Byte; e3: Byte; e4: Byte; e5: Byte; e6: Byte; e7: Byte; e8: Byte; e9: Byte; e10: Byte; e11: Byte; e12: Byte; e13: Byte; e14: Byte; e15: Byte; e16: Byte; e17: Byte; e18: Byte; e19: Byte; e20: Byte; e21: Byte; e22: Byte; e23: Byte; e24: Byte; e25: Byte; e26: Byte; e27: Byte; e28: Byte; e29: Byte; e30: Byte; e31: Byte): DNVector256<Byte>; overload;
    {class} function Create(e0: Double; e1: Double; e2: Double; e3: Double): DNVector256<Double>; overload;
    {class} function Create(e0: Int16; e1: Int16; e2: Int16; e3: Int16; e4: Int16; e5: Int16; e6: Int16; e7: Int16; e8: Int16; e9: Int16; e10: Int16; e11: Int16; e12: Int16; e13: Int16; e14: Int16; e15: Int16): DNVector256<Int16>; overload;
    {class} function Create(e0: Int32; e1: Int32; e2: Int32; e3: Int32; e4: Int32; e5: Int32; e6: Int32; e7: Int32): DNVector256<Int32>; overload;
    {class} function Create(e0: Int64; e1: Int64; e2: Int64; e3: Int64): DNVector256<Int64>; overload;
    {class} function Create(e0: SByte; e1: SByte; e2: SByte; e3: SByte; e4: SByte; e5: SByte; e6: SByte; e7: SByte; e8: SByte; e9: SByte; e10: SByte; e11: SByte; e12: SByte; e13: SByte; e14: SByte; e15: SByte; e16: SByte; e17: SByte; e18: SByte; e19: SByte; e20: SByte; e21: SByte; e22: SByte; e23: SByte; e24: SByte; e25: SByte; e26: SByte; e27: SByte; e28: SByte; e29: SByte; e30: SByte; e31: SByte): DNVector256<SByte>; overload;
    {class} function Create(e0: Single; e1: Single; e2: Single; e3: Single; e4: Single; e5: Single; e6: Single; e7: Single): DNVector256<Single>; overload;
    {class} function Create(e0: UInt16; e1: UInt16; e2: UInt16; e3: UInt16; e4: UInt16; e5: UInt16; e6: UInt16; e7: UInt16; e8: UInt16; e9: UInt16; e10: UInt16; e11: UInt16; e12: UInt16; e13: UInt16; e14: UInt16; e15: UInt16): DNVector256<UInt16>; overload;
    {class} function Create(e0: UInt32; e1: UInt32; e2: UInt32; e3: UInt32; e4: UInt32; e5: UInt32; e6: UInt32; e7: UInt32): DNVector256<UInt32>; overload;
    {class} function Create(e0: UInt64; e1: UInt64; e2: UInt64; e3: UInt64): DNVector256<UInt64>; overload;
    {class} function Create(lower: DNVector128<Byte>; upper: DNVector128<Byte>): DNVector256<Byte>; overload;
    {class} function Create(lower: DNVector128<Double>; upper: DNVector128<Double>): DNVector256<Double>; overload;
    {class} function Create(lower: DNVector128<Int16>; upper: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function Create(lower: DNVector128<Int32>; upper: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function Create(lower: DNVector128<Int64>; upper: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function Create(lower: DNVector128<SByte>; upper: DNVector128<SByte>): DNVector256<SByte>; overload;
    {class} function Create(lower: DNVector128<Single>; upper: DNVector128<Single>): DNVector256<Single>; overload;
    {class} function Create(lower: DNVector128<UInt16>; upper: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function Create(lower: DNVector128<UInt32>; upper: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function Create(lower: DNVector128<UInt64>; upper: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function CreateScalar(value: Byte): DNVector256<Byte>; overload;
    {class} function CreateScalar(value: Double): DNVector256<Double>; overload;
    {class} function CreateScalar(value: Int16): DNVector256<Int16>; overload;
    {class} function CreateScalar(value: Int32): DNVector256<Int32>; overload;
    {class} function CreateScalar(value: Int64): DNVector256<Int64>; overload;
    {class} function CreateScalar(value: SByte): DNVector256<SByte>; overload;
    {class} function CreateScalar(value: Single): DNVector256<Single>; overload;
    {class} function CreateScalar(value: UInt16): DNVector256<UInt16>; overload;
    {class} function CreateScalar(value: UInt32): DNVector256<UInt32>; overload;
    {class} function CreateScalar(value: UInt64): DNVector256<UInt64>; overload;
    {class} function CreateScalarUnsafe(value: Byte): DNVector256<Byte>; overload;
    {class} function CreateScalarUnsafe(value: Double): DNVector256<Double>; overload;
    {class} function CreateScalarUnsafe(value: Int16): DNVector256<Int16>; overload;
    {class} function CreateScalarUnsafe(value: Int32): DNVector256<Int32>; overload;
    {class} function CreateScalarUnsafe(value: Int64): DNVector256<Int64>; overload;
    {class} function CreateScalarUnsafe(value: SByte): DNVector256<SByte>; overload;
    {class} function CreateScalarUnsafe(value: Single): DNVector256<Single>; overload;
    {class} function CreateScalarUnsafe(value: UInt16): DNVector256<UInt16>; overload;
    {class} function CreateScalarUnsafe(value: UInt32): DNVector256<UInt32>; overload;
    {class} function CreateScalarUnsafe(value: UInt64): DNVector256<UInt64>; overload;

  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector256')]
  DNVector256 = interface(DNObject)
  ['{05E0A66E-4980-34C1-A6D0-E4763704EF20}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVector256 = class(TDNGenericImport<DNVector256Class, DNVector256>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector64Class = interface(DNObjectClass)
  ['{0EBE6340-8A5D-52E1-ABFD-237817A5D2A0}']
  { static methods } 

    {class} function Create(value: Byte): DNVector64<Byte>; overload;
    {class} function Create(value: Double): DNVector64<Double>; overload;
    {class} function Create(value: Int16): DNVector64<Int16>; overload;
    {class} function Create(value: Int32): DNVector64<Int32>; overload;
    {class} function Create(value: Int64): DNVector64<Int64>; overload;
    {class} function Create(value: SByte): DNVector64<SByte>; overload;
    {class} function Create(value: Single): DNVector64<Single>; overload;
    {class} function Create(value: UInt16): DNVector64<UInt16>; overload;
    {class} function Create(value: UInt32): DNVector64<UInt32>; overload;
    {class} function Create(value: UInt64): DNVector64<UInt64>; overload;
    {class} function Create(e0: Byte; e1: Byte; e2: Byte; e3: Byte; e4: Byte; e5: Byte; e6: Byte; e7: Byte): DNVector64<Byte>; overload;
    {class} function Create(e0: Int16; e1: Int16; e2: Int16; e3: Int16): DNVector64<Int16>; overload;
    {class} function Create(e0: Int32; e1: Int32): DNVector64<Int32>; overload;
    {class} function Create(e0: SByte; e1: SByte; e2: SByte; e3: SByte; e4: SByte; e5: SByte; e6: SByte; e7: SByte): DNVector64<SByte>; overload;
    {class} function Create(e0: Single; e1: Single): DNVector64<Single>; overload;
    {class} function Create(e0: UInt16; e1: UInt16; e2: UInt16; e3: UInt16): DNVector64<UInt16>; overload;
    {class} function Create(e0: UInt32; e1: UInt32): DNVector64<UInt32>; overload;
    {class} function CreateScalar(value: Byte): DNVector64<Byte>; overload;
    {class} function CreateScalar(value: Double): DNVector64<Double>; overload;
    {class} function CreateScalar(value: Int16): DNVector64<Int16>; overload;
    {class} function CreateScalar(value: Int32): DNVector64<Int32>; overload;
    {class} function CreateScalar(value: Int64): DNVector64<Int64>; overload;
    {class} function CreateScalar(value: SByte): DNVector64<SByte>; overload;
    {class} function CreateScalar(value: Single): DNVector64<Single>; overload;
    {class} function CreateScalar(value: UInt16): DNVector64<UInt16>; overload;
    {class} function CreateScalar(value: UInt32): DNVector64<UInt32>; overload;
    {class} function CreateScalar(value: UInt64): DNVector64<UInt64>; overload;
    {class} function CreateScalarUnsafe(value: Byte): DNVector64<Byte>; overload;
    {class} function CreateScalarUnsafe(value: Int16): DNVector64<Int16>; overload;
    {class} function CreateScalarUnsafe(value: Int32): DNVector64<Int32>; overload;
    {class} function CreateScalarUnsafe(value: SByte): DNVector64<SByte>; overload;
    {class} function CreateScalarUnsafe(value: Single): DNVector64<Single>; overload;
    {class} function CreateScalarUnsafe(value: UInt16): DNVector64<UInt16>; overload;
    {class} function CreateScalarUnsafe(value: UInt32): DNVector64<UInt32>; overload;

  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector64')]
  DNVector64 = interface(DNObject)
  ['{211545AA-2841-3A3B-A1B5-842562FE4419}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVector64 = class(TDNGenericImport<DNVector64Class, DNVector64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNX86BaseClass = interface(DNObjectClass)
  ['{F1B38B3A-9A10-51A2-A6C9-A96CA320B3B9}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function CpuId(functionId: Int32; subFunctionId: Int32): DNValueTuple<Int32, Int32, Int32, Int32>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.X86Base')]
  DNX86Base = interface(DNObject)
  ['{0586B574-FB0B-3486-A1D5-C0B8566C435E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNX86Base = class(TDNGenericImport<DNX86BaseClass, DNX86Base>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi1Class = interface(DNX86BaseClass)
  ['{793ED638-0EBB-57B6-8AF7-478DE88C4730}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function AndNot(left: UInt32; right: UInt32): UInt32;
    {class} function BitFieldExtract(value: UInt32; start: Byte; length: Byte): UInt32; overload;
    {class} function BitFieldExtract(value: UInt32; control: UInt16): UInt32; overload;
    {class} function ExtractLowestSetBit(value: UInt32): UInt32;
    {class} function GetMaskUpToLowestSetBit(value: UInt32): UInt32;
    {class} function ResetLowestSetBit(value: UInt32): UInt32;
    {class} function TrailingZeroCount(value: UInt32): UInt32;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi1')]
  DNBmi1 = interface(DNX86Base)
  ['{75C43EB2-BC36-3FF2-91AA-FAC759569964}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBmi1 = class(TDNGenericImport<DNBmi1Class, DNBmi1>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi2Class = interface(DNX86BaseClass)
  ['{255AFE93-7209-512B-8F14-9DFE4E9E99B0}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ZeroHighBits(value: UInt32; index: UInt32): UInt32;
    {class} function MultiplyNoFlags(left: UInt32; right: UInt32): UInt32; overload;
    {class} function MultiplyNoFlags(left: UInt32; right: UInt32; low: PUInt32): UInt32; overload;
    {class} function ParallelBitDeposit(value: UInt32; mask: UInt32): UInt32;
    {class} function ParallelBitExtract(value: UInt32; mask: UInt32): UInt32;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi2')]
  DNBmi2 = interface(DNX86Base)
  ['{611AD6C4-36AE-3A48-971B-6CCEFB641C9D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBmi2 = class(TDNGenericImport<DNBmi2Class, DNBmi2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNLzcntClass = interface(DNX86BaseClass)
  ['{14EDDA47-D3C8-5A9A-9B0C-CCC644D738C6}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingZeroCount(value: UInt32): UInt32;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Lzcnt')]
  DNLzcnt = interface(DNX86Base)
  ['{014D879E-9894-321C-9B3F-9F0966149849}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLzcnt = class(TDNGenericImport<DNLzcntClass, DNLzcnt>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSseClass = interface(DNX86BaseClass)
  ['{7FAAFC25-9DF9-5577-9ADD-AA5AA9884DB7}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function UnpackHigh(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function UnpackLow(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &Xor(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function Add(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function AddScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &And(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function AndNot(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedLessThan(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedLessThan(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrderedNotEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarUnorderedNotEqual(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareScalarNotEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarNotGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarNotGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarNotLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarNotLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareOrdered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarOrdered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareUnordered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareScalarUnordered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function ConvertToInt32(value: DNVector128<Single>): Int32;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: Int32): DNVector128<Single>;
    {class} function ConvertToInt32WithTruncation(value: DNVector128<Single>): Int32;
    {class} function Divide(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function DivideScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function LoadVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadScalarVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadAlignedVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadHigh(lower: DNVector128<Single>; address: PSingle): DNVector128<Single>;
    {class} function LoadLow(upper: DNVector128<Single>; address: PSingle): DNVector128<Single>;
    {class} function Max(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MaxScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function Min(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MinScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveHighToLow(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveLowToHigh(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveMask(value: DNVector128<Single>): Int32;
    {class} function Multiply(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MultiplyScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &Or(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} procedure Prefetch0(var address: DNVoid);
    {class} procedure Prefetch1(var address: DNVoid);
    {class} procedure Prefetch2(var address: DNVoid);
    {class} procedure PrefetchNonTemporal(var address: DNVoid);
    {class} function Reciprocal(value: DNVector128<Single>): DNVector128<Single>;
    {class} function ReciprocalScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalSqrt(value: DNVector128<Single>): DNVector128<Single>;
    {class} function ReciprocalSqrtScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalSqrtScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Shuffle(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>;
    {class} function Sqrt(value: DNVector128<Single>): DNVector128<Single>;
    {class} function SqrtScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function SqrtScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} procedure StoreAligned(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreAlignedNonTemporal(address: PSingle; source: DNVector128<Single>);
    {class} procedure Store(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreFence;
    {class} procedure StoreScalar(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreHigh(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreLow(address: PSingle; source: DNVector128<Single>);
    {class} function Subtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function SubtractScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse')]
  DNSse = interface(DNX86Base)
  ['{1709FBA0-98DA-398E-8D0E-7B91A474D5BB}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse = class(TDNGenericImport<DNSseClass, DNSse>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse2Class = interface(DNSseClass)
  ['{5ECBC1F2-58B9-5F08-8C45-89EFA4E1FFF9}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} procedure StoreHigh(address: PDouble; source: DNVector128<Double>);
    {class} procedure StoreLow(address: PDouble; source: DNVector128<Double>);
    {class} procedure StoreNonTemporal(address: PInt32; value: Int32); overload;
    {class} procedure StoreNonTemporal(address: PUInt32; value: UInt32); overload;
    {class} function Subtract(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Subtract(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Subtract(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Subtract(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Subtract(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Subtract(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Subtract(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Subtract(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Subtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function SubtractScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function SubtractSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnpackHigh(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnpackHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnpackHigh(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnpackHigh(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function UnpackLow(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnpackLow(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnpackLow(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnpackLow(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackLow(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnpackLow(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnpackLow(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnpackLow(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnpackLow(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &Xor(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Xor(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Xor(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Xor(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Xor(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Xor(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Xor(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Xor(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &Xor(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Shuffle(value: DNVector128<UInt32>; control: Byte): DNVector128<UInt32>; overload;
    {class} function Shuffle(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function ShuffleHigh(value: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function ShuffleHigh(value: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function ShuffleLow(value: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function ShuffleLow(value: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt16>; count: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<SByte>; numBytes: Byte): DNVector128<SByte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Byte>; numBytes: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int16>; numBytes: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt16>; numBytes: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int32>; numBytes: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt32>; numBytes: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int64>; numBytes: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt64>; numBytes: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt16>; count: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<SByte>; numBytes: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Byte>; numBytes: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int16>; numBytes: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt16>; numBytes: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int32>; numBytes: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt32>; numBytes: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int64>; numBytes: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt64>; numBytes: Byte): DNVector128<UInt64>; overload;
    {class} function Sqrt(value: DNVector128<Double>): DNVector128<Double>;
    {class} function SqrtScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function SqrtScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} procedure StoreScalar(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure StoreScalar(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure StoreScalar(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreScalar(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure StoreScalar(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreAligned(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure StoreAligned(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure StoreAligned(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure StoreAligned(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure StoreAligned(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure StoreAligned(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure StoreAligned(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreAligned(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreAligned(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure Store(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure Store(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure Store(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure Store(address: PDouble; source: DNVector128<Double>); overload;
    {class} function ConvertToVector128Single(value: DNVector128<Int32>): DNVector128<Single>; overload;
    {class} function ConvertToVector128Single(value: DNVector128<Double>): DNVector128<Single>; overload;
    {class} function ConvertToVector128Double(value: DNVector128<Int32>): DNVector128<Double>; overload;
    {class} function ConvertToVector128Double(value: DNVector128<Single>): DNVector128<Double>; overload;
    {class} function ConvertToInt32(value: DNVector128<Double>): Int32; overload;
    {class} function ConvertToInt32(value: DNVector128<Int32>): Int32; overload;
    {class} function ConvertToUInt32(value: DNVector128<UInt32>): UInt32;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: Int32): DNVector128<Double>; overload;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: DNVector128<Single>): DNVector128<Double>; overload;
    {class} function ConvertScalarToVector128Int32(value: Int32): DNVector128<Int32>;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: DNVector128<Double>): DNVector128<Single>;
    {class} function ConvertScalarToVector128UInt32(value: UInt32): DNVector128<UInt32>;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector128<Double>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32WithTruncation(value: DNVector128<Double>): Int32;
    {class} function Divide(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function DivideScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function Extract(value: DNVector128<UInt16>; index: Byte): UInt16;
    {class} function Insert(value: DNVector128<Int16>; data: Int16; index: Byte): DNVector128<Int16>; overload;
    {class} function Insert(value: DNVector128<UInt16>; data: UInt16; index: Byte): DNVector128<UInt16>; overload;
    {class} function LoadVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function LoadVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadScalarVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadAlignedVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAlignedVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAlignedVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAlignedVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadAlignedVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAlignedVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadAlignedVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAlignedVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function LoadAlignedVector128(address: PDouble): DNVector128<Double>; overload;
    {class} procedure LoadFence;
    {class} function LoadHigh(lower: DNVector128<Double>; address: PDouble): DNVector128<Double>;
    {class} function LoadLow(upper: DNVector128<Double>; address: PDouble): DNVector128<Double>;
    {class} function LoadScalarVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadScalarVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadScalarVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadScalarVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} procedure MaskMove(source: DNVector128<SByte>; mask: DNVector128<SByte>; address: PSByte); overload;
    {class} procedure MaskMove(source: DNVector128<Byte>; mask: DNVector128<Byte>; address: PByte); overload;
    {class} function Max(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Max(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Max(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MaxScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} procedure MemoryFence;
    {class} function Min(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Min(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Min(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MinScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MoveScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MoveMask(value: DNVector128<SByte>): Int32; overload;
    {class} function MoveMask(value: DNVector128<Byte>): Int32; overload;
    {class} function MoveMask(value: DNVector128<Double>): Int32; overload;
    {class} function MoveScalar(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function MoveScalar(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Multiply(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function Multiply(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MultiplyHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyHigh(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplyAddAdjacent(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>;
    {class} function MultiplyLow(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyLow(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Or(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Or(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Or(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Or(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Or(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Or(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Or(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Or(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &Or(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function PackSignedSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function PackSignedSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function PackUnsignedSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Byte>;
    {class} function SumAbsoluteDifferences(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<UInt16>;
    {class} function Shuffle(value: DNVector128<Int32>; control: Byte): DNVector128<Int32>; overload;
    {class} function Add(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Add(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Add(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Add(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Add(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Add(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Add(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Add(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Add(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function AddScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AddSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AddSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AddSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AddSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &And(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &And(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &And(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &And(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &And(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &And(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &And(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &And(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &And(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function AndNot(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AndNot(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AndNot(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AndNot(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AndNot(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AndNot(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AndNot(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function AndNot(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function AndNot(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Average(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Average(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareEqual(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareEqual(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareEqual(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareEqual(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareEqual(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareEqual(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareScalarOrderedEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareGreaterThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareScalarOrderedGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarOrderedGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareLessThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareLessThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareLessThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareScalarOrderedLessThan(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedLessThan(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarOrderedLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarOrderedNotEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarUnorderedNotEqual(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareScalarNotEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarNotGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarNotGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarNotLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarNotLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareOrdered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarOrdered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareUnordered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareScalarUnordered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function ConvertToVector128Int32(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Double>): DNVector128<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse2')]
  DNSse2 = interface(DNSse)
  ['{EFF9B759-5D45-3DCD-8308-C211537C644A}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse2 = class(TDNGenericImport<DNSse2Class, DNSse2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNX86_AesClass = interface(DNSse2Class)
  ['{91A14A09-F7A6-5FA6-95D3-53FD9FCEEB69}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Decrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function DecryptLast(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function Encrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function EncryptLast(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function InverseMixColumns(value: DNVector128<Byte>): DNVector128<Byte>;
    {class} function KeygenAssist(value: DNVector128<Byte>; control: Byte): DNVector128<Byte>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Aes')]
  DNX86_Aes = interface(DNSse2)
  ['{24FEC1B7-8342-352F-A426-4D140553C161}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNX86_Aes = class(TDNGenericImport<DNX86_AesClass, DNX86_Aes>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPclmulqdqClass = interface(DNSse2Class)
  ['{CED4B0B2-A8D7-54DC-95F0-C6422F73C9BD}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function CarrylessMultiply(left: DNVector128<Int64>; right: DNVector128<Int64>; control: Byte): DNVector128<Int64>; overload;
    {class} function CarrylessMultiply(left: DNVector128<UInt64>; right: DNVector128<UInt64>; control: Byte): DNVector128<UInt64>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Pclmulqdq')]
  DNPclmulqdq = interface(DNSse2)
  ['{02C6C0A9-CA72-3BA3-A1CD-748253850EEC}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPclmulqdq = class(TDNGenericImport<DNPclmulqdqClass, DNPclmulqdq>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse3Class = interface(DNSse2Class)
  ['{3382D9EF-579D-5E73-828D-EEE19A2DB8E3}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function AddSubtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AddSubtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function HorizontalAdd(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function HorizontalAdd(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function LoadAndDuplicateToVector128(address: PDouble): DNVector128<Double>;
    {class} function LoadDquVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadDquVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadDquVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadDquVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadDquVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadDquVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadDquVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadDquVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function MoveAndDuplicate(source: DNVector128<Double>): DNVector128<Double>;
    {class} function MoveHighAndDuplicate(source: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveLowAndDuplicate(source: DNVector128<Single>): DNVector128<Single>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse3')]
  DNSse3 = interface(DNSse2)
  ['{56B44A74-4BBB-3B55-8303-DD64ADCA0126}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse3 = class(TDNGenericImport<DNSse3Class, DNSse3>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSsse3Class = interface(DNSse3Class)
  ['{FCFB9704-8744-5BAD-A0D8-1D87DB1AB059}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Abs(value: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function Abs(value: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function Abs(value: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function AlignRight(left: DNVector128<SByte>; right: DNVector128<SByte>; mask: Byte): DNVector128<SByte>; overload;
    {class} function AlignRight(left: DNVector128<Byte>; right: DNVector128<Byte>; mask: Byte): DNVector128<Byte>; overload;
    {class} function AlignRight(left: DNVector128<Int16>; right: DNVector128<Int16>; mask: Byte): DNVector128<Int16>; overload;
    {class} function AlignRight(left: DNVector128<UInt16>; right: DNVector128<UInt16>; mask: Byte): DNVector128<UInt16>; overload;
    {class} function AlignRight(left: DNVector128<Int32>; right: DNVector128<Int32>; mask: Byte): DNVector128<Int32>; overload;
    {class} function AlignRight(left: DNVector128<UInt32>; right: DNVector128<UInt32>; mask: Byte): DNVector128<UInt32>; overload;
    {class} function AlignRight(left: DNVector128<Int64>; right: DNVector128<Int64>; mask: Byte): DNVector128<Int64>; overload;
    {class} function AlignRight(left: DNVector128<UInt64>; right: DNVector128<UInt64>; mask: Byte): DNVector128<UInt64>; overload;
    {class} function HorizontalAdd(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function HorizontalAdd(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function HorizontalAddSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function HorizontalSubtract(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function HorizontalSubtractSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function MultiplyAddAdjacent(left: DNVector128<Byte>; right: DNVector128<SByte>): DNVector128<Int16>;
    {class} function MultiplyHighRoundScale(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function Shuffle(value: DNVector128<SByte>; mask: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Shuffle(value: DNVector128<Byte>; mask: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Sign(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Sign(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Sign(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Ssse3')]
  DNSsse3 = interface(DNSse3)
  ['{32BDAD0F-F037-32DC-9DA5-2BC0D7A1215A}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSsse3 = class(TDNGenericImport<DNSsse3Class, DNSsse3>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse41Class = interface(DNSsse3Class)
  ['{2DD20054-4AA8-53A7-9B9A-549B1C9C662F}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function RoundToPositiveInfinity(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZero(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirection(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNearestIntegerScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZeroScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNearestIntegerScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinityScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToPositiveInfinityScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZeroScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestIntegerScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZeroScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundCurrentDirectionScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestIntegerScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinityScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinityScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZeroScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function TestC(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestC(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestZ(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function Blend(left: DNVector128<Int16>; right: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function Blend(left: DNVector128<UInt16>; right: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function Blend(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function Blend(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function BlendVariable(left: DNVector128<SByte>; right: DNVector128<SByte>; mask: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function BlendVariable(left: DNVector128<Byte>; right: DNVector128<Byte>; mask: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function BlendVariable(left: DNVector128<Int16>; right: DNVector128<Int16>; mask: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function BlendVariable(left: DNVector128<UInt16>; right: DNVector128<UInt16>; mask: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function BlendVariable(left: DNVector128<Int32>; right: DNVector128<Int32>; mask: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function BlendVariable(left: DNVector128<UInt32>; right: DNVector128<UInt32>; mask: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function BlendVariable(left: DNVector128<Int64>; right: DNVector128<Int64>; mask: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function BlendVariable(left: DNVector128<UInt64>; right: DNVector128<UInt64>; mask: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function BlendVariable(left: DNVector128<Single>; right: DNVector128<Single>; mask: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function BlendVariable(left: DNVector128<Double>; right: DNVector128<Double>; mask: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Ceiling(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Ceiling(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CeilingScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareEqual(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareEqual(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ConvertToVector128Int16(value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int16(value: DNVector128<Byte>): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<SByte>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Byte>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<UInt16>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<SByte>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Byte>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Int16>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<UInt16>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<UInt32>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int16(address: PSByte): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int16(address: PByte): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int32(address: PSByte): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(address: PByte): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(address: PInt16): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(address: PUInt16): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int64(address: PSByte): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(address: PByte): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(address: PInt16): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(address: PUInt16): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(address: PInt32): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(address: PUInt32): DNVector128<Int64>; overload;
    {class} function DotProduct(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function DotProduct(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function Extract(value: DNVector128<Byte>; index: Byte): Byte; overload;
    {class} function Extract(value: DNVector128<Int32>; index: Byte): Int32; overload;
    {class} function Extract(value: DNVector128<UInt32>; index: Byte): UInt32; overload;
    {class} function Extract(value: DNVector128<Single>; index: Byte): Single; overload;
    {class} function Floor(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Floor(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function FloorScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Insert(value: DNVector128<SByte>; data: SByte; index: Byte): DNVector128<SByte>; overload;
    {class} function Insert(value: DNVector128<Byte>; data: Byte; index: Byte): DNVector128<Byte>; overload;
    {class} function Insert(value: DNVector128<Int32>; data: Int32; index: Byte): DNVector128<Int32>; overload;
    {class} function Insert(value: DNVector128<UInt32>; data: UInt32; index: Byte): DNVector128<UInt32>; overload;
    {class} function Insert(value: DNVector128<Single>; data: DNVector128<Single>; index: Byte): DNVector128<Single>; overload;
    {class} function Max(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Max(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Max(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Max(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Min(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Min(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Min(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Min(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MinHorizontal(value: DNVector128<UInt16>): DNVector128<UInt16>;
    {class} function MultipleSumAbsoluteDifferences(left: DNVector128<Byte>; right: DNVector128<Byte>; mask: Byte): DNVector128<UInt16>;
    {class} function Multiply(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>;
    {class} function MultiplyLow(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MultiplyLow(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function PackUnsignedSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<UInt16>;
    {class} function RoundToNearestInteger(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZero(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundCurrentDirection(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestInteger(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector128<Double>): DNVector128<Double>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse41')]
  DNSse41 = interface(DNSsse3)
  ['{94C447E7-0C42-3127-B816-AA7AA82C6BA8}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse41 = class(TDNGenericImport<DNSse41Class, DNSse41>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse42Class = interface(DNSse41Class)
  ['{6DD11E51-C6F7-5638-812A-0BD614D796F7}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function CompareGreaterThan(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>;
    {class} function Crc32(crc: UInt32; data: Byte): UInt32; overload;
    {class} function Crc32(crc: UInt32; data: UInt16): UInt32; overload;
    {class} function Crc32(crc: UInt32; data: UInt32): UInt32; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse42')]
  DNSse42 = interface(DNSse41)
  ['{9F4036D9-9D70-3233-AE2F-FEC824B0E434}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse42 = class(TDNGenericImport<DNSse42Class, DNSse42>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvxClass = interface(DNSse42Class)
  ['{3F56FABB-BC0C-53B4-A4CE-380BEADBCD8C}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} procedure StoreAligned(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure StoreAligned(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure StoreAligned(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure StoreAligned(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure StoreAligned(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure StoreAligned(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure StoreAligned(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure StoreAligned(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure StoreAligned(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure StoreAligned(address: PDouble; source: DNVector256<Double>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PDouble; source: DNVector256<Double>); overload;
    {class} procedure Store(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure Store(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure Store(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure Store(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure Store(address: PDouble; source: DNVector256<Double>); overload;
    {class} function Subtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Subtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function TestC(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestC(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function TestC(left: DNVector256<Byte>; right: DNVector256<Byte>): Boolean; overload;
    {class} function TestC(left: DNVector256<SByte>; right: DNVector256<SByte>): Boolean; overload;
    {class} function TestC(left: DNVector256<Int16>; right: DNVector256<Int16>): Boolean; overload;
    {class} function TestC(left: DNVector256<UInt16>; right: DNVector256<UInt16>): Boolean; overload;
    {class} function TestC(left: DNVector256<Int32>; right: DNVector256<Int32>): Boolean; overload;
    {class} function TestC(left: DNVector256<UInt32>; right: DNVector256<UInt32>): Boolean; overload;
    {class} function TestC(left: DNVector256<Int64>; right: DNVector256<Int64>): Boolean; overload;
    {class} function TestC(left: DNVector256<UInt64>; right: DNVector256<UInt64>): Boolean; overload;
    {class} function TestC(left: DNVector256<Single>; right: DNVector256<Single>): Boolean; overload;
    {class} function TestC(left: DNVector256<Double>; right: DNVector256<Double>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Byte>; right: DNVector256<Byte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<SByte>; right: DNVector256<SByte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Int16>; right: DNVector256<Int16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<UInt16>; right: DNVector256<UInt16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Int32>; right: DNVector256<Int32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<UInt32>; right: DNVector256<UInt32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Int64>; right: DNVector256<Int64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<UInt64>; right: DNVector256<UInt64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Single>; right: DNVector256<Single>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector256<Double>; right: DNVector256<Double>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Byte>; right: DNVector256<Byte>): Boolean; overload;
    {class} function TestZ(left: DNVector256<SByte>; right: DNVector256<SByte>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Int16>; right: DNVector256<Int16>): Boolean; overload;
    {class} function TestZ(left: DNVector256<UInt16>; right: DNVector256<UInt16>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Int32>; right: DNVector256<Int32>): Boolean; overload;
    {class} function TestZ(left: DNVector256<UInt32>; right: DNVector256<UInt32>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Int64>; right: DNVector256<Int64>): Boolean; overload;
    {class} function TestZ(left: DNVector256<UInt64>; right: DNVector256<UInt64>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Single>; right: DNVector256<Single>): Boolean; overload;
    {class} function TestZ(left: DNVector256<Double>; right: DNVector256<Double>): Boolean; overload;
    {class} function UnpackHigh(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function UnpackHigh(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function UnpackLow(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function UnpackLow(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &Xor(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &Xor(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function InsertVector128(value: DNVector256<UInt32>; data: DNVector128<UInt32>; index: Byte): DNVector256<UInt32>; overload;
    {class} function InsertVector128(value: DNVector256<Int64>; data: DNVector128<Int64>; index: Byte): DNVector256<Int64>; overload;
    {class} function InsertVector128(value: DNVector256<UInt64>; data: DNVector128<UInt64>; index: Byte): DNVector256<UInt64>; overload;
    {class} function InsertVector128(value: DNVector256<Single>; data: DNVector128<Single>; index: Byte): DNVector256<Single>; overload;
    {class} function InsertVector128(value: DNVector256<Double>; data: DNVector128<Double>; index: Byte): DNVector256<Double>; overload;
    {class} function LoadVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function LoadVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function LoadVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function LoadAlignedVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadAlignedVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadAlignedVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadAlignedVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadAlignedVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadAlignedVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadAlignedVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadAlignedVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function LoadAlignedVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function LoadAlignedVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function LoadDquVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadDquVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadDquVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadDquVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadDquVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadDquVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadDquVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadDquVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function MaskLoad(address: PSingle; mask: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MaskLoad(address: PDouble; mask: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MaskLoad(address: PSingle; mask: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MaskLoad(address: PDouble; mask: DNVector256<Double>): DNVector256<Double>; overload;
    {class} procedure MaskStore(address: PSingle; mask: DNVector128<Single>; source: DNVector128<Single>); overload;
    {class} procedure MaskStore(address: PDouble; mask: DNVector128<Double>; source: DNVector128<Double>); overload;
    {class} procedure MaskStore(address: PSingle; mask: DNVector256<Single>; source: DNVector256<Single>); overload;
    {class} procedure MaskStore(address: PDouble; mask: DNVector256<Double>; source: DNVector256<Double>); overload;
    {class} function Max(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Max(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Min(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Min(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MoveMask(value: DNVector256<Single>): Int32; overload;
    {class} function MoveMask(value: DNVector256<Double>): Int32; overload;
    {class} function Multiply(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Multiply(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &Or(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &Or(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Permute(value: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function Permute(value: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function Permute(value: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Permute(value: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function Permute2x128(left: DNVector256<Byte>; right: DNVector256<Byte>; control: Byte): DNVector256<Byte>; overload;
    {class} function Permute2x128(left: DNVector256<SByte>; right: DNVector256<SByte>; control: Byte): DNVector256<SByte>; overload;
    {class} function Permute2x128(left: DNVector256<Int16>; right: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function Permute2x128(left: DNVector256<UInt16>; right: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Permute2x128(left: DNVector256<Int32>; right: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Permute2x128(left: DNVector256<UInt32>; right: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function Permute2x128(left: DNVector256<Int64>; right: DNVector256<Int64>; control: Byte): DNVector256<Int64>; overload;
    {class} function Permute2x128(left: DNVector256<UInt64>; right: DNVector256<UInt64>; control: Byte): DNVector256<UInt64>; overload;
    {class} function Permute2x128(left: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Permute2x128(left: DNVector256<Double>; right: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function PermuteVar(left: DNVector128<Single>; control: DNVector128<Int32>): DNVector128<Single>; overload;
    {class} function PermuteVar(left: DNVector128<Double>; control: DNVector128<Int64>): DNVector128<Double>; overload;
    {class} function PermuteVar(left: DNVector256<Single>; control: DNVector256<Int32>): DNVector256<Single>; overload;
    {class} function PermuteVar(left: DNVector256<Double>; control: DNVector256<Int64>): DNVector256<Double>; overload;
    {class} function Reciprocal(value: DNVector256<Single>): DNVector256<Single>;
    {class} function ReciprocalSqrt(value: DNVector256<Single>): DNVector256<Single>;
    {class} function RoundToNearestInteger(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToZero(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundCurrentDirection(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToNearestInteger(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToZero(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundCurrentDirection(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Shuffle(value: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Shuffle(value: DNVector256<Double>; right: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function Sqrt(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Sqrt(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Add(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Add(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function AddSubtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function AddSubtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &And(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &And(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function AndNot(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function AndNot(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Blend(left: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Blend(left: DNVector256<Double>; right: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function BlendVariable(left: DNVector256<Single>; right: DNVector256<Single>; mask: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function BlendVariable(left: DNVector256<Double>; right: DNVector256<Double>; mask: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function BroadcastScalarToVector128(source: PSingle): DNVector128<Single>;
    {class} function BroadcastScalarToVector256(source: PSingle): DNVector256<Single>; overload;
    {class} function BroadcastScalarToVector256(source: PDouble): DNVector256<Double>; overload;
    {class} function BroadcastVector128ToVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function BroadcastVector128ToVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function Ceiling(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Ceiling(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Compare(left: DNVector128<Single>; right: DNVector128<Single>; mode: DNFloatComparisonMode): DNVector128<Single>; overload;
    {class} function Compare(left: DNVector128<Double>; right: DNVector128<Double>; mode: DNFloatComparisonMode): DNVector128<Double>; overload;
    {class} function Compare(left: DNVector256<Single>; right: DNVector256<Single>; mode: DNFloatComparisonMode): DNVector256<Single>; overload;
    {class} function Compare(left: DNVector256<Double>; right: DNVector256<Double>; mode: DNFloatComparisonMode): DNVector256<Double>; overload;
    {class} function CompareEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareGreaterThanOrEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareLessThan(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareLessThan(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareLessThanOrEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareNotEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareNotEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareNotGreaterThan(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareNotGreaterThan(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareNotLessThan(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareNotLessThan(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareNotLessThanOrEqual(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareNotLessThanOrEqual(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareOrdered(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareOrdered(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function CompareScalar(left: DNVector128<Double>; right: DNVector128<Double>; mode: DNFloatComparisonMode): DNVector128<Double>; overload;
    {class} function CompareScalar(left: DNVector128<Single>; right: DNVector128<Single>; mode: DNFloatComparisonMode): DNVector128<Single>; overload;
    {class} function CompareUnordered(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function CompareUnordered(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function ConvertToVector128Int32(value: DNVector256<Double>): DNVector128<Int32>;
    {class} function ConvertToVector128Single(value: DNVector256<Double>): DNVector128<Single>;
    {class} function ConvertToVector256Int32(value: DNVector256<Single>): DNVector256<Int32>;
    {class} function ConvertToVector256Single(value: DNVector256<Int32>): DNVector256<Single>;
    {class} function ConvertToVector256Double(value: DNVector128<Single>): DNVector256<Double>; overload;
    {class} function ConvertToVector256Double(value: DNVector128<Int32>): DNVector256<Double>; overload;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector256<Double>): DNVector128<Int32>;
    {class} function ConvertToVector256Int32WithTruncation(value: DNVector256<Single>): DNVector256<Int32>;
    {class} function Divide(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Divide(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function DotProduct(left: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>;
    {class} function DuplicateEvenIndexed(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function DuplicateEvenIndexed(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function DuplicateOddIndexed(value: DNVector256<Single>): DNVector256<Single>;
    {class} function ExtractVector128(value: DNVector256<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} function ExtractVector128(value: DNVector256<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} function ExtractVector128(value: DNVector256<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} function ExtractVector128(value: DNVector256<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} function ExtractVector128(value: DNVector256<Int64>; index: Byte): DNVector128<Int64>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt64>; index: Byte): DNVector128<UInt64>; overload;
    {class} function ExtractVector128(value: DNVector256<Single>; index: Byte): DNVector128<Single>; overload;
    {class} function ExtractVector128(value: DNVector256<Double>; index: Byte): DNVector128<Double>; overload;
    {class} function Floor(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Floor(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function HorizontalAdd(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function HorizontalAdd(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function InsertVector128(value: DNVector256<Byte>; data: DNVector128<Byte>; index: Byte): DNVector256<Byte>; overload;
    {class} function InsertVector128(value: DNVector256<SByte>; data: DNVector128<SByte>; index: Byte): DNVector256<SByte>; overload;
    {class} function InsertVector128(value: DNVector256<Int16>; data: DNVector128<Int16>; index: Byte): DNVector256<Int16>; overload;
    {class} function InsertVector128(value: DNVector256<UInt16>; data: DNVector128<UInt16>; index: Byte): DNVector256<UInt16>; overload;
    {class} function InsertVector128(value: DNVector256<Int32>; data: DNVector128<Int32>; index: Byte): DNVector256<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx')]
  DNAvx = interface(DNSse42)
  ['{2ED6FAA4-674C-318F-BF1A-C798E9DD908C}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAvx = class(TDNGenericImport<DNAvxClass, DNAvx>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvx2Class = interface(DNAvxClass)
  ['{8C38C4F4-C0FC-5C2E-9FB1-2455C50707CB}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Subtract(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Subtract(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Subtract(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Subtract(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Subtract(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Subtract(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Subtract(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function Subtract(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function SubtractSaturate(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function SumAbsoluteDifferences(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<UInt16>;
    {class} function UnpackHigh(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function UnpackHigh(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function UnpackHigh(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function UnpackHigh(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function UnpackLow(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function UnpackLow(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function UnpackLow(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function UnpackLow(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function UnpackLow(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function UnpackLow(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function UnpackLow(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function UnpackLow(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function &Xor(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &Xor(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &Xor(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &Xor(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &Xor(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &Xor(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &Xor(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &Xor(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<Int64>; count: DNVector256<UInt64>): DNVector256<Int64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<UInt64>; count: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<Int64>; count: DNVector128<UInt64>): DNVector128<Int64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Shuffle(value: DNVector256<SByte>; mask: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Shuffle(value: DNVector256<Byte>; mask: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Shuffle(value: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Shuffle(value: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function ShuffleHigh(value: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function ShuffleHigh(value: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function ShuffleLow(value: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function ShuffleLow(value: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Sign(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Sign(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Sign(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function MultiplyLow(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function MultiplyLow(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function MultiplyLow(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &Or(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &Or(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &Or(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &Or(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &Or(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &Or(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &Or(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &Or(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function PackSignedSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<SByte>; overload;
    {class} function PackSignedSaturate(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int16>; overload;
    {class} function PackUnsignedSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Byte>; overload;
    {class} function PackUnsignedSaturate(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<UInt16>; overload;
    {class} function Permute2x128(left: DNVector256<SByte>; right: DNVector256<SByte>; control: Byte): DNVector256<SByte>; overload;
    {class} function Permute2x128(left: DNVector256<Byte>; right: DNVector256<Byte>; control: Byte): DNVector256<Byte>; overload;
    {class} function Permute2x128(left: DNVector256<Int16>; right: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function Permute2x128(left: DNVector256<UInt16>; right: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Permute2x128(left: DNVector256<Int32>; right: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Permute2x128(left: DNVector256<UInt32>; right: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function Permute2x128(left: DNVector256<Int64>; right: DNVector256<Int64>; control: Byte): DNVector256<Int64>; overload;
    {class} function Permute2x128(left: DNVector256<UInt64>; right: DNVector256<UInt64>; control: Byte): DNVector256<UInt64>; overload;
    {class} function Permute4x64(value: DNVector256<Int64>; control: Byte): DNVector256<Int64>; overload;
    {class} function Permute4x64(value: DNVector256<UInt64>; control: Byte): DNVector256<UInt64>; overload;
    {class} function Permute4x64(value: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function PermuteVar8x32(left: DNVector256<Int32>; control: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function PermuteVar8x32(left: DNVector256<UInt32>; control: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function PermuteVar8x32(left: DNVector256<Single>; control: DNVector256<Int32>): DNVector256<Single>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt16>; count: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt32>; count: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int64>; count: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt64>; count: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt16>; count: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt32>; count: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int64>; count: Byte): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt64>; count: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<SByte>; numBytes: Byte): DNVector256<SByte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Byte>; numBytes: Byte): DNVector256<Byte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int16>; numBytes: Byte): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt16>; numBytes: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int32>; numBytes: Byte): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt32>; numBytes: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int64>; numBytes: Byte): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt64>; numBytes: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<UInt32>; count: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<Int64>; count: DNVector256<UInt64>): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<UInt64>; count: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<Int64>; count: DNVector128<UInt64>): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmeticVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmeticVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt16>; count: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt32>; count: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int64>; count: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt64>; count: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt16>; count: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt32>; count: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int64>; count: Byte): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt64>; count: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<SByte>; numBytes: Byte): DNVector256<SByte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Byte>; numBytes: Byte): DNVector256<Byte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int16>; numBytes: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt16>; numBytes: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int32>; numBytes: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt32>; numBytes: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int64>; numBytes: Byte): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt64>; numBytes: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<UInt32>; count: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector128<Int32>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector128<Int32>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int64>; baseAddress: PInt64; index: DNVector128<Int32>; mask: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt64>; baseAddress: PUInt64; index: DNVector128<Int32>; mask: DNVector128<UInt64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector128<Int32>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Double>; baseAddress: PDouble; index: DNVector128<Int32>; mask: DNVector128<Double>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector128<Int64>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector128<Int64>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int64>; baseAddress: PInt64; index: DNVector128<Int64>; mask: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt64>; baseAddress: PUInt64; index: DNVector128<Int64>; mask: DNVector128<UInt64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector128<Int64>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Double>; baseAddress: PDouble; index: DNVector128<Int64>; mask: DNVector128<Double>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int32>; baseAddress: PInt32; index: DNVector256<Int32>; mask: DNVector256<Int32>; scale: Byte): DNVector256<Int32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt32>; baseAddress: PUInt32; index: DNVector256<Int32>; mask: DNVector256<UInt32>; scale: Byte): DNVector256<UInt32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int64>; baseAddress: PInt64; index: DNVector128<Int32>; mask: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt64>; baseAddress: PUInt64; index: DNVector128<Int32>; mask: DNVector256<UInt64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Single>; baseAddress: PSingle; index: DNVector256<Int32>; mask: DNVector256<Single>; scale: Byte): DNVector256<Single>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Double>; baseAddress: PDouble; index: DNVector128<Int32>; mask: DNVector256<Double>; scale: Byte): DNVector256<Double>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector256<Int64>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector256<Int64>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int64>; baseAddress: PInt64; index: DNVector256<Int64>; mask: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt64>; baseAddress: PUInt64; index: DNVector256<Int64>; mask: DNVector256<UInt64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector256<Int64>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Double>; baseAddress: PDouble; index: DNVector256<Int64>; mask: DNVector256<Double>; scale: Byte): DNVector256<Double>; overload;
    {class} function HorizontalAdd(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function HorizontalAdd(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function HorizontalAddSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function HorizontalSubtract(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function HorizontalSubtractSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function InsertVector128(value: DNVector256<SByte>; data: DNVector128<SByte>; index: Byte): DNVector256<SByte>; overload;
    {class} function InsertVector128(value: DNVector256<Byte>; data: DNVector128<Byte>; index: Byte): DNVector256<Byte>; overload;
    {class} function InsertVector128(value: DNVector256<Int16>; data: DNVector128<Int16>; index: Byte): DNVector256<Int16>; overload;
    {class} function InsertVector128(value: DNVector256<UInt16>; data: DNVector128<UInt16>; index: Byte): DNVector256<UInt16>; overload;
    {class} function InsertVector128(value: DNVector256<Int32>; data: DNVector128<Int32>; index: Byte): DNVector256<Int32>; overload;
    {class} function InsertVector128(value: DNVector256<UInt32>; data: DNVector128<UInt32>; index: Byte): DNVector256<UInt32>; overload;
    {class} function InsertVector128(value: DNVector256<Int64>; data: DNVector128<Int64>; index: Byte): DNVector256<Int64>; overload;
    {class} function InsertVector128(value: DNVector256<UInt64>; data: DNVector128<UInt64>; index: Byte): DNVector256<UInt64>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function MaskLoad(address: PInt32; mask: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MaskLoad(address: PUInt32; mask: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MaskLoad(address: PInt64; mask: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function MaskLoad(address: PUInt64; mask: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function MaskLoad(address: PInt32; mask: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function MaskLoad(address: PUInt32; mask: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function MaskLoad(address: PInt64; mask: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function MaskLoad(address: PUInt64; mask: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} procedure MaskStore(address: PInt32; mask: DNVector128<Int32>; source: DNVector128<Int32>); overload;
    {class} procedure MaskStore(address: PUInt32; mask: DNVector128<UInt32>; source: DNVector128<UInt32>); overload;
    {class} procedure MaskStore(address: PInt64; mask: DNVector128<Int64>; source: DNVector128<Int64>); overload;
    {class} procedure MaskStore(address: PUInt64; mask: DNVector128<UInt64>; source: DNVector128<UInt64>); overload;
    {class} procedure MaskStore(address: PInt32; mask: DNVector256<Int32>; source: DNVector256<Int32>); overload;
    {class} procedure MaskStore(address: PUInt32; mask: DNVector256<UInt32>; source: DNVector256<UInt32>); overload;
    {class} procedure MaskStore(address: PInt64; mask: DNVector256<Int64>; source: DNVector256<Int64>); overload;
    {class} procedure MaskStore(address: PUInt64; mask: DNVector256<UInt64>; source: DNVector256<UInt64>); overload;
    {class} function MultiplyAddAdjacent(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int32>; overload;
    {class} function MultiplyAddAdjacent(left: DNVector256<Byte>; right: DNVector256<SByte>): DNVector256<Int16>; overload;
    {class} function Max(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Max(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Max(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Max(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Max(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Max(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Min(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Min(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Min(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Min(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Min(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Min(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function MoveMask(value: DNVector256<SByte>): Int32; overload;
    {class} function MoveMask(value: DNVector256<Byte>): Int32; overload;
    {class} function MultipleSumAbsoluteDifferences(left: DNVector256<Byte>; right: DNVector256<Byte>; mask: Byte): DNVector256<UInt16>;
    {class} function Multiply(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int64>; overload;
    {class} function Multiply(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt64>; overload;
    {class} function MultiplyHigh(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function MultiplyHigh(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function MultiplyHighRoundScale(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function MultiplyLow(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function BroadcastScalarToVector256(source: PSByte): DNVector256<SByte>; overload;
    {class} function BroadcastScalarToVector256(source: PInt16): DNVector256<Int16>; overload;
    {class} function BroadcastScalarToVector256(source: PUInt16): DNVector256<UInt16>; overload;
    {class} function BroadcastScalarToVector256(source: PInt32): DNVector256<Int32>; overload;
    {class} function BroadcastScalarToVector256(source: PUInt32): DNVector256<UInt32>; overload;
    {class} function BroadcastScalarToVector256(source: PInt64): DNVector256<Int64>; overload;
    {class} function BroadcastScalarToVector256(source: PUInt64): DNVector256<UInt64>; overload;
    {class} function BroadcastVector128ToVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function BroadcastVector128ToVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function CompareEqual(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function CompareEqual(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function CompareEqual(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function CompareEqual(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function CompareEqual(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function CompareEqual(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function CompareEqual(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function CompareEqual(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function CompareGreaterThan(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function ConvertToInt32(value: DNVector256<Int32>): Int32;
    {class} function ConvertToUInt32(value: DNVector256<UInt32>): UInt32;
    {class} function ConvertToVector256Int16(value: DNVector128<SByte>): DNVector256<Int16>; overload;
    {class} function ConvertToVector256Int16(value: DNVector128<Byte>): DNVector256<Int16>; overload;
    {class} function ConvertToVector256Int32(value: DNVector128<SByte>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(value: DNVector128<Byte>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(value: DNVector128<Int16>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(value: DNVector128<UInt16>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<SByte>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<Byte>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<Int16>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<UInt16>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<Int32>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<UInt32>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int16(address: PSByte): DNVector256<Int16>; overload;
    {class} function ConvertToVector256Int16(address: PByte): DNVector256<Int16>; overload;
    {class} function ConvertToVector256Int32(address: PSByte): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(address: PByte): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(address: PInt16): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(address: PUInt16): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int64(address: PSByte): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(address: PByte): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(address: PInt16): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(address: PUInt16): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(address: PInt32): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(address: PUInt32): DNVector256<Int64>; overload;
    {class} function ExtractVector128(value: DNVector256<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} function ExtractVector128(value: DNVector256<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} function ExtractVector128(value: DNVector256<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} function ExtractVector128(value: DNVector256<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} function ExtractVector128(value: DNVector256<Int64>; index: Byte): DNVector128<Int64>; overload;
    {class} function ExtractVector128(value: DNVector256<UInt64>; index: Byte): DNVector128<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector128<Int32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector128(baseAddress: PInt64; index: DNVector128<Int32>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherVector128(baseAddress: PUInt64; index: DNVector128<Int32>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector128<Int32>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector128(baseAddress: PDouble; index: DNVector128<Int32>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector128<Int64>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector128<Int64>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector128(baseAddress: PInt64; index: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherVector128(baseAddress: PUInt64; index: DNVector128<Int64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector128<Int64>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector128(baseAddress: PDouble; index: DNVector128<Int64>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherVector256(baseAddress: PInt32; index: DNVector256<Int32>; scale: Byte): DNVector256<Int32>; overload;
    {class} function GatherVector256(baseAddress: PUInt32; index: DNVector256<Int32>; scale: Byte): DNVector256<UInt32>; overload;
    {class} function GatherVector256(baseAddress: PInt64; index: DNVector128<Int32>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherVector256(baseAddress: PUInt64; index: DNVector128<Int32>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherVector256(baseAddress: PSingle; index: DNVector256<Int32>; scale: Byte): DNVector256<Single>; overload;
    {class} function GatherVector256(baseAddress: PDouble; index: DNVector128<Int32>; scale: Byte): DNVector256<Double>; overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector256<Int64>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector256<Int64>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector256(baseAddress: PInt64; index: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherVector256(baseAddress: PUInt64; index: DNVector256<Int64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector256<Int64>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector256(baseAddress: PDouble; index: DNVector256<Int64>; scale: Byte): DNVector256<Double>; overload;
    {class} function Abs(value: DNVector256<SByte>): DNVector256<Byte>; overload;
    {class} function Abs(value: DNVector256<Int16>): DNVector256<UInt16>; overload;
    {class} function Abs(value: DNVector256<Int32>): DNVector256<UInt32>; overload;
    {class} function Add(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Add(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Add(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Add(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Add(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Add(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Add(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function Add(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function AddSaturate(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function AddSaturate(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function AddSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function AddSaturate(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function AlignRight(left: DNVector256<SByte>; right: DNVector256<SByte>; mask: Byte): DNVector256<SByte>; overload;
    {class} function AlignRight(left: DNVector256<Byte>; right: DNVector256<Byte>; mask: Byte): DNVector256<Byte>; overload;
    {class} function AlignRight(left: DNVector256<Int16>; right: DNVector256<Int16>; mask: Byte): DNVector256<Int16>; overload;
    {class} function AlignRight(left: DNVector256<UInt16>; right: DNVector256<UInt16>; mask: Byte): DNVector256<UInt16>; overload;
    {class} function AlignRight(left: DNVector256<Int32>; right: DNVector256<Int32>; mask: Byte): DNVector256<Int32>; overload;
    {class} function AlignRight(left: DNVector256<UInt32>; right: DNVector256<UInt32>; mask: Byte): DNVector256<UInt32>; overload;
    {class} function AlignRight(left: DNVector256<Int64>; right: DNVector256<Int64>; mask: Byte): DNVector256<Int64>; overload;
    {class} function AlignRight(left: DNVector256<UInt64>; right: DNVector256<UInt64>; mask: Byte): DNVector256<UInt64>; overload;
    {class} function &And(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &And(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &And(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &And(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &And(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &And(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &And(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &And(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function AndNot(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function AndNot(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function AndNot(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function AndNot(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function AndNot(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function AndNot(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function AndNot(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function AndNot(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function Average(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Average(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Blend(left: DNVector128<Int32>; right: DNVector128<Int32>; control: Byte): DNVector128<Int32>; overload;
    {class} function Blend(left: DNVector128<UInt32>; right: DNVector128<UInt32>; control: Byte): DNVector128<UInt32>; overload;
    {class} function Blend(left: DNVector256<Int16>; right: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function Blend(left: DNVector256<UInt16>; right: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Blend(left: DNVector256<Int32>; right: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Blend(left: DNVector256<UInt32>; right: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function BlendVariable(left: DNVector256<SByte>; right: DNVector256<SByte>; mask: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function BlendVariable(left: DNVector256<Byte>; right: DNVector256<Byte>; mask: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function BlendVariable(left: DNVector256<Int16>; right: DNVector256<Int16>; mask: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function BlendVariable(left: DNVector256<UInt16>; right: DNVector256<UInt16>; mask: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function BlendVariable(left: DNVector256<Int32>; right: DNVector256<Int32>; mask: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function BlendVariable(left: DNVector256<UInt32>; right: DNVector256<UInt32>; mask: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function BlendVariable(left: DNVector256<Int64>; right: DNVector256<Int64>; mask: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function BlendVariable(left: DNVector256<UInt64>; right: DNVector256<UInt64>; mask: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function BroadcastScalarToVector128(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function BroadcastScalarToVector128(source: PByte): DNVector128<Byte>; overload;
    {class} function BroadcastScalarToVector128(source: PSByte): DNVector128<SByte>; overload;
    {class} function BroadcastScalarToVector128(source: PInt16): DNVector128<Int16>; overload;
    {class} function BroadcastScalarToVector128(source: PUInt16): DNVector128<UInt16>; overload;
    {class} function BroadcastScalarToVector128(source: PInt32): DNVector128<Int32>; overload;
    {class} function BroadcastScalarToVector128(source: PUInt32): DNVector128<UInt32>; overload;
    {class} function BroadcastScalarToVector128(source: PInt64): DNVector128<Int64>; overload;
    {class} function BroadcastScalarToVector128(source: PUInt64): DNVector128<UInt64>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Byte>): DNVector256<Byte>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<SByte>): DNVector256<SByte>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Single>): DNVector256<Single>; overload;
    {class} function BroadcastScalarToVector256(value: DNVector128<Double>): DNVector256<Double>; overload;
    {class} function BroadcastScalarToVector256(source: PByte): DNVector256<Byte>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx2')]
  DNAvx2 = interface(DNAvx)
  ['{AABABD72-7E2B-3635-936A-771734BADB61}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAvx2 = class(TDNGenericImport<DNAvx2Class, DNAvx2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNFmaClass = interface(DNAvxClass)
  ['{CD537395-8A4E-5832-95D5-D5031B763B53}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function MultiplyAdd(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAdd(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAdd(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAdd(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddSubtract(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddSubtract(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddSubtract(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAddSubtract(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtract(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtract(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtract(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtract(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtractScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractAdd(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractAdd(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractAdd(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtractAdd(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddNegated(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddNegated(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddNegated(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAddNegated(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddNegatedScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddNegatedScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractNegated(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractNegated(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractNegated(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtractNegated(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtractNegatedScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractNegatedScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Fma')]
  DNFma = interface(DNAvx)
  ['{20B2F3F4-08C9-3021-9FD2-6A4587672DE8}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNFma = class(TDNGenericImport<DNFmaClass, DNFma>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPopcntClass = interface(DNSse42Class)
  ['{79B6A3DE-D61F-5A72-85AF-AE983AEC73B2}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function PopCount(value: UInt32): UInt32;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Popcnt')]
  DNPopcnt = interface(DNSse42)
  ['{BD845121-F808-324E-9ECF-2F6727907AE6}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPopcnt = class(TDNGenericImport<DNPopcntClass, DNPopcnt>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNX86Base_X64Class = interface(DNObjectClass)
  ['{A52CE4D5-041E-548B-A97E-E1626E18D4E1}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.X86Base+X64')]
  DNX86Base_X64 = interface(DNObject)
  ['{C3101B79-3F61-3C80-A9C5-CE108049CCE9}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNX86Base_X64 = class(TDNGenericImport<DNX86Base_X64Class, DNX86Base_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi1_X64Class = interface(DNObjectClass)
  ['{B54D0D40-8AE4-561F-B651-98CD266061DC}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function AndNot(left: UInt64; right: UInt64): UInt64;
    {class} function BitFieldExtract(value: UInt64; start: Byte; length: Byte): UInt64; overload;
    {class} function BitFieldExtract(value: UInt64; control: UInt16): UInt64; overload;
    {class} function ExtractLowestSetBit(value: UInt64): UInt64;
    {class} function GetMaskUpToLowestSetBit(value: UInt64): UInt64;
    {class} function ResetLowestSetBit(value: UInt64): UInt64;
    {class} function TrailingZeroCount(value: UInt64): UInt64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi1+X64')]
  DNBmi1_X64 = interface(DNObject)
  ['{98579D5E-B484-375B-8952-C1AF1814E899}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBmi1_X64 = class(TDNGenericImport<DNBmi1_X64Class, DNBmi1_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi2_X64Class = interface(DNObjectClass)
  ['{BB139F66-3E14-529D-9DB0-9DEC72404E29}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ZeroHighBits(value: UInt64; index: UInt64): UInt64;
    {class} function MultiplyNoFlags(left: UInt64; right: UInt64): UInt64; overload;
    {class} function MultiplyNoFlags(left: UInt64; right: UInt64; low: PUInt64): UInt64; overload;
    {class} function ParallelBitDeposit(value: UInt64; mask: UInt64): UInt64;
    {class} function ParallelBitExtract(value: UInt64; mask: UInt64): UInt64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi2+X64')]
  DNBmi2_X64 = interface(DNObject)
  ['{9AADA4EB-40AE-33E1-B11D-9C627A3503D1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBmi2_X64 = class(TDNGenericImport<DNBmi2_X64Class, DNBmi2_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNLzcnt_X64Class = interface(DNObjectClass)
  ['{7F164FA0-6E55-5FF4-B944-AD1FE2FF65BA}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingZeroCount(value: UInt64): UInt64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Lzcnt+X64')]
  DNLzcnt_X64 = interface(DNObject)
  ['{7EABD2BF-9E48-3929-BD5C-68275D1A1CDA}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLzcnt_X64 = class(TDNGenericImport<DNLzcnt_X64Class, DNLzcnt_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse_X64Class = interface(DNObjectClass)
  ['{87511D02-A29A-56F7-AEA1-5CA8368DA27B}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ConvertToInt64(value: DNVector128<Single>): Int64;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: Int64): DNVector128<Single>;
    {class} function ConvertToInt64WithTruncation(value: DNVector128<Single>): Int64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse+X64')]
  DNSse_X64 = interface(DNObject)
  ['{F8954112-EEEE-3C43-8BC4-0FF3BB90FA91}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse_X64 = class(TDNGenericImport<DNSse_X64Class, DNSse_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse2_X64Class = interface(DNObjectClass)
  ['{BF48ECB6-7E84-5064-A653-8E633D4CF137}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ConvertToInt64(value: DNVector128<Double>): Int64; overload;
    {class} function ConvertToInt64(value: DNVector128<Int64>): Int64; overload;
    {class} function ConvertToUInt64(value: DNVector128<UInt64>): UInt64;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: Int64): DNVector128<Double>;
    {class} function ConvertScalarToVector128Int64(value: Int64): DNVector128<Int64>;
    {class} function ConvertScalarToVector128UInt64(value: UInt64): DNVector128<UInt64>;
    {class} function ConvertToInt64WithTruncation(value: DNVector128<Double>): Int64;
    {class} procedure StoreNonTemporal(address: PInt64; value: Int64); overload;
    {class} procedure StoreNonTemporal(address: PUInt64; value: UInt64); overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse2+X64')]
  DNSse2_X64 = interface(DNObject)
  ['{23275980-D3D9-3041-9AA5-A7EC9286BD59}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse2_X64 = class(TDNGenericImport<DNSse2_X64Class, DNSse2_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAes_X64Class = interface(DNObjectClass)
  ['{666E572C-C9AE-5111-9C08-A59BD78C7E2D}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Aes+X64')]
  DNAes_X64 = interface(DNObject)
  ['{C3F6B139-2108-3CA5-BB96-FEB06A1EFC00}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAes_X64 = class(TDNGenericImport<DNAes_X64Class, DNAes_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPclmulqdq_X64Class = interface(DNObjectClass)
  ['{385CDD95-1D00-5EFE-AA71-84E778F2B846}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Pclmulqdq+X64')]
  DNPclmulqdq_X64 = interface(DNObject)
  ['{3AF50AAB-2649-35A9-83B5-153F4DB8341D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPclmulqdq_X64 = class(TDNGenericImport<DNPclmulqdq_X64Class, DNPclmulqdq_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse3_X64Class = interface(DNObjectClass)
  ['{2EACC924-ED1D-5998-A338-51B9C8B0DE68}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse3+X64')]
  DNSse3_X64 = interface(DNObject)
  ['{44CBE169-1182-303F-AC2F-D2491A07CBCE}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse3_X64 = class(TDNGenericImport<DNSse3_X64Class, DNSse3_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSsse3_X64Class = interface(DNObjectClass)
  ['{23221229-54DB-5C9B-823B-D4F6BB3E2569}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Ssse3+X64')]
  DNSsse3_X64 = interface(DNObject)
  ['{76D5021F-5286-31DA-A923-36EE53757A2B}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSsse3_X64 = class(TDNGenericImport<DNSsse3_X64Class, DNSsse3_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse41_X64Class = interface(DNObjectClass)
  ['{5C28398D-B252-5EBA-ABB7-06B1D4ADC343}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Extract(value: DNVector128<Int64>; index: Byte): Int64; overload;
    {class} function Extract(value: DNVector128<UInt64>; index: Byte): UInt64; overload;
    {class} function Insert(value: DNVector128<Int64>; data: Int64; index: Byte): DNVector128<Int64>; overload;
    {class} function Insert(value: DNVector128<UInt64>; data: UInt64; index: Byte): DNVector128<UInt64>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse41+X64')]
  DNSse41_X64 = interface(DNObject)
  ['{08FD3F5B-19E3-33A0-B476-3B1BCB9072B9}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse41_X64 = class(TDNGenericImport<DNSse41_X64Class, DNSse41_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse42_X64Class = interface(DNObjectClass)
  ['{EF1B6744-45E1-538E-8FD7-0400B9F328E7}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Crc32(crc: UInt64; data: UInt64): UInt64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse42+X64')]
  DNSse42_X64 = interface(DNObject)
  ['{2F230794-7EF6-3101-A97E-95DEC883D142}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSse42_X64 = class(TDNGenericImport<DNSse42_X64Class, DNSse42_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvx_X64Class = interface(DNObjectClass)
  ['{250DD499-A280-598B-AF1D-EA87DFF7EBE0}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx+X64')]
  DNAvx_X64 = interface(DNObject)
  ['{398DD103-3CB5-33B2-BD31-3742FD3A83EC}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAvx_X64 = class(TDNGenericImport<DNAvx_X64Class, DNAvx_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvx2_X64Class = interface(DNObjectClass)
  ['{2474C04F-DB13-5764-9BD9-DF462669835A}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx2+X64')]
  DNAvx2_X64 = interface(DNObject)
  ['{D5877892-6E4A-38A0-B139-51FE058759CC}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAvx2_X64 = class(TDNGenericImport<DNAvx2_X64Class, DNAvx2_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNFma_X64Class = interface(DNObjectClass)
  ['{7F1AD743-C379-52C3-A845-37180ED72C77}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Fma+X64')]
  DNFma_X64 = interface(DNObject)
  ['{2193809A-2106-32E2-A98D-C2F44DDD8921}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNFma_X64 = class(TDNGenericImport<DNFma_X64Class, DNFma_X64>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPopcnt_X64Class = interface(DNObjectClass)
  ['{150173B2-628F-57A5-8E29-C967F7FF750B}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function PopCount(value: UInt64): UInt64;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Popcnt+X64')]
  DNPopcnt_X64 = interface(DNObject)
  ['{51C520DA-DD4C-3BC3-813C-B3CCDA450A55}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPopcnt_X64 = class(TDNGenericImport<DNPopcnt_X64Class, DNPopcnt_X64>) end;

  //-------------namespace: System.Runtime.Loader----------------
  DNAssemblyDependencyResolverClass = interface(DNObjectClass)
  ['{820438A2-C967-5E03-8F37-F3E937A246D1}']
  { constructors } 

    {class} function init(componentAssemblyPath: string): DNAssemblyDependencyResolver;

  end;

  [DNTypeName('System.Runtime.Loader.AssemblyDependencyResolver')]
  DNAssemblyDependencyResolver = interface(DNObject)
  ['{915D7832-AD0B-3169-9BE3-FC4BDBDF95D9}']
  { methods } 

    function ResolveAssemblyToPath(assemblyName: DNAssemblyName): string;
    function ResolveUnmanagedDllToPath(unmanagedDllName: string): string;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssemblyDependencyResolver = class(TDNGenericImport<DNAssemblyDependencyResolverClass, DNAssemblyDependencyResolver>) end;

  //-------------namespace: System.Runtime.Loader----------------
  DNAssemblyLoadContextClass = interface(DNObjectClass)
  ['{47F9EF19-7CD5-506D-958E-C65FED506034}']
  { static getter & setter } 

    {class} function get_Default: DNAssemblyLoadContext;
    {class} function get_All: DNIEnumerable<DNAssemblyLoadContext>;
    {class} function get_CurrentContextualReflectionContext: DNAssemblyLoadContext;

  { constructors } 

    {class} function init(name: string; isCollectible: Boolean): DNAssemblyLoadContext;

  { static methods } 

    {class} function GetAssemblyName(assemblyPath: string): DNAssemblyName;
    {class} function EnterContextualReflection(activating: DNAssembly): DNAssemblyLoadContext_ContextualReflectionScope; overload;
    {class} function GetLoadContext(assembly: DNAssembly): DNAssemblyLoadContext;

  { static propertys } 

    {class} property &Default: DNAssemblyLoadContext read get_Default;
    {class} property All: DNIEnumerable<DNAssemblyLoadContext> read get_All;
    {class} property CurrentContextualReflectionContext: DNAssemblyLoadContext read get_CurrentContextualReflectionContext;
  end;

  [DNTypeName('System.Runtime.Loader.AssemblyLoadContext')]
  DNAssemblyLoadContext = interface(DNObject)
  ['{740C0A67-4BD6-3770-AD3E-F90712AAC8D7}']
  { getters & setters } 

    function get_Assemblies: DNIEnumerable<DNAssembly>;
    function get_IsCollectible: Boolean;
    function get_Name: string;

  { events } 

    procedure add_ResolvingUnmanagedDll(value: DNFunc<DNAssembly, string, IntPtr>);
    procedure remove_ResolvingUnmanagedDll(value: DNFunc<DNAssembly, string, IntPtr>);
    procedure add_Resolving(value: DNFunc<DNAssemblyLoadContext, DNAssemblyName, DNAssembly>);
    procedure remove_Resolving(value: DNFunc<DNAssemblyLoadContext, DNAssemblyName, DNAssembly>);
    procedure add_Unloading(value: DNAction<DNAssemblyLoadContext>);
    procedure remove_Unloading(value: DNAction<DNAssemblyLoadContext>);

  { methods } 

    function LoadFromAssemblyName(assemblyName: DNAssemblyName): DNAssembly;
    function LoadFromAssemblyPath(assemblyPath: string): DNAssembly;
    function LoadFromNativeImagePath(nativeImagePath: string; assemblyPath: string): DNAssembly;
    function LoadFromStream(assembly: DNStream): DNAssembly; overload;
    function LoadFromStream(assembly: DNStream; assemblySymbols: DNStream): DNAssembly; overload;
    procedure Unload;
    function EnterContextualReflection: DNAssemblyLoadContext_ContextualReflectionScope; overload;
    procedure SetProfileOptimizationRoot(directoryPath: string);
    procedure StartProfileOptimization(profile: string);
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Assemblies: DNIEnumerable<DNAssembly> read get_Assemblies;
    property IsCollectible: Boolean read get_IsCollectible;
    property Name: string read get_Name;
  end;

  TDNAssemblyLoadContext = class(TDNGenericImport<DNAssemblyLoadContextClass, DNAssemblyLoadContext>) end;

  //-------------namespace: System.Runtime----------------
  DNProfileOptimizationClass = interface(DNObjectClass)
  ['{7C6A6C43-6DC0-5B33-B258-070D130A0AC2}']
  { static methods } 

    {class} procedure SetProfileRoot(directoryPath: string);
    {class} procedure StartProfile(profile: string);

  end;

  [DNTypeName('System.Runtime.ProfileOptimization')]
  DNProfileOptimization = interface(DNObject)
  ['{AA76A3C0-9A60-3503-AFD4-9C2D5CCC3AF1}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNProfileOptimization = class(TDNGenericImport<DNProfileOptimizationClass, DNProfileOptimization>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoClass = interface(DNObjectClass)
  ['{279E87ED-2E3F-574E-A83C-88739FD66F3C}']
  { static getter & setter } 

    {class} function get_DeserializationInProgress: Boolean;

  { constructors } 

    {class} function init(&type: DNType; converter: DNIFormatterConverter): DNSerializationInfo; overload;
    {class} function init(&type: DNType; converter: DNIFormatterConverter; requireSameTokenInPartialTrust: Boolean): DNSerializationInfo; overload;

  { static methods } 

    {class} procedure ThrowIfDeserializationInProgress; overload;
    {class} procedure ThrowIfDeserializationInProgress(switchSuffix: string; out cachedValue: Int32); overload;
    {class} function StartDeserialization: DNDeserializationToken;

  { static propertys } 

    {class} property DeserializationInProgress: Boolean read get_DeserializationInProgress;
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfo')]
  DNSerializationInfo = interface(DNObject)
  ['{34C2C277-3384-3DFA-BE1B-FF9155CCCF54}']
  { getters & setters } 

    function get_FullTypeName: string;
    procedure set_FullTypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_IsFullTypeNameSetExplicit: Boolean;
    function get_IsAssemblyNameSetExplicit: Boolean;
    function get_MemberCount: Int32;
    function get_ObjectType: DNType;

  { methods } 

    procedure SetType(&type: DNType);
    function GetEnumerator: DNSerializationInfoEnumerator;
    procedure AddValue(name: string; value: DNObject; &type: DNType); overload;
    procedure AddValue(name: string; value: DNObject); overload;
    procedure AddValue(name: string; value: Boolean); overload;
    procedure AddValue(name: string; value: Char); overload;
    procedure AddValue(name: string; value: SByte); overload;
    procedure AddValue(name: string; value: Byte); overload;
    procedure AddValue(name: string; value: Int16); overload;
    procedure AddValue(name: string; value: UInt16); overload;
    procedure AddValue(name: string; value: Int32); overload;
    procedure AddValue(name: string; value: UInt32); overload;
    procedure AddValue(name: string; value: Int64); overload;
    procedure AddValue(name: string; value: UInt64); overload;
    procedure AddValue(name: string; value: Single); overload;
    procedure AddValue(name: string; value: Double); overload;
    procedure AddValue(name: string; value: DNDecimal); overload;
    procedure AddValue(name: string; value: DNDateTime); overload;
    procedure UpdateValue(name: string; value: DNObject; &type: DNType);
    function GetValue(name: string; &type: DNType): DNObject;
    function GetBoolean(name: string): Boolean;
    function GetChar(name: string): Char;
    function GetSByte(name: string): SByte;
    function GetByte(name: string): Byte;
    function GetInt16(name: string): Int16;
    function GetUInt16(name: string): UInt16;
    function GetInt32(name: string): Int32;
    function GetUInt32(name: string): UInt32;
    function GetInt64(name: string): Int64;
    function GetUInt64(name: string): UInt64;
    function GetSingle(name: string): Single;
    function GetDouble(name: string): Double;
    function GetDecimal(name: string): DNDecimal;
    function GetDateTime(name: string): DNDateTime;
    function GetString(name: string): string;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FullTypeName: string read get_FullTypeName write set_FullTypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property IsFullTypeNameSetExplicit: Boolean read get_IsFullTypeNameSetExplicit;
    property IsAssemblyNameSetExplicit: Boolean read get_IsAssemblyNameSetExplicit;
    property MemberCount: Int32 read get_MemberCount;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationInfo = class(TDNGenericImport<DNSerializationInfoClass, DNSerializationInfo>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoEnumeratorClass = interface(DNObjectClass)
  ['{07331B8E-2693-5485-8E27-5951F1422652}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfoEnumerator')]
  DNSerializationInfoEnumerator = interface(DNIEnumerator)
  ['{E293C68B-84DA-3DCC-858F-065DA0A532DB}']
  { getters & setters } 

    function get_Current: DNSerializationEntry;
    function get_Name: string;
    function get_Value: DNObject;
    function get_ObjectType: DNType;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DNSerializationEntry read get_Current;
    property Name: string read get_Name;
    property Value: DNObject read get_Value;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationInfoEnumerator = class(TDNGenericImport<DNSerializationInfoEnumeratorClass, DNSerializationInfoEnumerator>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNFrameworkNameClass = interface(DNObjectClass)
  ['{46F0E217-EF8F-5BAD-A0B3-5BA245F4F279}']
  { constructors } 

    {class} function init(identifier: string; version: DNVersion): DNFrameworkName; overload;
    {class} function init(identifier: string; version: DNVersion; profile: string): DNFrameworkName; overload;
    {class} function init(frameworkName: string): DNFrameworkName; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.FrameworkName')]
  DNFrameworkName = interface(DNObject)
  ['{EB6B7602-E936-3F3A-B0ED-BF1DDAB071CA}']
  { getters & setters } 

    function get_Identifier: string;
    function get_Version: DNVersion;
    function get_Profile: string;
    function get_FullName: string;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNFrameworkName): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Identifier: string read get_Identifier;
    property Version: DNVersion read get_Version;
    property Profile: string read get_Profile;
    property FullName: string read get_FullName;
  end;

  TDNFrameworkName = class(TDNGenericImport<DNFrameworkNameClass, DNFrameworkName>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNVersioningHelperClass = interface(DNObjectClass)
  ['{66282846-4442-5CAF-91B2-86CC3CA0FE51}']
  { static methods } 

    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope): string; overload;
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope; &type: DNType): string; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.VersioningHelper')]
  DNVersioningHelper = interface(DNObject)
  ['{AF0439E3-E69E-3FF0-98CA-9C9F078D1A13}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVersioningHelper = class(TDNGenericImport<DNVersioningHelperClass, DNVersioningHelper>) end;

  //-------------namespace: System.Security----------------
  DNPermissionSetClass = interface(DNObjectClass)
  ['{9AE00F8A-5A7E-5F8D-8950-4EB6EC72E081}']
  { constructors } 

    {class} function init(state: DNPermissionState): DNPermissionSet; overload;
    {class} function init(permSet: DNPermissionSet): DNPermissionSet; overload;

  { static methods } 

    {class} function ConvertPermissionSet(inFormat: string; inData: TArray<Byte>; outFormat: string): TArray<Byte>;
    {class} procedure RevertAssert;

  end;

  [DNTypeName('System.Security.PermissionSet')]
  DNPermissionSet = interface(DNICollection)
  ['{9A37FB1E-1D26-3DEB-8301-696550D2FA59}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;

  { methods } 

    function AddPermission(perm: DNIPermission): DNIPermission;
    procedure Assert;
    function ContainsNonCodeAccessPermissions: Boolean;
    function Copy: DNPermissionSet;
    procedure CopyTo(&array: DNArray; index: Int32);
    procedure Demand;
    procedure Deny;
    function Equals(o: DNObject): Boolean;
    procedure FromXml(et: DNSecurityElement);
    function GetEnumerator: DNIEnumerator;
    function GetHashCode: Int32;
    function GetPermission(permClass: DNType): DNIPermission;
    function Intersect(other: DNPermissionSet): DNPermissionSet;
    function IsEmpty: Boolean;
    function IsSubsetOf(target: DNPermissionSet): Boolean;
    function IsUnrestricted: Boolean;
    procedure PermitOnly;
    function RemovePermission(permClass: DNType): DNIPermission;
    function SetPermission(perm: DNIPermission): DNIPermission;
    function ToString: string;
    function ToXml: DNSecurityElement;
    function Union(other: DNPermissionSet): DNPermissionSet;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
  end;

  TDNPermissionSet = class(TDNGenericImport<DNPermissionSetClass, DNPermissionSet>) end;

  //-------------namespace: System.Security----------------
  DNSecureStringClass = interface(DNObjectClass)
  ['{D3AF7556-CA10-555E-8BFA-7726E503367C}']
  { constructors } 

    {class} function init: DNSecureString; overload;
    {class} function init(value: PChar; length: Int32): DNSecureString; overload;

  end;

  [DNTypeName('System.Security.SecureString')]
  DNSecureString = interface(DNIDisposable)
  ['{C0DB6102-4266-3063-A983-1F2CB950F1A7}']
  { getters & setters } 

    function get_Length: Int32;

  { methods } 

    procedure AppendChar(c: Char);
    procedure Clear;
    function Copy: DNSecureString;
    procedure Dispose;
    procedure InsertAt(index: Int32; c: Char);
    function IsReadOnly: Boolean;
    procedure MakeReadOnly;
    procedure RemoveAt(index: Int32);
    procedure SetAt(index: Int32; c: Char);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Length: Int32 read get_Length;
  end;

  TDNSecureString = class(TDNGenericImport<DNSecureStringClass, DNSecureString>) end;

  //-------------namespace: System.Security----------------
  DNSecurityElementClass = interface(DNObjectClass)
  ['{9CDCCDB3-5181-5BC3-BC09-1C4CAFEEFE86}']
  { constructors } 

    {class} function init(tag: string): DNSecurityElement; overload;
    {class} function init(tag: string; text: string): DNSecurityElement; overload;

  { static methods } 

    {class} function IsValidTag(tag: string): Boolean;
    {class} function IsValidText(text: string): Boolean;
    {class} function IsValidAttributeName(name: string): Boolean;
    {class} function IsValidAttributeValue(value: string): Boolean;
    {class} function Escape(str: string): string;
    {class} function FromString(xml: string): DNSecurityElement;

  end;

  [DNTypeName('System.Security.SecurityElement')]
  DNSecurityElement = interface(DNObject)
  ['{E4269FAA-EFFA-32A5-B67A-A4DB1B814646}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Attributes: DNHashtable;
    procedure set_Attributes(value: DNHashtable);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Children: DNArrayList;
    procedure set_Children(value: DNArrayList);

  { methods } 

    procedure AddAttribute(name: string; value: string);
    procedure AddChild(child: DNSecurityElement);
    function Equal(other: DNSecurityElement): Boolean;
    function Copy: DNSecurityElement;
    function ToString: string;
    function Attribute(name: string): string;
    function SearchForChildByTag(tag: string): DNSecurityElement;
    function SearchForTextOfTag(tag: string): string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Attributes: DNHashtable read get_Attributes write set_Attributes;
    property Text: string read get_Text write set_Text;
    property Children: DNArrayList read get_Children write set_Children;
  end;

  TDNSecurityElement = class(TDNGenericImport<DNSecurityElementClass, DNSecurityElement>) end;

  //-------------namespace: System----------------
  DNStringClass = interface(DNObjectClass)
  ['{098FE6AE-76DE-52B0-8772-CE28B1DF2C7A}']
  { constructors } 

    {class} function init(value: TArray<Char>): DNString; overload;
    {class} function init(value: TArray<Char>; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PChar): DNString; overload;
    {class} function init(value: PChar; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32; enc: DNEncoding): DNString; overload;
    {class} function init(c: Char; count: Int32): DNString; overload;
    {class} function init(value: DNReadOnlySpan<Char>): DNString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: string;

  { static fields } 

    {class} property Empty: string read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Concat(arg0: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Concat(args: TArray<DNObject>): string; overload;
    {class} function Concat(values: DNIEnumerable<string>): string; overload;
    {class} function Concat(str0: string; str1: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string; str3: string): string; overload;
    {class} function Concat(str0: DNReadOnlySpan<Char>; str1: DNReadOnlySpan<Char>): string; overload;
    {class} function Concat(str0: DNReadOnlySpan<Char>; str1: DNReadOnlySpan<Char>; str2: DNReadOnlySpan<Char>): string; overload;
    {class} function Concat(str0: DNReadOnlySpan<Char>; str1: DNReadOnlySpan<Char>; str2: DNReadOnlySpan<Char>; str3: DNReadOnlySpan<Char>): string; overload;
    {class} function Concat(values: TArray<string>): string; overload;
    {class} function Format(format: string; arg0: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Format(format: string; args: TArray<DNObject>): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): string; overload;
    {class} function Join(separator: Char; value: TArray<string>): string; overload;
    {class} function Join(separator: Char; values: TArray<DNObject>): string; overload;
    {class} function Join(separator: Char; value: TArray<string>; startIndex: Int32; count: Int32): string; overload;
    {class} function Join(separator: string; value: TArray<string>): string; overload;
    {class} function Join(separator: string; values: TArray<DNObject>): string; overload;
    {class} function Join(separator: string; values: DNIEnumerable<string>): string; overload;
    {class} function Join(separator: string; value: TArray<string>; startIndex: Int32; count: Int32): string; overload;
    {class} function Intern(str: string): string;
    {class} function IsInterned(str: string): string;
    {class} function Compare(strA: string; strB: string): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; strB: string; comparisonType: DNStringComparison): Int32; overload;
    {class} function Compare(strA: string; strB: string; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; comparisonType: DNStringComparison): Int32; overload;
    {class} function CompareOrdinal(strA: string; strB: string): Int32; overload;
    {class} function CompareOrdinal(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Equals(a: string; b: string): Boolean; overload;
    {class} function Equals(a: string; b: string; comparisonType: DNStringComparison): Boolean; overload;
    {class} function GetHashCode(value: DNReadOnlySpan<Char>): Int32; overload;
    {class} function GetHashCode(value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32; overload;
    {class} function Copy(str: string): string;
    {class} function IsNullOrEmpty(value: string): Boolean;
    {class} function IsNullOrWhiteSpace(value: string): Boolean;

  end;

  [DNTypeName('System.String')]
  DNString = interface(DNIComparable)
  ['{F3E9C164-A789-34A1-A95C-86A5716C1A6E}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Chars(index: Int32): Char;

  { methods } 

    function Replace(oldValue: string; newValue: string; ignoreCase: Boolean; culture: DNCultureInfo): string; overload;
    function Replace(oldValue: string; newValue: string; comparisonType: DNStringComparison): string; overload;
    function Replace(oldChar: Char; newChar: Char): string; overload;
    function Replace(oldValue: string; newValue: string): string; overload;
    function Split(separator: Char; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: Char; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<Char>): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32): TArray<string>; overload;
    function Split(separator: TArray<Char>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: string; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: string; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Substring(startIndex: Int32): string; overload;
    function Substring(startIndex: Int32; length: Int32): string; overload;
    function ToLower: string; overload;
    function ToLower(culture: DNCultureInfo): string; overload;
    function ToLowerInvariant: string;
    function ToUpper: string; overload;
    function ToUpper(culture: DNCultureInfo): string; overload;
    function ToUpperInvariant: string;
    function Trim: string; overload;
    function Trim(trimChar: Char): string; overload;
    function Trim(trimChars: TArray<Char>): string; overload;
    function TrimStart: string; overload;
    function TrimStart(trimChar: Char): string; overload;
    function TrimStart(trimChars: TArray<Char>): string; overload;
    function TrimEnd: string; overload;
    function TrimEnd(trimChar: Char): string; overload;
    function TrimEnd(trimChars: TArray<Char>): string; overload;
    function &Contains(value: string): Boolean; overload;
    function &Contains(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function &Contains(value: Char): Boolean; overload;
    function &Contains(value: Char; comparisonType: DNStringComparison): Boolean; overload;
    function IndexOf(value: Char): Int32; overload;
    function IndexOf(value: Char; startIndex: Int32): Int32; overload;
    function IndexOf(value: Char; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(value: string): Int32; overload;
    function IndexOf(value: string; startIndex: Int32): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: Char): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: string): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function GetPinnableReference: Char;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetEnumerator: DNCharEnumerator;
    function EnumerateRunes: DNStringRuneEnumerator;
    function GetTypeCode: DNTypeCode;
    function IsNormalized: Boolean; overload;
    function IsNormalized(normalizationForm: DNNormalizationForm): Boolean; overload;
    function Normalize: string; overload;
    function Normalize(normalizationForm: DNNormalizationForm): string; overload;
    function Insert(startIndex: Int32; value: string): string;
    function PadLeft(totalWidth: Int32): string; overload;
    function PadLeft(totalWidth: Int32; paddingChar: Char): string; overload;
    function PadRight(totalWidth: Int32): string; overload;
    function PadRight(totalWidth: Int32; paddingChar: Char): string; overload;
    function Remove(startIndex: Int32; count: Int32): string; overload;
    function Remove(startIndex: Int32): string; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(strB: string): Int32; overload;
    function EndsWith(value: string): Boolean; overload;
    function EndsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function EndsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function EndsWith(value: Char): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(value: string): Boolean; overload;
    function Equals(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetHashCode(comparisonType: DNStringComparison): Int32; overload;
    function StartsWith(value: string): Boolean; overload;
    function StartsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function StartsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function StartsWith(value: Char): Boolean; overload;
    function Clone: DNObject;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32);
    function ToCharArray: TArray<Char>; overload;
    function ToCharArray(startIndex: Int32; length: Int32): TArray<Char>; overload;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property Chars[index: Int32]: Char read get_Chars; default;
  end;

  TDNString = class(TDNGenericImport<DNStringClass, DNString>) end;

  //-------------namespace: System----------------
  DNStringComparerClass = interface(DNObjectClass)
  ['{16374580-0742-50F9-B3EB-D8452FDFE56E}']
  { static getter & setter } 

    {class} function get_InvariantCulture: DNStringComparer;
    {class} function get_InvariantCultureIgnoreCase: DNStringComparer;
    {class} function get_CurrentCulture: DNStringComparer;
    {class} function get_CurrentCultureIgnoreCase: DNStringComparer;
    {class} function get_Ordinal: DNStringComparer;
    {class} function get_OrdinalIgnoreCase: DNStringComparer;

  { static methods } 

    {class} function FromComparison(comparisonType: DNStringComparison): DNStringComparer;
    {class} function Create(culture: DNCultureInfo; ignoreCase: Boolean): DNStringComparer; overload;
    {class} function Create(culture: DNCultureInfo; options: DNCompareOptions): DNStringComparer; overload;

  { static propertys } 

    {class} property InvariantCulture: DNStringComparer read get_InvariantCulture;
    {class} property InvariantCultureIgnoreCase: DNStringComparer read get_InvariantCultureIgnoreCase;
    {class} property CurrentCulture: DNStringComparer read get_CurrentCulture;
    {class} property CurrentCultureIgnoreCase: DNStringComparer read get_CurrentCultureIgnoreCase;
    {class} property Ordinal: DNStringComparer read get_Ordinal;
    {class} property OrdinalIgnoreCase: DNStringComparer read get_OrdinalIgnoreCase;
  end;

  [DNTypeName('System.StringComparer')]
  DNStringComparer = interface(DNIComparer)
  ['{365801C1-5E1B-3E61-ADB2-7C8F086A1CD8}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;

  end;

  TDNStringComparer = class(TDNGenericImport<DNStringComparerClass, DNStringComparer>) end;

  //-------------namespace: System----------------
  DNCultureAwareComparerClass = interface(DNStringComparerClass)
  ['{999169D0-61A5-51E6-A93F-177EDD52621E}']
  end;

  [DNTypeName('System.CultureAwareComparer')]
  DNCultureAwareComparer = interface(DNStringComparer)
  ['{93DF3D20-98AF-30CD-B20A-95CC1575A0B3}']
  { methods } 

    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNCultureAwareComparer = class(TDNGenericImport<DNCultureAwareComparerClass, DNCultureAwareComparer>) end;

  //-------------namespace: System----------------
  DNOrdinalComparerClass = interface(DNStringComparerClass)
  ['{3782FDB1-6CE6-5A6D-9C51-38FCC91D1C87}']
  end;

  [DNTypeName('System.OrdinalComparer')]
  DNOrdinalComparer = interface(DNStringComparer)
  ['{9222E64B-B804-3B24-B8C0-6A1704DB4608}']
  { methods } 

    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function GetType: DNType;
    function ToString: string;

  end;

  TDNOrdinalComparer = class(TDNGenericImport<DNOrdinalComparerClass, DNOrdinalComparer>) end;

  //-------------namespace: System----------------
  DNStringNormalizationExtensionsClass = interface(DNObjectClass)
  ['{5A368B26-05AC-5D96-8CCB-30A9CF1EBDD3}']
  { static methods } 

    {class} function IsNormalized(strInput: string): Boolean; overload;
    {class} function IsNormalized(strInput: string; normalizationForm: DNNormalizationForm): Boolean; overload;
    {class} function Normalize(strInput: string): string; overload;
    {class} function Normalize(strInput: string; normalizationForm: DNNormalizationForm): string; overload;

  end;

  [DNTypeName('System.StringNormalizationExtensions')]
  DNStringNormalizationExtensions = interface(DNObject)
  ['{4B6188E3-7CAF-3279-AF0D-E0BE4CDBCFED}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStringNormalizationExtensions = class(TDNGenericImport<DNStringNormalizationExtensionsClass, DNStringNormalizationExtensions>) end;

  //-------------namespace: System.Text----------------
  DNDecoderClass = interface(DNObjectClass)
  ['{36DCD717-81F2-574E-A087-47DCA9831AEE}']
  end;

  [DNTypeName('System.Text.Decoder')]
  DNDecoder = interface(DNObject)
  ['{E47651BB-9707-3042-88A4-7F8EDBF447C3}']
  { getters & setters } 

    function get_Fallback: DNDecoderFallback;
    procedure set_Fallback(value: DNDecoderFallback);
    function get_FallbackBuffer: DNDecoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>; flush: Boolean): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; flush: Boolean): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; flush: Boolean): Int32; overload;
    procedure Convert(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Fallback: DNDecoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNDecoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNDecoder = class(TDNGenericImport<DNDecoderClass, DNDecoder>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackClass = interface(DNObjectClass)
  ['{07744292-6164-57BA-AD6A-5972A9BBBDAB}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNDecoderFallback;
    {class} function get_ExceptionFallback: DNDecoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNDecoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNDecoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.DecoderFallback')]
  DNDecoderFallback = interface(DNObject)
  ['{FB3AB3B4-9EA7-3CB8-A22E-090E731BFDA7}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderFallback = class(TDNGenericImport<DNDecoderFallbackClass, DNDecoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackClass = interface(DNDecoderFallbackClass)
  ['{17C9CC05-6CEF-5853-B703-9475838C3E80}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallback;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallback')]
  DNDecoderExceptionFallback = interface(DNDecoderFallback)
  ['{998ED97D-82B7-3A58-83A1-F9C0B5FBA5FB}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderExceptionFallback = class(TDNGenericImport<DNDecoderExceptionFallbackClass, DNDecoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackClass = interface(DNDecoderFallbackClass)
  ['{189E12F8-2F4D-56D2-AFE4-7F5CB77269FA}']
  { constructors } 

    {class} function init: DNDecoderReplacementFallback; overload;
    {class} function init(replacement: string): DNDecoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallback')]
  DNDecoderReplacementFallback = interface(DNDecoderFallback)
  ['{E5B075FF-483C-3FAC-B40D-4509834BFDEE}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderReplacementFallback = class(TDNGenericImport<DNDecoderReplacementFallbackClass, DNDecoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackBufferClass = interface(DNObjectClass)
  ['{9766149B-2468-5AD2-80E7-625EFA74291B}']
  end;

  [DNTypeName('System.Text.DecoderFallbackBuffer')]
  DNDecoderFallbackBuffer = interface(DNObject)
  ['{C2C4989E-3A14-38E9-85DC-D265BA496D39}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderFallbackBuffer = class(TDNGenericImport<DNDecoderFallbackBufferClass, DNDecoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{3AB473D2-BE14-5392-8DD6-4DEA6773CB29}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallbackBuffer')]
  DNDecoderExceptionFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{1D33D81A-F08A-369E-9A33-92FE3DDD14AD}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderExceptionFallbackBuffer = class(TDNGenericImport<DNDecoderExceptionFallbackBufferClass, DNDecoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{131B406D-D436-50E8-81E1-73A5C4D9ADDE}']
  { constructors } 

    {class} function init(fallback: DNDecoderReplacementFallback): DNDecoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallbackBuffer')]
  DNDecoderReplacementFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{4F308F47-C036-35F6-88E9-BF134D0CF946}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderReplacementFallbackBuffer = class(TDNGenericImport<DNDecoderReplacementFallbackBufferClass, DNDecoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderClass = interface(DNObjectClass)
  ['{D7CB2051-1213-5DC3-BAE0-50DEC579F578}']
  end;

  [DNTypeName('System.Text.Encoder')]
  DNEncoder = interface(DNObject)
  ['{32926C7E-91C1-3089-8BD8-D5CBBCF2065C}']
  { getters & setters } 

    function get_Fallback: DNEncoderFallback;
    procedure set_Fallback(value: DNEncoderFallback);
    function get_FallbackBuffer: DNEncoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32; flush: Boolean): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>; flush: Boolean): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; flush: Boolean): Int32; overload;
    procedure Convert(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Fallback: DNEncoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNEncoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackClass = interface(DNObjectClass)
  ['{C55A7C60-C32F-54C6-93D8-52D435D6BEC0}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNEncoderFallback;
    {class} function get_ExceptionFallback: DNEncoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNEncoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNEncoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.EncoderFallback')]
  DNEncoderFallback = interface(DNObject)
  ['{783DB85A-07BA-39AC-994C-5F322A20716F}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderFallback = class(TDNGenericImport<DNEncoderFallbackClass, DNEncoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackClass = interface(DNEncoderFallbackClass)
  ['{ECF6025D-21A1-551C-88BC-7851106928F8}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallback;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallback')]
  DNEncoderExceptionFallback = interface(DNEncoderFallback)
  ['{C922D42F-B4AC-3FE4-B9C4-118A26DD332C}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderExceptionFallback = class(TDNGenericImport<DNEncoderExceptionFallbackClass, DNEncoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackClass = interface(DNEncoderFallbackClass)
  ['{B92A0F04-3DE5-5F0C-946C-5EA07271FDCF}']
  { constructors } 

    {class} function init: DNEncoderReplacementFallback; overload;
    {class} function init(replacement: string): DNEncoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallback')]
  DNEncoderReplacementFallback = interface(DNEncoderFallback)
  ['{5AC3CC5F-16E5-32B0-9EED-032FD757A8B1}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderReplacementFallback = class(TDNGenericImport<DNEncoderReplacementFallbackClass, DNEncoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackBufferClass = interface(DNObjectClass)
  ['{2D0CF821-1B5B-5FFC-A94A-FE9A4A8FA4C7}']
  end;

  [DNTypeName('System.Text.EncoderFallbackBuffer')]
  DNEncoderFallbackBuffer = interface(DNObject)
  ['{EF708C1B-BF82-3FD2-8076-524D430598E3}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderFallbackBuffer = class(TDNGenericImport<DNEncoderFallbackBufferClass, DNEncoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{A36BFF85-1F2D-513D-9883-425D366B5D2A}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallbackBuffer')]
  DNEncoderExceptionFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{E8ADB854-B80F-3BCF-ACA3-7B81FBBC0437}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderExceptionFallbackBuffer = class(TDNGenericImport<DNEncoderExceptionFallbackBufferClass, DNEncoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{97493056-8D67-50D4-94BB-40DDFF862B06}']
  { constructors } 

    {class} function init(fallback: DNEncoderReplacementFallback): DNEncoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallbackBuffer')]
  DNEncoderReplacementFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{09E8FDBE-1DBB-3941-9FE4-FEA9D8721035}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderReplacementFallbackBuffer = class(TDNGenericImport<DNEncoderReplacementFallbackBufferClass, DNEncoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncodingClass = interface(DNObjectClass)
  ['{7384B73D-6FF9-52EB-A735-7047CE6E565C}']
  { static getter & setter } 

    {class} function get_Default: DNEncoding;
    {class} function get_ASCII: DNEncoding;
    {class} function get_Latin1: DNEncoding;
    {class} function get_Unicode: DNEncoding;
    {class} function get_BigEndianUnicode: DNEncoding;
    {class} function get_UTF7: DNEncoding;
    {class} function get_UTF8: DNEncoding;
    {class} function get_UTF32: DNEncoding;

  { static methods } 

    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>): TArray<Byte>; overload;
    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Byte>; overload;
    {class} procedure RegisterProvider(provider: DNEncodingProvider);
    {class} function GetEncoding(codepage: Int32): DNEncoding; overload;
    {class} function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncoding(name: string): DNEncoding; overload;
    {class} function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncodings: TArray<DNEncodingInfo>;
    {class} function CreateTranscodingStream(innerStream: DNStream; innerStreamEncoding: DNEncoding; outerStreamEncoding: DNEncoding; leaveOpen: Boolean): DNStream;

  { static propertys } 

    {class} property &Default: DNEncoding read get_Default;
    {class} property ASCII: DNEncoding read get_ASCII;
    {class} property Latin1: DNEncoding read get_Latin1;
    {class} property Unicode: DNEncoding read get_Unicode;
    {class} property BigEndianUnicode: DNEncoding read get_BigEndianUnicode;
    {class} property UTF7: DNEncoding read get_UTF7;
    {class} property UTF8: DNEncoding read get_UTF8;
    {class} property UTF32: DNEncoding read get_UTF32;
  end;

  [DNTypeName('System.Text.Encoding')]
  DNEncoding = interface(DNICloneable)
  ['{19597ADE-EA10-39EB-BE30-1590147C4EAB}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNEncoding = class(TDNGenericImport<DNEncodingClass, DNEncoding>) end;

  //-------------namespace: System.Text----------------
  DNASCIIEncodingClass = interface(DNEncodingClass)
  ['{B409FE42-E4DB-5D30-A53C-E98667E9260A}']
  { constructors } 

    {class} function init: DNASCIIEncoding;

  end;

  [DNTypeName('System.Text.ASCIIEncoding')]
  DNASCIIEncoding = interface(DNEncoding)
  ['{BB1F0EB4-0CD4-3260-B597-CB5C1781C26B}']
  { getters & setters } 

    function get_IsSingleByte: Boolean;
    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32): string; overload;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property IsSingleByte: Boolean read get_IsSingleByte;
    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNASCIIEncoding = class(TDNGenericImport<DNASCIIEncodingClass, DNASCIIEncoding>) end;

  //-------------namespace: System.Text----------------
  DNUnicodeEncodingClass = interface(DNEncodingClass)
  ['{D7402F88-3D10-5B91-8E1B-D8633CC58C97}']
  { constructors } 

    {class} function init: DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidBytes: Boolean): DNUnicodeEncoding; overload;

  end;

  [DNTypeName('System.Text.UnicodeEncoding')]
  DNUnicodeEncoding = interface(DNEncoding)
  ['{A0536B19-A9D2-311A-8668-5ACE92189225}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetEncoder: DNEncoder;
    function GetDecoder: DNDecoder;
    function GetPreamble: TArray<Byte>;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUnicodeEncoding = class(TDNGenericImport<DNUnicodeEncodingClass, DNUnicodeEncoding>)
  public const
   CharSize = 2;
  end;

  //-------------namespace: System.Text----------------
  DNUTF32EncodingClass = interface(DNEncodingClass)
  ['{FD023411-6F35-5EF2-A41B-67E181C1C162}']
  { constructors } 

    {class} function init: DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidCharacters: Boolean): DNUTF32Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF32Encoding')]
  DNUTF32Encoding = interface(DNEncoding)
  ['{69A99BFB-A7CA-31C3-93FA-2CE54803DEF9}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF32Encoding = class(TDNGenericImport<DNUTF32EncodingClass, DNUTF32Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF7EncodingClass = interface(DNEncodingClass)
  ['{7F51ABF5-35E6-540A-85E7-240128985D33}']
  { constructors } 

    {class} function init: DNUTF7Encoding; overload;
    {class} function init(allowOptionals: Boolean): DNUTF7Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF7Encoding')]
  DNUTF7Encoding = interface(DNEncoding)
  ['{1330CB31-DE73-32E2-B527-75AAB25A2E1C}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF7Encoding = class(TDNGenericImport<DNUTF7EncodingClass, DNUTF7Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF8EncodingClass = interface(DNEncodingClass)
  ['{F6018FC0-5301-54A4-9EFC-4AD47D5944A9}']
  { constructors } 

    {class} function init: DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean): DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean; throwOnInvalidBytes: Boolean): DNUTF8Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF8Encoding')]
  DNUTF8Encoding = interface(DNEncoding)
  ['{A9075114-889F-3F15-B9EA-33605B01FDEE}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF8Encoding = class(TDNGenericImport<DNUTF8EncodingClass, DNUTF8Encoding>) end;

  //-------------namespace: System.Text----------------
  DNEncodingInfoClass = interface(DNObjectClass)
  ['{1430064F-4F14-5466-9919-DBEFCD9781DB}']
  { constructors } 

    {class} function init(provider: DNEncodingProvider; codePage: Int32; name: string; displayName: string): DNEncodingInfo;

  end;

  [DNTypeName('System.Text.EncodingInfo')]
  DNEncodingInfo = interface(DNObject)
  ['{E45EC4E3-31D2-3734-BE14-92EC6B6143BD}']
  { getters & setters } 

    function get_CodePage: Int32;
    function get_Name: string;
    function get_DisplayName: string;

  { methods } 

    function GetEncoding: DNEncoding;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;

  { propertys } 

    property CodePage: Int32 read get_CodePage;
    property Name: string read get_Name;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEncodingInfo = class(TDNGenericImport<DNEncodingInfoClass, DNEncodingInfo>) end;

  //-------------namespace: System.Text----------------
  DNEncodingProviderClass = interface(DNObjectClass)
  ['{E816852D-64C2-5237-BCA6-2F1268DD037D}']
  { constructors } 

    {class} function init: DNEncodingProvider;

  end;

  [DNTypeName('System.Text.EncodingProvider')]
  DNEncodingProvider = interface(DNObject)
  ['{4CA98269-4729-33ED-88ED-86FD4653AA22}']
  { methods } 

    function GetEncoding(name: string): DNEncoding; overload;
    function GetEncoding(codepage: Int32): DNEncoding; overload;
    function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function GetEncodings: DNIEnumerable<DNEncodingInfo>;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEncodingProvider = class(TDNGenericImport<DNEncodingProviderClass, DNEncodingProvider>) end;

  //-------------namespace: System.Text----------------
  DNStringBuilderClass = interface(DNObjectClass)
  ['{BF2CD195-E060-5547-AABB-FC28418BA36C}']
  { constructors } 

    {class} function init: DNStringBuilder; overload;
    {class} function init(capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string): DNStringBuilder; overload;
    {class} function init(value: string; capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string; startIndex: Int32; length: Int32; capacity: Int32): DNStringBuilder; overload;
    {class} function init(capacity: Int32; maxCapacity: Int32): DNStringBuilder; overload;

  end;

  [DNTypeName('System.Text.StringBuilder')]
  DNStringBuilder = interface(DNISerializable)
  ['{3341AB41-FC08-300B-9120-527DC9AC0CDC}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_MaxCapacity: Int32;
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Chars(index: Int32): Char;
    procedure set_Chars(index: Int32; value: Char);

  { methods } 

    function Insert(index: Int32; value: UInt32): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt64): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNObject): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNReadOnlySpan<Char>): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function Replace(oldValue: string; newValue: string): DNStringBuilder; overload;
    function Equals(sb: DNStringBuilder): Boolean; overload;
    function Equals(span: DNReadOnlySpan<Char>): Boolean; overload;
    function Replace(oldValue: string; newValue: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Append(value: PChar; valueCount: Int32): DNStringBuilder; overload;
    function EnsureCapacity(capacity: Int32): Int32;
    function ToString: string; overload;
    function ToString(startIndex: Int32; length: Int32): string; overload;
    function Clear: DNStringBuilder;
    function GetChunks: DNStringBuilder_ChunkEnumerator;
    function Append(value: Char; repeatCount: Int32): DNStringBuilder; overload;
    function Append(value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Append(value: string): DNStringBuilder; overload;
    function Append(value: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Append(value: DNStringBuilder): DNStringBuilder; overload;
    function Append(value: DNStringBuilder; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function AppendLine: DNStringBuilder; overload;
    function AppendLine(value: string): DNStringBuilder; overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32); overload;
    procedure CopyTo(sourceIndex: Int32; destination: DNSpan<Char>; count: Int32); overload;
    function Insert(index: Int32; value: string; count: Int32): DNStringBuilder; overload;
    function Remove(startIndex: Int32; length: Int32): DNStringBuilder;
    function Append(value: Boolean): DNStringBuilder; overload;
    function Append(value: Char): DNStringBuilder; overload;
    function Append(value: SByte): DNStringBuilder; overload;
    function Append(value: Byte): DNStringBuilder; overload;
    function Append(value: Int16): DNStringBuilder; overload;
    function Append(value: Int32): DNStringBuilder; overload;
    function Append(value: Int64): DNStringBuilder; overload;
    function Append(value: Single): DNStringBuilder; overload;
    function Append(value: Double): DNStringBuilder; overload;
    function Append(value: DNDecimal): DNStringBuilder; overload;
    function Append(value: UInt16): DNStringBuilder; overload;
    function Append(value: UInt32): DNStringBuilder; overload;
    function Append(value: UInt64): DNStringBuilder; overload;
    function Append(value: DNObject): DNStringBuilder; overload;
    function Append(value: TArray<Char>): DNStringBuilder; overload;
    function Append(value: DNReadOnlySpan<Char>): DNStringBuilder; overload;
    function Append(value: DNReadOnlyMemory<Char>): DNStringBuilder; overload;
    function AppendJoin(separator: string; values: TArray<DNObject>): DNStringBuilder; overload;
    function AppendJoin(separator: string; values: TArray<string>): DNStringBuilder; overload;
    function AppendJoin(separator: Char; values: TArray<DNObject>): DNStringBuilder; overload;
    function AppendJoin(separator: Char; values: TArray<string>): DNStringBuilder; overload;
    function Insert(index: Int32; value: string): DNStringBuilder; overload;
    function Insert(index: Int32; value: Boolean): DNStringBuilder; overload;
    function Insert(index: Int32; value: SByte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Byte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int16): DNStringBuilder; overload;
    function Insert(index: Int32; value: Char): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int64): DNStringBuilder; overload;
    function Insert(index: Int32; value: Single): DNStringBuilder; overload;
    function Insert(index: Int32; value: Double): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNDecimal): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt16): DNStringBuilder; overload;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property MaxCapacity: Int32 read get_MaxCapacity;
    property Length: Int32 read get_Length write set_Length;
    property Chars[index: Int32]: Char read get_Chars write set_Chars; default;
  end;

  TDNStringBuilder = class(TDNGenericImport<DNStringBuilderClass, DNStringBuilder>) end;

  //-------------namespace: System.Text.Unicode----------------
  DNUtf8Class = interface(DNObjectClass)
  ['{7FA7F244-786C-56ED-B236-5576A063D421}']
  { static methods } 

    {class} function FromUtf16(source: DNReadOnlySpan<Char>; destination: DNSpan<Byte>; out charsRead: Int32; out bytesWritten: Int32; replaceInvalidSequences: Boolean; isFinalBlock: Boolean): DNOperationStatus;
    {class} function ToUtf16(source: DNReadOnlySpan<Byte>; destination: DNSpan<Char>; out bytesRead: Int32; out charsWritten: Int32; replaceInvalidSequences: Boolean; isFinalBlock: Boolean): DNOperationStatus;

  end;

  [DNTypeName('System.Text.Unicode.Utf8')]
  DNUtf8 = interface(DNObject)
  ['{E92D630A-6BF2-3BE3-A795-24822E0AD585}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUtf8 = class(TDNGenericImport<DNUtf8Class, DNUtf8>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalClass<T> = interface(DNObjectClass)
  ['{04A5534A-F5B3-5022-BAA0-673607B2C13C}']
  { constructors } 

    {class} function init: DNAsyncLocal<T>; overload;
    {class} function init(valueChangedHandler: DNAction<DNAsyncLocalValueChangedArgs<T>>): DNAsyncLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.AsyncLocal`1')]
  DNAsyncLocal<T> = interface(DNObject)
  ['{26364D5F-A63F-332D-84A1-D3F33EAA99C7}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: T read get_Value write set_Value;
  end;

  TDNAsyncLocal<T> = class(TDNGenericImport<DNAsyncLocalClass<T>, DNAsyncLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenSourceClass = interface(DNObjectClass)
  ['{1A03E1CA-F3F5-581A-B11A-593F120773D7}']
  { constructors } 

    {class} function init: DNCancellationTokenSource; overload;
    {class} function init(delay: DNTimeSpan): DNCancellationTokenSource; overload;
    {class} function init(millisecondsDelay: Int32): DNCancellationTokenSource; overload;

  { static methods } 

    {class} function CreateLinkedTokenSource(token1: DNCancellationToken; token2: DNCancellationToken): DNCancellationTokenSource; overload;
    {class} function CreateLinkedTokenSource(token: DNCancellationToken): DNCancellationTokenSource; overload;
    {class} function CreateLinkedTokenSource(tokens: TArray<DNCancellationToken>): DNCancellationTokenSource; overload;

  end;

  [DNTypeName('System.Threading.CancellationTokenSource')]
  DNCancellationTokenSource = interface(DNIDisposable)
  ['{22766F6B-376D-33BC-83CD-DA7408DEA456}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_Token: DNCancellationToken;

  { methods } 

    procedure Cancel; overload;
    procedure Cancel(throwOnFirstException: Boolean); overload;
    procedure CancelAfter(delay: DNTimeSpan); overload;
    procedure CancelAfter(millisecondsDelay: Int32); overload;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenSource = class(TDNGenericImport<DNCancellationTokenSourceClass, DNCancellationTokenSource>) end;

  //-------------namespace: System.Threading----------------
  DNCompressedStackClass = interface(DNObjectClass)
  ['{EDD2259C-8528-59F0-9D2F-B3B79444D4D0}']
  { static methods } 

    {class} function Capture: DNCompressedStack;
    {class} function GetCompressedStack: DNCompressedStack;
    {class} procedure Run(compressedStack: DNCompressedStack; callback: DNContextCallback; state: DNObject);

  end;

  [DNTypeName('System.Threading.CompressedStack')]
  DNCompressedStack = interface(DNISerializable)
  ['{301B20B8-7AED-36C2-8AA7-29D173631662}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function CreateCopy: DNCompressedStack;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCompressedStack = class(TDNGenericImport<DNCompressedStackClass, DNCompressedStack>) end;

  //-------------namespace: System.Threading----------------
  DNExecutionContextClass = interface(DNObjectClass)
  ['{63FC1931-F340-56AB-B10B-54FD0D5E1F26}']
  { static methods } 

    {class} function Capture: DNExecutionContext;
    {class} function SuppressFlow: DNAsyncFlowControl;
    {class} procedure RestoreFlow;
    {class} function IsFlowSuppressed: Boolean;
    {class} procedure Run(executionContext: DNExecutionContext; callback: DNContextCallback; state: DNObject);
    {class} procedure Restore(executionContext: DNExecutionContext);

  end;

  [DNTypeName('System.Threading.ExecutionContext')]
  DNExecutionContext = interface(DNIDisposable)
  ['{44826EB9-E69B-3FF1-8720-99608C11EA41}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function CreateCopy: DNExecutionContext;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNExecutionContext = class(TDNGenericImport<DNExecutionContextClass, DNExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNInterlockedClass = interface(DNObjectClass)
  ['{75D9FDAD-6826-561E-A056-92C8F470046E}']
  { static methods } 

    {class} function Increment(out location: Int32): Int32; overload;
    {class} function Increment(out location: Int64): Int64; overload;
    {class} function Decrement(out location: Int32): Int32; overload;
    {class} function Decrement(out location: Int64): Int64; overload;
    {class} function Exchange(out location1: Int32; value: Int32): Int32; overload;
    {class} function Exchange(out location1: Int64; value: Int64): Int64; overload;
    {class} function Exchange(out location1: Single; value: Single): Single; overload;
    {class} function Exchange(out location1: Double; value: Double): Double; overload;
    {class} function Exchange(out location1: DNObject; value: DNObject): DNObject; overload;
    {class} function Exchange(out location1: IntPtr; value: IntPtr): IntPtr; overload;
    {class} function CompareExchange(out location1: Int32; value: Int32; comparand: Int32): Int32; overload;
    {class} function CompareExchange(out location1: Int64; value: Int64; comparand: Int64): Int64; overload;
    {class} function CompareExchange(out location1: Single; value: Single; comparand: Single): Single; overload;
    {class} function CompareExchange(out location1: Double; value: Double; comparand: Double): Double; overload;
    {class} function CompareExchange(out location1: DNObject; value: DNObject; comparand: DNObject): DNObject; overload;
    {class} function CompareExchange(out location1: IntPtr; value: IntPtr; comparand: IntPtr): IntPtr; overload;
    {class} function Add(out location1: Int32; value: Int32): Int32; overload;
    {class} function Add(out location1: Int64; value: Int64): Int64; overload;
    {class} function Read(out location: Int64): Int64; overload;
    {class} procedure MemoryBarrier;
    {class} procedure MemoryBarrierProcessWide;
    {class} function Increment(out location: UInt32): UInt32; overload;
    {class} function Increment(out location: UInt64): UInt64; overload;
    {class} function Decrement(out location: UInt32): UInt32; overload;
    {class} function Decrement(out location: UInt64): UInt64; overload;
    {class} function Exchange(out location1: UInt32; value: UInt32): UInt32; overload;
    {class} function Exchange(out location1: UInt64; value: UInt64): UInt64; overload;
    {class} function CompareExchange(out location1: UInt32; value: UInt32; comparand: UInt32): UInt32; overload;
    {class} function CompareExchange(out location1: UInt64; value: UInt64; comparand: UInt64): UInt64; overload;
    {class} function Add(out location1: UInt32; value: UInt32): UInt32; overload;
    {class} function Add(out location1: UInt64; value: UInt64): UInt64; overload;
    {class} function Read(out location: UInt64): UInt64; overload;
    {class} function &And(out location1: Int32; value: Int32): Int32; overload;
    {class} function &And(out location1: UInt32; value: UInt32): UInt32; overload;
    {class} function &And(out location1: Int64; value: Int64): Int64; overload;
    {class} function &And(out location1: UInt64; value: UInt64): UInt64; overload;
    {class} function &Or(out location1: Int32; value: Int32): Int32; overload;
    {class} function &Or(out location1: UInt32; value: UInt32): UInt32; overload;
    {class} function &Or(out location1: Int64; value: Int64): Int64; overload;
    {class} function &Or(out location1: UInt64; value: UInt64): UInt64; overload;

  end;

  [DNTypeName('System.Threading.Interlocked')]
  DNInterlocked = interface(DNObject)
  ['{100D14B4-D041-33AF-9C33-9D84D0C29E02}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNInterlocked = class(TDNGenericImport<DNInterlockedClass, DNInterlocked>) end;

  //-------------namespace: System.Threading----------------
  DNLazyInitializerClass = interface(DNObjectClass)
  ['{2CD467B3-313A-59A9-9C2F-C122F14D3977}']
  end;

  [DNTypeName('System.Threading.LazyInitializer')]
  DNLazyInitializer = interface(DNObject)
  ['{1588077E-2C14-3DA3-AA62-B1E8070E0BD8}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLazyInitializer = class(TDNGenericImport<DNLazyInitializerClass, DNLazyInitializer>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventSlimClass = interface(DNObjectClass)
  ['{43062F53-B55D-5BE9-BDDC-9AC61C77DFD6}']
  { constructors } 

    {class} function init: DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean): DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean; spinCount: Int32): DNManualResetEventSlim; overload;

  end;

  [DNTypeName('System.Threading.ManualResetEventSlim')]
  DNManualResetEventSlim = interface(DNIDisposable)
  ['{627524A3-0FCA-3ADB-B2C8-A0E0335194E4}']
  { getters & setters } 

    function get_WaitHandle: DNWaitHandle;
    function get_IsSet: Boolean;
    function get_SpinCount: Int32;

  { methods } 

    procedure &Set;
    procedure Reset;
    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WaitHandle: DNWaitHandle read get_WaitHandle;
    property IsSet: Boolean read get_IsSet;
    property SpinCount: Int32 read get_SpinCount;
  end;

  TDNManualResetEventSlim = class(TDNGenericImport<DNManualResetEventSlimClass, DNManualResetEventSlim>) end;

  //-------------namespace: System.Threading----------------
  DNMonitorClass = interface(DNObjectClass)
  ['{E865984D-0A2E-5223-A271-8D81959E497C}']
  { static getter & setter } 

    {class} function get_LockContentionCount: Int64;

  { static methods } 

    {class} procedure Enter(obj: DNObject); overload;
    {class} procedure Enter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} procedure &Exit(obj: DNObject);
    {class} function TryEnter(obj: DNObject): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} function TryEnter(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function TryEnter(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    {class} procedure TryEnter(obj: DNObject; timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    {class} function IsEntered(obj: DNObject): Boolean;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} function Wait(obj: DNObject): Boolean; overload;
    {class} procedure Pulse(obj: DNObject);
    {class} procedure PulseAll(obj: DNObject);

  { static propertys } 

    {class} property LockContentionCount: Int64 read get_LockContentionCount;
  end;

  [DNTypeName('System.Threading.Monitor')]
  DNMonitor = interface(DNObject)
  ['{11CF93B4-DC1D-3FE9-8B0C-142642D2F60E}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMonitor = class(TDNGenericImport<DNMonitorClass, DNMonitor>) end;

  //-------------namespace: System.Threading----------------
  DNOverlappedClass = interface(DNObjectClass)
  ['{D88329AF-7679-54B2-9AE9-9C69FE833D63}']
  { constructors } 

    {class} function init: DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: IntPtr; ar: DNIAsyncResult): DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: Int32; ar: DNIAsyncResult): DNOverlapped; overload;

  { static methods } 

    {class} function Unpack(var nativeOverlappedPtr: DNNativeOverlapped): DNOverlapped;
    {class} procedure Free(var nativeOverlappedPtr: DNNativeOverlapped);

  end;

  [DNTypeName('System.Threading.Overlapped')]
  DNOverlapped = interface(DNObject)
  ['{8967B367-DDF0-3E12-9625-2C572E5529AB}']
  { getters & setters } 

    function get_AsyncResult: DNIAsyncResult;
    procedure set_AsyncResult(value: DNIAsyncResult);
    function get_OffsetLow: Int32;
    procedure set_OffsetLow(value: Int32);
    function get_OffsetHigh: Int32;
    procedure set_OffsetHigh(value: Int32);
    function get_EventHandle: Int32;
    procedure set_EventHandle(value: Int32);
    function get_EventHandleIntPtr: IntPtr;
    procedure set_EventHandleIntPtr(value: IntPtr);

  { methods } 

    function Pack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function Pack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AsyncResult: DNIAsyncResult read get_AsyncResult write set_AsyncResult;
    property OffsetLow: Int32 read get_OffsetLow write set_OffsetLow;
    property OffsetHigh: Int32 read get_OffsetHigh write set_OffsetHigh;
    property EventHandle: Int32 read get_EventHandle write set_EventHandle;
    property EventHandleIntPtr: IntPtr read get_EventHandleIntPtr write set_EventHandleIntPtr;
  end;

  TDNOverlapped = class(TDNGenericImport<DNOverlappedClass, DNOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNPreAllocatedOverlappedClass = interface(DNObjectClass)
  ['{ED384109-B959-5B51-9E00-95C7465BF2F8}']
  { constructors } 

    {class} function init(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNPreAllocatedOverlapped;

  end;

  [DNTypeName('System.Threading.PreAllocatedOverlapped')]
  DNPreAllocatedOverlapped = interface(DNIDisposable)
  ['{BC947440-E595-35F4-BE4F-64C86EBA66DD}']
  { methods } 

    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPreAllocatedOverlapped = class(TDNGenericImport<DNPreAllocatedOverlappedClass, DNPreAllocatedOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockSlimClass = interface(DNObjectClass)
  ['{38A3CB5C-5A0F-55D7-A1A9-DD9435A89731}']
  { constructors } 

    {class} function init: DNReaderWriterLockSlim; overload;
    {class} function init(recursionPolicy: DNLockRecursionPolicy): DNReaderWriterLockSlim; overload;

  end;

  [DNTypeName('System.Threading.ReaderWriterLockSlim')]
  DNReaderWriterLockSlim = interface(DNIDisposable)
  ['{290EDC1E-1C19-33D3-B883-C6905487DD28}']
  { getters & setters } 

    function get_IsReadLockHeld: Boolean;
    function get_IsUpgradeableReadLockHeld: Boolean;
    function get_IsWriteLockHeld: Boolean;
    function get_RecursionPolicy: DNLockRecursionPolicy;
    function get_CurrentReadCount: Int32;
    function get_RecursiveReadCount: Int32;
    function get_RecursiveUpgradeCount: Int32;
    function get_RecursiveWriteCount: Int32;
    function get_WaitingReadCount: Int32;
    function get_WaitingUpgradeCount: Int32;
    function get_WaitingWriteCount: Int32;

  { methods } 

    procedure EnterReadLock;
    function TryEnterReadLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterWriteLock;
    function TryEnterWriteLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterWriteLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterUpgradeableReadLock;
    function TryEnterUpgradeableReadLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterUpgradeableReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure ExitReadLock;
    procedure ExitWriteLock;
    procedure ExitUpgradeableReadLock;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsReadLockHeld: Boolean read get_IsReadLockHeld;
    property IsUpgradeableReadLockHeld: Boolean read get_IsUpgradeableReadLockHeld;
    property IsWriteLockHeld: Boolean read get_IsWriteLockHeld;
    property RecursionPolicy: DNLockRecursionPolicy read get_RecursionPolicy;
    property CurrentReadCount: Int32 read get_CurrentReadCount;
    property RecursiveReadCount: Int32 read get_RecursiveReadCount;
    property RecursiveUpgradeCount: Int32 read get_RecursiveUpgradeCount;
    property RecursiveWriteCount: Int32 read get_RecursiveWriteCount;
    property WaitingReadCount: Int32 read get_WaitingReadCount;
    property WaitingUpgradeCount: Int32 read get_WaitingUpgradeCount;
    property WaitingWriteCount: Int32 read get_WaitingWriteCount;
  end;

  TDNReaderWriterLockSlim = class(TDNGenericImport<DNReaderWriterLockSlimClass, DNReaderWriterLockSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreSlimClass = interface(DNObjectClass)
  ['{6FDF2FDE-EEE1-5679-9386-7DE7A423A494}']
  { constructors } 

    {class} function init(initialCount: Int32): DNSemaphoreSlim; overload;
    {class} function init(initialCount: Int32; maxCount: Int32): DNSemaphoreSlim; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreSlim')]
  DNSemaphoreSlim = interface(DNIDisposable)
  ['{8CFF6532-014C-3332-B7FD-5488A2D40888}']
  { getters & setters } 

    function get_CurrentCount: Int32;
    function get_AvailableWaitHandle: DNWaitHandle;

  { methods } 

    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function WaitAsync: DNTask; overload;
    function WaitAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function WaitAsync(millisecondsTimeout: Int32): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function WaitAsync(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CurrentCount: Int32 read get_CurrentCount;
    property AvailableWaitHandle: DNWaitHandle read get_AvailableWaitHandle;
  end;

  TDNSemaphoreSlim = class(TDNGenericImport<DNSemaphoreSlimClass, DNSemaphoreSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationContextClass = interface(DNObjectClass)
  ['{EF26E60E-7AFF-56DF-ABBD-235C7AEDBC4E}']
  { static getter & setter } 

    {class} function get_Current: DNSynchronizationContext;

  { constructors } 

    {class} function init: DNSynchronizationContext;

  { static methods } 

    {class} procedure SetSynchronizationContext(syncContext: DNSynchronizationContext);

  { static propertys } 

    {class} property Current: DNSynchronizationContext read get_Current;
  end;

  [DNTypeName('System.Threading.SynchronizationContext')]
  DNSynchronizationContext = interface(DNObject)
  ['{7E4C7373-8F23-3309-9283-E818C0E4FEF8}']
  { methods } 

    function IsWaitNotificationRequired: Boolean;
    procedure Send(d: DNSendOrPostCallback; state: DNObject);
    procedure Post(d: DNSendOrPostCallback; state: DNObject);
    procedure OperationStarted;
    procedure OperationCompleted;
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    function CreateCopy: DNSynchronizationContext;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSynchronizationContext = class(TDNGenericImport<DNSynchronizationContextClass, DNSynchronizationContext>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNConcurrentExclusiveSchedulerPairClass = interface(DNObjectClass)
  ['{2A418CD8-62A4-5705-B384-1926B5A8653F}']
  { constructors } 

    {class} function init: DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32; maxItemsPerTask: Int32): DNConcurrentExclusiveSchedulerPair; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ConcurrentExclusiveSchedulerPair')]
  DNConcurrentExclusiveSchedulerPair = interface(DNObject)
  ['{BD582AF0-219D-3CE3-BF6A-0A8B0DDDEEF5}']
  { getters & setters } 

    function get_Completion: DNTask;
    function get_ConcurrentScheduler: DNTaskScheduler;
    function get_ExclusiveScheduler: DNTaskScheduler;

  { methods } 

    procedure Complete;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Completion: DNTask read get_Completion;
    property ConcurrentScheduler: DNTaskScheduler read get_ConcurrentScheduler;
    property ExclusiveScheduler: DNTaskScheduler read get_ExclusiveScheduler;
  end;

  TDNConcurrentExclusiveSchedulerPair = class(TDNGenericImport<DNConcurrentExclusiveSchedulerPairClass, DNConcurrentExclusiveSchedulerPair>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass = interface(DNObjectClass)
  ['{DAB1B97D-2C8C-5F0C-BF78-1E46FBC760F2}']
  { static getter & setter } 

    {class} function get_CurrentId: DNNullable<Int32>;
    {class} function get_Factory: DNTaskFactory;
    {class} function get_CompletedTask: DNTask;

  { constructors } 

    {class} function init(action: DNAction): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;

  { static methods } 

    {class} function WaitAny(tasks: TArray<DNTask>): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function FromException(exception: DNException): DNTask;
    {class} function FromCanceled(cancellationToken: DNCancellationToken): DNTask;
    {class} function Run(action: DNAction): DNTask; overload;
    {class} function Run(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(millisecondsDelay: Int32): DNTask; overload;
    {class} function Delay(millisecondsDelay: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function WhenAll(tasks: DNIEnumerable<DNTask>): DNTask; overload;
    {class} function WhenAll(tasks: TArray<DNTask>): DNTask; overload;
    {class} function WhenAny(tasks: TArray<DNTask>): DNTask<DNTask>; overload;
    {class} function WhenAny(task1: DNTask; task2: DNTask): DNTask<DNTask>; overload;
    {class} function WhenAny(tasks: DNIEnumerable<DNTask>): DNTask<DNTask>; overload;
    {class} function Yield: DNYieldAwaitable;
    {class} procedure WaitAll(tasks: TArray<DNTask>); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Boolean; overload;
    {class} procedure WaitAll(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;

  { static propertys } 

    {class} property CurrentId: DNNullable<Int32> read get_CurrentId;
    {class} property Factory: DNTaskFactory read get_Factory;
    {class} property CompletedTask: DNTask read get_CompletedTask;
  end;

  [DNTypeName('System.Threading.Tasks.Task')]
  DNTask = interface(DNIAsyncResult)
  ['{3113D547-3A41-3567-9B59-7D597195305B}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    function GetAwaiter: DNTaskAwaiter;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask = class(TDNGenericImport<DNTaskClass, DNTask>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass<TResult> = interface(DNTaskClass)
  ['{74A4E8DE-7A5F-5CF7-A668-DB5A2411F4AE}']
  { static getter & setter } 

    {class} function get_Factory: DNTaskFactory<TResult>;

  { constructors } 

    {class} function init(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;

  { static propertys } 

    {class} property Factory: DNTaskFactory<TResult> read get_Factory;
  end;

  [DNTypeName('System.Threading.Tasks.Task`1')]
  DNTask<TResult> = interface(DNTask)
  ['{56440075-BA51-37A6-9582-448A4F380BC0}']
  { getters & setters } 

    function get_Result: TResult;
    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    function GetAwaiter: DNTaskAwaiter<TResult>;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable<TResult>;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Result: TResult read get_Result;
    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask<TResult> = class(TDNGenericImport<DNTaskClass<TResult>, DNTask<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskAsyncEnumerableExtensionsClass = interface(DNObjectClass)
  ['{7FE63E1D-3C78-540E-8628-B332F2B95F3C}']
  { static methods } 

    {class} function ConfigureAwait(source: DNIAsyncDisposable; continueOnCapturedContext: Boolean): DNConfiguredAsyncDisposable; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskAsyncEnumerableExtensions')]
  DNTaskAsyncEnumerableExtensions = interface(DNObject)
  ['{CE49AEFC-397B-3419-B05C-303A1BB9E4FB}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTaskAsyncEnumerableExtensions = class(TDNGenericImport<DNTaskAsyncEnumerableExtensionsClass, DNTaskAsyncEnumerableExtensions>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCompletionSourceClass<TResult> = interface(DNObjectClass)
  ['{5DE7220F-5A94-533B-8436-1250D641614C}']
  { constructors } 

    {class} function init: DNTaskCompletionSource<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject; creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCompletionSource`1')]
  DNTaskCompletionSource<TResult> = interface(DNObject)
  ['{7D0AC411-EE74-3BD2-8A30-F8B86E7452A0}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    procedure SetException(exception: DNException); overload;
    procedure SetException(exceptions: DNIEnumerable<DNException>); overload;
    function TrySetException(exception: DNException): Boolean; overload;
    function TrySetException(exceptions: DNIEnumerable<DNException>): Boolean; overload;
    procedure SetResult(result: TResult);
    function TrySetResult(result: TResult): Boolean;
    procedure SetCanceled; overload;
    procedure SetCanceled(cancellationToken: DNCancellationToken); overload;
    function TrySetCanceled: Boolean; overload;
    function TrySetCanceled(cancellationToken: DNCancellationToken): Boolean; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNTaskCompletionSource<TResult> = class(TDNGenericImport<DNTaskCompletionSourceClass<TResult>, DNTaskCompletionSource<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCompletionSourceClass = interface(DNObjectClass)
  ['{E764CD5B-889E-5C0F-9EB2-84B47339E709}']
  { constructors } 

    {class} function init: DNTaskCompletionSource; overload;
    {class} function init(creationOptions: DNTaskCreationOptions): DNTaskCompletionSource; overload;
    {class} function init(state: DNObject): DNTaskCompletionSource; overload;
    {class} function init(state: DNObject; creationOptions: DNTaskCreationOptions): DNTaskCompletionSource; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCompletionSource')]
  DNTaskCompletionSource = interface(DNObject)
  ['{E634C9D2-EF05-30CB-9EB7-CF50FC5C2F11}']
  { getters & setters } 

    function get_Task: DNTask;

  { methods } 

    procedure SetException(exception: DNException); overload;
    procedure SetException(exceptions: DNIEnumerable<DNException>); overload;
    function TrySetException(exception: DNException): Boolean; overload;
    function TrySetException(exceptions: DNIEnumerable<DNException>): Boolean; overload;
    procedure SetResult;
    function TrySetResult: Boolean;
    procedure SetCanceled; overload;
    procedure SetCanceled(cancellationToken: DNCancellationToken); overload;
    function TrySetCanceled: Boolean; overload;
    function TrySetCanceled(cancellationToken: DNCancellationToken): Boolean; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Task: DNTask read get_Task;
  end;

  TDNTaskCompletionSource = class(TDNGenericImport<DNTaskCompletionSourceClass, DNTaskCompletionSource>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskExtensionsClass = interface(DNObjectClass)
  ['{09FFE926-65A9-5A37-96CF-F20A77EAEA1B}']
  { static methods } 

    {class} function Unwrap(task: DNTask<DNTask>): DNTask; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskExtensions')]
  DNTaskExtensions = interface(DNObject)
  ['{41FF1E0D-FE0D-30BC-BFCA-7B678F3516C4}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTaskExtensions = class(TDNGenericImport<DNTaskExtensionsClass, DNTaskExtensions>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass<TResult> = interface(DNObjectClass)
  ['{BCFBB818-F0B2-5FEF-B449-AA5A652770EF}']
  { constructors } 

    {class} function init: DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory<TResult>; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory`1')]
  DNTaskFactory<TResult> = interface(DNObject)
  ['{AD4FA8D3-0956-3186-B2EE-65E87A20D54D}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function StartNew(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory<TResult> = class(TDNGenericImport<DNTaskFactoryClass<TResult>, DNTaskFactory<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass = interface(DNObjectClass)
  ['{F2CD90EC-BD02-5088-B576-2F35D4264EAB}']
  { constructors } 

    {class} function init: DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory')]
  DNTaskFactory = interface(DNObject)
  ['{2134CD5F-55F1-3B26-9EBA-7F7D524A85D3}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function StartNew(action: DNAction): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory = class(TDNGenericImport<DNTaskFactoryClass, DNTaskFactory>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerClass = interface(DNObjectClass)
  ['{C0E8BC14-DEFF-5283-9996-20B767A4BD6D}']
  { static getter & setter } 

    {class} function get_Default: DNTaskScheduler;
    {class} function get_Current: DNTaskScheduler;

  { static methods } 

    {class} function FromCurrentSynchronizationContext: DNTaskScheduler;

  { static propertys } 

    {class} property &Default: DNTaskScheduler read get_Default;
    {class} property Current: DNTaskScheduler read get_Current;
  end;

  [DNTypeName('System.Threading.Tasks.TaskScheduler')]
  DNTaskScheduler = interface(DNObject)
  ['{E1C56973-CE54-38A6-A971-E3FEDA65020D}']
  { getters & setters } 

    function get_MaximumConcurrencyLevel: Int32;
    function get_Id: Int32;

  { events } 

    {class} procedure add_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);
    {class} procedure remove_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);

  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MaximumConcurrencyLevel: Int32 read get_MaximumConcurrencyLevel;
    property Id: Int32 read get_Id;
  end;

  TDNTaskScheduler = class(TDNGenericImport<DNTaskSchedulerClass, DNTaskScheduler>) end;

  //-------------namespace: System.Threading----------------
  DNThreadLocalClass<T> = interface(DNObjectClass)
  ['{A99D164F-4616-5EF8-9013-857806A7C92A}']
  { constructors } 

    {class} function init: DNThreadLocal<T>; overload;
    {class} function init(trackAllValues: Boolean): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; trackAllValues: Boolean): DNThreadLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.ThreadLocal`1')]
  DNThreadLocal<T> = interface(DNIDisposable)
  ['{430EEB5B-6AD6-3C65-940B-CBB0E32561B9}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);
    function get_Values: DNIList<T>;
    function get_IsValueCreated: Boolean;

  { methods } 

    procedure Dispose;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Value: T read get_Value write set_Value;
    property Values: DNIList<T> read get_Values;
    property IsValueCreated: Boolean read get_IsValueCreated;
  end;

  TDNThreadLocal<T> = class(TDNGenericImport<DNThreadLocalClass<T>, DNThreadLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolClass = interface(DNObjectClass)
  ['{124305C9-3C43-5016-B6E8-DFDFEEECD841}']
  { static getter & setter } 

    {class} function get_ThreadCount: Int32;
    {class} function get_CompletedWorkItemCount: Int64;
    {class} function get_PendingWorkItemCount: Int64;

  { static methods } 

    {class} function SetMaxThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMaxThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function SetMinThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMinThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} procedure GetAvailableThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function UnsafeQueueNativeOverlapped(var overlapped: DNNativeOverlapped): Boolean;
    {class} function BindHandle(osHandle: IntPtr): Boolean; overload;
    {class} function BindHandle(osHandle: DNSafeHandle): Boolean; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback): Boolean; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean; overload;
    {class} function UnsafeQueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean; overload;
    {class} function UnsafeQueueUserWorkItem(callBack: DNIThreadPoolWorkItem; preferLocal: Boolean): Boolean; overload;

  { static propertys } 

    {class} property ThreadCount: Int32 read get_ThreadCount;
    {class} property CompletedWorkItemCount: Int64 read get_CompletedWorkItemCount;
    {class} property PendingWorkItemCount: Int64 read get_PendingWorkItemCount;
  end;

  [DNTypeName('System.Threading.ThreadPool')]
  DNThreadPool = interface(DNObject)
  ['{525D4A0D-4C72-3732-9899-ABF82D6DB971}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNThreadPool = class(TDNGenericImport<DNThreadPoolClass, DNThreadPool>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolBoundHandleClass = interface(DNObjectClass)
  ['{F95C1CFB-4E40-5CDF-AF67-980D2009CBE6}']
  { static methods } 

    {class} function BindHandle(handle: DNSafeHandle): DNThreadPoolBoundHandle;
    {class} function GetNativeOverlappedState(var overlapped: DNNativeOverlapped): DNObject;

  end;

  [DNTypeName('System.Threading.ThreadPoolBoundHandle')]
  DNThreadPoolBoundHandle = interface(DNIDisposable)
  ['{3E01B9A8-E30B-354A-B3D1-AE91D9F97457}']
  { getters & setters } 

    function get_Handle: DNSafeHandle;

  { methods } 

    function AllocateNativeOverlapped(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNNativeOverlapped; overload;
    function AllocateNativeOverlapped(preAllocated: DNPreAllocatedOverlapped): DNNativeOverlapped; overload;
    procedure FreeNativeOverlapped(var overlapped: DNNativeOverlapped);
    procedure Dispose;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handle: DNSafeHandle read get_Handle;
  end;

  TDNThreadPoolBoundHandle = class(TDNGenericImport<DNThreadPoolBoundHandleClass, DNThreadPoolBoundHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimeoutClass = interface(DNObjectClass)
  ['{3AA6F0DB-FFAE-5E07-805A-D30F252F1C1A}']
  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteTimeSpan: DNTimeSpan;

  { static fields } 

    {class} property InfiniteTimeSpan: DNTimeSpan read __fakeFieldGet_InfiniteTimeSpan;

  end;

  [DNTypeName('System.Threading.Timeout')]
  DNTimeout = interface(DNObject)
  ['{88C42CB3-6E5D-3E55-9617-7964A8CD2452}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTimeout = class(TDNGenericImport<DNTimeoutClass, DNTimeout>)
  public const
   Infinite = -1;
  end;

  //-------------namespace: System.Threading----------------
  DNVolatileClass = interface(DNObjectClass)
  ['{67DC2726-FC19-5FF9-A792-527A5ECF1204}']
  { static methods } 

    {class} function Read(out location: Boolean): Boolean; overload;
    {class} procedure Write(out location: Boolean; value: Boolean); overload;
    {class} function Read(out location: Byte): Byte; overload;
    {class} procedure Write(out location: Byte; value: Byte); overload;
    {class} function Read(out location: Double): Double; overload;
    {class} procedure Write(out location: Double; value: Double); overload;
    {class} function Read(out location: Int16): Int16; overload;
    {class} procedure Write(out location: Int16; value: Int16); overload;
    {class} function Read(out location: Int32): Int32; overload;
    {class} procedure Write(out location: Int32; value: Int32); overload;
    {class} function Read(out location: Int64): Int64; overload;
    {class} procedure Write(out location: Int64; value: Int64); overload;
    {class} function Read(out location: IntPtr): IntPtr; overload;
    {class} procedure Write(out location: IntPtr; value: IntPtr); overload;
    {class} function Read(out location: SByte): SByte; overload;
    {class} procedure Write(out location: SByte; value: SByte); overload;
    {class} function Read(out location: Single): Single; overload;
    {class} procedure Write(out location: Single; value: Single); overload;
    {class} function Read(out location: UInt16): UInt16; overload;
    {class} procedure Write(out location: UInt16; value: UInt16); overload;
    {class} function Read(out location: UInt32): UInt32; overload;
    {class} procedure Write(out location: UInt32; value: UInt32); overload;
    {class} function Read(out location: UInt64): UInt64; overload;
    {class} procedure Write(out location: UInt64; value: UInt64); overload;
    {class} function Read(out location: UIntPtr): UIntPtr; overload;
    {class} procedure Write(out location: UIntPtr; value: UIntPtr); overload;

  end;

  [DNTypeName('System.Threading.Volatile')]
  DNVolatile = interface(DNObject)
  ['{12FE2454-4785-3812-B496-1A76648E6B8D}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVolatile = class(TDNGenericImport<DNVolatileClass, DNVolatile>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleExtensionsClass = interface(DNObjectClass)
  ['{A1829D7A-E518-5C5B-9704-C25CC4BF0AEE}']
  { static methods } 

    {class} function GetSafeWaitHandle(waitHandle: DNWaitHandle): DNSafeWaitHandle;
    {class} procedure SetSafeWaitHandle(waitHandle: DNWaitHandle; value: DNSafeWaitHandle);

  end;

  [DNTypeName('System.Threading.WaitHandleExtensions')]
  DNWaitHandleExtensions = interface(DNObject)
  ['{0B04D31F-F42F-3CB0-8369-2F0A37BE877C}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNWaitHandleExtensions = class(TDNGenericImport<DNWaitHandleExtensionsClass, DNWaitHandleExtensions>) end;

  //-------------namespace: System----------------
  DNTimeZoneClass = interface(DNObjectClass)
  ['{9365E4CB-9458-5533-A300-8CCA580FBFB6}']
  { static getter & setter } 

    {class} function get_CurrentTimeZone: DNTimeZone;

  { static methods } 

    {class} function IsDaylightSavingTime(time: DNDateTime; daylightTimes: DNDaylightTime): Boolean; overload;

  { static propertys } 

    {class} property CurrentTimeZone: DNTimeZone read get_CurrentTimeZone;
  end;

  [DNTypeName('System.TimeZone')]
  DNTimeZone = interface(DNObject)
  ['{7D170AF4-1E69-3517-9DCD-AFBD843D5607}']
  { getters & setters } 

    function get_StandardName: string;
    function get_DaylightName: string;

  { methods } 

    function GetUtcOffset(time: DNDateTime): DNTimeSpan;
    function ToUniversalTime(time: DNDateTime): DNDateTime;
    function ToLocalTime(time: DNDateTime): DNDateTime;
    function GetDaylightChanges(year: Int32): DNDaylightTime;
    function IsDaylightSavingTime(time: DNDateTime): Boolean; overload;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
  end;

  TDNTimeZone = class(TDNGenericImport<DNTimeZoneClass, DNTimeZone>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfoClass = interface(DNObjectClass)
  ['{20A7DD3A-8E1C-5FAA-8DF0-425AD53D5CE9}']
  { static getter & setter } 

    {class} function get_Local: DNTimeZoneInfo;
    {class} function get_Utc: DNTimeZoneInfo;

  { static methods } 

    {class} function FindSystemTimeZoneById(id: string): DNTimeZoneInfo;
    {class} procedure ClearCachedData;
    {class} function ConvertTimeBySystemTimeZoneId(dateTimeOffset: DNDateTimeOffset; destinationTimeZoneId: string): DNDateTimeOffset; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; sourceTimeZoneId: string; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTime(dateTimeOffset: DNDateTimeOffset; destinationTimeZone: DNTimeZoneInfo): DNDateTimeOffset; overload;
    {class} function ConvertTime(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTime(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTimeFromUtc(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime): DNDateTime; overload;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function FromSerializedString(source: string): DNTimeZoneInfo;
    {class} function GetSystemTimeZones: DNReadOnlyCollection<DNTimeZoneInfo>;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>; disableDaylightSavingTime: Boolean): DNTimeZoneInfo; overload;

  { static propertys } 

    {class} property Local: DNTimeZoneInfo read get_Local;
    {class} property Utc: DNTimeZoneInfo read get_Utc;
  end;

  [DNTypeName('System.TimeZoneInfo')]
  DNTimeZoneInfo = interface(DNObject)
  ['{EBBC7F81-5990-38EE-ABC6-E071AAF559F1}']
  { getters & setters } 

    function get_Id: string;
    function get_DisplayName: string;
    function get_StandardName: string;
    function get_DaylightName: string;
    function get_BaseUtcOffset: DNTimeSpan;
    function get_SupportsDaylightSavingTime: Boolean;

  { methods } 

    function GetAmbiguousTimeOffsets(dateTimeOffset: DNDateTimeOffset): TArray<DNTimeSpan>; overload;
    function GetAmbiguousTimeOffsets(dateTime: DNDateTime): TArray<DNTimeSpan>; overload;
    function GetUtcOffset(dateTimeOffset: DNDateTimeOffset): DNTimeSpan; overload;
    function GetUtcOffset(dateTime: DNDateTime): DNTimeSpan; overload;
    function IsAmbiguousTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsAmbiguousTime(dateTime: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsDaylightSavingTime(dateTime: DNDateTime): Boolean; overload;
    function IsInvalidTime(dateTime: DNDateTime): Boolean;
    function Equals(other: DNTimeZoneInfo): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function HasSameRules(other: DNTimeZoneInfo): Boolean;
    function ToSerializedString: string;
    function ToString: string;
    function GetAdjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>;
    function GetType: DNType;

  { propertys } 

    property Id: string read get_Id;
    property DisplayName: string read get_DisplayName;
    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
    property BaseUtcOffset: DNTimeSpan read get_BaseUtcOffset;
    property SupportsDaylightSavingTime: Boolean read get_SupportsDaylightSavingTime;
  end;

  TDNTimeZoneInfo = class(TDNGenericImport<DNTimeZoneInfoClass, DNTimeZoneInfo>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_AdjustmentRuleClass = interface(DNObjectClass)
  ['{97491680-9200-52D9-880F-5B7732057F15}']
  { static methods } 

    {class} function CreateAdjustmentRule(dateStart: DNDateTime; dateEnd: DNDateTime; daylightDelta: DNTimeSpan; daylightTransitionStart: DNTimeZoneInfo_TransitionTime; daylightTransitionEnd: DNTimeZoneInfo_TransitionTime): DNTimeZoneInfo_AdjustmentRule;

  end;

  [DNTypeName('System.TimeZoneInfo+AdjustmentRule')]
  DNTimeZoneInfo_AdjustmentRule = interface(DNObject)
  ['{557B5545-74E4-305F-94D2-3C903FD31F66}']
  { getters & setters } 

    function get_DateStart: DNDateTime;
    function get_DateEnd: DNDateTime;
    function get_DaylightDelta: DNTimeSpan;
    function get_DaylightTransitionStart: DNTimeZoneInfo_TransitionTime;
    function get_DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime;

  { methods } 

    function Equals(other: DNTimeZoneInfo_AdjustmentRule): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;

  { propertys } 

    property DateStart: DNDateTime read get_DateStart;
    property DateEnd: DNDateTime read get_DateEnd;
    property DaylightDelta: DNTimeSpan read get_DaylightDelta;
    property DaylightTransitionStart: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionStart;
    property DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionEnd;
  end;

  TDNTimeZoneInfo_AdjustmentRule = class(TDNGenericImport<DNTimeZoneInfo_AdjustmentRuleClass, DNTimeZoneInfo_AdjustmentRule>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1> = interface(DNObjectClass)
  ['{8CEF022B-5608-5422-AECD-4DB96D396787}']
  { constructors } 

    {class} function init(item1: T1): DNTuple<T1>;

  end;

  [DNTypeName('System.Tuple`1')]
  DNTuple<T1> = interface(DNIStructuralEquatable)
  ['{C9DDE4B4-6DCE-3591-BBDC-2EED0F9F1FB7}']
  { getters & setters } 

    function get_Item1: T1;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
  end;

  TDNTuple<T1> = class(TDNGenericImport<DNTupleClass<T1>, DNTuple<T1>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2> = interface(DNObjectClass)
  ['{FFCCAAE2-C461-5DBC-934B-7F111349BD23}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNTuple<T1, T2>;

  end;

  [DNTypeName('System.Tuple`2')]
  DNTuple<T1, T2> = interface(DNIStructuralEquatable)
  ['{148A5038-968D-34ED-9D47-3F3E2C70BEB9}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
  end;

  TDNTuple<T1, T2> = class(TDNGenericImport<DNTupleClass<T1, T2>, DNTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3> = interface(DNObjectClass)
  ['{A9AAE9C6-EC1A-5D21-918A-58C35E3C7E9E}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.Tuple`3')]
  DNTuple<T1, T2, T3> = interface(DNIStructuralEquatable)
  ['{3A7A8020-D025-3828-870A-818A41B63319}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
  end;

  TDNTuple<T1, T2, T3> = class(TDNGenericImport<DNTupleClass<T1, T2, T3>, DNTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4> = interface(DNObjectClass)
  ['{5E557A52-7CB3-5A9C-AD76-A20AC4514883}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.Tuple`4')]
  DNTuple<T1, T2, T3, T4> = interface(DNIStructuralEquatable)
  ['{60ADE993-B2B1-37DD-96F8-FA7843801A54}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
  end;

  TDNTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4>, DNTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5> = interface(DNObjectClass)
  ['{4809E0FB-1506-5DF4-8F6D-C7D74C7FB958}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.Tuple`5')]
  DNTuple<T1, T2, T3, T4, T5> = interface(DNIStructuralEquatable)
  ['{38EBA46C-E2C8-33B4-A243-C9C0216436F0}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
  end;

  TDNTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5>, DNTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNObjectClass)
  ['{410C46DF-F5B4-5439-AD12-259F39F23951}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.Tuple`6')]
  DNTuple<T1, T2, T3, T4, T5, T6> = interface(DNIStructuralEquatable)
  ['{466D123A-D91F-3479-9121-CE22E49DC17A}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6>, DNTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNObjectClass)
  ['{8B5BF917-CEEA-5DEA-8E65-8D71F9E72079}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.Tuple`7')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNIStructuralEquatable)
  ['{68ADD537-146F-3C75-AE51-3EE9E5280F8C}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNObjectClass)
  ['{B4BB6B60-9A7C-580B-87D2-289B3EC29541}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.Tuple`8')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNIStructuralEquatable)
  ['{04727F22-E1C6-3BD0-A340-32B353EAFD78}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;
    function get_Rest: TRest;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
    property Rest: TRest read get_Rest;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;

  //-------------namespace: System----------------
  DNTupleClass = interface(DNObjectClass)
  ['{3FF23E27-D3D8-54DD-9400-864D183ADE15}']
  end;

  [DNTypeName('System.Tuple')]
  DNTuple = interface(DNObject)
  ['{14475CCC-B842-3D9B-882F-3E319578F141}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTuple = class(TDNGenericImport<DNTupleClass, DNTuple>) end;

  //-------------namespace: System----------------
  DNTupleExtensionsClass = interface(DNObjectClass)
  ['{629A91D6-63DC-5D2B-A728-5C19DE12C5F0}']
  end;

  [DNTypeName('System.TupleExtensions')]
  DNTupleExtensions = interface(DNObject)
  ['{6E994BC5-AD1F-312A-ACB1-2091C702C062}']
  { methods } 

    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTupleExtensions = class(TDNGenericImport<DNTupleExtensionsClass, DNTupleExtensions>) end;

  //-------------namespace: System----------------
  DNUnitySerializationHolderClass = interface(DNObjectClass)
  ['{151A80F7-DFD5-5F62-B7D9-8455753D92A1}']
  { constructors } 

    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNUnitySerializationHolder;

  end;

  [DNTypeName('System.UnitySerializationHolder')]
  DNUnitySerializationHolder = interface(DNISerializable)
  ['{0659B126-4F97-304A-8D18-2BC9E03A2E28}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetRealObject(context: DNStreamingContext): DNObject;
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUnitySerializationHolder = class(TDNGenericImport<DNUnitySerializationHolderClass, DNUnitySerializationHolder>) end;

  //-------------namespace: System----------------
  DNValueTypeClass = interface(DNObjectClass)
  ['{759704DA-9370-5755-BE08-D85EDC67ED7F}']
  end;

  [DNTypeName('System.ValueType')]
  DNValueType = interface(DNObject)
  ['{41ED565B-0B50-3F6A-A042-E0B468F15BDB}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueType = class(TDNGenericImport<DNValueTypeClass, DNValueType>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  DNComActivationContextClass = interface(DNValueTypeClass)
  ['{155DB9A6-0D7B-59D4-87CC-8852CC6CD685}']
  { static methods } 

    {class} function Create(out cxtInt: DNComActivationContextInternal): DNComActivationContext;

  end;

  [DNTypeName('Internal.Runtime.InteropServices.ComActivationContext')]
  DNComActivationContext = interface(DNValueType)
  ['{96876DF4-D9E0-3314-BFA9-266557542183}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNComActivationContext = class(TDNGenericImport<DNComActivationContextClass, DNComActivationContext>) end;

  //-------------namespace: Internal.Runtime.InteropServices----------------
  DNComActivationContextInternalClass = interface(DNValueTypeClass)
  ['{07451E90-D267-54E3-A9AC-12415BFD53B7}']
  end;

  [DNTypeName('Internal.Runtime.InteropServices.ComActivationContextInternal')]
  DNComActivationContextInternal = interface(DNValueType)
  ['{28116A02-14FB-34B3-938C-B698096C1E51}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNComActivationContextInternal = class(TDNGenericImport<DNComActivationContextInternalClass, DNComActivationContextInternal>) end;

  //-------------namespace: System----------------
  DNArgIteratorClass = interface(DNValueTypeClass)
  ['{6B7BF130-5BFB-5741-BD02-031EC8FEF13D}']
  { constructors } 

    {class} function init(arglist: DNRuntimeArgumentHandle): DNArgIterator; overload;
    {class} function init(arglist: DNRuntimeArgumentHandle; var ptr: DNVoid): DNArgIterator; overload;

  end;

  [DNTypeName('System.ArgIterator')]
  DNArgIterator = interface(DNValueType)
  ['{29956E48-8C8C-3C73-822F-F170E182169D}']
  { methods } 

    function GetNextArg: DNTypedReference; overload;
    function GetNextArg(rth: DNRuntimeTypeHandle): DNTypedReference; overload;
    procedure &End;
    function GetRemainingCount: Int32;
    function GetNextArgType: DNRuntimeTypeHandle;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArgIterator = class(TDNGenericImport<DNArgIteratorClass, DNArgIterator>) end;

  //-------------namespace: System----------------
  DNArraySegmentClass<T> = interface(DNValueTypeClass)
  ['{A77BB30A-A949-598F-8E44-874D2F30B977}']
  { static getter & setter } 

    {class} function get_Empty: DNArraySegment<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNArraySegment<T>; overload;
    {class} function init(&array: TArray<T>; offset: Int32; count: Int32): DNArraySegment<T>; overload;

  { static propertys } 

    {class} property Empty: DNArraySegment<T> read get_Empty;
  end;

  [DNTypeName('System.ArraySegment`1')]
  DNArraySegment<T> = interface(DNValueType)
  ['{8288435B-A2CD-3270-A314-D96ADE27557E}']
  { getters & setters } 

    function get_Array: TArray<T>;
    function get_Offset: Int32;
    function get_Count: Int32;
    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function GetEnumerator: DNArraySegment_Enumerator<T>;
    function GetHashCode: Int32;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; destinationIndex: Int32); overload;
    procedure CopyTo(destination: DNArraySegment<T>); overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArraySegment<T>): Boolean; overload;
    function Slice(index: Int32): DNArraySegment<T>; overload;
    function Slice(index: Int32; count: Int32): DNArraySegment<T>; overload;
    function ToArray: TArray<T>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property &Array: TArray<T> read get_Array;
    property Offset: Int32 read get_Offset;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  TDNArraySegment<T> = class(TDNGenericImport<DNArraySegmentClass<T>, DNArraySegment<T>>) end;

  //-------------namespace: System----------------
  DNArraySegment_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{41944688-0F67-5CAA-86E0-3D7D0BFD99F3}']
  end;

  [DNTypeName('System.ArraySegment`1+Enumerator')]
  DNArraySegment_Enumerator<T> = interface(DNValueType)
  ['{7CEC2F79-1C18-335F-A141-BA0F41A4435D}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNArraySegment_Enumerator<T> = class(TDNGenericImport<DNArraySegment_EnumeratorClass<T>, DNArraySegment_Enumerator<T>>) end;

  //-------------namespace: System----------------
  DNBooleanClass = interface(DNValueTypeClass)
  ['{8811A55D-6805-5646-A3CD-DA7C655EE776}']
  { static fields getter & setter } 

   function __fakeFieldGet_TrueString: string;
   function __fakeFieldGet_FalseString: string;

  { static fields } 

    {class} property TrueString: string read __fakeFieldGet_TrueString;
    {class} property FalseString: string read __fakeFieldGet_FalseString;

  { static methods } 

    {class} function Parse(value: string): Boolean; overload;
    {class} function Parse(value: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function TryParse(value: string; out result: Boolean): Boolean; overload;
    {class} function TryParse(value: DNReadOnlySpan<Char>; out result: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Boolean')]
  DNBoolean = interface(DNValueType)
  ['{6031C6D4-E777-3614-B56E-6620B78D97EC}']
  { methods } 

    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32): Boolean;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Boolean): Boolean; overload;
    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: Boolean): Int32; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNBoolean = class(TDNGenericImport<DNBooleanClass, DNBoolean>) end;

  //-------------namespace: System.Buffers----------------
  DNMemoryHandleClass = interface(DNValueTypeClass)
  ['{385D25D4-8413-53DF-BA73-2765E2582DB1}']
  { constructors } 

    {class} function init(var pointer: DNVoid; handle: DNGCHandle; pinnable: DNIPinnable): DNMemoryHandle;

  end;

  [DNTypeName('System.Buffers.MemoryHandle')]
  DNMemoryHandle = interface(DNValueType)
  ['{8B8E03AE-A51C-3998-8B5B-48FC4AFB29E8}']
  { getters & setters } 

    function get_Pointer: DNVoid;

  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Pointer: DNVoid read get_Pointer;
  end;

  TDNMemoryHandle = class(TDNGenericImport<DNMemoryHandleClass, DNMemoryHandle>) end;

  //-------------namespace: System.Buffers----------------
  DNStandardFormatClass = interface(DNValueTypeClass)
  ['{D08384A2-D42C-5AE0-A50B-0B7BE1E436AC}']
  { constructors } 

    {class} function init(symbol: Char; precision: Byte): DNStandardFormat;

  { static methods } 

    {class} function Parse(format: DNReadOnlySpan<Char>): DNStandardFormat; overload;
    {class} function Parse(format: string): DNStandardFormat; overload;
    {class} function TryParse(format: DNReadOnlySpan<Char>; out result: DNStandardFormat): Boolean;

  end;

  [DNTypeName('System.Buffers.StandardFormat')]
  DNStandardFormat = interface(DNValueType)
  ['{A2F6345D-B4DE-3F23-8944-EEB9DFA1B57A}']
  { getters & setters } 

    function get_Symbol: Char;
    function get_Precision: Byte;
    function get_HasPrecision: Boolean;
    function get_IsDefault: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(other: DNStandardFormat): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Symbol: Char read get_Symbol;
    property Precision: Byte read get_Precision;
    property HasPrecision: Boolean read get_HasPrecision;
    property IsDefault: Boolean read get_IsDefault;
  end;

  TDNStandardFormat = class(TDNGenericImport<DNStandardFormatClass, DNStandardFormat>)
  public const
   NoPrecision = 255;
   MaxPrecision = 99;
  end;

  //-------------namespace: System----------------
  DNByteClass = interface(DNValueTypeClass)
  ['{1CA3F3B4-7B8F-561D-98FF-51F8F28C7934}']
  { static methods } 

    {class} function Parse(s: string): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Byte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Byte; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Byte; overload;
    {class} function TryParse(s: string; out result: Byte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Byte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Byte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Byte): Boolean; overload;

  end;

  [DNTypeName('System.Byte')]
  DNByte = interface(DNValueType)
  ['{498BCC88-F160-3855-A4D0-9FA55652EECE}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Byte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Byte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNByte = class(TDNGenericImport<DNByteClass, DNByte>)
  public const
   MaxValue = 255;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNCharClass = interface(DNValueTypeClass)
  ['{E973EBD2-95ED-5AB7-A916-4B634CB12A8E}']
  { static methods } 

    {class} function IsControl(s: string; index: Int32): Boolean; overload;
    {class} function IsDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLetter(s: string; index: Int32): Boolean; overload;
    {class} function IsLetterOrDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLower(s: string; index: Int32): Boolean; overload;
    {class} function IsNumber(c: Char): Boolean; overload;
    {class} function IsNumber(s: string; index: Int32): Boolean; overload;
    {class} function IsPunctuation(s: string; index: Int32): Boolean; overload;
    {class} function IsSeparator(c: Char): Boolean; overload;
    {class} function IsSeparator(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogate(c: Char): Boolean; overload;
    {class} function IsSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSymbol(c: Char): Boolean; overload;
    {class} function IsSymbol(s: string; index: Int32): Boolean; overload;
    {class} function IsUpper(s: string; index: Int32): Boolean; overload;
    {class} function IsWhiteSpace(s: string; index: Int32): Boolean; overload;
    {class} function GetUnicodeCategory(c: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;
    {class} function GetNumericValue(c: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function IsHighSurrogate(c: Char): Boolean; overload;
    {class} function IsHighSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsLowSurrogate(c: Char): Boolean; overload;
    {class} function IsLowSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(highSurrogate: Char; lowSurrogate: Char): Boolean; overload;
    {class} function ConvertFromUtf32(utf32: Int32): string;
    {class} function ConvertToUtf32(highSurrogate: Char; lowSurrogate: Char): Int32; overload;
    {class} function ConvertToUtf32(s: string; index: Int32): Int32; overload;
    {class} function ToString(c: Char): string; overload;
    {class} function Parse(s: string): Char;
    {class} function TryParse(s: string; out result: Char): Boolean;
    {class} function IsDigit(c: Char): Boolean; overload;
    {class} function IsLetter(c: Char): Boolean; overload;
    {class} function IsWhiteSpace(c: Char): Boolean; overload;
    {class} function IsUpper(c: Char): Boolean; overload;
    {class} function IsLower(c: Char): Boolean; overload;
    {class} function IsPunctuation(c: Char): Boolean; overload;
    {class} function IsLetterOrDigit(c: Char): Boolean; overload;
    {class} function ToUpper(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToUpper(c: Char): Char; overload;
    {class} function ToUpperInvariant(c: Char): Char;
    {class} function ToLower(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToLower(c: Char): Char; overload;
    {class} function ToLowerInvariant(c: Char): Char;
    {class} function IsControl(c: Char): Boolean; overload;

  end;

  [DNTypeName('System.Char')]
  DNChar = interface(DNValueType)
  ['{877A2608-6488-3762-B1B7-D33EA1F63757}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Char): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Char): Int32; overload;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNChar = class(TDNGenericImport<DNCharClass, DNChar>)
  public const
   MaxValue = #65535;
   MinValue = #0;
  end;

  //-------------namespace: System.Collections----------------
  DNDictionaryEntryClass = interface(DNValueTypeClass)
  ['{7E0FDEE0-8715-5052-B0E9-370E22AB8CBE}']
  { constructors } 

    {class} function init(key: DNObject; value: DNObject): DNDictionaryEntry;

  end;

  [DNTypeName('System.Collections.DictionaryEntry')]
  DNDictionaryEntry = interface(DNValueType)
  ['{8F858A50-5DAC-385A-830D-5CD04AD1FB98}']
  { getters & setters } 

    function get_Key: DNObject;
    procedure set_Key(value: DNObject);
    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { methods } 

    procedure Deconstruct(out key: DNObject; out value: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Key: DNObject read get_Key write set_Key;
    property Value: DNObject read get_Value write set_Value;
  end;

  TDNDictionaryEntry = class(TDNGenericImport<DNDictionaryEntryClass, DNDictionaryEntry>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{4F8A14F7-FE16-52E4-B199-9C946406EBD2}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+Enumerator')]
  DNDictionary_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{358944DE-CF42-3AC8-8F2E-B0FC77F35821}']
  { getters & setters } 

    function get_Current: DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_EnumeratorClass<TKey, TValue>, DNDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{1A46C64A-3C89-55BD-8004-A07007C06B85}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator')]
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{C1DBAEE3-2880-3AB8-99AF-535444F6AAE7}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{BB9171F8-B57C-5675-B7B4-42093B315217}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator')]
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{3BB2B51A-B5AB-3C6E-ACD3-4AC7DA3A886E}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSet_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{77D996CD-216B-5641-90E3-A1ADC7A1108C}']
  end;

  [DNTypeName('System.Collections.Generic.HashSet`1+Enumerator')]
  DNHashSet_Enumerator<T> = interface(DNValueType)
  ['{599BFBDA-5B84-3A74-9095-F52BE174483F}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNHashSet_Enumerator<T> = class(TDNGenericImport<DNHashSet_EnumeratorClass<T>, DNHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyValuePairClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{18A3558A-D0F0-5252-9DC1-05C89997ACC0}']
  { constructors } 

    {class} function init(key: TKey; value: TValue): DNKeyValuePair<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.KeyValuePair`2')]
  DNKeyValuePair<TKey, TValue> = interface(DNValueType)
  ['{7A75684F-8619-3A09-B275-6A54405B936D}']
  { getters & setters } 

    function get_Key: TKey;
    function get_Value: TValue;

  { methods } 

    function ToString: string;
    procedure Deconstruct(out key: TKey; out value: TValue);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Key: TKey read get_Key;
    property Value: TValue read get_Value;
  end;

  TDNKeyValuePair<TKey, TValue> = class(TDNGenericImport<DNKeyValuePairClass<TKey, TValue>, DNKeyValuePair<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNList_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{1E22609D-DC33-5EB9-B64B-6F7087935701}']
  end;

  [DNTypeName('System.Collections.Generic.List`1+Enumerator')]
  DNList_Enumerator<T> = interface(DNValueType)
  ['{5F946777-BAA4-3503-80F0-DD15AB9F60E2}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNList_Enumerator<T> = class(TDNGenericImport<DNList_EnumeratorClass<T>, DNList_Enumerator<T>>) end;

  //-------------namespace: System----------------
  DNDateTimeClass = interface(DNValueTypeClass)
  ['{8A481CAB-35E0-5B3E-A923-AB67C0C7ABE6}']
  { static getter & setter } 

    {class} function get_Now: DNDateTime;
    {class} function get_Today: DNDateTime;
    {class} function get_UtcNow: DNDateTime;

  { constructors } 

    {class} function init(ticks: Int64): DNDateTime; overload;
    {class} function init(ticks: Int64; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; kind: DNDateTimeKind): DNDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTime;
   function __fakeFieldGet_MaxValue: DNDateTime;
   function __fakeFieldGet_UnixEpoch: DNDateTime;

  { static fields } 

    {class} property MinValue: DNDateTime read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTime read __fakeFieldGet_MaxValue;
    {class} property UnixEpoch: DNDateTime read __fakeFieldGet_UnixEpoch;

  { static methods } 

    {class} function ParseExact(s: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: DNReadOnlySpan<Char>; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function TryParse(s: string; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: DNReadOnlySpan<Char>; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function Compare(t1: DNDateTime; t2: DNDateTime): Int32;
    {class} function DaysInMonth(year: Int32; month: Int32): Int32;
    {class} function Equals(t1: DNDateTime; t2: DNDateTime): Boolean; overload;
    {class} function FromBinary(dateData: Int64): DNDateTime;
    {class} function FromFileTime(fileTime: Int64): DNDateTime;
    {class} function FromFileTimeUtc(fileTime: Int64): DNDateTime;
    {class} function FromOADate(d: Double): DNDateTime;
    {class} function SpecifyKind(value: DNDateTime; kind: DNDateTimeKind): DNDateTime;
    {class} function IsLeapYear(year: Int32): Boolean;
    {class} function Parse(s: string): DNDateTime; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;

  { static propertys } 

    {class} property Now: DNDateTime read get_Now;
    {class} property Today: DNDateTime read get_Today;
    {class} property UtcNow: DNDateTime read get_UtcNow;
  end;

  [DNTypeName('System.DateTime')]
  DNDateTime = interface(DNValueType)
  ['{D4951D0B-FB66-3F28-BBC6-C2EAAC4558AC}']
  { getters & setters } 

    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Kind: DNDateTimeKind;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function Subtract(value: DNDateTime): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTime; overload;
    function ToOADate: Double;
    function ToFileTime: Int64;
    function ToFileTimeUtc: Int64;
    function ToLocalTime: DNDateTime;
    function ToLongDateString: string;
    function ToLongTimeString: string;
    function ToShortDateString: string;
    function ToShortTimeString: string;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function ToUniversalTime: DNDateTime;
    function GetDateTimeFormats: TArray<string>; overload;
    function GetDateTimeFormats(provider: DNIFormatProvider): TArray<string>; overload;
    function GetDateTimeFormats(format: Char): TArray<string>; overload;
    function GetDateTimeFormats(format: Char; provider: DNIFormatProvider): TArray<string>; overload;
    function GetTypeCode: DNTypeCode;
    function Add(value: DNTimeSpan): DNDateTime;
    function AddDays(value: Double): DNDateTime;
    function AddHours(value: Double): DNDateTime;
    function AddMilliseconds(value: Double): DNDateTime;
    function AddMinutes(value: Double): DNDateTime;
    function AddMonths(months: Int32): DNDateTime;
    function AddSeconds(value: Double): DNDateTime;
    function AddTicks(value: Int64): DNDateTime;
    function AddYears(value: Int32): DNDateTime;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDateTime): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime: Boolean;
    function ToBinary: Int64;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Kind: DNDateTimeKind read get_Kind;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTime = class(TDNGenericImport<DNDateTimeClass, DNDateTime>) end;

  //-------------namespace: System----------------
  DNDateTimeOffsetClass = interface(DNValueTypeClass)
  ['{3493892E-E716-57FF-9943-07831DFADD67}']
  { static getter & setter } 

    {class} function get_Now: DNDateTimeOffset;
    {class} function get_UtcNow: DNDateTimeOffset;

  { constructors } 

    {class} function init(ticks: Int64; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; offset: DNTimeSpan): DNDateTimeOffset; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTimeOffset;
   function __fakeFieldGet_MaxValue: DNDateTimeOffset;
   function __fakeFieldGet_UnixEpoch: DNDateTimeOffset;

  { static fields } 

    {class} property MinValue: DNDateTimeOffset read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTimeOffset read __fakeFieldGet_MaxValue;
    {class} property UnixEpoch: DNDateTimeOffset read __fakeFieldGet_UnixEpoch;

  { static methods } 

    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function Compare(first: DNDateTimeOffset; second: DNDateTimeOffset): Int32;
    {class} function Equals(first: DNDateTimeOffset; second: DNDateTimeOffset): Boolean; overload;
    {class} function FromFileTime(fileTime: Int64): DNDateTimeOffset;
    {class} function FromUnixTimeSeconds(seconds: Int64): DNDateTimeOffset;
    {class} function FromUnixTimeMilliseconds(milliseconds: Int64): DNDateTimeOffset;
    {class} function Parse(input: string): DNDateTimeOffset; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; out result: DNDateTimeOffset): Boolean; overload;

  { static propertys } 

    {class} property Now: DNDateTimeOffset read get_Now;
    {class} property UtcNow: DNDateTimeOffset read get_UtcNow;
  end;

  [DNTypeName('System.DateTimeOffset')]
  DNDateTimeOffset = interface(DNValueType)
  ['{F6093B84-96AD-349B-96AD-4B2226BD5E70}']
  { getters & setters } 

    function get_DateTime: DNDateTime;
    function get_UtcDateTime: DNDateTime;
    function get_LocalDateTime: DNDateTime;
    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Offset: DNTimeSpan;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_UtcTicks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function ToOffset(offset: DNTimeSpan): DNDateTimeOffset;
    function Add(timeSpan: DNTimeSpan): DNDateTimeOffset;
    function AddDays(days: Double): DNDateTimeOffset;
    function AddHours(hours: Double): DNDateTimeOffset;
    function AddMilliseconds(milliseconds: Double): DNDateTimeOffset;
    function AddMinutes(minutes: Double): DNDateTimeOffset;
    function AddMonths(months: Int32): DNDateTimeOffset;
    function AddSeconds(seconds: Double): DNDateTimeOffset;
    function AddTicks(ticks: Int64): DNDateTimeOffset;
    function AddYears(years: Int32): DNDateTimeOffset;
    function CompareTo(other: DNDateTimeOffset): Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNDateTimeOffset): Boolean; overload;
    function EqualsExact(other: DNDateTimeOffset): Boolean;
    function GetHashCode: Int32;
    function Subtract(value: DNDateTimeOffset): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTimeOffset; overload;
    function ToFileTime: Int64;
    function ToUnixTimeSeconds: Int64;
    function ToUnixTimeMilliseconds: Int64;
    function ToLocalTime: DNDateTimeOffset;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): Boolean;
    function ToUniversalTime: DNDateTimeOffset;
    function GetType: DNType;

  { propertys } 

    property DateTime: DNDateTime read get_DateTime;
    property UtcDateTime: DNDateTime read get_UtcDateTime;
    property LocalDateTime: DNDateTime read get_LocalDateTime;
    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Offset: DNTimeSpan read get_Offset;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property UtcTicks: Int64 read get_UtcTicks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTimeOffset = class(TDNGenericImport<DNDateTimeOffsetClass, DNDateTimeOffset>) end;

  //-------------namespace: System----------------
  DNDecimalClass = interface(DNValueTypeClass)
  ['{DC738EB5-1B9A-5B62-AF2B-01C1A9788FDC}']
  { constructors } 

    {class} function init(value: Int32): DNDecimal; overload;
    {class} function init(value: UInt32): DNDecimal; overload;
    {class} function init(value: Int64): DNDecimal; overload;
    {class} function init(value: UInt64): DNDecimal; overload;
    {class} function init(value: Single): DNDecimal; overload;
    {class} function init(value: Double): DNDecimal; overload;
    {class} function init(bits: TArray<Int32>): DNDecimal; overload;
    {class} function init(bits: DNReadOnlySpan<Int32>): DNDecimal; overload;
    {class} function init(lo: Int32; mid: Int32; hi: Int32; isNegative: Boolean; scale: Byte): DNDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNDecimal;
   function __fakeFieldGet_One: DNDecimal;
   function __fakeFieldGet_MinusOne: DNDecimal;
   function __fakeFieldGet_MaxValue: DNDecimal;
   function __fakeFieldGet_MinValue: DNDecimal;

  { static fields } 

    {class} property Zero: DNDecimal read __fakeFieldGet_Zero;
    {class} property One: DNDecimal read __fakeFieldGet_One;
    {class} property MinusOne: DNDecimal read __fakeFieldGet_MinusOne;
    {class} property MaxValue: DNDecimal read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNDecimal read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function FromOACurrency(cy: Int64): DNDecimal;
    {class} function ToOACurrency(value: DNDecimal): Int64;
    {class} function Add(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Ceiling(d: DNDecimal): DNDecimal;
    {class} function Compare(d1: DNDecimal; d2: DNDecimal): Int32;
    {class} function Divide(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Equals(d1: DNDecimal; d2: DNDecimal): Boolean; overload;
    {class} function Floor(d: DNDecimal): DNDecimal;
    {class} function Parse(s: string): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles): DNDecimal; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function TryParse(s: string; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    {class} function GetBits(d: DNDecimal): TArray<Int32>; overload;
    {class} function GetBits(d: DNDecimal; destination: DNSpan<Int32>): Int32; overload;
    {class} function TryGetBits(d: DNDecimal; destination: DNSpan<Int32>; out valuesWritten: Int32): Boolean;
    {class} function Remainder(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Multiply(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Negate(d: DNDecimal): DNDecimal;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Subtract(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function ToByte(value: DNDecimal): Byte;
    {class} function ToSByte(value: DNDecimal): SByte;
    {class} function ToInt16(value: DNDecimal): Int16;
    {class} function ToDouble(d: DNDecimal): Double;
    {class} function ToInt32(d: DNDecimal): Int32;
    {class} function ToInt64(d: DNDecimal): Int64;
    {class} function ToUInt16(value: DNDecimal): UInt16;
    {class} function ToUInt32(d: DNDecimal): UInt32;
    {class} function ToUInt64(d: DNDecimal): UInt64;
    {class} function ToSingle(d: DNDecimal): Single;
    {class} function Truncate(d: DNDecimal): DNDecimal;

  end;

  [DNTypeName('System.Decimal')]
  DNDecimal = interface(DNValueType)
  ['{97223985-F20C-34D3-AAAC-4807E934E74A}']
  { methods } 

    function GetTypeCode: DNTypeCode;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDecimal): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDecimal): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetType: DNType;

  end;

  TDNDecimal = class(TDNGenericImport<DNDecimalClass, DNDecimal>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceOptionsClass = interface(DNValueTypeClass)
  ['{92F2B212-5F38-57A4-9EE9-48C3B78F7213}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceOptions')]
  DNEventSourceOptions = interface(DNValueType)
  ['{9C59E0E6-3F66-32F2-9A61-D461CC1CE27E}']
  { getters & setters } 

    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Level: DNEventLevel read get_Level write set_Level;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
  end;

  TDNEventSourceOptions = class(TDNGenericImport<DNEventSourceOptionsClass, DNEventSourceOptions>) end;

  //-------------namespace: System----------------
  DNDoubleClass = interface(DNValueTypeClass)
  ['{3AA63669-703C-5858-971A-0A7D455A8FA7}']
  { static methods } 

    {class} function IsFinite(d: Double): Boolean;
    {class} function IsInfinity(d: Double): Boolean;
    {class} function IsNaN(d: Double): Boolean;
    {class} function IsNegative(d: Double): Boolean;
    {class} function IsNegativeInfinity(d: Double): Boolean;
    {class} function IsNormal(d: Double): Boolean;
    {class} function IsPositiveInfinity(d: Double): Boolean;
    {class} function IsSubnormal(d: Double): Boolean;
    {class} function Parse(s: string): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Double; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Double; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Double; overload;
    {class} function TryParse(s: string; out result: Double): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Double): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Double): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Double): Boolean; overload;

  end;

  [DNTypeName('System.Double')]
  DNDouble = interface(DNValueType)
  ['{2D155516-A21E-3F1B-AD3C-91906FB2328B}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Double): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Double): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNDouble = class(TDNGenericImport<DNDoubleClass, DNDouble>)
  public const
   MinValue = -1.7976931348623157E+308;
   MaxValue = 1.7976931348623157E+308;
   Epsilon = 5E-324;
  end;

  //-------------namespace: System----------------
  DNEnumClass = interface(DNValueTypeClass)
  ['{7DD2444D-9B29-56B4-BE1E-E92B3AB8C23B}']
  { static methods } 

    {class} function ToObject(enumType: DNType; value: Byte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt32): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int64): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt64): DNObject; overload;
    {class} function GetName(enumType: DNType; value: DNObject): string; overload;
    {class} function GetNames(enumType: DNType): TArray<string>; overload;
    {class} function GetUnderlyingType(enumType: DNType): DNType;
    {class} function GetValues(enumType: DNType): DNArray; overload;
    {class} function IsDefined(enumType: DNType; value: DNObject): Boolean; overload;
    {class} function Parse(enumType: DNType; value: string): DNObject; overload;
    {class} function Parse(enumType: DNType; value: string; ignoreCase: Boolean): DNObject; overload;
    {class} function TryParse(enumType: DNType; value: string; out result: DNObject): Boolean; overload;
    {class} function TryParse(enumType: DNType; value: string; ignoreCase: Boolean; out result: DNObject): Boolean; overload;
    {class} function ToObject(enumType: DNType; value: DNObject): DNObject; overload;
    {class} function Format(enumType: DNType; value: DNObject; format: string): string;
    {class} function ToObject(enumType: DNType; value: SByte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int32): DNObject; overload;

  end;

  [DNTypeName('System.Enum')]
  DNEnum = interface(DNValueType)
  ['{B21E9EB8-6B71-3307-98F0-B96B3DE18044}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function HasFlag(flag: DNEnum): Boolean;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function CompareTo(target: DNObject): Int32;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNEnum = class(TDNGenericImport<DNEnumClass, DNEnum>) end;

  //-------------namespace: System----------------
  DNGCGenerationInfoClass = interface(DNValueTypeClass)
  ['{9FD4AD59-A5BB-57DC-87D9-391CC493B3CF}']
  end;

  [DNTypeName('System.GCGenerationInfo')]
  DNGCGenerationInfo = interface(DNValueType)
  ['{8679FFB7-9F52-31C2-8C39-DA4F6FC1B5B5}']
  { getters & setters } 

    function get_SizeBeforeBytes: Int64;
    function get_FragmentationBeforeBytes: Int64;
    function get_SizeAfterBytes: Int64;
    function get_FragmentationAfterBytes: Int64;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property SizeBeforeBytes: Int64 read get_SizeBeforeBytes;
    property FragmentationBeforeBytes: Int64 read get_FragmentationBeforeBytes;
    property SizeAfterBytes: Int64 read get_SizeAfterBytes;
    property FragmentationAfterBytes: Int64 read get_FragmentationAfterBytes;
  end;

  TDNGCGenerationInfo = class(TDNGenericImport<DNGCGenerationInfoClass, DNGCGenerationInfo>) end;

  //-------------namespace: System----------------
  DNGCMemoryInfoClass = interface(DNValueTypeClass)
  ['{6E204835-10B8-5038-990A-804999AED8D8}']
  end;

  [DNTypeName('System.GCMemoryInfo')]
  DNGCMemoryInfo = interface(DNValueType)
  ['{43517449-6775-3BA0-8CE3-E2500AD2AA01}']
  { getters & setters } 

    function get_HighMemoryLoadThresholdBytes: Int64;
    function get_MemoryLoadBytes: Int64;
    function get_TotalAvailableMemoryBytes: Int64;
    function get_HeapSizeBytes: Int64;
    function get_FragmentedBytes: Int64;
    function get_Index: Int64;
    function get_Generation: Int32;
    function get_Compacted: Boolean;
    function get_Concurrent: Boolean;
    function get_TotalCommittedBytes: Int64;
    function get_PromotedBytes: Int64;
    function get_PinnedObjectsCount: Int64;
    function get_FinalizationPendingCount: Int64;
    function get_PauseDurations: DNReadOnlySpan<DNTimeSpan>;
    function get_PauseTimePercentage: Double;
    function get_GenerationInfo: DNReadOnlySpan<DNGCGenerationInfo>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property HighMemoryLoadThresholdBytes: Int64 read get_HighMemoryLoadThresholdBytes;
    property MemoryLoadBytes: Int64 read get_MemoryLoadBytes;
    property TotalAvailableMemoryBytes: Int64 read get_TotalAvailableMemoryBytes;
    property HeapSizeBytes: Int64 read get_HeapSizeBytes;
    property FragmentedBytes: Int64 read get_FragmentedBytes;
    property Index: Int64 read get_Index;
    property Generation: Int32 read get_Generation;
    property Compacted: Boolean read get_Compacted;
    property Concurrent: Boolean read get_Concurrent;
    property TotalCommittedBytes: Int64 read get_TotalCommittedBytes;
    property PromotedBytes: Int64 read get_PromotedBytes;
    property PinnedObjectsCount: Int64 read get_PinnedObjectsCount;
    property FinalizationPendingCount: Int64 read get_FinalizationPendingCount;
    property PauseDurations: DNReadOnlySpan<DNTimeSpan> read get_PauseDurations;
    property PauseTimePercentage: Double read get_PauseTimePercentage;
    property GenerationInfo: DNReadOnlySpan<DNGCGenerationInfo> read get_GenerationInfo;
  end;

  TDNGCMemoryInfo = class(TDNGenericImport<DNGCMemoryInfoClass, DNGCMemoryInfo>) end;

  //-------------namespace: System----------------
  DNGuidClass = interface(DNValueTypeClass)
  ['{981F767C-DFF6-5FA0-AF22-E8D4330AB4FE}']
  { constructors } 

    {class} function init(b: TArray<Byte>): DNGuid; overload;
    {class} function init(b: DNReadOnlySpan<Byte>): DNGuid; overload;
    {class} function init(a: UInt32; b: UInt16; c: UInt16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: TArray<Byte>): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(g: string): DNGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNGuid;

  { static fields } 

    {class} property Empty: DNGuid read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Parse(input: string): DNGuid; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>): DNGuid; overload;
    {class} function TryParse(input: string; out result: DNGuid): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNGuid): Boolean; overload;
    {class} function ParseExact(input: string; format: string): DNGuid; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>): DNGuid; overload;
    {class} function TryParseExact(input: string; format: string; out result: DNGuid): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; out result: DNGuid): Boolean; overload;
    {class} function NewGuid: DNGuid;

  end;

  [DNTypeName('System.Guid')]
  DNGuid = interface(DNValueType)
  ['{915DACCB-C88F-3F56-84CE-B97473CF9796}']
  { methods } 

    function ToByteArray: TArray<Byte>;
    function TryWriteBytes(destination: DNSpan<Byte>): Boolean;
    function ToString: string; overload;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(g: DNGuid): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNGuid): Int32; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>): Boolean;
    function GetType: DNType;

  end;

  TDNGuid = class(TDNGenericImport<DNGuidClass, DNGuid>) end;

  //-------------namespace: System----------------
  DNHalfClass = interface(DNValueTypeClass)
  ['{D51FF807-2FF8-59EF-AB2E-F6740352F81C}']
  { static getter & setter } 

    {class} function get_Epsilon: DNHalf;
    {class} function get_PositiveInfinity: DNHalf;
    {class} function get_NegativeInfinity: DNHalf;
    {class} function get_NaN: DNHalf;
    {class} function get_MinValue: DNHalf;
    {class} function get_MaxValue: DNHalf;

  { static methods } 

    {class} function IsFinite(value: DNHalf): Boolean;
    {class} function IsInfinity(value: DNHalf): Boolean;
    {class} function IsNaN(value: DNHalf): Boolean;
    {class} function IsNegative(value: DNHalf): Boolean;
    {class} function IsNegativeInfinity(value: DNHalf): Boolean;
    {class} function IsNormal(value: DNHalf): Boolean;
    {class} function IsPositiveInfinity(value: DNHalf): Boolean;
    {class} function IsSubnormal(value: DNHalf): Boolean;
    {class} function Parse(s: string): DNHalf; overload;
    {class} function Parse(s: string; style: DNNumberStyles): DNHalf; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNHalf; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): DNHalf; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): DNHalf; overload;
    {class} function TryParse(s: string; out result: DNHalf): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNHalf): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNHalf): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNHalf): Boolean; overload;

  { static propertys } 

    {class} property Epsilon: DNHalf read get_Epsilon;
    {class} property PositiveInfinity: DNHalf read get_PositiveInfinity;
    {class} property NegativeInfinity: DNHalf read get_NegativeInfinity;
    {class} property NaN: DNHalf read get_NaN;
    {class} property MinValue: DNHalf read get_MinValue;
    {class} property MaxValue: DNHalf read get_MaxValue;
  end;

  [DNTypeName('System.Half')]
  DNHalf = interface(DNValueType)
  ['{1225A972-87F7-3569-A957-BF893E2477D7}']
  { methods } 

    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(other: DNHalf): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNHalf): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetType: DNType;

  end;

  TDNHalf = class(TDNGenericImport<DNHalfClass, DNHalf>) end;

  //-------------namespace: System----------------
  DNHashCodeClass = interface(DNValueTypeClass)
  ['{1D07DCCC-CD08-58B1-84E7-46F91AFD2746}']
  end;

  [DNTypeName('System.HashCode')]
  DNHashCode = interface(DNValueType)
  ['{617B1F7C-58E0-3D38-9192-E7D19A194C18}']
  { methods } 

    function ToHashCode: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNHashCode = class(TDNGenericImport<DNHashCodeClass, DNHashCode>) end;

  //-------------namespace: System----------------
  DNIndexClass = interface(DNValueTypeClass)
  ['{AC306D1C-72D2-5A76-9518-F3D69599319A}']
  { static getter & setter } 

    {class} function get_Start: DNIndex;
    {class} function get_End: DNIndex;

  { constructors } 

    {class} function init(value: Int32; fromEnd: Boolean): DNIndex;

  { static methods } 

    {class} function FromStart(value: Int32): DNIndex;
    {class} function FromEnd(value: Int32): DNIndex;

  { static propertys } 

    {class} property Start: DNIndex read get_Start;
    {class} property &End: DNIndex read get_End;
  end;

  [DNTypeName('System.Index')]
  DNIndex = interface(DNValueType)
  ['{27EA7048-C89F-38A9-9E4A-6C9024245781}']
  { getters & setters } 

    function get_Value: Int32;
    function get_IsFromEnd: Boolean;

  { methods } 

    function GetOffset(length: Int32): Int32;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(other: DNIndex): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Int32 read get_Value;
    property IsFromEnd: Boolean read get_IsFromEnd;
  end;

  TDNIndex = class(TDNGenericImport<DNIndexClass, DNIndex>) end;

  //-------------namespace: System----------------
  DNInt16Class = interface(DNValueTypeClass)
  ['{96750940-BF7B-5B50-B0D5-2FE406EEFD4D}']
  { static methods } 

    {class} function Parse(s: string): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int16; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int16; overload;
    {class} function TryParse(s: string; out result: Int16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int16): Boolean; overload;

  end;

  [DNTypeName('System.Int16')]
  DNInt16 = interface(DNValueType)
  ['{CA333CE6-A8C5-378A-9D1F-597F6A733135}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt16 = class(TDNGenericImport<DNInt16Class, DNInt16>)
  public const
   MaxValue = 32767;
   MinValue = -32768;
  end;

  //-------------namespace: System----------------
  DNInt32Class = interface(DNValueTypeClass)
  ['{012396C1-69AE-5211-A280-268C55AFD38A}']
  { static methods } 

    {class} function Parse(s: string): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int32; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int32; overload;
    {class} function TryParse(s: string; out result: Int32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Int32')]
  DNInt32 = interface(DNValueType)
  ['{0C664530-476A-30C6-8363-89E98826114A}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt32 = class(TDNGenericImport<DNInt32Class, DNInt32>)
  public const
   MaxValue = 2147483647;
   MinValue = -2147483648;
  end;

  //-------------namespace: System----------------
  DNInt64Class = interface(DNValueTypeClass)
  ['{06A3FE22-547C-5159-A9B8-187262F54640}']
  { static methods } 

    {class} function Parse(s: string): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int64; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int64; overload;
    {class} function TryParse(s: string; out result: Int64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int64): Boolean; overload;

  end;

  [DNTypeName('System.Int64')]
  DNInt64 = interface(DNValueType)
  ['{C990E487-2C55-33AC-9A09-4225C402357E}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt64 = class(TDNGenericImport<DNInt64Class, DNInt64>)
  public const
   MaxValue = 9223372036854775807;
   MinValue = -9223372036854775808;
  end;

  //-------------namespace: System----------------
  DNIntPtrClass = interface(DNValueTypeClass)
  ['{1DF1BBAA-1964-598D-BF57-B439ED61D961}']
  { static getter & setter } 

    {class} function get_Size: Int32;
    {class} function get_MaxValue: IntPtr;
    {class} function get_MinValue: IntPtr;

  { constructors } 

    {class} function init(value: Int32): DNIntPtr; overload;
    {class} function init(value: Int64): DNIntPtr; overload;
    {class} function init(var value: DNVoid): DNIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: IntPtr;

  { static fields } 

    {class} property Zero: IntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: IntPtr; offset: Int32): IntPtr;
    {class} function Subtract(pointer: IntPtr; offset: Int32): IntPtr;
    {class} function Parse(s: string): IntPtr; overload;
    {class} function Parse(s: string; style: DNNumberStyles): IntPtr; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): IntPtr; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): IntPtr; overload;
    {class} function TryParse(s: string; out result: IntPtr): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: IntPtr): Boolean; overload;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
    {class} property MaxValue: IntPtr read get_MaxValue;
    {class} property MinValue: IntPtr read get_MinValue;
  end;

  [DNTypeName('System.IntPtr')]
  DNIntPtr = interface(DNValueType)
  ['{2E6F7283-84D3-3C77-B199-AD8C0E27F58E}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToInt32: Int32;
    function ToInt64: Int64;
    function ToPointer: DNVoid;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: IntPtr): Int32; overload;
    function Equals(other: IntPtr): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  end;

  TDNIntPtr = class(TDNGenericImport<DNIntPtrClass, DNIntPtr>) end;

  //-------------namespace: System----------------
  DNMemoryClass<T> = interface(DNValueTypeClass)
  ['{12AA16E2-1EB5-5408-9126-E5781E043737}']
  { static getter & setter } 

    {class} function get_Empty: DNMemory<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNMemory<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNMemory<T>; overload;

  { static propertys } 

    {class} property Empty: DNMemory<T> read get_Empty;
  end;

  [DNTypeName('System.Memory`1')]
  DNMemory<T> = interface(DNValueType)
  ['{B4A3DA80-A5D9-3E9A-A7AF-1D1013347BEC}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Span: DNSpan<T>;

  { methods } 

    function ToString: string;
    function Slice(start: Int32): DNMemory<T>; overload;
    function Slice(start: Int32; length: Int32): DNMemory<T>; overload;
    procedure CopyTo(destination: DNMemory<T>);
    function TryCopyTo(destination: DNMemory<T>): Boolean;
    function Pin: DNMemoryHandle;
    function ToArray: TArray<T>;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNMemory<T>): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Span: DNSpan<T> read get_Span;
  end;

  TDNMemory<T> = class(TDNGenericImport<DNMemoryClass<T>, DNMemory<T>>) end;

  //-------------namespace: System----------------
  DNModuleHandleClass = interface(DNValueTypeClass)
  ['{BABF6E53-7353-5100-9CA7-B94A25EEE835}']
  { static fields getter & setter } 

   function __fakeFieldGet_EmptyHandle: DNModuleHandle;

  { static fields } 

    {class} property EmptyHandle: DNModuleHandle read __fakeFieldGet_EmptyHandle;

  end;

  [DNTypeName('System.ModuleHandle')]
  DNModuleHandle = interface(DNValueType)
  ['{9332DCBA-C1D6-35BA-B3A8-536CCDA2EA5D}']
  { getters & setters } 

    function get_MDStreamVersion: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNModuleHandle): Boolean; overload;
    function GetRuntimeTypeHandleFromMetadataToken(typeToken: Int32): DNRuntimeTypeHandle;
    function ResolveTypeHandle(typeToken: Int32): DNRuntimeTypeHandle; overload;
    function ResolveTypeHandle(typeToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeTypeHandle; overload;
    function GetRuntimeMethodHandleFromMetadataToken(methodToken: Int32): DNRuntimeMethodHandle;
    function ResolveMethodHandle(methodToken: Int32): DNRuntimeMethodHandle; overload;
    function ResolveMethodHandle(methodToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeMethodHandle; overload;
    function GetRuntimeFieldHandleFromMetadataToken(fieldToken: Int32): DNRuntimeFieldHandle;
    function ResolveFieldHandle(fieldToken: Int32): DNRuntimeFieldHandle; overload;
    function ResolveFieldHandle(fieldToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeFieldHandle; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MDStreamVersion: Int32 read get_MDStreamVersion;
  end;

  TDNModuleHandle = class(TDNGenericImport<DNModuleHandleClass, DNModuleHandle>) end;

  //-------------namespace: System----------------
  DNNullableClass<T> = interface(DNValueTypeClass)
  ['{253182AE-3420-52FF-9B3B-90D579036541}']
  { constructors } 

    {class} function init(value: T): DNNullable<T>;

  end;

  [DNTypeName('System.Nullable`1')]
  DNNullable<T> = interface(DNValueType)
  ['{9A6047C0-E363-3B1D-91EC-90A149BFE43E}']
  { getters & setters } 

    function get_HasValue: Boolean;
    function get_Value: T;

  { methods } 

    function GetValueOrDefault: T; overload;
    function GetValueOrDefault(defaultValue: T): T; overload;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property HasValue: Boolean read get_HasValue;
    property Value: T read get_Value;
  end;

  TDNNullable<T> = class(TDNGenericImport<DNNullableClass<T>, DNNullable<T>>) end;

  //-------------namespace: System.Numerics----------------
  DNMatrix3x2Class = interface(DNValueTypeClass)
  ['{AA8CE0D7-CF2B-5F9E-8B73-001363316581}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix3x2;

  { constructors } 

    {class} function init(m11: Single; m12: Single; m21: Single; m22: Single; m31: Single; m32: Single): DNMatrix3x2;

  { static methods } 

    {class} function CreateTranslation(position: DNVector2): DNMatrix3x2; overload;
    {class} function CreateTranslation(xPosition: Single; yPosition: Single): DNMatrix3x2; overload;
    {class} function CreateScale(xScale: Single; yScale: Single): DNMatrix3x2; overload;
    {class} function CreateScale(xScale: Single; yScale: Single; centerPoint: DNVector2): DNMatrix3x2; overload;
    {class} function CreateScale(scales: DNVector2): DNMatrix3x2; overload;
    {class} function CreateScale(scales: DNVector2; centerPoint: DNVector2): DNMatrix3x2; overload;
    {class} function CreateScale(scale: Single): DNMatrix3x2; overload;
    {class} function CreateScale(scale: Single; centerPoint: DNVector2): DNMatrix3x2; overload;
    {class} function CreateSkew(radiansX: Single; radiansY: Single): DNMatrix3x2; overload;
    {class} function CreateSkew(radiansX: Single; radiansY: Single; centerPoint: DNVector2): DNMatrix3x2; overload;
    {class} function CreateRotation(radians: Single): DNMatrix3x2; overload;
    {class} function CreateRotation(radians: Single; centerPoint: DNVector2): DNMatrix3x2; overload;
    {class} function Invert(matrix: DNMatrix3x2; out result: DNMatrix3x2): Boolean;
    {class} function Lerp(matrix1: DNMatrix3x2; matrix2: DNMatrix3x2; amount: Single): DNMatrix3x2;
    {class} function Negate(value: DNMatrix3x2): DNMatrix3x2;
    {class} function Add(value1: DNMatrix3x2; value2: DNMatrix3x2): DNMatrix3x2;
    {class} function Subtract(value1: DNMatrix3x2; value2: DNMatrix3x2): DNMatrix3x2;
    {class} function Multiply(value1: DNMatrix3x2; value2: DNMatrix3x2): DNMatrix3x2; overload;
    {class} function Multiply(value1: DNMatrix3x2; value2: Single): DNMatrix3x2; overload;

  { static propertys } 

    {class} property Identity: DNMatrix3x2 read get_Identity;
  end;

  [DNTypeName('System.Numerics.Matrix3x2')]
  DNMatrix3x2 = interface(DNValueType)
  ['{06F7A17C-5271-3126-BC17-45D5ED6B816D}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_Translation: DNVector2;
    procedure set_Translation(value: DNVector2);

  { methods } 

    function GetDeterminant: Single;
    function Equals(other: DNMatrix3x2): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property Translation: DNVector2 read get_Translation write set_Translation;
  end;

  TDNMatrix3x2 = class(TDNGenericImport<DNMatrix3x2Class, DNMatrix3x2>) end;

  //-------------namespace: System.Numerics----------------
  DNMatrix4x4Class = interface(DNValueTypeClass)
  ['{1FAB1DC2-2FFF-5DAE-961E-2FBF1A116174}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix4x4;

  { constructors } 

    {class} function init(m11: Single; m12: Single; m13: Single; m14: Single; m21: Single; m22: Single; m23: Single; m24: Single; m31: Single; m32: Single; m33: Single; m34: Single; m41: Single; m42: Single; m43: Single; m44: Single): DNMatrix4x4; overload;
    {class} function init(value: DNMatrix3x2): DNMatrix4x4; overload;

  { static methods } 

    {class} function CreateBillboard(objectPosition: DNVector3; cameraPosition: DNVector3; cameraUpVector: DNVector3; cameraForwardVector: DNVector3): DNMatrix4x4;
    {class} function CreateConstrainedBillboard(objectPosition: DNVector3; cameraPosition: DNVector3; rotateAxis: DNVector3; cameraForwardVector: DNVector3; objectForwardVector: DNVector3): DNMatrix4x4;
    {class} function CreateTranslation(position: DNVector3): DNMatrix4x4; overload;
    {class} function CreateTranslation(xPosition: Single; yPosition: Single; zPosition: Single): DNMatrix4x4; overload;
    {class} function CreateScale(xScale: Single; yScale: Single; zScale: Single): DNMatrix4x4; overload;
    {class} function CreateScale(xScale: Single; yScale: Single; zScale: Single; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateScale(scales: DNVector3): DNMatrix4x4; overload;
    {class} function CreateScale(scales: DNVector3; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateScale(scale: Single): DNMatrix4x4; overload;
    {class} function CreateScale(scale: Single; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateRotationX(radians: Single): DNMatrix4x4; overload;
    {class} function CreateRotationX(radians: Single; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateRotationY(radians: Single): DNMatrix4x4; overload;
    {class} function CreateRotationY(radians: Single; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateRotationZ(radians: Single): DNMatrix4x4; overload;
    {class} function CreateRotationZ(radians: Single; centerPoint: DNVector3): DNMatrix4x4; overload;
    {class} function CreateFromAxisAngle(axis: DNVector3; angle: Single): DNMatrix4x4;
    {class} function CreatePerspectiveFieldOfView(fieldOfView: Single; aspectRatio: Single; nearPlaneDistance: Single; farPlaneDistance: Single): DNMatrix4x4;
    {class} function CreatePerspective(width: Single; height: Single; nearPlaneDistance: Single; farPlaneDistance: Single): DNMatrix4x4;
    {class} function CreatePerspectiveOffCenter(left: Single; right: Single; bottom: Single; top: Single; nearPlaneDistance: Single; farPlaneDistance: Single): DNMatrix4x4;
    {class} function CreateOrthographic(width: Single; height: Single; zNearPlane: Single; zFarPlane: Single): DNMatrix4x4;
    {class} function CreateOrthographicOffCenter(left: Single; right: Single; bottom: Single; top: Single; zNearPlane: Single; zFarPlane: Single): DNMatrix4x4;
    {class} function CreateLookAt(cameraPosition: DNVector3; cameraTarget: DNVector3; cameraUpVector: DNVector3): DNMatrix4x4;
    {class} function CreateWorld(position: DNVector3; &forward: DNVector3; up: DNVector3): DNMatrix4x4;
    {class} function CreateFromQuaternion(quaternion: DNQuaternion): DNMatrix4x4;
    {class} function CreateFromYawPitchRoll(yaw: Single; pitch: Single; roll: Single): DNMatrix4x4;
    {class} function CreateShadow(lightDirection: DNVector3; plane: DNPlane): DNMatrix4x4;
    {class} function CreateReflection(value: DNPlane): DNMatrix4x4;
    {class} function Invert(matrix: DNMatrix4x4; out result: DNMatrix4x4): Boolean;
    {class} function Decompose(matrix: DNMatrix4x4; out scale: DNVector3; out rotation: DNQuaternion; out translation: DNVector3): Boolean;
    {class} function Transform(value: DNMatrix4x4; rotation: DNQuaternion): DNMatrix4x4;
    {class} function Transpose(matrix: DNMatrix4x4): DNMatrix4x4;
    {class} function Lerp(matrix1: DNMatrix4x4; matrix2: DNMatrix4x4; amount: Single): DNMatrix4x4;
    {class} function Negate(value: DNMatrix4x4): DNMatrix4x4;
    {class} function Add(value1: DNMatrix4x4; value2: DNMatrix4x4): DNMatrix4x4;
    {class} function Subtract(value1: DNMatrix4x4; value2: DNMatrix4x4): DNMatrix4x4;
    {class} function Multiply(value1: DNMatrix4x4; value2: DNMatrix4x4): DNMatrix4x4; overload;
    {class} function Multiply(value1: DNMatrix4x4; value2: Single): DNMatrix4x4; overload;

  { static propertys } 

    {class} property Identity: DNMatrix4x4 read get_Identity;
  end;

  [DNTypeName('System.Numerics.Matrix4x4')]
  DNMatrix4x4 = interface(DNValueType)
  ['{5932E1C3-28B8-3439-97E6-8DBB09CC282C}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_Translation: DNVector3;
    procedure set_Translation(value: DNVector3);

  { methods } 

    function GetDeterminant: Single;
    function Equals(other: DNMatrix4x4): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property Translation: DNVector3 read get_Translation write set_Translation;
  end;

  TDNMatrix4x4 = class(TDNGenericImport<DNMatrix4x4Class, DNMatrix4x4>) end;

  //-------------namespace: System.Numerics----------------
  DNPlaneClass = interface(DNValueTypeClass)
  ['{9706842D-D159-54D7-8DC1-B365A4581E27}']
  { constructors } 

    {class} function init(x: Single; y: Single; z: Single; d: Single): DNPlane; overload;
    {class} function init(normal: DNVector3; d: Single): DNPlane; overload;
    {class} function init(value: DNVector4): DNPlane; overload;

  { static methods } 

    {class} function CreateFromVertices(point1: DNVector3; point2: DNVector3; point3: DNVector3): DNPlane;
    {class} function Normalize(value: DNPlane): DNPlane;
    {class} function Transform(plane: DNPlane; matrix: DNMatrix4x4): DNPlane; overload;
    {class} function Transform(plane: DNPlane; rotation: DNQuaternion): DNPlane; overload;
    {class} function Dot(plane: DNPlane; value: DNVector4): Single;
    {class} function DotCoordinate(plane: DNPlane; value: DNVector3): Single;
    {class} function DotNormal(plane: DNPlane; value: DNVector3): Single;

  end;

  [DNTypeName('System.Numerics.Plane')]
  DNPlane = interface(DNValueType)
  ['{5AFBA6BE-752D-3179-9061-7A9E3A66E0AD}']
  { methods } 

    function Equals(other: DNPlane): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPlane = class(TDNGenericImport<DNPlaneClass, DNPlane>) end;

  //-------------namespace: System.Numerics----------------
  DNQuaternionClass = interface(DNValueTypeClass)
  ['{8A862D69-36AC-5CD1-8EB7-1E4775DB9EAD}']
  { static getter & setter } 

    {class} function get_Identity: DNQuaternion;

  { constructors } 

    {class} function init(x: Single; y: Single; z: Single; w: Single): DNQuaternion; overload;
    {class} function init(vectorPart: DNVector3; scalarPart: Single): DNQuaternion; overload;

  { static methods } 

    {class} function Normalize(value: DNQuaternion): DNQuaternion;
    {class} function Conjugate(value: DNQuaternion): DNQuaternion;
    {class} function Inverse(value: DNQuaternion): DNQuaternion;
    {class} function CreateFromAxisAngle(axis: DNVector3; angle: Single): DNQuaternion;
    {class} function CreateFromYawPitchRoll(yaw: Single; pitch: Single; roll: Single): DNQuaternion;
    {class} function CreateFromRotationMatrix(matrix: DNMatrix4x4): DNQuaternion;
    {class} function Dot(quaternion1: DNQuaternion; quaternion2: DNQuaternion): Single;
    {class} function Slerp(quaternion1: DNQuaternion; quaternion2: DNQuaternion; amount: Single): DNQuaternion;
    {class} function Lerp(quaternion1: DNQuaternion; quaternion2: DNQuaternion; amount: Single): DNQuaternion;
    {class} function Concatenate(value1: DNQuaternion; value2: DNQuaternion): DNQuaternion;
    {class} function Negate(value: DNQuaternion): DNQuaternion;
    {class} function Add(value1: DNQuaternion; value2: DNQuaternion): DNQuaternion;
    {class} function Subtract(value1: DNQuaternion; value2: DNQuaternion): DNQuaternion;
    {class} function Multiply(value1: DNQuaternion; value2: DNQuaternion): DNQuaternion; overload;
    {class} function Multiply(value1: DNQuaternion; value2: Single): DNQuaternion; overload;
    {class} function Divide(value1: DNQuaternion; value2: DNQuaternion): DNQuaternion;

  { static propertys } 

    {class} property Identity: DNQuaternion read get_Identity;
  end;

  [DNTypeName('System.Numerics.Quaternion')]
  DNQuaternion = interface(DNValueType)
  ['{F6E37394-32BC-3BDB-9F25-0BE6B765E7CB}']
  { getters & setters } 

    function get_IsIdentity: Boolean;

  { methods } 

    function Length: Single;
    function LengthSquared: Single;
    function Equals(other: DNQuaternion): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
  end;

  TDNQuaternion = class(TDNGenericImport<DNQuaternionClass, DNQuaternion>) end;

  //-------------namespace: System.Numerics----------------
  DNVectorClass<T> = interface(DNValueTypeClass)
  ['{964C7D89-7E42-5FB8-BA11-F387B4994AE7}']
  { static getter & setter } 

    {class} function get_Count: Int32;
    {class} function get_Zero: DNVector<T>;
    {class} function get_One: DNVector<T>;

  { constructors } 

    {class} function init(value: T): DNVector<T>; overload;
    {class} function init(values: TArray<T>): DNVector<T>; overload;
    {class} function init(values: TArray<T>; index: Int32): DNVector<T>; overload;
    {class} function init(values: DNReadOnlySpan<Byte>): DNVector<T>; overload;
    {class} function init(values: DNReadOnlySpan<T>): DNVector<T>; overload;
    {class} function init(values: DNSpan<T>): DNVector<T>; overload;

  { static propertys } 

    {class} property Count: Int32 read get_Count;
    {class} property Zero: DNVector<T> read get_Zero;
    {class} property One: DNVector<T> read get_One;
  end;

  [DNTypeName('System.Numerics.Vector`1')]
  DNVector<T> = interface(DNValueType)
  ['{0F87A068-67CD-307E-AC74-DF0CDFA24A51}']
  { getters & setters } 

    function get_Item(index: Int32): T;

  { methods } 

    procedure CopyTo(destination: DNSpan<Byte>); overload;
    procedure CopyTo(destination: DNSpan<T>); overload;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; startIndex: Int32); overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNVector<T>): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function TryCopyTo(destination: DNSpan<Byte>): Boolean; overload;
    function TryCopyTo(destination: DNSpan<T>): Boolean; overload;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  TDNVector<T> = class(TDNGenericImport<DNVectorClass<T>, DNVector<T>>) end;

  //-------------namespace: System.Numerics----------------
  DNVector2Class = interface(DNValueTypeClass)
  ['{6344F97E-86DC-5BDE-A20C-E210CD0FA978}']
  { static getter & setter } 

    {class} function get_Zero: DNVector2;
    {class} function get_One: DNVector2;
    {class} function get_UnitX: DNVector2;
    {class} function get_UnitY: DNVector2;

  { constructors } 

    {class} function init(value: Single): DNVector2; overload;
    {class} function init(x: Single; y: Single): DNVector2; overload;

  { static methods } 

    {class} function Distance(value1: DNVector2; value2: DNVector2): Single;
    {class} function DistanceSquared(value1: DNVector2; value2: DNVector2): Single;
    {class} function Normalize(value: DNVector2): DNVector2;
    {class} function Reflect(vector: DNVector2; normal: DNVector2): DNVector2;
    {class} function Clamp(value1: DNVector2; min: DNVector2; max: DNVector2): DNVector2;
    {class} function Lerp(value1: DNVector2; value2: DNVector2; amount: Single): DNVector2;
    {class} function Transform(position: DNVector2; matrix: DNMatrix3x2): DNVector2; overload;
    {class} function Transform(position: DNVector2; matrix: DNMatrix4x4): DNVector2; overload;
    {class} function TransformNormal(normal: DNVector2; matrix: DNMatrix3x2): DNVector2; overload;
    {class} function TransformNormal(normal: DNVector2; matrix: DNMatrix4x4): DNVector2; overload;
    {class} function Transform(value: DNVector2; rotation: DNQuaternion): DNVector2; overload;
    {class} function Add(left: DNVector2; right: DNVector2): DNVector2;
    {class} function Subtract(left: DNVector2; right: DNVector2): DNVector2;
    {class} function Multiply(left: DNVector2; right: DNVector2): DNVector2; overload;
    {class} function Multiply(left: DNVector2; right: Single): DNVector2; overload;
    {class} function Multiply(left: Single; right: DNVector2): DNVector2; overload;
    {class} function Divide(left: DNVector2; right: DNVector2): DNVector2; overload;
    {class} function Divide(left: DNVector2; divisor: Single): DNVector2; overload;
    {class} function Negate(value: DNVector2): DNVector2;
    {class} function Dot(value1: DNVector2; value2: DNVector2): Single;
    {class} function Min(value1: DNVector2; value2: DNVector2): DNVector2;
    {class} function Max(value1: DNVector2; value2: DNVector2): DNVector2;
    {class} function Abs(value: DNVector2): DNVector2;
    {class} function SquareRoot(value: DNVector2): DNVector2;

  { static propertys } 

    {class} property Zero: DNVector2 read get_Zero;
    {class} property One: DNVector2 read get_One;
    {class} property UnitX: DNVector2 read get_UnitX;
    {class} property UnitY: DNVector2 read get_UnitY;
  end;

  [DNTypeName('System.Numerics.Vector2')]
  DNVector2 = interface(DNValueType)
  ['{7CA3CEBC-3FDF-32F4-82DE-4F20F88E86C3}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function Length: Single;
    function LengthSquared: Single;
    procedure CopyTo(&array: TArray<Single>); overload;
    procedure CopyTo(&array: TArray<Single>; index: Int32); overload;
    function Equals(other: DNVector2): Boolean; overload;
    function GetType: DNType;

  end;

  TDNVector2 = class(TDNGenericImport<DNVector2Class, DNVector2>) end;

  //-------------namespace: System.Numerics----------------
  DNVector3Class = interface(DNValueTypeClass)
  ['{9BC271C3-AA67-53A4-857D-52F6488A4FC6}']
  { static getter & setter } 

    {class} function get_Zero: DNVector3;
    {class} function get_One: DNVector3;
    {class} function get_UnitX: DNVector3;
    {class} function get_UnitY: DNVector3;
    {class} function get_UnitZ: DNVector3;

  { constructors } 

    {class} function init(value: Single): DNVector3; overload;
    {class} function init(value: DNVector2; z: Single): DNVector3; overload;
    {class} function init(x: Single; y: Single; z: Single): DNVector3; overload;

  { static methods } 

    {class} function Distance(value1: DNVector3; value2: DNVector3): Single;
    {class} function DistanceSquared(value1: DNVector3; value2: DNVector3): Single;
    {class} function Normalize(value: DNVector3): DNVector3;
    {class} function Cross(vector1: DNVector3; vector2: DNVector3): DNVector3;
    {class} function Reflect(vector: DNVector3; normal: DNVector3): DNVector3;
    {class} function Clamp(value1: DNVector3; min: DNVector3; max: DNVector3): DNVector3;
    {class} function Lerp(value1: DNVector3; value2: DNVector3; amount: Single): DNVector3;
    {class} function Transform(position: DNVector3; matrix: DNMatrix4x4): DNVector3; overload;
    {class} function TransformNormal(normal: DNVector3; matrix: DNMatrix4x4): DNVector3;
    {class} function Transform(value: DNVector3; rotation: DNQuaternion): DNVector3; overload;
    {class} function Add(left: DNVector3; right: DNVector3): DNVector3;
    {class} function Subtract(left: DNVector3; right: DNVector3): DNVector3;
    {class} function Multiply(left: DNVector3; right: DNVector3): DNVector3; overload;
    {class} function Multiply(left: DNVector3; right: Single): DNVector3; overload;
    {class} function Multiply(left: Single; right: DNVector3): DNVector3; overload;
    {class} function Divide(left: DNVector3; right: DNVector3): DNVector3; overload;
    {class} function Divide(left: DNVector3; divisor: Single): DNVector3; overload;
    {class} function Negate(value: DNVector3): DNVector3;
    {class} function Dot(vector1: DNVector3; vector2: DNVector3): Single;
    {class} function Min(value1: DNVector3; value2: DNVector3): DNVector3;
    {class} function Max(value1: DNVector3; value2: DNVector3): DNVector3;
    {class} function Abs(value: DNVector3): DNVector3;
    {class} function SquareRoot(value: DNVector3): DNVector3;

  { static propertys } 

    {class} property Zero: DNVector3 read get_Zero;
    {class} property One: DNVector3 read get_One;
    {class} property UnitX: DNVector3 read get_UnitX;
    {class} property UnitY: DNVector3 read get_UnitY;
    {class} property UnitZ: DNVector3 read get_UnitZ;
  end;

  [DNTypeName('System.Numerics.Vector3')]
  DNVector3 = interface(DNValueType)
  ['{A36F9C16-B250-3147-B6CF-36E53E6BD0F1}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function Length: Single;
    function LengthSquared: Single;
    procedure CopyTo(&array: TArray<Single>); overload;
    procedure CopyTo(&array: TArray<Single>; index: Int32); overload;
    function Equals(other: DNVector3): Boolean; overload;
    function GetType: DNType;

  end;

  TDNVector3 = class(TDNGenericImport<DNVector3Class, DNVector3>) end;

  //-------------namespace: System.Numerics----------------
  DNVector4Class = interface(DNValueTypeClass)
  ['{3F73301A-7D9D-556D-B94E-B96E81C327DD}']
  { static getter & setter } 

    {class} function get_Zero: DNVector4;
    {class} function get_One: DNVector4;
    {class} function get_UnitX: DNVector4;
    {class} function get_UnitY: DNVector4;
    {class} function get_UnitZ: DNVector4;
    {class} function get_UnitW: DNVector4;

  { constructors } 

    {class} function init(value: Single): DNVector4; overload;
    {class} function init(x: Single; y: Single; z: Single; w: Single): DNVector4; overload;
    {class} function init(value: DNVector2; z: Single; w: Single): DNVector4; overload;
    {class} function init(value: DNVector3; w: Single): DNVector4; overload;

  { static methods } 

    {class} function Distance(value1: DNVector4; value2: DNVector4): Single;
    {class} function DistanceSquared(value1: DNVector4; value2: DNVector4): Single;
    {class} function Normalize(vector: DNVector4): DNVector4;
    {class} function Clamp(value1: DNVector4; min: DNVector4; max: DNVector4): DNVector4;
    {class} function Lerp(value1: DNVector4; value2: DNVector4; amount: Single): DNVector4;
    {class} function Transform(position: DNVector2; matrix: DNMatrix4x4): DNVector4; overload;
    {class} function Transform(position: DNVector3; matrix: DNMatrix4x4): DNVector4; overload;
    {class} function Transform(vector: DNVector4; matrix: DNMatrix4x4): DNVector4; overload;
    {class} function Transform(value: DNVector2; rotation: DNQuaternion): DNVector4; overload;
    {class} function Transform(value: DNVector3; rotation: DNQuaternion): DNVector4; overload;
    {class} function Transform(value: DNVector4; rotation: DNQuaternion): DNVector4; overload;
    {class} function Add(left: DNVector4; right: DNVector4): DNVector4;
    {class} function Subtract(left: DNVector4; right: DNVector4): DNVector4;
    {class} function Multiply(left: DNVector4; right: DNVector4): DNVector4; overload;
    {class} function Multiply(left: DNVector4; right: Single): DNVector4; overload;
    {class} function Multiply(left: Single; right: DNVector4): DNVector4; overload;
    {class} function Divide(left: DNVector4; right: DNVector4): DNVector4; overload;
    {class} function Divide(left: DNVector4; divisor: Single): DNVector4; overload;
    {class} function Negate(value: DNVector4): DNVector4;
    {class} function Dot(vector1: DNVector4; vector2: DNVector4): Single;
    {class} function Min(value1: DNVector4; value2: DNVector4): DNVector4;
    {class} function Max(value1: DNVector4; value2: DNVector4): DNVector4;
    {class} function Abs(value: DNVector4): DNVector4;
    {class} function SquareRoot(value: DNVector4): DNVector4;

  { static propertys } 

    {class} property Zero: DNVector4 read get_Zero;
    {class} property One: DNVector4 read get_One;
    {class} property UnitX: DNVector4 read get_UnitX;
    {class} property UnitY: DNVector4 read get_UnitY;
    {class} property UnitZ: DNVector4 read get_UnitZ;
    {class} property UnitW: DNVector4 read get_UnitW;
  end;

  [DNTypeName('System.Numerics.Vector4')]
  DNVector4 = interface(DNValueType)
  ['{4F6A6CE9-0BCB-36F9-A824-63DCC3A5DEF6}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function Length: Single;
    function LengthSquared: Single;
    procedure CopyTo(&array: TArray<Single>); overload;
    procedure CopyTo(&array: TArray<Single>; index: Int32); overload;
    function Equals(other: DNVector4): Boolean; overload;
    function GetType: DNType;

  end;

  TDNVector4 = class(TDNGenericImport<DNVector4Class, DNVector4>) end;

  //-------------namespace: System----------------
  DNRangeClass = interface(DNValueTypeClass)
  ['{F36AA122-CFFE-5452-9A4B-138DF70E1E96}']
  { static getter & setter } 

    {class} function get_All: DNRange;

  { constructors } 

    {class} function init(start: DNIndex; &end: DNIndex): DNRange;

  { static methods } 

    {class} function StartAt(start: DNIndex): DNRange;
    {class} function EndAt(&end: DNIndex): DNRange;

  { static propertys } 

    {class} property All: DNRange read get_All;
  end;

  [DNTypeName('System.Range')]
  DNRange = interface(DNValueType)
  ['{72E70C94-6C37-33E5-BD81-52EE8628CC1D}']
  { getters & setters } 

    function get_Start: DNIndex;
    function get_End: DNIndex;

  { methods } 

    function Equals(value: DNObject): Boolean; overload;
    function Equals(other: DNRange): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetOffsetAndLength(length: Int32): DNValueTuple<Int32, Int32>;
    function GetType: DNType;

  { propertys } 

    property Start: DNIndex read get_Start;
    property &End: DNIndex read get_End;
  end;

  TDNRange = class(TDNGenericImport<DNRangeClass, DNRange>) end;

  //-------------namespace: System----------------
  DNReadOnlyMemoryClass<T> = interface(DNValueTypeClass)
  ['{BB2EF4CC-70CE-53B6-BFFA-E54EB09A1147}']
  { static getter & setter } 

    {class} function get_Empty: DNReadOnlyMemory<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNReadOnlyMemory<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNReadOnlyMemory<T>; overload;

  { static propertys } 

    {class} property Empty: DNReadOnlyMemory<T> read get_Empty;
  end;

  [DNTypeName('System.ReadOnlyMemory`1')]
  DNReadOnlyMemory<T> = interface(DNValueType)
  ['{317B9FA9-C240-3B9D-8122-235379BD0C83}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Span: DNReadOnlySpan<T>;

  { methods } 

    function ToString: string;
    function Slice(start: Int32): DNReadOnlyMemory<T>; overload;
    function Slice(start: Int32; length: Int32): DNReadOnlyMemory<T>; overload;
    procedure CopyTo(destination: DNMemory<T>);
    function TryCopyTo(destination: DNMemory<T>): Boolean;
    function Pin: DNMemoryHandle;
    function ToArray: TArray<T>;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNReadOnlyMemory<T>): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Span: DNReadOnlySpan<T> read get_Span;
  end;

  TDNReadOnlyMemory<T> = class(TDNGenericImport<DNReadOnlyMemoryClass<T>, DNReadOnlyMemory<T>>) end;

  //-------------namespace: System----------------
  DNReadOnlySpanClass<T> = interface(DNValueTypeClass)
  ['{2F9E50DD-6497-5A86-81DD-4F082A1F6E76}']
  { static getter & setter } 

    {class} function get_Empty: DNReadOnlySpan<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNReadOnlySpan<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNReadOnlySpan<T>; overload;
    {class} function init(var pointer: DNVoid; length: Int32): DNReadOnlySpan<T>; overload;

  { static propertys } 

    {class} property Empty: DNReadOnlySpan<T> read get_Empty;
  end;

  [DNTypeName('System.ReadOnlySpan`1')]
  DNReadOnlySpan<T> = interface(DNValueType)
  ['{2AEBC719-C0BF-3250-A76F-04862E6BA7B7}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    function get_Length: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DNReadOnlySpan_Enumerator<T>;
    function GetPinnableReference: T;
    procedure CopyTo(destination: DNSpan<T>);
    function TryCopyTo(destination: DNSpan<T>): Boolean;
    function ToString: string;
    function Slice(start: Int32): DNReadOnlySpan<T>; overload;
    function Slice(start: Int32; length: Int32): DNReadOnlySpan<T>; overload;
    function ToArray: TArray<T>;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNReadOnlySpan<T> = class(TDNGenericImport<DNReadOnlySpanClass<T>, DNReadOnlySpan<T>>) end;

  //-------------namespace: System----------------
  DNReadOnlySpan_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{CBA9A9B6-7087-5836-AC43-B4FA59263C73}']
  end;

  [DNTypeName('System.ReadOnlySpan`1+Enumerator')]
  DNReadOnlySpan_Enumerator<T> = interface(DNValueType)
  ['{F493B4A7-EC1C-30D6-A0F3-818F5E637743}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNReadOnlySpan_Enumerator<T> = class(TDNGenericImport<DNReadOnlySpan_EnumeratorClass<T>, DNReadOnlySpan_Enumerator<T>>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeNamedArgumentClass = interface(DNValueTypeClass)
  ['{BE23670D-8416-552B-A51A-40BB56726ACA}']
  { constructors } 

    {class} function init(memberInfo: DNMemberInfo; value: DNObject): DNCustomAttributeNamedArgument; overload;
    {class} function init(memberInfo: DNMemberInfo; typedArgument: DNCustomAttributeTypedArgument): DNCustomAttributeNamedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeNamedArgument')]
  DNCustomAttributeNamedArgument = interface(DNValueType)
  ['{EE68DEB4-316C-3AD6-ABBD-6513486F32DD}']
  { getters & setters } 

    function get_MemberInfo: DNMemberInfo;
    function get_TypedValue: DNCustomAttributeTypedArgument;
    function get_MemberName: string;
    function get_IsField: Boolean;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property MemberInfo: DNMemberInfo read get_MemberInfo;
    property TypedValue: DNCustomAttributeTypedArgument read get_TypedValue;
    property MemberName: string read get_MemberName;
    property IsField: Boolean read get_IsField;
  end;

  TDNCustomAttributeNamedArgument = class(TDNGenericImport<DNCustomAttributeNamedArgumentClass, DNCustomAttributeNamedArgument>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeTypedArgumentClass = interface(DNValueTypeClass)
  ['{0BA1F5F4-0437-560E-ADBE-A62F75983F07}']
  { constructors } 

    {class} function init(argumentType: DNType; value: DNObject): DNCustomAttributeTypedArgument; overload;
    {class} function init(value: DNObject): DNCustomAttributeTypedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeTypedArgument')]
  DNCustomAttributeTypedArgument = interface(DNValueType)
  ['{E636D5CA-C7EB-3574-BE2D-71A66DD44D8E}']
  { getters & setters } 

    function get_ArgumentType: DNType;
    function get_Value: DNObject;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property ArgumentType: DNType read get_ArgumentType;
    property Value: DNObject read get_Value;
  end;

  TDNCustomAttributeTypedArgument = class(TDNGenericImport<DNCustomAttributeTypedArgumentClass, DNCustomAttributeTypedArgument>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventTokenClass = interface(DNValueTypeClass)
  ['{7B0D9CF4-2CF8-5AAD-A94D-5568148FD4B0}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventToken;

  { static fields } 

    {class} property Empty: DNEventToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.EventToken')]
  DNEventToken = interface(DNValueType)
  ['{2BA61D3E-AC09-317A-A1C5-87710AC0BD80}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNEventToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNEventToken = class(TDNGenericImport<DNEventTokenClass, DNEventToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldTokenClass = interface(DNValueTypeClass)
  ['{D29BCC0A-510C-5FB7-BAB1-9168BE08FB6B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNFieldToken;

  { static fields } 

    {class} property Empty: DNFieldToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.FieldToken')]
  DNFieldToken = interface(DNValueType)
  ['{AF44E89B-E702-3469-8BAF-5D90FF4C41AA}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNFieldToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNFieldToken = class(TDNGenericImport<DNFieldTokenClass, DNFieldToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLabelClass = interface(DNValueTypeClass)
  ['{3103271E-F87F-5690-AD92-0190D3E1F1C2}']
  end;

  [DNTypeName('System.Reflection.Emit.Label')]
  DNLabel = interface(DNValueType)
  ['{8112C1FB-72C4-368B-B2C5-F736180AA588}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNLabel): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodTokenClass = interface(DNValueTypeClass)
  ['{94C32482-F979-5BE6-A461-14E75AD379B9}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNMethodToken;

  { static fields } 

    {class} property Empty: DNMethodToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.MethodToken')]
  DNMethodToken = interface(DNValueType)
  ['{88F46A86-19D2-341A-B686-D18593134EF8}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNMethodToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNMethodToken = class(TDNGenericImport<DNMethodTokenClass, DNMethodToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodeClass = interface(DNValueTypeClass)
  ['{62AE273D-2570-5414-997A-BC5480427303}']
  end;

  [DNTypeName('System.Reflection.Emit.OpCode')]
  DNOpCode = interface(DNValueType)
  ['{F53FC5B2-1D96-3074-943F-1BA4C1489BF9}']
  { getters & setters } 

    function get_OperandType: DNOperandType;
    function get_FlowControl: DNFlowControl;
    function get_OpCodeType: DNOpCodeType;
    function get_StackBehaviourPop: DNStackBehaviour;
    function get_StackBehaviourPush: DNStackBehaviour;
    function get_Size: Int32;
    function get_Value: Int16;
    function get_Name: string;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNOpCode): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OperandType: DNOperandType read get_OperandType;
    property FlowControl: DNFlowControl read get_FlowControl;
    property OpCodeType: DNOpCodeType read get_OpCodeType;
    property StackBehaviourPop: DNStackBehaviour read get_StackBehaviourPop;
    property StackBehaviourPush: DNStackBehaviour read get_StackBehaviourPush;
    property Size: Int32 read get_Size;
    property Value: Int16 read get_Value;
    property Name: string read get_Name;
  end;

  TDNOpCode = class(TDNGenericImport<DNOpCodeClass, DNOpCode>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterTokenClass = interface(DNValueTypeClass)
  ['{4249E7C8-523C-5B6E-81A7-A7095C2680E7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNParameterToken;

  { static fields } 

    {class} property Empty: DNParameterToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.ParameterToken')]
  DNParameterToken = interface(DNValueType)
  ['{12E63D38-E032-38F3-A974-6E40CBDA386A}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNParameterToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNParameterToken = class(TDNGenericImport<DNParameterTokenClass, DNParameterToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyTokenClass = interface(DNValueTypeClass)
  ['{E00CB918-0FD5-5E1C-8859-3B91ECAC1124}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyToken;

  { static fields } 

    {class} property Empty: DNPropertyToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.PropertyToken')]
  DNPropertyToken = interface(DNValueType)
  ['{A902041F-8907-3E19-8DCF-54444D6BF878}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNPropertyToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNPropertyToken = class(TDNGenericImport<DNPropertyTokenClass, DNPropertyToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureTokenClass = interface(DNValueTypeClass)
  ['{A5578CA3-4948-57C1-9BEB-9749A36CBD9B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSignatureToken;

  { static fields } 

    {class} property Empty: DNSignatureToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureToken')]
  DNSignatureToken = interface(DNValueType)
  ['{59542986-E5C0-3DEA-8140-B4A74663EF73}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNSignatureToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNSignatureToken = class(TDNGenericImport<DNSignatureTokenClass, DNSignatureToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNStringTokenClass = interface(DNValueTypeClass)
  ['{7B8182D5-6B59-5C16-954C-82484986D393}']
  end;

  [DNTypeName('System.Reflection.Emit.StringToken')]
  DNStringToken = interface(DNValueType)
  ['{994810DC-B778-32A4-A224-E9E225006659}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNStringToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNStringToken = class(TDNGenericImport<DNStringTokenClass, DNStringToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeTokenClass = interface(DNValueTypeClass)
  ['{E73F2F87-88B0-5225-A3D3-410C8224B4C8}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNTypeToken;

  { static fields } 

    {class} property Empty: DNTypeToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.TypeToken')]
  DNTypeToken = interface(DNValueType)
  ['{1E8490AF-1E85-3E2B-8615-3F27AFA9021A}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNTypeToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNTypeToken = class(TDNGenericImport<DNTypeTokenClass, DNTypeToken>) end;

  //-------------namespace: System.Reflection----------------
  DNInterfaceMappingClass = interface(DNValueTypeClass)
  ['{9BEE89E7-4BFF-56E7-92D5-5561DDEC897D}']
  end;

  [DNTypeName('System.Reflection.InterfaceMapping')]
  DNInterfaceMapping = interface(DNValueType)
  ['{ACF8BB6C-0804-3E76-89C3-79A1B711FC94}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNInterfaceMapping = class(TDNGenericImport<DNInterfaceMappingClass, DNInterfaceMapping>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterModifierClass = interface(DNValueTypeClass)
  ['{2DC88666-7FF0-50E2-B693-4977FE7E62F6}']
  { constructors } 

    {class} function init(parameterCount: Int32): DNParameterModifier;

  end;

  [DNTypeName('System.Reflection.ParameterModifier')]
  DNParameterModifier = interface(DNValueType)
  ['{D952CB8A-5F22-34A7-935E-A68260AAEA84}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
  end;

  TDNParameterModifier = class(TDNGenericImport<DNParameterModifierClass, DNParameterModifier>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncIteratorMethodBuilderClass = interface(DNValueTypeClass)
  ['{5BFFE43D-1E9C-5AF4-8CDE-656EF1997674}']
  { static methods } 

    {class} function Create: DNAsyncIteratorMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncIteratorMethodBuilder')]
  DNAsyncIteratorMethodBuilder = interface(DNValueType)
  ['{D6C06A7F-52ED-3E99-A9BA-4C1F2350FD01}']
  { methods } 

    procedure Complete;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncIteratorMethodBuilder = class(TDNGenericImport<DNAsyncIteratorMethodBuilderClass, DNAsyncIteratorMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass<TResult> = interface(DNValueTypeClass)
  ['{18124898-A3AA-5BC7-A925-9961C460B992}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder<TResult>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1')]
  DNAsyncTaskMethodBuilder<TResult> = interface(DNValueType)
  ['{BDFF7CC5-AAA1-3978-8DF0-10DD1BB2D383}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult(result: TResult);
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNAsyncTaskMethodBuilder<TResult> = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass<TResult>, DNAsyncTaskMethodBuilder<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{D397F9E3-53B7-51F1-911B-9964C5E89419}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder')]
  DNAsyncTaskMethodBuilder = interface(DNValueType)
  ['{244A94EF-2404-38F0-A99E-E4C1B4FBDCAE}']
  { getters & setters } 

    function get_Task: DNTask;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask read get_Task;
  end;

  TDNAsyncTaskMethodBuilder = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass, DNAsyncTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncValueTaskMethodBuilderClass<TResult> = interface(DNValueTypeClass)
  ['{F40D0050-D49C-5876-9E26-FFBCCD4F65C8}']
  { static methods } 

    {class} function Create: DNAsyncValueTaskMethodBuilder<TResult>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1')]
  DNAsyncValueTaskMethodBuilder<TResult> = interface(DNValueType)
  ['{FBC355D2-5D46-37C2-B655-FCB92AF08FB0}']
  { getters & setters } 

    function get_Task: DNValueTask<TResult>;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult(result: TResult);
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNValueTask<TResult> read get_Task;
  end;

  TDNAsyncValueTaskMethodBuilder<TResult> = class(TDNGenericImport<DNAsyncValueTaskMethodBuilderClass<TResult>, DNAsyncValueTaskMethodBuilder<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncValueTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{EBDD80DA-3608-5372-AEA6-B08CC9027A94}']
  { static methods } 

    {class} function Create: DNAsyncValueTaskMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder')]
  DNAsyncValueTaskMethodBuilder = interface(DNValueType)
  ['{5123F0E7-E525-3454-9247-820CC7D97F82}']
  { getters & setters } 

    function get_Task: DNValueTask;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNValueTask read get_Task;
  end;

  TDNAsyncValueTaskMethodBuilder = class(TDNGenericImport<DNAsyncValueTaskMethodBuilderClass, DNAsyncValueTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncVoidMethodBuilderClass = interface(DNValueTypeClass)
  ['{6000BA98-71E6-5481-8C3D-CFBE94D60290}']
  { static methods } 

    {class} function Create: DNAsyncVoidMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncVoidMethodBuilder')]
  DNAsyncVoidMethodBuilder = interface(DNValueType)
  ['{9831AC2E-2F9E-3D48-A3B4-BE316354CDD7}']
  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncVoidMethodBuilder = class(TDNGenericImport<DNAsyncVoidMethodBuilderClass, DNAsyncVoidMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredAsyncDisposableClass = interface(DNValueTypeClass)
  ['{1302285E-9D78-5D01-A72A-5D022DCFDB1C}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredAsyncDisposable')]
  DNConfiguredAsyncDisposable = interface(DNValueType)
  ['{67F1AC5C-0382-399B-90D5-75C35FC41FE6}']
  { methods } 

    function DisposeAsync: DNConfiguredValueTaskAwaitable;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredAsyncDisposable = class(TDNGenericImport<DNConfiguredAsyncDisposableClass, DNConfiguredAsyncDisposable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredCancelableAsyncEnumerableClass<T> = interface(DNValueTypeClass)
  ['{AB7BDFF9-034E-5790-9C40-F1AEF2B4D97E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1')]
  DNConfiguredCancelableAsyncEnumerable<T> = interface(DNValueType)
  ['{C401E4BC-9F14-351C-AE13-099FEFC6D787}']
  { methods } 

    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredCancelableAsyncEnumerable<T>;
    function WithCancellation(cancellationToken: DNCancellationToken): DNConfiguredCancelableAsyncEnumerable<T>;
    function GetAsyncEnumerator: DNConfiguredCancelableAsyncEnumerable_Enumerator<T>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredCancelableAsyncEnumerable<T> = class(TDNGenericImport<DNConfiguredCancelableAsyncEnumerableClass<T>, DNConfiguredCancelableAsyncEnumerable<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredCancelableAsyncEnumerable_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{B7ACE6FF-DD6E-5B4F-B598-6C6B0D99735E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1+Enumerator')]
  DNConfiguredCancelableAsyncEnumerable_Enumerator<T> = interface(DNValueType)
  ['{07BF4F2D-E6A7-35F5-A955-9E0AF39B47FE}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNextAsync: DNConfiguredValueTaskAwaitable<Boolean>;
    function DisposeAsync: DNConfiguredValueTaskAwaitable;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNConfiguredCancelableAsyncEnumerable_Enumerator<T> = class(TDNGenericImport<DNConfiguredCancelableAsyncEnumerable_EnumeratorClass<T>, DNConfiguredCancelableAsyncEnumerable_Enumerator<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass<TResult> = interface(DNValueTypeClass)
  ['{87943002-C494-58C1-B7C5-103525AAE093}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1')]
  DNConfiguredTaskAwaitable<TResult> = interface(DNValueType)
  ['{D742A884-B990-3DB2-84CB-3A38C4446AA1}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable<TResult> = class(TDNGenericImport<DNConfiguredTaskAwaitableClass<TResult>, DNConfiguredTaskAwaitable<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{53A40A64-8F67-572F-B52A-AA9DB8DF73A2}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface(DNValueType)
  ['{1C681886-AFA8-37A5-B664-BA2860487212}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult>, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass = interface(DNValueTypeClass)
  ['{1633939F-DEA1-50FA-AD42-B2E9A36BF790}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable')]
  DNConfiguredTaskAwaitable = interface(DNValueType)
  ['{C69275F0-E331-307A-A308-C4DF46FFEC06}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable = class(TDNGenericImport<DNConfiguredTaskAwaitableClass, DNConfiguredTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass = interface(DNValueTypeClass)
  ['{BDAAF185-21A0-545D-953C-01B144C12D7E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface(DNValueType)
  ['{AAC41F9B-038E-3244-AA5B-45CBFE84A5D8}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredValueTaskAwaitableClass<TResult> = interface(DNValueTypeClass)
  ['{C3BF011A-9C95-5645-87F1-8C03E57B5F92}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1')]
  DNConfiguredValueTaskAwaitable<TResult> = interface(DNValueType)
  ['{395CD0F9-EFBF-3E0D-93FD-D50F17680A73}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredValueTaskAwaitable<TResult> = class(TDNGenericImport<DNConfiguredValueTaskAwaitableClass<TResult>, DNConfiguredValueTaskAwaitable<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{CCED4309-A48A-528B-835C-61FF63750DF8}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter')]
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = interface(DNValueType)
  ['{706915AF-4DB2-3307-BFA3-07925FA73595}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function GetResult: TResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = class(TDNGenericImport<DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass<TResult>, DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredValueTaskAwaitableClass = interface(DNValueTypeClass)
  ['{B4FD71F5-B640-5FFD-AA69-9362C95A806D}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable')]
  DNConfiguredValueTaskAwaitable = interface(DNValueType)
  ['{F45BAE07-0FA5-33CF-A4E7-704147F568B2}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredValueTaskAwaitable = class(TDNGenericImport<DNConfiguredValueTaskAwaitableClass, DNConfiguredValueTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass = interface(DNValueTypeClass)
  ['{25E2B7F7-8126-5A13-AA82-5240332A0E8F}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter')]
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = interface(DNValueType)
  ['{2C1DD385-CB80-34E3-A225-2A1AC38C5A0B}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure GetResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = class(TDNGenericImport<DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass, DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{492BEB6C-AFB2-592F-90E8-7899FEC15E0F}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter`1')]
  DNTaskAwaiter<TResult> = interface(DNValueType)
  ['{6709F777-0EE2-3E6C-A1DF-EC383C8B0606}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter<TResult> = class(TDNGenericImport<DNTaskAwaiterClass<TResult>, DNTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass = interface(DNValueTypeClass)
  ['{8AD86D5C-F89B-5280-BA0B-34F8CB826D8D}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter')]
  DNTaskAwaiter = interface(DNValueType)
  ['{4DD82380-81E5-3CE8-995E-B91CBF6C9071}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter = class(TDNGenericImport<DNTaskAwaiterClass, DNTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNValueTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{4BD52A56-2393-5168-B9B7-DEB6446748E1}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ValueTaskAwaiter`1')]
  DNValueTaskAwaiter<TResult> = interface(DNValueType)
  ['{C9A19C1C-512D-3A6E-99EE-73B470927FA7}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function GetResult: TResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNValueTaskAwaiter<TResult> = class(TDNGenericImport<DNValueTaskAwaiterClass<TResult>, DNValueTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNValueTaskAwaiterClass = interface(DNValueTypeClass)
  ['{28253BAC-1ECD-5E05-AF74-3ADC3FFEA392}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ValueTaskAwaiter')]
  DNValueTaskAwaiter = interface(DNValueType)
  ['{3F18A773-E6CA-387A-BD9D-932197041EF3}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure GetResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNValueTaskAwaiter = class(TDNGenericImport<DNValueTaskAwaiterClass, DNValueTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitableClass = interface(DNValueTypeClass)
  ['{536BB102-3E38-5494-BFE6-2BA382816781}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable')]
  DNYieldAwaitable = interface(DNValueType)
  ['{16052BB8-A8DD-3639-A530-BD020E4E5AB1}']
  { methods } 

    function GetAwaiter: DNYieldAwaitable_YieldAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNYieldAwaitable = class(TDNGenericImport<DNYieldAwaitableClass, DNYieldAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitable_YieldAwaiterClass = interface(DNValueTypeClass)
  ['{D8FA6DAD-F735-59BB-815D-8F2B0028D154}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter')]
  DNYieldAwaitable_YieldAwaiter = interface(DNValueType)
  ['{5219AF14-1DB9-36F0-978B-D9B10A5969CE}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNYieldAwaitable_YieldAwaiter = class(TDNGenericImport<DNYieldAwaitable_YieldAwaiterClass, DNYieldAwaitable_YieldAwaiter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNArrayWithOffsetClass = interface(DNValueTypeClass)
  ['{465AF4C5-BC62-530E-B3AF-13925D96678D}']
  { constructors } 

    {class} function init(&array: DNObject; offset: Int32): DNArrayWithOffset;

  end;

  [DNTypeName('System.Runtime.InteropServices.ArrayWithOffset')]
  DNArrayWithOffset = interface(DNValueType)
  ['{9273DC27-F9F8-330C-A256-FA9F86698E89}']
  { methods } 

    function GetArray: DNObject;
    function GetOffset: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArrayWithOffset): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArrayWithOffset = class(TDNGenericImport<DNArrayWithOffsetClass, DNArrayWithOffset>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNBIND_OPTSClass = interface(DNValueTypeClass)
  ['{B5A5A9CC-7B18-591E-9575-AB6815EC229C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BIND_OPTS')]
  DNBIND_OPTS = interface(DNValueType)
  ['{7E1C7415-7193-3856-8D22-8D3F5886E53F}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNBIND_OPTS = class(TDNGenericImport<DNBIND_OPTSClass, DNBIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNBINDPTRClass = interface(DNValueTypeClass)
  ['{610DA494-3784-594C-8B8B-6DC9F9CFA2DD}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BINDPTR')]
  DNBINDPTR = interface(DNValueType)
  ['{5C0338D8-046E-3E8B-BA9E-41F4A4EFA626}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNBINDPTR = class(TDNGenericImport<DNBINDPTRClass, DNBINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNCONNECTDATAClass = interface(DNValueTypeClass)
  ['{171C90F2-6525-5FC4-B279-764E5B2F70E8}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.CONNECTDATA')]
  DNCONNECTDATA = interface(DNValueType)
  ['{EDA4D7C7-7B1D-34DF-84E8-3CE7158B601C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNCONNECTDATA = class(TDNGenericImport<DNCONNECTDATAClass, DNCONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNDISPPARAMSClass = interface(DNValueTypeClass)
  ['{9723A00F-39F3-5606-A2CB-A46E7941910F}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.DISPPARAMS')]
  DNDISPPARAMS = interface(DNValueType)
  ['{035B66A0-69EA-3091-90A4-A62E3A720C19}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNDISPPARAMS = class(TDNGenericImport<DNDISPPARAMSClass, DNDISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNELEMDESCClass = interface(DNValueTypeClass)
  ['{6701E252-E4BD-5646-9D1C-E8518853A6FE}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC')]
  DNELEMDESC = interface(DNValueType)
  ['{53BBA528-19E8-3262-AD70-C382DA0419D8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNELEMDESC = class(TDNGenericImport<DNELEMDESCClass, DNELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{21700ECC-5D91-5EA4-8CD1-9CD462DA219D}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION')]
  DNELEMDESC_DESCUNION = interface(DNValueType)
  ['{0D346602-EA6D-3D0F-8024-2A65A6DEBD76}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNELEMDESC_DESCUNION = class(TDNGenericImport<DNELEMDESC_DESCUNIONClass, DNELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNEXCEPINFOClass = interface(DNValueTypeClass)
  ['{5D1DA68E-A7AD-571C-BA1B-AD9AD266D2E2}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.EXCEPINFO')]
  DNEXCEPINFO = interface(DNValueType)
  ['{FD4D19B8-A412-3AE8-9055-F20D018C0E16}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEXCEPINFO = class(TDNGenericImport<DNEXCEPINFOClass, DNEXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNFILETIMEClass = interface(DNValueTypeClass)
  ['{FC715504-1A16-53BA-936F-F894CE97F454}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FILETIME')]
  DNFILETIME = interface(DNValueType)
  ['{34D37DD8-3AF8-3786-8234-7EB50C8B221E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNFILETIME = class(TDNGenericImport<DNFILETIMEClass, DNFILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNFUNCDESCClass = interface(DNValueTypeClass)
  ['{E5DFBB41-2E24-5CA9-BDAD-3D03A7C4A435}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCDESC')]
  DNFUNCDESC = interface(DNValueType)
  ['{877D0443-237E-3EBB-8A90-10111C266F52}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNFUNCDESC = class(TDNGenericImport<DNFUNCDESCClass, DNFUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNIDLDESCClass = interface(DNValueTypeClass)
  ['{0D0947A7-68BA-5D84-93C0-49CC4ACC64ED}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLDESC')]
  DNIDLDESC = interface(DNValueType)
  ['{3C90DA99-A33C-3B7E-9911-3C94DBF4A2D4}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNIDLDESC = class(TDNGenericImport<DNIDLDESCClass, DNIDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNPARAMDESCClass = interface(DNValueTypeClass)
  ['{ABF2036C-980A-5184-9B5D-D65957D1F9E4}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMDESC')]
  DNPARAMDESC = interface(DNValueType)
  ['{E88D0707-9718-3FE5-9FED-5A99B2E2DAF1}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNPARAMDESC = class(TDNGenericImport<DNPARAMDESCClass, DNPARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNSTATSTGClass = interface(DNValueTypeClass)
  ['{4ABCD862-63A8-554B-B221-640898A9A8EE}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.STATSTG')]
  DNSTATSTG = interface(DNValueType)
  ['{92C7CB13-A0D2-3787-BD63-C76D1BED222D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSTATSTG = class(TDNGenericImport<DNSTATSTGClass, DNSTATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPEATTRClass = interface(DNValueTypeClass)
  ['{3134F897-B76F-585C-8794-CEB1CAF84A2C}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEATTR')]
  DNTYPEATTR = interface(DNValueType)
  ['{203B74EE-AF9A-33CB-8AD9-25A4CE0005F9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPEATTR = class(TDNGenericImport<DNTYPEATTRClass, DNTYPEATTR>)
  public const
   MEMBER_ID_NIL = -1;
  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPEDESCClass = interface(DNValueTypeClass)
  ['{2E7A1F96-F338-55CA-A4AF-46CE4D9FC8F0}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEDESC')]
  DNTYPEDESC = interface(DNValueType)
  ['{D56CBCED-6DC1-3F35-81F1-7A8F06A06FCA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPEDESC = class(TDNGenericImport<DNTYPEDESCClass, DNTYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPELIBATTRClass = interface(DNValueTypeClass)
  ['{E2A4DE43-BC88-5EB0-8C8E-293F593D9B35}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPELIBATTR')]
  DNTYPELIBATTR = interface(DNValueType)
  ['{C64FB12E-3B73-3416-93DB-228AEA327195}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPELIBATTR = class(TDNGenericImport<DNTYPELIBATTRClass, DNTYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNVARDESCClass = interface(DNValueTypeClass)
  ['{0434E938-5353-5FA8-BF62-D905A130CBFD}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC')]
  DNVARDESC = interface(DNValueType)
  ['{FBBF6AFB-A15F-3823-8576-5A1C88BF9D7E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVARDESC = class(TDNGenericImport<DNVARDESCClass, DNVARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNVARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{DDE3F98F-E97F-5171-BEC9-6B5318361332}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION')]
  DNVARDESC_DESCUNION = interface(DNValueType)
  ['{A290C36C-0121-3E6F-8F72-19A9020E861C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVARDESC_DESCUNION = class(TDNGenericImport<DNVARDESC_DESCUNIONClass, DNVARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComWrappers_ComInterfaceDispatchClass = interface(DNValueTypeClass)
  ['{E2A70C39-634B-5229-8209-CA223136E220}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComWrappers+ComInterfaceDispatch')]
  DNComWrappers_ComInterfaceDispatch = interface(DNValueType)
  ['{E46759EE-A5A3-350D-8622-F4A2F420AC4E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNComWrappers_ComInterfaceDispatch = class(TDNGenericImport<DNComWrappers_ComInterfaceDispatchClass, DNComWrappers_ComInterfaceDispatch>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComWrappers_ComInterfaceEntryClass = interface(DNValueTypeClass)
  ['{3F58CA29-DAC6-58D7-8841-AE7CF318A531}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComWrappers+ComInterfaceEntry')]
  DNComWrappers_ComInterfaceEntry = interface(DNValueType)
  ['{EB4482CD-99B2-3E15-A38B-13E9A914BD24}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNComWrappers_ComInterfaceEntry = class(TDNGenericImport<DNComWrappers_ComInterfaceEntryClass, DNComWrappers_ComInterfaceEntry>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGCHandleClass = interface(DNValueTypeClass)
  ['{4113008A-8E46-5137-8ED5-E0D069D86E8E}']
  { static methods } 

    {class} function Alloc(value: DNObject): DNGCHandle; overload;
    {class} function Alloc(value: DNObject; &type: DNGCHandleType): DNGCHandle; overload;
    {class} function FromIntPtr(value: IntPtr): DNGCHandle;
    {class} function ToIntPtr(value: DNGCHandle): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.GCHandle')]
  DNGCHandle = interface(DNValueType)
  ['{F9CE82D4-C3D0-361F-A7DF-EDE404D40AB0}']
  { getters & setters } 

    function get_Target: DNObject;
    procedure set_Target(value: DNObject);
    function get_IsAllocated: Boolean;

  { methods } 

    procedure Free;
    function AddrOfPinnedObject: IntPtr;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Target: DNObject read get_Target write set_Target;
    property IsAllocated: Boolean read get_IsAllocated;
  end;

  TDNGCHandle = class(TDNGenericImport<DNGCHandleClass, DNGCHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNHandleRefClass = interface(DNValueTypeClass)
  ['{F8760996-AFC0-562A-973A-AA1119EC03DA}']
  { constructors } 

    {class} function init(wrapper: DNObject; handle: IntPtr): DNHandleRef;

  { static methods } 

    {class} function ToIntPtr(value: DNHandleRef): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.HandleRef')]
  DNHandleRef = interface(DNValueType)
  ['{20B90C62-1258-3866-A59E-37C6EF901F1D}']
  { getters & setters } 

    function get_Wrapper: DNObject;
    function get_Handle: IntPtr;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Wrapper: DNObject read get_Wrapper;
    property Handle: IntPtr read get_Handle;
  end;

  TDNHandleRef = class(TDNGenericImport<DNHandleRefClass, DNHandleRef>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector128Class<T> = interface(DNValueTypeClass)
  ['{C7CC22F7-8355-570D-A583-00159B9355D4}']
  { static getter & setter } 

    {class} function get_Count: Int32;
    {class} function get_Zero: DNVector128<T>;
    {class} function get_AllBitsSet: DNVector128<T>;

  { static propertys } 

    {class} property Count: Int32 read get_Count;
    {class} property Zero: DNVector128<T> read get_Zero;
    {class} property AllBitsSet: DNVector128<T> read get_AllBitsSet;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector128`1')]
  DNVector128<T> = interface(DNValueType)
  ['{3AE31294-6548-3917-9E6D-A5F6894D2214}']
  { methods } 

    function Equals(other: DNVector128<T>): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector128<T> = class(TDNGenericImport<DNVector128Class<T>, DNVector128<T>>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector256Class<T> = interface(DNValueTypeClass)
  ['{7B552182-DB70-5C0B-AF6C-80A8E0E3644C}']
  { static getter & setter } 

    {class} function get_Count: Int32;
    {class} function get_Zero: DNVector256<T>;
    {class} function get_AllBitsSet: DNVector256<T>;

  { static propertys } 

    {class} property Count: Int32 read get_Count;
    {class} property Zero: DNVector256<T> read get_Zero;
    {class} property AllBitsSet: DNVector256<T> read get_AllBitsSet;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector256`1')]
  DNVector256<T> = interface(DNValueType)
  ['{297D55FB-889F-395D-BDA7-B2062AFE56DA}']
  { methods } 

    function Equals(other: DNVector256<T>): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector256<T> = class(TDNGenericImport<DNVector256Class<T>, DNVector256<T>>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector64Class<T> = interface(DNValueTypeClass)
  ['{F765A58F-D193-56D5-A274-7A30CD13E8CB}']
  { static getter & setter } 

    {class} function get_Count: Int32;
    {class} function get_Zero: DNVector64<T>;
    {class} function get_AllBitsSet: DNVector64<T>;

  { static propertys } 

    {class} property Count: Int32 read get_Count;
    {class} property Zero: DNVector64<T> read get_Zero;
    {class} property AllBitsSet: DNVector64<T> read get_AllBitsSet;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector64`1')]
  DNVector64<T> = interface(DNValueType)
  ['{45E47BC4-F785-3EAD-89AC-BE91CBB8B352}']
  { methods } 

    function Equals(other: DNVector64<T>): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector64<T> = class(TDNGenericImport<DNVector64Class<T>, DNVector64<T>>) end;

  //-------------namespace: System.Runtime.Loader----------------
  DNAssemblyLoadContext_ContextualReflectionScopeClass = interface(DNValueTypeClass)
  ['{6815B8B4-0BA0-51D1-B97B-2E7BFFC4A783}']
  end;

  [DNTypeName('System.Runtime.Loader.AssemblyLoadContext+ContextualReflectionScope')]
  DNAssemblyLoadContext_ContextualReflectionScope = interface(DNValueType)
  ['{CC015B7D-EE88-332F-8744-1CCDEDA6CED2}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAssemblyLoadContext_ContextualReflectionScope = class(TDNGenericImport<DNAssemblyLoadContext_ContextualReflectionScopeClass, DNAssemblyLoadContext_ContextualReflectionScope>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNDeserializationTokenClass = interface(DNValueTypeClass)
  ['{92969341-7581-5DDC-A12A-B657A6D2666C}']
  end;

  [DNTypeName('System.Runtime.Serialization.DeserializationToken')]
  DNDeserializationToken = interface(DNValueType)
  ['{38B8C532-9A03-3FFC-AB9F-F4EB38416EF9}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNDeserializationToken = class(TDNGenericImport<DNDeserializationTokenClass, DNDeserializationToken>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationEntryClass = interface(DNValueTypeClass)
  ['{AF8533E0-7F10-582D-89F8-B4C6AB2F3D65}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationEntry')]
  DNSerializationEntry = interface(DNValueType)
  ['{7920E11F-C26F-3207-989F-58BE837A093D}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_Name: string;
    function get_ObjectType: DNType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property Name: string read get_Name;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationEntry = class(TDNGenericImport<DNSerializationEntryClass, DNSerializationEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNStreamingContextClass = interface(DNValueTypeClass)
  ['{E18F7906-99BA-516E-8D7C-3834E1FD1A4B}']
  { constructors } 

    {class} function init(state: DNStreamingContextStates): DNStreamingContext; overload;
    {class} function init(state: DNStreamingContextStates; additional: DNObject): DNStreamingContext; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.StreamingContext')]
  DNStreamingContext = interface(DNValueType)
  ['{E1E18EE2-365B-31EB-AE52-AFB0EEB89AC8}']
  { getters & setters } 

    function get_State: DNStreamingContextStates;
    function get_Context: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property State: DNStreamingContextStates read get_State;
    property Context: DNObject read get_Context;
  end;

  TDNStreamingContext = class(TDNGenericImport<DNStreamingContextClass, DNStreamingContext>) end;

  //-------------namespace: System----------------
  DNRuntimeArgumentHandleClass = interface(DNValueTypeClass)
  ['{AF8565AD-F04C-5C49-8418-62E18D18D6FC}']
  end;

  [DNTypeName('System.RuntimeArgumentHandle')]
  DNRuntimeArgumentHandle = interface(DNValueType)
  ['{A508CFD1-C7F6-310C-B952-8EDD4D269999}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNRuntimeArgumentHandle = class(TDNGenericImport<DNRuntimeArgumentHandleClass, DNRuntimeArgumentHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeFieldHandleClass = interface(DNValueTypeClass)
  ['{5BD278E3-465A-5C18-9414-CD05C3EBD90D}']
  end;

  [DNTypeName('System.RuntimeFieldHandle')]
  DNRuntimeFieldHandle = interface(DNValueType)
  ['{199A1669-E923-3DFF-829A-A8796E37C932}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeFieldHandle): Boolean; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeFieldHandle = class(TDNGenericImport<DNRuntimeFieldHandleClass, DNRuntimeFieldHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeMethodHandleClass = interface(DNValueTypeClass)
  ['{8271FFF7-C337-5A06-B48C-E1C0FDC674D0}']
  end;

  [DNTypeName('System.RuntimeMethodHandle')]
  DNRuntimeMethodHandle = interface(DNValueType)
  ['{BFBAB2CC-92E0-3411-8AC8-304AA081BEAE}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeMethodHandle): Boolean; overload;
    function GetFunctionPointer: IntPtr;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeMethodHandle = class(TDNGenericImport<DNRuntimeMethodHandleClass, DNRuntimeMethodHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeTypeHandleClass = interface(DNValueTypeClass)
  ['{8208DA81-8D4E-57F6-A3A5-1877A8D99D6D}']
  end;

  [DNTypeName('System.RuntimeTypeHandle')]
  DNRuntimeTypeHandle = interface(DNValueType)
  ['{65D337A9-ECE7-3022-AFDF-6C70ED6EAEFD}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeTypeHandle): Boolean; overload;
    function GetModuleHandle: DNModuleHandle;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeTypeHandle = class(TDNGenericImport<DNRuntimeTypeHandleClass, DNRuntimeTypeHandle>) end;

  //-------------namespace: System----------------
  DNSByteClass = interface(DNValueTypeClass)
  ['{1EACFE1C-E8B1-58D7-B336-065032F3CBF2}']
  { static methods } 

    {class} function Parse(s: string): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): SByte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): SByte; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): SByte; overload;
    {class} function TryParse(s: string; out result: SByte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: SByte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: SByte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: SByte): Boolean; overload;

  end;

  [DNTypeName('System.SByte')]
  DNSByte = interface(DNValueType)
  ['{010189A5-B699-3B8D-A1E9-59E9721EDAC0}']
  { methods } 

    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: SByte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: SByte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSByte = class(TDNGenericImport<DNSByteClass, DNSByte>)
  public const
   MaxValue = 127;
   MinValue = -128;
  end;

  //-------------namespace: System----------------
  DNSingleClass = interface(DNValueTypeClass)
  ['{93BDD006-8FA7-589C-B0FD-43FEC17E76AB}']
  { static methods } 

    {class} function IsFinite(f: Single): Boolean;
    {class} function IsInfinity(f: Single): Boolean;
    {class} function IsNaN(f: Single): Boolean;
    {class} function IsNegative(f: Single): Boolean;
    {class} function IsNegativeInfinity(f: Single): Boolean;
    {class} function IsNormal(f: Single): Boolean;
    {class} function IsPositiveInfinity(f: Single): Boolean;
    {class} function IsSubnormal(f: Single): Boolean;
    {class} function Parse(s: string): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Single; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Single; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Single; overload;
    {class} function TryParse(s: string; out result: Single): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Single): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Single): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Single): Boolean; overload;

  end;

  [DNTypeName('System.Single')]
  DNSingle = interface(DNValueType)
  ['{F50DAC9A-07F9-3D7D-B430-CEFA06BE01D1}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Single): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Single): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSingle = class(TDNGenericImport<DNSingleClass, DNSingle>)
  public const
   MinValue = -3.4028235E+38;
   Epsilon = 1E-45;
   MaxValue = 3.4028235E+38;
  end;

  //-------------namespace: System----------------
  DNSpanClass<T> = interface(DNValueTypeClass)
  ['{2D997C0B-1D36-5D32-8E4B-FD194039849C}']
  { static getter & setter } 

    {class} function get_Empty: DNSpan<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNSpan<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNSpan<T>; overload;
    {class} function init(var pointer: DNVoid; length: Int32): DNSpan<T>; overload;

  { static propertys } 

    {class} property Empty: DNSpan<T> read get_Empty;
  end;

  [DNTypeName('System.Span`1')]
  DNSpan<T> = interface(DNValueType)
  ['{26B442B2-E705-3E40-9937-F25D30F7219C}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    function get_Length: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DNSpan_Enumerator<T>;
    function GetPinnableReference: T;
    procedure Clear;
    procedure Fill(value: T);
    procedure CopyTo(destination: DNSpan<T>);
    function TryCopyTo(destination: DNSpan<T>): Boolean;
    function ToString: string;
    function Slice(start: Int32): DNSpan<T>; overload;
    function Slice(start: Int32; length: Int32): DNSpan<T>; overload;
    function ToArray: TArray<T>;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNSpan<T> = class(TDNGenericImport<DNSpanClass<T>, DNSpan<T>>) end;

  //-------------namespace: System----------------
  DNSpan_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{0FC6F75E-1C7D-52DA-81CB-E49A8FC63EEF}']
  end;

  [DNTypeName('System.Span`1+Enumerator')]
  DNSpan_Enumerator<T> = interface(DNValueType)
  ['{5853B63A-7BEB-3C63-AD98-67ABFFCAEFFD}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSpan_Enumerator<T> = class(TDNGenericImport<DNSpan_EnumeratorClass<T>, DNSpan_Enumerator<T>>) end;

  //-------------namespace: System.Text----------------
  DNRuneClass = interface(DNValueTypeClass)
  ['{63A00C60-D446-5AFC-9362-D82566AF1AF8}']
  { static getter & setter } 

    {class} function get_ReplacementChar: DNRune;

  { constructors } 

    {class} function init(ch: Char): DNRune; overload;
    {class} function init(highSurrogate: Char; lowSurrogate: Char): DNRune; overload;
    {class} function init(value: Int32): DNRune; overload;
    {class} function init(value: UInt32): DNRune; overload;

  { static methods } 

    {class} function DecodeFromUtf16(source: DNReadOnlySpan<Char>; out result: DNRune; out charsConsumed: Int32): DNOperationStatus;
    {class} function DecodeFromUtf8(source: DNReadOnlySpan<Byte>; out result: DNRune; out bytesConsumed: Int32): DNOperationStatus;
    {class} function DecodeLastFromUtf16(source: DNReadOnlySpan<Char>; out result: DNRune; out charsConsumed: Int32): DNOperationStatus;
    {class} function DecodeLastFromUtf8(source: DNReadOnlySpan<Byte>; out value: DNRune; out bytesConsumed: Int32): DNOperationStatus;
    {class} function GetRuneAt(input: string; index: Int32): DNRune;
    {class} function IsValid(value: Int32): Boolean; overload;
    {class} function IsValid(value: UInt32): Boolean; overload;
    {class} function TryCreate(ch: Char; out result: DNRune): Boolean; overload;
    {class} function TryCreate(highSurrogate: Char; lowSurrogate: Char; out result: DNRune): Boolean; overload;
    {class} function TryCreate(value: Int32; out result: DNRune): Boolean; overload;
    {class} function TryCreate(value: UInt32; out result: DNRune): Boolean; overload;
    {class} function TryGetRuneAt(input: string; index: Int32; out value: DNRune): Boolean;
    {class} function GetNumericValue(value: DNRune): Double;
    {class} function GetUnicodeCategory(value: DNRune): DNUnicodeCategory;
    {class} function IsControl(value: DNRune): Boolean;
    {class} function IsDigit(value: DNRune): Boolean;
    {class} function IsLetter(value: DNRune): Boolean;
    {class} function IsLetterOrDigit(value: DNRune): Boolean;
    {class} function IsLower(value: DNRune): Boolean;
    {class} function IsNumber(value: DNRune): Boolean;
    {class} function IsPunctuation(value: DNRune): Boolean;
    {class} function IsSeparator(value: DNRune): Boolean;
    {class} function IsSymbol(value: DNRune): Boolean;
    {class} function IsUpper(value: DNRune): Boolean;
    {class} function IsWhiteSpace(value: DNRune): Boolean;
    {class} function ToLower(value: DNRune; culture: DNCultureInfo): DNRune;
    {class} function ToLowerInvariant(value: DNRune): DNRune;
    {class} function ToUpper(value: DNRune; culture: DNCultureInfo): DNRune;
    {class} function ToUpperInvariant(value: DNRune): DNRune;

  { static propertys } 

    {class} property ReplacementChar: DNRune read get_ReplacementChar;
  end;

  [DNTypeName('System.Text.Rune')]
  DNRune = interface(DNValueType)
  ['{88EBD667-7F1B-3BA2-A6DA-3B2B12366E52}']
  { getters & setters } 

    function get_IsAscii: Boolean;
    function get_IsBmp: Boolean;
    function get_Plane: Int32;
    function get_Utf16SequenceLength: Int32;
    function get_Utf8SequenceLength: Int32;
    function get_Value: Int32;

  { methods } 

    function CompareTo(other: DNRune): Int32;
    function EncodeToUtf16(destination: DNSpan<Char>): Int32;
    function EncodeToUtf8(destination: DNSpan<Byte>): Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNRune): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function TryEncodeToUtf16(destination: DNSpan<Char>; out charsWritten: Int32): Boolean;
    function TryEncodeToUtf8(destination: DNSpan<Byte>; out bytesWritten: Int32): Boolean;
    function GetType: DNType;

  { propertys } 

    property IsAscii: Boolean read get_IsAscii;
    property IsBmp: Boolean read get_IsBmp;
    property Plane: Int32 read get_Plane;
    property Utf16SequenceLength: Int32 read get_Utf16SequenceLength;
    property Utf8SequenceLength: Int32 read get_Utf8SequenceLength;
    property Value: Int32 read get_Value;
  end;

  TDNRune = class(TDNGenericImport<DNRuneClass, DNRune>) end;

  //-------------namespace: System.Text----------------
  DNSpanRuneEnumeratorClass = interface(DNValueTypeClass)
  ['{EC2B934B-B245-53BC-A1FF-94671BAEAB29}']
  end;

  [DNTypeName('System.Text.SpanRuneEnumerator')]
  DNSpanRuneEnumerator = interface(DNValueType)
  ['{8D44B62E-E64E-34CA-AC94-E227E676BFAA}']
  { getters & setters } 

    function get_Current: DNRune;

  { methods } 

    function GetEnumerator: DNSpanRuneEnumerator;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: DNRune read get_Current;
  end;

  TDNSpanRuneEnumerator = class(TDNGenericImport<DNSpanRuneEnumeratorClass, DNSpanRuneEnumerator>) end;

  //-------------namespace: System.Text----------------
  DNStringBuilder_ChunkEnumeratorClass = interface(DNValueTypeClass)
  ['{35C7E248-E56F-5238-97FB-7FE8153F488E}']
  end;

  [DNTypeName('System.Text.StringBuilder+ChunkEnumerator')]
  DNStringBuilder_ChunkEnumerator = interface(DNValueType)
  ['{BD043B4E-8EA2-31DF-990C-917CC87007FC}']
  { getters & setters } 

    function get_Current: DNReadOnlyMemory<Char>;

  { methods } 

    function GetEnumerator: DNStringBuilder_ChunkEnumerator;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: DNReadOnlyMemory<Char> read get_Current;
  end;

  TDNStringBuilder_ChunkEnumerator = class(TDNGenericImport<DNStringBuilder_ChunkEnumeratorClass, DNStringBuilder_ChunkEnumerator>) end;

  //-------------namespace: System.Text----------------
  DNStringRuneEnumeratorClass = interface(DNValueTypeClass)
  ['{D6C2C86D-E6C3-55DF-A36D-EDA805199E91}']
  end;

  [DNTypeName('System.Text.StringRuneEnumerator')]
  DNStringRuneEnumerator = interface(DNValueType)
  ['{85F92B83-B699-3A99-B4D0-235591632756}']
  { getters & setters } 

    function get_Current: DNRune;

  { methods } 

    function GetEnumerator: DNStringRuneEnumerator;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: DNRune read get_Current;
  end;

  TDNStringRuneEnumerator = class(TDNGenericImport<DNStringRuneEnumeratorClass, DNStringRuneEnumerator>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncFlowControlClass = interface(DNValueTypeClass)
  ['{D4ABD698-F73C-581D-9E1D-0ED16597A1D5}']
  end;

  [DNTypeName('System.Threading.AsyncFlowControl')]
  DNAsyncFlowControl = interface(DNValueType)
  ['{E3E5EAA7-3558-30BE-B0B4-15D24DFD19BB}']
  { methods } 

    procedure Undo;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNAsyncFlowControl): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncFlowControl = class(TDNGenericImport<DNAsyncFlowControlClass, DNAsyncFlowControl>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalValueChangedArgsClass<T> = interface(DNValueTypeClass)
  ['{1CF1D0D8-BC88-5956-8A51-4AF2741D387F}']
  end;

  [DNTypeName('System.Threading.AsyncLocalValueChangedArgs`1')]
  DNAsyncLocalValueChangedArgs<T> = interface(DNValueType)
  ['{9507DE5C-467F-3E7E-A006-8DADD54DBC76}']
  { getters & setters } 

    function get_PreviousValue: T;
    function get_CurrentValue: T;
    function get_ThreadContextChanged: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PreviousValue: T read get_PreviousValue;
    property CurrentValue: T read get_CurrentValue;
    property ThreadContextChanged: Boolean read get_ThreadContextChanged;
  end;

  TDNAsyncLocalValueChangedArgs<T> = class(TDNGenericImport<DNAsyncLocalValueChangedArgsClass<T>, DNAsyncLocalValueChangedArgs<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenClass = interface(DNValueTypeClass)
  ['{36BBC251-4D3F-5EC9-A9FC-73412A1AF8DD}']
  { static getter & setter } 

    {class} function get_None: DNCancellationToken;

  { constructors } 

    {class} function init(canceled: Boolean): DNCancellationToken;

  { static propertys } 

    {class} property None: DNCancellationToken read get_None;
  end;

  [DNTypeName('System.Threading.CancellationToken')]
  DNCancellationToken = interface(DNValueType)
  ['{23041050-62D4-3D95-B754-C26D4811B8A0}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_CanBeCanceled: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    function &Register(callback: DNAction): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function UnsafeRegister(callback: DNAction<DNObject>; state: DNObject): DNCancellationTokenRegistration;
    function Equals(other: DNCancellationToken): Boolean; overload;
    function Equals(other: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure ThrowIfCancellationRequested;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property CanBeCanceled: Boolean read get_CanBeCanceled;
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCancellationToken = class(TDNGenericImport<DNCancellationTokenClass, DNCancellationToken>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenRegistrationClass = interface(DNValueTypeClass)
  ['{91438817-D3C9-5D86-A27D-5E6EE3A0386D}']
  end;

  [DNTypeName('System.Threading.CancellationTokenRegistration')]
  DNCancellationTokenRegistration = interface(DNValueType)
  ['{0D17A2AA-B584-3B00-A500-013B72860866}']
  { getters & setters } 

    function get_Token: DNCancellationToken;

  { methods } 

    procedure Dispose;
    function DisposeAsync: DNValueTask;
    function Unregister: Boolean;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNCancellationTokenRegistration): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenRegistration = class(TDNGenericImport<DNCancellationTokenRegistrationClass, DNCancellationTokenRegistration>) end;

  //-------------namespace: System.Threading----------------
  DNNativeOverlappedClass = interface(DNValueTypeClass)
  ['{AA581BB4-6985-5263-BBF9-000395D025E1}']
  end;

  [DNTypeName('System.Threading.NativeOverlapped')]
  DNNativeOverlapped = interface(DNValueType)
  ['{C7B6B94A-C19C-31CF-9059-94BD6915ACF2}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNNativeOverlapped = class(TDNGenericImport<DNNativeOverlappedClass, DNNativeOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSpinLockClass = interface(DNValueTypeClass)
  ['{21B766BE-1C73-5B8F-9DF4-94C8FE6B0B47}']
  { constructors } 

    {class} function init(enableThreadOwnerTracking: Boolean): DNSpinLock;

  end;

  [DNTypeName('System.Threading.SpinLock')]
  DNSpinLock = interface(DNValueType)
  ['{A2F0ABA5-9D06-3461-A2F4-211C3C433568}']
  { getters & setters } 

    function get_IsHeld: Boolean;
    function get_IsHeldByCurrentThread: Boolean;
    function get_IsThreadOwnerTrackingEnabled: Boolean;

  { methods } 

    procedure Enter(out lockTaken: Boolean);
    procedure TryEnter(out lockTaken: Boolean); overload;
    procedure TryEnter(timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    procedure TryEnter(millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    procedure &Exit; overload;
    procedure &Exit(useMemoryBarrier: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsHeld: Boolean read get_IsHeld;
    property IsHeldByCurrentThread: Boolean read get_IsHeldByCurrentThread;
    property IsThreadOwnerTrackingEnabled: Boolean read get_IsThreadOwnerTrackingEnabled;
  end;

  TDNSpinLock = class(TDNGenericImport<DNSpinLockClass, DNSpinLock>) end;

  //-------------namespace: System.Threading----------------
  DNSpinWaitClass = interface(DNValueTypeClass)
  ['{AC5A6E27-4C9D-57E8-9F12-D82A28653371}']
  { static methods } 

    {class} procedure SpinUntil(condition: DNFunc<Boolean>); overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; timeout: DNTimeSpan): Boolean; overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; millisecondsTimeout: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Threading.SpinWait')]
  DNSpinWait = interface(DNValueType)
  ['{DBD36D9C-3696-3E66-B65A-302FA3F70A4F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NextSpinWillYield: Boolean;

  { methods } 

    procedure SpinOnce; overload;
    procedure SpinOnce(sleep1Threshold: Int32); overload;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property NextSpinWillYield: Boolean read get_NextSpinWillYield;
  end;

  TDNSpinWait = class(TDNGenericImport<DNSpinWaitClass, DNSpinWait>) end;

  //-------------namespace: System.Threading.Tasks.Sources----------------
  DNManualResetValueTaskSourceCoreClass<TResult> = interface(DNValueTypeClass)
  ['{31A55004-AF38-557E-A27C-5F301A4ED41E}']
  end;

  [DNTypeName('System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1')]
  DNManualResetValueTaskSourceCore<TResult> = interface(DNValueType)
  ['{CC3CB9CE-6653-3EE1-AC39-E1BCC03EC527}']
  { getters & setters } 

    function get_RunContinuationsAsynchronously: Boolean;
    procedure set_RunContinuationsAsynchronously(value: Boolean);
    function get_Version: Int16;

  { methods } 

    procedure Reset;
    procedure SetResult(result: TResult);
    procedure SetException(error: DNException);
    function GetStatus(token: Int16): DNValueTaskSourceStatus;
    function GetResult(token: Int16): TResult;
    procedure OnCompleted(continuation: DNAction<DNObject>; state: DNObject; token: Int16; flags: DNValueTaskSourceOnCompletedFlags);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property RunContinuationsAsynchronously: Boolean read get_RunContinuationsAsynchronously write set_RunContinuationsAsynchronously;
    property Version: Int16 read get_Version;
  end;

  TDNManualResetValueTaskSourceCore<TResult> = class(TDNGenericImport<DNManualResetValueTaskSourceCoreClass<TResult>, DNManualResetValueTaskSourceCore<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNValueTaskClass<TResult> = interface(DNValueTypeClass)
  ['{1B5D3C52-7908-52A7-8A3C-43F9BF803C2E}']
  { constructors } 

    {class} function init(result: TResult): DNValueTask<TResult>; overload;
    {class} function init(task: DNTask<TResult>): DNValueTask<TResult>; overload;
    {class} function init(source: DNIValueTaskSource<TResult>; token: Int16): DNValueTask<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ValueTask`1')]
  DNValueTask<TResult> = interface(DNValueType)
  ['{7F4A4D72-DE03-3E27-AA3D-851FB3E686F7}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_IsFaulted: Boolean;
    function get_IsCanceled: Boolean;
    function get_Result: TResult;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTask<TResult>): Boolean; overload;
    function AsTask: DNTask<TResult>;
    function Preserve: DNValueTask<TResult>;
    function GetAwaiter: DNValueTaskAwaiter<TResult>;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredValueTaskAwaitable<TResult>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property IsFaulted: Boolean read get_IsFaulted;
    property IsCanceled: Boolean read get_IsCanceled;
    property Result: TResult read get_Result;
  end;

  TDNValueTask<TResult> = class(TDNGenericImport<DNValueTaskClass<TResult>, DNValueTask<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNValueTaskClass = interface(DNValueTypeClass)
  ['{701D2701-A783-54ED-9241-5029AC50EA5D}']
  { static getter & setter } 

    {class} function get_CompletedTask: DNValueTask;

  { constructors } 

    {class} function init(task: DNTask): DNValueTask; overload;
    {class} function init(source: DNIValueTaskSource; token: Int16): DNValueTask; overload;

  { static methods } 

    {class} function FromCanceled(cancellationToken: DNCancellationToken): DNValueTask;
    {class} function FromException(exception: DNException): DNValueTask;

  { static propertys } 

    {class} property CompletedTask: DNValueTask read get_CompletedTask;
  end;

  [DNTypeName('System.Threading.Tasks.ValueTask')]
  DNValueTask = interface(DNValueType)
  ['{D9F17785-F30D-37A8-8247-BEA5431FD0C4}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_IsFaulted: Boolean;
    function get_IsCanceled: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTask): Boolean; overload;
    function AsTask: DNTask;
    function Preserve: DNValueTask;
    function GetAwaiter: DNValueTaskAwaiter;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredValueTaskAwaitable;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property IsFaulted: Boolean read get_IsFaulted;
    property IsCanceled: Boolean read get_IsCanceled;
  end;

  TDNValueTask = class(TDNGenericImport<DNValueTaskClass, DNValueTask>) end;

  //-------------namespace: System----------------
  DNTimeSpanClass = interface(DNValueTypeClass)
  ['{5152A903-97F1-56C8-9AF0-96AE17FBBCAF}']
  { constructors } 

    {class} function init(ticks: Int64): DNTimeSpan; overload;
    {class} function init(hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32; milliseconds: Int32): DNTimeSpan; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNTimeSpan;
   function __fakeFieldGet_MaxValue: DNTimeSpan;
   function __fakeFieldGet_MinValue: DNTimeSpan;

  { static fields } 

    {class} property Zero: DNTimeSpan read __fakeFieldGet_Zero;
    {class} property MaxValue: DNTimeSpan read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNTimeSpan read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function Compare(t1: DNTimeSpan; t2: DNTimeSpan): Int32;
    {class} function FromDays(value: Double): DNTimeSpan;
    {class} function Equals(t1: DNTimeSpan; t2: DNTimeSpan): Boolean; overload;
    {class} function FromHours(value: Double): DNTimeSpan;
    {class} function FromMilliseconds(value: Double): DNTimeSpan;
    {class} function FromMinutes(value: Double): DNTimeSpan;
    {class} function FromSeconds(value: Double): DNTimeSpan;
    {class} function FromTicks(value: Int64): DNTimeSpan;
    {class} function Parse(s: string): DNTimeSpan; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function TryParse(s: string; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;

  end;

  [DNTypeName('System.TimeSpan')]
  DNTimeSpan = interface(DNValueType)
  ['{9204D069-FA2B-370B-91A7-60DFB4192034}']
  { getters & setters } 

    function get_Ticks: Int64;
    function get_Days: Int32;
    function get_Hours: Int32;
    function get_Milliseconds: Int32;
    function get_Minutes: Int32;
    function get_Seconds: Int32;
    function get_TotalDays: Double;
    function get_TotalHours: Double;
    function get_TotalMilliseconds: Double;
    function get_TotalMinutes: Double;
    function get_TotalSeconds: Double;

  { methods } 

    function Add(ts: DNTimeSpan): DNTimeSpan;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNTimeSpan): Int32; overload;
    function Duration: DNTimeSpan;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(obj: DNTimeSpan): Boolean; overload;
    function GetHashCode: Int32;
    function Negate: DNTimeSpan;
    function Subtract(ts: DNTimeSpan): DNTimeSpan;
    function Multiply(factor: Double): DNTimeSpan;
    function Divide(divisor: Double): DNTimeSpan; overload;
    function Divide(ts: DNTimeSpan): Double; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): Boolean;
    function GetType: DNType;

  { propertys } 

    property Ticks: Int64 read get_Ticks;
    property Days: Int32 read get_Days;
    property Hours: Int32 read get_Hours;
    property Milliseconds: Int32 read get_Milliseconds;
    property Minutes: Int32 read get_Minutes;
    property Seconds: Int32 read get_Seconds;
    property TotalDays: Double read get_TotalDays;
    property TotalHours: Double read get_TotalHours;
    property TotalMilliseconds: Double read get_TotalMilliseconds;
    property TotalMinutes: Double read get_TotalMinutes;
    property TotalSeconds: Double read get_TotalSeconds;
  end;

  TDNTimeSpan = class(TDNGenericImport<DNTimeSpanClass, DNTimeSpan>)
  public const
   TicksPerMillisecond = 10000;
   TicksPerSecond = 10000000;
   TicksPerMinute = 600000000;
   TicksPerHour = 36000000000;
   TicksPerDay = 864000000000;
  end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_TransitionTimeClass = interface(DNValueTypeClass)
  ['{D4DD2C08-A006-5553-A713-3DE8235AA483}']
  { static methods } 

    {class} function CreateFixedDateRule(timeOfDay: DNDateTime; month: Int32; day: Int32): DNTimeZoneInfo_TransitionTime;
    {class} function CreateFloatingDateRule(timeOfDay: DNDateTime; month: Int32; week: Int32; dayOfWeek: DNDayOfWeek): DNTimeZoneInfo_TransitionTime;

  end;

  [DNTypeName('System.TimeZoneInfo+TransitionTime')]
  DNTimeZoneInfo_TransitionTime = interface(DNValueType)
  ['{505CA389-8035-3F7D-8EDE-9BED08D815A6}']
  { getters & setters } 

    function get_TimeOfDay: DNDateTime;
    function get_Month: Int32;
    function get_Week: Int32;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_IsFixedDateRule: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNTimeZoneInfo_TransitionTime): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TimeOfDay: DNDateTime read get_TimeOfDay;
    property Month: Int32 read get_Month;
    property Week: Int32 read get_Week;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property IsFixedDateRule: Boolean read get_IsFixedDateRule;
  end;

  TDNTimeZoneInfo_TransitionTime = class(TDNGenericImport<DNTimeZoneInfo_TransitionTimeClass, DNTimeZoneInfo_TransitionTime>) end;

  //-------------namespace: System----------------
  DNTypedReferenceClass = interface(DNValueTypeClass)
  ['{3DBA3301-7063-53FF-B48D-893316C14DEE}']
  { static methods } 

    {class} function MakeTypedReference(target: DNObject; flds: TArray<DNFieldInfo>): DNTypedReference;
    {class} function ToObject(value: DNTypedReference): DNObject;
    {class} function GetTargetType(value: DNTypedReference): DNType;
    {class} function TargetTypeToken(value: DNTypedReference): DNRuntimeTypeHandle;
    {class} procedure SetTypedReference(target: DNTypedReference; value: DNObject);

  end;

  [DNTypeName('System.TypedReference')]
  DNTypedReference = interface(DNValueType)
  ['{5063DE69-9982-3A56-875D-D6BFC25A8756}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTypedReference = class(TDNGenericImport<DNTypedReferenceClass, DNTypedReference>) end;

  //-------------namespace: System----------------
  DNUInt16Class = interface(DNValueTypeClass)
  ['{E09CAF5B-3793-5B5D-B29F-98A1C83CDF9B}']
  { static methods } 

    {class} function Parse(s: string): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt16; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt16; overload;
    {class} function TryParse(s: string; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt16): Boolean; overload;

  end;

  [DNTypeName('System.UInt16')]
  DNUInt16 = interface(DNValueType)
  ['{89007991-8FD7-3CB6-854D-A415DDA9E43D}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt16 = class(TDNGenericImport<DNUInt16Class, DNUInt16>)
  public const
   MaxValue = 65535;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt32Class = interface(DNValueTypeClass)
  ['{15F3224B-2E83-5ACD-A9B8-322716E5534E}']
  { static methods } 

    {class} function Parse(s: string): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt32; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt32; overload;
    {class} function TryParse(s: string; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt32): Boolean; overload;

  end;

  [DNTypeName('System.UInt32')]
  DNUInt32 = interface(DNValueType)
  ['{A4407770-1CFC-3DD3-B23A-E1768DFE3846}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt32 = class(TDNGenericImport<DNUInt32Class, DNUInt32>)
  public const
   MaxValue = 4294967295;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt64Class = interface(DNValueTypeClass)
  ['{357140BE-714D-558F-92C1-95B372C66591}']
  { static methods } 

    {class} function Parse(s: string): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt64; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt64; overload;
    {class} function TryParse(s: string; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt64): Boolean; overload;

  end;

  [DNTypeName('System.UInt64')]
  DNUInt64 = interface(DNValueType)
  ['{7CFB28FE-7243-3D86-9E0A-95A8233FD5E3}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt64 = class(TDNGenericImport<DNUInt64Class, DNUInt64>)
  public const
   MaxValue = 18446744073709551615;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUIntPtrClass = interface(DNValueTypeClass)
  ['{034265D5-5B95-5FE0-B660-89D81ACF08D9}']
  { static getter & setter } 

    {class} function get_Size: Int32;
    {class} function get_MaxValue: UIntPtr;
    {class} function get_MinValue: UIntPtr;

  { constructors } 

    {class} function init(value: UInt32): DNUIntPtr; overload;
    {class} function init(value: UInt64): DNUIntPtr; overload;
    {class} function init(var value: DNVoid): DNUIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: UIntPtr;

  { static fields } 

    {class} property Zero: UIntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: UIntPtr; offset: Int32): UIntPtr;
    {class} function Subtract(pointer: UIntPtr; offset: Int32): UIntPtr;
    {class} function Parse(s: string): UIntPtr; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UIntPtr; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UIntPtr; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UIntPtr; overload;
    {class} function TryParse(s: string; out result: UIntPtr): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UIntPtr): Boolean; overload;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
    {class} property MaxValue: UIntPtr read get_MaxValue;
    {class} property MinValue: UIntPtr read get_MinValue;
  end;

  [DNTypeName('System.UIntPtr')]
  DNUIntPtr = interface(DNValueType)
  ['{68C1B3E5-3544-30C2-AF20-E2ADF095C2CB}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToUInt32: UInt32;
    function ToUInt64: UInt64;
    function ToPointer: DNVoid;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UIntPtr): Int32; overload;
    function Equals(other: UIntPtr): Boolean; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  end;

  TDNUIntPtr = class(TDNGenericImport<DNUIntPtrClass, DNUIntPtr>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1> = interface(DNValueTypeClass)
  ['{01E81F83-FAAA-562C-A987-983EBA4A1C2E}']
  { constructors } 

    {class} function init(item1: T1): DNValueTuple<T1>;

  end;

  [DNTypeName('System.ValueTuple`1')]
  DNValueTuple<T1> = interface(DNValueType)
  ['{24BC1B9B-38B5-3F9A-AA61-7FE12D577D62}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1> = class(TDNGenericImport<DNValueTupleClass<T1>, DNValueTuple<T1>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2> = interface(DNValueTypeClass)
  ['{14D0A3A0-8260-5709-A2DA-6326388D750F}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNValueTuple<T1, T2>;

  end;

  [DNTypeName('System.ValueTuple`2')]
  DNValueTuple<T1, T2> = interface(DNValueType)
  ['{D9302163-0928-32C7-8A6C-44FA9E113457}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2> = class(TDNGenericImport<DNValueTupleClass<T1, T2>, DNValueTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3> = interface(DNValueTypeClass)
  ['{93F324AB-92B7-5D81-B9BC-395C9983B375}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNValueTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.ValueTuple`3')]
  DNValueTuple<T1, T2, T3> = interface(DNValueType)
  ['{80BA4EEF-70D0-3703-98AE-37B30EABA671}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3>, DNValueTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4> = interface(DNValueTypeClass)
  ['{E36C3E71-77C0-573E-BCAF-317F68C62C73}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNValueTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.ValueTuple`4')]
  DNValueTuple<T1, T2, T3, T4> = interface(DNValueType)
  ['{71CAC734-AEC4-36BA-8612-C039E0517871}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4>, DNValueTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5> = interface(DNValueTypeClass)
  ['{16FF7DBB-16C8-5CC7-83A7-58CCCF2052B2}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNValueTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.ValueTuple`5')]
  DNValueTuple<T1, T2, T3, T4, T5> = interface(DNValueType)
  ['{9B23DD49-F16C-3644-92A6-384920705A94}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5>, DNValueTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNValueTypeClass)
  ['{6D9E9E69-F6B5-598C-948C-5CC44E81A0EE}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNValueTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.ValueTuple`6')]
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface(DNValueType)
  ['{8B7399EE-1E21-3325-8739-C0C8886AF7B6}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6>, DNValueTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueTypeClass)
  ['{47E9339E-8A00-5E7D-8A6E-CB887936571B}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNValueTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.ValueTuple`7')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueType)
  ['{6FE60EA0-8245-3C53-8DD4-4CA8E6C76D7D}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueTypeClass)
  ['{ADF28A3C-571E-56DF-A8C0-892A1A5C8377}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.ValueTuple`8')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueType)
  ['{8286051C-BD9D-3334-AB5E-21ADA010FA50}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

// Compiler bug, fixed in XE8.
// Bug description: When unit names and type names are long enough.
{$IF RTLVersion >= 29.0}
  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;
{$ENDIF}


  //-------------namespace: System----------------
  DNValueTupleClass = interface(DNValueTypeClass)
  ['{D93D9551-B14F-58F7-9D90-75EE99F13E4F}']
  { static methods } 

    {class} function Create: DNValueTuple; overload;

  end;

  [DNTypeName('System.ValueTuple')]
  DNValueTuple = interface(DNValueType)
  ['{4E20DBB9-455A-3F98-93EF-7E0A15BDFC54}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple): Boolean; overload;
    function CompareTo(other: DNValueTuple): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple = class(TDNGenericImport<DNValueTupleClass, DNValueTuple>) end;

  //-------------namespace: System----------------
  DNVoidClass = interface(DNValueTypeClass)
  ['{4EA40558-602E-58E0-8ED7-8488B620E9AD}']
  end;

  [DNTypeName('System.Void')]
  DNVoid = interface(DNValueType)
  ['{C3B91600-1CF9-3517-AC98-9000A796282E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVoid = class(TDNGenericImport<DNVoidClass, DNVoid>) end;

  //-------------namespace: System----------------
  DNVersionClass = interface(DNObjectClass)
  ['{D08A4786-9A83-5CFA-9810-00BCAB34955C}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32; build: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32): DNVersion; overload;
    {class} function init(version: string): DNVersion; overload;
    {class} function init: DNVersion; overload;

  { static methods } 

    {class} function Parse(input: string): DNVersion; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>): DNVersion; overload;
    {class} function TryParse(input: string; out result: DNVersion): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNVersion): Boolean; overload;

  end;

  [DNTypeName('System.Version')]
  DNVersion = interface(DNICloneable)
  ['{F6D493A1-BAB6-33DB-8847-B91C5528B822}']
  { getters & setters } 

    function get_Major: Int32;
    function get_Minor: Int32;
    function get_Build: Int32;
    function get_Revision: Int32;
    function get_MajorRevision: Int16;
    function get_MinorRevision: Int16;

  { methods } 

    function Clone: DNObject;
    function CompareTo(version: DNObject): Int32; overload;
    function CompareTo(value: DNVersion): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNVersion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(fieldCount: Int32): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    function TryFormat(destination: DNSpan<Char>; fieldCount: Int32; out charsWritten: Int32): Boolean; overload;
    function GetType: DNType;

  { propertys } 

    property Major: Int32 read get_Major;
    property Minor: Int32 read get_Minor;
    property Build: Int32 read get_Build;
    property Revision: Int32 read get_Revision;
    property MajorRevision: Int16 read get_MajorRevision;
    property MinorRevision: Int16 read get_MinorRevision;
  end;

  TDNVersion = class(TDNGenericImport<DNVersionClass, DNVersion>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass<T> = interface(DNObjectClass)
  ['{FE9123D0-504C-5D4F-B054-1BD9887EAEA8}']
  { constructors } 

    {class} function init(target: T): DNWeakReference<T>; overload;
    {class} function init(target: T; trackResurrection: Boolean): DNWeakReference<T>; overload;

  end;

  [DNTypeName('System.WeakReference`1')]
  DNWeakReference<T> = interface(DNISerializable)
  ['{7137EE05-FCA3-36F1-8468-DB6A9A2E4790}']
  { methods } 

    procedure SetTarget(target: T);
    function TryGetTarget(out target: T): Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNWeakReference<T> = class(TDNGenericImport<DNWeakReferenceClass<T>, DNWeakReference<T>>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass = interface(DNObjectClass)
  ['{E6CB07B2-54A3-5535-9A1A-1A91D996FE18}']
  { constructors } 

    {class} function init(target: DNObject): DNWeakReference; overload;
    {class} function init(target: DNObject; trackResurrection: Boolean): DNWeakReference; overload;

  end;

  [DNTypeName('System.WeakReference')]
  DNWeakReference = interface(DNISerializable)
  ['{DC9F5A6C-AD3E-3CFB-B7B4-891F160C1C54}']
  { getters & setters } 

    function get_IsAlive: Boolean;
    function get_TrackResurrection: Boolean;
    function get_Target: DNObject;
    procedure set_Target(value: DNObject);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsAlive: Boolean read get_IsAlive;
    property TrackResurrection: Boolean read get_TrackResurrection;
    property Target: DNObject read get_Target write set_Target;
  end;

  TDNWeakReference = class(TDNGenericImport<DNWeakReferenceClass, DNWeakReference>) end;


implementation

{ TDNGenericImport<C, T> }

class function TDNGenericImport<C, T>.GetTypeId: DNType;
var LObj: DNNObject;
begin
  Result := nil;
  LObj := GetClsID;
  if LObj <> nil then
     Result := TDNType.Wrap(LObj);
end;

end.
